{
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    publishDir \"${params.outdir}/pipeline_info\", mode: 'copy',\n        saveAs: { filename ->\n            if (filename.indexOf(\".csv\") > 0) filename\n            else null\n        }\n\n    output:\n    file 'software_versions_mqc.yaml' into software_versions_yaml\n    file \"software_versions.csv\"\n\n    script:\n                                                                     \n    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    fastqc --version > v_fastqc.txt\n    multiqc --version > v_multiqc.txt\n    fastp --version &> v_fastp.txt\n    raxmlHPC-PTHREADS -v > v_raxml.txt\n    samtools --version > v_samtools.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    fastqc --version > v_fastqc.txt\n    multiqc --version > v_multiqc.txt\n    fastp --version &> v_fastp.txt\n    raxmlHPC-PTHREADS -v > v_raxml.txt\n    samtools --version > v_samtools.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "FastQC",
            "MultiQC",
            "fastPHASE",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/fastqc",
            "https://bio.tools/multiqc",
            "https://bio.tools/fastphase",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            },
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            },
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: 'copy' , saveAs: { filename -> if (filename.indexOf(\".csv\") > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    tag \"$name\"\n    label 'process_medium'\n    publishDir \"${params.outdir}/samples/$name\", mode: 'copy'\n\n    input:\n    set val(name), file(reads) from se_read_files_fastqc.mix(pe_read_files_fastqc)\n\n    output:\n    file \"*_fastqc.{zip,html}\" into fastqc_results\n\n    script:\n    \"\"\"\n    fastqc --threads $task.cpus $reads\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    fastqc --threads $task.cpus $reads\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "se_read_files_fastqc",
            "pe_read_files_fastqc"
        ],
        "nb_inputs": 2,
        "outputs": [
            "fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "tag \"$name\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/samples/$name\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "se_fastp": {
        "name_process": "se_fastp",
        "string_process": "\nprocess se_fastp {\n    tag \"$sample_id\"\n    label 'process_medium'\n    label 'fastp'\n    publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'\n\n    input:\n    tuple (sample_id, path (reads)) from se_read_files_trimming\n\n    output:\n    tuple (sample_id, path ('*_trimmed.fq.gz')) into (se_aln_ch, se_mlst_ch, se_amr_ch)\n    path (\"*.json\") into se_fastp_results\n    path (\"*.html\")\n\n    when:\n    !params.skip_trimming && params.se_reads\n\n    script:\n    \"\"\"\n    fastp -i ${reads[0]} -o ${reads[0].getSimpleName()}_trimmed.fq.gz -w ${task.cpus} --json ${reads[0].getSimpleName()}_fastp.json --html ${reads[0].getSimpleName()}_fastp.html\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    fastp -i ${reads[0]} -o ${reads[0].getSimpleName()}_trimmed.fq.gz -w ${task.cpus} --json ${reads[0].getSimpleName()}_fastp.json --html ${reads[0].getSimpleName()}_fastp.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "se_read_files_trimming"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "se_fastp_results"
        ],
        "nb_outputs": 2,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "tag \"$sample_id\"",
            "label 'process_medium'",
            "label 'fastp'",
            "publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'"
        ],
        "when": "!params.skip_trimming && params.se_reads",
        "stub": ""
    },
    "pe_fastp": {
        "name_process": "pe_fastp",
        "string_process": "\nprocess pe_fastp {\n    tag \"$sample_id\"\n    label 'process_medium'\n    label 'fastp'\n    publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'\n\n    input:\n    tuple (sample_id, path (reads)) from pe_read_files_trimming\n\n    output:\n    tuple (sample_id, path ('*_trimmed.fq.gz')) into (pe_aln_ch, pe_mlst_ch, pe_amr_ch)\n    path (\"*.json\") into pe_fastp_results\n    path (\"*.html\")\n\n    when:\n    !params.skip_trimming && params.pe_reads\n\n    script:\n    \"\"\"\n    fastp -i ${reads[0]} -I ${reads[1]} -o ${reads[0].getSimpleName()}_trimmed.fq.gz -O ${reads[1].getSimpleName()}_trimmed.fq.gz -w ${task.cpus} --json ${sample_id}_fastp.json --html ${sample_id}_fastp.html\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    fastp -i ${reads[0]} -I ${reads[1]} -o ${reads[0].getSimpleName()}_trimmed.fq.gz -O ${reads[1].getSimpleName()}_trimmed.fq.gz -w ${task.cpus} --json ${sample_id}_fastp.json --html ${sample_id}_fastp.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "pe_read_files_trimming"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "pe_fastp_results"
        ],
        "nb_outputs": 2,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "tag \"$sample_id\"",
            "label 'process_medium'",
            "label 'fastp'",
            "publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'"
        ],
        "when": "!params.skip_trimming && params.pe_reads",
        "stub": ""
    },
    "se_bbsketch": {
        "name_process": "se_bbsketch",
        "string_process": " process se_bbsketch {\n    tag \"$sample_id\"\n    label 'process_small'\n    publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'\n\n    input:\n    tuple (sample_id, path (reads), path (untrimmed)) from se_bbsketch_ch\n\n    output:\n    tuple(sample_id, path ('sketch_output.tab'), path (untrimmed)) into (se_bbsketch_out, se_organize_reads_ch)\n\n    when:\n    params.se_reads\n\n    script:\n    \"\"\"\n    sendsketch.sh in=${reads[0]} reads=1m samplerate=0.5 minkeycount=2 address=nt level=-1 color=f >> sketch_output.tab\n    \"\"\"\n }",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    sendsketch.sh in=${reads[0]} reads=1m samplerate=0.5 minkeycount=2 address=nt level=-1 color=f >> sketch_output.tab\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "se_bbsketch_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "tag \"$sample_id\"",
            "label 'process_small'",
            "publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'"
        ],
        "when": "params.se_reads",
        "stub": ""
    },
    "pe_bbsketch": {
        "name_process": "pe_bbsketch",
        "string_process": " process pe_bbsketch {\n    tag \"$sample_id\"\n    label 'process_small'\n    publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'\n\n    input:\n    tuple (sample_id, path (reads), path (untrimmed)) from pe_bbsketch_ch\n\n    output:\n    tuple(sample_id, path ('sketch_output.tab'), path (untrimmed)) into (pe_bbsketch_out, pe_organize_reads_ch)\n\n    when:\n    params.pe_reads\n\n    script:\n    \"\"\"\n    sendsketch.sh in=${reads[0]} reads=1m samplerate=0.5 minkeycount=2 address=nt level=-1 color=f >> sketch_output.tab\n    \"\"\"\n }",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    sendsketch.sh in=${reads[0]} reads=1m samplerate=0.5 minkeycount=2 address=nt level=-1 color=f >> sketch_output.tab\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pe_bbsketch_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "tag \"$sample_id\"",
            "label 'process_small'",
            "publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'"
        ],
        "when": "params.pe_reads",
        "stub": ""
    },
    "id_species": {
        "name_process": "id_species",
        "string_process": " process id_species {\n    tag \"$sample_id\"\n    label 'process_small'\n    publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'\n\n    input:\n    tuple (sample_id, path(bbsketch_file), path (reads)) from se_bbsketch_out.mix(pe_bbsketch_out)\n\n    output:\n    file (\"${sample_id}_species_id.tsv\") into species_id_files\n\n    script:\n    \"\"\"\n    parse_sketch_output.py -f ${bbsketch_file} --id ${sample_id} -o ${sample_id}_species_id.tsv\n    \"\"\"\n }",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    parse_sketch_output.py -f ${bbsketch_file} --id ${sample_id} -o ${sample_id}_species_id.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "se_bbsketch_out",
            "pe_bbsketch_out"
        ],
        "nb_inputs": 2,
        "outputs": [
            "species_id_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "tag \"$sample_id\"",
            "label 'process_small'",
            "publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "collect_species": {
        "name_process": "collect_species",
        "string_process": "\nprocess collect_species {\n    label 'process_small'\n    publishDir \"${params.outdir}/collected_results\", mode: 'copy'\n\n    input:\n    file \"*_species_id.tsv\" from  species_id_files.collect()\n    val (params.output)\n\n    output:\n    path (params.output)\n\n    script:\n    \"\"\"\n    collect_sketch_output.py -f *_species_id.tsv -o ${params.output}\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    collect_sketch_output.py -f *_species_id.tsv -o ${params.output}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "species_id_files",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [
            "params"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "label 'process_small'",
            "publishDir \"${params.outdir}/collected_results\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "se_organize_reads": {
        "name_process": "se_organize_reads",
        "string_process": "\nprocess se_organize_reads {\n    label 'process_small'\n\n    input:\n    tuple (sample_id, path(bbsketch_file), path (reads)) from se_organize_reads_ch\n\n    output:\n    tuple (stdout, path(reads)) into se_folder_ch\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python\n    import pandas as pd\n    \n    df = pd.read_csv('${bbsketch_file}', sep='\\t', skiprows=2)\n    try:\n        tax = df['taxName'][0]\n    except KeyError:\n        tax = 'NA NA'\n    genus, species = tax.split(' ')[:2]\n    if genus == 'Enterobacter':\n        genus_sp = 'Enterobacter_cloacae'\n    elif (genus == 'Acinetobacter') and (species == 'sp.'):\n        genus_sp = 'Acinetobacter_baumannii'\n    else:\n        genus_sp = '_'.join([genus, species])\n    print(f'{genus_sp}/se_data')\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python\n    import pandas as pd\n    \n    df = pd.read_csv('${bbsketch_file}', sep='\\t', skiprows=2)\n    try:\n        tax = df['taxName'][0]\n    except KeyError:\n        tax = 'NA NA'\n    genus, species = tax.split(' ')[:2]\n    if genus == 'Enterobacter':\n        genus_sp = 'Enterobacter_cloacae'\n    elif (genus == 'Acinetobacter') and (species == 'sp.'):\n        genus_sp = 'Acinetobacter_baumannii'\n    else:\n        genus_sp = '_'.join([genus, species])\n    print(f'{genus_sp}/se_data')\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "se_organize_reads_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "se_folder_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "label 'process_small'"
        ],
        "when": "",
        "stub": ""
    },
    "pe_organize_reads": {
        "name_process": "pe_organize_reads",
        "string_process": "\nprocess pe_organize_reads {\n    label 'process_small'\n\n    input:\n    tuple (sample_id, path(bbsketch_file), path (reads)) from pe_organize_reads_ch\n\n    output:\n    tuple (stdout, path(reads)) into pe_folder_ch\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python\n    import pandas as pd\n    \n    df = pd.read_csv('${bbsketch_file}', sep='\\t', skiprows=2)\n    try:\n        tax = df['taxName'][0]\n    except KeyError:\n        tax = 'NA NA'\n    genus, species = tax.split(' ')[:2]\n    if genus == 'Enterobacter':\n        genus_sp = 'Enterobacter_cloacae'\n    elif (genus == 'Acinetobacter') and (species == 'sp.'):\n        genus_sp = 'Acinetobacter_baumannii'\n    else:\n        genus_sp = '_'.join([genus, species])\n    print(f'{genus_sp}/pe_data')\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python\n    import pandas as pd\n    \n    df = pd.read_csv('${bbsketch_file}', sep='\\t', skiprows=2)\n    try:\n        tax = df['taxName'][0]\n    except KeyError:\n        tax = 'NA NA'\n    genus, species = tax.split(' ')[:2]\n    if genus == 'Enterobacter':\n        genus_sp = 'Enterobacter_cloacae'\n    elif (genus == 'Acinetobacter') and (species == 'sp.'):\n        genus_sp = 'Acinetobacter_baumannii'\n    else:\n        genus_sp = '_'.join([genus, species])\n    print(f'{genus_sp}/pe_data')\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pe_organize_reads_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pe_folder_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "label 'process_small'"
        ],
        "when": "",
        "stub": ""
    },
    "publish_reads": {
        "name_process": "publish_reads",
        "string_process": "\nprocess publish_reads {\n    label 'process_small'\n    publishDir \"${params.readsdir}/${species.replaceAll('\\\\s','')}\", mode: 'copy'\n\n    input:\n    tuple (species, path(reads)) from se_folder_ch.mix(pe_folder_ch)\n\n    output:\n    path (reads)\n\n    script:\n    \"\"\"\n    echo ${species}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    echo ${species}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "se_folder_ch",
            "pe_folder_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "reads"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "label 'process_small'",
            "publishDir \"${params.readsdir}/${species.replaceAll(' s','')}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir \"${params.outdir}/MultiQC\", mode: 'copy'\n\n    input:\n    file multiqc_config from ch_multiqc_config\n                                                                                  \n    file ('fastqc/*') from fastqc_results.collect().ifEmpty([])\n    file ('software_versions/*') from software_versions_yaml.collect()\n    file workflow_summary from create_workflow_summary(summary)\n    path (fastp_results) from se_fastp_results.mix(pe_fastp_results).collect().ifEmpty([])\n\n    output:\n    file \"*multiqc_report.html\" into multiqc_report\n    file \"*_data\"\n    file \"multiqc_plots\"\n\n    script:\n    rtitle = custom_runName ? \"--title \\\"$custom_runName\\\"\" : ''\n    rfilename = custom_runName ? \"--filename \" + custom_runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n                                                                                       \n    \"\"\"\n    multiqc -f $rtitle $rfilename --config $multiqc_config . ${fastp_results}\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    rtitle = custom_runName ? \"--title \\\"$custom_runName\\\"\" : ''\n    rfilename = custom_runName ? \"--filename \" + custom_runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n                                                                                       \n    \"\"\"\n    multiqc -f $rtitle $rfilename --config $multiqc_config . ${fastp_results}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "ch_multiqc_config",
            "fastqc_results",
            "software_versions_yaml",
            "summary",
            "se_fastp_results",
            "pe_fastp_results"
        ],
        "nb_inputs": 6,
        "outputs": [
            "multiqc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "publishDir \"${params.outdir}/MultiQC\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "output_documentation": {
        "name_process": "output_documentation",
        "string_process": "\nprocess output_documentation {\n    publishDir \"${params.outdir}/pipeline_info\", mode: 'copy'\n\n    input:\n    file output_docs from ch_output_docs\n\n    output:\n    file \"results_description.html\"\n\n    script:\n    \"\"\"\n    markdown_to_html.r $output_docs results_description.html\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    markdown_to_html.r $output_docs results_description.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_output_docs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "se_srst2_mlst": {
        "name_process": "se_srst2_mlst",
        "string_process": " process se_srst2_mlst {\n      tag \"$sample_id\"\n      label 'srst2'\n      label 'srst2_mlst'\n      label 'process_low'\n      publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'\n  \n      input:\n      tuple (sample_id, path (reads)) from se_mlst_ch\n      path(mlst_db)\n      path(mlst_def)\n  \n      output:\n      file \"${sample_id}__mlst__${mlst_db.getSimpleName()}__results.txt\" into se_mlst_results\n  \n      script:\n      \"\"\"\n      mv ${reads[0]} ${sample_id}.fq.gz\n  \n      srst2 --output ${sample_id} \\\n      --input_se ${sample_id}.fq.gz \\\n      --mlst_db ${mlst_db} \\\n      --mlst_definitions ${mlst_def} \\\n      --mlst_delim \"_\" --log\n      \"\"\"\n  }",
        "nb_lignes_process": 24,
        "string_script": "      \"\"\"\n      mv ${reads[0]} ${sample_id}.fq.gz\n  \n      srst2 --output ${sample_id} \\\n      --input_se ${sample_id}.fq.gz \\\n      --mlst_db ${mlst_db} \\\n      --mlst_definitions ${mlst_def} \\\n      --mlst_delim \"_\" --log\n      \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "se_mlst_ch",
            "mlst_db",
            "mlst_def"
        ],
        "nb_inputs": 3,
        "outputs": [
            "se_mlst_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "tag \"$sample_id\"",
            "label 'srst2'",
            "label 'srst2_mlst'",
            "label 'process_low'",
            "publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pe_srst2_mlst": {
        "name_process": "pe_srst2_mlst",
        "string_process": " process pe_srst2_mlst {\n      tag \"$sample_id\"\n      label 'srst2'\n      label 'srst2_mlst'\n      label 'process_low'\n      publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'\n  \n      input:\n      tuple (sample_id, path (reads)) from pe_mlst_ch\n      path(mlst_db)\n      path(mlst_def)\n      val forward_suffix from params.forward_suffix\n      val reverse_suffix from params.reverse_suffix\n  \n      output:\n      file \"${sample_id}__mlst__${mlst_db.getSimpleName()}__results.txt\" into pe_mlst_results\n  \n      script:\n      \"\"\"\n      srst2 --output ${sample_id} \\\n      --input_pe ${reads[0]} ${reads[1]} \\\n      --mlst_db ${mlst_db} \\\n      --mlst_definitions ${mlst_def} \\\n      --mlst_delim \"_\" --forward ${forward_suffix}_trimmed --reverse ${reverse_suffix}_trimmed --log\n      \"\"\"\n  }",
        "nb_lignes_process": 24,
        "string_script": "      \"\"\"\n      srst2 --output ${sample_id} \\\n      --input_pe ${reads[0]} ${reads[1]} \\\n      --mlst_db ${mlst_db} \\\n      --mlst_definitions ${mlst_def} \\\n      --mlst_delim \"_\" --forward ${forward_suffix}_trimmed --reverse ${reverse_suffix}_trimmed --log\n      \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pe_mlst_ch",
            "mlst_db",
            "mlst_def",
            "params",
            "params"
        ],
        "nb_inputs": 5,
        "outputs": [
            "pe_mlst_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "tag \"$sample_id\"",
            "label 'srst2'",
            "label 'srst2_mlst'",
            "label 'process_low'",
            "publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "se_srst2_amr": {
        "name_process": "se_srst2_amr",
        "string_process": " process se_srst2_amr {\n      tag \"$sample_id\"\n      label 'srst2'\n      label 'srst2_amr'\n      label 'process_low'\n      publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'\n  \n      input:\n      tuple (sample_id, path(reads)) from se_amr_ch\n      path(amr_db)\n  \n      output:\n      file (\"${sample_id}__fullgenes__${amr_db.getSimpleName()}__results.txt\") into se_fullgenes_results\n      file (\"${sample_id}__genes__${amr_db.getSimpleName()}__results.txt\") into se_amr_results\n  \n      script:\n      \"\"\"\n      mv ${reads[0]} ${sample_id}.fq.gz\n      srst2 --output ${sample_id} \\\n       --input_se ${sample_id}.fq.gz \\\n       --gene_db ${amr_db} --log\n      \"\"\"\n  }",
        "nb_lignes_process": 21,
        "string_script": "      \"\"\"\n      mv ${reads[0]} ${sample_id}.fq.gz\n      srst2 --output ${sample_id} \\\n       --input_se ${sample_id}.fq.gz \\\n       --gene_db ${amr_db} --log\n      \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "se_amr_ch",
            "amr_db"
        ],
        "nb_inputs": 2,
        "outputs": [
            "se_fullgenes_results",
            "se_amr_results"
        ],
        "nb_outputs": 2,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "tag \"$sample_id\"",
            "label 'srst2'",
            "label 'srst2_amr'",
            "label 'process_low'",
            "publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pe_srst2_amr": {
        "name_process": "pe_srst2_amr",
        "string_process": " process pe_srst2_amr {\n      tag \"$sample_id\"\n      label 'srst2'\n      label 'srst2_amr'\n      label 'process_low'\n      publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'\n  \n      input:\n      tuple (sample_id, path(reads)) from pe_amr_ch\n      path(amr_db)\n      val forward_suffix from params.forward_suffix\n      val reverse_suffix from params.reverse_suffix\n  \n      output:\n      file (\"${sample_id}__fullgenes__${amr_db.getSimpleName()}__results.txt\") into pe_fullgenes_results\n      file (\"${sample_id}__genes__${amr_db.getSimpleName()}__results.txt\") into pe_amr_results\n  \n      script:\n      \"\"\"\n      srst2 --output ${sample_id} \\\n       --input_pe ${reads[0]} ${reads[1]} \\\n       --gene_db ${amr_db} --log --forward ${forward_suffix}_trimmed --reverse ${reverse_suffix}_trimmed \n      \"\"\" \n  }",
        "nb_lignes_process": 22,
        "string_script": "      \"\"\"\n      srst2 --output ${sample_id} \\\n       --input_pe ${reads[0]} ${reads[1]} \\\n       --gene_db ${amr_db} --log --forward ${forward_suffix}_trimmed --reverse ${reverse_suffix}_trimmed \n      \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pe_amr_ch",
            "amr_db",
            "params",
            "params"
        ],
        "nb_inputs": 4,
        "outputs": [
            "pe_fullgenes_results",
            "pe_amr_results"
        ],
        "nb_outputs": 2,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "tag \"$sample_id\"",
            "label 'srst2'",
            "label 'srst2_amr'",
            "label 'process_low'",
            "publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "compile_srst2": {
        "name_process": "compile_srst2",
        "string_process": " process compile_srst2 {\n      label 'srst2'\n      label 'process_low'\n      publishDir \"${params.outdir}/\", mode: 'copy'\n  \n      input:\n      path (amr_files) from se_amr_results.mix(pe_amr_results).collect()\n      path (mlst_files) from se_mlst_results.mix(pe_mlst_results).collect()\n  \n      output:\n      path(\"*compiledResults.txt\")\n  \n      script:\n      \"\"\"\n      srst2 --prev_output ${amr_files} ${mlst_files} --output srst2\n      \"\"\"\n  }",
        "nb_lignes_process": 15,
        "string_script": "      \"\"\"\n      srst2 --prev_output ${amr_files} ${mlst_files} --output srst2\n      \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "se_amr_results",
            "pe_amr_results",
            "se_mlst_results",
            "pe_mlst_results"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "label 'srst2'",
            "label 'process_low'",
            "publishDir \"${params.outdir}/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bgzip_fasta": {
        "name_process": "bgzip_fasta",
        "string_process": "\nprocess bgzip_fasta {\n    label 'process_low'\n    publishDir \"${params.outdir}\"\n\n    input:\n    path(fasta) from ch_fasta\n\n    output:\n    path(\"reference.fa.gz\") into bgzip_fasta_ch\n\n    when:\n    params.fasta\n\n    script:\n    \"\"\"\n    mv ${fasta} reference.fa\n    bgzip reference.fa\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    mv ${fasta} reference.fa\n    bgzip reference.fa\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bgzip_fasta_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\""
        ],
        "when": "params.fasta",
        "stub": ""
    },
    "samtools_faidx": {
        "name_process": "samtools_faidx",
        "string_process": "\nprocess samtools_faidx {\n    label 'process_low'\n    publishDir \"${params.outdir}\", mode: 'copy'\n\n    input:\n    path(fasta_gz) from bgzip_fasta_ch\n\n    output:\n    tuple(path(fasta_gz), path(\"${fasta_gz}.fai\")) into (fasta_gz_ch, asm_fasta_ch)\n\n    when:\n    params.fasta\n\n    script:\n    \"\"\"\n    samtools faidx ${fasta_gz}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    samtools faidx ${fasta_gz}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bgzip_fasta_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "params.fasta",
        "stub": ""
    },
    "generate_consensus_sr": {
        "name_process": "generate_consensus_sr",
        "string_process": "\nprocess generate_consensus_sr {\n    tag \"${sample_id}\"\n    label 'spid_docker'\n    label 'process_medium'\n    publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'\n\n    input:\n    tuple(path(fasta_gz), path(fasta_gz_idx)) from fasta_gz_ch\n    tuple(sample_id, path(reads)) from se_aln_ch.mix(pe_aln_ch)\n\n    output:\n    path(\"${sample_id}.fa\") into consensus_sr_ch\n    path(\"${sample_id}.bam\")\n    path(\"${sample_id}.bam.bai\")\n\n    when:\n    params.fasta\n\n    script:\n    \"\"\"\n    spid.jl align_short_reads ${sample_id} ${fasta_gz} ${reads} --threads ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    spid.jl align_short_reads ${sample_id} ${fasta_gz} ${reads} --threads ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta_gz_ch",
            "se_aln_ch",
            "pe_aln_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "consensus_sr_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "tag \"${sample_id}\"",
            "label 'spid_docker'",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'"
        ],
        "when": "params.fasta",
        "stub": ""
    },
    "generate_consensus_asm": {
        "name_process": "generate_consensus_asm",
        "string_process": "\nprocess generate_consensus_asm {\n    tag \"${sample_id}\"\n    label 'spid_docker'\n    label 'process_medium'\n    publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'\n\n    input:\n    tuple (path(fasta_gz), path(fasta_gz_idx)) from asm_fasta_ch\n    tuple (sample_id, path(asm)) from asm_ch\n\n    output:\n    path(\"${sample_id}.fa\") into consensus_asm_ch\n    path(\"${sample_id}.bam\")\n    path(\"${sample_id}.bam.bai\")\n\n    when:\n    params.fasta && params.assemblies\n\n    script:\n    \"\"\"\n    spid.jl align_assembly ${sample_id} ${fasta_gz} ${asm} --threads ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    spid.jl align_assembly ${sample_id} ${fasta_gz} ${asm} --threads ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "asm_fasta_ch",
            "asm_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "consensus_asm_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "tag \"${sample_id}\"",
            "label 'spid_docker'",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/samples/${sample_id}\", mode: 'copy'"
        ],
        "when": "params.fasta && params.assemblies",
        "stub": ""
    },
    "merge_sample_fastas": {
        "name_process": "merge_sample_fastas",
        "string_process": "\nprocess merge_sample_fastas {\n    label 'spid_docker'\n    label 'process_high'\n    publishDir \"${params.outdir}\", mode: 'copy'\n\n    input:\n    path(consensus_fa) from consensus_sr_ch.mix(consensus_asm_ch).collect()\n\n    output:\n    tuple(path(\"merge_aligned_fastas.fa\"), path(\"merge_aligned_fastas.variantsOnly.fa\"), path(\"merge_aligned_fastas.fa.pairwise_diffs.csv\")) into merge_sample_fastas_ch\n    path(\"merge_aligned_fastas.variantsOnly.fa\") into raxml_ch\n\n    when:\n    params.fasta\n\n    script:\n    \"\"\"\n    JULIA_NUM_THREADS=${task.cpus} spid.jl merge_alignments merge_aligned_fastas ${consensus_fa}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    JULIA_NUM_THREADS=${task.cpus} spid.jl merge_alignments merge_aligned_fastas ${consensus_fa}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "consensus_sr_ch",
            "consensus_asm_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "merge_sample_fastas_ch",
            "raxml_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "label 'spid_docker'",
            "label 'process_high'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "params.fasta",
        "stub": ""
    },
    "count_num_sites": {
        "name_process": "count_num_sites",
        "string_process": "\nprocess count_num_sites {\n    label 'process_low'\n    publishDir \"${params.outdir}\", mode: 'copy'\n\n    input:\n    tuple(path(all_sites), path(variant_sites), path(pairwise_diffs)) from merge_sample_fastas_ch\n\n    output:\n    path(\"num_sites.json\")\n\n    when:\n    params.fasta\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python\n\n    from Bio import SeqIO\n    import json\n\n    n_sites_all = len(next(SeqIO.parse(\"${all_sites}\", \"fasta\")))\n    n_sites_var = len(next(SeqIO.parse(\"${variant_sites}\", \"fasta\")))\n    with open(\"num_sites.json\", \"w\") as f:\n        json.dump({\"n_sites_all\": n_sites_all,\n                   \"n_sites_variant\": n_sites_var}, f, indent=True)\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python\n\n    from Bio import SeqIO\n    import json\n\n    n_sites_all = len(next(SeqIO.parse(\"${all_sites}\", \"fasta\")))\n    n_sites_var = len(next(SeqIO.parse(\"${variant_sites}\", \"fasta\")))\n    with open(\"num_sites.json\", \"w\") as f:\n        json.dump({\"n_sites_all\": n_sites_all,\n                   \"n_sites_variant\": n_sites_var}, f, indent=True)\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "merge_sample_fastas_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "params.fasta",
        "stub": ""
    },
    "raxml": {
        "name_process": "raxml",
        "string_process": "\nprocess raxml {\n    publishDir \"${params.outdir}\", mode: 'copy'\n    label 'process_high'\n\n    input:\n    path(fasta) from raxml_ch\n\n    output:\n    path(\"RAxML_bestTree.run_simple12345.${fasta}\")\n\n    when:\n    params.fasta\n\n    script:\n    \"\"\"\n    raxmlHPC-PTHREADS -V -m ASC_GTRCAT -n run_simple12345.${fasta} -s ${fasta} -p 12345 -T 10 --asc-corr=lewis\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    raxmlHPC-PTHREADS -V -m ASC_GTRCAT -n run_simple12345.${fasta} -s ${fasta} -p 12345 -T 10 --asc-corr=lewis\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "raxml_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "samlhao__nextflow-spid",
        "directive": [
            "publishDir \"${params.outdir}\", mode: 'copy'",
            "label 'process_high'"
        ],
        "when": "params.fasta",
        "stub": ""
    }
}
{
    "SICILIAN_ANNSPLICES": {
        "name_process": "SICILIAN_ANNSPLICES",
        "string_process": "\nprocess SICILIAN_ANNSPLICES {\n    tag \"${meta.id}\"\n    label 'process_small'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n                                                    \n                                                                                                 \n                                                                                                                                      \n                                                                                                                                              \n    conda (params.enable_conda ? \"conda-forge::pandas=1.1.5\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/YOUR-TOOL-HERE\"\n    } else {\n        container \"docker.io/czbiohub/sicilian:dev\"\n    }\n\n    input:\n                                                                                                           \n                                                                                 \n                                                                                                                 \n                                                                                              \n                                                                                             \n                                                                                      \n    tuple val(meta), path(sicilian_called_splices)\n    path exon_bounds\n    path splices\n\n    output:\n                                                                                  \n    tuple val(meta), path(\"*sicilian_called_splice_juncs__annotated.tsv\"), emit: sicilian_called_splices\n                                                                         \n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    ls -lha\n    ann_splices.py \\\\\n        -i ${sicilian_called_splices} \\\\\n        -o ${prefix}__sicilian_called_splice_juncs__annotated.tsv \\\\\n        -e ${exon_bounds} \\\\\n        -s ${splices}\n    python -c 'import pandas; print(pandas.__version__)' > ${software}__pandas.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    ls -lha\n    ann_splices.py \\\\\n        -i ${sicilian_called_splices} \\\\\n        -o ${prefix}__sicilian_called_splice_juncs__annotated.tsv \\\\\n        -e ${exon_bounds} \\\\\n        -s ${splices}\n    python -c 'import pandas; print(pandas.__version__)' > ${software}__pandas.version.txt\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "sicilian_called_splices",
            "exon_bounds",
            "splices"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_small'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::pandas=1.1.5\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/YOUR-TOOL-HERE\" } else { container \"docker.io/czbiohub/sicilian:dev\" }"
        ],
        "when": "",
        "stub": ""
    },
    "STAR_ALIGN": {
        "name_process": "STAR_ALIGN",
        "string_process": "\nprocess STAR_ALIGN {\n    tag \"${meta.id}\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n                                                         \n    conda (params.enable_conda ? 'bioconda::star=2.7.5a' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/star:2.7.5a--0'\n    } else {\n        container 'quay.io/biocontainers/star:2.7.5a--0'\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  gtf\n\n    output:\n    tuple val(meta), path('*d.out.bam')       , emit: bam\n    tuple val(meta), path('*Log.final.out')   , emit: log_final\n    tuple val(meta), path('*Log.out')         , emit: log_out\n    tuple val(meta), path('*Log.progress.out'), emit: log_progress\n    path  '*.version.txt'                          , emit: version\n    tuple val(meta), path('*ReadsPerGene.out.tab')                  , emit: reads_per_gene\n    tuple val(meta), path('*SJ.out.tab')                            , emit: sj_out_tab\n    tuple val(meta), path('*Chimeric.out.junction')                 , emit: chimeric_out_junction\n\n    tuple val(meta), path('*sortedByCoord.out.bam')  , optional:true, emit: bam_sorted\n    tuple val(meta), path('*toTranscriptome.out.bam'), optional:true, emit: bam_transcript\n    tuple val(meta), path('*Aligned.unsort.out.bam') , optional:true, emit: bam_unsorted\n    tuple val(meta), path('*fastq.gz')               , optional:true, emit: fastq\n\n\n    script:\n    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def ignore_gtf = params.star_ignore_sjdbgtf ? '' : \"--sjdbGTFfile $gtf\"\n    def seq_center = params.seq_center ? \"--outSAMattrRGline ID:$prefix 'CN:$params.seq_center' 'SM:$prefix'\" : \"--outSAMattrRGline ID:$prefix 'SM:$prefix'\"\n    def out_sam_type = (options.args.contains('--outSAMtype')) ? '' : '--outSAMtype BAM Unsorted'\n    def mv_unsorted_bam = (options.args.contains('--outSAMtype BAM Unsorted SortedByCoordinate')) ? \"mv ${prefix}.Aligned.out.bam ${prefix}.Aligned.unsort.out.bam\" : ''\n    def reads_v2 = params.tenx ? \"${reads[1]}\" : \"${reads}\"\n    if (params.tenx) {\n        if (params.skip_umitools) {\n                                                                                                               \n            reads_v2 = \"${reads[0]}\"\n        } else {\n                                                                                                         \n            reads_v2 = \"${reads[1]}\"\n        }\n    } else {\n        reads_v2 = \"${reads}\"\n    }\n    \"\"\"\n    STAR \\\\\n        --genomeDir $index \\\\\n        --readFilesIn $reads_v2  \\\\\n        --runThreadN $task.cpus \\\\\n        --outFileNamePrefix $prefix. \\\\\n        $out_sam_type \\\\\n        $ignore_gtf \\\\\n        $seq_center \\\\\n        $options.args\n\n    $mv_unsorted_bam\n\n    if [ -f ${prefix}.Unmapped.out.mate1 ]; then\n        mv ${prefix}.Unmapped.out.mate1 ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_1.fastq\n    fi\n    if [ -f ${prefix}.Unmapped.out.mate2 ]; then\n        mv ${prefix}.Unmapped.out.mate2 ${prefix}.unmapped_2.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    STAR --version | sed -e \"s/STAR_//g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 79,
        "string_script": "    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def ignore_gtf = params.star_ignore_sjdbgtf ? '' : \"--sjdbGTFfile $gtf\"\n    def seq_center = params.seq_center ? \"--outSAMattrRGline ID:$prefix 'CN:$params.seq_center' 'SM:$prefix'\" : \"--outSAMattrRGline ID:$prefix 'SM:$prefix'\"\n    def out_sam_type = (options.args.contains('--outSAMtype')) ? '' : '--outSAMtype BAM Unsorted'\n    def mv_unsorted_bam = (options.args.contains('--outSAMtype BAM Unsorted SortedByCoordinate')) ? \"mv ${prefix}.Aligned.out.bam ${prefix}.Aligned.unsort.out.bam\" : ''\n    def reads_v2 = params.tenx ? \"${reads[1]}\" : \"${reads}\"\n    if (params.tenx) {\n        if (params.skip_umitools) {\n                                                                                                               \n            reads_v2 = \"${reads[0]}\"\n        } else {\n                                                                                                         \n            reads_v2 = \"${reads[1]}\"\n        }\n    } else {\n        reads_v2 = \"${reads}\"\n    }\n    \"\"\"\n    STAR \\\\\n        --genomeDir $index \\\\\n        --readFilesIn $reads_v2  \\\\\n        --runThreadN $task.cpus \\\\\n        --outFileNamePrefix $prefix. \\\\\n        $out_sam_type \\\\\n        $ignore_gtf \\\\\n        $seq_center \\\\\n        $options.args\n\n    $mv_unsorted_bam\n\n    if [ -f ${prefix}.Unmapped.out.mate1 ]; then\n        mv ${prefix}.Unmapped.out.mate1 ${prefix}.unmapped_1.fastq\n        gzip ${prefix}.unmapped_1.fastq\n    fi\n    if [ -f ${prefix}.Unmapped.out.mate2 ]; then\n        mv ${prefix}.Unmapped.out.mate2 ${prefix}.unmapped_2.fastq\n        gzip ${prefix}.unmapped_2.fastq\n    fi\n\n    STAR --version | sed -e \"s/STAR_//g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 41,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "gtf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::star=2.7.5a' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/star:2.7.5a--0' } else { container 'quay.io/biocontainers/star:2.7.5a--0' }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    cache false\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.csv\"     , emit: csv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "GFFREAD": {
        "name_process": "GFFREAD",
        "string_process": "\nprocess GFFREAD {\n    tag \"$gff\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::gffread=0.12.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/gffread:0.12.1--h8b12597_0\"\n    } else {\n        container \"quay.io/biocontainers/gffread:0.12.1--h8b12597_0\"\n    }\n\n    input:\n    path gff\n\n    output:\n    path \"*.gtf\"        , emit: gtf\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    gffread $gff $options.args -o ${gff.baseName}.gtf\n    echo \\$(gffread --version 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    gffread $gff $options.args -o ${gff.baseName}.gtf\n    echo \\$(gffread --version 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "gffread"
        ],
        "tools_url": [
            "https://bio.tools/gffread"
        ],
        "tools_dico": [
            {
                "name": "gffread",
                "uri": "https://bio.tools/gffread",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "program for filtering, converting and manipulating GFF files",
                "homepage": "https://ccb.jhu.edu/software/stringtie/gff.shtml"
            }
        ],
        "inputs": [
            "gff"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"$gff\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::gffread=0.12.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/gffread:0.12.1--h8b12597_0\" } else { container \"quay.io/biocontainers/gffread:0.12.1--h8b12597_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "\nprocess MULTIQC {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\"\n    } else {\n        container \"quay.io/biocontainers/multiqc:1.10.1--py_0\"\n    }\n\n    input:\n    path multiqc_config\n    path multiqc_custom_config\n    path software_versions\n    path workflow_summary\n    path ('star/*')\n    \n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"*.version.txt\"       , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_config",
            "multiqc_custom_config",
            "software_versions",
            "workflow_summary"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\" } else { container \"quay.io/biocontainers/multiqc:1.10.1--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "\nprocess SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    path samplesheet\n    val skip_star\n    val skip_classinput\n    val skip_glm\n\n    output:\n    path '*.csv'\n\n    script:                                                                     \n    def star_flag = skip_star ? '--skip-star' : ''\n    def classinput_flag = skip_classinput ? '--skip-classinput' : ''\n    def glm_flag = skip_glm ? '--skip-glm' : ''\n    \"\"\"\n    check_samplesheet.py \\\\\n        ${star_flag} \\\\\n        ${classinput_flag} \\\\\n        ${glm_flag} \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def star_flag = skip_star ? '--skip-star' : ''\n    def classinput_flag = skip_classinput ? '--skip-classinput' : ''\n    def glm_flag = skip_glm ? '--skip-glm' : ''\n    \"\"\"\n    check_samplesheet.py \\\\\n        ${star_flag} \\\\\n        ${classinput_flag} \\\\\n        ${glm_flag} \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet",
            "skip_star",
            "skip_classinput",
            "skip_glm"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"$samplesheet\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SICILIAN_CONSOLIDATE": {
        "name_process": "SICILIAN_CONSOLIDATE",
        "string_process": "\nprocess SICILIAN_CONSOLIDATE {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n                                                    \n                                                                                                 \n                                                                                                                                      \n                                                                                                                                              \n    conda (params.enable_conda ? \"conda-forge::r-tidyverse=1.3.1 conda-forge::r-data.table=1.14.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/YOUR-TOOL-HERE\"\n    } else {\n        container \"docker.io/czbiohub/sicilian:dev\"\n    }\n\n    input:\n                                                                                                           \n                                                                                 \n                                                                                                                 \n                                                                                              \n                                                                                             \n                                                                                      \n    path glm_outputs\n\n    output:\n                                                                                  \n    path \"*GLM_outputs_consolidated.txt\", emit: glm_consolidated\n                                                                         \n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    def input_path = './'\n    def run_name = './'\n    def single_end = (params.single_end || params.tenx || (!params.smartseq2)) ? '1' : '0'\n    \"\"\"\n    ls -lha\n    consolidate_GLM_output_files.R \\\\\n        ${input_path} \\\\\n        ${run_name} \\\\\n        ${single_end} \\\\\n        $options.args\n\n    ls -lha\n    Rscript -e 'cat(paste(packageVersion(\"data.table\")))' > ${software}__r-data.table.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"stringr\")))' > ${software}__r-stringr.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 58,
        "string_script": "    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    def input_path = './'\n    def run_name = './'\n    def single_end = (params.single_end || params.tenx || (!params.smartseq2)) ? '1' : '0'\n    \"\"\"\n    ls -lha\n    consolidate_GLM_output_files.R \\\\\n        ${input_path} \\\\\n        ${run_name} \\\\\n        ${single_end} \\\\\n        $options.args\n\n    ls -lha\n    Rscript -e 'cat(paste(packageVersion(\"data.table\")))' > ${software}__r-data.table.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"stringr\")))' > ${software}__r-stringr.version.txt\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "glm_outputs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::r-tidyverse=1.3.1 conda-forge::r-data.table=1.14.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/YOUR-TOOL-HERE\" } else { container \"docker.io/czbiohub/sicilian:dev\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UMITOOLS_EXTRACT": {
        "name_process": "UMITOOLS_EXTRACT",
        "string_process": "\nprocess UMITOOLS_EXTRACT {\n    tag \"${meta.id}\"\n    label \"process_low\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::umi_tools=1.1.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/umi_tools:1.1.1--py38h0213d0e_1\"\n    } else {\n        container \"quay.io/biocontainers/umi_tools:1.1.1--py38h0213d0e_1\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    tuple val(meta), path(whitelist)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    tuple val(meta), path(\"*.log\")     , emit: log\n    path  \"*.version.txt\"              , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                     \n    \"\"\"\n    umi_tools \\\\\n        extract \\\\\n        -I ${reads[0]} \\\\\n        --read2-in=${reads[1]} \\\\\n        -S ${prefix}.umi_extract_1.fastq.gz \\\\\n        --read2-out=${prefix}.umi_extract_2.fastq.gz \\\\\n        --whitelist ${whitelist} \\\\\n        $options.args \\\\\n        > ${prefix}.umi_extract.log\n\n    umi_tools --version | sed -e \"s/UMI-tools version: //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                     \n    \"\"\"\n    umi_tools \\\\\n        extract \\\\\n        -I ${reads[0]} \\\\\n        --read2-in=${reads[1]} \\\\\n        -S ${prefix}.umi_extract_1.fastq.gz \\\\\n        --read2-out=${prefix}.umi_extract_2.fastq.gz \\\\\n        --whitelist ${whitelist} \\\\\n        $options.args \\\\\n        > ${prefix}.umi_extract.log\n\n    umi_tools --version | sed -e \"s/UMI-tools version: //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "EXTRACT"
        ],
        "tools_url": [
            "https://bio.tools/extract"
        ],
        "tools_dico": [
            {
                "name": "EXTRACT",
                "uri": "https://bio.tools/extract",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "Natural language processing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0218",
                            "term": "NLP"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3778",
                                    "term": "Text annotation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3671",
                                "term": "Text"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3779",
                                "term": "Annotated text"
                            }
                        ]
                    }
                ],
                "description": "EXTRACT identifies genes/proteins, chemical compounds, organisms, environments, tissues, diseases, phenotypes and Gene Ontology terms mentioned in a given piece of text and maps them to their corresponding ontology/taxonomy entries.",
                "homepage": "https://extract.jensenlab.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "meta",
            "whitelist"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"${meta.id}\"",
            "label \"process_low\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::umi_tools=1.1.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/umi_tools:1.1.1--py38h0213d0e_1\" } else { container \"quay.io/biocontainers/umi_tools:1.1.1--py38h0213d0e_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CAT_ADDITIONAL_FASTA": {
        "name_process": "CAT_ADDITIONAL_FASTA",
        "string_process": "\nprocess CAT_ADDITIONAL_FASTA {\n    tag \"$add_fasta\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'genome', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    path fasta\n    path gtf\n    path add_fasta\n    val  biotype\n\n    output:\n    path \"${name}.fasta\", emit: fasta\n    path \"${name}.gtf\"  , emit: gtf\n\n    script:\n    def genome_name  = params.genome ? params.genome : fasta.getBaseName()\n    def biotype_name = biotype ? \"-b $biotype\" : ''\n    def add_name     = add_fasta.getBaseName()\n    name             = \"${genome_name}_${add_name}\"\n    \"\"\"\n    fasta2gtf.py -o ${add_fasta.baseName}.gtf $biotype_name $add_fasta\n    cat $fasta $add_fasta > ${name}.fasta\n    cat $gtf ${add_fasta.baseName}.gtf > ${name}.gtf\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def genome_name  = params.genome ? params.genome : fasta.getBaseName()\n    def biotype_name = biotype ? \"-b $biotype\" : ''\n    def add_name     = add_fasta.getBaseName()\n    name             = \"${genome_name}_${add_name}\"\n    \"\"\"\n    fasta2gtf.py -o ${add_fasta.baseName}.gtf $biotype_name $add_fasta\n    cat $fasta $add_fasta > ${name}.fasta\n    cat $gtf ${add_fasta.baseName}.gtf > ${name}.gtf\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "goname"
        ],
        "tools_url": [
            "https://bio.tools/goname"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            }
        ],
        "inputs": [
            "fasta",
            "gtf",
            "add_fasta",
            "biotype"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"$add_fasta\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'genome', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UMITOOLS_WHITELIST": {
        "name_process": "UMITOOLS_WHITELIST",
        "string_process": "\nprocess UMITOOLS_WHITELIST {\n    tag \"${meta.id}\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n                                                    \n                                                                                                 \n                                                                                                                                      \n                                                                                                                                              \n    conda (params.enable_conda ? \"bioconda::umi_tools=1.1.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/umi_tools:1.1.1--py38h0213d0e_1\"\n    } else {\n        container \"quay.io/biocontainers/umi_tools:1.1.1--py38h0213d0e_1\"\n    }\n\n    input:\n                                                                                                           \n                                                                                 \n                                                                                                                 \n                                                                                              \n                                                                                             \n                                                                                      \n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.whitelist.txt\")          , emit: whitelist\n    tuple val(meta), path(\"*.log\")                    , emit: log\n    tuple val(meta), path(\"*barcode_counts.png\")      , emit: barcode_counts_png\n    tuple val(meta), path(\"*barcode_knee.png\")        , emit: barcode_knee_png\n    tuple val(meta), path(\"*cell_thresholds.tsv\")     , emit: cell_thresholds\n    path  \"*.version.txt\"                             , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    \"\"\"\n    umi_tools \\\\\n        whitelist \\\\\n        -I ${reads[0]} \\\\\n        -S ${prefix}.whitelist.txt \\\\\n        $options.args \\\\\n        --plot-prefix=${prefix} \\\\\n        > ${prefix}.umi_whitelist.log\n    umi_tools --version | sed -e \"s/UMI-tools version: //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    \"\"\"\n    umi_tools \\\\\n        whitelist \\\\\n        -I ${reads[0]} \\\\\n        -S ${prefix}.whitelist.txt \\\\\n        $options.args \\\\\n        --plot-prefix=${prefix} \\\\\n        > ${prefix}.umi_whitelist.log\n    umi_tools --version | sed -e \"s/UMI-tools version: //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::umi_tools=1.1.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/umi_tools:1.1.1--py38h0213d0e_1\" } else { container \"quay.io/biocontainers/umi_tools:1.1.1--py38h0213d0e_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SICILIAN_CREATEANNOTATOR": {
        "name_process": "SICILIAN_CREATEANNOTATOR",
        "string_process": "\nprocess SICILIAN_CREATEANNOTATOR {\n    tag \"${gtf}\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n                                                    \n                                                                                                 \n                                                                                                                                      \n                                                                                                                                              \n    conda (params.enable_conda ? \"conda-forge::pandas=1.1.5\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/pybedtools:0.8.2--py27h6a42192_1\"\n    } else {\n        container \"docker.io/czbiohub/sicilian:dev\"\n    }\n\n    input:\n                                                                                                           \n                                                                                 \n                                                                                                                 \n                                                                                              \n                                                                                             \n                                                                                      \n    path gtf\n\n    output:\n                                                                                  \n    path \"*gene_names.pkl\", emit: annotator\n    path \"*splices.pkl\", emit: splices\n    path \"*exon_bounds.pkl\", emit: exon_bounds\n                                                                         \n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    \"\"\"\n    create_annotator.py -g ${gtf} -a ${gtf.getSimpleName()}\n    python -c 'import pandas as pd; print(pd.__version__)' > pandas.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    \"\"\"\n    create_annotator.py -g ${gtf} -a ${gtf.getSimpleName()}\n    python -c 'import pandas as pd; print(pd.__version__)' > pandas.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"${gtf}\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::pandas=1.1.5\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/pybedtools:0.8.2--py27h6a42192_1\" } else { container \"docker.io/czbiohub/sicilian:dev\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SICILIAN_CLASSINPUT": {
        "name_process": "SICILIAN_CLASSINPUT",
        "string_process": "\nprocess SICILIAN_CLASSINPUT {\n    tag \"${meta.id}\"\n    label 'process_high'\n    label 'process_super_highmem'\n    label 'process_long'\n    label 'cpu_2'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n                                                    \n                                                                                                 \n                                                                                                                                      \n                                                                                                                                              \n    conda (params.enable_conda ? \"YOUR-TOOL-HERE\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/YOUR-TOOL-HERE\"\n    } else {\n        container \"docker.io/czbiohub/sicilian:dev\"\n    }\n\n    input:\n                                                                                                           \n                                                                                 \n                                                                                                                 \n                                                                                              \n                                                                                             \n                                                                                      \n    tuple val(meta), path(bam)\n    path gtf\n    path annotator\n\n    output:\n                                                                                  \n                              \n                                                                         \n    tuple val(meta), path(\"*class_input.tsv\")      , emit: class_input\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    def outpath = './'\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    light_class_input.py \\\\\n        --outpath ${outpath} \\\\\n        --gtf ${gtf} \\\\\n        --annotator ${annotator} \\\\\n        --bams ${bam} \\\\\n        --stranded_library \\\\\n        ${options.args}\n    ls -lha \n    mv class_input.tsv ${prefix}__class_input.tsv\n    python -c 'import pandas; print(pandas.__version__)' > ${software}__pandas.version.txt\n    python -c 'import pysam; print(pysam.__version__)' > ${software}__pysam.version.txt\n    python -c 'import numpy; print(numpy.__version__)' > ${software}__numpy.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 66,
        "string_script": "    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    def outpath = './'\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    light_class_input.py \\\\\n        --outpath ${outpath} \\\\\n        --gtf ${gtf} \\\\\n        --annotator ${annotator} \\\\\n        --bams ${bam} \\\\\n        --stranded_library \\\\\n        ${options.args}\n    ls -lha \n    mv class_input.tsv ${prefix}__class_input.tsv\n    python -c 'import pandas; print(pandas.__version__)' > ${software}__pandas.version.txt\n    python -c 'import pysam; print(pysam.__version__)' > ${software}__pysam.version.txt\n    python -c 'import numpy; print(numpy.__version__)' > ${software}__numpy.version.txt\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam",
            "gtf",
            "annotator"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_high'",
            "label 'process_super_highmem'",
            "label 'process_long'",
            "label 'cpu_2'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"YOUR-TOOL-HERE\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/YOUR-TOOL-HERE\" } else { container \"docker.io/czbiohub/sicilian:dev\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SICILIAN_POSTPROCESS": {
        "name_process": "SICILIAN_POSTPROCESS",
        "string_process": "\nprocess SICILIAN_POSTPROCESS {\n    label 'process_small'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n                                                    \n                                                                                                 \n                                                                                                                                      \n                                                                                                                                              \n    conda (params.enable_conda ? \"conda-forge::r-data.table=1.14.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/YOUR-TOOL-HERE\"\n    } else {\n        container \"docker.io/czbiohub/sicilian:dev\"\n    }\n\n    input:\n                                                                                                           \n                                                                                 \n                                                                                                                 \n                                                                                              \n                                                                                             \n                                                                                      \n    path sicilian_junctions_tsv\n    path glm_consolidated\n\n    output:\n                                                                                  \n    path \"*postprocessed.txt\", emit: postprocessed_txt\n                                                                         \n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    def output_filename = \"postprocessed.txt\"\n    def run_name = './'\n    def single_end = (params.single_end || params.tenx || (!params.smartseq2)) ? '1' : '0'\n    \"\"\"\n    post_processing.R \\\\\n        $glm_consolidated \\\\\n        $sicilian_junctions_tsv \\\\\n        $output_filename \\\\\n        $single_end\n    ls -lha\n    Rscript -e 'cat(paste(packageVersion(\"data.table\")))' > ${software}__r-data.table.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    def output_filename = \"postprocessed.txt\"\n    def run_name = './'\n    def single_end = (params.single_end || params.tenx || (!params.smartseq2)) ? '1' : '0'\n    \"\"\"\n    post_processing.R \\\\\n        $glm_consolidated \\\\\n        $sicilian_junctions_tsv \\\\\n        $output_filename \\\\\n        $single_end\n    ls -lha\n    Rscript -e 'cat(paste(packageVersion(\"data.table\")))' > ${software}__r-data.table.version.txt\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sicilian_junctions_tsv",
            "glm_consolidated"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "label 'process_small'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::r-data.table=1.14.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/YOUR-TOOL-HERE\" } else { container \"docker.io/czbiohub/sicilian:dev\" }"
        ],
        "when": "",
        "stub": ""
    },
    "STAR_GENOMEGENERATE": {
        "name_process": "STAR_GENOMEGENERATE",
        "string_process": "\nprocess STAR_GENOMEGENERATE {\n    tag \"$fasta\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', meta:[:], publish_by_meta:[]) }\n\n                                                         \n    conda (params.enable_conda ? \"bioconda::star=2.7.5a bioconda::samtools=1.10 conda-forge::gawk=5.1.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/star:2.7.5a--0\"\n    } else {\n        container \"docker.io/czbiohub/sicilian:dev\"\n    }\n\n    input:\n    path fasta\n    path gtf\n\n    output:\n    path \"star\"         , emit: index\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def memory   = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    def args     = options.args.tokenize()\n    if (args.contains('--genomeSAindexNbases')) {\n        \"\"\"\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $options.args\n\n        STAR --version | sed -e \"s/STAR_//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        samtools faidx $fasta\n        NUM_BASES=`gawk '{sum = sum + \\$2}END{if ((log(sum)/log(2))/2 - 1 > 14) {printf \"%.0f\", 14} else {printf \"%.0f\", (log(sum)/log(2))/2 - 1}}' ${fasta}.fai`\n\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            --genomeSAindexNbases \\$NUM_BASES \\\\\n            $memory \\\\\n            $options.args\n\n        STAR --version | sed -e \"s/STAR_//g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 60,
        "string_script": "    def software = getSoftwareName(task.process)\n    def memory   = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    def args     = options.args.tokenize()\n    if (args.contains('--genomeSAindexNbases')) {\n        \"\"\"\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            $memory \\\\\n            $options.args\n\n        STAR --version | sed -e \"s/STAR_//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        samtools faidx $fasta\n        NUM_BASES=`gawk '{sum = sum + \\$2}END{if ((log(sum)/log(2))/2 - 1 > 14) {printf \"%.0f\", 14} else {printf \"%.0f\", (log(sum)/log(2))/2 - 1}}' ${fasta}.fai`\n\n        mkdir star\n        STAR \\\\\n            --runMode genomeGenerate \\\\\n            --genomeDir star/ \\\\\n            --genomeFastaFiles $fasta \\\\\n            --sjdbGTFfile $gtf \\\\\n            --runThreadN $task.cpus \\\\\n            --genomeSAindexNbases \\$NUM_BASES \\\\\n            $memory \\\\\n            $options.args\n\n        STAR --version | sed -e \"s/STAR_//g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 35,
        "language_script": "bash",
        "tools": [
            "STAR",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/star",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fasta",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'index', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::star=2.7.5a bioconda::samtools=1.10 conda-forge::gawk=5.1.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/star:2.7.5a--0\" } else { container \"docker.io/czbiohub/sicilian:dev\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CAT_FASTQ": {
        "name_process": "CAT_FASTQ",
        "string_process": "\nprocess CAT_FASTQ {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'merged_fastq', meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.merged.fastq.gz\"), emit: reads\n\n    script:\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.sort().join(' ')} > ${prefix}.merged.fastq.gz\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.sort().join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.sort().join(' ')} > ${prefix}_2.merged.fastq.gz\n            \"\"\"\n        }\n    }\n}",
        "nb_lignes_process": 40,
        "string_script": "    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.sort().join(' ')} > ${prefix}.merged.fastq.gz\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.sort().join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.sort().join(' ')} > ${prefix}_2.merged.fastq.gz\n            \"\"\"\n        }\n    }",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'merged_fastq', meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UNTAR": {
        "name_process": "UNTAR",
        "string_process": "\nprocess UNTAR {\n    tag \"$archive\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    path archive\n\n    output:\n    path \"$untar\"       , emit: untar\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    untar        = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar -xzvf $options.args $archive\n    echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    untar        = archive.toString() - '.tar.gz'\n    \"\"\"\n    tar -xzvf $options.args $archive\n    echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "archive"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SICILIAN_PROCESS_CI_10X": {
        "name_process": "SICILIAN_PROCESS_CI_10X",
        "string_process": "\nprocess SICILIAN_PROCESS_CI_10X {\n    label 'process_large'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n                                                    \n                                                                                                 \n                                                                                                                                      \n                                                                                                                                              \n    conda (params.enable_conda ? \"conda-forge::pandas=1.1.5 conda-forge::tqdm conda-forge::numpy=1.19.5\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/YOUR-TOOL-HERE\"\n    } else {\n        container \"docker.io/czbiohub/sicilian:dev\"\n    }\n\n    input:\n                                                                                                           \n                                                                                 \n                                                                                                                 \n                                                                                              \n                                                                                             \n                                                                                      \n    val sample_ids                                  \n    path class_inputs                               \n    path gtf\n    path exon_bounds\n    path splices\n\n\n    output:\n                                                                                  \n    path \"*.tsv\", emit: sicilian_junctions_tsv\n                                                                         \n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    def output_path = 'processed_ci_10x.tsv'\n    def run_name = './'\n    \"\"\"\n    ls -lha\n    Process_CI_10x.py \\\\\n        --class-inputs $class_inputs \\\\\n        --sample-names ${sample_ids.join(' ')} \\\\\n        --output-tsv $output_path \\\\\n        -g $gtf \\\\\n        -e $exon_bounds \\\\\n        -s $splices\n    ls -lha\n    python -c 'import pandas; print(pandas.__version__)' > ${software}__pandas.version.txt\n    python -c 'import tqdm; print(tqdm.__version__)' > ${software}__tqdm.version.txt\n    python -c 'import numpy; print(numpy.__version__)' > ${software}__numpy.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 64,
        "string_script": "    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    def output_path = 'processed_ci_10x.tsv'\n    def run_name = './'\n    \"\"\"\n    ls -lha\n    Process_CI_10x.py \\\\\n        --class-inputs $class_inputs \\\\\n        --sample-names ${sample_ids.join(' ')} \\\\\n        --output-tsv $output_path \\\\\n        -g $gtf \\\\\n        -e $exon_bounds \\\\\n        -s $splices\n    ls -lha\n    python -c 'import pandas; print(pandas.__version__)' > ${software}__pandas.version.txt\n    python -c 'import tqdm; print(tqdm.__version__)' > ${software}__tqdm.version.txt\n    python -c 'import numpy; print(numpy.__version__)' > ${software}__numpy.version.txt\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_ids",
            "class_inputs",
            "gtf",
            "exon_bounds",
            "splices"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "label 'process_large'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::pandas=1.1.5 conda-forge::tqdm conda-forge::numpy=1.19.5\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/YOUR-TOOL-HERE\" } else { container \"docker.io/czbiohub/sicilian:dev\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GUNZIP": {
        "name_process": "GUNZIP",
        "string_process": "\nprocess GUNZIP {\n    tag \"$archive\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    path archive\n\n    output:\n    path \"$gunzip\",       emit: gunzip\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    gunzip       = archive.toString() - '.gz'\n    \"\"\"\n    gunzip -f $options.args $archive\n    echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    gunzip       = archive.toString() - '.gz'\n    \"\"\"\n    gunzip -f $options.args $archive\n    echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "archive"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"$archive\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SICILIAN_GLM": {
        "name_process": "SICILIAN_GLM",
        "string_process": "\nprocess SICILIAN_GLM {\n    tag \"${meta.id}\"\n    label 'process_medium'\n    label 'cpu_2'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n                                                    \n                                                                                                 \n                                                                                                                                      \n                                                                                                                                              \n    conda (params.enable_conda ? \"bioconda::bioconductor-genomicalignments=1.22.0 conda-forge::r-tidyverse=1.3.1 conda-forge::r-glmnet=4.1conda-forge::r-tictoc=1.0 dloewenstein::r-cutpointr=1.0.0 conda-forge::r-data.table=1.14.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/YOUR-TOOL-HERE\"\n    } else {\n        container \"docker.io/czbiohub/sicilian:dev\"\n    }\n\n    input:\n                                                                                                           \n                                                                                 \n                                                                                                                 \n                                                                                              \n                                                                                             \n                                                                                      \n    path gtf\n    path domain\n    path exon_bounds\n    path splices\n    tuple val(meta), path(class_input), path(sj_out_tab), path(chimeric_out_junction), path(reads_per_gene)\n\n    output:\n                                                                                  \n    tuple val(meta), path(\"*GLM_output.txt\"), emit: glm_output\n    tuple val(meta), path(\"*sicilian_called_splice_juncs.tsv\"), emit: sicilian_called_splices\n                                                                         \n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    def outdir = './'\n    def single = (params.single_end || params.tenx) ? '1' : '0'\n    def tenx = params.tenx ? '1' : '0'\n    def stranded = params.stranded ? '1' : '0'\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    ls -lha\n    GLM_script_light.R \\\\\n        $outdir \\\\\n        $gtf \\\\\n        $single \\\\\n        $tenx \\\\\n        $stranded \\\\\n        $domain \\\\\n        $exon_bounds \\\\\n        $splices\n\n    ls -lha\n    # Rename file to be unique to each sample to prevent clashing\n    mv GLM_output.txt ${prefix}__GLM_output.txt\n    mv sicilian_called_splice_juncs.tsv  ${prefix}__sicilian_called_splice_juncs.tsv \n\n    # Output R package versions\n    Rscript -e 'cat(paste(packageVersion(\"cutpointr\")))' > ${software}__r-cutpointr.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"data.table\")))' > ${software}__r-data.table.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"dplyr\")))' > ${software}__r-dplyr.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"GenomicAlignments\")))' > ${software}__bioconductor-GenomicAlignments.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"glmnet\")))' > ${software}__r-glmnet.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"stringr\")))' > ${software}__r-stringr.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"tictoc\")))' > ${software}__tictoc.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 81,
        "string_script": "    def software = getSoftwareName(task.process)\n    \n                                                                                                                      \n                                                                                                                               \n                                                                                                             \n                                                                                                                                            \n                                                                                                         \n                                                                                   \n                                                                                                 \n                                                                                                     \n    def outdir = './'\n    def single = (params.single_end || params.tenx) ? '1' : '0'\n    def tenx = params.tenx ? '1' : '0'\n    def stranded = params.stranded ? '1' : '0'\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    ls -lha\n    GLM_script_light.R \\\\\n        $outdir \\\\\n        $gtf \\\\\n        $single \\\\\n        $tenx \\\\\n        $stranded \\\\\n        $domain \\\\\n        $exon_bounds \\\\\n        $splices\n\n    ls -lha\n    # Rename file to be unique to each sample to prevent clashing\n    mv GLM_output.txt ${prefix}__GLM_output.txt\n    mv sicilian_called_splice_juncs.tsv  ${prefix}__sicilian_called_splice_juncs.tsv \n\n    # Output R package versions\n    Rscript -e 'cat(paste(packageVersion(\"cutpointr\")))' > ${software}__r-cutpointr.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"data.table\")))' > ${software}__r-data.table.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"dplyr\")))' > ${software}__r-dplyr.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"GenomicAlignments\")))' > ${software}__bioconductor-GenomicAlignments.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"glmnet\")))' > ${software}__r-glmnet.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"stringr\")))' > ${software}__r-stringr.version.txt\n    Rscript -e 'cat(paste(packageVersion(\"tictoc\")))' > ${software}__tictoc.version.txt\n    \"\"\"",
        "nb_lignes_script": 40,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf",
            "domain",
            "exon_bounds",
            "splices",
            "meta",
            "class_input",
            "sj_out_tab",
            "chimeric_out_junction",
            "reads_per_gene"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "czbiohub__nf-sicilian",
        "directive": [
            "tag \"${meta.id}\"",
            "label 'process_medium'",
            "label 'cpu_2'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::bioconductor-genomicalignments=1.22.0 conda-forge::r-tidyverse=1.3.1 conda-forge::r-glmnet=4.1conda-forge::r-tictoc=1.0 dloewenstein::r-cutpointr=1.0.0 conda-forge::r-data.table=1.14.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/YOUR-TOOL-HERE\" } else { container \"docker.io/czbiohub/sicilian:dev\" }"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "Channel.fromPath(params.fasta)\n        .ifEmpty { exit 1, \"fasta annotation file not found: ${params.fasta}\" }\n        .into { ch_fasta ; ch_fasta_gather; ch_fasta_for_filterSNPs}",
        "origin": [
            [
                "params.fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_fasta",
                "P"
            ],
            [
                "ch_fasta_gather",
                "P"
            ],
            [
                "ch_fasta_for_filterSNPs",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.fromPath(params.fai)\n        .ifEmpty { exit 1, \"fasta index file not found: ${params.fai}\" }\n        .into { ch_fai ; ch_fai_gather ; ch_fai_for_filterSNPs}",
        "origin": [
            [
                "params.fai",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_fai",
                "P"
            ],
            [
                "ch_fai_gather",
                "P"
            ],
            [
                "ch_fai_for_filterSNPs",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(params.dict)\n        .ifEmpty { exit 1, \"dict annotation file not found: ${params.dict}\" }\n        .into { ch_dict ; ch_dict_gather ; ch_dict_for_filterSNPs }",
        "origin": [
            [
                "params.dict",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_dict",
                "P"
            ],
            [
                "ch_dict_gather",
                "P"
            ],
            [
                "ch_dict_for_filterSNPs",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath(params.multiVCF_table)\n       .ifEmpty { exit 1, \"File with vcf and respective index not found or not passed to --multiVCF_table\" }\n       .splitCsv(sep: ',',  skip: 1 )\n       .map{ vcf, vcf_index -> [file(vcf), file(vcf_index)] }\n       .set { ch_multiVCF_table }",
        "origin": [
            [
                "params.multiVCF_table",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiVCF_table",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath(\"${params.list_folder}/*.list\")\n       .flatten()\n       .into { ch_subset_lists; ch_subset_lists_view}",
        "origin": [
            [
                "\"${params.list_folder}/*.list\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_subset_lists",
                "P"
            ],
            [
                "ch_subset_lists_view",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "ch_multiVCF = ch_subset_lists_view.combine(ch_multiVCF_table)",
        "origin": [
            [
                "ch_subset_lists_view",
                "P"
            ],
            [
                "ch_multiVCF_table",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_multiVCF",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ch_pops_vcfs_to_bcftools_to_inspect.view()",
        "origin": [
            [
                "ch_pops_vcfs_to_bcftools_to_inspect",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_8": {
        "string": "ch_pops_vcfs_to_inspect\n                        .groupTuple(by: 0)\n                                                                         \n                        .view()",
        "origin": [
            [
                "ch_pops_vcfs_to_inspect",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_9": {
        "string": "ch_grouped_pop_vcfs = ch_pops_vcfs.groupTuple(by: 0)",
        "origin": [
            [
                "ch_pops_vcfs",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_grouped_pop_vcfs",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "ch_plink_count_freqs_to_inspect.view()",
        "origin": [
            [
                "ch_plink_count_freqs_to_inspect",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_11": {
        "string": "ch_pruned_for_get_frq_counts_to_inspect.view()",
        "origin": [
            [
                "ch_pruned_for_get_frq_counts_to_inspect",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_12": {
        "string": "ch_panel_base = ch_plink_frq_counts_for_panel.take( 1 )",
        "origin": [
            [
                "ch_plink_frq_counts_for_panel",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_panel_base",
                "P"
            ]
        ]
    }
}
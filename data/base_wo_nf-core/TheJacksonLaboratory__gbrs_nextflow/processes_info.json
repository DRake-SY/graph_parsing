{
    "bowtie": {
        "name_process": "bowtie",
        "string_process": "\nprocess bowtie{\n  publishDir path:params.outdir, mode:'copy', pattern:\"*.{log,fastq}\"\n  label 'bowtie1'\n  label 'high_mem'\n  input:\n    tuple id, file(reads1), file(reads2) from fastq_ch\n\n  output:\n    tuple id, file (\"${id}.1.bam\"), file (\"${id}.2.bam\") into bams\n    file \"${id}.combined.R1.fastq\" into fqall1\n    file \"${id}.combined.R2.fastq\" into fqall2\n    file \"${id}.1.log\" into log1\n    file \"${id}.2.log\" into log2\n  script:\n  \"\"\"\n  zcat $reads1 |tee ${id}.combined.R1.fastq | bowtie -p ${task.cpus} -q -a --best --strata --sam -v 3 ${params.gbrs_data}/transcripts - 2>${id}.1.log |samtools view -bS - > ${id}.1.bam \n  zcat $reads2 |tee ${id}.combined.R2.fastq |bowtie -p ${task.cpus} -q -a --best --strata --sam -v 3 ${params.gbrs_data}/transcripts - 2>${id}.2.log |samtools view -bS - > ${id}.2.bam  \n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  zcat $reads1 |tee ${id}.combined.R1.fastq | bowtie -p ${task.cpus} -q -a --best --strata --sam -v 3 ${params.gbrs_data}/transcripts - 2>${id}.1.log |samtools view -bS - > ${id}.1.bam \n  zcat $reads2 |tee ${id}.combined.R2.fastq |bowtie -p ${task.cpus} -q -a --best --strata --sam -v 3 ${params.gbrs_data}/transcripts - 2>${id}.2.log |samtools view -bS - > ${id}.2.bam  \n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Bowtie",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bowtie",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Bowtie",
                "uri": "https://bio.tools/bowtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Bowtie is an ultrafast, memory-efficient short read aligner.",
                "homepage": "http://bowtie-bio.sourceforge.net/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fastq_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bams",
            "fqall1",
            "fqall2",
            "log1",
            "log2"
        ],
        "nb_outputs": 5,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path:params.outdir, mode:'copy', pattern:\"*.{log,fastq}\"",
            "label 'bowtie1'",
            "label 'high_mem'"
        ],
        "when": "",
        "stub": ""
    },
    "bamtoemase": {
        "name_process": "bamtoemase",
        "string_process": "\nprocess bamtoemase{\n  label 'gbrs'\n  label 'high_mem'\n  input:\n    tuple id, file (align1), file (align2) from bams\n  \n  output:\n    tuple id, file (\"${id}.merged_compressed.h5\") into aln_compressed\n\n  script:\n  \"\"\"\n  gbrs bam2emase -i $align1 \\\n                 -m ${params.gbrs_data}/ref.transcripts.info \\\n                 -s A,B,C,D,E,F,G,H \\\n                 -o ${id}.emase1.h5\n\n  gbrs compress -i ${id}.emase1.h5 \\\n                -o ${id}.compressed.emase1.h5\n\n  gbrs bam2emase -i $align2 \\\n                 -m ${params.gbrs_data}/ref.transcripts.info \\\n                 -s A,B,C,D,E,F,G,H \\\n                 -o ${id}.emase2.h5\n\n  gbrs compress -i ${id}.emase2.h5 \\\n                -o ${id}.compressed.emase2.h5\n\n  gbrs compress -i ${id}.compressed.emase1.h5,${id}.compressed.emase2.h5\\\n                -o ${id}.merged_compressed.h5\n  \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "  \"\"\"\n  gbrs bam2emase -i $align1 \\\n                 -m ${params.gbrs_data}/ref.transcripts.info \\\n                 -s A,B,C,D,E,F,G,H \\\n                 -o ${id}.emase1.h5\n\n  gbrs compress -i ${id}.emase1.h5 \\\n                -o ${id}.compressed.emase1.h5\n\n  gbrs bam2emase -i $align2 \\\n                 -m ${params.gbrs_data}/ref.transcripts.info \\\n                 -s A,B,C,D,E,F,G,H \\\n                 -o ${id}.emase2.h5\n\n  gbrs compress -i ${id}.emase2.h5 \\\n                -o ${id}.compressed.emase2.h5\n\n  gbrs compress -i ${id}.compressed.emase1.h5,${id}.compressed.emase2.h5\\\n                -o ${id}.merged_compressed.h5\n  \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "GBRS"
        ],
        "tools_url": [
            "https://bio.tools/gbrs"
        ],
        "tools_dico": [
            {
                "name": "GBRS",
                "uri": "https://bio.tools/gbrs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Genotype-free individual genome reconstruction of Multiparental Population Models by RNA sequencing data.\n\nGBRS is a suite of tools for reconstructing genomes using RNA-Seq data from multiparent population and quantifying allele specific expression.",
                "homepage": "https://github.com/churchill-lab/gbrs"
            }
        ],
        "inputs": [
            "bams"
        ],
        "nb_inputs": 1,
        "outputs": [
            "aln_compressed"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "label 'gbrs'",
            "label 'high_mem'"
        ],
        "when": "",
        "stub": ""
    },
    "quantify": {
        "name_process": "quantify",
        "string_process": "\nprocess quantify{\n  publishDir path:params.outdir, mode:'copy'\n  label 'gbrs'\n  label 'high_mem'\n  input:\n    tuple id, sex, generation, file (comp) from compm1\n    val model from params.model\n    env GBRS_DATA from params.gbrs_data\n  output:\n    file \"*\" into publish\n    file \"${id}.gbrs.interpolated.genoprobs.npz\" into genoprobs\n    tuple id, file(\"${id}.multiway.isoforms.tpm\") into genes_tpm\n  script:\n  \"\"\"\n  gbrs quantify -i ${comp} \\\n                -g ${params.gbrs_data}/ref.gene2transcripts.tsv \\\n                -L ${params.gbrs_data}/gbrs.hybridized.targets.info \\\n                -M ${model}  --report-alignment-counts -o ${id}\n\n  gbrs reconstruct -e ${id}.multiway.genes.tpm \\\n                  -t ${params.gbrs_data}/tranprob.DO.${generation}.${sex}.npz \\\n                  -x ${params.gbrs_data}/avecs.npz \\\n                  -g ${params.gbrs_data}/ref.gene_pos.ordered.npz -o ${id}\n\n  gbrs quantify -i ${comp} \\\n                -G ${id}.genotypes.tsv \\\n                -g ${params.gbrs_data}/ref.gene2transcripts.tsv \\\n                -L ${params.gbrs_data}/gbrs.hybridized.targets.info \\\n                -M ${model}  --report-alignment-counts -o ${id}\n\n  gbrs interpolate -i ${id}.genoprobs.npz \\\n               -g ${params.gbrs_data}/ref.genome_grid.69k.noYnoMT_KBEdit.txt \\\n               -p ${params.gbrs_data}/ref.gene_pos.ordered_0.1.6.npz \\\n               -o ${id}.gbrs.interpolated.genoprobs.npz\n\n  gbrs plot -i ${id}.gbrs.interpolated.genoprobs.npz \\\n               -o ${id}.gbrs.plotted.genome.pdf \\\n               -n ${id}\n  \"\"\"\n\n}",
        "nb_lignes_process": 40,
        "string_script": "  \"\"\"\n  gbrs quantify -i ${comp} \\\n                -g ${params.gbrs_data}/ref.gene2transcripts.tsv \\\n                -L ${params.gbrs_data}/gbrs.hybridized.targets.info \\\n                -M ${model}  --report-alignment-counts -o ${id}\n\n  gbrs reconstruct -e ${id}.multiway.genes.tpm \\\n                  -t ${params.gbrs_data}/tranprob.DO.${generation}.${sex}.npz \\\n                  -x ${params.gbrs_data}/avecs.npz \\\n                  -g ${params.gbrs_data}/ref.gene_pos.ordered.npz -o ${id}\n\n  gbrs quantify -i ${comp} \\\n                -G ${id}.genotypes.tsv \\\n                -g ${params.gbrs_data}/ref.gene2transcripts.tsv \\\n                -L ${params.gbrs_data}/gbrs.hybridized.targets.info \\\n                -M ${model}  --report-alignment-counts -o ${id}\n\n  gbrs interpolate -i ${id}.genoprobs.npz \\\n               -g ${params.gbrs_data}/ref.genome_grid.69k.noYnoMT_KBEdit.txt \\\n               -p ${params.gbrs_data}/ref.gene_pos.ordered_0.1.6.npz \\\n               -o ${id}.gbrs.interpolated.genoprobs.npz\n\n  gbrs plot -i ${id}.gbrs.interpolated.genoprobs.npz \\\n               -o ${id}.gbrs.plotted.genome.pdf \\\n               -n ${id}\n  \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "GBRS"
        ],
        "tools_url": [
            "https://bio.tools/gbrs"
        ],
        "tools_dico": [
            {
                "name": "GBRS",
                "uri": "https://bio.tools/gbrs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Genotype-free individual genome reconstruction of Multiparental Population Models by RNA sequencing data.\n\nGBRS is a suite of tools for reconstructing genomes using RNA-Seq data from multiparent population and quantifying allele specific expression.",
                "homepage": "https://github.com/churchill-lab/gbrs"
            }
        ],
        "inputs": [
            "compm1",
            "params",
            "params"
        ],
        "nb_inputs": 3,
        "outputs": [
            "publish",
            "genoprobs",
            "genes_tpm"
        ],
        "nb_outputs": 3,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'gbrs'",
            "label 'high_mem'"
        ],
        "when": "",
        "stub": ""
    },
    "exportgeno": {
        "name_process": "exportgeno",
        "string_process": "\nprocess exportgeno{\n  publishDir path:params.outdir, mode:'copy'\n  label 'export'\n  input:\n    file(genop) from genoprobs\n  output:\n    file \"*\" into export_out\n  script:\n  \"\"\"\n  export-genoprob-file -i ${genop} \\\n\t\t\t\t-s A,B,C,D,E,F,G,H \\\n\t\t\t\t-g ${params.gbrs_data}/ref.genome_grid.69k.noYnoMT_KBEdit.txt\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  export-genoprob-file -i ${genop} \\\n\t\t\t\t-s A,B,C,D,E,F,G,H \\\n\t\t\t\t-g ${params.gbrs_data}/ref.genome_grid.69k.noYnoMT_KBEdit.txt\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genoprobs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "export_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'export'"
        ],
        "when": "",
        "stub": ""
    },
    "makeSTARindex": {
        "name_process": "makeSTARindex",
        "string_process": "\nprocess makeSTARindex{\n  label 'high_mem'\n  label 'STAR'\n  tag \"$fasta\"\n  publishDir path: params.outdir, mode: 'copy'\n\n  input:\n    file fasta from star_genome\n    file gtf from star_gtf\n\n  output:\n    file \"star/*\" into star_index\n\n  script:\n    def avail_mem = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    \"\"\"\n    mkdir star\n    STAR \\\\\n      --runMode genomeGenerate \\\\\n      --runThreadN ${task.cpus} \\\\\n      --sjdbGTFfile $gtf \\\\\n      --sjdbOverhang 149 \\\\\n      --genomeDir star \\\\\n      --genomeFastaFiles $fasta \\\\\n      $avail_mem\n    \"\"\"\n }",
        "nb_lignes_process": 26,
        "string_script": "    def avail_mem = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n    \"\"\"\n    mkdir star\n    STAR \\\\\n      --runMode genomeGenerate \\\\\n      --runThreadN ${task.cpus} \\\\\n      --sjdbGTFfile $gtf \\\\\n      --sjdbOverhang 149 \\\\\n      --genomeDir star \\\\\n      --genomeFastaFiles $fasta \\\\\n      $avail_mem\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "star_genome",
            "star_gtf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "star_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "label 'high_mem'",
            "label 'STAR'",
            "tag \"$fasta\"",
            "publishDir path: params.outdir, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "runSTAR": {
        "name_process": "runSTAR",
        "string_process": "\nprocess runSTAR{\n  publishDir path: params.outdir, mode: 'copy'\n  label 'STAR'\n  label 'high_mem'\n  tag \"$id\"\n  \n  input:\n    tuple id, file (reads1), file (reads2) from fastq_ch_star   \n    file staridx from star_index.collect()\n\n  output:\n    tuple id, file (\"${id}.Aligned.toTranscriptome.out.bam\") into starout\n\n  script:\n  \"\"\"\n  STAR --runThreadN ${task.cpus} \\\\\n  --genomeDir . \\\n  --readFilesCommand zcat \\\n  --outSAMtype BAM SortedByCoordinate \\\n  --quantMode TranscriptomeSAM \\\n  --quantTranscriptomeBAMcompression -1 \\\n  --quantTranscriptomeBan IndelSoftclipSingleend \\\n  --outFileNamePrefix ${id}. \\\n  --outSAMattributes NH HI AS nM \\\n  --readFilesIn ${reads1.join(\",\")} ${reads2.join(\",\")}\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  STAR --runThreadN ${task.cpus} \\\\\n  --genomeDir . \\\n  --readFilesCommand zcat \\\n  --outSAMtype BAM SortedByCoordinate \\\n  --quantMode TranscriptomeSAM \\\n  --quantTranscriptomeBAMcompression -1 \\\n  --quantTranscriptomeBan IndelSoftclipSingleend \\\n  --outFileNamePrefix ${id}. \\\n  --outSAMattributes NH HI AS nM \\\n  --readFilesIn ${reads1.join(\",\")} ${reads2.join(\",\")}\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "fastq_ch_star",
            "star_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "starout"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path: params.outdir, mode: 'copy'",
            "label 'STAR'",
            "label 'high_mem'",
            "tag \"$id\""
        ],
        "when": "",
        "stub": ""
    },
    "RSEMprep": {
        "name_process": "RSEMprep",
        "string_process": "\nprocess RSEMprep{\n  label 'RSEM'\n  label 'high_mem'\n  tag \"$fasta\"\n  \n  input:\n    file fasta from rsem_genome\n    file gtf from rsem_gtf\n\n  output:\n    file '*' into rsem_index\n    file fasta into rsem_index_name\n  \n  script:\n    \"\"\"\n    rsem-prepare-reference --gtf $gtf $fasta $fasta\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    rsem-prepare-reference --gtf $gtf $fasta $fasta\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rsem_genome",
            "rsem_gtf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rsem_index",
            "rsem_index_name"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "label 'RSEM'",
            "label 'high_mem'",
            "tag \"$fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "RSEMit": {
        "name_process": "RSEMit",
        "string_process": "\nprocess RSEMit{\n  publishDir path:params.outdir, mode:'copy'\n  label 'RSEM'\n  label 'high_mem'\n  tag \"$id\"\n  input:\n    tuple id, file (bamf) from starout\n    file fasta from rsem_index_name.collect()\n    file idxf from rsem_index.collect()\n  output:\n    tuple id, file (\"${id}_RSEM_count.isoforms.results\") into rsem_iso_count\n    tuple id, file (\"${id}_RSEM_count.genes.results\") into rsem_genes_count\n    file \"${id}_RSEM_count.genes.results\" into rsem_genes_count2, RSEM_genes\n    val id into RSEM_ids\n  script:\n  \"\"\"\n  rsem-calculate-expression --bam --paired-end -p ${task.cpus} \\\\\n  --estimate-rspd --append-names \\\\\n  $bamf \\\n  $fasta \\\n  ${id}_RSEM_count\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  rsem-calculate-expression --bam --paired-end -p ${task.cpus} \\\\\n  --estimate-rspd --append-names \\\\\n  $bamf \\\n  $fasta \\\n  ${id}_RSEM_count\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "starout",
            "rsem_index_name",
            "rsem_index"
        ],
        "nb_inputs": 3,
        "outputs": [
            "rsem_iso_count",
            "rsem_genes_count",
            "rsem_genes_count2",
            "RSEM_genes",
            "RSEM_ids"
        ],
        "nb_outputs": 5,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'RSEM'",
            "label 'high_mem'",
            "tag \"$id\""
        ],
        "when": "",
        "stub": ""
    },
    "RSEM_table": {
        "name_process": "RSEM_table",
        "string_process": "\nprocess RSEM_table{\n  publishDir path:params.outdir, mode:'copy'\n  label 'RSEM'\n  input:\n    file genes from rsem_genes_count2.collect()\n\n  output:\n    file \"RSEM_genes_table.txt\" into rsem_table\n\n  script:\n  \"\"\"\n  rsem-generate-data-matrix $genes >  RSEM_genes_table.txt\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  rsem-generate-data-matrix $genes >  RSEM_genes_table.txt\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rsem_genes_count2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "rsem_table"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'RSEM'"
        ],
        "when": "",
        "stub": ""
    },
    "transcriptsToFasta": {
        "name_process": "transcriptsToFasta",
        "string_process": "\nprocess transcriptsToFasta {\n  tag \"$fasta\"\n  label 'gffread'\n\n  input:\n    file fasta from genome_fa\n    file gtf from genome_gtf\n\n  output:\n    file \"transcripts.fa\" into ch_fasta_for_salmon_index\n\n  script:\n    \"\"\"\n    grep \">\" $fasta | cut -d \" \" -f 1 | sed 's/>//' > chrs.txt\n    awk 'BEGIN{ while (getline line < \"chrs.txt\") {chrs[i++]=line}} \\$1 in chrs' $gtf > ${gtf}.2\n    gffread -F -w transcripts.fa -g $fasta ${gtf}.2\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    grep \">\" $fasta | cut -d \" \" -f 1 | sed 's/>//' > chrs.txt\n    awk 'BEGIN{ while (getline line < \"chrs.txt\") {chrs[i++]=line}} \\$1 in chrs' $gtf > ${gtf}.2\n    gffread -F -w transcripts.fa -g $fasta ${gtf}.2\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "gffread"
        ],
        "tools_url": [
            "https://bio.tools/gffread"
        ],
        "tools_dico": [
            {
                "name": "gffread",
                "uri": "https://bio.tools/gffread",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "program for filtering, converting and manipulating GFF files",
                "homepage": "https://ccb.jhu.edu/software/stringtie/gff.shtml"
            }
        ],
        "inputs": [
            "genome_fa",
            "genome_gtf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_fasta_for_salmon_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "tag \"$fasta\"",
            "label 'gffread'"
        ],
        "when": "",
        "stub": ""
    },
    "makeSalmonIndex": {
        "name_process": "makeSalmonIndex",
        "string_process": "\nprocess makeSalmonIndex {\n  label 'salmon'\n  label 'high_mem'\n  tag \"$fasta\"\n\n  input:\n    file fasta from ch_fasta_for_salmon_index\n    file genome from genome_fa2\n\n  output:\n    file 'salmon_index' into salmon_index\n\n  script:\n    def gencode = params.gencode  ? \"--gencode\" : \"\"\n    \"\"\"\n    cat $fasta $genome > gentrome.fa\n    grep \"^>\" $genome | cut -d \" \" -f 1 > decoys.txt\n    salmon index --threads $task.cpus -t gentrome.fa $gencode -d decoys.txt -i salmon_index -k 21\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    def gencode = params.gencode  ? \"--gencode\" : \"\"\n    \"\"\"\n    cat $fasta $genome > gentrome.fa\n    grep \"^>\" $genome | cut -d \" \" -f 1 > decoys.txt\n    salmon index --threads $task.cpus -t gentrome.fa $gencode -d decoys.txt -i salmon_index -k 21\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "ch_fasta_for_salmon_index",
            "genome_fa2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "salmon_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "label 'salmon'",
            "label 'high_mem'",
            "tag \"$fasta\""
        ],
        "when": "",
        "stub": ""
    },
    "salmon": {
        "name_process": "salmon",
        "string_process": "\nprocess salmon{\n  publishDir path:params.outdir, mode:'copy'\n  label 'high_mem'\n  label 'salmon'\n  tag \"$id\"\n\n  input:\n    tuple id, file(reads1), file(reads2) from fastq_ch_sal\n    file(index) from salmon_index.collect()\n    \n  output:\n    tuple id, file(\"salmon_quant_${id}/quant.sf\") into salmon_out\n\n  script:\n  \"\"\"\n  salmon quant -l A -p ${task.cpus} --seqBias --gcBias --validateMappings --useEM -i $index -1 $reads1 -2 $reads2 -o salmon_quant_${id}\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  salmon quant -l A -p ${task.cpus} --seqBias --gcBias --validateMappings --useEM -i $index -1 $reads1 -2 $reads2 -o salmon_quant_${id}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "fastq_ch_sal",
            "salmon_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "salmon_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'high_mem'",
            "label 'salmon'",
            "tag \"$id\""
        ],
        "when": "",
        "stub": ""
    },
    "transtogene": {
        "name_process": "transtogene",
        "string_process": "\nprocess transtogene{\n  label 'gffutils'\n  publishDir path:params.outdir, mode:'copy'\n  input:\n    file trans from trans_gtf\n  output:\n    file \"isoforms_to_genes.txt\" into isogenes\n  script:\n  \"\"\"\n  awk '\\$3==\"transcript\"' $trans |cut -f 9 | cut -d \" \" -f 2,6 | tr -d \"\\\\\";\" >isoforms_to_genes.txt\n  \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "  \"\"\"\n  awk '\\$3==\"transcript\"' $trans |cut -f 9 | cut -d \" \" -f 2,6 | tr -d \"\\\\\";\" >isoforms_to_genes.txt\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trans_gtf"
        ],
        "nb_inputs": 1,
        "outputs": [
            "isogenes"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "label 'gffutils'",
            "publishDir path:params.outdir, mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "compare_tpm": {
        "name_process": "compare_tpm",
        "string_process": "\nprocess compare_tpm{\n  publishDir path:params.outdir, mode:'copy'\n  label 'R'\n  tag \"$id\"\n  input:\n    tuple id, file(emase), file(salmon), file(rsem) from both_out\n    file isogenes from isogenes.collect()\n  output:\n    file \"${id}_genes_corr.txt\" into isocorr\n    file \"${id}_salmon_genes.pdf\" into corrpdf\n    file \"${id}_rsem_genes.pdf\" into rsempdf\n    file \"${id}_rsem_salmon_genes.pdf\" into rsemsalpdf\n    file \"${id}_genes_count.csv\" into genelist\n  script:\n  \"\"\"\n  #!/usr/bin/env Rscript\n \n  ems <- read.delim(\"$emase\")\n  sal <- read.delim(\"$salmon\")\n  rsem <- read.delim(\"$rsem\")\n  rsem\\$Name <- gsub(\"_.*\", \"\", rsem\\$gene_id)\n  rsem\\$RSEM <- rsem\\$TPM\n  iso <- read.delim(\"$isogenes\", sep=\" \", header=FALSE)\n  colnames(iso) <- c(\"gene\", \"Name\")\n  ems <- data.frame(Name = ems\\$locus, emase = rowSums(ems[,2:9]))\n  both <- merge(ems, sal[,c(\"Name\", \"TPM\")], by=\"Name\")\n  both <- merge(both, iso, by=\"Name\")\n  gboth <- aggregate(both[,2:3], by=list(Name=both\\$gene), sum)\n  gboth <- merge(gboth, rsem[, c(\"Name\", \"RSEM\")])\n  cval <- cor(log10(gboth\\$TPM+1), log10(gboth\\$emase+1))\n  pdf(paste0(\"${id}_salmon_genes.pdf\"))\n  plot(log10(gboth\\$TPM+1), log10(gboth\\$emase+1), cex=0.5, pch=20, main=paste0(\"$id\", \" \", cval), xlab=\"Salmon\", ylab=\"gbrs\") \n  dev.off()\n  cval2 <- cor(log10(gboth\\$RSEM+1), log10(gboth\\$emase+1))\n  pdf(paste0(\"${id}_rsem_genes.pdf\"))\n  plot(log10(gboth\\$RSEM+1), log10(gboth\\$emase+1), cex=0.5, pch=20, main=paste0(\"$id\", \" \", cval2), xlab=\"STAR+RSEM\", ylab=\"gbrs\") \n  dev.off()\n  cval3 <- cor(log10(gboth\\$RSEM+1), log10(gboth\\$TPM+1))\n  pdf(paste0(\"${id}_rsem_salmon_genes.pdf\"))\n  plot(log10(gboth\\$RSEM+1), log10(gboth\\$TPM+1), cex=0.5, pch=20, main=paste0(\"$id\", \" \", cval3), xlab=\"STAR+RSEM\", ylab=\"Salmon\") \n  dev.off()\n  write.csv(gboth, file=\"${id}_genes_count.csv\")\n\n  x <- data.frame(salmon_corrval=cval, RSEM_corrval=cval2, RSEM_Salmon=cval3)\n  row.names(x) <- \"$id\"\n  write.table(x, file=\"${id}_genes_corr.txt\", col.names = F, sep = \"\\t\")\n  \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "  \"\"\"\n  #!/usr/bin/env Rscript\n \n  ems <- read.delim(\"$emase\")\n  sal <- read.delim(\"$salmon\")\n  rsem <- read.delim(\"$rsem\")\n  rsem\\$Name <- gsub(\"_.*\", \"\", rsem\\$gene_id)\n  rsem\\$RSEM <- rsem\\$TPM\n  iso <- read.delim(\"$isogenes\", sep=\" \", header=FALSE)\n  colnames(iso) <- c(\"gene\", \"Name\")\n  ems <- data.frame(Name = ems\\$locus, emase = rowSums(ems[,2:9]))\n  both <- merge(ems, sal[,c(\"Name\", \"TPM\")], by=\"Name\")\n  both <- merge(both, iso, by=\"Name\")\n  gboth <- aggregate(both[,2:3], by=list(Name=both\\$gene), sum)\n  gboth <- merge(gboth, rsem[, c(\"Name\", \"RSEM\")])\n  cval <- cor(log10(gboth\\$TPM+1), log10(gboth\\$emase+1))\n  pdf(paste0(\"${id}_salmon_genes.pdf\"))\n  plot(log10(gboth\\$TPM+1), log10(gboth\\$emase+1), cex=0.5, pch=20, main=paste0(\"$id\", \" \", cval), xlab=\"Salmon\", ylab=\"gbrs\") \n  dev.off()\n  cval2 <- cor(log10(gboth\\$RSEM+1), log10(gboth\\$emase+1))\n  pdf(paste0(\"${id}_rsem_genes.pdf\"))\n  plot(log10(gboth\\$RSEM+1), log10(gboth\\$emase+1), cex=0.5, pch=20, main=paste0(\"$id\", \" \", cval2), xlab=\"STAR+RSEM\", ylab=\"gbrs\") \n  dev.off()\n  cval3 <- cor(log10(gboth\\$RSEM+1), log10(gboth\\$TPM+1))\n  pdf(paste0(\"${id}_rsem_salmon_genes.pdf\"))\n  plot(log10(gboth\\$RSEM+1), log10(gboth\\$TPM+1), cex=0.5, pch=20, main=paste0(\"$id\", \" \", cval3), xlab=\"STAR+RSEM\", ylab=\"Salmon\") \n  dev.off()\n  write.csv(gboth, file=\"${id}_genes_count.csv\")\n\n  x <- data.frame(salmon_corrval=cval, RSEM_corrval=cval2, RSEM_Salmon=cval3)\n  row.names(x) <- \"$id\"\n  write.table(x, file=\"${id}_genes_corr.txt\", col.names = F, sep = \"\\t\")\n  \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "both_out",
            "isogenes"
        ],
        "nb_inputs": 2,
        "outputs": [
            "isocorr",
            "corrpdf",
            "rsempdf",
            "rsemsalpdf",
            "genelist"
        ],
        "nb_outputs": 5,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'R'",
            "tag \"$id\""
        ],
        "when": "",
        "stub": ""
    },
    "col_corr": {
        "name_process": "col_corr",
        "string_process": "\nprocess col_corr{\n  publishDir path:params.outdir, mode:'copy'\n  input:\n    file corrs from isocorr.collect()\n\n  output:\n    file \"all_genes_corr.txt\" into allcorr\n\n  script:\n  \"\"\"\n  cat $corrs > all_genes_corr.txt\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "  \"\"\"\n  cat $corrs > all_genes_corr.txt\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "isocorr"
        ],
        "nb_inputs": 1,
        "outputs": [
            "allcorr"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "prepeQTL": {
        "name_process": "prepeQTL",
        "string_process": "\nprocess prepeQTL{\n  publishDir path:params.outdir, mode: 'copy'\n  label 'R'\n  label 'const_mem'\n  input:\n    file rsems from RSEM_genes.collect()\n    file metadata from QTL_metadata\n    file geno from genopCh\n\n  output:\n    file \"Cecum_data_prep.rdata\" into readydat, readydat2\n    file \"tsv_count_table.csv\" into count_tbl\n    file \"raw_count_table.csv\" into raw_tbl\n  script:\n  \"\"\"\n  #!/usr/bin/env Rscript\n\n  library(tximport)\n  library(DESeq2)\n  library(qtl2)\n  library(qtl2convert)\n  load(url(\"ftp://ftp.jax.org/MUGA/GM_snps.Rdata\"))\n  snps = GM_snps\n  # Read the apr \n  load(\"$geno\")\n  # Change rownames to match mouse ID\n  for (i in 1:20){ rownames(apr[[i]]) = sapply(sapply(rownames(apr[[i]]), strsplit, \"_\"), \"[[\", 6)}\n  chrorder=c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"X\")\n  snps <- snps[snps\\$chr %in% chrorder, ]\n  # Leave markers that are in both snps and apr\n  aprmar <- c()\n  for (i in 1:20) aprmar <- c(aprmar, dimnames(apr[[i]])[[3]])\n  valmar <- intersect(snps\\$marker, aprmar)\n  snps <- snps[snps\\$marker %in% valmar,]\n  for (i in 1:20){apr[[i]] = apr[[i]][,,intersect(valmar, dimnames(apr[[i]])[[3]])]}\n  map = map_df_to_list(map = snps, pos_column=\"pos\")\n  pmap = map_df_to_list(map = snps, pos_column=\"cM\")\n  fnames <- strsplit(\"${rsems}\", \" \")[[1]]\n  metadata <- read.csv(\"$metadata\", stringsAsFactors = FALSE, row.names = NULL)\n  metadata\\$id <- sapply(sapply(metadata\\$id, strsplit, \"_\"), \"[[\", 6)\n  metadata <- metadata[!duplicated(metadata\\$id),]\n  rownames(metadata) <- metadata\\$id\n  names(fnames) <- sapply(sapply(fnames, strsplit, \"_\"), \"[[\", 1)\n  miceid <- intersect(rownames(metadata), intersect(names(fnames), rownames(apr[[1]])))\n  fnames <- fnames[miceid]\n  txi.rsem <- tximport(fnames, type=\"rsem\", txIn=FALSE, txOut=FALSE)\n  # remove genes with zero counts\n  ing <- (rowMin(txi.rsem\\$length)>0) & (rowSums(txi.rsem\\$counts >= ${params.minreads}) >= ${params.minsamples} * dim(txi.rsem\\$counts)[2])\n  txi.rsem\\$length <- txi.rsem\\$length[ing,,drop=F]\n  txi.rsem\\$counts <- txi.rsem\\$counts[ing,,drop=F]\n  txi.rsem\\$abundance <- txi.rsem\\$abundance[ing,,drop=F]\n  # import into DESeq2\n  sampleTable <- metadata[miceid, \"sex\", drop=F]\n  sampleTable\\$sex <- factor(sampleTable\\$sex)\n  dds <- DESeqDataSetFromTximport(txi.rsem, sampleTable, ~sex)\n  #dds <- DESeq(dds)\n  ctable <- as.data.frame(assay(vst(dds)))\n\n  # Leave only mouse IDs in the dataset\n  for (i in 1:20){apr[[i]] = apr[[i]][miceid,,]}\n  # calculate kinship matrix with loco\n  K = calc_kinship(probs = apr, type = \"loco\", use_allele_probs = TRUE)\n  K.overall = calc_kinship(probs = apr, type = \"overall\", use_allele_probs = TRUE)\n  cbout <- ctable\n  cbout\\$gene <- rownames(cbout)\n  write.csv(cbout, file=\"tsv_count_table.csv\", quote=FALSE, row.names = FALSE)\n  write.csv(txi.rsem\\$counts, file=\"raw_count_table.csv\", quote=FALSE)\n  ctable <- base::t(ctable)\n  # Generate a new dataset for rdata\n  save(txi.rsem, ctable, apr, metadata, K, K.overall, map, pmap, snps, file=\"Cecum_data_prep.rdata\")\n  #dataset.DO_cecum_416 <- list(annot.mrna = dataset.DO_Striatum_416\\$annot.mrna,\n                               \n  print(fnames)\n  print(txi.rsem)\n  \"\"\"\n}",
        "nb_lignes_process": 75,
        "string_script": "  \"\"\"\n  #!/usr/bin/env Rscript\n\n  library(tximport)\n  library(DESeq2)\n  library(qtl2)\n  library(qtl2convert)\n  load(url(\"ftp://ftp.jax.org/MUGA/GM_snps.Rdata\"))\n  snps = GM_snps\n  # Read the apr \n  load(\"$geno\")\n  # Change rownames to match mouse ID\n  for (i in 1:20){ rownames(apr[[i]]) = sapply(sapply(rownames(apr[[i]]), strsplit, \"_\"), \"[[\", 6)}\n  chrorder=c(\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"X\")\n  snps <- snps[snps\\$chr %in% chrorder, ]\n  # Leave markers that are in both snps and apr\n  aprmar <- c()\n  for (i in 1:20) aprmar <- c(aprmar, dimnames(apr[[i]])[[3]])\n  valmar <- intersect(snps\\$marker, aprmar)\n  snps <- snps[snps\\$marker %in% valmar,]\n  for (i in 1:20){apr[[i]] = apr[[i]][,,intersect(valmar, dimnames(apr[[i]])[[3]])]}\n  map = map_df_to_list(map = snps, pos_column=\"pos\")\n  pmap = map_df_to_list(map = snps, pos_column=\"cM\")\n  fnames <- strsplit(\"${rsems}\", \" \")[[1]]\n  metadata <- read.csv(\"$metadata\", stringsAsFactors = FALSE, row.names = NULL)\n  metadata\\$id <- sapply(sapply(metadata\\$id, strsplit, \"_\"), \"[[\", 6)\n  metadata <- metadata[!duplicated(metadata\\$id),]\n  rownames(metadata) <- metadata\\$id\n  names(fnames) <- sapply(sapply(fnames, strsplit, \"_\"), \"[[\", 1)\n  miceid <- intersect(rownames(metadata), intersect(names(fnames), rownames(apr[[1]])))\n  fnames <- fnames[miceid]\n  txi.rsem <- tximport(fnames, type=\"rsem\", txIn=FALSE, txOut=FALSE)\n  # remove genes with zero counts\n  ing <- (rowMin(txi.rsem\\$length)>0) & (rowSums(txi.rsem\\$counts >= ${params.minreads}) >= ${params.minsamples} * dim(txi.rsem\\$counts)[2])\n  txi.rsem\\$length <- txi.rsem\\$length[ing,,drop=F]\n  txi.rsem\\$counts <- txi.rsem\\$counts[ing,,drop=F]\n  txi.rsem\\$abundance <- txi.rsem\\$abundance[ing,,drop=F]\n  # import into DESeq2\n  sampleTable <- metadata[miceid, \"sex\", drop=F]\n  sampleTable\\$sex <- factor(sampleTable\\$sex)\n  dds <- DESeqDataSetFromTximport(txi.rsem, sampleTable, ~sex)\n  #dds <- DESeq(dds)\n  ctable <- as.data.frame(assay(vst(dds)))\n\n  # Leave only mouse IDs in the dataset\n  for (i in 1:20){apr[[i]] = apr[[i]][miceid,,]}\n  # calculate kinship matrix with loco\n  K = calc_kinship(probs = apr, type = \"loco\", use_allele_probs = TRUE)\n  K.overall = calc_kinship(probs = apr, type = \"overall\", use_allele_probs = TRUE)\n  cbout <- ctable\n  cbout\\$gene <- rownames(cbout)\n  write.csv(cbout, file=\"tsv_count_table.csv\", quote=FALSE, row.names = FALSE)\n  write.csv(txi.rsem\\$counts, file=\"raw_count_table.csv\", quote=FALSE)\n  ctable <- base::t(ctable)\n  # Generate a new dataset for rdata\n  save(txi.rsem, ctable, apr, metadata, K, K.overall, map, pmap, snps, file=\"Cecum_data_prep.rdata\")\n  #dataset.DO_cecum_416 <- list(annot.mrna = dataset.DO_Striatum_416\\$annot.mrna,\n                               \n  print(fnames)\n  print(txi.rsem)\n  \"\"\"",
        "nb_lignes_script": 60,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "RSEM_genes",
            "QTL_metadata",
            "genopCh"
        ],
        "nb_inputs": 3,
        "outputs": [
            "readydat",
            "readydat2",
            "count_tbl",
            "raw_tbl"
        ],
        "nb_outputs": 4,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path:params.outdir, mode: 'copy'",
            "label 'R'",
            "label 'const_mem'"
        ],
        "when": "",
        "stub": ""
    },
    "rungene": {
        "name_process": "rungene",
        "string_process": "\nprocess rungene{\n  publishDir path:params.outdir, mode:'copy'\n  label 'R'\n  label 'single_cpu'\n  input:\n    each file (rdata) from readydat\n    val gene from genes\n\n  output:\n    file \"*.pdf\" optional true into pdfs\n    file \"${gene[0]}_eQTL_results.csv\" into id_eQTL\n    file \"${gene[0]}_h2g.csv\" into h2g_gene\n    file \"${gene[0]}_scan1perm.csv\" into gene_perm\n  script:\n  \"\"\"\n  #!/usr/bin/env Rscript\n  library(\"qtl2\")\n  library(\"parallel\")\n  # Includes metadata, apr, K, and ctable - each gene is column, rows are individuals\n  load(\"$rdata\")\n  genes <- strsplit(gsub(\",|\\\\\\\\[|\\\\\\\\]\", \"\",\"${gene}\"), \" \")[[1]]\n  covar <- metadata[,c(\"sex\", \"ngen\")]\n  covar\\$sex <- (covar\\$sex==\"M\")+0\n  for (gene in genes){\n    qtl_cis_i = scan1(genoprobs = apr,\n                      pheno = ctable[,gene, drop = FALSE],\n                      kinship = K,\n                      addcovar = covar,\n                      cores = ${task.cpus})\n    qtl_peaks_7 = find_peaks(qtl_cis_i, map=map,\n                             threshold=${params.qthreshold})\n    # Take only the maximal peak for each gene. This is done for statistical reasons\n    # Since the empirical p-value use only the top score\n    qtl_peaks_7 <- qtl_peaks_7[which.max(qtl_peaks_7\\$lod),]\n    h2g = est_herit(ctable[,gene, drop=FALSE], K.overall, covar)\n    hout <- c(gene, h2g[1], attr(h2g, \"sample_size\"), attr(h2g, \"log10lik\"))\n    if (gene == genes[1]){\n      all_qtl7 <- qtl_peaks_7\n      allh2g <- hout\n      qtl_perm_i = scan1perm(genoprobs = apr,\n                             pheno = ctable[,gene, drop = FALSE],\n                             kinship = K,         \n                             addcovar = covar,\n                             cores = ${task.cpus},\n                             n_perm = 100)\n    }else{    \n      all_qtl7 <- rbind(all_qtl7, qtl_peaks_7)\n      allh2g <- rbind(allh2g, hout)\n    }\n\n  }\n  write.table(all_qtl7, file=\"${gene[0]}_eQTL_results.csv\", sep=\",\", quote=F, col.names=F, row.names=F)\n  write.table(allh2g, paste0(genes[1], \"_h2g.csv\"), col.names=F, row.names=F, sep=\",\", quote=F)\n  write.table(qtl_perm_i, paste0(genes[1], \"_scan1perm.csv\"), col.names=F, row.names=F, sep=\",\", quote=F)  \n  save(qtl_perm_i, file = \"${gene[0]}_qtl_out.rdata\")\n  print(allh2g)\n  print(all_qtl7)\n  \"\"\"\n}",
        "nb_lignes_process": 58,
        "string_script": "  \"\"\"\n  #!/usr/bin/env Rscript\n  library(\"qtl2\")\n  library(\"parallel\")\n  # Includes metadata, apr, K, and ctable - each gene is column, rows are individuals\n  load(\"$rdata\")\n  genes <- strsplit(gsub(\",|\\\\\\\\[|\\\\\\\\]\", \"\",\"${gene}\"), \" \")[[1]]\n  covar <- metadata[,c(\"sex\", \"ngen\")]\n  covar\\$sex <- (covar\\$sex==\"M\")+0\n  for (gene in genes){\n    qtl_cis_i = scan1(genoprobs = apr,\n                      pheno = ctable[,gene, drop = FALSE],\n                      kinship = K,\n                      addcovar = covar,\n                      cores = ${task.cpus})\n    qtl_peaks_7 = find_peaks(qtl_cis_i, map=map,\n                             threshold=${params.qthreshold})\n    # Take only the maximal peak for each gene. This is done for statistical reasons\n    # Since the empirical p-value use only the top score\n    qtl_peaks_7 <- qtl_peaks_7[which.max(qtl_peaks_7\\$lod),]\n    h2g = est_herit(ctable[,gene, drop=FALSE], K.overall, covar)\n    hout <- c(gene, h2g[1], attr(h2g, \"sample_size\"), attr(h2g, \"log10lik\"))\n    if (gene == genes[1]){\n      all_qtl7 <- qtl_peaks_7\n      allh2g <- hout\n      qtl_perm_i = scan1perm(genoprobs = apr,\n                             pheno = ctable[,gene, drop = FALSE],\n                             kinship = K,         \n                             addcovar = covar,\n                             cores = ${task.cpus},\n                             n_perm = 100)\n    }else{    \n      all_qtl7 <- rbind(all_qtl7, qtl_peaks_7)\n      allh2g <- rbind(allh2g, hout)\n    }\n\n  }\n  write.table(all_qtl7, file=\"${gene[0]}_eQTL_results.csv\", sep=\",\", quote=F, col.names=F, row.names=F)\n  write.table(allh2g, paste0(genes[1], \"_h2g.csv\"), col.names=F, row.names=F, sep=\",\", quote=F)\n  write.table(qtl_perm_i, paste0(genes[1], \"_scan1perm.csv\"), col.names=F, row.names=F, sep=\",\", quote=F)  \n  save(qtl_perm_i, file = \"${gene[0]}_qtl_out.rdata\")\n  print(allh2g)\n  print(all_qtl7)\n  \"\"\"",
        "nb_lignes_script": 43,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "readydat",
            "genes"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pdfs",
            "id_eQTL",
            "h2g_gene",
            "gene_perm"
        ],
        "nb_outputs": 4,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'R'",
            "label 'single_cpu'"
        ],
        "when": "",
        "stub": ""
    },
    "collect_h2g": {
        "name_process": "collect_h2g",
        "string_process": "\nprocess collect_h2g{\n  publishDir path:params.outdir, mode:'copy'\n  input:\n    file h2g from h2g_all.collect()\n    file perm from perm_all.collect()\n\n  output:\n    file \"all_genes_Cecum_h2g_estimates.csv\" into h2g_af\n    file \"all_genes_scan1perm_results.csv\" into pall\n\n  script:\n  \"\"\"\n  echo \"gene,h2g,sample_size,loglike\" > all_genes_Cecum_h2g_estimates.csv\n  cat ${h2g} >> all_genes_Cecum_h2g_estimates.csv\n  cat ${perm} > all_genes_scan1perm_results.csv\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  echo \"gene,h2g,sample_size,loglike\" > all_genes_Cecum_h2g_estimates.csv\n  cat ${h2g} >> all_genes_Cecum_h2g_estimates.csv\n  cat ${perm} > all_genes_scan1perm_results.csv\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "h2g_all",
            "perm_all"
        ],
        "nb_inputs": 2,
        "outputs": [
            "h2g_af",
            "pall"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "eQTL_rdata": {
        "name_process": "eQTL_rdata",
        "string_process": "\nprocess eQTL_rdata{\n  publishDir path:params.outdir, mode:'copy'\n  label 'R'\n  input:\n    file rdata from readydat2\n    file id_res from id_eQTL.collect()\n    file permall from pall\n  output:\n    file \"qtlviewer_DO_Cecum_416_*.RData\" into viewerdata\n    file \"all_genes_eQTL_peaks_results.csv\" into alleqtl\n  script:\n  \"\"\"\n  #!/usr/bin/env Rscript\n  # Use biomaRt to get gene info\n  library(biomaRt)\n  library(parallel)\n  library(doParallel)\n  library(tibble)\n  load(\"${rdata}\")\n  \n  # Load the empirical shuffled LOD scores\n  shuflod <- read.csv(\"${permall}\", header=F)\\$V1\n  getpv <- function(LOD) {\n    (sum(shuflod >= LOD)+1)/(length(shuflod)+1)\n  }\n  maRt = useMart(biomart = \"ENSEMBL_MART_ENSEMBL\",\n               host = \"nov2020.archive.ensembl.org\",\n               dataset = \"mmusculus_gene_ensembl\")\n  maRt_filter = \"ensembl_gene_id\"\n  maRt_attributes = c(\"mgi_symbol\",\"chromosome_name\",\"start_position\",\n                      \"end_position\",\"strand\",\"ensembl_gene_id\")\n  colnames(ctable) <- sapply(sapply(colnames(ctable), strsplit, \"_\"), \"[[\", 1)\n  eQTL_maRt = getBM(maRt_attributes, maRt_filter, colnames(ctable), maRt)\n  eQTL_maRt\\$marker_start = ifelse(sign(eQTL_maRt\\$strand) == 1,\n                                  eQTL_maRt\\$start_position,\n                                  eQTL_maRt\\$end_position) \n  annotation <- data.frame(gene.id = eQTL_maRt\\$ensembl_gene_id,\n                           symbol  = eQTL_maRt\\$mgi_symbol,\n                           chr     = eQTL_maRt\\$chromosome_name,\n                           start   = round(eQTL_maRt\\$start_position/10^6, digits=1),\n                           end     = round(eQTL_maRt\\$end_position/10^6, digits=1),\n                           strand  = eQTL_maRt\\$strand, stringsAsFactors = F)\n  annotation\\$middle <- round((annotation\\$start + annotation\\$end)/2, digits=1)\n  annotation <- annotation[annotation\\$chr %in% c(1:19,\"X\"),]\n  annotation <- annotation[!duplicated(annotation\\$gene.id),]\n  rownames(annotation) <- annotation\\$gene.id\n  #nearest marker\n  cl <- makeCluster(${task.cpus})\n  registerDoParallel(cl)\n  snps <- snps[snps\\$chr %in% c(1:19,\"X\"),]\n  idx <- foreach(i=1:nrow(annotation), .combine='c') %dopar% {\n    dist.to <- abs(snps\\$pos - annotation\\$middle[i])\n    min.dist <- min(dist.to[snps\\$chr == annotation\\$chr[i]])\n    which(snps\\$chr == annotation\\$chr[i] & dist.to==min.dist)[1]\n  }\n  annotation\\$nearest.marker.id <- snps[idx,\"marker\"]\n  stopCluster(cl)\n\n  gnames <- intersect(colnames(ctable), annotation\\$gene.id)\n  ctable <- ctable[, gnames]\n  annotation <- annotation[gnames,]\n  \n  covar <- metadata[rownames(ctable),c(\"sex\", \"ngen\")]\n  covar\\$sex <- (covar\\$sex==\"M\")+0\n  cv <- covar\n  cv\\$sex <- factor(cv\\$sex)\n  cv\\$ngen <- factor(cv\\$ngen)\n  covar.matrix <- model.matrix(~sex + ngen, cv)[, -1]\n  covar\\$mouse.id <- rownames(covar)\n\n  #covar.info\n  covar.info <- tibble(sample.column   = colnames(covar[,c(\"sex\", \"ngen\")]),\n                           display.name    = c(\"Sex\", \"Generation\"),\n                           interactive     = rep(FALSE, 2),\n                           primary         = c(TRUE, TRUE),\n                           lod.peaks       = c(NA,NA), stringsAsFactors = FALSE)\n\n  #data\n  data <- ctable # you need the expression profile matrix\n  #datatype\n  datatype <- \"mRNA\"\n\n  #display.name\n  display.name <- \"DrugsNaiveCecum_DO\"\n\n\n  # Read eQTLs results\n  qfiles = strsplit(\"${id_res}\", \" \")[[1]] \n  alleqtls <- NULL\n  for (qf in qfiles){\n    qr <- read.table(qf, col.names = c(\"X\", \"gene\", \"chr\", \"pos\", \"LOD\"), stringsAsFactors = FALSE, sep = \",\")[,-1]\n    alleqtls <- rbind(alleqtls, qr)\n  }\n  alleqtls\\$pvalue <- sapply(alleqtls\\$LOD, getpv)\n  alleqtls\\$qvalue <- p.adjust(alleqtls\\$pvalue, method=\"BH\")\n  alleqtls <- alleqtls[alleqtls\\$qvalue < 0.1, ]\n  alleqtls\\$gene <- sapply(sapply(alleqtls\\$gene, strsplit, \"_\"), \"[[\", 1)\n  alleqtls <- merge(alleqtls, snps[!duplicated(paste(snps\\$chr, snps\\$pos, sep=\"-\")),], all.x = TRUE, all.y = FALSE, by = c(\"chr\", \"pos\"))\n  alleqtls <- merge(alleqtls, annotation, by.x = \"gene\", by.y = \"gene.id\", suffixes=c(\"\", \".gene\"))\n  alleqtls\\$cis <- alleqtls\\$chr == alleqtls\\$chr.gene & alleqtls\\$start >= alleqtls\\$pos-$cisdist & alleqtls\\$end <= alleqtls\\$pos+$cisdist\n  write.csv(alleqtls, \"all_genes_eQTL_peaks_results.csv\")\n  lod.peaks <- tibble(gene.id = alleqtls\\$gene, marker.id = alleqtls\\$marker, lod = alleqtls\\$LOD)\n\n  #dataset list\n  assign(paste0(\"dataset.\",\"DO_Cecum_416\"),list(annot.mrna    = as_tibble(annotation),\n                                            annot.samples      = covar,\n                                            covar.matrix       = covar.matrix,\n                                            covar.info         = covar.info, \n                                            data               = as.matrix(ctable),      \n                                            datatype           = datatype, \n                                            display.name       = display.name, \n                                            lod.peaks          = list(additive=lod.peaks)))\n  genoprobs = apr\n  markers = tibble(marker.id = snps\\$marker, chr = snps\\$chr, pos = snps\\$pos)\n  ensembl.version = 83\n  save(genoprobs, \n       K, \n       map, \n       markers, \n       dataset.DO_Cecum_416, \n       ensembl.version,\n       file = paste0(\"qtlviewer_DO_Cecum_416_06302020\",\".RData\")\n  )\n\n\n\n  \n  \"\"\"\n}",
        "nb_lignes_process": 128,
        "string_script": "  \"\"\"\n  #!/usr/bin/env Rscript\n  # Use biomaRt to get gene info\n  library(biomaRt)\n  library(parallel)\n  library(doParallel)\n  library(tibble)\n  load(\"${rdata}\")\n  \n  # Load the empirical shuffled LOD scores\n  shuflod <- read.csv(\"${permall}\", header=F)\\$V1\n  getpv <- function(LOD) {\n    (sum(shuflod >= LOD)+1)/(length(shuflod)+1)\n  }\n  maRt = useMart(biomart = \"ENSEMBL_MART_ENSEMBL\",\n               host = \"nov2020.archive.ensembl.org\",\n               dataset = \"mmusculus_gene_ensembl\")\n  maRt_filter = \"ensembl_gene_id\"\n  maRt_attributes = c(\"mgi_symbol\",\"chromosome_name\",\"start_position\",\n                      \"end_position\",\"strand\",\"ensembl_gene_id\")\n  colnames(ctable) <- sapply(sapply(colnames(ctable), strsplit, \"_\"), \"[[\", 1)\n  eQTL_maRt = getBM(maRt_attributes, maRt_filter, colnames(ctable), maRt)\n  eQTL_maRt\\$marker_start = ifelse(sign(eQTL_maRt\\$strand) == 1,\n                                  eQTL_maRt\\$start_position,\n                                  eQTL_maRt\\$end_position) \n  annotation <- data.frame(gene.id = eQTL_maRt\\$ensembl_gene_id,\n                           symbol  = eQTL_maRt\\$mgi_symbol,\n                           chr     = eQTL_maRt\\$chromosome_name,\n                           start   = round(eQTL_maRt\\$start_position/10^6, digits=1),\n                           end     = round(eQTL_maRt\\$end_position/10^6, digits=1),\n                           strand  = eQTL_maRt\\$strand, stringsAsFactors = F)\n  annotation\\$middle <- round((annotation\\$start + annotation\\$end)/2, digits=1)\n  annotation <- annotation[annotation\\$chr %in% c(1:19,\"X\"),]\n  annotation <- annotation[!duplicated(annotation\\$gene.id),]\n  rownames(annotation) <- annotation\\$gene.id\n  #nearest marker\n  cl <- makeCluster(${task.cpus})\n  registerDoParallel(cl)\n  snps <- snps[snps\\$chr %in% c(1:19,\"X\"),]\n  idx <- foreach(i=1:nrow(annotation), .combine='c') %dopar% {\n    dist.to <- abs(snps\\$pos - annotation\\$middle[i])\n    min.dist <- min(dist.to[snps\\$chr == annotation\\$chr[i]])\n    which(snps\\$chr == annotation\\$chr[i] & dist.to==min.dist)[1]\n  }\n  annotation\\$nearest.marker.id <- snps[idx,\"marker\"]\n  stopCluster(cl)\n\n  gnames <- intersect(colnames(ctable), annotation\\$gene.id)\n  ctable <- ctable[, gnames]\n  annotation <- annotation[gnames,]\n  \n  covar <- metadata[rownames(ctable),c(\"sex\", \"ngen\")]\n  covar\\$sex <- (covar\\$sex==\"M\")+0\n  cv <- covar\n  cv\\$sex <- factor(cv\\$sex)\n  cv\\$ngen <- factor(cv\\$ngen)\n  covar.matrix <- model.matrix(~sex + ngen, cv)[, -1]\n  covar\\$mouse.id <- rownames(covar)\n\n  #covar.info\n  covar.info <- tibble(sample.column   = colnames(covar[,c(\"sex\", \"ngen\")]),\n                           display.name    = c(\"Sex\", \"Generation\"),\n                           interactive     = rep(FALSE, 2),\n                           primary         = c(TRUE, TRUE),\n                           lod.peaks       = c(NA,NA), stringsAsFactors = FALSE)\n\n  #data\n  data <- ctable # you need the expression profile matrix\n  #datatype\n  datatype <- \"mRNA\"\n\n  #display.name\n  display.name <- \"DrugsNaiveCecum_DO\"\n\n\n  # Read eQTLs results\n  qfiles = strsplit(\"${id_res}\", \" \")[[1]] \n  alleqtls <- NULL\n  for (qf in qfiles){\n    qr <- read.table(qf, col.names = c(\"X\", \"gene\", \"chr\", \"pos\", \"LOD\"), stringsAsFactors = FALSE, sep = \",\")[,-1]\n    alleqtls <- rbind(alleqtls, qr)\n  }\n  alleqtls\\$pvalue <- sapply(alleqtls\\$LOD, getpv)\n  alleqtls\\$qvalue <- p.adjust(alleqtls\\$pvalue, method=\"BH\")\n  alleqtls <- alleqtls[alleqtls\\$qvalue < 0.1, ]\n  alleqtls\\$gene <- sapply(sapply(alleqtls\\$gene, strsplit, \"_\"), \"[[\", 1)\n  alleqtls <- merge(alleqtls, snps[!duplicated(paste(snps\\$chr, snps\\$pos, sep=\"-\")),], all.x = TRUE, all.y = FALSE, by = c(\"chr\", \"pos\"))\n  alleqtls <- merge(alleqtls, annotation, by.x = \"gene\", by.y = \"gene.id\", suffixes=c(\"\", \".gene\"))\n  alleqtls\\$cis <- alleqtls\\$chr == alleqtls\\$chr.gene & alleqtls\\$start >= alleqtls\\$pos-$cisdist & alleqtls\\$end <= alleqtls\\$pos+$cisdist\n  write.csv(alleqtls, \"all_genes_eQTL_peaks_results.csv\")\n  lod.peaks <- tibble(gene.id = alleqtls\\$gene, marker.id = alleqtls\\$marker, lod = alleqtls\\$LOD)\n\n  #dataset list\n  assign(paste0(\"dataset.\",\"DO_Cecum_416\"),list(annot.mrna    = as_tibble(annotation),\n                                            annot.samples      = covar,\n                                            covar.matrix       = covar.matrix,\n                                            covar.info         = covar.info, \n                                            data               = as.matrix(ctable),      \n                                            datatype           = datatype, \n                                            display.name       = display.name, \n                                            lod.peaks          = list(additive=lod.peaks)))\n  genoprobs = apr\n  markers = tibble(marker.id = snps\\$marker, chr = snps\\$chr, pos = snps\\$pos)\n  ensembl.version = 83\n  save(genoprobs, \n       K, \n       map, \n       markers, \n       dataset.DO_Cecum_416, \n       ensembl.version,\n       file = paste0(\"qtlviewer_DO_Cecum_416_06302020\",\".RData\")\n  )\n\n\n\n  \n  \"\"\"",
        "nb_lignes_script": 116,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "readydat2",
            "id_eQTL",
            "pall"
        ],
        "nb_inputs": 3,
        "outputs": [
            "viewerdata",
            "alleqtl"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__gbrs_nextflow",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'R'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "UNIQUE_MATRIX_TYPES = Channel.of(\n\t\tgarnett_matrix_type,\n\t\tscmap_cluster_matrix_type,\n\t\tscmap_cell_matrix_type,\n\t\tscpred_matrix_type)\n\t\t.filter{ it != null }\n\t\t.unique()",
        "origin": [
            [
                "garnett_matrix_type,\n\t\tscmap_cluster_matrix_type,\n\t\tscmap_cell_matrix_type,\n\t\tscpred_matrix_type",
                "V"
            ]
        ],
        "gives": [
            [
                "UNIQUE_MATRIX_TYPES",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "IMPORT_PARAMS = Channel\n                .fromPath(params.download_data.import_datasets)\n                .splitCsv(header:false, sep:\",\")\n                .combine(UNIQUE_MATRIX_TYPES)",
        "origin": [
            [
                "UNIQUE_MATRIX_TYPES",
                "P"
            ],
            [
                "params.download_data.import_datasets",
                "A"
            ]
        ],
        "gives": [
            [
                "IMPORT_PARAMS",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "BARCODES_FOLDS = BARCODES.first()  ",
        "origin": [
            [
                "BARCODES",
                "P"
            ]
        ],
        "gives": [
            [
                "BARCODES_FOLDS",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "DATASET_ID = DATA_ID.first()",
        "origin": [
            [
                "DATA_ID",
                "P"
            ]
        ],
        "gives": [
            [
                "DATASET_ID",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "K_FOLD_CELL_INDEXES\n\t.flatten()\n\t.map{ f -> tuple(\"${f}\".split(\"\\\\.\")[1], f) }\n\t.set{FOLDS}",
        "origin": [
            [
                "K_FOLD_CELL_INDEXES",
                "P"
            ]
        ],
        "gives": [
            [
                "FOLDS",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "FOLD_DATA = FOLDS.combine(FETCH_DATA_UNMELT)",
        "origin": [
            [
                "FOLDS",
                "P"
            ],
            [
                "FETCH_DATA_UNMELT",
                "P"
            ]
        ],
        "gives": [
            [
                "FOLD_DATA",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "GROUPED_DATA = SPLIT_DATA.groupTuple(by:[0, 1])",
        "origin": [
            [
                "SPLIT_DATA",
                "P"
            ]
        ],
        "gives": [
            [
                "GROUPED_DATA",
                "P"
            ]
        ]
    }
}
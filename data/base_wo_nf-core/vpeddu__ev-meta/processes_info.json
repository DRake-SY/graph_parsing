{
    "Trimming_FastP": {
        "name_process": "Trimming_FastP",
        "string_process": "\nprocess Trimming_FastP { \n                                \npublishDir \"${params.OUTPUT}/fastp_PE/${base}\", mode: 'symlink', overwrite: true\ncontainer \"bromberglab/fastp\"\nbeforeScript 'chmod o+rw .'\ncpus 6\ninput: \n    tuple val(base), file(r1), file(r2)\noutput: \n    tuple val(base), file(\"${base}.trimmed.R1.fastq.gz\"), file(\"${base}.trimmed.R2.fastq.gz\")\n    tuple val(base), file(\"${base}.trimmed.R1.fastq.gz\")\n    file \"*\"\n\n\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \necho \"running fastp on ${base}\"\nfastp -w ${task.cpus} \\\n    -i ${r1} \\\n    -I ${r2} \\\n    -o ${base}.trimmed.R1.fastq.gz \\\n    -O ${base}.trimmed.R2.fastq.gz\n\"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \necho \"running fastp on ${base}\"\nfastp -w ${task.cpus} \\\n    -i ${r1} \\\n    -I ${r2} \\\n    -o ${base}.trimmed.R1.fastq.gz \\\n    -O ${base}.trimmed.R2.fastq.gz\n\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "base",
            "r1",
            "r2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "base",
            "base"
        ],
        "nb_outputs": 2,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/fastp_PE/${base}\", mode: 'symlink', overwrite: true",
            "container \"bromberglab/fastp\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 6"
        ],
        "when": "",
        "stub": ""
    },
    "Low_complexity_filtering": {
        "name_process": "Low_complexity_filtering",
        "string_process": "\nprocess Low_complexity_filtering { \n                                \npublishDir \"${params.OUTPUT}/fastp_PE/${base}\", mode: 'symlink', overwrite: true\ncontainer \"quay.io/biocontainers/bbmap:38.76--h516909a_0\"\nbeforeScript 'chmod o+rw .'\ncpus 6\ninput: \n    tuple val(base), file(r1), file(r2)\noutput: \n    tuple val(base), file(\"${base}.lcf_filtered.R1.fastq.gz\"), file(\"${base}.lcf_filtered.R2.fastq.gz\")\n\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\nbbduk.sh \\\n    in1=${r1} in2=${r2} \\\n    out1=${base}.lcf_filtered.R1.fastq.gz out2=${base}.lcf_filtered.R2.fastq.gz \\\n    entropy=0.7 \\\n    entropywindow=50 \\\n    entropyk=4 \n\"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\nbbduk.sh \\\n    in1=${r1} in2=${r2} \\\n    out1=${base}.lcf_filtered.R1.fastq.gz out2=${base}.lcf_filtered.R2.fastq.gz \\\n    entropy=0.7 \\\n    entropywindow=50 \\\n    entropyk=4 \n\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base",
            "r1",
            "r2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "base"
        ],
        "nb_outputs": 1,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/fastp_PE/${base}\", mode: 'symlink', overwrite: true",
            "container \"quay.io/biocontainers/bbmap:38.76--h516909a_0\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 6"
        ],
        "when": "",
        "stub": ""
    },
    "Host_depletion": {
        "name_process": "Host_depletion",
        "string_process": "\nprocess Host_depletion { \npublishDir \"${params.OUTPUT}/Star_PE/${base}\", mode: 'symlink', overwrite: true\ncontainer \"quay.io/biocontainers/star:2.7.9a--h9ee0642_0\"\nbeforeScript 'chmod o+rw .'\ncpus 8\ninput: \n    tuple val(base), file(r1), file(r2)\n    file starindex\noutput: \n    file \"${base}.star*\"\n    file \"${base}.starAligned.out.bam\"\n    tuple val(\"${base}\"), file(\"${base}.starUnmapped.out.mate1.fastq.gz\"), file(\"${base}.starUnmapped.out.mate2.fastq.gz\")\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \nSTAR   \\\n    --runThreadN ${task.cpus}  \\\n    --genomeDir ${starindex}   \\\n    --readFilesIn ${r1} ${r2} \\\n    --readFilesCommand zcat      \\\n    --outSAMtype BAM Unsorted \\\n    --outReadsUnmapped Fastx \\\n    --outFileNamePrefix ${base}.star  \n\nmv ${base}.starUnmapped.out.mate1 ${base}.starUnmapped.out.mate1.fastq\nmv ${base}.starUnmapped.out.mate2 ${base}.starUnmapped.out.mate2.fastq\n\ngzip ${base}.starUnmapped.out.mate1.fastq\ngzip ${base}.starUnmapped.out.mate2.fastq\n\"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \nSTAR   \\\n    --runThreadN ${task.cpus}  \\\n    --genomeDir ${starindex}   \\\n    --readFilesIn ${r1} ${r2} \\\n    --readFilesCommand zcat      \\\n    --outSAMtype BAM Unsorted \\\n    --outReadsUnmapped Fastx \\\n    --outFileNamePrefix ${base}.star  \n\nmv ${base}.starUnmapped.out.mate1 ${base}.starUnmapped.out.mate1.fastq\nmv ${base}.starUnmapped.out.mate2 ${base}.starUnmapped.out.mate2.fastq\n\ngzip ${base}.starUnmapped.out.mate1.fastq\ngzip ${base}.starUnmapped.out.mate2.fastq\n\"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "base",
            "r1",
            "r2",
            "starindex"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Star_PE/${base}\", mode: 'symlink', overwrite: true",
            "container \"quay.io/biocontainers/star:2.7.9a--h9ee0642_0\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "Kraken_prefilter": {
        "name_process": "Kraken_prefilter",
        "string_process": "\nprocess Kraken_prefilter { \npublishDir \"${params.OUTPUT}/Interleave_FASTQ/${base}\", mode: 'symlink', overwrite: true\ncontainer \"staphb/kraken2\"\nbeforeScript 'chmod o+rw .'\ncpus 8\ninput: \n    tuple val(base), file(r1), file(r2)\n    file kraken2_db\noutput: \n    tuple val(\"${base}\"), file(\"${base}.kraken2.report\")\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\nkraken2 --db ${kraken2_db} \\\n    --threads ${task.cpus} \\\n    --classified-out ${base}.kraken2.classified \\\n    --output ${base}.kraken2.output \\\n    --report ${base}.kraken2.report \\\n    --gzip-compressed \\\n    --unclassified-out ${base}.kraken2.unclassified \\\n    ${r1} ${r2}\n\n\"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\nkraken2 --db ${kraken2_db} \\\n    --threads ${task.cpus} \\\n    --classified-out ${base}.kraken2.classified \\\n    --output ${base}.kraken2.output \\\n    --report ${base}.kraken2.report \\\n    --gzip-compressed \\\n    --unclassified-out ${base}.kraken2.unclassified \\\n    ${r1} ${r2}\n\n\"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "base",
            "r1",
            "r2",
            "kraken2_db"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Interleave_FASTQ/${base}\", mode: 'symlink', overwrite: true",
            "container \"staphb/kraken2\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "Extract_db": {
        "name_process": "Extract_db",
        "string_process": "\nprocess Extract_db { \ncontainer 'quay.io/vpeddu/evmeta'\nbeforeScript 'chmod o+rw .'\ncpus 8\ninput: \n    tuple val(base), file(report)\n    file fastadb\n    file extract_script\noutput: \n    file(\"${base}__*\")\n\n\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n# python3 ${extract_script} ${report} ${fastadb}\n\n#grep -P \"\\tG\\t\" ${report} | cut -f5 | parallel {}.genus.fasta.gz /scratch/vpeddu/genus_level_download/test_index/\n# could filter by kraken report column 2 for all above some parameter (if > 25)\nfor i in `grep -P \"\\tG\\t\" ${report} | awk '\\$2>${params.KRAKEN2_THRESHOLD}' | cut -f5`\ndo\necho adding \\$i\nif [[ -f ${fastadb}/\\$i.genus.fasta.gz ]]; then\n    ##cat ${fastadb}/\\$i.genus.fasta.gz >> species.fasta.gz\n    cp ${fastadb}/\\$i.genus.fasta.gz ${base}__\\$i.genus.fasta.gz\nfi\ndone\n\n# TODO need to optimize this \n##mv species.fasta.gz ${base}.species.fasta.gz\n\n##gunzip ${base}.species.fasta.gz\n\n##pyfasta split -n ${params.FASTA_SPLIT_CHUNKS} ${base}.species.fasta\n\n##pigz ${base}.species.fasta \n\n\n##for f in *.fasta; do mv \"\\$f\" \"${base}__-\\$f\"; done\n\n##for i in *.fasta; do pigz \\$i; done\n\"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n# python3 ${extract_script} ${report} ${fastadb}\n\n#grep -P \"\\tG\\t\" ${report} | cut -f5 | parallel {}.genus.fasta.gz /scratch/vpeddu/genus_level_download/test_index/\n# could filter by kraken report column 2 for all above some parameter (if > 25)\nfor i in `grep -P \"\\tG\\t\" ${report} | awk '\\$2>${params.KRAKEN2_THRESHOLD}' | cut -f5`\ndo\necho adding \\$i\nif [[ -f ${fastadb}/\\$i.genus.fasta.gz ]]; then\n    ##cat ${fastadb}/\\$i.genus.fasta.gz >> species.fasta.gz\n    cp ${fastadb}/\\$i.genus.fasta.gz ${base}__\\$i.genus.fasta.gz\nfi\ndone\n\n# TODO need to optimize this \n##mv species.fasta.gz ${base}.species.fasta.gz\n\n##gunzip ${base}.species.fasta.gz\n\n##pyfasta split -n ${params.FASTA_SPLIT_CHUNKS} ${base}.species.fasta\n\n##pigz ${base}.species.fasta \n\n\n##for f in *.fasta; do mv \"\\$f\" \"${base}__-\\$f\"; done\n\n##for i in *.fasta; do pigz \\$i; done\n\"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "parallelGWAS"
        ],
        "tools_url": [
            "https://bio.tools/parallelgwas"
        ],
        "tools_dico": [
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            }
        ],
        "inputs": [
            "base",
            "report",
            "fastadb",
            "extract_script"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "container 'quay.io/vpeddu/evmeta'",
            "beforeScript 'chmod o+rw .'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "Minimap2_illumina": {
        "name_process": "Minimap2_illumina",
        "string_process": "\nprocess Minimap2_illumina { \n                                \npublishDir \"${params.OUTPUT}/Minimap2/${base}\", mode: 'symlink'\ncontainer \"quay.io/vpeddu/evmeta:latest\"\nbeforeScript 'chmod o+rw .'\ncpus 8\ninput: \n    tuple val(base), file(r1), file(r2), file(species_fasta)\noutput: \n    tuple val(\"${base}\"), file(\"${base}.sorted.filtered.bam\"), file(\"${base}.sorted.filtered.bam.bai\")\n    tuple val(\"${base}\"), file(\"${base}.unclassified.bam\"), file (\"${base}.unclassified.fastq.gz\")\n\nscript:\n\"\"\"\n#!/bin/bash\n\n#logging\necho \"ls of directory\" \nls -lah \n\necho \"running Minimap2 on ${base}\"\nminimap2 \\\n    -ax sr \\\n    -t ${task.cpus} \\\n    -K 16G \\\n    --split-prefix \\\n    -2 \\\n    ${species_fasta} \\\n    ${r1} ${r2} | samtools view -Sb -@ 4 - > ${base}.bam\n\nsamtools view -Sb -F 4 ${base}.bam > ${base}.filtered.bam\nsamtools sort ${base}.filtered.bam -o ${base}.sorted.filtered.bam \nsamtools index ${base}.sorted.filtered.bam\n# output unclassified reads\nsamtools view -Sb -@  ${task.cpus} -f 4 ${base}.bam > ${base}.unclassified.bam\n\n# cleanup intermediate file\nrm ${base}.bam\n\nsamtools fastq -@ ${task.cpus} ${base}.unclassified.bam | gzip > ${base}.unclassified.fastq.gz\n\n\"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "\"\"\"\n#!/bin/bash\n\n#logging\necho \"ls of directory\" \nls -lah \n\necho \"running Minimap2 on ${base}\"\nminimap2 \\\n    -ax sr \\\n    -t ${task.cpus} \\\n    -K 16G \\\n    --split-prefix \\\n    -2 \\\n    ${species_fasta} \\\n    ${r1} ${r2} | samtools view -Sb -@ 4 - > ${base}.bam\n\nsamtools view -Sb -F 4 ${base}.bam > ${base}.filtered.bam\nsamtools sort ${base}.filtered.bam -o ${base}.sorted.filtered.bam \nsamtools index ${base}.sorted.filtered.bam\n# output unclassified reads\nsamtools view -Sb -@  ${task.cpus} -f 4 ${base}.bam > ${base}.unclassified.bam\n\n# cleanup intermediate file\nrm ${base}.bam\n\nsamtools fastq -@ ${task.cpus} ${base}.unclassified.bam | gzip > ${base}.unclassified.fastq.gz\n\n\"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "base",
            "r1",
            "r2",
            "species_fasta"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Minimap2/${base}\", mode: 'symlink'",
            "container \"quay.io/vpeddu/evmeta:latest\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "Sam_conversion": {
        "name_process": "Sam_conversion",
        "string_process": "\nprocess Sam_conversion { \npublishDir \"${params.OUTPUT}/sam_conversion/${base}\", mode: 'symlink', overwrite: true\ncontainer \"staphb/samtools\"\nbeforeScript 'chmod o+rw .'\ncpus 8\ninput: \n    tuple val(base), file(sam)\noutput: \n    tuple val(\"${base}\"), file(\"${base}.sorted.bam\"), file(\"${base}.sorted.bam.bai\")\n    file \"${base}.unclassfied.bam\"\n\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\nsamtools view -Sb -@  ${task.cpus} -F 4 ${sam} > ${base}.bam\nsamtools sort -@ ${task.cpus} ${base}.bam > ${base}.sorted.bam\nsamtools index ${base}.sorted.bam\n\nsamtools view -Sb -@  ${task.cpus} -f 4 ${sam} > ${base}.unclassfied.bam\n\n\n\"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\nsamtools view -Sb -@  ${task.cpus} -F 4 ${sam} > ${base}.bam\nsamtools sort -@ ${task.cpus} ${base}.bam > ${base}.sorted.bam\nsamtools index ${base}.sorted.bam\n\nsamtools view -Sb -@  ${task.cpus} -f 4 ${sam} > ${base}.unclassfied.bam\n\n\n\"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "base",
            "sam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/sam_conversion/${base}\", mode: 'symlink', overwrite: true",
            "container \"staphb/samtools\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "Classify": {
        "name_process": "Classify",
        "string_process": "\nprocess Classify { \npublishDir \"${params.OUTPUT}/Classification/${base}\", mode: 'symlink', overwrite: true\ncontainer 'vpeddu/nanopore_metagenomics:latest'\nbeforeScript 'chmod o+rw .'\nerrorStrategy 'ignore'\ncpus 8\ninput: \n    tuple val(base), file(bam), file(bamindex), file(unclassified_fastq), file(plasmid_fastq), val(plasmid_count)\n    file taxdump\n    file classify_script\n    file accessiontotaxid\n\noutput: \n    tuple val(\"${base}\"), file(\"${base}.prekraken.tsv\")\n\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n#mv taxonomy/taxdump.tar.gz .\n#tar -xvzf taxdump.tar.gz\n\n# for whatever reason if we don't copy the taxdump file, the original gets modified which breaks every other classification process\ncp taxdump/*.dmp .\n\n# run LCA script\npython3 ${classify_script} ${bam} ${base} \n\n# counting unassigned reads to add back into final report\n#echo \\$(zcat ${unclassified_fastq} | wc -l)/4 | bc >> ${base}.prekraken.tsv\nlinecount=\\$(zcat ${unclassified_fastq} | wc -l)\nfastqlinecount=\\$(awk -v lc=\\$linecount 'BEGIN {  print (lc/4) }')\necho -e \"0\\\\t\\$fastqlinecount\" >> ${base}.prekraken.tsv\n\n# add plasmid count back into results\necho -e \"36549\\\\t${plasmid_count}\" >> ${base}.prekraken.tsv\n\necho \\$fastqlinecount \\$linecount unclassified reads \n\n\"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n#mv taxonomy/taxdump.tar.gz .\n#tar -xvzf taxdump.tar.gz\n\n# for whatever reason if we don't copy the taxdump file, the original gets modified which breaks every other classification process\ncp taxdump/*.dmp .\n\n# run LCA script\npython3 ${classify_script} ${bam} ${base} \n\n# counting unassigned reads to add back into final report\n#echo \\$(zcat ${unclassified_fastq} | wc -l)/4 | bc >> ${base}.prekraken.tsv\nlinecount=\\$(zcat ${unclassified_fastq} | wc -l)\nfastqlinecount=\\$(awk -v lc=\\$linecount 'BEGIN {  print (lc/4) }')\necho -e \"0\\\\t\\$fastqlinecount\" >> ${base}.prekraken.tsv\n\n# add plasmid count back into results\necho -e \"36549\\\\t${plasmid_count}\" >> ${base}.prekraken.tsv\n\necho \\$fastqlinecount \\$linecount unclassified reads \n\n\"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base",
            "plasmid_count",
            "bam",
            "bamindex",
            "unclassified_fastq",
            "plasmid_fastq",
            "taxdump",
            "classify_script",
            "accessiontotaxid"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Classification/${base}\", mode: 'symlink', overwrite: true",
            "container 'vpeddu/nanopore_metagenomics:latest'",
            "beforeScript 'chmod o+rw .'",
            "errorStrategy 'ignore'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "Classify_orthologs": {
        "name_process": "Classify_orthologs",
        "string_process": "\nprocess Classify_orthologs { \npublishDir \"${params.OUTPUT}/Classify_orthologs/${base}\", mode: 'symlink', overwrite: true\ncontainer 'quay.io/vpeddu/evmeta'\nbeforeScript 'chmod o+rw .'\nerrorStrategy 'ignore'\ncpus 24\ninput: \n                                                       \n                                                                               \n    tuple val(base), file(bam), file(bamindex), file(unclassified_bam), file(unclassified_fastq)\n    file taxdump\n    file classify_script\n    file accessiontotaxid\noutput: \n    tuple val(\"${base}\"), file(\"${base}.orthologs.prekraken.tsv\")\n                                      \n\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n#mv taxonomy/taxdump.tar.gz .\n#tar -xvzf taxdump.tar.gz\ncp taxdump/*.dmp .\npython3 ${classify_script} ${base}.emapper.annotations ${base} \n\n\"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n#mv taxonomy/taxdump.tar.gz .\n#tar -xvzf taxdump.tar.gz\ncp taxdump/*.dmp .\npython3 ${classify_script} ${base}.emapper.annotations ${base} \n\n\"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base",
            "bam",
            "bamindex",
            "unclassified_bam",
            "unclassified_fastq",
            "taxdump",
            "classify_script",
            "accessiontotaxid"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Classify_orthologs/${base}\", mode: 'symlink', overwrite: true",
            "container 'quay.io/vpeddu/evmeta'",
            "beforeScript 'chmod o+rw .'",
            "errorStrategy 'ignore'",
            "cpus 24"
        ],
        "when": "",
        "stub": ""
    },
    "Write_report": {
        "name_process": "Write_report",
        "string_process": "\nprocess Write_report { \npublishDir \"${params.OUTPUT}/\", mode: 'symlink', overwrite: true\ncontainer \"evolbioinfo/krakenuniq:v0.5.8\"\nbeforeScript 'chmod o+rw .'\nerrorStrategy 'ignore'\ncpus 1\ninput: \n    tuple val(base), file(prekraken)\n    file krakenuniqdb\noutput: \n    file \"${base}.final.report.tsv\"\n\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\nkrakenuniq-report --db ${krakenuniqdb} \\\n--taxon-counts \\\n${prekraken} > ${base}.final.report.tsv\n\"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\nkrakenuniq-report --db ${krakenuniqdb} \\\n--taxon-counts \\\n${prekraken} > ${base}.final.report.tsv\n\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base",
            "prekraken",
            "krakenuniqdb"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/\", mode: 'symlink', overwrite: true",
            "container \"evolbioinfo/krakenuniq:v0.5.8\"",
            "beforeScript 'chmod o+rw .'",
            "errorStrategy 'ignore'",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "Write_report_orthologs": {
        "name_process": "Write_report_orthologs",
        "string_process": "\nprocess Write_report_orthologs { \npublishDir \"${params.OUTPUT}/ortholog_reports/\", mode: 'symlink', overwrite: true\ncontainer \"evolbioinfo/krakenuniq:v0.5.8\"\nbeforeScript 'chmod o+rw .'\nerrorStrategy 'ignore'\ncpus 1\ninput: \n    tuple val(base), file(prekraken)\n    file krakenuniqdb\noutput: \n    file \"${base}.orthologs.final.report.tsv\"\n\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\nkrakenuniq-report --db ${krakenuniqdb} \\\n--taxon-counts \\\n${prekraken} > ${base}.orthologs.final.report.tsv\n\"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\nkrakenuniq-report --db ${krakenuniqdb} \\\n--taxon-counts \\\n${prekraken} > ${base}.orthologs.final.report.tsv\n\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base",
            "prekraken",
            "krakenuniqdb"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/ortholog_reports/\", mode: 'symlink', overwrite: true",
            "container \"evolbioinfo/krakenuniq:v0.5.8\"",
            "beforeScript 'chmod o+rw .'",
            "errorStrategy 'ignore'",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "NanoFilt": {
        "name_process": "NanoFilt",
        "string_process": "\nprocess NanoFilt { \n\npublishDir \"${params.OUTPUT}/Nanofilt/${base}\", mode: 'symlink', overwrite: true\n                                                             \ncontainer \" quay.io/biocontainers/nanofilt:2.8.0--py_0\"\nbeforeScript 'chmod o+rw .'\ncpus 6\ninput: \n    tuple val(base), file(r1)\noutput: \n    tuple val(base), file(\"${base}.filtered.fastq.gz\")\n    file \"*\"\n\n\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \necho \"running Nanofilt on ${base}\"\n\n# nanofilt doesn't have gzip support so we have to pipe in from gunzip\ngunzip -c ${r1} | NanoFilt -q ${params.NANOFILT_QUALITY} \\\n        --maxlength ${params.NANOFILT_MAXLENGTH} \\\n        --length ${params.NANOFILT_MINLENGTH} | gzip > ${base}.filtered.fastq.gz\n\n\"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \necho \"running Nanofilt on ${base}\"\n\n# nanofilt doesn't have gzip support so we have to pipe in from gunzip\ngunzip -c ${r1} | NanoFilt -q ${params.NANOFILT_QUALITY} \\\n        --maxlength ${params.NANOFILT_MAXLENGTH} \\\n        --length ${params.NANOFILT_MINLENGTH} | gzip > ${base}.filtered.fastq.gz\n\n\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base",
            "r1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "base"
        ],
        "nb_outputs": 1,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Nanofilt/${base}\", mode: 'symlink', overwrite: true",
            "container \" quay.io/biocontainers/nanofilt:2.8.0--py_0\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 6"
        ],
        "when": "",
        "stub": ""
    },
    "NanoPlot": {
        "name_process": "NanoPlot",
        "string_process": "\nprocess NanoPlot { \n                                \npublishDir \"${params.OUTPUT}/NanoPlot/${base}\", mode: 'symlink', overwrite: true\ncontainer \"quay.io/biocontainers/nanoplot:1.38.1--pyhdfd78af_0\"\nbeforeScript 'chmod o+rw .'\ncpus 2\ninput: \n    tuple val(base), file(r1) \noutput: \n    file \"*\"\n\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n# run nanoplot \nNanoPlot -t ${task.cpus} \\\n    -p ${base} \\\n    --fastq ${r1} \\\n    --title ${base} \n\"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n# run nanoplot \nNanoPlot -t ${task.cpus} \\\n    -p ${base} \\\n    --fastq ${r1} \\\n    --title ${base} \n\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base",
            "r1"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/NanoPlot/${base}\", mode: 'symlink', overwrite: true",
            "container \"quay.io/biocontainers/nanoplot:1.38.1--pyhdfd78af_0\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 2"
        ],
        "when": "",
        "stub": ""
    },
    "Host_depletion_nanopore": {
        "name_process": "Host_depletion_nanopore",
        "string_process": "\nprocess Host_depletion_nanopore { \npublishDir \"${params.OUTPUT}/Host_filtered/${base}\", mode: 'symlink', overwrite: true\ncontainer \"vpeddu/nanopore_metagenomics:latest\"\nbeforeScript 'chmod o+rw .'\ncpus 8\ninput: \n    tuple val(base), file(r1)\n    file minimap2_host_index\n    file ribosome_trna\n    file minimap2_plasmid_db\noutput: \n    tuple val(\"${base}\"), file(\"${base}.host_filtered.plasmid_removed.fastq.gz\")\n    file \"${base}.host_mapped.bam\"\n    file \"${base}.trna.mapped.bam\"\n    tuple val(\"${base}\"), file(\"${base}.plasmid.fastq.gz\"), env(plasmid_count)\n\nscript:\n                              \nif ( \"${params.CLEAN_RIBOSOME_TRNA}\" == true) {\n    \"\"\"\n    #!/bin/bash\n    #logging\n    echo \"ls of directory\" \n    ls -lah \n\n    #cat ${minimap2_host_index} ${ribosome_trna} > host.fa\n\n    minimap2 \\\n        -ax map-ont \\\n        -t \"\\$((${task.cpus}-2))\" \\\n        -2 \\\n        ${ribosome_trna} \\\n        ${r1} | samtools view -Sb -@ 2 - > ${base}.trna.bam\n\n        samtools fastq -@ 4 -n -f 4 ${base}.trna.bam | pigz > ${base}.trna_filtered.fastq.gz\n        samtools fastq -@ 4 -n -F 4 ${base}.trna.bam > ${base}.trna.mapped.bam\n\n    minimap2 \\\n        -ax map-ont \\\n        -t \"\\$((${task.cpus}-2))\" \\\n        -2 \\\n        ${minimap2_host_index} \\\n        ${base}.trna_filtered.fastq.gz | samtools view -Sb -@ 2 - > ${base}.host_mapped.bam\n        samtools fastq -@ 4 -n -f 4 ${base}.host_mapped.bam | pigz > ${base}.host_filtered.fastq.gz\n    \n    minimap2 \\\n        -ax map-ont \\\n        -t ${task.cpus} \\\n        --sam-hit-only \\\n        ${minimap2_plasmid_db} \\\n        ${base}.host_filtered.fastq.gz | samtools view -F 4 -Sb - > ${base}.plasmid_extraction.bam\n\n\n    samtools view ${base}.plasmid_extraction.bam | cut -f1 | sort | uniq > ${base}.plasmid_read_ids.txt\n\n    plasmid_count=`cat ${base}.plasmid_read_ids.txt | wc -l`\n    echo \"\\$plasmid_count sequences mapped to plasmid\" \n\n    /usr/local/miniconda/bin/seqkit grep -f ${base}.plasmid_read_ids.txt ${base}.host_filtered.fastq.gz | pigz > ${base}.plasmid.fastq.gz \n    /usr/local/miniconda/bin/seqkit grep -v -f ${base}.plasmid_read_ids.txt ${base}.host_filtered.fastq.gz | pigz > ${base}.host_filtered.plasmid_removed.fastq.gz \n\n\n\"\"\"\n    }\n                          \nelse {\n    \"\"\"\n    #!/bin/bash\n    #logging\n    echo \"ls of directory\" \n    ls -lah \n\n    #cat ${minimap2_host_index} ${ribosome_trna} > host.fa\n\n\n    minimap2 \\\n        -ax map-ont \\\n        -t \"\\$((${task.cpus}-2))\" \\\n        -2 \\\n        ${minimap2_host_index} \\\n        ${r1} | samtools view -Sb -@ 2 - > ${base}.host_mapped.bam\n        samtools fastq -@ 4 -n -f 4 ${base}.host_mapped.bam | pigz > ${base}.host_filtered.fastq.gz\n    \n    minimap2 \\\n        -ax map-ont \\\n        -t ${task.cpus} \\\n        --sam-hit-only \\\n        ${minimap2_plasmid_db} \\\n        ${base}.host_filtered.fastq.gz | samtools view -F 4 -Sb - > ${base}.plasmid_extraction.bam\n\n\n    samtools view ${base}.plasmid_extraction.bam | cut -f1 | sort | uniq > ${base}.plasmid_read_ids.txt\n\n    plasmid_count=`cat ${base}.plasmid_read_ids.txt | wc -l`\n    echo \"\\$plasmid_count sequences mapped to plasmid\" \n\n    /usr/local/miniconda/bin/seqkit grep -f ${base}.plasmid_read_ids.txt ${base}.host_filtered.fastq.gz | pigz > ${base}.plasmid.fastq.gz \n    /usr/local/miniconda/bin/seqkit grep -v -f ${base}.plasmid_read_ids.txt ${base}.host_filtered.fastq.gz | pigz > ${base}.host_filtered.plasmid_removed.fastq.gz \n\n    \"\"\"\n    }  \n\n}",
        "nb_lignes_process": 102,
        "string_script": "if ( \"${params.CLEAN_RIBOSOME_TRNA}\" == true) {\n    \"\"\"\n    #!/bin/bash\n    #logging\n    echo \"ls of directory\" \n    ls -lah \n\n    #cat ${minimap2_host_index} ${ribosome_trna} > host.fa\n\n    minimap2 \\\n        -ax map-ont \\\n        -t \"\\$((${task.cpus}-2))\" \\\n        -2 \\\n        ${ribosome_trna} \\\n        ${r1} | samtools view -Sb -@ 2 - > ${base}.trna.bam\n\n        samtools fastq -@ 4 -n -f 4 ${base}.trna.bam | pigz > ${base}.trna_filtered.fastq.gz\n        samtools fastq -@ 4 -n -F 4 ${base}.trna.bam > ${base}.trna.mapped.bam\n\n    minimap2 \\\n        -ax map-ont \\\n        -t \"\\$((${task.cpus}-2))\" \\\n        -2 \\\n        ${minimap2_host_index} \\\n        ${base}.trna_filtered.fastq.gz | samtools view -Sb -@ 2 - > ${base}.host_mapped.bam\n        samtools fastq -@ 4 -n -f 4 ${base}.host_mapped.bam | pigz > ${base}.host_filtered.fastq.gz\n    \n    minimap2 \\\n        -ax map-ont \\\n        -t ${task.cpus} \\\n        --sam-hit-only \\\n        ${minimap2_plasmid_db} \\\n        ${base}.host_filtered.fastq.gz | samtools view -F 4 -Sb - > ${base}.plasmid_extraction.bam\n\n\n    samtools view ${base}.plasmid_extraction.bam | cut -f1 | sort | uniq > ${base}.plasmid_read_ids.txt\n\n    plasmid_count=`cat ${base}.plasmid_read_ids.txt | wc -l`\n    echo \"\\$plasmid_count sequences mapped to plasmid\" \n\n    /usr/local/miniconda/bin/seqkit grep -f ${base}.plasmid_read_ids.txt ${base}.host_filtered.fastq.gz | pigz > ${base}.plasmid.fastq.gz \n    /usr/local/miniconda/bin/seqkit grep -v -f ${base}.plasmid_read_ids.txt ${base}.host_filtered.fastq.gz | pigz > ${base}.host_filtered.plasmid_removed.fastq.gz \n\n\n\"\"\"\n    }\n                          \nelse {\n    \"\"\"\n    #!/bin/bash\n    #logging\n    echo \"ls of directory\" \n    ls -lah \n\n    #cat ${minimap2_host_index} ${ribosome_trna} > host.fa\n\n\n    minimap2 \\\n        -ax map-ont \\\n        -t \"\\$((${task.cpus}-2))\" \\\n        -2 \\\n        ${minimap2_host_index} \\\n        ${r1} | samtools view -Sb -@ 2 - > ${base}.host_mapped.bam\n        samtools fastq -@ 4 -n -f 4 ${base}.host_mapped.bam | pigz > ${base}.host_filtered.fastq.gz\n    \n    minimap2 \\\n        -ax map-ont \\\n        -t ${task.cpus} \\\n        --sam-hit-only \\\n        ${minimap2_plasmid_db} \\\n        ${base}.host_filtered.fastq.gz | samtools view -F 4 -Sb - > ${base}.plasmid_extraction.bam\n\n\n    samtools view ${base}.plasmid_extraction.bam | cut -f1 | sort | uniq > ${base}.plasmid_read_ids.txt\n\n    plasmid_count=`cat ${base}.plasmid_read_ids.txt | wc -l`\n    echo \"\\$plasmid_count sequences mapped to plasmid\" \n\n    /usr/local/miniconda/bin/seqkit grep -f ${base}.plasmid_read_ids.txt ${base}.host_filtered.fastq.gz | pigz > ${base}.plasmid.fastq.gz \n    /usr/local/miniconda/bin/seqkit grep -v -f ${base}.plasmid_read_ids.txt ${base}.host_filtered.fastq.gz | pigz > ${base}.host_filtered.plasmid_removed.fastq.gz \n\n    \"\"\"\n    }",
        "nb_lignes_script": 82,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "base",
            "r1",
            "minimap2_host_index",
            "ribosome_trna",
            "minimap2_plasmid_db"
        ],
        "nb_inputs": 5,
        "outputs": [
            "plasmid_count"
        ],
        "nb_outputs": 1,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Host_filtered/${base}\", mode: 'symlink', overwrite: true",
            "container \"vpeddu/nanopore_metagenomics:latest\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "Identify_resistant_plasmids": {
        "name_process": "Identify_resistant_plasmids",
        "string_process": "\nprocess Identify_resistant_plasmids { \npublishDir \"${params.OUTPUT}/plasmid_identification/${base}\", mode: 'symlink', overwrite: true\ncontainer \"vpeddu/nanopore_metagenomics:latest\"\nbeforeScript 'chmod o+rw .'\ncpus 8\n\n                                                   \n                                                                       \nerrorStrategy 'ignore'\ninput: \n    tuple val(base), file(plasmid_fastq), val(plasmidreadcount)\n    file amrdb\noutput: \n    tuple val(\"${base}\"), file(\"${base}.amrfinder.out.txt\"), file(\"${base}.plasmid.flye/assembly.fasta\")\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n# assemble plasmids with flye\n# meta and plasmid flags are used here to find plasmids from a metagenomics sample \n# need error handling for if nothing is assembled\n/Flye/bin/flye --plasmids \\\n    --meta \\\n    -t ${task.cpus} \\\n    -o ${base}.plasmid.flye \\\n    --nano-hq ${plasmid_fastq}\n\n# run amrfinder on flye assembly\n/amrfinder/amrfinder \\\n    -n ${base}.plasmid.flye/assembly.fasta \\\n    --threads ${task.cpus} \\\n    -d ${amrdb}/2021-12-21.1/ \\\n    -o ${base}.amrfinder.out.txt\n\n\n\"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n# assemble plasmids with flye\n# meta and plasmid flags are used here to find plasmids from a metagenomics sample \n# need error handling for if nothing is assembled\n/Flye/bin/flye --plasmids \\\n    --meta \\\n    -t ${task.cpus} \\\n    -o ${base}.plasmid.flye \\\n    --nano-hq ${plasmid_fastq}\n\n# run amrfinder on flye assembly\n/amrfinder/amrfinder \\\n    -n ${base}.plasmid.flye/assembly.fasta \\\n    --threads ${task.cpus} \\\n    -d ${amrdb}/2021-12-21.1/ \\\n    -o ${base}.amrfinder.out.txt\n\n\n\"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "base",
            "plasmidreadcount",
            "plasmid_fastq",
            "amrdb"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/plasmid_identification/${base}\", mode: 'symlink', overwrite: true",
            "container \"vpeddu/nanopore_metagenomics:latest\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 8",
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "MetaFlye": {
        "name_process": "MetaFlye",
        "string_process": "\nprocess MetaFlye { \npublishDir \"${params.OUTPUT}/MetaFlye/${base}\", mode: 'symlink', overwrite: true\ncontainer \"quay.io/biocontainers/flye:2.9--py27h6a42192_0\"\nbeforeScript 'chmod o+rw .'\nerrorStrategy 'ignore'\ncpus 16\ninput: \n    tuple val(base), file(unassigned_fastq)\noutput: \n    tuple val(\"${base}\"), file(\"${base}.flye.fasta.gz\")\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\nflye --nano-corr ${unassigned_fastq} \\\n    --out-dir ${base}.flye \\\n    -t ${task.cpus} \\\n    --meta \n\nif [[ -f ${base}.flye/assembly.fasta ]]\nthen\n    echo \"flye assembled reads\"\n    mv ${base}.fly e/assembly.fasta ${base}.flye.fasta\nelse\n    echo \"flye did not assemble reads\" \n    mv ${unassigned_fastq} ${base}.flye.fasta\nfi\n\nmv ${base}.flye/assembly.fasta ${base}.flye.fasta\n\ngzip ${base}.flye.fasta\n\"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\nflye --nano-corr ${unassigned_fastq} \\\n    --out-dir ${base}.flye \\\n    -t ${task.cpus} \\\n    --meta \n\nif [[ -f ${base}.flye/assembly.fasta ]]\nthen\n    echo \"flye assembled reads\"\n    mv ${base}.fly e/assembly.fasta ${base}.flye.fasta\nelse\n    echo \"flye did not assemble reads\" \n    mv ${unassigned_fastq} ${base}.flye.fasta\nfi\n\nmv ${base}.flye/assembly.fasta ${base}.flye.fasta\n\ngzip ${base}.flye.fasta\n\"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "base",
            "unassigned_fastq"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/MetaFlye/${base}\", mode: 'symlink', overwrite: true",
            "container \"quay.io/biocontainers/flye:2.9--py27h6a42192_0\"",
            "beforeScript 'chmod o+rw .'",
            "errorStrategy 'ignore'",
            "cpus 16"
        ],
        "when": "",
        "stub": ""
    },
    "Low_complexity_filtering_nanopore": {
        "name_process": "Low_complexity_filtering_nanopore",
        "string_process": "\nprocess Low_complexity_filtering_nanopore { \npublishDir \"${params.OUTPUT}/low_comnplexity_filter_nanopore/${base}\", mode: 'symlink', overwrite: true\ncontainer \"quay.io/biocontainers/bbmap:38.76--h516909a_0\"\nbeforeScript 'chmod o+rw .'\ncpus 6\ninput: \n    tuple val(base), file(r1)\noutput: \n    tuple val(base), file(\"${base}.lcf_filtered.fastq.gz\")\n\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n# run bbduk for low complexity filtering\nbbduk.sh \\\n    in1=${r1} \\\n    out1=${base}.lcf_filtered.fastq.gz \\\n    --ignorebadquality \\\n    entropy=0.7 \\\n    qin=33 \\\n    entropywindow=50 \\\n    entropyk=4 \n\"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n# run bbduk for low complexity filtering\nbbduk.sh \\\n    in1=${r1} \\\n    out1=${base}.lcf_filtered.fastq.gz \\\n    --ignorebadquality \\\n    entropy=0.7 \\\n    qin=33 \\\n    entropywindow=50 \\\n    entropyk=4 \n\"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base",
            "r1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "base"
        ],
        "nb_outputs": 1,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/low_comnplexity_filter_nanopore/${base}\", mode: 'symlink', overwrite: true",
            "container \"quay.io/biocontainers/bbmap:38.76--h516909a_0\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 6"
        ],
        "when": "",
        "stub": ""
    },
    "Kraken_prefilter_nanopore": {
        "name_process": "Kraken_prefilter_nanopore",
        "string_process": "\nprocess Kraken_prefilter_nanopore { \npublishDir \"${params.OUTPUT}/Kraken_prefilter/${base}\", mode: 'symlink', overwrite: true\n                             \ncontainer \"staphb/kraken2\"\nbeforeScript 'chmod o+rw .'\ncpus 8\ninput: \n    tuple val(base), file(fastq)\n    file kraken2_db\noutput: \n    tuple val(\"${base}\"), file(\"${base}.kraken2.report\")\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n# run kraken2\nkraken2 --db ${kraken2_db} \\\n    --threads ${task.cpus} \\\n    --classified-out ${base}.kraken2.classified \\\n    --output ${base}.kraken2.output \\\n    --report ${base}.kraken2.report \\\n    --gzip-compressed \\\n    --unclassified-out ${base}.kraken2.unclassified \\\n    ${fastq} \n\n\"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n# run kraken2\nkraken2 --db ${kraken2_db} \\\n    --threads ${task.cpus} \\\n    --classified-out ${base}.kraken2.classified \\\n    --output ${base}.kraken2.output \\\n    --report ${base}.kraken2.report \\\n    --gzip-compressed \\\n    --unclassified-out ${base}.kraken2.unclassified \\\n    ${fastq} \n\n\"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "base",
            "fastq",
            "kraken2_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Kraken_prefilter/${base}\", mode: 'symlink', overwrite: true",
            "container \"staphb/kraken2\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "Minimap2_nanopore": {
        "name_process": "Minimap2_nanopore",
        "string_process": "\nprocess Minimap2_nanopore { \n                                \npublishDir \"${params.OUTPUT}/Minimap2/${base}\", mode: 'symlink'\ncontainer \"vpeddu/nanopore_metagenomics\"\nbeforeScript 'chmod o+rw .'\ncpus 28\nerrorStrategy 'retry'\nmaxRetries params.MINIMAP2_RETRIES\ninput: \n    tuple val(base), file(species_fasta), file(r1)\noutput: \n    tuple val(\"${base}\"), file(\"${base}.sorted.filtered.*.bam\"), file(\"${base}.sorted.filtered.*.bam.bai\")\n    tuple val(\"${base}\"), file (\"${base}.*.unclassified_reads.txt\")\n\nscript:\n                       \n    if ( params.MINIMAPSPLICE ) {\n    \"\"\"\n    #!/bin/bash\n\n    #logging\n    echo \"ls of directory\" \n    ls -lah \n\n    echo \"running Minimap2 DNA on ${base}\"\n    #TODO: FILL IN MINIMAP2 COMMAND \n    minimap2 \\\n        -ax splice \\\n        -t \"\\$((${task.cpus}-2))\" \\\n        -2 \\\n        --split-prefix ${base}.split \\\n        ${species_fasta} \\\n        ${r1} | samtools view -Sb -@ 2 - > ${base}.bam\n\n    samtools view -Sb -F 4 -q 40 ${base}.bam > ${base}.filtered.bam\n    samtools sort -@ ${task.cpus} ${base}.filtered.bam -o ${base}.sorted.filtered.bam \n    #samtools index ${base}.sorted.filtered.bam\n    # output unclassified reads\n    samtools view -Sb -@  ${task.cpus} -f 4 ${base}.bam > ${base}.unclassified.bam\n\n    # cleanup intermediate file\n   # rm ${base}.bam\n\n    species_basename=`basename ${species_fasta} | cut -f1 -d .`\n\n    ##samtools fastq -@ 4 ${base}.unclassified.bam | gzip > ${base}.unclassified.fastq.gz\n    samtools view -Sb ${base}.unclassified.bam | cut -f1 > ${base}.\\$species_basename.unclassified_reads.txt\n    #echo \"reads in filtered bam\"\n    #samtools view -c ${base}.filtered.bam\n\n    #echo \"reads in unclassified bam\"\n    #samtools view -c  ${base}.unclassified.bam\n    \"\"\"\n        }\n\n    else {\n    \"\"\"\n    #!/bin/bash\n\n    #logging\n    echo \"ls of directory\" \n    ls -lah \n\n    species_basename=`basename ${species_fasta} | cut -f1 -d .`\n\n    # if this is the first attempt at running an alignment against this reference for this sample proceed\n\n    if [ \"${task.attempt}\" -eq \"1\" ]\n    then\n        echo \"running Minimap2 RNA on ${base}\"\n        # run minimap2 and pipe to bam output \n        minimap2 \\\n            -ax map-ont \\\n            -t \"\\$((${task.cpus}-4))\" \\\n            -2 \\\n            -K 25M \\\n            --split-prefix ${base}.split \\\n            ${species_fasta} \\\n            ${r1} | samtools view -Sb -@ 4 - > ${base}.bam\n\n        # extract mapped reads and sort \n        samtools view -Sb -F 4 ${base}.bam > ${base}.filtered.bam\n        samtools sort -@ ${task.cpus} ${base}.filtered.bam -o ${base}.sorted.filtered.bam \n\n        # output unclassified reads\n        samtools view -Sb -@  ${task.cpus} -f 4 ${base}.bam > ${base}.unclassified.bam\n\n        # cleanup intermediate file\n        # TODO uncomment later\n        rm ${base}.bam\n\n        # gather the read IDs of unassigned reads to extract from host filtered fastq downstream\n        samtools view ${base}.unclassified.bam | cut -f1 > ${base}.\\$species_basename.\\$RANDOM.unclassified_reads.txt\n        \n        # adding random identifier to species bams to avoid filename collisions while merging later\n        mv ${base}.sorted.filtered.bam ${base}.sorted.filtered.\\$species_basename.\\$RANDOM.bam\n\n        #index merged bam \n        samtools index ${base}.sorted.filtered.*.bam\n\n        # stats for reads mapped and unmapped\n        readsmapped=`samtools view -c ${base}.filtered.bam`\n        readsunmapped=`samtools view -c  ${base}.unclassified.bam`\n        echo \"reads in filtered bam\"\n        echo \\$readsmapped\n\n        echo \"reads in unclassified bam\"\n        echo \\$readsunmapped\n\n        # removing unclassified bam to save space\n        rm ${base}.unclassified.bam\n        \n        # for some reason if Minimap2 fails because it ran out of memory it doesn't exit the process\n        # To check for failed Minimap2, mapped and unmapped reads will both be 0, in which case the process crashes and reattempts\n        if [ \"\\$readsmapped\" -eq \"0\" -a \"\\$readsunmapped\" -eq \"0\" ]\n        then\n            echo \"minimap2 ran out of memory but failed to crash for ${base} retrying with fasta split\"\n            exit 1\n        fi\n    \n    # if process reattempts because it ran out of memory \n    else\n\n        # split the fasta into chunks smaller chunks depending on how many times the process has been attempted \n\n        echo \"running Minimap2 RNA on ${base} attempt ${task.attempt}\"\n        #echo \"fasta being split \\$split_num times\"\n        \n        # faSplit has some weird splitting activity but it works\n        /usr/local/miniconda/bin/faSplit sequence ${species_fasta} ${task.attempt} genus_split\n        \n        #NEED TO FIX: check within the loop for blank output. Minimap2 running out of memory might not crash the loop\n        # something like if bam empty, exit 1\n        for f in `ls genus_split*`\n        do\n            minimap2 \\\n                -ax map-ont \\\n                -t \"\\$((${task.cpus}-4))\" \\\n                -2 \\\n                --split-prefix ${base}.split \\\n                \\$f \\\n                ${r1} | samtools view -Sb -@ 4 - > ${base}.\\$f.bam\n            samtools sort -@ ${task.cpus} ${base}.\\$f.bam -o ${base}.sorted.temp.bam\n            bamcount=`samtools view -c ${base}.sorted.temp.bam`\n            # check if an individual split caused an out of memory error and exit the process \n            if [ \"\\$bamcount\" -eq \"0\" ]\n                then\n                echo \"minimap2 ran out of memory but failed to crash for ${base} retrying with fasta split\"\n                exit 1\n            fi\n            mv ${base}.sorted.temp.bam ${base}.sorted.\\$RANDOM.bam\n        done\n\n        # merge the fasta split alignments \n        samtools merge ${base}.merged.bam ${base}.sorted.*.bam\n\n        # extract mapped reads and sort the bam \n        samtools view -Sb -F 4 ${base}.merged.bam > ${base}.filtered.bam\n        samtools sort -@ ${task.cpus} ${base}.filtered.bam -o ${base}.sorted.filtered.bam \n\n        # output unclassified reads\n        samtools view -Sb -@  ${task.cpus} -f 4 ${base}.merged.bam > ${base}.unclassified.bam\n\n        # cleanup intermediate file to save space\n        rm ${base}.merged.bam\n\n        ##samtools fastq -@ 4 ${base}.unclassified.bam | pigz > ${base}.unclassified.fastq.gz\n        samtools view ${base}.unclassified.bam | cut -f1 > ${base}.\\$species_basename.\\$RANDOM.unclassified_reads.txt\n        \n        mv ${base}.sorted.filtered.bam ${base}.sorted.filtered.\\$species_basename.\\$RANDOM.bam\n        samtools index ${base}.sorted.filtered.*.bam\n\n        readsmapped=`samtools view -c ${base}.filtered.bam`\n        readsunmapped=`samtools view -c  ${base}.unclassified.bam`\n        echo \"reads in filtered bam\"\n        echo \\$readsmapped\n\n        echo \"reads in unclassified bam\"\n        echo \\$readsunmapped\n        \n        # removing unclassified bam to save space\n        rm ${base}.unclassified.bam\n        \n        # for some reason if Minimap2 fails because it ran out of memory it doesn't exit the process\n        # To check for failed Minimap2, mapped and unmapped reads will both be 0, in which case the process crashes and reattempts\n        if [ \"\\$readsmapped\" -eq \"0\" -a \"\\$readsunmapped\" -eq \"0\" ]\n        then\n            echo \"minimap2 ran out of memory but failed to crash for ${base} retrying with fasta split\"\n            exit 1\n        fi\n    fi\n    \"\"\"\n        }\n}",
        "nb_lignes_process": 193,
        "string_script": "    if ( params.MINIMAPSPLICE ) {\n    \"\"\"\n    #!/bin/bash\n\n    #logging\n    echo \"ls of directory\" \n    ls -lah \n\n    echo \"running Minimap2 DNA on ${base}\"\n    #TODO: FILL IN MINIMAP2 COMMAND \n    minimap2 \\\n        -ax splice \\\n        -t \"\\$((${task.cpus}-2))\" \\\n        -2 \\\n        --split-prefix ${base}.split \\\n        ${species_fasta} \\\n        ${r1} | samtools view -Sb -@ 2 - > ${base}.bam\n\n    samtools view -Sb -F 4 -q 40 ${base}.bam > ${base}.filtered.bam\n    samtools sort -@ ${task.cpus} ${base}.filtered.bam -o ${base}.sorted.filtered.bam \n    #samtools index ${base}.sorted.filtered.bam\n    # output unclassified reads\n    samtools view -Sb -@  ${task.cpus} -f 4 ${base}.bam > ${base}.unclassified.bam\n\n    # cleanup intermediate file\n   # rm ${base}.bam\n\n    species_basename=`basename ${species_fasta} | cut -f1 -d .`\n\n    ##samtools fastq -@ 4 ${base}.unclassified.bam | gzip > ${base}.unclassified.fastq.gz\n    samtools view -Sb ${base}.unclassified.bam | cut -f1 > ${base}.\\$species_basename.unclassified_reads.txt\n    #echo \"reads in filtered bam\"\n    #samtools view -c ${base}.filtered.bam\n\n    #echo \"reads in unclassified bam\"\n    #samtools view -c  ${base}.unclassified.bam\n    \"\"\"\n        }\n\n    else {\n    \"\"\"\n    #!/bin/bash\n\n    #logging\n    echo \"ls of directory\" \n    ls -lah \n\n    species_basename=`basename ${species_fasta} | cut -f1 -d .`\n\n    # if this is the first attempt at running an alignment against this reference for this sample proceed\n\n    if [ \"${task.attempt}\" -eq \"1\" ]\n    then\n        echo \"running Minimap2 RNA on ${base}\"\n        # run minimap2 and pipe to bam output \n        minimap2 \\\n            -ax map-ont \\\n            -t \"\\$((${task.cpus}-4))\" \\\n            -2 \\\n            -K 25M \\\n            --split-prefix ${base}.split \\\n            ${species_fasta} \\\n            ${r1} | samtools view -Sb -@ 4 - > ${base}.bam\n\n        # extract mapped reads and sort \n        samtools view -Sb -F 4 ${base}.bam > ${base}.filtered.bam\n        samtools sort -@ ${task.cpus} ${base}.filtered.bam -o ${base}.sorted.filtered.bam \n\n        # output unclassified reads\n        samtools view -Sb -@  ${task.cpus} -f 4 ${base}.bam > ${base}.unclassified.bam\n\n        # cleanup intermediate file\n        # TODO uncomment later\n        rm ${base}.bam\n\n        # gather the read IDs of unassigned reads to extract from host filtered fastq downstream\n        samtools view ${base}.unclassified.bam | cut -f1 > ${base}.\\$species_basename.\\$RANDOM.unclassified_reads.txt\n        \n        # adding random identifier to species bams to avoid filename collisions while merging later\n        mv ${base}.sorted.filtered.bam ${base}.sorted.filtered.\\$species_basename.\\$RANDOM.bam\n\n        #index merged bam \n        samtools index ${base}.sorted.filtered.*.bam\n\n        # stats for reads mapped and unmapped\n        readsmapped=`samtools view -c ${base}.filtered.bam`\n        readsunmapped=`samtools view -c  ${base}.unclassified.bam`\n        echo \"reads in filtered bam\"\n        echo \\$readsmapped\n\n        echo \"reads in unclassified bam\"\n        echo \\$readsunmapped\n\n        # removing unclassified bam to save space\n        rm ${base}.unclassified.bam\n        \n        # for some reason if Minimap2 fails because it ran out of memory it doesn't exit the process\n        # To check for failed Minimap2, mapped and unmapped reads will both be 0, in which case the process crashes and reattempts\n        if [ \"\\$readsmapped\" -eq \"0\" -a \"\\$readsunmapped\" -eq \"0\" ]\n        then\n            echo \"minimap2 ran out of memory but failed to crash for ${base} retrying with fasta split\"\n            exit 1\n        fi\n    \n    # if process reattempts because it ran out of memory \n    else\n\n        # split the fasta into chunks smaller chunks depending on how many times the process has been attempted \n\n        echo \"running Minimap2 RNA on ${base} attempt ${task.attempt}\"\n        #echo \"fasta being split \\$split_num times\"\n        \n        # faSplit has some weird splitting activity but it works\n        /usr/local/miniconda/bin/faSplit sequence ${species_fasta} ${task.attempt} genus_split\n        \n        #NEED TO FIX: check within the loop for blank output. Minimap2 running out of memory might not crash the loop\n        # something like if bam empty, exit 1\n        for f in `ls genus_split*`\n        do\n            minimap2 \\\n                -ax map-ont \\\n                -t \"\\$((${task.cpus}-4))\" \\\n                -2 \\\n                --split-prefix ${base}.split \\\n                \\$f \\\n                ${r1} | samtools view -Sb -@ 4 - > ${base}.\\$f.bam\n            samtools sort -@ ${task.cpus} ${base}.\\$f.bam -o ${base}.sorted.temp.bam\n            bamcount=`samtools view -c ${base}.sorted.temp.bam`\n            # check if an individual split caused an out of memory error and exit the process \n            if [ \"\\$bamcount\" -eq \"0\" ]\n                then\n                echo \"minimap2 ran out of memory but failed to crash for ${base} retrying with fasta split\"\n                exit 1\n            fi\n            mv ${base}.sorted.temp.bam ${base}.sorted.\\$RANDOM.bam\n        done\n\n        # merge the fasta split alignments \n        samtools merge ${base}.merged.bam ${base}.sorted.*.bam\n\n        # extract mapped reads and sort the bam \n        samtools view -Sb -F 4 ${base}.merged.bam > ${base}.filtered.bam\n        samtools sort -@ ${task.cpus} ${base}.filtered.bam -o ${base}.sorted.filtered.bam \n\n        # output unclassified reads\n        samtools view -Sb -@  ${task.cpus} -f 4 ${base}.merged.bam > ${base}.unclassified.bam\n\n        # cleanup intermediate file to save space\n        rm ${base}.merged.bam\n\n        ##samtools fastq -@ 4 ${base}.unclassified.bam | pigz > ${base}.unclassified.fastq.gz\n        samtools view ${base}.unclassified.bam | cut -f1 > ${base}.\\$species_basename.\\$RANDOM.unclassified_reads.txt\n        \n        mv ${base}.sorted.filtered.bam ${base}.sorted.filtered.\\$species_basename.\\$RANDOM.bam\n        samtools index ${base}.sorted.filtered.*.bam\n\n        readsmapped=`samtools view -c ${base}.filtered.bam`\n        readsunmapped=`samtools view -c  ${base}.unclassified.bam`\n        echo \"reads in filtered bam\"\n        echo \\$readsmapped\n\n        echo \"reads in unclassified bam\"\n        echo \\$readsunmapped\n        \n        # removing unclassified bam to save space\n        rm ${base}.unclassified.bam\n        \n        # for some reason if Minimap2 fails because it ran out of memory it doesn't exit the process\n        # To check for failed Minimap2, mapped and unmapped reads will both be 0, in which case the process crashes and reattempts\n        if [ \"\\$readsmapped\" -eq \"0\" -a \"\\$readsunmapped\" -eq \"0\" ]\n        then\n            echo \"minimap2 ran out of memory but failed to crash for ${base} retrying with fasta split\"\n            exit 1\n        fi\n    fi\n    \"\"\"\n        }",
        "nb_lignes_script": 176,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "base",
            "species_fasta",
            "r1"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Minimap2/${base}\", mode: 'symlink'",
            "container \"vpeddu/nanopore_metagenomics\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 28",
            "errorStrategy 'retry'",
            "maxRetries params.MINIMAP2_RETRIES"
        ],
        "when": "",
        "stub": ""
    },
    "Collect_alignment_results": {
        "name_process": "Collect_alignment_results",
        "string_process": "\nprocess Collect_alignment_results{ \npublishDir \"${params.OUTPUT}/Minimap2/${base}\", mode: 'symlink'\ncontainer \"quay.io/vpeddu/evmeta:latest\"\nbeforeScript 'chmod o+rw .'\ncpus 4\ninput: \n    tuple val(base), file(filtered_bam), file(bam_index)\noutput: \n    tuple val(\"${base}\"), file(\"${base}.merged.sorted.bam\"), file(\"${base}.merged.sorted.bam.bai\")\n\nscript:\n    \"\"\"\n    #!/bin/bash\n\n    samtools merge ${base}.merged.filtered.bam *.sorted.filtered.*.bam\n    samtools sort -@ ${task.cpus} ${base}.merged.filtered.bam -o ${base}.merged.sorted.bam\n    samtools index ${base}.merged.sorted.bam \n\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    #!/bin/bash\n\n    samtools merge ${base}.merged.filtered.bam *.sorted.filtered.*.bam\n    samtools sort -@ ${task.cpus} ${base}.merged.filtered.bam -o ${base}.merged.sorted.bam\n    samtools index ${base}.merged.sorted.bam \n\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "base",
            "filtered_bam",
            "bam_index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Minimap2/${base}\", mode: 'symlink'",
            "container \"quay.io/vpeddu/evmeta:latest\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 4"
        ],
        "when": "",
        "stub": ""
    },
    "Collect_unassigned_results": {
        "name_process": "Collect_unassigned_results",
        "string_process": "\nprocess Collect_unassigned_results{ \n                                \npublishDir \"${params.OUTPUT}/Minimap2/${base}\", mode: 'symlink'\ncontainer \"vpeddu/nanopore_metagenomics\"\nbeforeScript 'chmod o+rw .'\ncpus 4\ninput: \n    tuple val(base), file(unclassified_fastq), file(depleted_fastq)\n    file filter_unassigned_reads\n    \noutput: \n    tuple val(\"${base}\"), file (\"${base}.merged.unclassified.fastq.gz\")\n\nscript:\n    \"\"\"\n    #!/bin/bash\n\n    #cat *.unclassified_reads.txt | sort | uniq > unique_unclassified_read_ids.txt\n    python3 ${filter_unassigned_reads}\n    /usr/local/miniconda/bin/seqtk subseq ${depleted_fastq} true_unassigned_reads.txt | gzip > ${base}.merged.unclassified.fastq.gz\n    \n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    #!/bin/bash\n\n    #cat *.unclassified_reads.txt | sort | uniq > unique_unclassified_read_ids.txt\n    python3 ${filter_unassigned_reads}\n    /usr/local/miniconda/bin/seqtk subseq ${depleted_fastq} true_unassigned_reads.txt | gzip > ${base}.merged.unclassified.fastq.gz\n    \n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "base",
            "unclassified_fastq",
            "depleted_fastq",
            "filter_unassigned_reads"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Minimap2/${base}\", mode: 'symlink'",
            "container \"vpeddu/nanopore_metagenomics\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 4"
        ],
        "when": "",
        "stub": ""
    },
    "Diamond_translated_alignment_unclassified": {
        "name_process": "Diamond_translated_alignment_unclassified",
        "string_process": "\nprocess Diamond_translated_alignment_unclassified { \npublishDir \"${params.OUTPUT}/Diamond_unclassified_translated/${base}\", mode: 'symlink', overwrite: true\ncontainer \"quay.io/biocontainers/diamond:2.0.13--hdcc8f71_0\"\nbeforeScript 'chmod o+rw .'\ncpus 20\ninput: \n    tuple val(base), file(unassigned_bam), file(unassigned_fastq)\n                                                                       \n    file diamond_protein_db\noutput: \n    tuple val(\"${base}\"), file(\"*.diamond.out*\")\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n    # diamond out formats\n\t#0 = BLAST pairwise\n\t#5 = BLAST XML\n\t#6 = BLAST tabular\n\t#100 = DIAMOND alignment archive (DAA)\n\t#101 = SAM\nif [[ -s ${unassigned_fastq} ]] \n    then\n        echo \"HERE\"\n        #https://currentprotocols.onlinelibrary.wiley.com/doi/full/10.1002/cpz1.59\n        diamond blastx \\\n            --query ${unassigned_fastq} \\\n            --db ${diamond_protein_db} \\\n            --out ${base}.diamond.out \\\n            --outfmt 101 \\\n            --threads ${task.cpus} \\\n            --compress 1 \\\n            --unal 1 \\\n            --un ${base}.diamond.unaligned \\\n            --top 10 \\\n            -F 15 \\\n            --range-culling\n    else\n        echo \"THERE\"\n        touch ${base}.diamond.out.blankinput\n\nfi\n\"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n    # diamond out formats\n\t#0 = BLAST pairwise\n\t#5 = BLAST XML\n\t#6 = BLAST tabular\n\t#100 = DIAMOND alignment archive (DAA)\n\t#101 = SAM\nif [[ -s ${unassigned_fastq} ]] \n    then\n        echo \"HERE\"\n        #https://currentprotocols.onlinelibrary.wiley.com/doi/full/10.1002/cpz1.59\n        diamond blastx \\\n            --query ${unassigned_fastq} \\\n            --db ${diamond_protein_db} \\\n            --out ${base}.diamond.out \\\n            --outfmt 101 \\\n            --threads ${task.cpus} \\\n            --compress 1 \\\n            --unal 1 \\\n            --un ${base}.diamond.unaligned \\\n            --top 10 \\\n            -F 15 \\\n            --range-culling\n    else\n        echo \"THERE\"\n        touch ${base}.diamond.out.blankinput\n\nfi\n\"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "base",
            "unassigned_bam",
            "unassigned_fastq",
            "diamond_protein_db"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Diamond_unclassified_translated/${base}\", mode: 'symlink', overwrite: true",
            "container \"quay.io/biocontainers/diamond:2.0.13--hdcc8f71_0\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 20"
        ],
        "when": "",
        "stub": ""
    },
    "Cluster_unclassified_reads": {
        "name_process": "Cluster_unclassified_reads",
        "string_process": "\nprocess Cluster_unclassified_reads { \npublishDir \"${params.OUTPUT}/Mmsesq2_unclassified_translated/${base}\", mode: 'symlink', overwrite: true\ncontainer \"quay.io/biocontainers/mmseqs2:13.45111--h95f258a_1\"\nbeforeScript 'chmod o+rw .'\ncpus 16\ninput: \n    tuple val(base), file(unassigned_fastq)\n                                                                       \noutput: \n    tuple val(\"${base}\"), file(\"${base}.mmseq.clustered.fasta\")\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n#create mmseq db\nmmseqs createdb ${unassigned_fastq} ${base}.mmseq.DB\n\n# cluster with mmseq cluster2\nmmseqs cluster --threads ${task.cpus} ${base}.mmseq.DB ${base}.mmseq.DB_clu tmp\n#extract representative sequences and convert back to fasta\nmmseqs createsubdb ${base}.mmseq.DB_clu ${base}.mmseq.DB ${base}.mmseq.clu_rep\nmmseqs convert2fasta ${base}.mmseq.clu_rep ${base}.mmseq.clustered.fasta\n\n\"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \n\n#create mmseq db\nmmseqs createdb ${unassigned_fastq} ${base}.mmseq.DB\n\n# cluster with mmseq cluster2\nmmseqs cluster --threads ${task.cpus} ${base}.mmseq.DB ${base}.mmseq.DB_clu tmp\n#extract representative sequences and convert back to fasta\nmmseqs createsubdb ${base}.mmseq.DB_clu ${base}.mmseq.DB ${base}.mmseq.clu_rep\nmmseqs convert2fasta ${base}.mmseq.clu_rep ${base}.mmseq.clustered.fasta\n\n\"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "MMseqs"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            }
        ],
        "inputs": [
            "base",
            "unassigned_fastq"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Mmsesq2_unclassified_translated/${base}\", mode: 'symlink', overwrite: true",
            "container \"quay.io/biocontainers/mmseqs2:13.45111--h95f258a_1\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 16"
        ],
        "when": "",
        "stub": ""
    },
    "Eggnog_mapper": {
        "name_process": "Eggnog_mapper",
        "string_process": "\nprocess Eggnog_mapper { \npublishDir \"${params.OUTPUT}/Eggnog/${base}\", mode: 'symlink', overwrite: true\ncontainer \"quay.io/biocontainers/eggnog-mapper:2.1.6--pyhdfd78af_0\"\nbeforeScript 'chmod o+rw .'\ncpus 24\ninput: \n    tuple val(base), file(unassigned_fastq)\n                                                                       \n    file eggnog_db\noutput: \n    tuple val(\"${base}\"), file(\"*\")\nscript:\n\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \nif [[ -s ${unassigned_fastq} ]] \n    then\n        # convert unclassified fastq to fasta for eggnog\n        gunzip -f ${unassigned_fastq} \n        #sed -n '1~4s/^@/>/p;2~4p' ${base}.unclassified.fastq > ${base}.unclassified.fasta\n        emapper.py \\\n            --dmnd_frameshift 15 \\\n            --itype metagenome \\\n            -i ${base}.flye.fasta \\\n            --cpu ${task.cpus} \\\n            --data_dir ${eggnog_db} \\\n            --report_orthologs \\\n            --decorate_gff yes \\\n            -o ${base} \n    else\n        touch ${base}.diamond.out.blankinput\n\nfi\n# removed \n#-m mmseqs \n#--excel \n\"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "\"\"\"\n#!/bin/bash\n#logging\necho \"ls of directory\" \nls -lah \nif [[ -s ${unassigned_fastq} ]] \n    then\n        # convert unclassified fastq to fasta for eggnog\n        gunzip -f ${unassigned_fastq} \n        #sed -n '1~4s/^@/>/p;2~4p' ${base}.unclassified.fastq > ${base}.unclassified.fasta\n        emapper.py \\\n            --dmnd_frameshift 15 \\\n            --itype metagenome \\\n            -i ${base}.flye.fasta \\\n            --cpu ${task.cpus} \\\n            --data_dir ${eggnog_db} \\\n            --report_orthologs \\\n            --decorate_gff yes \\\n            -o ${base} \n    else\n        touch ${base}.diamond.out.blankinput\n\nfi\n# removed \n#-m mmseqs \n#--excel \n\"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base",
            "unassigned_fastq",
            "eggnog_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/Eggnog/${base}\", mode: 'symlink', overwrite: true",
            "container \"quay.io/biocontainers/eggnog-mapper:2.1.6--pyhdfd78af_0\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 24"
        ],
        "when": "",
        "stub": ""
    },
    "Extract_true_novel": {
        "name_process": "Extract_true_novel",
        "string_process": "\nprocess Extract_true_novel { \n                                \npublishDir \"${params.OUTPUT}/novel_reads/${base}\", mode: 'symlink'\ncontainer \"quay.io/vpeddu/evmeta:latest\"\nbeforeScript 'chmod o+rw .'\ncpus 24\ninput: \n    tuple val(base), file(unassigned_fastq), file(metaflye_contigs)\noutput: \n    tuple val(\"${base}\"), file(\"${base}.unassembled.unclassified.fastq.gz\")\n\n\nscript:\n\"\"\"\n#!/bin/bash\n\n#logging\necho \"ls of directory\" \nls -lah \n\necho \"remapping ${base} to contigs to find unassembled reads\"\n#TODO: FILL IN MINIMAP2 COMMAND \nminimap2 \\\n    -ax map-ont \\\n    -t \"\\$((${task.cpus}-4))\" \\\n    -2 \\\n    --split-prefix \\\n    ${unassigned_fastq} \\\n    ${metaflye_contigs}| samtools view -Sb -f 4 -@ 4 - > ${base}.unassembled.unclassified.bam\n\nsamtools fastq -@ 4 ${base}.unassembled.unclassified.bam | gzip > ${base}.unassembled.unclassified.fastq.gz\n\n\"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "\"\"\"\n#!/bin/bash\n\n#logging\necho \"ls of directory\" \nls -lah \n\necho \"remapping ${base} to contigs to find unassembled reads\"\n#TODO: FILL IN MINIMAP2 COMMAND \nminimap2 \\\n    -ax map-ont \\\n    -t \"\\$((${task.cpus}-4))\" \\\n    -2 \\\n    --split-prefix \\\n    ${unassigned_fastq} \\\n    ${metaflye_contigs}| samtools view -Sb -f 4 -@ 4 - > ${base}.unassembled.unclassified.bam\n\nsamtools fastq -@ 4 ${base}.unassembled.unclassified.bam | gzip > ${base}.unassembled.unclassified.fastq.gz\n\n\"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "base",
            "unassigned_fastq",
            "metaflye_contigs"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "vpeddu__ev-meta",
        "directive": [
            "publishDir \"${params.OUTPUT}/novel_reads/${base}\", mode: 'symlink'",
            "container \"quay.io/vpeddu/evmeta:latest\"",
            "beforeScript 'chmod o+rw .'",
            "cpus 24"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "makeGenomeFiles": {
        "name_process": "makeGenomeFiles",
        "string_process": "\nprocess makeGenomeFiles {\n  tag { id }\n\n  input:\n  set id, \"genome.fasta.gz\" from genomes1\n\n  output:\n  set id, \"genome.fasta.fai\" into genomeFiles\n\n  \"\"\"\nzcat genome.fasta.gz > genome.fasta\nsamtools faidx genome.fasta\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\nzcat genome.fasta.gz > genome.fasta\nsamtools faidx genome.fasta\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "genomes1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genomeFiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "robsyme__nf-nucmercoverage",
        "directive": [
            "tag { id }"
        ],
        "when": "",
        "stub": ""
    },
    "nucmer": {
        "name_process": "nucmer",
        "string_process": "\nprocess nucmer {\n  tag { \"${idR} vs ${idQ}\" }\n\n  input:\n  set idR, \"ref.fasta.gz\", idQ, \"qry.fasta.gz\" from genomePairs\n\n  output:\n  set idR, idQ, val(\"raw\"), \"out.delta\" into rawDeltas\n  set idR, idQ, val(\"filtered\"), \"filtered.delta\" into fltDeltas\n\n  \"\"\"\nzcat ref.fasta.gz > ref.fasta\nzcat qry.fasta.gz > qry.fasta\nnucmer --maxmatch ref.fasta qry.fasta\ndelta-filter -1 out.delta > filtered.delta\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\nzcat ref.fasta.gz > ref.fasta\nzcat qry.fasta.gz > qry.fasta\nnucmer --maxmatch ref.fasta qry.fasta\ndelta-filter -1 out.delta > filtered.delta\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomePairs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "rawDeltas",
            "fltDeltas"
        ],
        "nb_outputs": 2,
        "name_workflow": "robsyme__nf-nucmercoverage",
        "directive": [
            "tag { \"${idR} vs ${idQ}\" }"
        ],
        "when": "",
        "stub": ""
    },
    "showcoords": {
        "name_process": "showcoords",
        "string_process": "\nprocess showcoords {\n  tag { \"${idR} vs ${idQ}\" }\n\n  input:\n  set idR, idQ, type, \"in.delta\" from rawDeltas.mix(fltDeltas)\n\n  output:\n  set idR, idQ, \"out.bed\" into rawBed\n\n\"\"\"\nshow-coords -T in.delta \\\n | tail -n +5 \\\n | awk 'BEGIN{OFS=\"\\\\t\"} {print(\\$8, \\$1-1, \\$2, \".\", \"+\", \\$7)}' \\\n | sort -k1,1 -k2,2n \\\n | bedtools merge -i - \\\n | sed 's/\\$/\\\\t$type/g' \\\n > out.bed\n\"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\nshow-coords -T in.delta \\\n | tail -n +5 \\\n | awk 'BEGIN{OFS=\"\\\\t\"} {print(\\$8, \\$1-1, \\$2, \".\", \"+\", \\$7)}' \\\n | sort -k1,1 -k2,2n \\\n | bedtools merge -i - \\\n | sed 's/\\$/\\\\t$type/g' \\\n > out.bed\n\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "rawDeltas",
            "fltDeltas"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rawBed"
        ],
        "nb_outputs": 1,
        "name_workflow": "robsyme__nf-nucmercoverage",
        "directive": [
            "tag { \"${idR} vs ${idQ}\" }"
        ],
        "when": "",
        "stub": ""
    },
    "genomeCoverage": {
        "name_process": "genomeCoverage",
        "string_process": "\nprocess genomeCoverage {\n  tag { \"${idR} vs ${idQ}\" }\n\n  input:\n  set idR, idQ, \"in.bed\", \"in.genome\" from rawBed.combine(genomeFiles, by: 0)\n\n  output:\n  set idR, idQ, \"out.txt\" into genomeCoverages\n\n  \"\"\"\nsed 's/\\$/\\\\t$idQ/g' in.bed > out.txt\nawk 'BEGIN{OFS=\"\\\\t\"} {print(\\$1, 0, \\$2, \"base\", \"$idQ\")}' in.genome >> out.txt\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\nsed 's/\\$/\\\\t$idQ/g' in.bed > out.txt\nawk 'BEGIN{OFS=\"\\\\t\"} {print(\\$1, 0, \\$2, \"base\", \"$idQ\")}' in.genome >> out.txt\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rawBed"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genomeCoverages"
        ],
        "nb_outputs": 1,
        "name_workflow": "robsyme__nf-nucmercoverage",
        "directive": [
            "tag { \"${idR} vs ${idQ}\" }"
        ],
        "when": "",
        "stub": ""
    },
    "plotCoverages": {
        "name_process": "plotCoverages",
        "string_process": "\nprocess plotCoverages {\n  publishDir \"output\", mode: \"copy\", overwrite: true\n  tag { \"${idR}\"}\n\n  input:\n  set idR, queryIDs, \"matches.*.txt\" from plottingInputs\n\n  output:\n  file(\"${idR}.svg\") into outputSVGs\n\n  \"\"\"\n#!/usr/bin/env Rscript\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(magrittr)\n\nlist.files(\".\", \"matches.*.txt\") %>%\n  lapply(read_tsv, col_names = c(\"seqid\", \"start\", \"stop\", \"type\", \"query\"))  %>%\n  do.call(what=rbind) -> data\n\ndata %>%\n  filter(type == \"base\") %>%\n  ggplot(aes(x = query, y=start + (stop-start)/2, height=(stop-start))) +\n  geom_tile(fill=\"white\") +\n  geom_tile(data=filter(data, type == \"raw\"), fill=\"#E6A0C4\") +\n  geom_tile(data=filter(data, type == \"filtered\"), fill=\"#7294D4\") +\n  theme_minimal() +\n  facet_grid(. ~ seqid) +\n  theme(axis.text.x = element_text(angle = 90),\n        axis.title.y=element_blank()) -> plot\n\n  ggsave(filename=\"${idR}.svg\", plot=plot, width=40)\n  \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "\"\"\"\n#!/usr/bin/env Rscript\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(magrittr)\n\nlist.files(\".\", \"matches.*.txt\") %>%\n  lapply(read_tsv, col_names = c(\"seqid\", \"start\", \"stop\", \"type\", \"query\"))  %>%\n  do.call(what=rbind) -> data\n\ndata %>%\n  filter(type == \"base\") %>%\n  ggplot(aes(x = query, y=start + (stop-start)/2, height=(stop-start))) +\n  geom_tile(fill=\"white\") +\n  geom_tile(data=filter(data, type == \"raw\"), fill=\"#E6A0C4\") +\n  geom_tile(data=filter(data, type == \"filtered\"), fill=\"#7294D4\") +\n  theme_minimal() +\n  facet_grid(. ~ seqid) +\n  theme(axis.text.x = element_text(angle = 90),\n        axis.title.y=element_blank()) -> plot\n\n  ggsave(filename=\"${idR}.svg\", plot=plot, width=40)\n  \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "plottingInputs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "outputSVGs"
        ],
        "nb_outputs": 1,
        "name_workflow": "robsyme__nf-nucmercoverage",
        "directive": [
            "publishDir \"output\", mode: \"copy\", overwrite: true",
            "tag { \"${idR}\"}"
        ],
        "when": "",
        "stub": ""
    }
}
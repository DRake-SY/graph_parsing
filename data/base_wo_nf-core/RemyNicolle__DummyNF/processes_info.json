{
    "buildIndex": {
        "name_process": "buildIndex",
        "string_process": "\nprocess buildIndex {\n                                                    \n\n  label 'big'\n\n  input:\n  val fa from params.refFasta\n  val gtf from params.refGTF\n  val info from params.ensemblRefID\n\n  output:\n  path \"StarIndexed\" into index_ch\n\n\n  \"\"\"\n  wget -nv -O /tmp/genome.fa.gz $fa\n  wget -nv -O /tmp/trascriptome.gtf.gz $gtf\n\n\n  gunzip /tmp/genome.fa.gz\n  gunzip /tmp/trascriptome.gtf.gz\n\n\n\n  STAR --runThreadN $task.cpus --runMode genomeGenerate --genomeDir StarIndexed \\\n  --genomeFastaFiles /tmp/genome.fa  --sjdbOverhang 100 --sjdbGTFfile /tmp/trascriptome.gtf\n\n  mv /tmp/trascriptome.gtf StarIndexed/ref.gtf\n\n  echo -e \"refGT\\t\"$info >StarIndexed/description.txt\n\n\n  grep -P \"\\tgene\\t\" StarIndexed/ref.gtf >ref.GeneLvlOnly.gtf\n\n\n  R -e 'library(parallel) ;gtf=read.delim(\"ref.GeneLvlOnly.gtf\",sep=\"\\\\t\",as.is=T,header=F) ; gtf.getmeta=function(apieceofgtf){strsplit((apieceofgtf)[,9],\";| \")} ; gtf.getmetavalue=function(apieceofgtf,field){ metadata=gtf.getmeta(apieceofgtf)   ;    unlist(mclapply(metadata,function(x){if(field%in% x){return(x[which(x==field)+1])}else{return(NA)} }))}  ; geneTab =gtf[which(gtf[,3] ==\"gene\"),];geneTab[[\"GeneID\"]]=gtf.getmetavalue(geneTab,\"gene_id\")  ; geneTab[[\"GeneName\"]]=gtf.getmetavalue(geneTab,\"gene_name\");geneTab=unique(geneTab)  ; rownames(geneTab)=geneTab[[\"GeneID\"]];geneTab=unique(geneTab[,- c(9,6,2,3,8)])  ; saveRDS(geneTab,file=\"StarIndexed/refGeneID.rds\")'\n\n\n  \"\"\"\n\n                                                          \n}",
        "nb_lignes_process": 41,
        "string_script": "\"\"\"\n  wget -nv -O /tmp/genome.fa.gz $fa\n  wget -nv -O /tmp/trascriptome.gtf.gz $gtf\n\n\n  gunzip /tmp/genome.fa.gz\n  gunzip /tmp/trascriptome.gtf.gz\n\n\n\n  STAR --runThreadN $task.cpus --runMode genomeGenerate --genomeDir StarIndexed \\\n  --genomeFastaFiles /tmp/genome.fa  --sjdbOverhang 100 --sjdbGTFfile /tmp/trascriptome.gtf\n\n  mv /tmp/trascriptome.gtf StarIndexed/ref.gtf\n\n  echo -e \"refGT\\t\"$info >StarIndexed/description.txt\n\n\n  grep -P \"\\tgene\\t\" StarIndexed/ref.gtf >ref.GeneLvlOnly.gtf\n\n\n  R -e 'library(parallel) ;gtf=read.delim(\"ref.GeneLvlOnly.gtf\",sep=\"\\\\t\",as.is=T,header=F) ; gtf.getmeta=function(apieceofgtf){strsplit((apieceofgtf)[,9],\";| \")} ; gtf.getmetavalue=function(apieceofgtf,field){ metadata=gtf.getmeta(apieceofgtf)   ;    unlist(mclapply(metadata,function(x){if(field%in% x){return(x[which(x==field)+1])}else{return(NA)} }))}  ; geneTab =gtf[which(gtf[,3] ==\"gene\"),];geneTab[[\"GeneID\"]]=gtf.getmetavalue(geneTab,\"gene_id\")  ; geneTab[[\"GeneName\"]]=gtf.getmetavalue(geneTab,\"gene_name\");geneTab=unique(geneTab)  ; rownames(geneTab)=geneTab[[\"GeneID\"]];geneTab=unique(geneTab[,- c(9,6,2,3,8)])  ; saveRDS(geneTab,file=\"StarIndexed/refGeneID.rds\")'\n\n\n  \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "params",
            "params",
            "params"
        ],
        "nb_inputs": 3,
        "outputs": [
            "index_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "RemyNicolle__DummyNF",
        "directive": [
            "label 'big'"
        ],
        "when": "",
        "stub": ""
    },
    "doSTAR": {
        "name_process": "doSTAR",
        "string_process": "\nprocess doSTAR {\n  tag \"STAR $sample\"\n  label 'big'\n\n\n  input:\n  path index from index_ch\n                               \n  tuple val(sample), file(fq) from samples_ch\n\n\n                               \n                                           \n                                      \n\n  output:\n                                                                                                                                 \n  file \"${sample}StarOutAligned.sortedByCoord.out.bam\" into bam_ch\n  file \"${sample}CountSummary.txt\" into starlog_ch\n\n                                                         \n                  \n              \n\n  \"\"\"\n  gunzip -c ${fq} > /tmp/this.fq\n\n  STAR --genomeDir $index \\\n  --readFilesIn /tmp/this.fq \\\n  --outFileNamePrefix $sample'StarOut' \\\n  --runThreadN $task.cpus --sjdbGTFfile $index/ref.gtf \\\n  --twopassMode None --outFilterType BySJout  --seedSearchStartLmax 12 \\\n  --alignEndsType Local --outSAMtype BAM SortedByCoordinate \\\n  --alignIntronMax 1000000 \\\n  --alignMatesGapMax 1000000 \\\n  --limitOutSJcollapsed 1000000 \\\n  --limitSjdbInsertNsj 1000000 \\\n  --outFilterMultimapNmax 100 --winAnchorMultimapNmax 50 \\\n  --alignSJoverhangMin 15 \\\n  --alignSJDBoverhangMin 1 \\\n  --alignIntronMin 20 \\\n  --outFilterMatchNminOverLread 0 \\\n  --outFilterScoreMinOverLread   ${params.filterScoreMinOverLread} \\\n  --outFilterMismatchNmax ${params.filterMismatchNmax} \\\n  --outFilterMismatchNoverLmax ${params.filterMismatchNoverLmax}\n\n  sed \"s/ | */;/\" ${sample}StarOutLog.final.out | sed \"s/^  *//\" | grep -v \":\\$\" | \\\n  sed \"s/% ?//g\"|sed \"s/^%/Prop/\" | sed \"s/ /_/g\" | tr -cd \"[:alnum:]._;[:space:]\" | \\\n  grep -v \"^Start\"|grep -v \"^Mapp\"|grep -v \"^Fin\" | grep -v \"^\\$\" | tr -d \";\" > \"${sample}CountSummary.txt\"\n  \"\"\"\n\n\n\n\n                                                          \n}",
        "nb_lignes_process": 55,
        "string_script": "\"\"\"\n  gunzip -c ${fq} > /tmp/this.fq\n\n  STAR --genomeDir $index \\\n  --readFilesIn /tmp/this.fq \\\n  --outFileNamePrefix $sample'StarOut' \\\n  --runThreadN $task.cpus --sjdbGTFfile $index/ref.gtf \\\n  --twopassMode None --outFilterType BySJout  --seedSearchStartLmax 12 \\\n  --alignEndsType Local --outSAMtype BAM SortedByCoordinate \\\n  --alignIntronMax 1000000 \\\n  --alignMatesGapMax 1000000 \\\n  --limitOutSJcollapsed 1000000 \\\n  --limitSjdbInsertNsj 1000000 \\\n  --outFilterMultimapNmax 100 --winAnchorMultimapNmax 50 \\\n  --alignSJoverhangMin 15 \\\n  --alignSJDBoverhangMin 1 \\\n  --alignIntronMin 20 \\\n  --outFilterMatchNminOverLread 0 \\\n  --outFilterScoreMinOverLread   ${params.filterScoreMinOverLread} \\\n  --outFilterMismatchNmax ${params.filterMismatchNmax} \\\n  --outFilterMismatchNoverLmax ${params.filterMismatchNoverLmax}\n\n  sed \"s/ | */;/\" ${sample}StarOutLog.final.out | sed \"s/^  *//\" | grep -v \":\\$\" | \\\n  sed \"s/% ?//g\"|sed \"s/^%/Prop/\" | sed \"s/ /_/g\" | tr -cd \"[:alnum:]._;[:space:]\" | \\\n  grep -v \"^Start\"|grep -v \"^Mapp\"|grep -v \"^Fin\" | grep -v \"^\\$\" | tr -d \";\" > \"${sample}CountSummary.txt\"\n  \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "index_ch",
            "samples_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bam_ch",
            "starlog_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "RemyNicolle__DummyNF",
        "directive": [
            "tag \"STAR $sample\"",
            "label 'big'"
        ],
        "when": "",
        "stub": ""
    },
    "CountNagreg": {
        "name_process": "CountNagreg",
        "string_process": "\nprocess CountNagreg {\n  tag \"FC \"\n  label 'small'\n\n  publishDir \"${params.outputDir}\", mode: 'copy'\n\n\n  input:\n  path index from index_ch\n  file allbams from bam_ch.collect()\n  file starlogs from starlog_ch.collect()\n  val info from params.ensemblRefID\n\n  output:\n  file \"FCcounts.tsv.gz\" into countout\n  file \"RNAseqSummary.tsv\" into seqsumout\n  file \"referenceGeneAnnotation_${info}.rds\" into annotout\n\n                                                                      \n\n  \"\"\"\n\n  featureCounts -O -F GTF -T $task.cpus -t exon -g gene_id -s 1 -a $index/ref.gtf \\\n  -o FCcounts_all $allbams\n  echo $starlogs\n  cat $starlogs >tmpstarlogs\n  sed \"s/StarOutAligned.sortedByCoord.out.bam//g\" FCcounts_all >fctmp\n\n  R -e 'x=read.delim(\"fctmp\",header=T,as.is=T,comment.char=\"#\");rownames(x)=x[,\"Geneid\"]; write.table(x[, -(1:6) ],file=\"FCcounts.tsv\",sep=\"\\\\t\",quote=F);starsum=do.call(rbind,lapply(strsplit(\"$starlogs\",\" \")[[1]],function(y){s=gsub(\"CountSummary.txt\",\"\",y);ysum=data.frame(t(read.delim(y,header=F)[,2]),row.names=s);colnames(ysum)=read.delim(y,header=F)[,1];ysum}));fcsum=t(read.delim(\"FCcounts_all.summary\",as.is=T,header=T)[c(1,9,12),-1]);rownames(fcsum)=gsub(\"StarOutAligned.sortedByCoord.out.bam\",\"\",rownames(fcsum));colnames(fcsum)=c(\"Assigned\",\"Unassigned_MultiMapping\",\"Unassigned_NoFeatures\");write.table(data.frame(starsum,fcsum[rownames(starsum),],nGenes=apply(x[,rownames(starsum)]>0,2,sum)),file=\"RNAseqSummary.tsv\",sep=\"\\\\t\",quote=F)'\n\n\n  gzip FCcounts.tsv\n\n  cp $index/refGeneID.rds referenceGeneAnnotation_${info}.rds\n\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 38,
        "string_script": "\"\"\"\n\n  featureCounts -O -F GTF -T $task.cpus -t exon -g gene_id -s 1 -a $index/ref.gtf \\\n  -o FCcounts_all $allbams\n  echo $starlogs\n  cat $starlogs >tmpstarlogs\n  sed \"s/StarOutAligned.sortedByCoord.out.bam//g\" FCcounts_all >fctmp\n\n  R -e 'x=read.delim(\"fctmp\",header=T,as.is=T,comment.char=\"#\");rownames(x)=x[,\"Geneid\"]; write.table(x[, -(1:6) ],file=\"FCcounts.tsv\",sep=\"\\\\t\",quote=F);starsum=do.call(rbind,lapply(strsplit(\"$starlogs\",\" \")[[1]],function(y){s=gsub(\"CountSummary.txt\",\"\",y);ysum=data.frame(t(read.delim(y,header=F)[,2]),row.names=s);colnames(ysum)=read.delim(y,header=F)[,1];ysum}));fcsum=t(read.delim(\"FCcounts_all.summary\",as.is=T,header=T)[c(1,9,12),-1]);rownames(fcsum)=gsub(\"StarOutAligned.sortedByCoord.out.bam\",\"\",rownames(fcsum));colnames(fcsum)=c(\"Assigned\",\"Unassigned_MultiMapping\",\"Unassigned_NoFeatures\");write.table(data.frame(starsum,fcsum[rownames(starsum),],nGenes=apply(x[,rownames(starsum)]>0,2,sum)),file=\"RNAseqSummary.tsv\",sep=\"\\\\t\",quote=F)'\n\n\n  gzip FCcounts.tsv\n\n  cp $index/refGeneID.rds referenceGeneAnnotation_${info}.rds\n\n\n  \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "index_ch",
            "bam_ch",
            "starlog_ch",
            "params"
        ],
        "nb_inputs": 4,
        "outputs": [
            "countout",
            "seqsumout",
            "annotout"
        ],
        "nb_outputs": 3,
        "name_workflow": "RemyNicolle__DummyNF",
        "directive": [
            "tag \"FC \"",
            "label 'small'",
            "publishDir \"${params.outputDir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
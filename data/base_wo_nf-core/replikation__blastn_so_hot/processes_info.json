{
    "plot_xml": {
        "name_process": "plot_xml",
        "string_process": "process plot_xml {\n        echo true\n        label 'altair'\n        publishDir \"${params.output}/${name}/\", mode: 'copy'\n    input:\n        tuple val(name), path(xml)\n  \toutput:\n    \ttuple val(name), path(\"${name}.html\"), path(\"chart.svg\") \n  \tscript:\n    \"\"\"\n\tparse_and_plot.py --xml ${xml}\n\tmv chart.html ${name}.html\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n\tparse_and_plot.py --xml ${xml}\n\tmv chart.html ${name}.html\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "xml"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "replikation__blastn_so_hot",
        "directive": [
            "echo true",
            "label 'altair'",
            "publishDir \"${params.output}/${name}/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "blastn_NCBI": {
        "name_process": "blastn_NCBI",
        "string_process": "process blastn_NCBI {\n        label 'biopython'\n        publishDir \"${params.output}/${name}/\", mode: 'copy'\n    input:\n        tuple val(name), path(fasta)\n  \toutput:\n    \ttuple val(name), path(\"${name}.xml\")\n  \tscript:\n    \"\"\"\n    export PYTHONHTTPSVERIFY=0\n\tblast_ncbi.py --fasta ${fasta}\n\tmv my_blast.xml ${name}.xml\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    export PYTHONHTTPSVERIFY=0\n\tblast_ncbi.py --fasta ${fasta}\n\tmv my_blast.xml ${name}.xml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "replikation__blastn_so_hot",
        "directive": [
            "label 'biopython'",
            "publishDir \"${params.output}/${name}/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "makeblastDB": {
        "name_process": "makeblastDB",
        "string_process": "process makeblastDB {\n        label 'blast'\n    input:\n        path(references) \n    output:\n\t    path(\"blast_database\", type: 'dir') \n    script:\n    \"\"\"\n    makeblastdb -in ${references} -dbtype nucl -parse_seqids -out blast_database -title reference_db\n    mkdir blast_database && mv blast_database.* blast_database/\n    \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "    \"\"\"\n    makeblastdb -in ${references} -dbtype nucl -parse_seqids -out blast_database -title reference_db\n    mkdir blast_database && mv blast_database.* blast_database/\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "references"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "replikation__blastn_so_hot",
        "directive": [
            "label 'blast'"
        ],
        "when": "",
        "stub": ""
    },
    "blastn_local": {
        "name_process": "blastn_local",
        "string_process": "\nprocess blastn_local {\n        label 'blast'\n        publishDir \"${params.output}/${name}/\", mode: 'copy'\n    input:\n        tuple val(name), path(fasta)\n        path(database)\n    output:\n\t    tuple val(name), path(\"${name}.xml\") \n    script:\n    \"\"\"\n    blastn -query ${fasta} -db ${database}/${database} -out ${name}.xml -outfmt 5 -num_threads ${task.cpus} -evalue 10E-120 -qcov_hsp_perc 10 -max_hsps 10\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    blastn -query ${fasta} -db ${database}/${database} -out ${name}.xml -outfmt 5 -num_threads ${task.cpus} -evalue 10E-120 -qcov_hsp_perc 10 -max_hsps 10\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "name",
            "fasta",
            "database"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "replikation__blastn_so_hot",
        "directive": [
            "label 'blast'",
            "publishDir \"${params.output}/${name}/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
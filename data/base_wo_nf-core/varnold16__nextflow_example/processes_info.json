{
    "buildindexGenome": {
        "name_process": "buildindexGenome",
        "string_process": "\nprocess buildindexGenome {\n    conda CONDA_ENV\n    input: GENOME\n    output: val GINDEX into INDEXREAD_FILE \n    \"\"\" \n    ${INDEX_TOOL} -o ${GINDEX} ${GENOME}\n    \"\"\"\n}",
        "nb_lignes_process": 7,
        "string_script": "\"\"\" \n    ${INDEX_TOOL} -o ${GINDEX} ${GENOME}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "varnold16__nextflow_example",
        "directive": [
            "conda CONDA_ENV input: GENOME output: val GINDEX into INDEXREAD_FILE"
        ],
        "when": "",
        "stub": ""
    },
    "alignReads": {
        "name_process": "alignReads",
        "string_process": "\nprocess alignReads {\n    conda CONDA_ENV\n    publishDir params.ALIGNDIR, mode: 'copy'\n    input:\n    each SAMPLE from SAMPLE_FILES\n    val GINDEX from INDEXREAD_FILE\n    output:\n    file \"${SAMPLE.baseName}.bam\" into BAM_FILES\n    file \"${SAMPLE.baseName}.bam.indel.vcf\" into VCF_FILES\n    \"\"\"\n    ${ALIGN_TOOL} -t 0 -T ${A_THREADS} -i ${GINDEX} --gzFASTQinput -r ${SAMPLE} -o ${SAMPLE.baseName}.bam\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\"\"\"\n    ${ALIGN_TOOL} -t 0 -T ${A_THREADS} -i ${GINDEX} --gzFASTQinput -r ${SAMPLE} -o ${SAMPLE.baseName}.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "SAMPLE_FILES",
            "INDEXREAD_FILE"
        ],
        "nb_inputs": 2,
        "outputs": [
            "BAM_FILES",
            "VCF_FILES"
        ],
        "nb_outputs": 2,
        "name_workflow": "varnold16__nextflow_example",
        "directive": [
            "conda CONDA_ENV",
            "publishDir params.ALIGNDIR, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "countFeatures": {
        "name_process": "countFeatures",
        "string_process": "\nprocess countFeatures {\n    conda CONDA_ENV\n    publishDir params.COUNTDIR, mode: 'copy'\n    input: each BAM_FILE from BAM_FILES\n    output:\n    file \"${BAM_FILE.baseName}.counts\" into COUNT_FILES\n    file \"${BAM_FILE.baseName}.counts.summary\" into COUNT_FILES_SUMMARY\n    \"\"\"\n    ${FEAT_TOOL} $BAM_FILE -T ${C_THREADS} -a ${ANNOT} -F 'GTF' -o ${BAM_FILE.baseName}.counts\n    \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\n    ${FEAT_TOOL} $BAM_FILE -T ${C_THREADS} -a ${ANNOT} -F 'GTF' -o ${BAM_FILE.baseName}.counts\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "COUNT_FILES",
            "COUNT_FILES_SUMMARY"
        ],
        "nb_outputs": 2,
        "name_workflow": "varnold16__nextflow_example",
        "directive": [
            "conda CONDA_ENV",
            "publishDir params.COUNTDIR, mode: 'copy' input: each BAM_FILE from BAM_FILES"
        ],
        "when": "",
        "stub": ""
    }
}
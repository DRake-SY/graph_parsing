{
    "OPERATION_1": {
        "string": "ch_sample_ids = Channel.value(file(params.sample_ids))",
        "origin": [],
        "gives": [
            [
                "ch_sample_ids",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_num_participants = Channel.fromPath(params.sample_ids).splitText().map{ it.trim() }.count()",
        "origin": [
            [
                "params.sample_ids",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_num_participants",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_num_participants = Channel.value(params.num_participants)",
        "origin": [
            [
                "params.num_participants",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_num_participants",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n    .fromPath(\"${params.legend_for_hapgen2}\")\n    .set { legend_for_hapgen2_file_ch }",
        "origin": [
            [
                "\"${params.legend_for_hapgen2}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "legend_for_hapgen2_file_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n    .fromPath(\"${params.reference_1000G}\")\n    .set { reference_1000G_ch }",
        "origin": [
            [
                "\"${params.reference_1000G}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "reference_1000G_ch",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n    .fromPath(\"${params.simulate_cb_output_config}\")\n    .set { cohort_browser_yaml_config_ch }",
        "origin": [
            [
                "\"${params.simulate_cb_output_config}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "cohort_browser_yaml_config_ch",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_8": {
        "string": "downloaded_leg_files_ch\n  .flatMap { it -> it }\n  .map { file -> \n       def chr = file.name.toString().tokenize('-').get(0)\n       return tuple(chr, file)\n   }\n  .set { legend_for_hapgen2_ch }",
        "origin": [
            [
                "downloaded_leg_files_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "legend_for_hapgen2_ch",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "downloaded_1000G_genetic_map_ch\n    .flatMap { it -> it }\n    .map { file -> \n       def key = file.name.toString().tokenize('_').get(2)\n       return tuple(key, file)\n    }\n    .set { genetic_map_ch }",
        "origin": [
            [
                "downloaded_1000G_genetic_map_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "genetic_map_ch",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "downloaded_1000G_hap_ch\n    .flatMap { it -> it }\n    .map { file -> \n       def key = file.name.toString().tokenize('_').get(4)\n       return tuple(key, file)\n    }\n    .set { hap_ch }",
        "origin": [
            [
                "downloaded_1000G_hap_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "hap_ch",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "all_ref_ch = genetic_map_ch.join(hap_ch)",
        "origin": [
            [
                "genetic_map_ch",
                "P"
            ],
            [
                "hap_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "all_ref_ch",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "all_hapgen_inputs_ch = all_ref_ch.join(legend_for_hapgen2_ch)",
        "origin": [
            [
                "all_ref_ch",
                "P"
            ],
            [
                "legend_for_hapgen2_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "all_hapgen_inputs_ch",
                "P"
            ]
        ]
    }
}
{
    "FIND_INFILES": {
        "name_process": "FIND_INFILES",
        "string_process": "\nprocess FIND_INFILES {\n\n    input:\n        path(input_path)\n\n    output:\n        path(\"find_infiles.success.txt\"), emit: found_infiles\n\n    script:\n    \"\"\"\n    find_infiles.sh ${input_path}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch find_infiles.success.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    find_infiles.sh ${input_path}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_path"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisgulvik__wf-assembly-snps",
        "directive": [],
        "when": "",
        "stub": "\n    \"\"\"\n    touch find_infiles.success.txt\n    \"\"\""
    },
    "INFILE_HANDLING": {
        "name_process": "INFILE_HANDLING",
        "string_process": "\nprocess INFILE_HANDLING {\n    \n    input:\n        path(found_infiles)\n        path(input_dir_path)\n        path(output_dir_path)\n        path(reference_file_path)\n\n    output:\n        path(\"${output_dir_path}/.ref/*\"), emit: ref_path\n        path(\"${output_dir_path}/.tmp\"), emit: tmp_path\n        path(\"${output_dir_path}/.tmp/*\")\n        path(\"infile_handling.success.txt\"), emit: handled_infiles\n\n    script:\n    \"\"\"\n    infile_handling.sh ${input_dir_path} ${output_dir_path} ${reference_file_path}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"\n    \n    stub:\n    \"\"\"\n    touch infile_handling.success.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    infile_handling.sh ${input_dir_path} ${output_dir_path} ${reference_file_path}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "found_infiles",
            "input_dir_path",
            "output_dir_path",
            "reference_file_path"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisgulvik__wf-assembly-snps",
        "directive": [],
        "when": "",
        "stub": "\n    \"\"\"\n    touch infile_handling.success.txt\n    \"\"\""
    },
    "RUN_PARSNP": {
        "name_process": "RUN_PARSNP",
        "string_process": "\nprocess RUN_PARSNP {\n\n    cpus 2\n    params.enable_conda_yml ? \"$baseDir/conda/linux/parsnp.yml\" : null\n    conda 'bioconda::parsnp=1.1.3'\n    container 'snads/parsnp:1.5.6'\n                                                                               \n                                                              \n                                                          \n\n    input:\n        path(handled_infiles)\n        path(ref_path)\n        path(tmp_path)\n        path(output_dir_path)\n\n    output:\n        path(\"${output_dir_path}/parsnp.ggr\")\n        path(\"${output_dir_path}/parsnp.tree\")\n        path(\"run_parsnp.success.txt\"), emit: ran_parsnp\n\n    script:\n    \"\"\"\n    run_parsnp.sh ${tmp_path} ${output_dir_path} ${ref_path} ${task.cpus}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch run_parsnp.success.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    run_parsnp.sh ${tmp_path} ${output_dir_path} ${ref_path} ${task.cpus}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "handled_infiles",
            "ref_path",
            "tmp_path",
            "output_dir_path"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisgulvik__wf-assembly-snps",
        "directive": [
            "cpus 2 params.enable_conda_yml ? \"$baseDir/conda/linux/parsnp.yml\" : null",
            "conda 'bioconda::parsnp=1.1.3'",
            "container 'snads/parsnp:1.5.6'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch run_parsnp.success.txt\n    \"\"\""
    },
    "EXTRACT_SNPS": {
        "name_process": "EXTRACT_SNPS",
        "string_process": "\nprocess EXTRACT_SNPS {\n\n\n    params.enable_conda_yml ? \"$baseDir/conda/linux/harvesttools.yml\" : null\n    conda 'bioconda::harvesttools=1.2'\n    container 'snads/parsnp:1.5.6'\n\n    input:\n        path(ran_parsnp)\n        path(output_dir_path)\n\n    output:\n        path(\"${output_dir_path}/SNPs.fa\")\n        path(\"extract_snps.success.txt\"), emit: extracted_snps\n\n    script:\n    \"\"\"\n    extract_snps.sh ${output_dir_path}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch extract_snps.success.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    extract_snps.sh ${output_dir_path}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ran_parsnp",
            "output_dir_path"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisgulvik__wf-assembly-snps",
        "directive": [
            "conda 'bioconda::harvesttools=1.2'",
            "container 'snads/parsnp:1.5.6'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch extract_snps.success.txt\n    \"\"\""
    },
    "PAIRWISE_DISTANCES": {
        "name_process": "PAIRWISE_DISTANCES",
        "string_process": "\nprocess PAIRWISE_DISTANCES {\n\n    params.enable_conda_yml ? \"$baseDir/conda/linux/bioperl.yml\" : null\n    conda 'bioconda::perl-bioperl-core=1.007002'\n    container 'bioperl/bioperl:release-1-7-2'\n    cpus 12\n\n    input:\n        path(extracted_snps)\n        path(output_dir_path)\n\n    output:\n        path(\"${output_dir_path}/SNP-distances.pairs.tsv\")\n        path(\"pairwise_distances.success.txt\"), emit: calculated_snp_distances\n\n    script:\n    \"\"\"\n    pairwise_distances.sh ${output_dir_path} ${task.cpus}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch pairwise_distances.success.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    pairwise_distances.sh ${output_dir_path} ${task.cpus}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "extracted_snps",
            "output_dir_path"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisgulvik__wf-assembly-snps",
        "directive": [
            "conda 'bioconda::perl-bioperl-core=1.007002'",
            "container 'bioperl/bioperl:release-1-7-2'",
            "cpus 12"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch pairwise_distances.success.txt\n    \"\"\""
    },
    "DISTANCE_MATRIX": {
        "name_process": "DISTANCE_MATRIX",
        "string_process": "\nprocess DISTANCE_MATRIX {\n\n    params.enable_conda_yml ? \"$baseDir/conda/linux/python3.yml\" : null\n    conda 'conda-forge::python=3.10.1'\n    container 'snads/hamming-dist:1.0'\n\n    input:\n        path(calculated_snp_distances)\n        path(output_dir_path)\n\n    output:\n        path(\"${output_dir_path}/SNP-distances.matrix.tsv\")\n        path(\"distance_matrix.success.txt\"), emit: made_snp_matrix\n\n    script:\n    \"\"\"\n    distance_matrix.sh ${output_dir_path}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch distance_matrix.success.txt\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    distance_matrix.sh ${output_dir_path}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "calculated_snp_distances",
            "output_dir_path"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisgulvik__wf-assembly-snps",
        "directive": [
            "conda 'conda-forge::python=3.10.1'",
            "container 'snads/hamming-dist:1.0'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch distance_matrix.success.txt\n    \"\"\""
    },
    "RECOMBINATION": {
        "name_process": "RECOMBINATION",
        "string_process": "\nprocess RECOMBINATION {\n\n    cpus 2\n    container \"$baseDir/assets/filename.sif\"\n\n    input:\n        path(extracted_snps)\n        path(output_dir_path)\n\n    output:\n        path(\"${output_dir_path}/mutational-only.recombination-free.tre\")\n        path(\"recombination.success.txt\"), emit: inferred_recombination\n\n    script:\n    \"\"\"\n    recombination.sh ${output_dir_path} ${task.cpus}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch recombination.success.txt\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    recombination.sh ${output_dir_path} ${task.cpus}\n    cat .command.out >> ${params.logpath}/stdout.nextflow.txt\n    cat .command.err >> ${params.logpath}/stderr.nextflow.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "extracted_snps",
            "output_dir_path"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisgulvik__wf-assembly-snps",
        "directive": [
            "cpus 2",
            "container \"$baseDir/assets/filename.sif\""
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch recombination.success.txt\n    \"\"\""
    }
}
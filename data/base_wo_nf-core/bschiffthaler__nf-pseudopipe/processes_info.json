{
    "prep_gff": {
        "name_process": "prep_gff",
        "string_process": "\nprocess prep_gff {\n  container \"bschiffthaler/python:3.9\"\n  cpus 1\n\n  input:\n  path script\n  path gff\n\n  output:\n  path \"exlocs\"\n\n  script:\n\n  \"\"\"\n  python ${script} ${gff}\n  for f in exlocs/*_exLocs; do\n    sort -k3n -k4n \\$f > tmp\n    mv tmp \\$f\n  done\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  python ${script} ${gff}\n  for f in exlocs/*_exLocs; do\n    sort -k3n -k4n \\$f > tmp\n    mv tmp \\$f\n  done\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "TMPD"
        ],
        "tools_url": [
            "https://bio.tools/tmpd"
        ],
        "tools_dico": [
            {
                "name": "TMPD",
                "uri": "https://bio.tools/tmpd",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Tobacco Markers & Primers Database.",
                "homepage": "http://biodb.sdau.edu.cn/tmpd/index.html"
            }
        ],
        "inputs": [
            "script",
            "gff"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bschiffthaler__nf-pseudopipe",
        "directive": [
            "container \"bschiffthaler/python:3.9\"",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "index_fasta": {
        "name_process": "index_fasta",
        "string_process": "\nprocess index_fasta {\n  container \"bschiffthaler/pseudopipe:1a279cc6\"\n  cpus 1\n\n  input:\n  path fasta_mask\n\n  output:\n  path \"*.{nhr,nin,nsd,nsi,nsq}\", emit: index\n\n  script:\n\n  \"\"\"\n  formatdb -i ${fasta_mask} -o T -p F\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  formatdb -i ${fasta_mask} -o T -p F\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta_mask"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bschiffthaler__nf-pseudopipe",
        "directive": [
            "container \"bschiffthaler/pseudopipe:1a279cc6\"",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "index_fasta_plus": {
        "name_process": "index_fasta_plus",
        "string_process": "\nprocess index_fasta_plus {\n  container \"bschiffthaler/ncbi-blast:2.11.0\"\n  cpus 1\n\n  input:\n  path fasta_mask\n\n  output:\n  path \"*.{ndb,nhr,nin,not,nsq,ntf,nto}\", emit: index\n\n  script:\n\n  \"\"\"\n  makeblastdb -in ${fasta_mask} -dbtype nucl\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  makeblastdb -in ${fasta_mask} -dbtype nucl\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta_mask"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bschiffthaler__nf-pseudopipe",
        "directive": [
            "container \"bschiffthaler/ncbi-blast:2.11.0\"",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "prep_fasta": {
        "name_process": "prep_fasta",
        "string_process": "\nprocess prep_fasta {\n  container \"bschiffthaler/python:3.9\"\n  cpus 1\n\n  input:\n  path script\n  path fasta\n\n  output:\n  path \"split_out\"\n\n  script:\n\n  \"\"\"\n  python ${script} ${fasta}\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  python ${script} ${fasta}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "script",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bschiffthaler__nf-pseudopipe",
        "directive": [
            "container \"bschiffthaler/python:3.9\"",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "prep_ppipe_out": {
        "name_process": "prep_ppipe_out",
        "string_process": "\nprocess prep_ppipe_out {\n  container \"bschiffthaler/pseudopipe:1a279cc6\"\n  cpus 1\n\n  input:\n  path script\n  path split\n\n  output:\n  path \"out\"\n\n  script:\n\n  \"\"\"\n  mkdir out\n  bash ${script}\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  mkdir out\n  bash ${script}\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "script",
            "split"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bschiffthaler__nf-pseudopipe",
        "directive": [
            "container \"bschiffthaler/pseudopipe:1a279cc6\"",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "blast": {
        "name_process": "blast",
        "string_process": "\nprocess blast {\n  container \"bschiffthaler/pseudopipe:1a279cc6\"\n  cpus 1\n  time \"${params.blast_time}\"\n\n  input:\n  path fasta_mask\n  path indexfiles\n  path split\n\n  output:\n  path \"split*\"\n\n  script:\n  _opts = params.blast_opts.join(\" \")\n\n  \"\"\"\n  sp=\\$(basename ${split})\n  blastall -p tblastn ${_opts} -m 8 \\\n    -d ${fasta_mask} -i ${split} -o \\${sp}.Out \\\n    >\\${sp}.Status 2>&1\n  n=\\$(echo \\$sp | cut -d . -f 2)\n  o=\\$(printf \"%04d\" \\$n)\n  mv \\${sp}.Out split\\${o}.Out\n  mv \\${sp}.Status split\\${o}.Status\n  cat ${split} > split\\${o}\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  _opts = params.blast_opts.join(\" \")\n\n  \"\"\"\n  sp=\\$(basename ${split})\n  blastall -p tblastn ${_opts} -m 8 \\\n    -d ${fasta_mask} -i ${split} -o \\${sp}.Out \\\n    >\\${sp}.Status 2>&1\n  n=\\$(echo \\$sp | cut -d . -f 2)\n  o=\\$(printf \"%04d\" \\$n)\n  mv \\${sp}.Out split\\${o}.Out\n  mv \\${sp}.Status split\\${o}.Status\n  cat ${split} > split\\${o}\n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "mblastall"
        ],
        "tools_url": [
            "https://bio.tools/mblastall"
        ],
        "tools_dico": [
            {
                "name": "mblastall",
                "uri": "https://bio.tools/mblastall",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0338",
                                    "term": "Sequence database search"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "Search nucleotide database with nucleotide query sequence(s).",
                "homepage": "https://bioweb.pasteur.fr/packages/pack@ptools@0.99d"
            }
        ],
        "inputs": [
            "fasta_mask",
            "indexfiles",
            "split"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bschiffthaler__nf-pseudopipe",
        "directive": [
            "container \"bschiffthaler/pseudopipe:1a279cc6\"",
            "cpus 1",
            "time \"${params.blast_time}\""
        ],
        "when": "",
        "stub": ""
    },
    "blast_plus": {
        "name_process": "blast_plus",
        "string_process": "\nprocess blast_plus {\n  container \"bschiffthaler/ncbi-blast:2.11.0\"\n  cpus params.blast_cpus\n  time \"${params.blast_time}\"\n\n  input:\n  path fasta_mask\n  path indexfiles\n  path split\n\n  output:\n  path \"split*\"\n\n  script:\n  _opts = params.blast_opts.join(\" \")\n  \"\"\"\n  sp=\\$(basename ${split})\n  tblastn ${_opts} -outfmt 6 -num_threads ${params.blast_cpus} \\\n    -db ${fasta_mask} -query ${split} -out \\${sp}.Out \\\n    >\\${sp}.Status 2>&1\n  n=\\$(echo \\$sp | cut -d . -f 2)\n  o=\\$(printf \"%04d\" \\$n)\n  mv \\${sp}.Out split\\${o}.Out\n  mv \\${sp}.Status split\\${o}.Status\n  cat ${split} > split\\${o}\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  _opts = params.blast_opts.join(\" \")\n  \"\"\"\n  sp=\\$(basename ${split})\n  tblastn ${_opts} -outfmt 6 -num_threads ${params.blast_cpus} \\\n    -db ${fasta_mask} -query ${split} -out \\${sp}.Out \\\n    >\\${sp}.Status 2>&1\n  n=\\$(echo \\$sp | cut -d . -f 2)\n  o=\\$(printf \"%04d\" \\$n)\n  mv \\${sp}.Out split\\${o}.Out\n  mv \\${sp}.Status split\\${o}.Status\n  cat ${split} > split\\${o}\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta_mask",
            "indexfiles",
            "split"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bschiffthaler__nf-pseudopipe",
        "directive": [
            "container \"bschiffthaler/ncbi-blast:2.11.0\"",
            "cpus params.blast_cpus",
            "time \"${params.blast_time}\""
        ],
        "when": "",
        "stub": ""
    },
    "pseudopipe": {
        "name_process": "pseudopipe",
        "string_process": "\nprocess pseudopipe {\n  container \"bschiffthaler/pseudopipe:1a279cc6\"\n  cpus 1\n  publishDir \"results\"\n\n  input:\n  path fasta_mask\n  path indexfiles\n  path fasta_protein\n  path fasta_chr\n  path exlocs\n  path out\n\n  output:\n  path \"out\"\n\n  script:\n\n  \"\"\"\n  RP=\\$(realpath .)\n  /usr/local/bin/pseudopipe/bin/pseudopipe.sh \\\n    \\${RP}/out \\\n    \\${RP}/${fasta_mask} \\\n    \\${RP}/${fasta_chr} \\\n    \\${RP}/${fasta_protein} \\\n    \\${RP}/${exlocs} \\\n    0\n  \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "  \"\"\"\n  RP=\\$(realpath .)\n  /usr/local/bin/pseudopipe/bin/pseudopipe.sh \\\n    \\${RP}/out \\\n    \\${RP}/${fasta_mask} \\\n    \\${RP}/${fasta_chr} \\\n    \\${RP}/${fasta_protein} \\\n    \\${RP}/${exlocs} \\\n    0\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "Ragout"
        ],
        "tools_url": [
            "https://bio.tools/ragout"
        ],
        "tools_dico": [
            {
                "name": "Ragout",
                "uri": "https://bio.tools/ragout",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for assisted assembly using multiple references. It takes a short read assembly (a set of contigs), a set of related references and a corresponding phylogenetic tree and then assembles the contigs into scaffolds.",
                "homepage": "http://fenderglass.github.io/Ragout/"
            }
        ],
        "inputs": [
            "fasta_mask",
            "indexfiles",
            "fasta_protein",
            "fasta_chr",
            "exlocs",
            "out"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bschiffthaler__nf-pseudopipe",
        "directive": [
            "container \"bschiffthaler/pseudopipe:1a279cc6\"",
            "cpus 1",
            "publishDir \"results\""
        ],
        "when": "",
        "stub": ""
    }
}
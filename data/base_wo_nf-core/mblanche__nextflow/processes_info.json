{
    "bwa_mem": {
        "name_process": "bwa_mem",
        "string_process": "\nprocess bwa_mem {\n    tag \"_${id}\"\n    cpus 48\n    memory '48 GB'\n    container 'mblanche/bwa-samtools'\n    \n    input:\n    tuple val(id), file(R1s), file(R2s) from fastqDir_ch\n    path index from bwa_index.first()\n    \n    output:\n    tuple id, path(\"*.bam\") into bam_part_ch\n    \n    script:\n    \"\"\"\n    bwa mem -5SP -t ${task.cpus} \\\n    \t${index}/${params.genome} \\\n    \t<(zcat ${R1s}) \\\n    \t<(zcat ${R2s}) \\\n\t|samtools view -@ ${task.cpus} -Shb - > ${id}.bam\n    \n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    bwa mem -5SP -t ${task.cpus} \\\n    \t${index}/${params.genome} \\\n    \t<(zcat ${R1s}) \\\n    \t<(zcat ${R2s}) \\\n\t|samtools view -@ ${task.cpus} -Shb - > ${id}.bam\n    \n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fastqDir_ch",
            "bwa_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bam_part_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 48",
            "memory '48 GB'",
            "container 'mblanche/bwa-samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "make_chr_size": {
        "name_process": "make_chr_size",
        "string_process": "\nprocess make_chr_size {\n    container 'mblanche/bwa-samtools'\n\n    input:\n    tuple val(id), path(bam) from bam_ch\n\n    output:\n    tuple val(id), path('chr_size.tsv') into chrSizes_ch\n\n    script:\n    \"\"\"\n    samtools view -H ${bam} | \\\n\tawk -v OFS='\\t' '/^@SQ/{split(\\$2,chr,\":\");split(\\$3,ln,\":\");print chr[2],ln[2]}' \\\n\t> chr_size.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    samtools view -H ${bam} | \\\n\tawk -v OFS='\\t' '/^@SQ/{split(\\$2,chr,\":\");split(\\$3,ln,\":\");print chr[2],ln[2]}' \\\n\t> chr_size.tsv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chrSizes_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "container 'mblanche/bwa-samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "pairtools_parse": {
        "name_process": "pairtools_parse",
        "string_process": "\nprocess pairtools_parse {\n    tag \"_${id}\"\n    cpus 14\n    memory '50 GB'\n    container 'mblanche/pairtools'\n\n    input:\n    tuple id, path(sam), path(chr_sizes) from pairtools_parse_ch\n\n    output:\n    tuple id, path(\"*.pairsam.gz\") into pairsam_part_ch\n\n    script:\n    \"\"\"\n    pairtools parse \\\n\t--min-mapq ${params.mapQ} \\\n\t--walks-policy 5unique \\\n\t--max-inter-align-gap 30 \\\n\t--nproc-in ${task.cpus} --nproc-out ${task.cpus} \\\n\t--chroms-path ${chr_sizes} \\\n\t--output ${id}.pairsam.gz \\\n\t${sam} \n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    pairtools parse \\\n\t--min-mapq ${params.mapQ} \\\n\t--walks-policy 5unique \\\n\t--max-inter-align-gap 30 \\\n\t--nproc-in ${task.cpus} --nproc-out ${task.cpus} \\\n\t--chroms-path ${chr_sizes} \\\n\t--output ${id}.pairsam.gz \\\n\t${sam} \n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairtools_parse_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pairsam_part_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 14",
            "memory '50 GB'",
            "container 'mblanche/pairtools'"
        ],
        "when": "",
        "stub": ""
    },
    "pairtools_sort": {
        "name_process": "pairtools_sort",
        "string_process": "\nprocess pairtools_sort {\n    tag \"_${id}\"\n    cpus 14\n    memory '100 GB'\n    container 'mblanche/pairtools'\n\n    input:\n    tuple id, path(sam) from pairsam_ch\n\n    output:\n    tuple id, path(\"*_sorted.pairsam.gz\") into sorted_ps_ch\n    \n    script:\n    \"\"\"\n    mkdir -p tmp \n    pairtools sort --tmpdir ./tmp  \\\n\t--nproc ${task.cpus} \\\n\t--output ${id}_sorted.pairsam.gz \\\n\t$sam \n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    mkdir -p tmp \n    pairtools sort --tmpdir ./tmp  \\\n\t--nproc ${task.cpus} \\\n\t--output ${id}_sorted.pairsam.gz \\\n\t$sam \n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairsam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sorted_ps_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 14",
            "memory '100 GB'",
            "container 'mblanche/pairtools'"
        ],
        "when": "",
        "stub": ""
    },
    "pairtools_dedup": {
        "name_process": "pairtools_dedup",
        "string_process": "\nprocess pairtools_dedup {\n    tag \"_${id}\"\n    cpus 14\n    memory '40 GB'\n    container 'mblanche/pairtools'\n    \n    publishDir \"${params.outDir}/pairtools_stat\",\n    \tmode: 'copy',\n    \tsaveAs: {filename -> filename.endsWith('.stats') ? filename : null}\n    \n    input:\n    tuple id, path(sam) from sorted_ps_ch\n\n    output:\n    tuple id, path(\"*_dedup.pairsam.gz\") into dedup_ps_ch\n    tuple id, path(\"*_unmapped.pairsam.gz\") into unmapped_ps_ch\n    tuple id, path(\"*_pairtools.stats\") into ps_stats_ch\n\n    script:\n    \"\"\"\n    pairtools dedup --nproc-in ${task.cpus} --nproc-out ${task.cpus} \\\n\t--mark-dups \\\n\t--output-stats ${id}_pairtools.stats  \\\n\t--output ${id}_dedup.pairsam.gz \\\n\t--output-unmapped ${id}_unmapped.pairsam.gz \\\n\t${sam}\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    pairtools dedup --nproc-in ${task.cpus} --nproc-out ${task.cpus} \\\n\t--mark-dups \\\n\t--output-stats ${id}_pairtools.stats  \\\n\t--output ${id}_dedup.pairsam.gz \\\n\t--output-unmapped ${id}_unmapped.pairsam.gz \\\n\t${sam}\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sorted_ps_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dedup_ps_ch",
            "unmapped_ps_ch",
            "ps_stats_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 14",
            "memory '40 GB'",
            "container 'mblanche/pairtools'",
            "publishDir \"${params.outDir}/pairtools_stat\" , mode: 'copy' , saveAs: {filename -> filename.endsWith('.stats') ? filename : null}"
        ],
        "when": "",
        "stub": ""
    },
    "pairtools_stats_merge": {
        "name_process": "pairtools_stats_merge",
        "string_process": "\nprocess pairtools_stats_merge {\n    tag \"_${id}\"\n    cpus 1\n    memory '4 GB'\n    container 'mblanche/pt-stats'\n\n    publishDir \"${params.outDir}\",\n\tmode: 'copy'\n    \n    input:\n    path(stats) from ps_stats_ch\n\t.map{it[1]}\n\t.collect()\n    \n    output:\n    path('pairtoolsStats.csv') into merged_stats_ch\n    \n    script:\n    \"\"\"\n    pairtoolsStat.sh ${stats} > pairtoolsStats.csv\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    pairtoolsStat.sh ${stats} > pairtoolsStats.csv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ps_stats_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "merged_stats_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 1",
            "memory '4 GB'",
            "container 'mblanche/pt-stats'",
            "publishDir \"${params.outDir}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pairtools_split_dedup": {
        "name_process": "pairtools_split_dedup",
        "string_process": "\nprocess pairtools_split_dedup {\n    tag \"_${id}\"\n    cpus 14\n    memory '40 GB'\n    container 'mblanche/pairtools'\n\n    input:\n    tuple id, path(sam) from dedup_ps_ch\n    \n    output:\n    tuple id, path(\"*.bam\") into bam_parts_ch\n    tuple id, path(\"*.valid.pairs.gz\") into pairs_parts_ch, pairs_parts_ch_test\n\n    script:\n    \"\"\"\n    pairtools split --nproc-in ${task.cpus} --nproc-out ${task.cpus} \\\n\t--output-sam ${id}_PT.bam  \\\n\t--output-pairs ${id}_PT.valid.pairs.gz  \\\n\t${sam}\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    pairtools split --nproc-in ${task.cpus} --nproc-out ${task.cpus} \\\n\t--output-sam ${id}_PT.bam  \\\n\t--output-pairs ${id}_PT.valid.pairs.gz  \\\n\t${sam}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dedup_ps_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_parts_ch",
            "pairs_parts_ch",
            "pairs_parts_ch_test"
        ],
        "nb_outputs": 3,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 14",
            "memory '40 GB'",
            "container 'mblanche/pairtools'"
        ],
        "when": "",
        "stub": ""
    },
    "merge_pairs": {
        "name_process": "merge_pairs",
        "string_process": "\nprocess merge_pairs {\n    tag \"_${id}\"\n    cpus 14\n    memory '40 GB'\n    container 'mblanche/pairtools'\n    \n    publishDir \"${params.outDir}/validPairs\",\n    \tmode: 'copy'\n    \n    input:\n    tuple val(id), path(pairs) from pairs_parts_ch\n\t.map {id, file ->\n\t    if ( id.contains(\"-rep\") ){\n\t\tdef key = id.replaceFirst(/(.*)-rep.*/,'$1')\n\t\treturn tuple(key, file)\n\t    } else {\n\t\treturn( tuple(id,file) )\n\t    }\n\t}\n\t.groupTuple()\n    \n    output:\n    tuple id, path(\"*.valid.pairs.gz\"), path(\"*.px2\") into pairs_chrSize_ch\n\n    script:\n    pair_files = pairs.sort()\n    if (pair_files.size() >1) {\n\t\"\"\"\n\tpairtools merge -o ${id}.valid.pairs.gz --nproc ${task.cpus}  ${pairs}\n\tpairix ${id}.valid.pairs.gz\n\t\"\"\"\n    } else {\n\t\"\"\"\n\tln -s ${pairs} ${id}.valid.pairs.gz\n\tpairix ${id}.valid.pairs.gz\n\t\"\"\"\n    }\n}",
        "nb_lignes_process": 37,
        "string_script": "    pair_files = pairs.sort()\n    if (pair_files.size() >1) {\n\t\"\"\"\n\tpairtools merge -o ${id}.valid.pairs.gz --nproc ${task.cpus}  ${pairs}\n\tpairix ${id}.valid.pairs.gz\n\t\"\"\"\n    } else {\n\t\"\"\"\n\tln -s ${pairs} ${id}.valid.pairs.gz\n\tpairix ${id}.valid.pairs.gz\n\t\"\"\"\n    }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairs_parts_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pairs_chrSize_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 14",
            "memory '40 GB'",
            "container 'mblanche/pairtools'",
            "publishDir \"${params.outDir}/validPairs\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "merge_bam": {
        "name_process": "merge_bam",
        "string_process": "\nprocess merge_bam {\n    tag \"_${id}\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/bwa-samtools'\n    \n    input:\n    tuple id, path(bam_part) from bam_parts_ch\n\t.map {id, file ->\n\t    if ( id.contains(\"-rep\") ){\n\t\tdef key = id.replaceFirst(/(.*)-rep.*/,'$1')\n\t\treturn tuple(key, file)\n\t    } else {\n\t\treturn( tuple(id,file) )\n\t    }\n\t}\n\t.groupTuple()\n\n    output:\n    tuple id, path(\"*.bam\") into merged_bam_sort_ch\n\n    script:\n    bam_files = bam_part.sort()\n    if (bam_files.size() >1) {\n\t\"\"\"\n\tsamtools merge -@ ${task.cpus} ${id}_MB.bam ${bam_part}\n\t\"\"\"\n    } else {\n\t\"\"\"\n\tln -s ${bam_part} ${id}_MB.bam\n\t\"\"\"\n    }\n}",
        "nb_lignes_process": 32,
        "string_script": "    bam_files = bam_part.sort()\n    if (bam_files.size() >1) {\n\t\"\"\"\n\tsamtools merge -@ ${task.cpus} ${id}_MB.bam ${bam_part}\n\t\"\"\"\n    } else {\n\t\"\"\"\n\tln -s ${bam_part} ${id}_MB.bam\n\t\"\"\"\n    }",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_parts_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "merged_bam_sort_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/bwa-samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "bam_sort": {
        "name_process": "bam_sort",
        "string_process": "\nprocess bam_sort {\n    tag \"bam_sort_${id}\"\n    cpus 48\n    memory '150 GB'\n    container 'mblanche/bwa-samtools'\n    \n    publishDir \"${params.outDir}/bam\",\n\tmode: 'copy',\n\tpattern: \"${id}.bam\"\n        \n    input:\n    tuple id, path(bam) from merged_bam_sort_ch\n    \n    output:\n    tuple id, path(\"${id}.bam\"),path(\"${id}.bam.bai\") into bam_bigwig_ch, bam_chicago_ch\n\n    script:\n    \"\"\"\n    samtools sort -m 2G \\\n\t-@ ${task.cpus} \\\n\t-o ${id}.bam \\\n\t${bam} \n\n    samtools index -@${task.cpus} ${id}.bam\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    samtools sort -m 2G \\\n\t-@ ${task.cpus} \\\n\t-o ${id}.bam \\\n\t${bam} \n\n    samtools index -@${task.cpus} ${id}.bam\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "merged_bam_sort_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_bigwig_ch",
            "bam_chicago_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"bam_sort_${id}\"",
            "cpus 48",
            "memory '150 GB'",
            "container 'mblanche/bwa-samtools'",
            "publishDir \"${params.outDir}/bam\" , mode: 'copy' , pattern: \"${id}.bam\""
        ],
        "when": "",
        "stub": ""
    },
    "pairtools_split_unmapped": {
        "name_process": "pairtools_split_unmapped",
        "string_process": "\nprocess pairtools_split_unmapped {\n    tag \"_${id}\"\n    cpus 14\n    memory '40 GB'\n    container 'mblanche/pairtools'\n    \n    publishDir \"${params.outDir}/unmapped\",\n    \tmode: 'copy'\n\n    input:\n    tuple id, path(sam) from unmapped_ps_ch\n    \n    output:\n    path \"*_unmapped.bam\" into unmapped_bam_ch\n    path \"*_unmapped.valid.pairs.gz\" into unmapped_pairs_ch\n\n    script:\n    \"\"\"\n    pairtools split --nproc-in ${task.cpus} --nproc-out ${task.cpus} \\\n\t--output-sam ${id}_unmapped.bam  \\\n\t--output-pairs ${id}_unmapped.valid.pairs.gz  \\\n\t${sam}\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    pairtools split --nproc-in ${task.cpus} --nproc-out ${task.cpus} \\\n\t--output-sam ${id}_unmapped.bam  \\\n\t--output-pairs ${id}_unmapped.valid.pairs.gz  \\\n\t${sam}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "unmapped_ps_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "unmapped_bam_ch",
            "unmapped_pairs_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 14",
            "memory '40 GB'",
            "container 'mblanche/pairtools'",
            "publishDir \"${params.outDir}/unmapped\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "cooler_cload": {
        "name_process": "cooler_cload",
        "string_process": "\nprocess cooler_cload {\n    tag \"_${id}\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/cooler'\n\n    input:\n    tuple id, path(pairs), path(idx), path(chr_sizes) from pairs_ch_cooler\n    \n    output:\n    tuple id, path(\"*.cool\") into balance_cooler_ch\n        \n    script:\n    \"\"\"\n    cooler cload pairix \\\n\t-p ${task.cpus} \\\n\t${chr_sizes}:1000 \\\n\t${pairs} \\\n\t${id}.cool\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    cooler cload pairix \\\n\t-p ${task.cpus} \\\n\t${chr_sizes}:1000 \\\n\t${pairs} \\\n\t${id}.cool\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairs_ch_cooler"
        ],
        "nb_inputs": 1,
        "outputs": [
            "balance_cooler_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/cooler'"
        ],
        "when": "",
        "stub": ""
    },
    "cooler_zoomify": {
        "name_process": "cooler_zoomify",
        "string_process": "\nprocess cooler_zoomify {\n    tag \"_${id}\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/cooler'\n    \n    publishDir \"${params.outDir}/coolerFiles\",\n    \tmode: 'copy'\n    \n    input:\n    tuple id, path(cooler) from zoomify_cooler_ch\n\n    output:\n    tuple id, path(\"*.mcool\") into mustache_mcool_ch, abcomp_mcool_ch\n    \n    script:\n    \"\"\"\n    cooler zoomify --balance -p ${task.cpus} ${cooler}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    cooler zoomify --balance -p ${task.cpus} ${cooler}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "zoomify_cooler_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mustache_mcool_ch",
            "abcomp_mcool_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/cooler'",
            "publishDir \"${params.outDir}/coolerFiles\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "juicer": {
        "name_process": "juicer",
        "string_process": "\nprocess juicer {\n    tag \"${id}\"\n    label 'bigTask'\n    cpus 12\n    memory \"24 GB\"\n    container 'mblanche/juicer'\n    \n                                                                                    \n    publishDir \"${HOME}/ebs/ref_push/${params.expDir}/${params.expName}/test\",\n    \tmode: 'copy'\n    \n    input:\n    tuple val(id), path(chr_sizes), path(pairs), path(idx) from ch2\n    \n    output:\n    path \"*.hic\" into juicer_out_ch\n\n    when:\n    !params.noJuicer\n    \n    script:\n    \"\"\"\n    java -Xmx24000m -Djava.awt.headless=true \\\n\t-jar /juicer_tools_1.22.01.jar pre \\\n\t--threads ${task.cpus} \\\n\t-j ${task.cpus} \\\n\t-k VC,VC_SQRT,KR,SCALE \\\n\t${pairs} \\\n\t${id}.hic \\\n\t${chr_sizes}\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    java -Xmx24000m -Djava.awt.headless=true \\\n\t-jar /juicer_tools_1.22.01.jar pre \\\n\t--threads ${task.cpus} \\\n\t-j ${task.cpus} \\\n\t-k VC,VC_SQRT,KR,SCALE \\\n\t${pairs} \\\n\t${id}.hic \\\n\t${chr_sizes}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "juicer_out_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"${id}\"",
            "label 'bigTask'",
            "cpus 12",
            "memory \"24 GB\"",
            "container 'mblanche/juicer'",
            "publishDir \"${HOME}/ebs/ref_push/${params.expDir}/${params.expName}/test\" , mode: 'copy'"
        ],
        "when": "!params.noJuicer",
        "stub": ""
    },
    "bam2bw": {
        "name_process": "bam2bw",
        "string_process": "\nprocess bam2bw {\n    tag \"_${id}\"\n    cpus 20\n    memory '175 GB'\n    \n    container 'mblanche/r-cov'\n    \n    publishDir \"${params.outDir}/bigwigs\",\n    \tmode: 'copy'\n    \n    input:\n    tuple id, path(bam),path(idx) from bam_bigwig_ch\n        \n    output:\n    tuple id, path (\"*.bw\") into bigwig_out_ch\n\n    script:\n    \"\"\"\n    bam2bw ${bam} ${id}.bw ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    bam2bw ${bam} ${id}.bw ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_bigwig_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bigwig_out_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 20",
            "memory '175 GB'",
            "container 'mblanche/r-cov'",
            "publishDir \"${params.outDir}/bigwigs\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mustache": {
        "name_process": "mustache",
        "string_process": " process mustache {\n\ttag \"_${id}\"\n\tcpus 24\n\tmemory '48 GB'\n\tcontainer \"mblanche/mustache\"\n\t\n\tpublishDir \"${params.outDir}/mustache\",\n\t    mode: 'copy'\n\t\n\tinput:\n\ttuple id, path(mcool), val(res)  from mustache_mcool_ch\n\t    .combine(Channel.from(1000,4000,16000))\n\t\n\toutput:\n\ttuple id, path(\"*.tsv\") into mustache_2_merge_ch\n\t\n\tscript:\n\t\"\"\"\n\ttouch ${id}_${res}kb_loops.tsv \n\tmustache -p ${task.cpus} \\\n\t    -f ${mcool} \\\n\t    -r ${res} \\\n\t    -o ${id}_${res}kb_loops.tsv\n\t\"\"\"\n    }",
        "nb_lignes_process": 23,
        "string_script": "\t\"\"\"\n\ttouch ${id}_${res}kb_loops.tsv \n\tmustache -p ${task.cpus} \\\n\t    -f ${mcool} \\\n\t    -r ${res} \\\n\t    -o ${id}_${res}kb_loops.tsv\n\t\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mustache_mcool_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mustache_2_merge_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 24",
            "memory '48 GB'",
            "container \"mblanche/mustache\"",
            "publishDir \"${params.outDir}/mustache\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "cooler_sort": {
        "name_process": "cooler_sort",
        "string_process": "\nprocess cooler_sort {\n    echo true\n    tag \"_${id}\"\n    label \"batch\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/cooler'\n    \n    input:\n    tuple id, path(chr_sizes), path(pairs), path(idx) from cooler_sort_ch\n    \n    output:\n    tuple id, path(chr_sizes), path(\"*.gz\"), path(\"*.px2\") into pairs_ch_cooler\n    \n    script:\n    \"\"\"\n    cooler csort \\\n\t-c1 2 -p1 3 -c2 4 -p2 5 \\\n\t-i pairix \\\n\t-p ${task.cpus} \\\n\t--out ${id}_sorted.valid.pairs.gz \\\n\t${pairs} \\\n\t${chr_sizes}\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    cooler csort \\\n\t-c1 2 -p1 3 -c2 4 -p2 5 \\\n\t-i pairix \\\n\t-p ${task.cpus} \\\n\t--out ${id}_sorted.valid.pairs.gz \\\n\t${pairs} \\\n\t${chr_sizes}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cooler_sort_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pairs_ch_cooler"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "echo true",
            "tag \"_${id}\"",
            "label \"batch\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/cooler'"
        ],
        "when": "",
        "stub": ""
    },
    "index": {
        "name_process": "index",
        "string_process": "\nprocess index {\n    label 'index'\n    tag '_${id}'\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/bwa-samtools'\n    \n    publishDir \"${params.bamDir}\",\n\tmode: \"copy\"\n\n    input:\n    path(bam) from bam_ch\n\n    output:\n    tuple id, path(bam), path(\"*.bam.bai\") into bamNidx_ch\n    \n    script:\n    id = bam.name.toString().take(bam.name.toString().lastIndexOf('.'))\n    \"\"\"\n    samtools index -@${task.cpus} ${bam}\n    \"\"\"\n    \n\n}",
        "nb_lignes_process": 23,
        "string_script": "    id = bam.name.toString().take(bam.name.toString().lastIndexOf('.'))\n    \"\"\"\n    samtools index -@${task.cpus} ${bam}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MID",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/mid",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bamNidx_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "label 'index'",
            "tag '_${id}'",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/bwa-samtools'",
            "publishDir \"${params.bamDir}\" , mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "get_bs_files": {
        "name_process": "get_bs_files",
        "string_process": " process get_bs_files {\n\tcpus 1\n\tmemory '1G'\n\tcontainer 'mblanche/basespace-cli'\n\t\n\tinput:\n\tval bs from biosample_ch\n\t\n\toutput:\n\tstdout into bs_id_ch\n\t\n\tscript:\n\t\"\"\"\n\tfindNewestBS.sh ${bs} ${token} ${host}\n\t\"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "\t\"\"\"\n\tfindNewestBS.sh ${bs} ${token} ${host}\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "biosample_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bs_id_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "cpus 1",
            "memory '1G'",
            "container 'mblanche/basespace-cli'"
        ],
        "when": "",
        "stub": ""
    },
    "download_bs": {
        "name_process": "download_bs",
        "string_process": " process download_bs {\n\techo true\n\tlabel \"movers\"\n\tcpus 4\n\tmemory '4G'\n\tcontainer 'mblanche/basespace-cli'\n\tqueue 'moversQ'\n\t\n\tpublishDir \"${params.outDir}/fastqs\",\n\t    mode: 'copy'\n\t\n\tinput:\n\ttuple id, val(bs) from bs_id_ch\n\t    .splitCsv(header: false)\n\t\n\toutput:\n\ttuple bs, path(\"*.fastq.gz\") into fastqs_ch\n\t\n\tscript:\n\t\"\"\"\n\tbs file download --api-server ${host} --access-token ${token} -i ${id} -o . \n\t\"\"\"\n    }",
        "nb_lignes_process": 21,
        "string_script": "\t\"\"\"\n\tbs file download --api-server ${host} --access-token ${token} -i ${id} -o . \n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "GBS"
        ],
        "tools_url": [
            "https://bio.tools/GBS"
        ],
        "tools_dico": [
            {
                "name": "GBS",
                "uri": "https://bio.tools/GBS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Read binning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Binning shotgun reads"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Binning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Screening populations for copy number variation using genotyping-by-sequencing | Detection of deletions and duplications from GBS data | delgbs is an R package which provides tools for detecting copy number variation from genotyping-by-sequencing (GBS) data. delgbs bases its CNV calls on the number of reads per sample in discrete bins (e.g. 1-kb bins) located along a reference genome",
                "homepage": "http://github.com/malemay/delgbs"
            }
        ],
        "inputs": [
            "bs_id_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqs_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "echo true",
            "label \"movers\"",
            "cpus 4",
            "memory '4G'",
            "container 'mblanche/basespace-cli'",
            "queue 'moversQ'",
            "publishDir \"${params.outDir}/fastqs\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pairtools_merge_lane": {
        "name_process": "pairtools_merge_lane",
        "string_process": "\nprocess pairtools_merge_lane {\n    tag \"_${id}\"\n    cpus 14\n    memory '50 GB'\n    container 'mblanche/pairtools'\n    \n    input:\n    tuple id, path(sam) from pairsam_part_ch\n\t.map {id, file ->\n            def key = id.tokenize('_').get(0)\n            return tuple(key, file)\n\t}\n\t.groupTuple()\n\n    output:\n    tuple id, path(\"*.pairsam.gz\") into pairsam_ch\n\n    script:\n    if (sam.sort().size() >1) {\n\t\"\"\"\n\tpairtools merge -o ${id}.pairsam.gz --nproc ${task.cpus} ${sam}\n\t\"\"\"\n    } else {\n\t\"\"\"\n\tln -sf ${sam} ${id}_ML.pairsam.gz\n\t\"\"\"\n    }\n    \n}",
        "nb_lignes_process": 28,
        "string_script": "    if (sam.sort().size() >1) {\n\t\"\"\"\n\tpairtools merge -o ${id}.pairsam.gz --nproc ${task.cpus} ${sam}\n\t\"\"\"\n    } else {\n\t\"\"\"\n\tln -sf ${sam} ${id}_ML.pairsam.gz\n\t\"\"\"\n    }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairsam_part_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pairsam_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 14",
            "memory '50 GB'",
            "container 'mblanche/pairtools'"
        ],
        "when": "",
        "stub": ""
    },
    "chr_size": {
        "name_process": "chr_size",
        "string_process": "\nprocess chr_size {\n    tag \"_${id}\"\n    cpus 4\n    memory '24 GB'\n    container 'mblanche/pairtools'\n    \n    input:\n    tuple id, path(pairs), path(idx) from pairs_chrSize_ch\n    \n    output:\n    tuple id, path(pairs), path(idx), path(\"*.tsv\") into pairs_ch_cooler, pairs_ch_juicer\n    \n    script:\n    \"\"\"\n    pairix -H -f ${pairs} \\\n\t| awk -v OFS='\\t' '/^#chromsize/  {print \\$2,\\$3}' \\\n\t| sort -V -k1,1 \\\n\t> chr_size.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    pairix -H -f ${pairs} \\\n\t| awk -v OFS='\\t' '/^#chromsize/  {print \\$2,\\$3}' \\\n\t| sort -V -k1,1 \\\n\t> chr_size.tsv\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairs_chrSize_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pairs_ch_cooler",
            "pairs_ch_juicer"
        ],
        "nb_outputs": 2,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 4",
            "memory '24 GB'",
            "container 'mblanche/pairtools'"
        ],
        "when": "",
        "stub": ""
    },
    "balance_cooler": {
        "name_process": "balance_cooler",
        "string_process": "\nprocess balance_cooler {\n    tag \"_${id}\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/cooler'\n    \n    publishDir \"${params.outDir}/coolerFiles\",\n    \tmode: 'copy'\n    \n    input:\n    tuple id, path(cooler) from balance_cooler_ch\n\n    output:\n    tuple id, path(cooler) into zoomify_cooler_ch \n    \n    script:\n    \"\"\"\n    cooler balance --force -p ${task.cpus} ${cooler}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    cooler balance --force -p ${task.cpus} ${cooler}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "balance_cooler_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "zoomify_cooler_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/cooler'",
            "publishDir \"${params.outDir}/coolerFiles\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "arrowhead": {
        "name_process": "arrowhead",
        "string_process": " process arrowhead {\n\ttag \"_${id}\"\n\tcpus 12\n\tmemory '40 GB'\n\tcontainer \"mblanche/juicer\"\n\t\n\tpublishDir \"${params.outDir}/arrowHead\",\n\t    mode: 'copy'\n\t\n\tinput:\n\ttuple id, path(hic), val(res) from arrowhead_ch\n\t    .combine(Channel.from(resolutions))\n\t\n\toutput:\n\ttuple id, path(\"${id}_${res}kb\") into arrowhead_out_ch\n\t\n\tscript:\n\tbpRes = res.toInteger() * 1000\n\t\"\"\"\n\tmkdir -p ${id}_${res}kb && touch ${id}_${res}kb/${bpRes}_blocks.bedpe\n\tjava -Xmx24000m \\\n\t    -jar /juicer_tools.jar \\\n\t    arrowhead \\\n\t    --threads ${task.cpus} \\\n\t    --ignore-sparsity \\\n\t    -r ${bpRes} \\\n\t    -k KR \\\n\t    ${hic} \\\n\t    ${id}_${res}kb\n\t\"\"\"\n    }",
        "nb_lignes_process": 29,
        "string_script": "\tbpRes = res.toInteger() * 1000\n\t\"\"\"\n\tmkdir -p ${id}_${res}kb && touch ${id}_${res}kb/${bpRes}_blocks.bedpe\n\tjava -Xmx24000m \\\n\t    -jar /juicer_tools.jar \\\n\t    arrowhead \\\n\t    --threads ${task.cpus} \\\n\t    --ignore-sparsity \\\n\t    -r ${bpRes} \\\n\t    -k KR \\\n\t    ${hic} \\\n\t    ${id}_${res}kb\n\t\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "arrowhead_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "arrowhead_out_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 12",
            "memory '40 GB'",
            "container \"mblanche/juicer\"",
            "publishDir \"${params.outDir}/arrowHead\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "hiccups": {
        "name_process": "hiccups",
        "string_process": " process hiccups {\n\ttag \"_${id}\"\n\tlabel 'gpu'\n\taccelerator 1\n\tcpus 6\n\tmemory '30 GB'\n\tcontainer \"mblanche/hiccups-gpu\"\n\t\n\tpublishDir \"${params.outDir}/hiccups/\",\n\t    mode: 'copy'\n\t\n\tinput:\n\ttuple id, path(hic), val(res)  from hiccups_ch\n            .combine(Channel.from(resolutions.collect{it*1000}.join(',')))\n\t\n\toutput:\n\ttuple id, path(\"${id}_loops\") into hiccups_out_ch\n\t\n\tscript:\n\t\"\"\"\n\tjava -Xmx24000m \\\n\t    -jar /juicer_tools.jar \\\n\t    hiccups \\\n\t    --threads ${task.cpus} \\\n\t    --ignore-sparsity \\\n\t    -m 500 \\\n\t    -r ${res} \\\n\t    -k KR \\\n\t    ${hic} \\\n\t    ${id}_loops\n\t\"\"\"\n    }",
        "nb_lignes_process": 30,
        "string_script": "\t\"\"\"\n\tjava -Xmx24000m \\\n\t    -jar /juicer_tools.jar \\\n\t    hiccups \\\n\t    --threads ${task.cpus} \\\n\t    --ignore-sparsity \\\n\t    -m 500 \\\n\t    -r ${res} \\\n\t    -k KR \\\n\t    ${hic} \\\n\t    ${id}_loops\n\t\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "hiccups_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "hiccups_out_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "label 'gpu'",
            "accelerator 1",
            "cpus 6",
            "memory '30 GB'",
            "container \"mblanche/hiccups-gpu\"",
            "publishDir \"${params.outDir}/hiccups/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "ABcomp": {
        "name_process": "ABcomp",
        "string_process": " process ABcomp {\n\ttag \"_${id}\"\n\tcpus 1\n\tmemory '12 GB'\n\tcontainer \"mblanche/fan-c\"\n\t\n\tpublishDir \"${params.outDir}/AB_comp\",\n\t    mode: 'copy'\n\t\n\tinput:\n\ttuple id, path(cool), val(resKB) from abcomp_mcool_ch\n    \t    .combine(Channel.from(ABresolutions))\n\t\n\tpath(genome) from abcomp_genome_ch.first()\n\t\n\toutput:\n\ttuple id, path(\"*.bed\"), path(\"*.ab\") into fanc_out_ch\n\t\n\tscript:\n\tres = resKB.toInteger() * 1000\n\t\"\"\"\n\tfanc compartments \\\n\t    -f \\\n\t    -v ${id}_eigenV_${resKB}kb.bed \\\n\t    -d ${id}_AB_${resKB}kb.bed \\\n\t    -g ${genome} \\\n\t    ${cool}@${res} \\\n\t    ${id}_${resKB}kb.ab\n\t\"\"\"\n\t\n    }",
        "nb_lignes_process": 29,
        "string_script": "\tres = resKB.toInteger() * 1000\n\t\"\"\"\n\tfanc compartments \\\n\t    -f \\\n\t    -v ${id}_eigenV_${resKB}kb.bed \\\n\t    -d ${id}_AB_${resKB}kb.bed \\\n\t    -g ${genome} \\\n\t    ${cool}@${res} \\\n\t    ${id}_${resKB}kb.ab\n\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "TRES"
        ],
        "tools_url": [
            "https://bio.tools/tres"
        ],
        "tools_dico": [
            {
                "name": "TRES",
                "uri": "https://bio.tools/tres",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Toolbox for Ranking and Evaluation of SNPs (Population Genomic Data).",
                "homepage": "http://mlkd.csd.auth.gr/bio/tres/"
            }
        ],
        "inputs": [
            "abcomp_mcool_ch",
            "abcomp_genome_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "fanc_out_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 1",
            "memory '12 GB'",
            "container \"mblanche/fan-c\"",
            "publishDir \"${params.outDir}/AB_comp\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "capture_Stats": {
        "name_process": "capture_Stats",
        "string_process": "\nprocess capture_Stats {\n    label 'capStats'\n    tag \"capStats\"\n    cpus 25\n    memory '48 GB'\n    container 'mblanche/r-cap-stats'\n\n    publishDir \"${outDir}/captureStats\", mode: 'copy'\n\t\n    input:\n    bam_capStats_ch\n\t.multiMap { id, bam, idx ->\n\t    bam: bam\n\t    idx: idx\n\t}\n\t.set{ result }\n    \n    path(bams) from result.bam.collect()\n    path(idx) from result.idx.collect()\n    path(probeFile) from Channel.fromPath(probes)\n\n    output:\n    tuple path(\"*.pdf\"), path(\"*.csv\") into capStats_ch\n\n    script:\n    \"\"\"\n    capStats ${probeFile} ${task.cpus} ${bams}\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    capStats ${probeFile} ${task.cpus} ${bams}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "result",
            "result"
        ],
        "nb_inputs": 2,
        "outputs": [
            "capStats_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "label 'capStats'",
            "tag \"capStats\"",
            "cpus 25",
            "memory '48 GB'",
            "container 'mblanche/r-cap-stats'",
            "publishDir \"${outDir}/captureStats\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "make_mapFiles": {
        "name_process": "make_mapFiles",
        "string_process": "\nprocess make_mapFiles {\n    tag \"_${id}\"\n    cpus 1\n    memory '8 GB'\n    container 'mblanche/chicago'\n\n    publishDir \"${outDir}\",\n\tsaveAs: {filename -> filename.endsWith('.rmap') ? filename : null},\n\tmode: 'copy'\n    \n    input:\n    tuple path(baitFile), val(id), path(bam), path(idx), val(res) from Channel.fromPath(baits)\n\t.combine(bam_mapFile_ch.first())\n\t.combine(res_ch)\n    \n    output:\n    tuple val(res), path(\"*.rmap\"), path(\"*.baitmap\") into mapFiles_ch\n    \n    script:\n    \"\"\"\n    prep4Chicago ${baitFile} ${res} ${bam}\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    prep4Chicago ${baitFile} ${res} ${bam}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "res_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapFiles_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 1",
            "memory '8 GB'",
            "container 'mblanche/chicago'",
            "publishDir \"${outDir}\" , saveAs: {filename -> filename.endsWith('.rmap') ? filename : null} , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "cleanUpBam": {
        "name_process": "cleanUpBam",
        "string_process": "\nprocess cleanUpBam {\n    label 'cleanUp'\n    tag \"_${id}\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/bwa-samtools'\n\n    input:\n    tuple id, path(bam), path(idx) from bam_cleanBam_ch\n    \n    output:\n    tuple id, path(\"*-cleanedUp.bam\") into cleanBam_ch\n\n    script:\n    \"\"\"\n    samtools view -@ ${task.cpus} -Shu -F 2048 ${bam} \\\n\t| samtools sort -n -@ ${task.cpus}  -o ${id}-cleanedUp.bam -\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    samtools view -@ ${task.cpus} -Shu -F 2048 ${bam} \\\n\t| samtools sort -n -@ ${task.cpus}  -o ${id}-cleanedUp.bam -\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_cleanBam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cleanBam_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "label 'cleanUp'",
            "tag \"_${id}\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/bwa-samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "make_design": {
        "name_process": "make_design",
        "string_process": "\nprocess make_design {\n    tag \"_${id}\"\n    cpus 1\n    memory '8 GB'\n    container 'mblanche/chicago'\n    \n    input:\n    tuple val(res), path(rmap), path(baitmap) from mapFiles_ch\n\n    output:\n    tuple val(res), path(rmap), path(baitmap), path(\"${res}kDesingFiles*\") into design_ch\n        \n    script:\n    \"\"\"\n    python3 /makeDesignFiles_py3.py \\\n\t--minFragLen 75 \\\n\t--maxFragLen 30000 \\\n\t--maxLBrownEst 1000000 \\\n\t--binsize 20000 \\\n\t--rmapfile ${rmap} \\\n\t--baitmapfile ${baitmap} \\\n\t--outfilePrefix ${res}kDesingFiles\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    python3 /makeDesignFiles_py3.py \\\n\t--minFragLen 75 \\\n\t--maxFragLen 30000 \\\n\t--maxLBrownEst 1000000 \\\n\t--binsize 20000 \\\n\t--rmapfile ${rmap} \\\n\t--baitmapfile ${baitmap} \\\n\t--outfilePrefix ${res}kDesingFiles\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mapFiles_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "design_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 1",
            "memory '8 GB'",
            "container 'mblanche/chicago'"
        ],
        "when": "",
        "stub": ""
    },
    "run_Chicago": {
        "name_process": "run_Chicago",
        "string_process": "\nprocess run_Chicago {\n    tag \"_${id}\"\n    cpus 1\n    memory '182 GB'\n    container 'mblanche/chicago'\n\n    publishDir \"${outDir}/${id}_${res}\",\n\tmode: 'copy'\n    \n    input:\n    tuple id, path(bam), val(res), path(rmap), path (baitmap), path(designFiles) from cleanBam_ch\n\t.combine(design_ch)\n\n    output:\n    tuple id, path(\"${id}_${res}_chinput\"), path(\"${id}_${res}bp\") into chicago_ch\n\n    script:\n    \"\"\"\n    bam2chicago.sh ${bam} ${baitmap} ${rmap} ${id}_${res}_chinput\n    \n    runChicago \\\n\t--design-dir . \\\n\t--cutoff 5 \\\n\t--export-format interBed,washU_text,seqMonk,washU_track \\\n\t${id}_${res}_chinput/${id}_${res}_chinput.chinput \\\n\t${id}_${res}bp\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    bam2chicago.sh ${bam} ${baitmap} ${rmap} ${id}_${res}_chinput\n    \n    runChicago \\\n\t--design-dir . \\\n\t--cutoff 5 \\\n\t--export-format interBed,washU_text,seqMonk,washU_track \\\n\t${id}_${res}_chinput/${id}_${res}_chinput.chinput \\\n\t${id}_${res}bp\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cleanBam_ch",
            "design_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "chicago_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 1",
            "memory '182 GB'",
            "container 'mblanche/chicago'",
            "publishDir \"${outDir}/${id}_${res}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "copy_mapping": {
        "name_process": "copy_mapping",
        "string_process": " process copy_mapping {\n\tcpus 1\n\tmemory \"2 GB\"\n\tcontainer 'mblanche/basespace-cli'\n\t\n\tpublishDir \"${params.outDir}\",\n\t    mode: 'copy'\n\t\n\tinput:\n\tval mapping from keyMapping_ch\n\t    .map { l = [it[0],it[1].toString(),it[2].toString()]\n\t\t  l.join(\",\")\n\t    }\n\t    .flatten()\n\t    .collect()\n\n\toutput:\n\tpath (\"*.csv\")  into outMapping\n\n\tscript:\n\t\"\"\"\n\techo \"id,R1_fastq,R2_fastq\" > keyMapping.csv\n\tfor l in ${mapping}; do\n\techo \\${l::-1} >> keyMapping.csv\n\tdone\n\t\"\"\"\n    }",
        "nb_lignes_process": 25,
        "string_script": "\t\"\"\"\n\techo \"id,R1_fastq,R2_fastq\" > keyMapping.csv\n\tfor l in ${mapping}; do\n\techo \\${l::-1} >> keyMapping.csv\n\tdone\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "keyMapping_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "outMapping"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "cpus 1",
            "memory \"2 GB\"",
            "container 'mblanche/basespace-cli'",
            "publishDir \"${params.outDir}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "copy_manifest": {
        "name_process": "copy_manifest",
        "string_process": " process copy_manifest {\n\tcpus 1\n\tmemory \"2 GB\"\n\tcontainer 'mblanche/basespace-cli'\n\t\n\tpublishDir \"${params.outDir}\",\n\t    mode: 'copy'\n\t\n\tinput:\n\tpath manifest from Channel.fromPath(params.genewizMap)\n\t\n\toutput:\n\tpath manifest into outManifest\n\t\n\tscript:\n\t\"\"\"\n\tcat ${manifest}\n\t\"\"\"\n    }",
        "nb_lignes_process": 17,
        "string_script": "\t\"\"\"\n\tcat ${manifest}\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "outManifest"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "cpus 1",
            "memory \"2 GB\"",
            "container 'mblanche/basespace-cli'",
            "publishDir \"${params.outDir}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "get_bs_dataset": {
        "name_process": "get_bs_dataset",
        "string_process": "\nprocess get_bs_dataset {\n    echo true\n    label 'movers'\n    cpus 4\n    memory '2G'\n    container 'mblanche/basespace-cli'\n    \n    publishDir \"${HOME}/ebs/ref_push/${params.expDir}/${params.expName}/fastqs\",\n\tmode: 'copy'\n    \n    input:\n    tuple bs, id, filePath from bs_id_ch\n\t.splitCsv(header: true)\n\t.map {row -> tuple(row.biosample,row.Id,row.FilePath) }\n\n    output:\t\t\t\n    path \"*.fastq.gz\" into fastq_ch\n    \n    script:\n    \"\"\"\n    bs file download -i ${id} -o .\n    \n    new_fq=\\$(echo ${filePath}| perl -pe 's/.+?(_.+)/${bs}\\$1/')\n\n    if [[ ${filePath} != \\$new_fq ]]\n    then\n    mv ${filePath} \\$new_fq\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    bs file download -i ${id} -o .\n    \n    new_fq=\\$(echo ${filePath}| perl -pe 's/.+?(_.+)/${bs}\\$1/')\n\n    if [[ ${filePath} != \\$new_fq ]]\n    then\n    mv ${filePath} \\$new_fq\n    fi\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "GBS"
        ],
        "tools_url": [
            "https://bio.tools/GBS"
        ],
        "tools_dico": [
            {
                "name": "GBS",
                "uri": "https://bio.tools/GBS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Read binning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Binning shotgun reads"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Binning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Screening populations for copy number variation using genotyping-by-sequencing | Detection of deletions and duplications from GBS data | delgbs is an R package which provides tools for detecting copy number variation from genotyping-by-sequencing (GBS) data. delgbs bases its CNV calls on the number of reads per sample in discrete bins (e.g. 1-kb bins) located along a reference genome",
                "homepage": "http://github.com/malemay/delgbs"
            }
        ],
        "inputs": [
            "bs_id_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastq_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "echo true",
            "label 'movers'",
            "cpus 4",
            "memory '2G'",
            "container 'mblanche/basespace-cli'",
            "publishDir \"${HOME}/ebs/ref_push/${params.expDir}/${params.expName}/fastqs\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "hint_pre": {
        "name_process": "hint_pre",
        "string_process": "\nprocess hint_pre {\n    tag \"_${id}\"\n    cpus 48\n    memory '48 GB'\n    container 'suwangbio/hint'\n    \n    input:\n    tuple val(id), file(R1s), file(R2s) from fastqs_ch\n    \t.mix(fastqDir_ch)\n\t.mix(genewiz_ch)\n\n    path index from bwa_index.first()\n    \n    output:\n    tuple id, path(\"*.bam\"), path(\"*.tsv\") into  pairtools_parse_ch\n    \n    script:\n    \"\"\"\n\n    hint pre -d <(zcat ${R1s|head -n 400000}),<(zcat ${R2s|head -n 400000}) \\\n\t-i ${index}/${params.genome} \\\n\t--refdir /path/to/refData/hg19 \\\n\t-g hg19 \\\n\t--informat fastq \\\n\t--outformat cooler \\\n\t-n test \\\n\t-o /path/to/outputdir \\\n\t--pairtoolspath /path/to/pairtools \\\n\t--samtoolspath /path/to/samtools \\\n\t--coolerpath /path/to/cooler\\\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n\n    hint pre -d <(zcat ${R1s|head -n 400000}),<(zcat ${R2s|head -n 400000}) \\\n\t-i ${index}/${params.genome} \\\n\t--refdir /path/to/refData/hg19 \\\n\t-g hg19 \\\n\t--informat fastq \\\n\t--outformat cooler \\\n\t-n test \\\n\t-o /path/to/outputdir \\\n\t--pairtoolspath /path/to/pairtools \\\n\t--samtoolspath /path/to/samtools \\\n\t--coolerpath /path/to/cooler\\\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "HINT"
        ],
        "tools_url": [
            "https://bio.tools/hint"
        ],
        "tools_dico": [
            {
                "name": "HINT",
                "uri": "https://bio.tools/hint",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0204",
                            "term": "Gene regulation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3173",
                            "term": "Epigenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0415",
                                    "term": "Nucleic acid feature detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3222",
                                    "term": "Peak calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0415",
                                    "term": "Sequence feature detection (nucleic acid)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3222",
                                    "term": "Protein binding peak detection"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "HMM-based Identification of TF Footprints",
                "homepage": "http://hint.yulab.org/"
            }
        ],
        "inputs": [
            "fastqs_ch",
            "fastqDir_ch",
            "genewiz_ch",
            "bwa_index"
        ],
        "nb_inputs": 4,
        "outputs": [
            "pairtools_parse_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 48",
            "memory '48 GB'",
            "container 'suwangbio/hint'"
        ],
        "when": "",
        "stub": ""
    },
    "NGmerge": {
        "name_process": "NGmerge",
        "string_process": "\nprocess NGmerge {\n    tag \"_${id}\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/ngmerge'\n    \n    input:\n    tuple id, val(rep), path(R1), path(R2)  from fq_ch\n\n    output:\n    tuple id, val(rep), val(prefix), path(\"*merged_1.fastq.gz\"), path(\"*merged_2.fastq.gz\") into fastqs_ch\n    \n    script:\n    prefix = R1.name.toString().replaceFirst(/.fastq.+/,\"\")\n    \"\"\"\n    NGmerge -a -1 ${R1} -2 ${R2} -o ${prefix}_merged -v -n ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    prefix = R1.name.toString().replaceFirst(/.fastq.+/,\"\")\n    \"\"\"\n    NGmerge -a -1 ${R1} -2 ${R2} -o ${prefix}_merged -v -n ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fq_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqs_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/ngmerge'"
        ],
        "when": "",
        "stub": ""
    },
    "bam_merge_lane": {
        "name_process": "bam_merge_lane",
        "string_process": "\nprocess bam_merge_lane {\n    tag \"_${id}\"\n    cpus 14\n    memory '50 GB'\n    container 'mblanche/bwa-samtools'\n    \n    input:\n    tuple id, path(bam) from bam_lane_ch\n\t.groupTuple()\n    \n    output:\n    tuple id, path(\"*_ML.bam\") into bam_ML_ch, bam_sort4bw_ch\n\n    script:\n    if (bam.sort().size() >1) {\n\t\"\"\"\n\tsamtools merge -@ ${task.cpus} ${id}_ML.bam ${bam}\n\t\"\"\"\n    } else {\n\t\"\"\"\n\tln -sf ${bam} ${id}_ML.bam\n\t\"\"\"\n    }\n    \n}",
        "nb_lignes_process": 24,
        "string_script": "    if (bam.sort().size() >1) {\n\t\"\"\"\n\tsamtools merge -@ ${task.cpus} ${id}_ML.bam ${bam}\n\t\"\"\"\n    } else {\n\t\"\"\"\n\tln -sf ${bam} ${id}_ML.bam\n\t\"\"\"\n    }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_lane_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_ML_ch",
            "bam_sort4bw_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 14",
            "memory '50 GB'",
            "container 'mblanche/bwa-samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "bam_sort_4bw": {
        "name_process": "bam_sort_4bw",
        "string_process": "\nprocess bam_sort_4bw {\n    tag \"bam_sort_${id}\"\n    cpus 48\n    memory '150 GB'\n    container 'mblanche/bwa-samtools'\n    \n    publishDir \"${outDir}/bam\",\n\tmode: 'copy',\n\tpattern: \"${id}.bam\"\n        \n    input:\n    tuple id, path(bam) from bam_sort4bw_ch\n    \n    output:\n    tuple groupID, path(\"${id}.bam\"),path(\"*.bai\") into bam_bigwig_ch\n\n    script:\n    groupID = id.replaceFirst(/-rep.+/,\"\")\n    \"\"\"\n    samtools sort -m 2G \\\n\t-@ ${task.cpus} \\\n\t-o ${id}.bam \\\n\t${bam} \n\n    samtools index -@ ${task.cpus} ${id}.bam\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    groupID = id.replaceFirst(/-rep.+/,\"\")\n    \"\"\"\n    samtools sort -m 2G \\\n\t-@ ${task.cpus} \\\n\t-o ${id}.bam \\\n\t${bam} \n\n    samtools index -@ ${task.cpus} ${id}.bam\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_sort4bw_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_bigwig_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"bam_sort_${id}\"",
            "cpus 48",
            "memory '150 GB'",
            "container 'mblanche/bwa-samtools'",
            "publishDir \"${outDir}/bam\" , mode: 'copy' , pattern: \"${id}.bam\""
        ],
        "when": "",
        "stub": ""
    },
    "peak_calling": {
        "name_process": "peak_calling",
        "string_process": "\nprocess peak_calling {\n    echo true\n    tag \"_${id}\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/ngmerge'\n\n    publishDir \"${outDir}/mergedFQ\",\n\tmode: 'copy'\n    \n    input:\n    tuple id, path(bam) from bam_final_ch.groupTuple()\n\n    output:\n    tuple id, path(\"*.bed\") into peaks_ch\n    \n    script:\n    \"\"\"\n    Genrich  -t \\$(echo ${bam}|tr ' ' ,)  -o ${id}_peaks.bed  -j  -y  -r  -e chrM  -v\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    Genrich  -t \\$(echo ${bam}|tr ' ' ,)  -o ${id}_peaks.bed  -j  -y  -r  -e chrM  -v\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_final_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "peaks_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "echo true",
            "tag \"_${id}\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/ngmerge'",
            "publishDir \"${outDir}/mergedFQ\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "deeptools_bw": {
        "name_process": "deeptools_bw",
        "string_process": "\nprocess deeptools_bw {\n    tag \"_${id}\"\n    echo true\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/deeptools'\n    \n    publishDir \"${HOME}/ebs/ref_push/${params.expDir}/${params.expName}/bigwigs\",\n    \tmode: 'copy'\n    \n    input:\n    path bam from bam_bw_ch\n    path idx from idx_bw_ch\n\n    output:\n    path \"*.bw\" into bigwig_ch\n    \n    when:\n    !params.noCoverage && !params.noPairTools\n    \n    script:\n    id = bam.name.toString().replaceFirst(/.bam/,'')\n    \"\"\"\n    bamCoverage -p ${task.cpus} -bs 1 -b ${bam} -o ${id}.bw\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    id = bam.name.toString().replaceFirst(/.bam/,'')\n    \"\"\"\n    bamCoverage -p ${task.cpus} -bs 1 -b ${bam} -o ${id}.bw\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MID"
        ],
        "tools_url": [
            "https://bio.tools/mid"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            }
        ],
        "inputs": [
            "bam_bw_ch",
            "idx_bw_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bigwig_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "echo true",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/deeptools'",
            "publishDir \"${HOME}/ebs/ref_push/${params.expDir}/${params.expName}/bigwigs\" , mode: 'copy'"
        ],
        "when": "!params.noCoverage && !params.noPairTools",
        "stub": ""
    },
    "cp_fq": {
        "name_process": "cp_fq",
        "string_process": "\tprocess cp_fq {\n\t    cpus 16\n\t    memory \"4 GB\"\n\t    container 'mblanche/basespace-cli'\n\t    \n\t    publishDir \"${params.outDir}/fastqs\",\n\t\tmode: 'copy'\n\t    \n\t    input:\n\t    tuple id, path(R1s), path(R2s) from genewiz_ch2\n\t    \n\t    output:\n\t    tuple id, path(R1s), path(R2s) into outFqCp\n\t    \n\t    script:\n\t    \"\"\"\n\t    echo \"copy ${R1s} and ${R2s}\"\n\t    \"\"\"\n\t}",
        "nb_lignes_process": 17,
        "string_script": "\t    \"\"\"\n\t    echo \"copy ${R1s} and ${R2s}\"\n\t    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genewiz_ch2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "outFqCp"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "cpus 16",
            "memory \"4 GB\"",
            "container 'mblanche/basespace-cli'",
            "publishDir \"${params.outDir}/fastqs\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "index_bam": {
        "name_process": "index_bam",
        "string_process": "\nprocess index_bam {\n    label 'index'\n    tag \"_${id}\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/bwa-samtools'\n\n    input:\n    path(bam) from bam_ch\n    \n    output:\n    tuple id, path(bam), path(\"*.bai\") into bam_capStats_ch, bam_cleanBam_ch, bam_mapFile_ch\n\n    script:\n    id = bam.name.toString().take(bam.name.toString().lastIndexOf('.'))\n    \"\"\"\n    samtools index -@${task.cpus} ${bam}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    id = bam.name.toString().take(bam.name.toString().lastIndexOf('.'))\n    \"\"\"\n    samtools index -@${task.cpus} ${bam}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MID",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/mid",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_capStats_ch",
            "bam_cleanBam_ch",
            "bam_mapFile_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "label 'index'",
            "tag \"_${id}\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/bwa-samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "merge_lane": {
        "name_process": "merge_lane",
        "string_process": "\nprocess merge_lane {\n    echo true\n    tag \"_${id}\"\n    cpus 14\n    memory '50 GB'\n    container 'mblanche/pairtools'\n    \n    input:\n    tuple id, path(sam) from bam_part_ch\n\t.map {id, file ->\n            def key = id.tokenize('_').get(0)\n            return tuple(key, file)\n\t}\n\t.groupTuple()\n\n    output:\n    tuple id, path(\"*.bam\"), path(\"*.bai\") into bam_ch\n\n    script:\n    if (sam.sort().size() >1) {\n\t\"\"\"\n\tsamtools merge -@ ${task.cpus} - ${sam} \\\n\t    |samtools sort -@ ${task.cpus} -o ${id}_MB.bam \\\n\t    && samtools index -@ ${task.cpus} ${id}_MB.bam\n\t\"\"\"\n    } else {\n\t\"\"\"\n\tln -s ${sam} ${id}_MB.bam\n\tsamtools index -@ ${task.cpus} ${id}_MB.bam\n\t\"\"\"\n    }\n    \n}",
        "nb_lignes_process": 32,
        "string_script": "    if (sam.sort().size() >1) {\n\t\"\"\"\n\tsamtools merge -@ ${task.cpus} - ${sam} \\\n\t    |samtools sort -@ ${task.cpus} -o ${id}_MB.bam \\\n\t    && samtools index -@ ${task.cpus} ${id}_MB.bam\n\t\"\"\"\n    } else {\n\t\"\"\"\n\tln -s ${sam} ${id}_MB.bam\n\tsamtools index -@ ${task.cpus} ${id}_MB.bam\n\t\"\"\"\n    }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_part_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "echo true",
            "tag \"_${id}\"",
            "cpus 14",
            "memory '50 GB'",
            "container 'mblanche/pairtools'"
        ],
        "when": "",
        "stub": ""
    },
    "preSeq": {
        "name_process": "preSeq",
        "string_process": "\nprocess preSeq {\n    tag \"${id}\"\n    cpus 48\n    memory '150 GB'\n    container 'mblanche/preseq'\n    maxRetries 4\n\n    publishDir \"${HOME}/ebs/ref_push/${params.expDir}/${params.expName}\",\n\tmode: 'copy'\n    \n    input:\n    tuple id, path(bam), path(idx) from bam_ch\n    \n    output:\n    tuple id, path(\"${id}_cmplx_stat\") into preseq_ch\n    \n    script:\n    if (task.attempt == 3){\n\t\"\"\"\n\ttouch \"${id}_cmplx_stat\"\n\t\"\"\"\n    } else {\n\t\"\"\"\n\tpreseq lc_extrap -B -P -e 2.1e9 -s 1e8 -o ${id}_cmplx_stat ${bam} \n\t\"\"\"\n    }\n}",
        "nb_lignes_process": 26,
        "string_script": "    if (task.attempt == 3){\n\t\"\"\"\n\ttouch \"${id}_cmplx_stat\"\n\t\"\"\"\n    } else {\n\t\"\"\"\n\tpreseq lc_extrap -B -P -e 2.1e9 -s 1e8 -o ${id}_cmplx_stat ${bam} \n\t\"\"\"\n    }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "preseq"
        ],
        "tools_url": [
            "https://bio.tools/preseq"
        ],
        "tools_dico": [
            {
                "name": "preseq",
                "uri": "https://bio.tools/preseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package is aimed at predicting and number of distinct reads and how many will be expected from additional sequencing using an initial sequencing experiment. The estimates can then be used to examine the utility of further sequencing, optimize the sequencing depth, or to screen multiple libraries to avoid low complexity samples.",
                "homepage": "http://smithlabresearch.org/software/preseq/"
            }
        ],
        "inputs": [
            "bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "preseq_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"${id}\"",
            "cpus 48",
            "memory '150 GB'",
            "container 'mblanche/preseq'",
            "maxRetries 4",
            "publishDir \"${HOME}/ebs/ref_push/${params.expDir}/${params.expName}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "merge": {
        "name_process": "merge",
        "string_process": "\nprocess merge {\n    tag \"${id}\"\n    cpus 1\n    memory \"2 GB\"\n\n    container 'ubuntu:20.04'\n\n    publishDir \"${HOME}/ebs/ref_push/${params.expDir}/${params.expName}\",\n\tmode: 'copy'\n    \n    input:\n    tuple id, path(cmplx) from  preseq_ch.collect()\n\n    output:\n    path(\"*.csv\") into res\n    \n    script:\n    \"\"\"\n    echo \"Library,Complexity_@400M\" > complexity.csv\n    for f in ${cmplx};do\n    echo \\${f%_cmplx_stat},\\$(grep '^400000000.0' \\$f|cut -d \\$'\\t' -f2) >> complexity.csv\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    echo \"Library,Complexity_@400M\" > complexity.csv\n    for f in ${cmplx};do\n    echo \\${f%_cmplx_stat},\\$(grep '^400000000.0' \\$f|cut -d \\$'\\t' -f2) >> complexity.csv\n    done\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "preseq_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "res"
        ],
        "nb_outputs": 1,
        "name_workflow": "mblanche__nextflow",
        "directive": [
            "tag \"${id}\"",
            "cpus 1",
            "memory \"2 GB\"",
            "container 'ubuntu:20.04'",
            "publishDir \"${HOME}/ebs/ref_push/${params.expDir}/${params.expName}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
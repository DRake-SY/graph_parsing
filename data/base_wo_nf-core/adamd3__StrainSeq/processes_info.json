{
    "SUBSET_GENES": {
        "name_process": "SUBSET_GENES",
        "string_process": "process SUBSET_GENES {\n    tag \"$meta_merged\"\n    label 'process_medium'\n    publishDir \"${params.outdir}/gene_counts\", mode: 'copy'\n\n    input:\n    path gpa_file\n    path meta_merged\n    val perc\n\n    output:\n    path 'gene_set_ST.tsv', emit: gene_subset\n\n    script:\n    \"\"\"\n    subset_genes.py \\\n        --gene_presence_absence=$gpa_file \\\n        --metadata_merged=$meta_merged \\\n        --perc=$perc \\\n        --rm_split=True --ref_only=False \\\n        --outf=gene_set_ST.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    subset_genes.py \\\n        --gene_presence_absence=$gpa_file \\\n        --metadata_merged=$meta_merged \\\n        --perc=$perc \\\n        --rm_split=True --ref_only=False \\\n        --outf=gene_set_ST.tsv\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gpa_file",
            "meta_merged",
            "perc"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "adamd3__StrainSeq",
        "directive": [
            "tag \"$meta_merged\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/gene_counts\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "LENGTH_SCALE_COUNTS": {
        "name_process": "LENGTH_SCALE_COUNTS",
        "string_process": "\nprocess LENGTH_SCALE_COUNTS {\n    tag \"$merged_lens\"\n    label 'process_medium'\n    publishDir \"${params.outdir}/gene_counts\", mode: 'copy'\n\n    input:\n    tuple path(merged_counts), path(merged_lens)\n    path gene_subset\n\n    output:\n    path 'raw_counts.tsv', emit: scaled_counts\n\n    script:\n    \"\"\"\n    length_scale_counts.R \\\n        -c $merged_counts \\\n        -l $merged_lens \\\n        -g $gene_subset \\\n        -i TRUE -p TRUE \\\n        -o raw_counts.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    length_scale_counts.R \\\n        -c $merged_counts \\\n        -l $merged_lens \\\n        -g $gene_subset \\\n        -i TRUE -p TRUE \\\n        -o raw_counts.tsv\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "merged_counts",
            "merged_lens",
            "gene_subset"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "adamd3__StrainSeq",
        "directive": [
            "tag \"$merged_lens\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/gene_counts\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "DESEQ_NORMALISE_COUNTS": {
        "name_process": "DESEQ_NORMALISE_COUNTS",
        "string_process": "\nprocess DESEQ_NORMALISE_COUNTS {\n    tag \"$merged_counts\"\n    label 'process_medium'\n    publishDir \"${params.outdir}/gene_counts\", mode: 'copy'\n\n    input:\n    tuple path(merged_counts), path(merged_lens)\n    path gene_subset\n\n    output:\n    path 'norm_counts.tsv', emit: norm_counts\n    path 'rpkm_counts.tsv', emit: rpkm_counts\n\n    script:\n    \"\"\"\n    DESeq2_normalise_counts.R \\\n        -c $merged_counts \\\n        -l $merged_lens \\\n        -g $gene_subset \\\n        -p TRUE -t FALSE \\\n        -o ./\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    DESeq2_normalise_counts.R \\\n        -c $merged_counts \\\n        -l $merged_lens \\\n        -g $gene_subset \\\n        -p TRUE -t FALSE \\\n        -o ./\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "merged_counts",
            "merged_lens",
            "gene_subset"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "adamd3__StrainSeq",
        "directive": [
            "tag \"$merged_counts\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/gene_counts\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "TMM_NORMALISE_COUNTS": {
        "name_process": "TMM_NORMALISE_COUNTS",
        "string_process": "\nprocess TMM_NORMALISE_COUNTS {\n    tag \"$merged_counts\"\n    label 'process_medium'\n    publishDir \"${params.outdir}/gene_counts\", mode: 'copy'\n\n    input:\n    tuple path(merged_counts), path(merged_lens)\n    path gene_subset\n\n    output:\n    path 'norm_counts.tsv', emit: norm_counts\n    path 'rpkm_counts.tsv', emit: rpkm_counts\n\n    script:\n    \"\"\"\n    TMM_normalise_counts.R \\\n        -c $merged_counts \\\n        -l $merged_lens \\\n        -g $gene_subset \\\n        -p TRUE -t FALSE \\\n        -o ./\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    TMM_normalise_counts.R \\\n        -c $merged_counts \\\n        -l $merged_lens \\\n        -g $gene_subset \\\n        -p TRUE -t FALSE \\\n        -o ./\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "merged_counts",
            "merged_lens",
            "gene_subset"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "adamd3__StrainSeq",
        "directive": [
            "tag \"$merged_counts\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/gene_counts\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_METADATA": {
        "name_process": "MERGE_METADATA",
        "string_process": "process MERGE_METADATA {\n    tag \"$metadata\"\n    publishDir \"${params.outdir}/pipeline_info\", mode: 'copy'\n\n    input:\n    path metadata\n    path id_mappings\n\n    output:\n    path 'metadata_merged.tsv', emit: meta_merged\n\n    script:\n    \"\"\"\n    merge_metadata.py $metadata $id_mappings ${params.data_dir} metadata_merged.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    merge_metadata.py $metadata $id_mappings ${params.data_dir} metadata_merged.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "metadata",
            "id_mappings"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "adamd3__StrainSeq",
        "directive": [
            "tag \"$metadata\"",
            "publishDir \"${params.outdir}/pipeline_info\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "UMAP_SAMPLES": {
        "name_process": "UMAP_SAMPLES",
        "string_process": "process UMAP_SAMPLES {\n    tag \"$norm_counts\"\n    label 'process_medium'\n    publishDir \"${params.outdir}/umap_samples\", mode: 'copy'\n\n    input:\n    path norm_counts\n    path meta_merged\n    val group\n\n    output:\n    path '*.{rds,png}', emit: umap_out\n\n    script:\n    \"\"\"\n    umap.R -n $norm_counts -m $meta_merged -g $group -o ./\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    umap.R -n $norm_counts -m $meta_merged -g $group -o ./\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "norm_counts",
            "meta_merged",
            "group"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "adamd3__StrainSeq",
        "directive": [
            "tag \"$norm_counts\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/umap_samples\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "MAKE_CLONE_FASTA": {
        "name_process": "MAKE_CLONE_FASTA",
        "string_process": "process MAKE_CLONE_FASTA {\n     tag \"$name\"\n     maxForks 20                                                                                \n     publishDir \"${params.outdir}/clone_fasta\", mode: 'copy'\n\n     input:\n     path gpa\n     tuple val(name), path(genes)\n\n     output:\n     tuple val(name), path('*.fna'), emit: clone_fasta\n\n     script:\n     \"\"\"\n     make_single_clone_fasta.py $genes $gpa $name\n     \"\"\"\n }",
        "nb_lignes_process": 15,
        "string_script": "     \"\"\"\n     make_single_clone_fasta.py $genes $gpa $name\n     \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gpa",
            "name",
            "genes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "adamd3__StrainSeq",
        "directive": [
            "tag \"$name\"",
            "maxForks 20",
            "publishDir \"${params.outdir}/clone_fasta\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "TRIMGALORE": {
        "name_process": "TRIMGALORE",
        "string_process": "process TRIMGALORE {\n    tag \"$name\"\n    label 'process_high'\n    publishDir \"${params.outdir}/trim_galore\", mode: 'copy',\n        saveAs: { filename ->\n                      if (filename.endsWith('.html')) \"fastqc/$filename\"\n                      else if (filename.endsWith('.zip')) \"fastqc/zips/$filename\"\n                      else if (filename.endsWith('trimming_report.txt')) \"logs/$filename\"\n                      else params.save_trimmed ? filename : null\n                }\n\n    input:\n    tuple val(name), path(reads)\n\n    output:\n    path '*.fq.gz', emit: trimmed_reads\n    path '*.txt', emit: trimgalore_results_mqc\n    path '*.{zip,html}', emit: trimgalore_fastqc_reports_mqc\n\n    script:\n                                                                             \n                                                                                                                 \n                                                      \n                                                                          \n    def cores = 1\n    if (task.cpus) {\n        cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n    }\n\n                                                                       \n    \"\"\"\n    [ ! -f  ${name}.fastq.gz ] && ln -s $reads ${name}.fastq.gz\n    trim_galore --cores $cores --fastqc --gzip ${name}.fastq.gz\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def cores = 1\n    if (task.cpus) {\n        cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n    }\n\n                                                                       \n    \"\"\"\n    [ ! -f  ${name}.fastq.gz ] && ln -s $reads ${name}.fastq.gz\n    trim_galore --cores $cores --fastqc --gzip ${name}.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "CoreSlicer"
        ],
        "tools_url": [
            "https://bio.tools/CoreSlicer"
        ],
        "tools_dico": [
            {
                "name": "CoreSlicer",
                "uri": "https://bio.tools/CoreSlicer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "CT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Computed tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "TDM"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables extraction of morphomic markers from CT images by non-technically skilled clinicians.",
                "homepage": "https://coreslicer.com/"
            }
        ],
        "inputs": [
            "name",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "adamd3__StrainSeq",
        "directive": [
            "tag \"$name\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}/trim_galore\", mode: 'copy' , saveAs: { filename -> if (filename.endsWith('.html')) \"fastqc/$filename\" else if (filename.endsWith('.zip')) \"fastqc/zips/$filename\" else if (filename.endsWith('trimming_report.txt')) \"logs/$filename\" else params.save_trimmed ? filename : null }"
        ],
        "when": "",
        "stub": ""
    },
    "KALLISTO_QUANT": {
        "name_process": "KALLISTO_QUANT",
        "string_process": "process KALLISTO_QUANT {\n    tag \"$name\"\n    label 'process_high'\n    publishDir \"${params.outdir}/kallisto_quant\", mode: 'copy'\n\n    input:\n    path gpa\n    tuple val(name), path(clone_fasta)\n    path trimmed_reads\n\n    output:\n    path \"kallisto_${name}\", emit: kallisto_out_dirs\n\n    script:\n    \"\"\"\n    kallisto index -i ${name}.kidx $clone_fasta\n    kallisto quant -t $task.cpus --single -i ${name}.kidx \\\n        --fr-stranded --single -l 150 -s 20 -o kallisto_${name} ${name}_trimmed.fq.gz\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    kallisto index -i ${name}.kidx $clone_fasta\n    kallisto quant -t $task.cpus --single -i ${name}.kidx \\\n        --fr-stranded --single -l 150 -s 20 -o kallisto_${name} ${name}_trimmed.fq.gz\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "kallisto"
        ],
        "tools_url": [
            "https://bio.tools/kallisto"
        ],
        "tools_dico": [
            {
                "name": "kallisto",
                "uri": "https://bio.tools/kallisto",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profiling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Functional profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Feature expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene transcription profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A program for quantifying abundances of transcripts from RNA-Seq data, or more generally of target sequences using high-throughput sequencing reads. It is based on the novel idea of pseudoalignment for rapidly determining the compatibility of reads with targets, without the need for alignment.",
                "homepage": "https://pachterlab.github.io/kallisto/about.html"
            }
        ],
        "inputs": [
            "gpa",
            "name",
            "clone_fasta",
            "trimmed_reads"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "adamd3__StrainSeq",
        "directive": [
            "tag \"$name\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}/kallisto_quant\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "KALLISTO_QUANT_TRIMMED": {
        "name_process": "KALLISTO_QUANT_TRIMMED",
        "string_process": "\nprocess KALLISTO_QUANT_TRIMMED {\n    tag \"$name\"\n    label 'process_high'\n    publishDir \"${params.outdir}/kallisto_quant\", mode: 'copy'\n\n    input:\n    path gpa\n    tuple val(name), path(clone_fasta)\n    tuple val(name), path(reads)\n\n    output:\n    path \"kallisto_${name}\", emit: kallisto_out_dirs\n\n    script:\n    \"\"\"\n    kallisto index -i ${name}.kidx $clone_fasta\n    kallisto quant -t $task.cpus --single -i ${name}.kidx \\\n        --fr-stranded --single -l 150 -s 20 -o kallisto_${name} $reads\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    kallisto index -i ${name}.kidx $clone_fasta\n    kallisto quant -t $task.cpus --single -i ${name}.kidx \\\n        --fr-stranded --single -l 150 -s 20 -o kallisto_${name} $reads\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "kallisto"
        ],
        "tools_url": [
            "https://bio.tools/kallisto"
        ],
        "tools_dico": [
            {
                "name": "kallisto",
                "uri": "https://bio.tools/kallisto",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profiling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Functional profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Feature expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene transcription profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A program for quantifying abundances of transcripts from RNA-Seq data, or more generally of target sequences using high-throughput sequencing reads. It is based on the novel idea of pseudoalignment for rapidly determining the compatibility of reads with targets, without the need for alignment.",
                "homepage": "https://pachterlab.github.io/kallisto/about.html"
            }
        ],
        "inputs": [
            "gpa",
            "name",
            "clone_fasta",
            "name",
            "reads"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "adamd3__StrainSeq",
        "directive": [
            "tag \"$name\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}/kallisto_quant\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_COUNTS_AND_LENS": {
        "name_process": "MERGE_COUNTS_AND_LENS",
        "string_process": "\nprocess MERGE_COUNTS_AND_LENS {\n    tag \"merge_counts_and_lens\"\n    label 'process_high'\n    publishDir \"${params.outdir}/kallisto_quant\", mode: 'copy'\n\n    input:\n    path gpa_file\n    path kallisto_dirs\n    path meta_merged\n\n    output:\n    tuple path('kallisto_merged_counts.tsv'), path('kallisto_merged_lens.tsv'), emit: kallisto_merged_out\n\n    script:\n    \"\"\"\n    merge_kallisto_counts.py \\\n        --gene_presence_absence=$gpa_file \\\n        --metadata_merged=$meta_merged \\\n        --outf=kallisto_merged_counts.tsv\n\n    merge_kallisto_lens.py \\\n        --gene_presence_absence=$gpa_file \\\n        --metadata_merged=$meta_merged \\\n        --outf=kallisto_merged_lens.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    merge_kallisto_counts.py \\\n        --gene_presence_absence=$gpa_file \\\n        --metadata_merged=$meta_merged \\\n        --outf=kallisto_merged_counts.tsv\n\n    merge_kallisto_lens.py \\\n        --gene_presence_absence=$gpa_file \\\n        --metadata_merged=$meta_merged \\\n        --outf=kallisto_merged_lens.tsv\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gpa_file",
            "kallisto_dirs",
            "meta_merged"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "adamd3__StrainSeq",
        "directive": [
            "tag \"merge_counts_and_lens\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}/kallisto_quant\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "checksum_input": {
        "name_process": "checksum_input",
        "string_process": "\nprocess checksum_input {\nexecutor 'local'\nconda 'seqkit openssl coreutils'\npublishDir \"results/${task.process}\", pattern: \"input*.checksum.txt\", mode: 'link',overwrite:'true'\ninput:\n path genome\noutput:\n tuple env(FASCHK),path(\"*-*-*-*__${genome}\"), emit:checksum_and_genome\n path \"input.*.checksum.txt\"\ntag \"${genome}\"\nshell:\n'''\nf=!{genome}\nFCHK=$(cat $f | openssl md5 | cut -f 2 -d \" \" | cut -c1-4) ##First 4 characters of a file contents md5 checksum\nIDCHK=$(seqkit seq -n -i $f | sort | openssl md5 | cut -f 2 -d \" \" | cut -c1-6) ##First 6 characters of a md5 checksum of the sorted, concatenated FASTA IDs\nSEQCHK=$(seqkit seq -u $f | seqkit sort -s | seqkit seq -s | openssl md5 | cut -f 2 -d \" \" | cut -c1-6) ##First 6 characters of a md5 checksum of the sorted, concatenated, uppercase, FASTA sequence\nESEQCHK=$(seqkit sort -s $f | seqkit seq -s | openssl md5 | cut -f 2 -d \" \" | cut -c1-4) ##First 4 characters of a md5 checksum of the sorted, concatenated FASTA sequence\nFASCHK=\"${FCHK}-${IDCHK}-${SEQCHK}-${ESEQCHK}\"\nln -s $f ${FASCHK}__${f}\necho \"faschk:${FASCHK}__${f}\"\necho \"faschk:${FASCHK}__${f}\" > input.${f}.checksum.txt\n'''\n}",
        "nb_lignes_process": 22,
        "string_script": "'''\nf=!{genome}\nFCHK=$(cat $f | openssl md5 | cut -f 2 -d \" \" | cut -c1-4) ##First 4 characters of a file contents md5 checksum\nIDCHK=$(seqkit seq -n -i $f | sort | openssl md5 | cut -f 2 -d \" \" | cut -c1-6) ##First 6 characters of a md5 checksum of the sorted, concatenated FASTA IDs\nSEQCHK=$(seqkit seq -u $f | seqkit sort -s | seqkit seq -s | openssl md5 | cut -f 2 -d \" \" | cut -c1-6) ##First 6 characters of a md5 checksum of the sorted, concatenated, uppercase, FASTA sequence\nESEQCHK=$(seqkit sort -s $f | seqkit seq -s | openssl md5 | cut -f 2 -d \" \" | cut -c1-4) ##First 4 characters of a md5 checksum of the sorted, concatenated FASTA sequence\nFASCHK=\"${FCHK}-${IDCHK}-${SEQCHK}-${ESEQCHK}\"\nln -s $f ${FASCHK}__${f}\necho \"faschk:${FASCHK}__${f}\"\necho \"faschk:${FASCHK}__${f}\" > input.${f}.checksum.txt\n'''",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "photocyte__repeatModeler2_nf",
        "directive": [
            "executor 'local'",
            "conda 'seqkit openssl coreutils'",
            "publishDir \"results/${task.process}\", pattern: \"input*.checksum.txt\", mode: 'link',overwrite:'true'"
        ],
        "when": "",
        "stub": ""
    },
    "RepeatModeler_BuildDatabase": {
        "name_process": "RepeatModeler_BuildDatabase",
        "string_process": "\nprocess RepeatModeler_BuildDatabase {\n  cache 'deep'\n  publishDir \"results/${task.process}\", pattern: \"input*.checksum.txt\", mode: 'link',overwrite:'true'\n  input:\n     path fasta\n  output:\n     path \"*.translation\"\n     path \"*.n*\"\n  tag \"$fasta\"\n  shell:\n  '''\n  ##From database  \n  THENAME=$(basename !{fasta})\n  THENAME=${THENAME%.fasta}\n  THENAME=${THENAME%.fa}\n  THENAME=${THENAME%.fna}\n  ##Print the path and/or version into the stdout\n  ##conda list > conda-env.txt\n  which BuildDatabase\n  ##\n  BuildDatabase -name $THENAME -engine ncbi !{fasta}\n  sleep 10 ##Helps with rare filesystem latency issues\n  '''\n}",
        "nb_lignes_process": 23,
        "string_script": "  '''\n  ##From database  \n  THENAME=$(basename !{fasta})\n  THENAME=${THENAME%.fasta}\n  THENAME=${THENAME%.fa}\n  THENAME=${THENAME%.fna}\n  ##Print the path and/or version into the stdout\n  ##conda list > conda-env.txt\n  which BuildDatabase\n  ##\n  BuildDatabase -name $THENAME -engine ncbi !{fasta}\n  sleep 10 ##Helps with rare filesystem latency issues\n  '''",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "whichdb"
        ],
        "tools_url": [
            "https://bio.tools/whichdb"
        ],
        "tools_dico": [
            {
                "name": "whichdb",
                "uri": "https://bio.tools/whichdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data acquisition"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data collection"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Search all sequence databases for an entry and retrieve it.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/whichdb.html"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "photocyte__repeatModeler2_nf",
        "directive": [
            "cache 'deep'",
            "publishDir \"results/${task.process}\", pattern: \"input*.checksum.txt\", mode: 'link',overwrite:'true'"
        ],
        "when": "",
        "stub": ""
    },
    "RepeatModeler_modelRepeatLibrary": {
        "name_process": "RepeatModeler_modelRepeatLibrary",
        "string_process": "\nprocess RepeatModeler_modelRepeatLibrary {\n  publishDir \"results/${task.process}\", pattern: \"input*.checksum.txt\", mode: 'link',overwrite:'true'\n                                        \n                      \n                   \n                      \n  cpus params.cpuNum\n              \n  input:\n     path db_translate\n     path db_blastdb\n  tag \"$db_translate\"\n  output:\n                                                                 \n     path \"*-families.fa\", emit: repeat_library_ch\n     path \"*-families.stk\", emit: repeat_msa_ch    \n     path \"unaligned.fa\" optional true\n  shell:\n  '''\n  ##From database  \n  THENAME=$(basename !{db_translate})\n  THENAME=${THENAME%.translation}\n  ##Print the path and/or version into the stdout\n  ##conda list > conda-env.txt\n  which RepeatModeler\n  ##\n  RepeatModeler -engine ncbi -pa !{task.cpus} -LTRStruct -database \\$THENAME \n  sleep 10 ##Helps with rare filesystem latency issues\n  '''\n}",
        "nb_lignes_process": 29,
        "string_script": "  '''\n  ##From database  \n  THENAME=$(basename !{db_translate})\n  THENAME=${THENAME%.translation}\n  ##Print the path and/or version into the stdout\n  ##conda list > conda-env.txt\n  which RepeatModeler\n  ##\n  RepeatModeler -engine ncbi -pa !{task.cpus} -LTRStruct -database \\$THENAME \n  sleep 10 ##Helps with rare filesystem latency issues\n  '''",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "whichdb",
            "RepeatModeler"
        ],
        "tools_url": [
            "https://bio.tools/whichdb",
            "https://bio.tools/RepeatModeler2"
        ],
        "tools_dico": [
            {
                "name": "whichdb",
                "uri": "https://bio.tools/whichdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data acquisition"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data collection"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Search all sequence databases for an entry and retrieve it.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/whichdb.html"
            },
            {
                "name": "RepeatModeler",
                "uri": "https://bio.tools/RepeatModeler2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0157",
                            "term": "Sequence composition, complexity and repeats"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0798",
                            "term": "Mobile genetic elements"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3644",
                                    "term": "de Novo sequencing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "RepeatModeler is a de novo transposable element (TE) family identification and modeling package. At the heart of RepeatModeler are three de-novo repeat finding programs ( RECON, RepeatScout and LtrHarvest/Ltr_retriever ) which employ complementary computational methods for identifying repeat element boundaries and family relationships from sequence data.",
                "homepage": "https://github.com/Dfam-consortium/RepeatModeler"
            }
        ],
        "inputs": [
            "db_translate",
            "db_blastdb"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "photocyte__repeatModeler2_nf",
        "directive": [
            "publishDir \"results/${task.process}\", pattern: \"input*.checksum.txt\", mode: 'link',overwrite:'true'",
            "cpus params.cpuNum"
        ],
        "when": "",
        "stub": ""
    },
    "splitLibraryFasta": {
        "name_process": "splitLibraryFasta",
        "string_process": "\nprocess splitLibraryFasta {\nconda \"ucsc-fasplit\"\ninput:\n path(inputFasta)\noutput:\n path \"split/*.fa\", emit: library_fasta_split\nshell:\n'''\nmkdir split\nfaSplit about !{inputFasta} 20000 split/\nsleep 10 ##Helps with rare filesystem latency issues\n'''\n}",
        "nb_lignes_process": 12,
        "string_script": "'''\nmkdir split\nfaSplit about !{inputFasta} 20000 split/\nsleep 10 ##Helps with rare filesystem latency issues\n'''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "inputFasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "photocyte__repeatModeler2_nf",
        "directive": [
            "conda \"ucsc-fasplit\""
        ],
        "when": "",
        "stub": ""
    },
    "RepeatMasker_parallel_exec": {
        "name_process": "RepeatMasker_parallel_exec",
        "string_process": "\nprocess RepeatMasker_parallel_exec {\ncpus params.cpuNum\n                        \ninput:\n tuple path(genome), path(repeat_lib_chunk)\noutput:\n path \"*.out\"\ntag \"${repeat_lib_chunk}, ${genome.baseName}\"\nshell:\n'''\n  ##Print the path and/or version into the stdout\n  ##conda list > conda-env.txt\n  which RepeatMasker\n  RepeatMasker -v\n  ##\n  RepeatMasker -nolow -no_is -norna -pa !{task.cpus} -gff -q -lib !{repeat_lib_chunk} !{genome}\n'''\n}",
        "nb_lignes_process": 17,
        "string_script": "'''\n  ##Print the path and/or version into the stdout\n  ##conda list > conda-env.txt\n  which RepeatMasker\n  RepeatMasker -v\n  ##\n  RepeatMasker -nolow -no_is -norna -pa !{task.cpus} -gff -q -lib !{repeat_lib_chunk} !{genome}\n'''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "whichdb",
            "RepeatMasker"
        ],
        "tools_url": [
            "https://bio.tools/whichdb",
            "https://bio.tools/repeatmasker"
        ],
        "tools_dico": [
            {
                "name": "whichdb",
                "uri": "https://bio.tools/whichdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data acquisition"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data collection"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Search all sequence databases for an entry and retrieve it.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/whichdb.html"
            },
            {
                "name": "RepeatMasker",
                "uri": "https://bio.tools/repeatmasker",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0157",
                            "term": "Sequence composition, complexity and repeats"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A program that screens DNA sequences for interspersed repeats and low complexity DNA sequences. The output of the program is a detailed annotation of the repeats that are present in the query sequence as well as a modified version of the query sequence in which all the annotated repeats have been masked (default: replaced by Ns).",
                "homepage": "http://www.repeatmasker.org/"
            }
        ],
        "inputs": [
            "genome",
            "repeat_lib_chunk"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "photocyte__repeatModeler2_nf",
        "directive": [
            "cpus params.cpuNum"
        ],
        "when": "",
        "stub": ""
    },
    "RepeatMasker_simple_exec": {
        "name_process": "RepeatMasker_simple_exec",
        "string_process": "\nprocess RepeatMasker_simple_exec {\ncpus params.cpuNum\ninput:\n path genome\noutput: \n path \"*.out\", emit: rm_simple_out\ntag \"$genome\"\nscript:\n\"\"\"\nRepeatMasker -noint -pa ${task.cpus} -gff -q ${genome}\n\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\nRepeatMasker -noint -pa ${task.cpus} -gff -q ${genome}\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "RepeatMasker"
        ],
        "tools_url": [
            "https://bio.tools/repeatmasker"
        ],
        "tools_dico": [
            {
                "name": "RepeatMasker",
                "uri": "https://bio.tools/repeatmasker",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0157",
                            "term": "Sequence composition, complexity and repeats"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A program that screens DNA sequences for interspersed repeats and low complexity DNA sequences. The output of the program is a detailed annotation of the repeats that are present in the query sequence as well as a modified version of the query sequence in which all the annotated repeats have been masked (default: replaced by Ns).",
                "homepage": "http://www.repeatmasker.org/"
            }
        ],
        "inputs": [
            "genome"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "photocyte__repeatModeler2_nf",
        "directive": [
            "cpus params.cpuNum"
        ],
        "when": "",
        "stub": ""
    },
    "convert_out_to_gff": {
        "name_process": "convert_out_to_gff",
        "string_process": "\nprocess convert_out_to_gff {\nexecutor 'local'\n                        \ninput:\n path rm_out\noutput:\n path \"tmp.gff\", emit: repeats_gff_tmp_ch\ntag \"${rm_out}\"\nshell:\n'''\n#conda list > conda-env.txt\nrmOutToGFF3.pl !{rm_out} > tmp.gff\n'''\n}",
        "nb_lignes_process": 13,
        "string_script": "'''\n#conda list > conda-env.txt\nrmOutToGFF3.pl !{rm_out} > tmp.gff\n'''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rm_out"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "photocyte__repeatModeler2_nf",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "tidy_to_gff3": {
        "name_process": "tidy_to_gff3",
        "string_process": "\nprocess tidy_to_gff3 {\nexecutor 'local'\npublishDir \"results/${task.process}\", pattern: \"input*.checksum.txt\", mode: 'link',overwrite:'true'\n                    \nconda \"genometools-genometools\"\ninput:\n path genome\n path \"tmp.gff\"\noutput:\n path \"${genome}.repeats.gff3.gz\", emit: repeats_gff_ch\ntag \"${genome}.repeats.gff3.gz\"\nshell:\n'''\nset -o pipefail\nconda list > conda-env.txt\ncat tmp.gff | grep -vP \"^#\" | gt gff3 -tidy -sort -retainids | uniq | gzip > !{genome}.repeats.gff3.gz\n'''\n}",
        "nb_lignes_process": 17,
        "string_script": "'''\nset -o pipefail\nconda list > conda-env.txt\ncat tmp.gff | grep -vP \"^#\" | gt gff3 -tidy -sort -retainids | uniq | gzip > !{genome}.repeats.gff3.gz\n'''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "ANACONDA",
            "PGT"
        ],
        "tools_url": [
            "https://bio.tools/anaconda",
            "https://bio.tools/pgt"
        ],
        "tools_dico": [
            {
                "name": "ANACONDA",
                "uri": "https://bio.tools/anaconda",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3658",
                                    "term": "Statistical inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software package specially developed for the study of genes\u2019 primary structure. It uses gene sequences downloaded from public databases, as FASTA and GenBank, and it applies a set of statistical and visualization methods in different ways, to reveal information about codon context, codon usage, nucleotide repeats within open reading frames (ORFeome) and others.",
                "homepage": "http://bioinformatics.ua.pt/software/anaconda/"
            },
            {
                "name": "PGT",
                "uri": "https://bio.tools/pgt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software to find motifs using random projections.",
                "homepage": "http://www1.cse.wustl.edu/~jbuhler/pgt/"
            }
        ],
        "inputs": [
            "genome"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "photocyte__repeatModeler2_nf",
        "directive": [
            "executor 'local'",
            "publishDir \"results/${task.process}\", pattern: \"input*.checksum.txt\", mode: 'link',overwrite:'true'",
            "conda \"genometools-genometools\""
        ],
        "when": "",
        "stub": ""
    },
    "soft_mask": {
        "name_process": "soft_mask",
        "string_process": "\nprocess soft_mask {\nexecutor 'local'\npublishDir \"results/${task.process}\", pattern: \"input*.checksum.txt\", mode: 'link',overwrite:'true'\n                    \nconda \"bedtools seqkit\"\ntag \"${genome}\"\ninput:\n path genome\n path repeats_gff\noutput:\n  path \"softmasked.${genome}\"\nshell:\n\"\"\"\nset -o pipefail\nbedtools maskfasta -soft -fi <(seqkit seq -u !{genome}) -bed !{repeats_gff} -fo softmasked.!{genome}\nsleep 10 ##Helps with rare filesystem latency issues\n\"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\nset -o pipefail\nbedtools maskfasta -soft -fi <(seqkit seq -u !{genome}) -bed !{repeats_gff} -fo softmasked.!{genome}\nsleep 10 ##Helps with rare filesystem latency issues\n\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "genome",
            "repeats_gff"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "photocyte__repeatModeler2_nf",
        "directive": [
            "executor 'local'",
            "publishDir \"results/${task.process}\", pattern: \"input*.checksum.txt\", mode: 'link',overwrite:'true'",
            "conda \"bedtools seqkit\"",
            "tag \"${genome}\""
        ],
        "when": "",
        "stub": ""
    },
    "rename_stockholm_record_ids": {
        "name_process": "rename_stockholm_record_ids",
        "string_process": "\nprocess rename_stockholm_record_ids {\nexecutor 'local'\ninput:\n path msaFile\noutput:\n path \"renamed.${msaFile}\", emit: renamed_stockholm\ntag \"${msaFile}\"\nshell:\n'''\n#!/usr/bin/env python\nimport re\nimport os\nwf = open('renamed.!{msaFile}','w')\nwith open('!{msaFile}','r') as rf:\n    i=0\n    for l in rf.readlines():\n        #g = re.search('^#=GF ID\\\\s+([^\\\\s]+)',l) ##For now only the \"m\" result is used\n\t#d = re.search('#=GF[\\\\s]+DE[\\\\s]+(.+)',l) ##For now, only the \"m\" result is used\n        m = re.search('.+:[0-9]+-[0-9]+.+',l)\n        if m == None:\n             wf.write(l)\n        else:\n             prefix = str(i)+\"_\"\n             wf.write(prefix+m.group(0)+os.linesep)\n        i+=1\nwf.close()\n'''\n}",
        "nb_lignes_process": 27,
        "string_script": "'''\n#!/usr/bin/env python\nimport re\nimport os\nwf = open('renamed.!{msaFile}','w')\nwith open('!{msaFile}','r') as rf:\n    i=0\n    for l in rf.readlines():\n        #g = re.search('^#=GF ID\\\\s+([^\\\\s]+)',l) ##For now only the \"m\" result is used\n\t#d = re.search('#=GF[\\\\s]+DE[\\\\s]+(.+)',l) ##For now, only the \"m\" result is used\n        m = re.search('.+:[0-9]+-[0-9]+.+',l)\n        if m == None:\n             wf.write(l)\n        else:\n             prefix = str(i)+\"_\"\n             wf.write(prefix+m.group(0)+os.linesep)\n        i+=1\nwf.close()\n'''",
        "nb_lignes_script": 18,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "msaFile"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "photocyte__repeatModeler2_nf",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "convert_stockholm_to_fasta": {
        "name_process": "convert_stockholm_to_fasta",
        "string_process": "\nprocess convert_stockholm_to_fasta {\nexecutor 'local'\npublishDir \"results/${task.process}\", pattern: \"input*.checksum.txt\", mode: 'link',overwrite:'true'\ninput:\n path msaFile\noutput:\n path \"${msaFile}.msa.fa\"\nconda \"hmmer\"\ntag \"${msaFile}\"\nshell:\n'''   \nesl-reformat --informat stockholm -o !{msaFile}.msa.fa fasta !{msaFile}\nsleep 10 ##Helps with rare filesystem latency issues\n'''\n}",
        "nb_lignes_process": 14,
        "string_script": "'''   \nesl-reformat --informat stockholm -o !{msaFile}.msa.fa fasta !{msaFile}\nsleep 10 ##Helps with rare filesystem latency issues\n'''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "msaFile"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "photocyte__repeatModeler2_nf",
        "directive": [
            "executor 'local'",
            "publishDir \"results/${task.process}\", pattern: \"input*.checksum.txt\", mode: 'link',overwrite:'true'"
        ],
        "when": "",
        "stub": ""
    }
}
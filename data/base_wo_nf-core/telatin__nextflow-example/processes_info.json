{
    "ABRICATE": {
        "name_process": "ABRICATE",
        "string_process": "process ABRICATE {\n    tag { sample_id }\n    \n    publishDir \"$params.outdir/abricate/\", \n        mode: 'copy'\n    \n    input:\n    tuple val(sample_id), path(assembly)  \n    \n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}.tab\")\n\n    script:\n    \"\"\"\n    abricate --threads ${task.cpus}  ${assembly} > ${sample_id}.tab\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    abricate --threads ${task.cpus}  ${assembly} > ${sample_id}.tab\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "ABRicate"
        ],
        "tools_url": [
            "https://bio.tools/ABRicate"
        ],
        "tools_dico": [
            {
                "name": "ABRicate",
                "uri": "https://bio.tools/ABRicate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0916",
                                "term": "Gene report"
                            }
                        ]
                    }
                ],
                "description": "Mass screening of contigs for antimicrobial resistance or virulence genes.",
                "homepage": "https://github.com/tseemann/abricate"
            }
        ],
        "inputs": [
            "sample_id",
            "assembly"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/abricate/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "ABRICATE_SUMMARY": {
        "name_process": "ABRICATE_SUMMARY",
        "string_process": "\nprocess ABRICATE_SUMMARY {\n    tag { sample_id }\n    \n    publishDir \"$params.outdir/abricate/\", \n        mode: 'copy'\n\n    input:\n    path(\"*\")\n\n    output:\n    path(\"summary.tsv\")\n    path(\"abricate_mqc.tsv\"), emit: multiqc\n\n    script:\n    \"\"\"\n    abricate --summary *.tab > summary.tsv\n    abricateToMqc.py -i summary.tsv -o abricate_mqc.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    abricate --summary *.tab > summary.tsv\n    abricateToMqc.py -i summary.tsv -o abricate_mqc.tsv\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "ABRicate"
        ],
        "tools_url": [
            "https://bio.tools/ABRicate"
        ],
        "tools_dico": [
            {
                "name": "ABRicate",
                "uri": "https://bio.tools/ABRicate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0916",
                                "term": "Gene report"
                            }
                        ]
                    }
                ],
                "description": "Mass screening of contigs for antimicrobial resistance or virulence genes.",
                "homepage": "https://github.com/tseemann/abricate"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/abricate/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fastp": {
        "name_process": "fastp",
        "string_process": "\nprocess fastp {\n       \n                                                                 \n      \n    tag \"filter $sample_id\"\n\n    input:\n    tuple val(sample_id), path(reads) \n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}_filt_R*.fastq.gz\"), emit: reads\n    path(\"${sample_id}.fastp.json\"), emit: json\n\n \n    script:\n    \"\"\"\n    fastp -i ${reads[0]} -I ${reads[1]} \\\\\n      -o ${sample_id}_filt_R1.fastq.gz -O ${sample_id}_filt_R2.fastq.gz \\\\\n      --detect_adapter_for_pe -w ${task.cpus} -j ${sample_id}.fastp.json\n \n    \"\"\"  \n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    fastp -i ${reads[0]} -I ${reads[1]} \\\\\n      -o ${sample_id}_filt_R1.fastq.gz -O ${sample_id}_filt_R2.fastq.gz \\\\\n      --detect_adapter_for_pe -w ${task.cpus} -j ${sample_id}.fastp.json\n \n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag \"filter $sample_id\""
        ],
        "when": "",
        "stub": ""
    },
    "assembly": {
        "name_process": "assembly",
        "string_process": "\nprocess assembly {\n       \n                                                                              \n      \n    tag { sample_id }\n    \n    publishDir \"$params.outdir/assemblies/\", \n        mode: 'copy'\n    \n    input:\n    tuple val(sample_id), path(reads)  \n    \n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}.fa\")\n\n    script:\n    \"\"\"\n    shovill --R1 ${reads[0]} --R2 ${reads[1]} --outdir shovill --cpus ${task.cpus}\n    mv shovill/contigs.fa ${sample_id}.fa\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    shovill --R1 ${reads[0]} --R2 ${reads[1]} --outdir shovill --cpus ${task.cpus}\n    mv shovill/contigs.fa ${sample_id}.fa\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "shovill"
        ],
        "tools_url": [
            "https://bio.tools/shovill"
        ],
        "tools_dico": [
            {
                "name": "shovill",
                "uri": "https://bio.tools/shovill",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Shovill is a pipeline for assembly of bacterial isolate genomes from Illumina paired-end reads.  Shovill uses SPAdes at its core, but alters the steps before and after the primary assembly step to get similar results in less time. Shovill also supports other assemblers like SKESA, Velvet and Megahit, so you can take advantage of the pre- and post-processing the Shovill provides with those too.",
                "homepage": "https://github.com/tseemann/shovill"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/assemblies/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "prokka": {
        "name_process": "prokka",
        "string_process": "\nprocess prokka {\n    tag { sample_id }\n    \n    publishDir \"$params.outdir/annotation/\", \n        mode: 'copy'\n    \n    input:\n    tuple val(sample_id), path(assembly)  \n    \n    \n    output:\n    path(\"${sample_id}\")\n\n    script:\n    \"\"\"\n    prokka --cpus ${task.cpus} --fast --outdir ${sample_id} --prefix ${sample_id} ${assembly}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    prokka --cpus ${task.cpus} --fast --outdir ${sample_id} --prefix ${sample_id} ${assembly}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "sample_id",
            "assembly"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/annotation/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "abricate": {
        "name_process": "abricate",
        "string_process": "\nprocess abricate {\n    tag { sample_id }\n    \n    publishDir \"$params.outdir/abricate/\", \n        mode: 'copy'\n    \n    input:\n    tuple val(sample_id), path(assembly)  \n    \n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}.tab\")\n\n    script:\n    \"\"\"\n    abricate --threads ${task.cpus}  ${assembly} > ${sample_id}.tab\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    abricate --threads ${task.cpus}  ${assembly} > ${sample_id}.tab\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "ABRicate"
        ],
        "tools_url": [
            "https://bio.tools/ABRicate"
        ],
        "tools_dico": [
            {
                "name": "ABRicate",
                "uri": "https://bio.tools/ABRicate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0916",
                                "term": "Gene report"
                            }
                        ]
                    }
                ],
                "description": "Mass screening of contigs for antimicrobial resistance or virulence genes.",
                "homepage": "https://github.com/tseemann/abricate"
            }
        ],
        "inputs": [
            "sample_id",
            "assembly"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/abricate/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "abricate_summary": {
        "name_process": "abricate_summary",
        "string_process": "\nprocess abricate_summary {\n    tag { sample_id }\n    \n    publishDir \"$params.outdir/abricate/\", \n        mode: 'copy'\n\n    input:\n    path(\"*\")\n\n    output:\n    path(\"summary.tsv\")\n    path(\"abricate_mqc.tsv\"), emit: multiqc\n\n    script:\n    \"\"\"\n    abricate --summary *.tab > summary.tsv\n    abricateToMqc.py -i summary.tsv -o abricate_mqc.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    abricate --summary *.tab > summary.tsv\n    abricateToMqc.py -i summary.tsv -o abricate_mqc.tsv\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "ABRicate"
        ],
        "tools_url": [
            "https://bio.tools/ABRicate"
        ],
        "tools_dico": [
            {
                "name": "ABRicate",
                "uri": "https://bio.tools/ABRicate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0916",
                                "term": "Gene report"
                            }
                        ]
                    }
                ],
                "description": "Mass screening of contigs for antimicrobial resistance or virulence genes.",
                "homepage": "https://github.com/tseemann/abricate"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/abricate/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "quast": {
        "name_process": "quast",
        "string_process": "\nprocess quast  {\n    tag \"quast\"\n    \n    publishDir \"$params.outdir/\", \n        mode: 'copy'\n    \n    input:\n    path(\"*\")  \n    \n    \n    output:\n    path(\"quast\")\n\n    script:\n    \"\"\"\n    quast --threads ${task.cpus} --output-dir quast *.fa\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    quast --threads ${task.cpus} --output-dir quast *.fa\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "QUAST"
        ],
        "tools_url": [
            "https://bio.tools/quast"
        ],
        "tools_dico": [
            {
                "name": "QUAST",
                "uri": "https://bio.tools/quast",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "QUAST stands for QUality ASsessment Tool.  \nIt evaluates a quality of genome assemblies by computing various metrics and providing nice reports.",
                "homepage": "http://quast.sourceforge.net/quast"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag \"quast\"",
            "publishDir \"$params.outdir/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir params.outdir, mode:'copy'\n       \n    input:\n    path '*'                                         \n    \n    output:\n    path 'multiqc_*'\n     \n    script:\n    \"\"\"\n    multiqc . \n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    multiqc . \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "publishDir params.outdir, mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "shovill": {
        "name_process": "shovill",
        "string_process": "\nprocess shovill {\n       \n                                                                              \n      \n    tag { sample_id }\n    \n    publishDir \"$params.outdir/assemblies/\", \n        mode: 'copy'\n    \n    input:\n    tuple val(sample_id), path(reads)  \n    \n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}.fa\")\n\n    script:\n    \"\"\"\n    shovill --R1 ${reads[0]} --R2 ${reads[1]} --outdir shovill --cpus ${task.cpus}\n    mv shovill/contigs.fa ${sample_id}.fa\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    shovill --R1 ${reads[0]} --R2 ${reads[1]} --outdir shovill --cpus ${task.cpus}\n    mv shovill/contigs.fa ${sample_id}.fa\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "shovill"
        ],
        "tools_url": [
            "https://bio.tools/shovill"
        ],
        "tools_dico": [
            {
                "name": "shovill",
                "uri": "https://bio.tools/shovill",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Shovill is a pipeline for assembly of bacterial isolate genomes from Illumina paired-end reads.  Shovill uses SPAdes at its core, but alters the steps before and after the primary assembly step to get similar results in less time. Shovill also supports other assemblers like SKESA, Velvet and Megahit, so you can take advantage of the pre- and post-processing the Shovill provides with those too.",
                "homepage": "https://github.com/tseemann/shovill"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/assemblies/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "spades": {
        "name_process": "spades",
        "string_process": "\nprocess spades {\n       \n                                                                              \n      \n    tag { sample_id }\n    \n    publishDir \"$params.outdir/assemblies/\", \n        mode: 'copy'\n    \n    input:\n    tuple val(sample_id), path(reads)  \n    \n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}.fa\")\n\n    script:\n    \"\"\"\n    spades.py -1 ${reads[0]} -2 ${reads[1]} -o spades -t ${task.cpus}\n    mv spades/contigs.fasta ${sample_id}.fa\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    spades.py -1 ${reads[0]} -2 ${reads[1]} -o spades -t ${task.cpus}\n    mv spades/contigs.fasta ${sample_id}.fa\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/assemblies/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "minreads": {
        "name_process": "minreads",
        "string_process": "\nprocess minreads {\n    tag \"filter $sample_id\"\n\n    input:\n    tuple val(sample_id), path(reads) \n    val(min)\n    \n    output:\n    tuple val(sample_id), path(\"pass/${sample_id}_R*.fastq.gz\"), emit: reads optional true \n    \n    script:\n    \"\"\"\n    TOT=\\$(seqfu count ${reads[0]} ${reads[1]} | cut -f 2 )\n    mkdir -p pass\n    if [[ \\$TOT -gt ${min} ]]; then\n        mv ${reads[0]} pass/${sample_id}_R1.fastq.gz\n        mv ${reads[1]} pass/${sample_id}_R2.fastq.gz\n    fi\n    \n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    TOT=\\$(seqfu count ${reads[0]} ${reads[1]} | cut -f 2 )\n    mkdir -p pass\n    if [[ \\$TOT -gt ${min} ]]; then\n        mv ${reads[0]} pass/${sample_id}_R1.fastq.gz\n        mv ${reads[1]} pass/${sample_id}_R2.fastq.gz\n    fi\n    \n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads",
            "min"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag \"filter $sample_id\""
        ],
        "when": "",
        "stub": ""
    },
    "NUM_LINES": {
        "name_process": "NUM_LINES",
        "string_process": "\nprocess NUM_LINES {\n\n    input:\n    path(read)\n\n      \n                                                                                \n                                                    \n      \n    output:\n    path(\"*.numlines\")\n\n    script:\n                            \"\"\", \n        Triple-single-quoted strings may span multiple lines. \n        The content of the string can cross line boundaries without the need to split the string in several pieces and without concatenation or newline escape characters. \n    */\n    \"\" \n    \n                                        \n                                                 \n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "                            \"\"\", \n        Triple-single-quoted strings may span multiple lines. \n        The content of the string can cross line boundaries without the need to split the string in several pieces and without concatenation or newline escape characters. \n    */\n    \"\" \n    \n                                        \n                                                 \n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "THEME"
        ],
        "tools_url": [
            "https://bio.tools/theme"
        ],
        "tools_dico": [
            {
                "name": "THEME",
                "uri": "https://bio.tools/theme",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression profiling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differentially expressed gene identification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3223",
                                    "term": "Differential gene expression analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The tool is designed for biologists to identify Differentially Expressed Genes (DEG) from loop-design microarray experiments.",
                "homepage": "http://metadb.bmes.nthu.edu.tw/theme/home.php"
            }
        ],
        "inputs": [
            "read"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "MAX_LINES": {
        "name_process": "MAX_LINES",
        "string_process": "\nprocess MAX_LINES {\n    input:\n    path(\"*.numlines\")\n\n    output:\n    stdout\n\n    script:\n    \"\" \n                                \n                                                                  \n       \n \n                        \n          \n\n                                               \n                                             \n\n                                                            \n                                                  \n    NUM_LINES(input_ch)\n\n                                                          \n                                                            \n                              \n      \n    MAX_LINES( NUM_LINES.out.collect() ).view()\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\" \n                                \n                                                                  \n       \n \n                        \n          \n\n                                               \n                                             \n\n                                                            \n                                                  \n    NUM_LINES(input_ch)\n\n                                                          \n                                                            \n                              \n      \n    MAX_LINES( NUM_LINES.out.collect() ).view()",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "MLST": {
        "name_process": "MLST",
        "string_process": "process MLST {\n    tag { sample_id }\n    \n    publishDir \"$params.outdir/MLST/\", \n        mode: 'copy'\n    \n    input:\n    path(\"*.fa\")  \n    \n    \n    output:\n    path(\"mlst.tab\"), emit: tab\n    path(\"mlst.json\"), emit: json\n\n    script:\n    \"\"\"\n    mlst --threads ${task.cpus} --json mlst.json *.fa > mlst.tab\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    mlst --threads ${task.cpus} --json mlst.json *.fa > mlst.tab\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MLST"
        ],
        "tools_url": [
            "https://bio.tools/mlst"
        ],
        "tools_dico": [
            {
                "name": "MLST",
                "uri": "https://bio.tools/mlst",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Multi Locus Sequence Typing from an assembled genome or from a set of reads.",
                "homepage": "http://cge.cbs.dtu.dk/services/MLST/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/MLST/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "MLST_SUMMARY": {
        "name_process": "MLST_SUMMARY",
        "string_process": "\nprocess MLST_SUMMARY {\n    tag { sample_id }\n    \n    publishDir \"$params.outdir/MLST/\", \n        mode: 'copy'\n\n    input:\n    path(\"summary.tsv\")\n\n    output:\n    path(\"mlst_mqc.tsv\")\n\n    script:\n    \"\"\"    \n    mlstToMqc.py -i summary.tsv -o mlst_mqc.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"    \n    mlstToMqc.py -i summary.tsv -o mlst_mqc.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/MLST/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "FASTP": {
        "name_process": "FASTP",
        "string_process": "\nprocess FASTP {\n       \n                                                                 \n      \n    tag \"filter $sample_id\"\n\n    input:\n    tuple val(sample_id), path(reads) \n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}_filt_R*.fastq.gz\"), emit: reads\n    path(\"${sample_id}.fastp.json\"), emit: json\n\n      \n                                                                  \n                                                                  \n      \n    script:\n    \"\"\"\n    fastp -i ${reads[0]} -I ${reads[1]} \\\\\n      -o ${sample_id}_filt_R1.fastq.gz -O ${sample_id}_filt_R2.fastq.gz \\\\\n      --detect_adapter_for_pe -w ${task.cpus} -j report.json\n\n    \n    sed 's/_R1//g' report.json > ${sample_id}.fastp.json \n    \"\"\"  \n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    fastp -i ${reads[0]} -I ${reads[1]} \\\\\n      -o ${sample_id}_filt_R1.fastq.gz -O ${sample_id}_filt_R2.fastq.gz \\\\\n      --detect_adapter_for_pe -w ${task.cpus} -j report.json\n\n    \n    sed 's/_R1//g' report.json > ${sample_id}.fastp.json \n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag \"filter $sample_id\""
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "\nprocess MULTIQC {\n    publishDir params.outdir, mode:'copy'\n       \n    input:\n    path '*'  \n    \n    output:\n    path 'multiqc_*'\n     \n    script:\n    \"\"\"\n    multiqc --cl_config \"prokka_fn_snames: True\" . \n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    multiqc --cl_config \"prokka_fn_snames: True\" . \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "publishDir params.outdir, mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "QUAST": {
        "name_process": "QUAST",
        "string_process": "\nprocess QUAST  {\n    tag \"quast\"\n    \n    publishDir \"$params.outdir/\", \n        mode: 'copy'\n    \n    input:\n    path(\"*\")  \n    \n    \n    output:\n    path(\"quast\")\n\n    script:\n    \"\"\"\n    quast --threads ${task.cpus} --output-dir quast *.fa\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    quast --threads ${task.cpus} --output-dir quast *.fa\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "QUAST"
        ],
        "tools_url": [
            "https://bio.tools/quast"
        ],
        "tools_dico": [
            {
                "name": "QUAST",
                "uri": "https://bio.tools/quast",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "QUAST stands for QUality ASsessment Tool.  \nIt evaluates a quality of genome assemblies by computing various metrics and providing nice reports.",
                "homepage": "http://quast.sourceforge.net/quast"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag \"quast\"",
            "publishDir \"$params.outdir/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "SHOVILL": {
        "name_process": "SHOVILL",
        "string_process": "\nprocess SHOVILL {\n       \n                                                                              \n      \n    tag { sample_id }\n    \n    publishDir \"$params.outdir/assemblies/\", \n        mode: 'copy'\n    \n    input:\n    tuple val(sample_id), path(reads)  \n    \n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}.fa\")\n\n    script:\n    \"\"\"\n    shovill --R1 ${reads[0]} --R2 ${reads[1]} --outdir shovill --cpus ${task.cpus}\n    mv shovill/contigs.fa ${sample_id}.fa\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    shovill --R1 ${reads[0]} --R2 ${reads[1]} --outdir shovill --cpus ${task.cpus}\n    mv shovill/contigs.fa ${sample_id}.fa\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "shovill"
        ],
        "tools_url": [
            "https://bio.tools/shovill"
        ],
        "tools_dico": [
            {
                "name": "shovill",
                "uri": "https://bio.tools/shovill",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Shovill is a pipeline for assembly of bacterial isolate genomes from Illumina paired-end reads.  Shovill uses SPAdes at its core, but alters the steps before and after the primary assembly step to get similar results in less time. Shovill also supports other assemblers like SKESA, Velvet and Megahit, so you can take advantage of the pre- and post-processing the Shovill provides with those too.",
                "homepage": "https://github.com/tseemann/shovill"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/assemblies/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "UNICYCLER": {
        "name_process": "UNICYCLER",
        "string_process": "\nprocess UNICYCLER {\n \n    tag { sample_id }\n    \n    publishDir \"$params.outdir/assemblies/\", \n        mode: 'copy'\n    \n    input:\n    tuple val(sample_id), path(reads)  \n    \n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}.fa\")\n\n    script:\n    \"\"\"\n    unicycler -1 ${reads[0]} -2 ${reads[1]} -o unicycler -t ${task.cpus} --keep 0 --min_fasta_length 200\n    mv unicycler/assembly.fasta ${sample_id}.fa\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    unicycler -1 ${reads[0]} -2 ${reads[1]} -o unicycler -t ${task.cpus} --keep 0 --min_fasta_length 200\n    mv unicycler/assembly.fasta ${sample_id}.fa\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/assemblies/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "PROKKA": {
        "name_process": "PROKKA",
        "string_process": "\nprocess PROKKA {\n    tag { sample_id }\n    \n    publishDir \"$params.outdir/annotation/\", \n        mode: 'copy'\n    \n    input:\n    tuple val(sample_id), path(assembly)  \n    \n    \n    output:\n                                                                  \n    path(\"${sample_id}\")\n\n    script:\n    \"\"\"\n    prokka --cpus ${task.cpus} --fast --outdir ${sample_id} --prefix ${sample_id} ${assembly} --\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    prokka --cpus ${task.cpus} --fast --outdir ${sample_id} --prefix ${sample_id} ${assembly} --\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "sample_id",
            "assembly"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nextflow-example",
        "directive": [
            "tag { sample_id }",
            "publishDir \"$params.outdir/annotation/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
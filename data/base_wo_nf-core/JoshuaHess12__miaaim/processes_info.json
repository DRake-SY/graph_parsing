{
    "elastix": {
        "name_process": "elastix",
        "string_process": "process elastix {\n\n\t                                          \n\ttag \"hdireg-elastix\"\n\n\t                                       \n\tpublishDir \"$params.pubDir/elastix\", mode: 'copy', pattern: \"*.txt\"\n\tpublishDir \"$params.pubDir/elastix\", mode: 'copy', pattern: \"*.nii\"\n\n\t                                              \n\tpublishDir \"${params.parsDir}\", mode: 'copy', pattern: '.command.sh',\n\t\tsaveAs: {fn -> \"${tag}.sh\"}\n\tpublishDir \"${params.parsDir}\", mode: 'copy', pattern: '.command.log',\n\t\tsaveAs: {fn -> \"${tag}.log\"}\n\n\tinput:\n\ttuple( val(m_id), path(m_in), path(m_proc), val(m_ord), val(f_id), path(f_in), path(f_proc), val(f_ord), val(pars) )\n\n\toutput:\n\ttuple val(m_id), val(m_ord), file (\"*.nii\"), file (\"*.txt\"), emit: regout\n\ttuple path('.command.sh'), path('.command.log')\n\n\twhen: params.idxStart <= 2 && params.idxStop >=2\n\n\t\"\"\"\n\tpython \"/app/command_elastix.py\" --fixed \"${f_proc}\" --moving \"${m_proc}\" --out_dir . ${pars}\n\t\"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n\tpython \"/app/command_elastix.py\" --fixed \"${f_proc}\" --moving \"${m_proc}\" --out_dir . ${pars}\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "m_id",
            "m_ord",
            "f_id",
            "f_ord",
            "pars",
            "m_in",
            "m_proc",
            "f_in",
            "f_proc"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "JoshuaHess12__miaaim",
        "directive": [
            "tag \"hdireg-elastix\"",
            "publishDir \"$params.pubDir/elastix\", mode: 'copy', pattern: \"*.txt\"",
            "publishDir \"$params.pubDir/elastix\", mode: 'copy', pattern: \"*.nii\"",
            "publishDir \"${params.parsDir}\", mode: 'copy', pattern: '.command.sh' , saveAs: {fn -> \"${tag}.sh\"}",
            "publishDir \"${params.parsDir}\", mode: 'copy', pattern: '.command.log' , saveAs: {fn -> \"${tag}.log\"}"
        ],
        "when": "",
        "stub": ""
    },
    "transformix": {
        "name_process": "transformix",
        "string_process": "\nprocess transformix {\n\n\t                                              \n\ttag \"hdireg-transformix\"\n\n\tpublishDir \"$params.pubDir/transformix\", mode: 'copy', pattern: \"${m_id}\"+\"_result*\"\n\t                                              \n\tpublishDir \"${params.parsDir}\", mode: 'copy', pattern: '.command.sh',\n\t\tsaveAs: {fn -> \"${tag}.sh\"}\n\tpublishDir \"${params.parsDir}\", mode: 'copy', pattern: '.command.log',\n\t\tsaveAs: {fn -> \"${tag}.log\"}\n\n\tinput:\n\ttuple( val (m_id), val (m_ord), path(res), val (m_id_Reapeat), path(m_og), path(yaml), val(pars) )\n\n\toutput:\n\ttuple path(\"${m_og}\"), path(\"${res}\"), path (\"${m_id}\"+\"_result*\"), emit: transout\n\ttuple path('.command.sh'), path('.command.log')\n\n\twhen: params.idxStart <= 2 && params.idxStop >=2 && params.transformix\n\n\t\"\"\"\n\tpython \"/app/command_transformix.py\" --in_im \"${m_og}\" --out_dir . ${pars}\n\t\"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n\tpython \"/app/command_transformix.py\" --in_im \"${m_og}\" --out_dir . ${pars}\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "m_id",
            "m_ord",
            "m_id_Reapeat",
            "pars",
            "res",
            "m_og",
            "yaml"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "JoshuaHess12__miaaim",
        "directive": [
            "tag \"hdireg-transformix\"",
            "publishDir \"$params.pubDir/transformix\", mode: 'copy', pattern: \"${m_id}\"+\"_result*\"",
            "publishDir \"${params.parsDir}\", mode: 'copy', pattern: '.command.sh' , saveAs: {fn -> \"${tag}.sh\"}",
            "publishDir \"${params.parsDir}\", mode: 'copy', pattern: '.command.log' , saveAs: {fn -> \"${tag}.log\"}"
        ],
        "when": "",
        "stub": ""
    },
    "hdiprep": {
        "name_process": "hdiprep",
        "string_process": "process hdiprep {\n\n\ttag \"hdiprep\"\n\n\t                                  \n\tpublishDir \"$params.pubDir\", mode: 'copy',  pattern: \"*processed.nii\"\n\t                                              \n\tpublishDir \"${params.parsDir}\", mode: 'copy', pattern: '.command.sh',\n\t\tsaveAs: {fn -> \"${tag}\"+\"-${id}\"+\".sh\"}\n\tpublishDir \"${params.parsDir}\", mode: 'copy', pattern: '.command.log',\n\t\tsaveAs: {fn -> \"${tag}\"+\"-${id}\"+\".log\"}\n\n  input:\n\ttuple val (id), file (im), file (pars)\n\n  output:\n\ttuple val (id), file (\"$im\"), file (\"*processed.nii\"), emit: prepout\n\ttuple path('.command.sh'), path('.command.log')\n\n\n\twhen: params.idxStart <= 1 && params.idxStop >= 1\n\n  \"\"\"\n  python \"/app/command_hdi_prep.py\" --im \"${im}\" --pars \"${pars}\" --out_dir .\n  \"\"\"\n\n}",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n  python \"/app/command_hdi_prep.py\" --im \"${im}\" --pars \"${pars}\" --out_dir .\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "im",
            "pars"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "JoshuaHess12__miaaim",
        "directive": [
            "tag \"hdiprep\"",
            "publishDir \"$params.pubDir\", mode: 'copy', pattern: \"*processed.nii\"",
            "publishDir \"${params.parsDir}\", mode: 'copy', pattern: '.command.sh' , saveAs: {fn -> \"${tag}\"+\"-${id}\"+\".sh\"}",
            "publishDir \"${params.parsDir}\", mode: 'copy', pattern: '.command.log' , saveAs: {fn -> \"${tag}\"+\"-${id}\"+\".log\"}"
        ],
        "when": "",
        "stub": ""
    },
    "downloadPrototype": {
        "name_process": "downloadPrototype",
        "string_process": "\nprocess downloadPrototype {\n\t                                  \n    publishDir \"${params.out}/${params.proto}\", mode: 'copy'\n\n    input:\n\tval i from nm\n\n    output:\n\tpath '**' into test\n\n    shell:\n    '''\n    curl \"!{url}\" -o input.zip -J -L -k\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    curl \"!{url}\" -o input.zip -J -L -k\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [
            "nm"
        ],
        "nb_inputs": 1,
        "outputs": [
            "test"
        ],
        "nb_outputs": 1,
        "name_workflow": "JoshuaHess12__miaaim",
        "directive": [
            "publishDir \"${params.out}/${params.proto}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "unzipInput": {
        "name_process": "unzipInput",
        "string_process": "\nprocess unzipInput {\n\t                                                         \n    publishDir \"${params.out}/${params.proto}\", mode: 'copy'\n\n    input:\n\tpath i from test\n\n    output:\n\tfile '*' into out\n\n    shell:\n    '''\n    bsdtar -xf \"!{i}\" && rm  \"!{i}\"\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    bsdtar -xf \"!{i}\" && rm  \"!{i}\"\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "test"
        ],
        "nb_inputs": 1,
        "outputs": [
            "out"
        ],
        "nb_outputs": 1,
        "name_workflow": "JoshuaHess12__miaaim",
        "directive": [
            "publishDir \"${params.out}/${params.proto}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "trimming": {
        "name_process": "trimming",
        "string_process": " process trimming {\n        label 'low_memory'\n        \n\n        input: \n        set val(name), file(reads) from ch_trimming\n\n        output:\n        set val(name), file(\"*fq.gz\") into ch_fastq1, ch_fastq2\n\n        script:\n        if ( task.cpus > 1 ){\n            threads = \"--threads ${task.cpus}\"\n        } else \n        {\n            threads = \"\"\n        }\n        \"\"\"\n        atropos $threads -a AGATCGGAAGAGC  -a AAAAAAAAA \\\\\n                -A AGATCGGAAGAGC -A TTTTTTTTTTTT \\\\\n                --minimum-length 50 \\\\\n                -q 20 \\\\\n                --trim-n \\\\\n                -o $name.1.fq.gz -p $name.2.fq.gz \\\\\n                -pe1 ${reads[0]} -pe2 ${reads[1]}\n\n        \"\"\"\n    }",
        "nb_lignes_process": 26,
        "string_script": "        if ( task.cpus > 1 ){\n            threads = \"--threads ${task.cpus}\"\n        } else \n        {\n            threads = \"\"\n        }\n        \"\"\"\n        atropos $threads -a AGATCGGAAGAGC  -a AAAAAAAAA \\\\\n                -A AGATCGGAAGAGC -A TTTTTTTTTTTT \\\\\n                --minimum-length 50 \\\\\n                -q 20 \\\\\n                --trim-n \\\\\n                -o $name.1.fq.gz -p $name.2.fq.gz \\\\\n                -pe1 ${reads[0]} -pe2 ${reads[1]}\n\n        \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Atropos"
        ],
        "tools_url": [
            "https://bio.tools/Atropos"
        ],
        "tools_dico": [
            {
                "name": "Atropos",
                "uri": "https://bio.tools/Atropos",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3219",
                                    "term": "Read pre-processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3219",
                                    "term": "Sequence read pre-processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "specific, sensitive, and speedy trimming of sequencing reads.\n\nAn NGS read trimming tool that is specific, sensitive, and speedy. (production).\n\nAtropos is tool for specific, sensitive, and speedy trimming of NGS reads. It is a fork of the venerable Cutadapt read trimmer (https://github.com/marcelm/cutadapt, DOI:10.14806/ej.17.1.200), with the primary improvements being:",
                "homepage": "https://github.com/jdidion/atropos"
            }
        ],
        "inputs": [
            "ch_trimming"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fastq1",
            "ch_fastq2"
        ],
        "nb_outputs": 2,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "label 'low_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "merge": {
        "name_process": "merge",
        "string_process": "\nprocess merge {\n    publishDir \"${params.outdir}/trimmed\", mode: 'copy'\n    \n    input: \n    file(reads1) from ch_fastq_r1.collect()\n    file(reads2) from ch_fastq_r2.collect()\n\n    output:\n    file \"mreads*fq.gz\" into ch_fq_merged, ch_fq_merged2bam\n \n    script:\n    \"\"\"\n    merge(){ \n        I=\\$1 \n        \n        shift \n        if [ \\$# -eq 1 ] \n        then  \n            ln -s \\$@ \\$I  \n        else  \n            zcat \\$@ | gzip > \\$I  \n        fi  \n    }  \n    merge mreads.1.fq.gz $reads1\n    merge mreads.2.fq.gz $reads2\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    merge(){ \n        I=\\$1 \n        \n        shift \n        if [ \\$# -eq 1 ] \n        then  \n            ln -s \\$@ \\$I  \n        else  \n            zcat \\$@ | gzip > \\$I  \n        fi  \n    }  \n    merge mreads.1.fq.gz $reads1\n    merge mreads.2.fq.gz $reads2\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "DSHIFT",
            "merger"
        ],
        "tools_url": [
            "https://bio.tools/dshift",
            "https://bio.tools/merger"
        ],
        "tools_dico": [
            {
                "name": "DSHIFT",
                "uri": "https://bio.tools/dshift",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "NMR"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "Nuclear magnetic resonance spectroscopy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0593",
                            "term": "NMR spectroscopy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0470",
                                    "term": "Protein secondary structure prediction (coils)"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "DSHIFT is a web server for predicting chemical shifts of DNA sequences in random coil form or double helical B-form.",
                "homepage": "http://www.chem.cuhk.edu.hk/DSHIFT/"
            },
            {
                "name": "merger",
                "uri": "https://bio.tools/merger",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0874",
                                "term": "Comparison matrix"
                            },
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0849",
                                "term": "Sequence record"
                            },
                            {
                                "uri": "http://edamontology.org/data_1381",
                                "term": "Pair sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "Merge two overlapping sequences.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/merger.html"
            }
        ],
        "inputs": [
            "ch_fastq_r1",
            "ch_fastq_r2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_fq_merged",
            "ch_fq_merged2bam"
        ],
        "nb_outputs": 2,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "publishDir \"${params.outdir}/trimmed\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "spades": {
        "name_process": "spades",
        "string_process": " process spades {\n        label 'high_memory'\n        publishDir \"${params.outdir}\", mode: 'copy'\n\n        input:\n        file(reads) from ch_fq_merged\n\n        output:\n        file \"spades/*\" into spades_output\n        file \"spades/transcripts.fasta\" into spades2blastn_tx, spades2blastn2parser, spades2qc\n\n        script:\n        \"\"\"\n        spades.py --pe1-1 ${reads[0]} \\\\\n                --pe1-2 ${reads[1]} \\\\\n                --rna \\\\\n                -t ${task.cpus} \\\\\n                -o spades\n        \"\"\"\n    }",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        spades.py --pe1-1 ${reads[0]} \\\\\n                --pe1-2 ${reads[1]} \\\\\n                --rna \\\\\n                -t ${task.cpus} \\\\\n                -o spades\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fq_merged"
        ],
        "nb_inputs": 1,
        "outputs": [
            "spades_output",
            "spades2blastn_tx",
            "spades2blastn2parser",
            "spades2qc"
        ],
        "nb_outputs": 4,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "label 'high_memory'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "blastnt_known": {
        "name_process": "blastnt_known",
        "string_process": "\nprocess blastnt_known {\n    label 'mid_memory'\n    publishDir \"${params.outdir}/blastn_known\", mode: 'copy'\n    \n    input:\n    file(cds) from spades2blastn_tx\n    file(tx) from tx_fasta\n\n    output:\n    file \"blastn.known.outfmt6\" into blastn_known, blastn2qc\n\n    script:\n    \"\"\"\n    makeblastdb -in $tx -input_type fasta -dbtype nucl -parse_seqids -out known_tx\n    blastn -query $cds  \\\\\n    -db known_tx  -max_target_seqs 1 \\\\\n    -outfmt 6 -evalue 1e-5 -num_threads ${task.cpus} > blastn.known.outfmt6\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    makeblastdb -in $tx -input_type fasta -dbtype nucl -parse_seqids -out known_tx\n    blastn -query $cds  \\\\\n    -db known_tx  -max_target_seqs 1 \\\\\n    -outfmt 6 -evalue 1e-5 -num_threads ${task.cpus} > blastn.known.outfmt6\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "spades2blastn_tx",
            "tx_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "blastn_known",
            "blastn2qc"
        ],
        "nb_outputs": 2,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "label 'mid_memory'",
            "publishDir \"${params.outdir}/blastn_known\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "blastnt_parse": {
        "name_process": "blastnt_parse",
        "string_process": "\nprocess blastnt_parse {\n    label 'mid_memory'\n    publishDir \"${params.outdir}/blastn_known\", mode: 'copy'\n    \n    input:\n    file(cds) from spades2blastn2parser\n    file(outfmt) from blastn_known\n\n    output:\n    file \"transcript_unknown.fa\" into tx_unknown1, tx_unknown2\n\n    script:\n    \"\"\"\n    clean_blastnt.py $outfmt > transcript_unknown\n    cat $cds | seqkit grep -v -f transcript_unknown > transcript_unknown.fa\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    clean_blastnt.py $outfmt > transcript_unknown\n    cat $cds | seqkit grep -v -f transcript_unknown > transcript_unknown.fa\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "spades2blastn2parser",
            "blastn_known"
        ],
        "nb_inputs": 2,
        "outputs": [
            "tx_unknown1",
            "tx_unknown2"
        ],
        "nb_outputs": 2,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "label 'mid_memory'",
            "publishDir \"${params.outdir}/blastn_known\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "transdec_longorf": {
        "name_process": "transdec_longorf",
        "string_process": "\nprocess transdec_longorf {\n    label 'low_memory'\n    publishDir \"${params.outdir}/transdecoder\", mode: 'copy'\n\n    input:\n    file(tx) from tx_unknown1\n\n    output:\n    file(\"transcripts.fasta.transdecoder_dir/*\") into longorf_dir\n    file \"transcripts.fasta.transdecoder_dir/longest_orfs.pep\" into longestorf_tx, tdlong2qc\n\n    script:\n    \"\"\"\n    ln -s $tx transcripts.fasta\n    TransDecoder.LongOrfs -t transcripts.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    ln -s $tx transcripts.fasta\n    TransDecoder.LongOrfs -t transcripts.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tx_unknown1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "longorf_dir",
            "longestorf_tx",
            "tdlong2qc"
        ],
        "nb_outputs": 3,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "label 'low_memory'",
            "publishDir \"${params.outdir}/transdecoder\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "blastp": {
        "name_process": "blastp",
        "string_process": "\nprocess blastp {\n    label 'mid_memory'\n    publishDir \"${params.outdir}/blastp\", mode: 'copy'\n\n    input:\n    file(prot) from prot_fasta\n    file(tx) from longestorf_tx\n\n    output:\n    file \"blastp.outfmt6\" into blastp, blastp2qc\n    script:\n    \"\"\"\n    makeblastdb -in $prot -input_type fasta -dbtype prot -parse_seqids -out known_prot\n    blastp -query $tx  \\\n    -db known_prot  -max_target_seqs 1 \\\n    -outfmt 6 -evalue 1e-5 -num_threads ${task.cpus} > blastp.outfmt6\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    makeblastdb -in $prot -input_type fasta -dbtype prot -parse_seqids -out known_prot\n    blastp -query $tx  \\\n    -db known_prot  -max_target_seqs 1 \\\n    -outfmt 6 -evalue 1e-5 -num_threads ${task.cpus} > blastp.outfmt6\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "BLASTP-ACC"
        ],
        "tools_url": [
            "https://bio.tools/BLASTP-ACC"
        ],
        "tools_dico": [
            {
                "name": "BLASTP-ACC",
                "uri": "https://bio.tools/BLASTP-ACC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3297",
                            "term": "Biotechnology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3802",
                                    "term": "Sorting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Parallel Architecture and Hardware Accelerator Design for BLAST-based Protein Sequence Alignment.\n\nIn this study, we design a hardware accelerator for a widely used sequence alignment algorithm, the basic local alignment search tool for proteins (BLASTP). The architecture of the proposed accelerator consists of five stages: a new systolic-array-based one-hit finding stage, a novel RAM-REG-based two-hit finding stage, a refined ungapped extension stage, a faster gapped extension stage, and a highly efficient parallel sorter. The system is implemented on an Altera Stratix V FPGA with a processing speed of more than 500 giga cell updates per second (GCUPS). It can receive a query sequence, compare it with the sequences in the database, and generate a list sorted in descending order of the similarity scores between the query sequence and the subject sequences.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'accelerator', 'Altera', 'Stratix', 'RAM-REG-based'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31581096"
            }
        ],
        "inputs": [
            "prot_fasta",
            "longestorf_tx"
        ],
        "nb_inputs": 2,
        "outputs": [
            "blastp",
            "blastp2qc"
        ],
        "nb_outputs": 2,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "label 'mid_memory'",
            "publishDir \"${params.outdir}/blastp\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "transdec_predict": {
        "name_process": "transdec_predict",
        "string_process": "\nprocess transdec_predict {\n    label 'low_memory'\n    publishDir \"${params.outdir}/transdecoder\", mode: 'copy'\n\n    input:\n    file(tx) from tx_unknown2\n    file(\"predict/*\") from longorf_dir.collect()\n    file(fmt) from blastp\n    \n    output:\n    file(\"*.transdecoder.*\")\n    file \"transcript_unknown.fa.transdecoder.bed\" into transdecoder_bed, tdpredict2qc\n    file(\"transcript_with_function.fa\") into transdecoder_prot\n    script:\n    \"\"\"\n    # --retain_pfam_hits pfam\n    TransDecoder.Predict -t $tx  --retain_blastp_hits $fmt -O predict --no_refine_starts\n    select_blastp.py transcript_unknown.fa.transdecoder.bed > matched.txt\n    cat $tx | seqkit grep -f matched.txt > transcript_with_function.fa\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    # --retain_pfam_hits pfam\n    TransDecoder.Predict -t $tx  --retain_blastp_hits $fmt -O predict --no_refine_starts\n    select_blastp.py transcript_unknown.fa.transdecoder.bed > matched.txt\n    cat $tx | seqkit grep -f matched.txt > transcript_with_function.fa\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tx_unknown2",
            "longorf_dir",
            "blastp"
        ],
        "nb_inputs": 3,
        "outputs": [
            "transdecoder_bed",
            "tdpredict2qc",
            "transdecoder_prot"
        ],
        "nb_outputs": 3,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "label 'low_memory'",
            "publishDir \"${params.outdir}/transdecoder\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pasa": {
        "name_process": "pasa",
        "string_process": "\nprocess pasa {\n    publishDir \"${params.outdir}/PASA\", mode: 'copy'\n    label 'mid_memory'\n\n    input:\n    file(tx) from transdecoder_prot\n    file(genome) from fasta\n\n    output:\n    file(\"*.gff3\") into pasa_gff3\n\n    script:\n    prefix = tx.toString() - ~/(\\.fa)?(\\.fasta)?(\\.gz)?$/\n    \"\"\"\n    export PASAHOME=\\$(dirname \\$(which python))/../opt/pasa-2.3.3\n    \\$PASAHOME/scripts/run_spliced_aligners.pl --aligners blat \\\\\n        --genome $genome \\\\\n        --transcripts $tx -I 5000000 -N 1 --CPU ${task.cpus}\n    mv blat.spliced_alignments.gff3 ${prefix}.gff3\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    prefix = tx.toString() - ~/(\\.fa)?(\\.fasta)?(\\.gz)?$/\n    \"\"\"\n    export PASAHOME=\\$(dirname \\$(which python))/../opt/pasa-2.3.3\n    \\$PASAHOME/scripts/run_spliced_aligners.pl --aligners blat \\\\\n        --genome $genome \\\\\n        --transcripts $tx -I 5000000 -N 1 --CPU ${task.cpus}\n    mv blat.spliced_alignments.gff3 ${prefix}.gff3\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "transdecoder_prot",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pasa_gff3"
        ],
        "nb_outputs": 1,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "publishDir \"${params.outdir}/PASA\", mode: 'copy'",
            "label 'mid_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "annotation": {
        "name_process": "annotation",
        "string_process": "\nprocess annotation {\n    publishDir \"${params.outdir}/PASA\", mode: 'copy'\n    label 'low_memory'\n\n    input:\n    file(bed) from transdecoder_bed\n    file(pasa) from pasa_gff3\n    file(protein) from prot_fasta_ann\n\n    output:\n    file \"*.gtf\" into pasa2unify, pasa2qc\n\n    script:\n    prefix = pasa.toString() - ~/(\\.fa)?(\\.fasta)?(\\.gz)?$/\n    \"\"\"\n    gfftools.py $pasa $bed $protein > ${prefix}.gff3\n    gffread --keep-genes -E -T --keep-exon-attrs -F ${prefix}.gff3 > ${prefix}.gtf\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    prefix = pasa.toString() - ~/(\\.fa)?(\\.fasta)?(\\.gz)?$/\n    \"\"\"\n    gfftools.py $pasa $bed $protein > ${prefix}.gff3\n    gffread --keep-genes -E -T --keep-exon-attrs -F ${prefix}.gff3 > ${prefix}.gtf\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "gffread"
        ],
        "tools_url": [
            "https://bio.tools/gffread"
        ],
        "tools_dico": [
            {
                "name": "gffread",
                "uri": "https://bio.tools/gffread",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "program for filtering, converting and manipulating GFF files",
                "homepage": "https://ccb.jhu.edu/software/stringtie/gff.shtml"
            }
        ],
        "inputs": [
            "transdecoder_bed",
            "pasa_gff3",
            "prot_fasta_ann"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pasa2unify",
            "pasa2qc"
        ],
        "nb_outputs": 2,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "publishDir \"${params.outdir}/PASA\", mode: 'copy'",
            "label 'low_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "makeHisatSplicesites": {
        "name_process": "makeHisatSplicesites",
        "string_process": " process makeHisatSplicesites {\n        tag \"$gtf\"\n        publishDir path: { params.saveReference ? \"${params.outdir}/reference_genome\" : params.outdir },\n                    saveAs: { params.saveReference ? it : null }, mode: 'copy'\n\n        input:\n        file gtf from gtf_makeHisatSplicesites\n\n        output:\n        file \"${gtf.baseName}.hisat2_splice_sites.txt\" into indexing_splicesites, alignment_splicesites\n\n        script:\n        \"\"\"\n        hisat2_extract_splice_sites.py $gtf > ${gtf.baseName}.hisat2_splice_sites.txt\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        hisat2_extract_splice_sites.py $gtf > ${gtf.baseName}.hisat2_splice_sites.txt\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf_makeHisatSplicesites"
        ],
        "nb_inputs": 1,
        "outputs": [
            "indexing_splicesites",
            "alignment_splicesites"
        ],
        "nb_outputs": 2,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "tag \"$gtf\"",
            "publishDir path: { params.saveReference ? \"${params.outdir}/reference_genome\" : params.outdir } , saveAs: { params.saveReference ? it : null }, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "makeHISATindex": {
        "name_process": "makeHISATindex",
        "string_process": " process makeHISATindex {\n        tag \"$fasta\"\n        publishDir path: { params.saveReference ? \"${params.outdir}/reference_genome\" : params.outdir },\n                    saveAs: { params.saveReference ? it : null }, mode: 'copy'\n\n        input:\n        file fasta from ch_fasta_for_hisat_index\n        file indexing_splicesites from indexing_splicesites\n        file gtf from gtf_makeHISATindex\n\n        output:\n        file \"${fasta.baseName}.*.ht2*\" into hs2_indices\n\n        script:\n        if( !task.memory ){\n            log.info \"[HISAT2 index build] Available memory not known - defaulting to 0. Specify process memory requirements to change this.\"\n            avail_mem = 0\n        } else {\n            log.info \"[HISAT2 index build] Available memory: ${task.memory}\"\n            avail_mem = task.memory.toGiga()\n        }\n        if( avail_mem > params.hisat_build_memory ){\n            log.info \"[HISAT2 index build] Over ${params.hisat_build_memory} GB available, so using splice sites and exons in HISAT2 index\"\n            extract_exons = \"hisat2_extract_exons.py $gtf > ${gtf.baseName}.hisat2_exons.txt\"\n            ss = \"--ss $indexing_splicesites\"\n            exon = \"--exon ${gtf.baseName}.hisat2_exons.txt\"\n        } else {\n            log.info \"[HISAT2 index build] Less than ${params.hisat_build_memory} GB available, so NOT using splice sites and exons in HISAT2 index.\"\n            log.info \"[HISAT2 index build] Use --hisat_build_memory [small number] to skip this check.\"\n            extract_exons = ''\n            ss = ''\n            exon = ''\n        }\n        \"\"\"\n        $extract_exons\n        hisat2-build -p ${task.cpus} $ss $exon $fasta ${fasta.baseName}.hisat2_index\n        \"\"\"\n    }",
        "nb_lignes_process": 36,
        "string_script": "        if( !task.memory ){\n            log.info \"[HISAT2 index build] Available memory not known - defaulting to 0. Specify process memory requirements to change this.\"\n            avail_mem = 0\n        } else {\n            log.info \"[HISAT2 index build] Available memory: ${task.memory}\"\n            avail_mem = task.memory.toGiga()\n        }\n        if( avail_mem > params.hisat_build_memory ){\n            log.info \"[HISAT2 index build] Over ${params.hisat_build_memory} GB available, so using splice sites and exons in HISAT2 index\"\n            extract_exons = \"hisat2_extract_exons.py $gtf > ${gtf.baseName}.hisat2_exons.txt\"\n            ss = \"--ss $indexing_splicesites\"\n            exon = \"--exon ${gtf.baseName}.hisat2_exons.txt\"\n        } else {\n            log.info \"[HISAT2 index build] Less than ${params.hisat_build_memory} GB available, so NOT using splice sites and exons in HISAT2 index.\"\n            log.info \"[HISAT2 index build] Use --hisat_build_memory [small number] to skip this check.\"\n            extract_exons = ''\n            ss = ''\n            exon = ''\n        }\n        \"\"\"\n        $extract_exons\n        hisat2-build -p ${task.cpus} $ss $exon $fasta ${fasta.baseName}.hisat2_index\n        \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "SSA",
            "Assexon"
        ],
        "tools_url": [
            "https://bio.tools/ssa",
            "https://bio.tools/Assexon"
        ],
        "tools_dico": [
            {
                "name": "SSA",
                "uri": "https://bio.tools/ssa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Sequence motif discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0240",
                                    "term": "Sequence motif comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Motif discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "SSA (Signal Search Analysis) is a software package for the analysis of nucleic acid sequence motifs that are postionally correlated with a functional site (e.g a transcription or translation initiation site).",
                "homepage": "http://ccg.vital-it.ch/ssa/"
            },
            {
                "name": "Assexon",
                "uri": "https://bio.tools/Assexon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3644",
                                    "term": "de Novo sequencing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Assembling Exon Using Gene Capture Data | Exon capture across species has been one of the most broadly applied approaches to acquire multi-locus data in phylogenomic studies of non-model organisms. Methods for assembling loci from short-read sequences (eg, Illumina platforms) that rely on mapping reads to a reference genome may not be suitable for studies comprising species across a wide phylogenetic spectrum; thus, de novo assembling methods are more generally applied. Current approaches for assembling targeted exons from short reads are not particularly optimized as they cannot (1) assemble loci with low read depth, (2) handle large files efficiently, and (3) reliably address issues with paralogs. Thus, we present Assexon: a streamlined pipeline that de novo assembles targeted exons and their flanking sequences from raw reads",
                "homepage": "https://github.com/yhadevol/Assexon"
            }
        ],
        "inputs": [
            "ch_fasta_for_hisat_index",
            "indexing_splicesites",
            "gtf_makeHISATindex"
        ],
        "nb_inputs": 3,
        "outputs": [
            "hs2_indices"
        ],
        "nb_outputs": 1,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "tag \"$fasta\"",
            "publishDir path: { params.saveReference ? \"${params.outdir}/reference_genome\" : params.outdir } , saveAs: { params.saveReference ? it : null }, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "hisat2Align": {
        "name_process": "hisat2Align",
        "string_process": " process hisat2Align {\n        label 'high_memory'\n        publishDir \"${params.outdir}/HISAT2\", mode: 'copy',\n            saveAs: {filename ->\n                if (filename.indexOf(\".hisat2_summary.txt\") > 0) \"logs/$filename\"\n                else if (!params.saveAlignedIntermediates && filename == \"where_are_my_files.txt\") filename\n                else if (params.saveAlignedIntermediates && filename != \"where_are_my_files.txt\") filename\n                else null\n            }\n\n        input:\n        file(reads) from ch_fq_merged2bam\n        file hs2_indices from hs2_indices.collect()\n        file alignment_splicesites from alignment_splicesites.collect()\n        file wherearemyfiles from ch_where_hisat2.collect()\n\n        output:\n        file \"${prefix}.bam\" into hisat2_bam\n        file \"${prefix}.hisat2_summary.txt\" into alignment_logs\n        file \"where_are_my_files.txt\"\n        file \"unmapped.hisat2*\" optional true\n\n        script:\n        index_base = hs2_indices[0].toString() - ~/.\\d.ht2l?/\n        prefix = reads[0].toString() - ~/(_R1)?(_trimmed)?(_val_1)?(\\.fq)?(\\.fastq)?(\\.gz)?$/\n        def rnastrandness = ''\n        if (forwardStranded && !unStranded){\n            rnastrandness = '--rna-strandness FR'\n        } else if (reverseStranded && !unStranded){\n            rnastrandness = params.singleEnd ? '--rna-strandness R' : '--rna-strandness RF'\n        }\n        \n\n        unaligned = \"--un-conc-gz unmapped.hisat2.gz\" \n        \"\"\"\n        hisat2 -x $index_base \\\\\n                -1 ${reads[0]} \\\\\n                -2 ${reads[1]} \\\\\n                $rnastrandness \\\\\n                --known-splicesite-infile $alignment_splicesites \\\\\n                --no-mixed \\\\\n                --no-discordant \\\\\n                -p ${task.cpus} $unaligned\\\\\n                --met-stderr \\\\\n                --new-summary \\\\\n                --dta \\\\\n                --summary-file ${prefix}.hisat2_summary.txt \\\\\n                | samtools view -bS -F 4 -F 8 -F 256 - > ${prefix}.bam\n        \"\"\"\n    }",
        "nb_lignes_process": 48,
        "string_script": "        index_base = hs2_indices[0].toString() - ~/.\\d.ht2l?/\n        prefix = reads[0].toString() - ~/(_R1)?(_trimmed)?(_val_1)?(\\.fq)?(\\.fastq)?(\\.gz)?$/\n        def rnastrandness = ''\n        if (forwardStranded && !unStranded){\n            rnastrandness = '--rna-strandness FR'\n        } else if (reverseStranded && !unStranded){\n            rnastrandness = params.singleEnd ? '--rna-strandness R' : '--rna-strandness RF'\n        }\n        \n\n        unaligned = \"--un-conc-gz unmapped.hisat2.gz\" \n        \"\"\"\n        hisat2 -x $index_base \\\\\n                -1 ${reads[0]} \\\\\n                -2 ${reads[1]} \\\\\n                $rnastrandness \\\\\n                --known-splicesite-infile $alignment_splicesites \\\\\n                --no-mixed \\\\\n                --no-discordant \\\\\n                -p ${task.cpus} $unaligned\\\\\n                --met-stderr \\\\\n                --new-summary \\\\\n                --dta \\\\\n                --summary-file ${prefix}.hisat2_summary.txt \\\\\n                | samtools view -bS -F 4 -F 8 -F 256 - > ${prefix}.bam\n        \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ch_fq_merged2bam",
            "hs2_indices",
            "alignment_splicesites",
            "ch_where_hisat2"
        ],
        "nb_inputs": 4,
        "outputs": [
            "hisat2_bam",
            "alignment_logs"
        ],
        "nb_outputs": 2,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "label 'high_memory'",
            "publishDir \"${params.outdir}/HISAT2\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".hisat2_summary.txt\") > 0) \"logs/$filename\" else if (!params.saveAlignedIntermediates && filename == \"where_are_my_files.txt\") filename else if (params.saveAlignedIntermediates && filename != \"where_are_my_files.txt\") filename else null }"
        ],
        "when": "",
        "stub": ""
    },
    "hisat2_sortOutput": {
        "name_process": "hisat2_sortOutput",
        "string_process": " process hisat2_sortOutput {\n        label 'mid_memory'\n        tag \"${hisat2_bam.baseName}\"\n        publishDir \"${params.outdir}/HISAT2\", mode: 'copy'\n\n        input:\n        file hisat2_bam\n\n        output:\n        file \"${hisat2_bam.baseName}.sorted.bam\" into bam_stringtieFPKM\n        file \"${hisat2_bam.baseName}.sorted.bam.bai\" into bam_index\n\n        script:\n        def suff_mem = (\"${(task.memory.toBytes() - 6000000000) / task.cpus}\" > 2000000000) ? 'true' : 'false'\n        def avail_mem = (task.memory && suff_mem) ? \"-m\" + \"${(task.memory.toBytes() - 6000000000) / task.cpus}\" : ''\n        \"\"\"\n        samtools sort \\\\\n            $hisat2_bam \\\\\n            -@ ${task.cpus} ${avail_mem} \\\\\n            -o ${hisat2_bam.baseName}.sorted.bam\n        samtools index ${hisat2_bam.baseName}.sorted.bam\n        \"\"\"\n    }",
        "nb_lignes_process": 21,
        "string_script": "        def suff_mem = (\"${(task.memory.toBytes() - 6000000000) / task.cpus}\" > 2000000000) ? 'true' : 'false'\n        def avail_mem = (task.memory && suff_mem) ? \"-m\" + \"${(task.memory.toBytes() - 6000000000) / task.cpus}\" : ''\n        \"\"\"\n        samtools sort \\\\\n            $hisat2_bam \\\\\n            -@ ${task.cpus} ${avail_mem} \\\\\n            -o ${hisat2_bam.baseName}.sorted.bam\n        samtools index ${hisat2_bam.baseName}.sorted.bam\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "hisat2_bam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_stringtieFPKM",
            "bam_index"
        ],
        "nb_outputs": 2,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "label 'mid_memory'",
            "tag \"${hisat2_bam.baseName}\"",
            "publishDir \"${params.outdir}/HISAT2\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "stringtieFPKM": {
        "name_process": "stringtieFPKM",
        "string_process": " process stringtieFPKM {\n        label 'mid_memory'\n        publishDir \"${params.outdir}/stringtieFPKM\", mode: 'copy',\n            saveAs: {filename ->\n                if (filename.indexOf(\"transcripts.gtf\") > 0) \"transcripts/$filename\"\n                else if (filename.indexOf(\"cov_refs.gtf\") > 0) \"cov_refs/$filename\"\n                else \"$filename\"\n            }\n\n\n        input:\n        file(bam) from bam_stringtieFPKM\n        file gtf from gtf_stringtieFPKM.collect()\n\n        output:\n        file \"*_transcripts.gtf\"\n        file \"*_merged_transcripts.gtf\" into stringtieGTF \n        file \"*.gene_abund.txt\"\n        file \"*.cov_refs.gtf\"\n\n        script:\n        def st_direction = ''\n        if (forwardStranded && !unStranded){\n            st_direction = \"--fr\"\n        } else if (reverseStranded && !unStranded){\n            st_direction = \"--rf\"\n        }\n        name = bam.toString() - ~/(_R1)?(_trimmed)?(\\.sorted\\.bam)?(\\.fq)?(\\.fastq)?(\\.gz)?$/\n\n        \"\"\"\n        stringtie $bam \\\\\n            $st_direction \\\\\n            -o ${name}_transcripts.gtf \\\\\n            -v \\\\\n            -G $gtf \\\\\n            -A ${name}.gene_abund.txt \\\\\n            -C ${name}.cov_refs.gtf\n        stringtie ${name}_transcripts.gtf --merge -G $gtf -o ${name}_merged_transcripts.gtf\n        \"\"\"\n    }",
        "nb_lignes_process": 38,
        "string_script": "        def st_direction = ''\n        if (forwardStranded && !unStranded){\n            st_direction = \"--fr\"\n        } else if (reverseStranded && !unStranded){\n            st_direction = \"--rf\"\n        }\n        name = bam.toString() - ~/(_R1)?(_trimmed)?(\\.sorted\\.bam)?(\\.fq)?(\\.fastq)?(\\.gz)?$/\n\n        \"\"\"\n        stringtie $bam \\\\\n            $st_direction \\\\\n            -o ${name}_transcripts.gtf \\\\\n            -v \\\\\n            -G $gtf \\\\\n            -A ${name}.gene_abund.txt \\\\\n            -C ${name}.cov_refs.gtf\n        stringtie ${name}_transcripts.gtf --merge -G $gtf -o ${name}_merged_transcripts.gtf\n        \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "goname",
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/goname",
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            },
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "bam_stringtieFPKM",
            "gtf_stringtieFPKM"
        ],
        "nb_inputs": 2,
        "outputs": [
            "stringtieGTF"
        ],
        "nb_outputs": 1,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "label 'mid_memory'",
            "publishDir \"${params.outdir}/stringtieFPKM\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\"transcripts.gtf\") > 0) \"transcripts/$filename\" else if (filename.indexOf(\"cov_refs.gtf\") > 0) \"cov_refs/$filename\" else \"$filename\" }"
        ],
        "when": "",
        "stub": ""
    },
    "unify": {
        "name_process": "unify",
        "string_process": " process unify {\n    label 'low_memory'\n    publishDir \"${params.outdir}/unify\", mode: 'copy'\n\n    input:\n    file tx from gtf_unify\n                \n    file stie from stringtieGTF\n           \n    file spades from pasa2unify\n           \n    file ucsc from ucsc2unify\n\n    output:\n    file \"novel.gtf\"\n    file \"complete_sorted.gtf\"\n\n    script:\n    \"\"\"\n    cat $stie $spades $ucsc > full.gtf\n    gffread -M --cluster-only -T  -F --keep-genes --keep-exon-attrs full.gtf > clustered.gtf\n    unify.py --gtf clustered.gtf > novel.gtf\n    grep \"^#\" novel.gtf > complete.gtf\n    cat $tx novel.gtf >> complete.gtf\n    bedtools sort -header -i complete.gtf > complete_sorted.gtf\n    \"\"\"\n }",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    cat $stie $spades $ucsc > full.gtf\n    gffread -M --cluster-only -T  -F --keep-genes --keep-exon-attrs full.gtf > clustered.gtf\n    unify.py --gtf clustered.gtf > novel.gtf\n    grep \"^#\" novel.gtf > complete.gtf\n    cat $tx novel.gtf >> complete.gtf\n    bedtools sort -header -i complete.gtf > complete_sorted.gtf\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "gffread",
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/gffread",
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "gffread",
                "uri": "https://bio.tools/gffread",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "program for filtering, converting and manipulating GFF files",
                "homepage": "https://ccb.jhu.edu/software/stringtie/gff.shtml"
            },
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "gtf_unify",
            "stringtieGTF",
            "pasa2unify",
            "ucsc2unify"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "label 'low_memory'",
            "publishDir \"${params.outdir}/unify\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "qc": {
        "name_process": "qc",
        "string_process": "\nprocess qc {\n    publishDir \"${params.outdir}/QC\", mode: 'copy'\n    label 'mid_memory'\n\n    when:\n    false\n\n    input:\n    file(tx) from spades2qc\n    file(blastn) from blastn2qc\n    file(txlong) from tdlong2qc\n    file(blastp) from blastp2qc\n    file(bed) from tdpredict2qc\n    file(pasa) from pasa2qc\n    file(protein) from prot_fasta_qc\n\n    output:\n    file \"assembly_qc.db\" into qc\n\n    script:\n    \"\"\"\n    make_db.py $prot_fasta_qc $spades2qc $blastn2qc $tdlong2qc $blastp2qc $tdpredict2qc $pasa2qc\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    make_db.py $prot_fasta_qc $spades2qc $blastn2qc $tdlong2qc $blastp2qc $tdpredict2qc $pasa2qc\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "spades2qc",
            "blastn2qc",
            "tdlong2qc",
            "blastp2qc",
            "tdpredict2qc",
            "pasa2qc",
            "prot_fasta_qc"
        ],
        "nb_inputs": 7,
        "outputs": [
            "qc"
        ],
        "nb_outputs": 1,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "publishDir \"${params.outdir}/QC\", mode: 'copy'",
            "label 'mid_memory'"
        ],
        "when": "false",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir \"${params.outdir}/MultiQC\", mode: 'copy'\n    when:\n    false\n\n    input:\n    file multiqc_config from ch_multiqc_config\n                                                                                  \n            'software_versions/*'                                       \n    file workflow_summary from create_workflow_summary(summary)\n    file ('alignment/*') from alignment_logs.collect().ifEmpty([])\n\n    output:\n    file \"*multiqc_report.html\" into multiqc_report\n    file \"*_data\"\n    file \"multiqc_plots\"\n\n    script:\n    rtitle = custom_runName ? \"--title \\\"$custom_runName\\\"\" : ''\n    rfilename = custom_runName ? \"--filename \" + custom_runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n                                                                                       \n    \"\"\"\n    multiqc -f $rtitle $rfilename --config $multiqc_config -m hisat2 .\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    rtitle = custom_runName ? \"--title \\\"$custom_runName\\\"\" : ''\n    rfilename = custom_runName ? \"--filename \" + custom_runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n                                                                                       \n    \"\"\"\n    multiqc -f $rtitle $rfilename --config $multiqc_config -m hisat2 .\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "ch_multiqc_config",
            "summary",
            "alignment_logs"
        ],
        "nb_inputs": 3,
        "outputs": [
            "multiqc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "publishDir \"${params.outdir}/MultiQC\", mode: 'copy'"
        ],
        "when": "false",
        "stub": ""
    },
    "output_documentation": {
        "name_process": "output_documentation",
        "string_process": "\nprocess output_documentation {\n    publishDir \"${params.outdir}/pipeline_info\", mode: 'copy'\n\n    input:\n    file output_docs from ch_output_docs\n\n    output:\n    file \"results_description.html\"\n\n    script:\n    \"\"\"\n    markdown_to_html.r $output_docs results_description.html\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    markdown_to_html.r $output_docs results_description.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_output_docs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "egenesis__WF-NF-rnassembly",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
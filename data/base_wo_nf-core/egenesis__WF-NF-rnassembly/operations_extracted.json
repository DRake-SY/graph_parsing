{
    "OPERATION_1": {
        "string": "Channel.fromPath(params.fasta, checkIfExists: true)\n    .ifEmpty { exit 1, \"Genome fasta file not found: ${params.fasta}\" }\n    .into { ch_fasta_for_hisat_index; fasta }",
        "origin": [
            [
                "params.fasta, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_fasta_for_hisat_index",
                "P"
            ],
            [
                "fasta",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_multiqc_config = Channel.fromPath(params.multiqc_config)",
        "origin": [
            [
                "params.multiqc_config",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_config",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_output_docs = Channel.fromPath(\"$baseDir/docs/output.md\")",
        "origin": [
            [
                "\"$baseDir/docs/output.md\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_output_docs",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n            .from(params.readPaths)\n            .map { row -> [ row[0], [file(row[1][0]), file(row[1][1])]] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into { ch_trimming }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n        .fromFilePairs( params.reads, size: 2 )\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n        .into { ch_trimming }",
        "origin": [
            [
                "params.reads, size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n    .fromPath(params.gtf, checkIfExists: true)\n    .ifEmpty { exit 1, \"GTF annotation file not found: ${params.gtf}\" }\n    .into { gtf_stringtieFPKM; gtf_makeHisatSplicesites; gtf_makeHISATindex; gtf_unify }",
        "origin": [
            [
                "params.gtf, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "gtf_stringtieFPKM",
                "P"
            ],
            [
                "gtf_makeHisatSplicesites",
                "P"
            ],
            [
                "gtf_makeHISATindex",
                "P"
            ],
            [
                "gtf_unify",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n    .fromPath(params.tx, checkIfExists: true)\n    .ifEmpty { exit 1, \"Tx fasta file not found: ${params.tx}\" }\n    .into { tx_fasta }",
        "origin": [
            [
                "params.tx, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "tx_fasta",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel\n    .fromPath(params.proteins, checkIfExists: true)\n    .ifEmpty { exit 1, \"Proteins fasta file not found: ${params.proteins}\" }\n    .into { prot_fasta; prot_fasta_ann; prot_fasta_qc }",
        "origin": [
            [
                "params.proteins, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "prot_fasta",
                "P"
            ],
            [
                "prot_fasta_ann",
                "P"
            ],
            [
                "prot_fasta_qc",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel\n    .fromPath(params.ucsc_gtf, checkIfExists: true)\n    .ifEmpty { exit 1, \"UCSC GTF file not found: ${params.ucsc}\" }\n    .into {ucsc2unify}",
        "origin": [
            [
                "params.ucsc_gtf, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ucsc2unify",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel.fromPath(\"$baseDir/assets/where_are_my_files.txt\", checkIfExists: true)\n       .into{ch_where_hisat2; ch_where_hisat2_sort}",
        "origin": [
            [
                "\"$baseDir/assets/where_are_my_files.txt\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_where_hisat2",
                "P"
            ],
            [
                "ch_where_hisat2_sort",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "hs2_indices = Channel\n        .fromPath(\"${params.hisat2_index}*\", checkIfExists: true)\n        .ifEmpty { exit 1, \"HISAT2 index not found: ${params.hisat2_index}\" }",
        "origin": [
            [
                "\"${params.hisat2_index}*\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "hs2_indices",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel\n        .fromPath(params.tx_assembled, checkIfExists: true)\n        .ifEmpty { exit 1, \"tx assembled file not found: ${params.gtf}\" }\n        .into { spades2blastn_tx; spades2blastn2parser; spades2qc }",
        "origin": [
            [
                "params.tx_assembled, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "spades2blastn_tx",
                "P"
            ],
            [
                "spades2blastn2parser",
                "P"
            ],
            [
                "spades2qc",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "star_log = Channel.from(false)",
        "origin": [
            [
                "false",
                "V"
            ]
        ],
        "gives": [
            [
                "star_log",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_15": {
        "string": "ch_trimming\n       .into {ch_fastq1; ch_fastq2}",
        "origin": [
            [
                "ch_trimming",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_fastq1",
                "P"
            ],
            [
                "ch_fastq2",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "ch_fastq1\n    .map {sample -> sample[1][0]}\n    .collect()\n    .set { ch_fastq_r1}",
        "origin": [
            [
                "ch_fastq1",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_fastq_r1",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "ch_fastq2\n    .map {sample -> sample[1][1]}\n    .collect()\n    .set { ch_fastq_r2}",
        "origin": [
            [
                "ch_fastq2",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_fastq_r2",
                "P"
            ]
        ]
    }
}
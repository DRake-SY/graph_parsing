{
    "filter_process": {
        "name_process": "filter_process",
        "string_process": "\nprocess filter_process {\n\n    input: \n    val x from input_ch \n\n    output: \n    set stdout, x into output_ch \n\n    script:\n    if( x >=3 ) {\n    \"\"\"\n    #!/bin/bash\n    printf \"True\"\n    \"\"\"     \n    }\n    else {\n    \n    \"\"\"\n    #\"/bin/bash\n    printf \"False\"\n    \"\"\"\n     }     \n}",
        "nb_lignes_process": 22,
        "string_script": "    if( x >=3 ) {\n    \"\"\"\n    #!/bin/bash\n    printf \"True\"\n    \"\"\"     \n    }\n    else {\n    \n    \"\"\"\n    #\"/bin/bash\n    printf \"False\"\n    \"\"\"\n     }",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "output_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "coughls__nextflow-example-scripts",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "create_fail_file": {
        "name_process": "create_fail_file",
        "string_process": "\nprocess create_fail_file{\n\n    tag \"$status - $num\"\n\n    input:\n    set status, num from false_ch2\n\n    output:\n    file(\"*.fail.csv\") into fail_file_ch \n\n    script:\n    \"\"\"\n    echo \"$status\", \"$num\" > \"${num}.fail.csv\"\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    echo \"$status\", \"$num\" > \"${num}.fail.csv\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "false_ch2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fail_file_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "coughls__nextflow-example-scripts",
        "directive": [
            "tag \"$status - $num\""
        ],
        "when": "",
        "stub": ""
    },
    "collect_fail_files": {
        "name_process": "collect_fail_files",
        "string_process": "\nprocess collect_fail_files{\n\n    publishDir \"${params.outdir}/\", mode: 'copy'\n\n    input:\n    file(\"*\") from fail_file_ch.collect()\n\n    output:\n    file(\"all_fail.csv\") into fail_file_collect_ch\n\n    script:\n    \"\"\"\n    #!/bin/bash \n    cat * > all_fail.csv\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    #!/bin/bash \n    cat * > all_fail.csv\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fail_file_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fail_file_collect_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "coughls__nextflow-example-scripts",
        "directive": [
            "publishDir \"${params.outdir}/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "test_noquotes": {
        "name_process": "test_noquotes",
        "string_process": "\nprocess test_noquotes {\n\n   tag \"$filename\"\n\n    input:\n    set filename, file(txt_file) from files_ch_2\n\n    output: \n    file(\"${filename}.num_lines.txt\") into files_out\n\n    script:\n    \"\"\"\n    wc -l $txt_file > ${filename}.num_lines.txt \n    \"\"\"\n \n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    wc -l $txt_file > ${filename}.num_lines.txt \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "files_ch_2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "files_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "coughls__nextflow-example-scripts",
        "directive": [
            "tag \"$filename\""
        ],
        "when": "",
        "stub": ""
    }
}
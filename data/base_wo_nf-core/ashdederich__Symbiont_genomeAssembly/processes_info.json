{
    "trimmomatic": {
        "name_process": "trimmomatic",
        "string_process": "\nprocess trimmomatic {\n    publishDir \"/path/to/forward-and-reverse/reads/${sample_id}/InitialAssembly/Trimmed/\", mode: 'copy'\n    tag \"${sample_id}\"\n    label params.label\n    label 'wga' \n\n    input:\n    tuple val(sample_id), path(sample_files) from reads_trimmomatic\n    \n    output:\n    tuple val(sample_id), file(\"${sample_id}_R1_paired.fastq.gz\"), file(\"${sample_id}_R2_paired.fastq.gz\") into trimmed_paired_reads_ch\n    tuple val(sample_id), file(\"${sample_id}_R1_unpaired.fastq.gz\"), file(\"${sample_id}_R2_unpaired.fastq.gz\") into trimmed_unpaired_reads_ch\n    tuple val(sample_id), file(\"${sample_id}_Trimlog.txt\")\n\n    script:\n    \"\"\"\n    TrimmomaticPE -threads ${task.cpus} \\\n    -trimlog ${sample_id}_Trimlog.txt \\\n    $sample_files \\\n    ${sample_id}_R1_paired.fastq.gz \\\n    ${sample_id}_R1_unpaired.fastq.gz \\\n    ${sample_id}_R2_paired.fastq.gz \\\n    ${sample_id}_R2_unpaired.fastq.gz \\\n    LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    TrimmomaticPE -threads ${task.cpus} \\\n    -trimlog ${sample_id}_Trimlog.txt \\\n    $sample_files \\\n    ${sample_id}_R1_paired.fastq.gz \\\n    ${sample_id}_R1_unpaired.fastq.gz \\\n    ${sample_id}_R2_paired.fastq.gz \\\n    ${sample_id}_R2_unpaired.fastq.gz \\\n    LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads_trimmomatic"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmed_paired_reads_ch",
            "trimmed_unpaired_reads_ch",
            "sample_id"
        ],
        "nb_outputs": 3,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "publishDir \"/path/to/forward-and-reverse/reads/${sample_id}/InitialAssembly/Trimmed/\", mode: 'copy'",
            "tag \"${sample_id}\"",
            "label params.label",
            "label 'wga'"
        ],
        "when": "",
        "stub": ""
    },
    "pear": {
        "name_process": "pear",
        "string_process": "\nprocess pear {\n    tag \"${sample_id}\"\n    label 'alignment'\n    label 'pear'\n\n    input:\n    tuple val(sample_id), file(\"${sample_id}_R1_paired.fastq.gz\"), file(\"${sample_id}_R2_paired.fastq.gz\") from trimmed_paired_reads_ch\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_R1R2_PEARoutput.unassembled.forward.fastq\"), file(\"${sample_id}_R1R2_PEARoutput.unassembled.reverse.fastq\") into pear_unassembled\n    tuple val(sample_id), file(\"${sample_id}_R1R2_PEARoutput.assembled.fastq\") into pear_ch_assembled\n    tuple val(sample_id), file (\"${sample_id}_R1R2_PEARoutput.discarded.fastq\") into pear_ch_discarded\n\n    script:\n    \"\"\"\n    pear -j ${task.cpus} \\\n    -f ${sample_id}_R1_paired.fastq.gz \\\n    -r ${sample_id}_R2_paired.fastq.gz \\\n    -o ${sample_id}_R1R2_PEARoutput\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    pear -j ${task.cpus} \\\n    -f ${sample_id}_R1_paired.fastq.gz \\\n    -r ${sample_id}_R2_paired.fastq.gz \\\n    -o ${sample_id}_R1R2_PEARoutput\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "PEAR"
        ],
        "tools_url": [
            "https://bio.tools/pear"
        ],
        "tools_dico": [
            {
                "name": "PEAR",
                "uri": "https://bio.tools/pear",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Paired-end read merger. PEAR evaluates all possible paired-end read overlaps without requiring the target fragment size as input. In addition, it implements a statistical test for minimizing false-positive results.",
                "homepage": "http://sco.h-its.org/exelixis/web/software/pear/"
            }
        ],
        "inputs": [
            "trimmed_paired_reads_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pear_unassembled",
            "pear_ch_assembled",
            "pear_ch_discarded"
        ],
        "nb_outputs": 3,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "tag \"${sample_id}\"",
            "label 'alignment'",
            "label 'pear'"
        ],
        "when": "",
        "stub": ""
    },
    "compressPear": {
        "name_process": "compressPear",
        "string_process": "\nprocess compressPear{\n    publishDir workdir_ch/\"Trimmomatic/PEAR\", mode: 'copy'\n    tag \"${sample_id}\"\n    tag \"${params.reference}\"\n    label params.label\n    label 'tabix'\n\n    input:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_bbmap_mapped.bam\") from samToBam_ch\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_bbmap_mapped.fastq\") from samToBamfastq_ch\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_bbmap_mapped.fastq.gz\") into samToFastq_ch_gz\n\n    script:\n    \"\"\"\n    bgzip -@ ${task.cpus} ${sample_id}_${params.reference}_bbmap_mapped.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    bgzip -@ ${task.cpus} ${sample_id}_${params.reference}_bbmap_mapped.fastq\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samToBam_ch",
            "samToBamfastq_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "samToFastq_ch_gz"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "publishDir workdir_ch/\"Trimmomatic/PEAR\", mode: 'copy'",
            "tag \"${sample_id}\"",
            "tag \"${params.reference}\"",
            "label params.label",
            "label 'tabix'"
        ],
        "when": "",
        "stub": ""
    },
    "scaffoldAlignment_bbmap": {
        "name_process": "scaffoldAlignment_bbmap",
        "string_process": "\nprocess scaffoldAlignment_bbmap {\n    tag \"${sample_id}\"\n    tag \"${params.reference}\"\n    label params.label\n    label 'bbmap_container'\n\n    input:\n    tuple val(sample_id), file(\"${sample_id}_R1R2_PEARoutput.assembled.fastq\") from pear_ch_assembled\n    file ref_genome from ref_ch\n    \n    output:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_bbmap_mappedreads.sam\") into bbmapcov_ch\n\n    script:\n    \"\"\"\n    bbmap.sh in=${sample_id}_R1R2_PEARoutput.assembled.fastq ref=${ref_genome} t=1 out=${sample_id}_${params.reference}_bbmap_mappedreads.sam\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    bbmap.sh in=${sample_id}_R1R2_PEARoutput.assembled.fastq ref=${ref_genome} t=1 out=${sample_id}_${params.reference}_bbmap_mappedreads.sam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pear_ch_assembled",
            "ref_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bbmapcov_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "tag \"${sample_id}\"",
            "tag \"${params.reference}\"",
            "label params.label",
            "label 'bbmap_container'"
        ],
        "when": "",
        "stub": ""
    },
    "samToBam": {
        "name_process": "samToBam",
        "string_process": "\nprocess samToBam {\n\n    publishDir \"/path/to/forward-and-reverse/reads/${sample_id}/SymbiontAssembly/${params.reference}/Alignment\", mode: 'copy'\n    tag \"${sample_id}\"\n    tag \"${params.reference}\"\n    label params.label\n    label 'wga'\n\n    input:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_aligned.sam\") from bwacov_ch\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_aligned_sort.bam\"), file(\"${sample_id}_${params.reference}_aligned_sort.bam.bai\"),file(\"${sample_id}_${params.reference}_aligned.fastq\") into samToBam_ch\n\n    script:\n    \"\"\"\n    samtools view -@ ${task.cpus} -Sbu -o ${sample_id}_${params.reference}_aligned.bam ${sample_id}_${params.reference}_aligned.sam\n    samtools sort -@ ${task.cpus} -o ${sample_id}_${params.reference}_aligned_sort.bam ${sample_id}_${params.reference}_aligned.bam\n    samtools index -@ ${task.cpus} ${sample_id}_${params.reference}_aligned_sort.bam \n    samtools fastq -@ ${task.cpus} ${sample_id}_${params.reference}_aligned.bam > ${sample_id}_${params.reference}_aligned.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    samtools view -@ ${task.cpus} -Sbu -o ${sample_id}_${params.reference}_aligned.bam ${sample_id}_${params.reference}_aligned.sam\n    samtools sort -@ ${task.cpus} -o ${sample_id}_${params.reference}_aligned_sort.bam ${sample_id}_${params.reference}_aligned.bam\n    samtools index -@ ${task.cpus} ${sample_id}_${params.reference}_aligned_sort.bam \n    samtools fastq -@ ${task.cpus} ${sample_id}_${params.reference}_aligned.bam > ${sample_id}_${params.reference}_aligned.fastq\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bwacov_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "samToBam_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "publishDir \"/path/to/forward-and-reverse/reads/${sample_id}/SymbiontAssembly/${params.reference}/Alignment\", mode: 'copy'",
            "tag \"${sample_id}\"",
            "tag \"${params.reference}\"",
            "label params.label",
            "label 'wga'"
        ],
        "when": "",
        "stub": ""
    },
    "compressSamToFastq": {
        "name_process": "compressSamToFastq",
        "string_process": "\nprocess compressSamToFastq {\n    publishDir \"/path/to/forward-and-reverse/reads/${sample_id}/SymbiontAssembly/${params.reference}/Alignment\", mode: 'copy'\n    tag \"${sample_id}\"\n    tag \"${params.reference}\"\n    label params.label\n    label 'tabix'\n\n    input:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_aligned_sort.bam\"), file(\"${sample_id}_${params.reference}_aligned_sort.bam.bai\"),file(\"${sample_id}_${params.reference}_aligned.fastq\") from samToBam_ch\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_aligned.fastq.gz\") into samToFastq_ch_gz\n\n    script:\n    \"\"\"\n    bgzip -@ ${task.cpus} ${sample_id}_${params.reference}_aligned.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    bgzip -@ ${task.cpus} ${sample_id}_${params.reference}_aligned.fastq\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samToBam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "samToFastq_ch_gz"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "publishDir \"/path/to/forward-and-reverse/reads/${sample_id}/SymbiontAssembly/${params.reference}/Alignment\", mode: 'copy'",
            "tag \"${sample_id}\"",
            "tag \"${params.reference}\"",
            "label params.label",
            "label 'tabix'"
        ],
        "when": "",
        "stub": ""
    },
    "spades": {
        "name_process": "spades",
        "string_process": "\nprocess spades {\n    publishDir \"/mnt/genomedata/Nextflow_assemblies/sequences/${sample_id}/SymbiontAssembly/${params.reference}/Spades\", mode: 'copy'\n    tag \"${sample_id}\"\n    tag \"${params.reference}\"\n    cpus = 28\n    label 'wga'\n\n    input:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_bbmap_mapped.fastq.gz\") from samToFastq_ch_gz\n    tuple val(sample_id), file(\"${sample_id}_R1R2_PEARoutput.unassembled.forward.fastq\"), file(\"${sample_id}_R1R2_PEARoutput.unassembled.reverse.fastq\") into pear_unassembled\n    tuple val(sample_id), file (\"${sample_id}_R1R2_PEARoutput.discarded.fastq\") into pear_ch_discarded\n\n\n    output:\n    tuple val(sample_id), path(\"${sample_id}_SPADESoutput/${sample_id}_${params.reference}_scaffolds.fasta\") into spades_ch\n\n    script:\n    \"\"\"\n    spades -m 120 -t ${task.cpus} -k 21,33,55,77,99,127 \\\n    -1 ${sample_id}_R1R2_PEARoutput.unassembled.forward.fastq.gz \\\n    -2 ${sample_id}_R1R2_PEARoutput.unassembled.reverse.fastq.gz \\\n    --merged ${sample_id}_${params.reference}_bbmap_mapped.fastq.gz \\\n    -s ${sample_id}_R1R2_PEARoutput.discarded.fastq.gz \\\n    -o ${sample_id}_SPADESoutput\n    mv ${sample_id}_SPADESoutput/scaffolds.fasta ${sample_id}_SPADESoutput/${sample_id}_${params.reference}_scaffolds.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    spades -m 120 -t ${task.cpus} -k 21,33,55,77,99,127 \\\n    -1 ${sample_id}_R1R2_PEARoutput.unassembled.forward.fastq.gz \\\n    -2 ${sample_id}_R1R2_PEARoutput.unassembled.reverse.fastq.gz \\\n    --merged ${sample_id}_${params.reference}_bbmap_mapped.fastq.gz \\\n    -s ${sample_id}_R1R2_PEARoutput.discarded.fastq.gz \\\n    -o ${sample_id}_SPADESoutput\n    mv ${sample_id}_SPADESoutput/scaffolds.fasta ${sample_id}_SPADESoutput/${sample_id}_${params.reference}_scaffolds.fasta\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "SPAdes"
        ],
        "tools_url": [
            "https://bio.tools/spades"
        ],
        "tools_dico": [
            {
                "name": "SPAdes",
                "uri": "https://bio.tools/spades",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "St. Petersburg genome assembler \u2013 is intended for both standard isolates and single-cell MDA bacteria assemblies. SPAdes 3.9 works with Illumina or IonTorrent reads and is capable of providing hybrid assemblies using PacBio, Oxford Nanopore and Sanger reads. Additional contigs can be provided and can be used as long reads.",
                "homepage": "http://cab.spbu.ru/software/spades/"
            }
        ],
        "inputs": [
            "samToFastq_ch_gz",
            "sample_id",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [
            "spades_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "publishDir \"/mnt/genomedata/Nextflow_assemblies/sequences/${sample_id}/SymbiontAssembly/${params.reference}/Spades\", mode: 'copy'",
            "tag \"${sample_id}\"",
            "tag \"${params.reference}\"",
            "cpus = 28",
            "label 'wga'"
        ],
        "when": "",
        "stub": ""
    },
    "compressSPADES": {
        "name_process": "compressSPADES",
        "string_process": "\nprocess compressSPADES {\n    publishDir \"/mnt/genomedata/Nextflow_assemblies/sequences/${sample_id}/SymbiontAssembly/${params.reference}/Spades\", mode: 'copy'\n    tag \"${sample_id}\"\n    tag \"${params.reference}\"\n    label params.label\n    label 'wga'\n\n    input:\n    tuple val(sample_id), path(\"${sample_id}_SPADESoutput/${sample_id}_${params.reference}_scaffolds.fasta\") from spades_ch\n\n    output:\n    tuple val(sample_id), path(\"${sample_id}_SPADESoutput/${sample_id}_${params.reference}_scaffolds.fasta.gz\") into spades_ch_gz\n\n    script:\n    \"\"\"\n    bgzip -@ ${task.cpus} ${sample_id}_SPADESoutput/${sample_id}_${params.reference}_scaffolds.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    bgzip -@ ${task.cpus} ${sample_id}_SPADESoutput/${sample_id}_${params.reference}_scaffolds.fasta\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "spades_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "spades_ch_gz"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "publishDir \"/mnt/genomedata/Nextflow_assemblies/sequences/${sample_id}/SymbiontAssembly/${params.reference}/Spades\", mode: 'copy'",
            "tag \"${sample_id}\"",
            "tag \"${params.reference}\"",
            "label params.label",
            "label 'wga'"
        ],
        "when": "",
        "stub": ""
    },
    "GapFiller": {
        "name_process": "GapFiller",
        "string_process": "\nprocess GapFiller {\n    tag \"${sample_id}\"\n    tag \"${params.reference}\"\n    label params.label\n    label 'mtg'\n\n    input:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_assembly.fasta.gz\") from minia_deNovo_ch_gz\n    tuple val(sample_id), path(sample_files) from reads_mindTheGap\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_gapFilled.insertions.fasta\"),file(\"${sample_id}_${params.reference}_gapFilled.gfa\"), file(\"${sample_id}_${params.reference}_gapFilled.info.txt\"), file(\"${sample_id}_${params.reference}_gapFilled.h5\"), file(\"${sample_id}_${params.reference}_gapFilled_seed_dictionary.fasta\") into gap_filler_ch\n\n    script:\n    \"\"\"\n    cat $sample_files > ${sample_id}_reads.fastq.gz\n\n    MindTheGap fill \\\n    -nb-cores ${task.cpus} \\\n    -in ${sample_id}_reads.fastq.gz \\\n    -contig ${sample_id}_${params.reference}_assembly.fasta.gz \\\n    -kmer-size 51 \\\n    -abundance-min 5 \\\n    -max-nodes 300 \\\n    -max-length 50000 \\\n    -out ${sample_id}_${params.reference}_gapFilled\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    cat $sample_files > ${sample_id}_reads.fastq.gz\n\n    MindTheGap fill \\\n    -nb-cores ${task.cpus} \\\n    -in ${sample_id}_reads.fastq.gz \\\n    -contig ${sample_id}_${params.reference}_assembly.fasta.gz \\\n    -kmer-size 51 \\\n    -abundance-min 5 \\\n    -max-nodes 300 \\\n    -max-length 50000 \\\n    -out ${sample_id}_${params.reference}_gapFilled\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "MindTheGap"
        ],
        "tools_url": [
            "https://bio.tools/mindthegap"
        ],
        "tools_dico": [
            {
                "name": "MindTheGap",
                "uri": "https://bio.tools/mindthegap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2975",
                                "term": "Nucleic acid sequence (raw)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2977",
                                "term": "Nucleic acid sequence"
                            }
                        ]
                    }
                ],
                "description": "Performs detection and assembly of DNA insertion variants in NGS read datasets with respect to a reference genome.",
                "homepage": "https://gatb.inria.fr/software/mind-the-gap/"
            }
        ],
        "inputs": [
            "minia_deNovo_ch_gz",
            "reads_mindTheGap"
        ],
        "nb_inputs": 2,
        "outputs": [
            "gap_filler_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "tag \"${sample_id}\"",
            "tag \"${params.reference}\"",
            "label params.label",
            "label 'mtg'"
        ],
        "when": "",
        "stub": ""
    },
    "compressGapFiller": {
        "name_process": "compressGapFiller",
        "string_process": "\nprocess compressGapFiller {\n    publishDir \"/path/to/forward-and-reverse/reads/${sample_id}/SymbiontAssembly/${params.reference}/GapFilled\", mode: 'copy'\n    tag \"${sample_id}\"\n    tag \"${params.reference}\"\n    label params.label\n    label 'tabix'\n\n    input:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_gapFilled.insertions.fasta\"),file(\"${sample_id}_${params.reference}_gapFilled.gfa\"), file(\"${sample_id}_${params.reference}_gapFilled_seed_dictionary.fasta\") from gap_filler_ch\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_gapFilled.insertions.fasta.gz\"),file(\"${sample_id}_${params.reference}_gapFilled.gfa.gz\"), file(\"${sample_id}_${params.reference}_gapFilled_seed_dictionary.fasta.gz\") into gap_filler_ch_gz\n\n    script:\n    \"\"\"\n    bgzip -@ ${task.cpus} ${sample_id}_${params.reference}_gapFilled.insertions.fasta\n    bgzip -@ ${task.cpus} ${sample_id}_${params.reference}_gapFilled.gfa\n    bgzip -@ ${task.cpus} ${sample_id}_${params.reference}_gapFilled_seed_dictionary.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    bgzip -@ ${task.cpus} ${sample_id}_${params.reference}_gapFilled.insertions.fasta\n    bgzip -@ ${task.cpus} ${sample_id}_${params.reference}_gapFilled.gfa\n    bgzip -@ ${task.cpus} ${sample_id}_${params.reference}_gapFilled_seed_dictionary.fasta\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gap_filler_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "gap_filler_ch_gz"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "publishDir \"/path/to/forward-and-reverse/reads/${sample_id}/SymbiontAssembly/${params.reference}/GapFilled\", mode: 'copy'",
            "tag \"${sample_id}\"",
            "tag \"${params.reference}\"",
            "label params.label",
            "label 'tabix'"
        ],
        "when": "",
        "stub": ""
    },
    "blastx": {
        "name_process": "blastx",
        "string_process": "process blastx {\n\n    publishDir 'genomedata/${sample_id}/SymbiontAssembly/${params.reference}/', mode: 'copy'\n\n    input:\n                                                                                                                                                                                         \n    tuple val(sample_id), file \"${sample_id}_scaffolds.fasta.gz\" from spades_ch\n    path db from params.whatevernameis\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_blastxout.xml\") into blastx_ch\n\n    script:\n    \"\"\"\n    blastx \\\n    -query ${sample_id}_scaffolds.fasta.gz \\\n    -db ${db} \\\n    -out ${sample_id}_blastxout.xml \\\n    -outfmt 5\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    blastx \\\n    -query ${sample_id}_scaffolds.fasta.gz \\\n    -db ${db} \\\n    -out ${sample_id}_blastxout.xml \\\n    -outfmt 5\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "spades_ch",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [
            "blastx_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "publishDir 'genomedata/${sample_id}/SymbiontAssembly/${params.reference}/', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "rps": {
        "name_process": "rps",
        "string_process": "\nprocess rps {\n\n    publishDir 'genomedata/${sample_id}/SymbiontAssembly/${params.reference}/', mode: 'copy'\n\n    input:\n    tuple val(sample_id), file(\"${sample_id}_blastxout.xml\") from blastx_ch\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_rps_parsed_blast.txt\") into parsed_blast_ch\n\n    script:\n    \"\"\"\n    rps.py \\\n    ${sample_id}_blastxout.xml > \\\n    ${sample_id}_rps_parsed_initblast.txt\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    rps.py \\\n    ${sample_id}_blastxout.xml > \\\n    ${sample_id}_rps_parsed_initblast.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blastx_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "parsed_blast_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "publishDir 'genomedata/${sample_id}/SymbiontAssembly/${params.reference}/', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pullScaffolds": {
        "name_process": "pullScaffolds",
        "string_process": "\nprocess pullScaffolds {\n\n    publishDir 'genomedata/${sample_id}/SymbiontAssembly/${params.reference}/', mode: 'copy'\n   \n    input:\n    tuple val(sample_id), file(\"${sample_id}_scaffolds.fasta.gz\") from spades_ch\n    tuple val(sample_id), file(\"${sample_id}_rps_parsed_blast.txt\") from parsed_blast_ch\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_scaffold_candidates.fasta.gz\") into scaffold_candidates_ch\n\n    script:\n    \"\"\"\n    gunzip ${sample_id}_scaffolds.fasta.gz\n    grab_seq.pl ${sample_id}_scaffolds.fasta ${sample_id}_rps_parsed_blast.txt > ${sample_id}_scaffold_candidates.fasta\n    bgzip -@ ${task.cpus} ${sample_id}_scaffold_candidates.fasta\n    bgzip -@ ${task.cpus} ${sample_id}_scaffolds.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    gunzip ${sample_id}_scaffolds.fasta.gz\n    grab_seq.pl ${sample_id}_scaffolds.fasta ${sample_id}_rps_parsed_blast.txt > ${sample_id}_scaffold_candidates.fasta\n    bgzip -@ ${task.cpus} ${sample_id}_scaffold_candidates.fasta\n    bgzip -@ ${task.cpus} ${sample_id}_scaffolds.fasta\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "spades_ch",
            "parsed_blast_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "scaffold_candidates_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "publishDir 'genomedata/${sample_id}/SymbiontAssembly/${params.reference}/', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "scaffoldAlignment": {
        "name_process": "scaffoldAlignment",
        "string_process": "\nprocess scaffoldAlignment {\n    publishDir \"/path/to/forward-and-reverse/reads/${sample_id}/SymbiontAssembly/${params.reference}/Alignment\", mode: 'copy'\n    tag \"${sample_id}\"\n    tag \"${params.reference}\"\n    label params.label\n    label 'wga'\n\n    input:\n    tuple val(sample_id), file(\"${sample_id}_R1_paired.fastq.gz\"), file(\"${sample_id}_R2_paired.fastq.gz\") from trimmed_paired_reads_ch\n    tuple val(sample_id), file(\"${sample_id}_R1_unpaired.fastq.gz\"), file(\"${sample_id}_R2_unpaired.fastq.gz\") from trimmed_unpaired_reads_ch\n    path ref_genome from params.ref_genome\n    path amb from params.bwa_amb\n    path ann from params.bwa_ann\n    path bwt from params.bwa_bwt\n    path pac from params.bwa_pac\n    path sa from params.bwa_sa\n    \n    output:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_aligned.sam\") into bwacov_ch\n\n    script:\n    \"\"\"\n    bwa mem -p -t ${task.cpus} \\\n    ${ref_genome} \\\n    <(cat ${sample_id}_R1_paired.fastq.gz ${sample_id}_R2_paired.fastq.gz) <(cat ${sample_id}_R1_unpaired.fastq.gz ${sample_id}_R2_unpaired.fastq.gz) \\\n    > ${sample_id}_${params.reference}_aligned.sam \n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    bwa mem -p -t ${task.cpus} \\\n    ${ref_genome} \\\n    <(cat ${sample_id}_R1_paired.fastq.gz ${sample_id}_R2_paired.fastq.gz) <(cat ${sample_id}_R1_unpaired.fastq.gz ${sample_id}_R2_unpaired.fastq.gz) \\\n    > ${sample_id}_${params.reference}_aligned.sam \n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "trimmed_paired_reads_ch",
            "trimmed_unpaired_reads_ch",
            "params",
            "params",
            "params",
            "params",
            "params",
            "params"
        ],
        "nb_inputs": 8,
        "outputs": [
            "bwacov_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "publishDir \"/path/to/forward-and-reverse/reads/${sample_id}/SymbiontAssembly/${params.reference}/Alignment\", mode: 'copy'",
            "tag \"${sample_id}\"",
            "tag \"${params.reference}\"",
            "label params.label",
            "label 'wga'"
        ],
        "when": "",
        "stub": ""
    },
    "minia": {
        "name_process": "minia",
        "string_process": "\nprocess minia{\n    tag \"${sample_id}\"\n    label params.label\n    tag \"${params.reference}\"\n    label 'GATB'\n\n    input:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_aligned.fastq.gz\") from samToFastq_ch_gz\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_assembly.fa\") into minia_deNovo_ch\n\n    script:\n    \"\"\"\n    gatb --kmer-sizes 21,33,55,77,99,127 --nb-cores ${task.cpus} -s ${sample_id}_${params.reference}_aligned.fastq.gz\n\n    mv assembly.fasta ${sample_id}_${params.reference}_assembly.fa\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    gatb --kmer-sizes 21,33,55,77,99,127 --nb-cores ${task.cpus} -s ${sample_id}_${params.reference}_aligned.fastq.gz\n\n    mv assembly.fasta ${sample_id}_${params.reference}_assembly.fa\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "GATB"
        ],
        "tools_url": [
            "https://bio.tools/gatb"
        ],
        "tools_dico": [
            {
                "name": "GATB",
                "uri": "https://bio.tools/gatb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "C++ library of high level functions designed to benefit from recent advances in NGS data structures for handling huge datasets of sequencing data.",
                "homepage": "http://gatb.inria.fr/"
            }
        ],
        "inputs": [
            "samToFastq_ch_gz"
        ],
        "nb_inputs": 1,
        "outputs": [
            "minia_deNovo_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "tag \"${sample_id}\"",
            "label params.label",
            "tag \"${params.reference}\"",
            "label 'GATB'"
        ],
        "when": "",
        "stub": ""
    },
    "compressMinia": {
        "name_process": "compressMinia",
        "string_process": "\nprocess compressMinia {\n    publishDir \"/path/to/forward-and-reverse/reads/${sample_id}/SymbiontAssembly/${params.reference}/Minia\", mode: 'copy'\n    tag \"${sample_id}\"\n    tag \"${params.reference}\"\n    label params.label\n    label 'tabix'\n\n    input:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_assembly.fasta\") from minia_deNovo_ch\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_${params.reference}_assembly.fasta.gz\") into minia_deNovo_ch_gz\n\n    script:\n    \"\"\"\n    bgzip -@ ${task.cpus} ${sample_id}_${params.reference}_assembly.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    bgzip -@ ${task.cpus} ${sample_id}_${params.reference}_assembly.fasta\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "minia_deNovo_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "minia_deNovo_ch_gz"
        ],
        "nb_outputs": 1,
        "name_workflow": "ashdederich__Symbiont_genomeAssembly",
        "directive": [
            "publishDir \"/path/to/forward-and-reverse/reads/${sample_id}/SymbiontAssembly/${params.reference}/Minia\", mode: 'copy'",
            "tag \"${sample_id}\"",
            "tag \"${params.reference}\"",
            "label params.label",
            "label 'tabix'"
        ],
        "when": "",
        "stub": ""
    }
}
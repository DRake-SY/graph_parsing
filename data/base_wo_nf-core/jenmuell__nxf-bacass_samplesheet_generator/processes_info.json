{
    "MERGE_NANOPORE_DATA": {
        "name_process": "MERGE_NANOPORE_DATA",
        "string_process": "\nprocess MERGE_NANOPORE_DATA {\n    tag \"merge nanopore data from ${ont_reads_input_ch}\"\n    publishDir \"${params.ont_reads_outdir}\", mode: 'copy'\n    \n    input:\n        path ont_reads_input_ch\n        each nanopore\n    \n    output:\n        file 'barcode*.fastq'\n        \n\n    script:\n    \"\"\"\n    echo cat ${ont_reads_input_ch}/${nanopore}/PAE*.fastq > ${nanopore}.fastq\n    cat ${ont_reads_input_ch}/${nanopore}/PAE*.fastq > ${nanopore}.fastq\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    echo cat ${ont_reads_input_ch}/${nanopore}/PAE*.fastq > ${nanopore}.fastq\n    cat ${ont_reads_input_ch}/${nanopore}/PAE*.fastq > ${nanopore}.fastq\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ont_reads_input_ch",
            "nanopore"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jenmuell__nxf-bacass_samplesheet_generator",
        "directive": [
            "tag \"merge nanopore data from ${ont_reads_input_ch}\"",
            "publishDir \"${params.ont_reads_outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "GENERATE_SAMPLESHEET_WITH_LONG": {
        "name_process": "GENERATE_SAMPLESHEET_WITH_LONG",
        "string_process": "\nprocess GENERATE_SAMPLESHEET_WITH_LONG {\n    tag \"generate samplesheet for long read assembly\"\n    publishDir params.outdir, mode: 'copy'\n\n\n    output:\n        file \"samplesheet_${pipeline}.csv\"\n    \n    script:\n    \"\"\"\n    python3 ${baseDir}/samplesheet_generation.py null $ont_reads_outdir null ${launchDir}/${params.mapping_file} $reads $pipeline $samplesheet_header $genomesize > samplesheet_${pipeline}.csv\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    python3 ${baseDir}/samplesheet_generation.py null $ont_reads_outdir null ${launchDir}/${params.mapping_file} $reads $pipeline $samplesheet_header $genomesize > samplesheet_${pipeline}.csv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jenmuell__nxf-bacass_samplesheet_generator",
        "directive": [
            "tag \"generate samplesheet for long read assembly\"",
            "publishDir params.outdir, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "GENERATE_SAMPLESHEET_WITH_HYBRID": {
        "name_process": "GENERATE_SAMPLESHEET_WITH_HYBRID",
        "string_process": "\nprocess GENERATE_SAMPLESHEET_WITH_HYBRID {\n    tag \"generate samplesheet for hybrid assembly\"\n    publishDir params.outdir, mode: 'copy'\n\n    input:  \n        path int_reads_input_ch                                      \n\n    output:\n        file \"samplesheet_${pipeline}.csv\"\n    \n    script:\n    \"\"\"\n    python3 ${baseDir}/samplesheet_generation.py $int_reads_input_ch $ont_reads_outdir null ${launchDir}/${params.mapping_file} $reads $pipeline $samplesheet_header $genomesize > samplesheet_${pipeline}.csv \n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    python3 ${baseDir}/samplesheet_generation.py $int_reads_input_ch $ont_reads_outdir null ${launchDir}/${params.mapping_file} $reads $pipeline $samplesheet_header $genomesize > samplesheet_${pipeline}.csv \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "int_reads_input_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jenmuell__nxf-bacass_samplesheet_generator",
        "directive": [
            "tag \"generate samplesheet for hybrid assembly\"",
            "publishDir params.outdir, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "GENERATE_SAMPLESHEET_WITH_SHORT": {
        "name_process": "GENERATE_SAMPLESHEET_WITH_SHORT",
        "string_process": "\nprocess GENERATE_SAMPLESHEET_WITH_SHORT {\n    tag \"generate samplesheet for short read assembly\"\n    publishDir params.outdir, mode: 'copy'\n\n    input:\n        path int_reads_input_ch\n    \n    output:\n        file \"samplesheet_${pipeline}.csv\"\n\n    script:\n    int_dir = int_reads_input_ch.toString()\n    \"\"\"\n    python3 ${baseDir}/samplesheet_generation.py ${launchDir}/${int_reads_input} null null ${launchDir}/${params.mapping_file} $reads $pipeline $samplesheet_header $genomesize > samplesheet_${pipeline}.csv  \n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    int_dir = int_reads_input_ch.toString()\n    \"\"\"\n    python3 ${baseDir}/samplesheet_generation.py ${launchDir}/${int_reads_input} null null ${launchDir}/${params.mapping_file} $reads $pipeline $samplesheet_header $genomesize > samplesheet_${pipeline}.csv  \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "int_reads_input_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jenmuell__nxf-bacass_samplesheet_generator",
        "directive": [
            "tag \"generate samplesheet for short read assembly\"",
            "publishDir params.outdir, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "GENERATE_SAMPLESHEET_PLASMIDENT": {
        "name_process": "GENERATE_SAMPLESHEET_PLASMIDENT",
        "string_process": "\nprocess GENERATE_SAMPLESHEET_PLASMIDENT {\n    tag \"generate samplesheet for plasmIDent pipeline\"\n    publishDir params.outdir, mode: 'copy'\n\n    output:\n        file \"samplesheet_${pipeline}.tsv\"\n    \n    \n    script:\n    \"\"\"\n    python3 ${baseDir}/samplesheet_generation.py null $ont_reads_outdir ${params.plas_assemblies} ${launchDir}/${params.mapping_file} null $pipeline $samplesheet_header $genomesize > samplesheet_${pipeline}.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    python3 ${baseDir}/samplesheet_generation.py null $ont_reads_outdir ${params.plas_assemblies} ${launchDir}/${params.mapping_file} null $pipeline $samplesheet_header $genomesize > samplesheet_${pipeline}.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jenmuell__nxf-bacass_samplesheet_generator",
        "directive": [
            "tag \"generate samplesheet for plasmIDent pipeline\"",
            "publishDir params.outdir, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_PLASMIDENT": {
        "name_process": "RUN_PLASMIDENT",
        "string_process": "\nprocess RUN_PLASMIDENT {\n    tag \"run plasmIDent pipeline\"\n\n    input:\n        file samplesheet_plasmident\n    \n    script:\n    \"\"\"\n    sudo nextflow run imgag/plasmIDent --input $samplesheet_plasmident --outDir ${params.plas_outdir} -profile docker\n    \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "    \"\"\"\n    sudo nextflow run imgag/plasmIDent --input $samplesheet_plasmident --outDir ${params.plas_outdir} -profile docker\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet_plasmident"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jenmuell__nxf-bacass_samplesheet_generator",
        "directive": [
            "tag \"run plasmIDent pipeline\""
        ],
        "when": "",
        "stub": ""
    },
    "RUN_UNICYCLER": {
        "name_process": "RUN_UNICYCLER",
        "string_process": "\nprocess RUN_UNICYCLER {\n    tag \"run unicycler\"\n    publishDir \"${params.outdir}/results_unicycler\", mode: 'copy'\n    conda \"unicycler\"\n\n    input: \n        file samplesheet \n        val reads_process\n        file ont_files\n    \n    output:\n        path \"results_unicycler/\" \n    \n    script:\n    if (reads_process == 'short')\n    \"\"\"\n    conda activate unicycler\n    while IFS=\",\" read sample read1 read2; \\\n     do unicycler -1 \\${read1} -2 \\${read2} -o \\${sample}; \\\n     done < ${samplesheet}\n    conda deactivate\n    \"\"\"\n    else if (reads_process == 'long')\n    \"\"\"\n    conda activate unicycler\n    while IFS=\",\" read sample longread; \\\n     do unicycler -l \\${longread} -o \\${sample}; \\\n     done < ${samplesheet}\n    conda deactivate\n    \"\"\"\n    else if (reads_process == 'hybrid')\n    \"\"\"\n    conda activate unicycler\n    while IFS=\",\" read sample read1 read2 longread; \\\n     do unicycler -1 \\${read1} -2 \\${read2} -l \\${longread} -o \\${sample}; \\\n     done < ${samplesheet}\n    conda deactivate\n    \"\"\"\n    else \n        error \"${ANSI_RED}Unicycler run error: ${reads_process} is not one of the valid options: short, long, hybrid${ANSI_RESET}\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    if (reads_process == 'short')\n    \"\"\"\n    conda activate unicycler\n    while IFS=\",\" read sample read1 read2; \\\n     do unicycler -1 \\${read1} -2 \\${read2} -o \\${sample}; \\\n     done < ${samplesheet}\n    conda deactivate\n    \"\"\"\n    else if (reads_process == 'long')\n    \"\"\"\n    conda activate unicycler\n    while IFS=\",\" read sample longread; \\\n     do unicycler -l \\${longread} -o \\${sample}; \\\n     done < ${samplesheet}\n    conda deactivate\n    \"\"\"\n    else if (reads_process == 'hybrid')\n    \"\"\"\n    conda activate unicycler\n    while IFS=\",\" read sample read1 read2 longread; \\\n     do unicycler -1 \\${read1} -2 \\${read2} -l \\${longread} -o \\${sample}; \\\n     done < ${samplesheet}\n    conda deactivate\n    \"\"\"\n    else \n        error \"${ANSI_RED}Unicycler run error: ${reads_process} is not one of the valid options: short, long, hybrid${ANSI_RESET}\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "ANACONDA"
        ],
        "tools_url": [
            "https://bio.tools/anaconda"
        ],
        "tools_dico": [
            {
                "name": "ANACONDA",
                "uri": "https://bio.tools/anaconda",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3658",
                                    "term": "Statistical inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software package specially developed for the study of genes\u2019 primary structure. It uses gene sequences downloaded from public databases, as FASTA and GenBank, and it applies a set of statistical and visualization methods in different ways, to reveal information about codon context, codon usage, nucleotide repeats within open reading frames (ORFeome) and others.",
                "homepage": "http://bioinformatics.ua.pt/software/anaconda/"
            }
        ],
        "inputs": [
            "samplesheet",
            "reads_process",
            "ont_files"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jenmuell__nxf-bacass_samplesheet_generator",
        "directive": [
            "tag \"run unicycler\"",
            "publishDir \"${params.outdir}/results_unicycler\", mode: 'copy'",
            "conda \"unicycler\""
        ],
        "when": "",
        "stub": ""
    }
}
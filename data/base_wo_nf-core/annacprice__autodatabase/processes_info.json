{
    "autoDatabase_getTaxonomy": {
        "name_process": "autoDatabase_getTaxonomy",
        "string_process": "process autoDatabase_getTaxonomy {\n       \n                                                                  \n                 \n                                                  \n                    \n      \n\n    output:\n    path(\"names.dmp\", emit: ncbi_names)\n    path(\"nodes.dmp\", emit: ncbi_nodes)\n\n    script:\n    \"\"\"\n    wget ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump_archive/taxdmp_${params.ncbiDate}.zip\n    unzip taxdmp_${params.ncbiDate}.zip\n    largestTax=`sort -t't' -k1nr names.dmp | head -1 | cut -f1`\n    tomidaeTax=\\$((largestTax+1))\n    echo -e \"\\$tomidaeTax\\t|\\tMycobacterium tomidae\\t|\\t\\t|\\tscientific name\\t|\" >> names.dmp\n    echo -e \"\\$tomidaeTax\\t|\\t120793\\t|\\tspecies\\t|\\t\\t|\\t11\\t|\\t1\\t|\\t1\\t|\\t1\\t|\\t1\\t|\\t1\\t|\\t1\\t|\\t1\\t|\" >> nodes.dmp\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    wget ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump_archive/taxdmp_${params.ncbiDate}.zip\n    unzip taxdmp_${params.ncbiDate}.zip\n    largestTax=`sort -t't' -k1nr names.dmp | head -1 | cut -f1`\n    tomidaeTax=\\$((largestTax+1))\n    echo -e \"\\$tomidaeTax\\t|\\tMycobacterium tomidae\\t|\\t\\t|\\tscientific name\\t|\" >> names.dmp\n    echo -e \"\\$tomidaeTax\\t|\\t120793\\t|\\tspecies\\t|\\t\\t|\\t11\\t|\\t1\\t|\\t1\\t|\\t1\\t|\\t1\\t|\\t1\\t|\\t1\\t|\\t1\\t|\" >> nodes.dmp\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "annacprice__autodatabase",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "autoDatabase_addTaxon": {
        "name_process": "autoDatabase_addTaxon",
        "string_process": "\nprocess autoDatabase_addTaxon {\n       \n                                                                                         \n                                                             \n                          \n                                                                                          \n      \n   \n                                                                                                            \n\n    input:\n    tuple val(speciesname), path(fasta), path(names)\n\n    output:\n    path(\"*.f*\", emit: tax_fasta)\n\n    script:\n    \"\"\"\n    taxadd -i \"${fasta}\" -o . -t \"${speciesname}\"\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    taxadd -i \"${fasta}\" -o . -t \"${speciesname}\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "speciesname",
            "fasta",
            "names"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "annacprice__autodatabase",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "autoDatabase_mash": {
        "name_process": "autoDatabase_mash",
        "string_process": "\nprocess autoDatabase_mash {\n       \n                                               \n                                          \n                                                             \n                                                                                                \n      \n    \n    publishDir \"${params.newDatabase}/${task.process.replaceAll(\":\", \"_\")}\", pattern: '*_mashdist.txt', mode: 'copy'\n\n    input:\n    tuple val(taxid), path(taxfiles)\n\n    output:\n    tuple val(taxid), path(\"${taxid}_mashdist.txt\"), emit: mash_dist\n\n    script:\n    \"\"\"\n    mash sketch -o ref *.f*\n    mash dist ref.msh ref.msh > ${taxid}_mashdist.txt\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    mash sketch -o ref *.f*\n    mash dist ref.msh ref.msh > ${taxid}_mashdist.txt\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Mash"
        ],
        "tools_url": [
            "https://bio.tools/mash"
        ],
        "tools_dico": [
            {
                "name": "Mash",
                "uri": "https://bio.tools/mash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2533",
                            "term": "DNA mutation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast genome and metagenome distance estimation using MinHash.",
                "homepage": "https://github.com/marbl/mash"
            }
        ],
        "inputs": [
            "taxid",
            "taxfiles"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "annacprice__autodatabase",
        "directive": [
            "publishDir \"${params.newDatabase}/${task.process.replaceAll(\":\", \"_\")}\", pattern: '*_mashdist.txt', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "autoDatabase_qc": {
        "name_process": "autoDatabase_qc",
        "string_process": "\nprocess autoDatabase_qc {\n       \n                                                                                                               \n                                             \n                                                          \n                                                                                                \n      \n\n    publishDir \"${params.newDatabase}/${task.process.replaceAll(\":\", \"_\")}\", pattern: '*.txt', mode: 'copy'\n\n    input:\n    tuple val(taxid), path(mashdist)\n\n    output:\n    tuple val(taxid), path(\"${taxid}_clean.txt\"), emit: quality_list\n\n    script:\n    \"\"\"\n    fastaselect -i \"${mashdist}\" -r \"${params.modeRange}\"\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    fastaselect -i \"${mashdist}\" -r \"${params.modeRange}\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "taxid",
            "mashdist"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "annacprice__autodatabase",
        "directive": [
            "publishDir \"${params.newDatabase}/${task.process.replaceAll(\":\", \"_\")}\", pattern: '*.txt', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "autoDatabase_cleanFasta": {
        "name_process": "autoDatabase_cleanFasta",
        "string_process": "\nprocess autoDatabase_cleanFasta {\n       \n                                                              \n                                                    \n                   \"assemblies/*.f*\" \n                                                                                                                      \n      \n\n    publishDir \"${params.newDatabase}/${task.process.replaceAll(\":\", \"_\")}\", pattern: 'assemblies/*.f*', mode: 'copy'\n\n    input:\n    tuple val(taxid), path(txt), path(fasta)\n    \n    output:\n    path \"assemblies/*.f*\", emit: database_fasta optional true\n   \n    script:\n    \"\"\"\n    mkdir assemblies\n\n    for x in *.f*; do\n        if grep -Fxq \\$x ${taxid}_clean.txt\n        then\n            mv \\$x assemblies/   \n        fi\n    done    \n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    mkdir assemblies\n\n    for x in *.f*; do\n        if grep -Fxq \\$x ${taxid}_clean.txt\n        then\n            mv \\$x assemblies/   \n        fi\n    done    \n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "taxid",
            "txt",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "annacprice__autodatabase",
        "directive": [
            "publishDir \"${params.newDatabase}/${task.process.replaceAll(\":\", \"_\")}\", pattern: 'assemblies/*.f*', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "autoDatabase_kraken2Build": {
        "name_process": "autoDatabase_kraken2Build",
        "string_process": "\nprocess autoDatabase_kraken2Build {\n       \n                                                           \n                        \n                                                \n                          \n      \n\n    publishDir \"${params.newDatabase}/${task.process.replaceAll(\":\", \"_\")}\", pattern: '*.k2d', mode: 'copy'\n    publishDir \"${params.newDatabase}/${task.process.replaceAll(\":\", \"_\")}\", pattern: 'database.txt', mode: 'copy'\n\n    cpus 24\n\n    input:\n    path(fasta)\n    path(names)\n    path(nodes)\n\n    output:\n    path(\"*.k2d\", emit: kraken2_database)\n    path(\"database.txt\", emit: database_txt)\n\n    script:\n    \"\"\"\n    mkdir taxonomy\n    mv names.dmp nodes.dmp taxonomy\n\n    for file in **.f*; do\n        kraken2-build --add-to-library \\$file --db .\n    done\n\n    kraken2-build --build --threads ${task.cpus} --db .\n    kraken2-inspect --db . > database.txt\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    mkdir taxonomy\n    mv names.dmp nodes.dmp taxonomy\n\n    for file in **.f*; do\n        kraken2-build --add-to-library \\$file --db .\n    done\n\n    kraken2-build --build --threads ${task.cpus} --db .\n    kraken2-inspect --db . > database.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "names",
            "nodes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "annacprice__autodatabase",
        "directive": [
            "publishDir \"${params.newDatabase}/${task.process.replaceAll(\":\", \"_\")}\", pattern: '*.k2d', mode: 'copy'",
            "publishDir \"${params.newDatabase}/${task.process.replaceAll(\":\", \"_\")}\", pattern: 'database.txt', mode: 'copy'",
            "cpus 24"
        ],
        "when": "",
        "stub": ""
    },
    "autoDatabase_krona": {
        "name_process": "autoDatabase_krona",
        "string_process": "\nprocess autoDatabase_krona {\n       \n                                                                                 \n                              \n                                   \n                    \n      \n\n    publishDir \"${params.newDatabase}/${task.process.replaceAll(\":\", \"_\")}\", pattern: 'database.html', mode: 'copy'\n\n    input:\n    path(databasetxt)\n    \n    output:\n    path(\"database.html\", emit: database_html)\n\n    script:\n    \"\"\"\n    ktImportTaxonomy -m 3 -t 5 \"${databasetxt}\" -o database.html\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    ktImportTaxonomy -m 3 -t 5 \"${databasetxt}\" -o database.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "databasetxt"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "annacprice__autodatabase",
        "directive": [
            "publishDir \"${params.newDatabase}/${task.process.replaceAll(\":\", \"_\")}\", pattern: 'database.html', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
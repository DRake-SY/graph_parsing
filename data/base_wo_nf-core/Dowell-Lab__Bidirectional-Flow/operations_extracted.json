{
    "OPERATION_1": {
        "string": "software_versions = Channel.create()",
        "origin": [],
        "gives": [
            [
                "software_versions",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "cramfiles = Channel\n                  .fromPath(params.crams)\n                  .map { file -> tuple((file.simpleName + '.sorted'), file)}",
        "origin": [
            [
                "params.crams",
                "A"
            ]
        ],
        "gives": [
            [
                "cramfiles",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "sorted_bam_file = Channel\n                  .fromPath(params.bams)\n                  .map { file -> tuple((file.simpleName + '.sorted'), file, (file + '.bai'))}",
        "origin": [
            [
                "params.bams",
                "A"
            ]
        ],
        "gives": [
            [
                "sorted_bam_file",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "bam_for_dreg = Channel\n                  .fromPath(params.bams)\n                  .map { file -> tuple((file.simpleName + '.sorted'), file, (file + '.bai'))}",
        "origin": [
            [
                "params.bams",
                "A"
            ]
        ],
        "gives": [
            [
                "bam_for_dreg",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "bam_for_gene_counting = Channel\n                  .fromPath(params.bams)\n                  .map { file -> tuple((file.simpleName + '.sorted'), file, (file + '.bai'))}",
        "origin": [
            [
                "params.bams",
                "A"
            ]
        ],
        "gives": [
            [
                "bam_for_gene_counting",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "tfit_prelim_out = Channel\n        .fromPath(params.prelim_files)\n        .map { file -> tuple((file.simpleName + '.sorted'), file)}",
        "origin": [
            [
                "params.prelim_files",
                "A"
            ]
        ],
        "gives": [
            [
                "tfit_prelim_out",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "dreg_res = Channel\n        .fromPath(params.dreg_results)\n        .map { file -> tuple((file.simpleName + '.sorted'), file)}",
        "origin": [
            [
                "params.dreg_results",
                "A"
            ]
        ],
        "gives": [
            [
                "dreg_res",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "dreg_res_process = Channel.create()",
        "origin": [],
        "gives": [
            [
                "dreg_res_process",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "summary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_10": {
        "string": "software_versions.collectFile(name: \"software_versions_bidir_${output_date}_${workflow.runName}.yaml\", storeDir: \"${params.outdir}/pipeline_info\")",
        "origin": [
            [
                "software_versions",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_11": {
        "string": "tfit_prelim_bg_out_preprocess = prelimtfit_process_bg\n        .join(tfit_prelim_out)",
        "origin": [
            [
                "prelimtfit_process_bg",
                "P"
            ],
            [
                "tfit_prelim_out",
                "P"
            ]
        ],
        "gives": [
            [
                "tfit_prelim_bg_out_preprocess",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "tfit_split_results = post_tfit_bg_split\n        .join(tfit_model_bed_out_split_max5kb)\n        .join(tfit_model_bed_out_split_max10kb)",
        "origin": [
            [
                "post_tfit_bg_split",
                "P"
            ],
            [
                "tfit_model_bed_out_split_max5kb",
                "P"
            ],
            [
                "tfit_model_bed_out_split_max10kb",
                "P"
            ]
        ],
        "gives": [
            [
                "tfit_split_results",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "tfit_prelim_bg_out_preprocess = prelimtfit_process_bg\n        .join(tfit_prelim_out)",
        "origin": [
            [
                "prelimtfit_process_bg",
                "P"
            ],
            [
                "tfit_prelim_out",
                "P"
            ]
        ],
        "gives": [
            [
                "tfit_prelim_bg_out_preprocess",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "tfit_prelim_bg_out = prelimtfit_process_bg\n        .join(tfit_prelim_out)",
        "origin": [
            [
                "prelimtfit_process_bg",
                "P"
            ],
            [
                "tfit_prelim_out",
                "P"
            ]
        ],
        "gives": [
            [
                "tfit_prelim_bg_out",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "dreg_res_process = dreg_bg\n        .join(dreg_res)",
        "origin": [
            [
                "dreg_bg",
                "P"
            ],
            [
                "dreg_res",
                "P"
            ]
        ],
        "gives": [
            [
                "dreg_res_process",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "dreg_res_process = dreg_bg\n        .join(dREG_out)",
        "origin": [
            [
                "dreg_bg",
                "P"
            ],
            [
                "dREG_out",
                "P"
            ]
        ],
        "gives": [
            [
                "dreg_res_process",
                "P"
            ]
        ]
    }
}
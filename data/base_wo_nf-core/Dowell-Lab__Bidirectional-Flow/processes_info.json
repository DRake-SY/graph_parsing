{
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    time '1h'\n\n    output:\n    stdout into software_versions\n\n    script:\n    \"\"\"\n    printf \"bidirectionalflow_version: %s\\n\" ${params.version}\n    printf \"nextflow_version: %s\\n\" ${workflow.nextflow.version}\n    printf \"samtools_version: %s\\n\" \\$(samtools --version | head -1 | awk '{print \\$NF}')\n    printf \"bedtools_version: %s\\n\" \\$(bedtools --version | head -1 | awk -F \" v\" '{print \\$2}')\n    printf \"openmpi_version: %s\\n\" \\$(ompi_info | head -2 | tail -1 | awk '{print \\$NF}')\n    printf \"gcc_version: %s\\n\" \\$(gcc --version | head -1 | awk '{print \\$NF}')\n    printf \"fstitch_version: %s\\n\" \\$(${params.fstitch_path} train --version | head -1)\n    printf \"tfit_version: %s\\n\" \\$(${params.tfit_path} model --version | head -1)\n    printf \"r_version: %s\\n\" \\$(R --version | head -1 | awk '{print \\$3}')\n    printf \"rsubread_version: %s\\n\" \\$(Rscript -e 'library(\"Rsubread\");packageVersion(\"Rsubread\")' 2>&1 | tail -1 | awk '{print \\$NF}')\n    printf \"boost_version: %s\\n\" \\$(ls -d /Users/\\$USER/.local/boost* | head -1 | awk -F \"_\" '{print \\$(NF-2)\".\"\\$(NF-1)\".\"\\$(NF)}')\n    printf \"dreg_version: %s\\n\" \\$(Rscript -e 'library(\"dREG\");packageVersion(\"dREG\")' 2>&1 | tail -1 | awk '{print \\$NF}')\n    printf \"pipeline_hash: %s\\n\" ${workflow.scriptId}\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    printf \"bidirectionalflow_version: %s\\n\" ${params.version}\n    printf \"nextflow_version: %s\\n\" ${workflow.nextflow.version}\n    printf \"samtools_version: %s\\n\" \\$(samtools --version | head -1 | awk '{print \\$NF}')\n    printf \"bedtools_version: %s\\n\" \\$(bedtools --version | head -1 | awk -F \" v\" '{print \\$2}')\n    printf \"openmpi_version: %s\\n\" \\$(ompi_info | head -2 | tail -1 | awk '{print \\$NF}')\n    printf \"gcc_version: %s\\n\" \\$(gcc --version | head -1 | awk '{print \\$NF}')\n    printf \"fstitch_version: %s\\n\" \\$(${params.fstitch_path} train --version | head -1)\n    printf \"tfit_version: %s\\n\" \\$(${params.tfit_path} model --version | head -1)\n    printf \"r_version: %s\\n\" \\$(R --version | head -1 | awk '{print \\$3}')\n    printf \"rsubread_version: %s\\n\" \\$(Rscript -e 'library(\"Rsubread\");packageVersion(\"Rsubread\")' 2>&1 | tail -1 | awk '{print \\$NF}')\n    printf \"boost_version: %s\\n\" \\$(ls -d /Users/\\$USER/.local/boost* | head -1 | awk -F \"_\" '{print \\$(NF-2)\".\"\\$(NF-1)\".\"\\$(NF)}')\n    printf \"dreg_version: %s\\n\" \\$(Rscript -e 'library(\"dREG\");packageVersion(\"dREG\")' 2>&1 | tail -1 | awk '{print \\$NF}')\n    printf \"pipeline_hash: %s\\n\" ${workflow.scriptId}\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "software_versions"
        ],
        "nb_outputs": 1,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "time '1h'"
        ],
        "when": "",
        "stub": ""
    },
    "cram_to_bam": {
        "name_process": "cram_to_bam",
        "string_process": " process cram_to_bam {\n     cpus 16\n     queue 'short'\n     memory '5 GB'\n     time '1h30m'\n     tag \"$prefix\"\n\n     input:\n     tuple val(prefix),file(cram) from cramfiles\n\n     output:\n     tuple val(prefix), file(\"${prefix}.sorted.bam\"), file(\"${prefix}.sorted.bam.bai\") into sorted_bam_file, bam_for_dreg, bam_for_gene_counting\n\n     script:\n     \"\"\"\n     samtools view -@ 16 -b -1 -T ${params.genome} ${cram} > ${prefix}.sorted.bam\n     samtools index ${prefix}.sorted.bam ${prefix}.sorted.bam.bai\n     \"\"\"\n  }",
        "nb_lignes_process": 17,
        "string_script": "     \"\"\"\n     samtools view -@ 16 -b -1 -T ${params.genome} ${cram} > ${prefix}.sorted.bam\n     samtools index ${prefix}.sorted.bam ${prefix}.sorted.bam.bai\n     \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "cramfiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sorted_bam_file",
            "bam_for_dreg",
            "bam_for_gene_counting"
        ],
        "nb_outputs": 3,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "cpus 16",
            "queue 'short'",
            "memory '5 GB'",
            "time '1h30m'",
            "tag \"$prefix\""
        ],
        "when": "",
        "stub": ""
    },
    "bam_conversion_tfit": {
        "name_process": "bam_conversion_tfit",
        "string_process": "\nprocess bam_conversion_tfit {\n   cpus 16\n   queue 'short'\n   memory '5 GB'\n   time '2h'\n   tag \"$prefix\"\n\n   when:\n   params.tfit || params.fstitch || params.tfit_model || params.tfit_prelim || params.tfit_split_model\n\n   input:\n   tuple val(prefix), file(bam), file(index) from sorted_bam_file\n\n   output:\n   tuple val(prefix), file(\"${prefix}.mmfilt.sorted.bam\"), file(\"${prefix}.mmfilt.sorted.bam.bai\") into bam_for_tfit\n\n   script:\n   \"\"\"\n   samtools view -@ 16 -h -q 1 ${bam} | \\\n       grep -P '(NH:i:1|^@)' | \\\n       samtools view -h -b > ${prefix}.mmfilt.sorted.bam\n   samtools index ${prefix}.mmfilt.sorted.bam ${prefix}.mmfilt.sorted.bam.bai\n   \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "   \"\"\"\n   samtools view -@ 16 -h -q 1 ${bam} | \\\n       grep -P '(NH:i:1|^@)' | \\\n       samtools view -h -b > ${prefix}.mmfilt.sorted.bam\n   samtools index ${prefix}.mmfilt.sorted.bam ${prefix}.mmfilt.sorted.bam.bai\n   \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sorted_bam_file"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_for_tfit"
        ],
        "nb_outputs": 1,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "cpus 16",
            "queue 'short'",
            "memory '5 GB'",
            "time '2h'",
            "tag \"$prefix\""
        ],
        "when": "params.tfit || params.fstitch || params.tfit_model || params.tfit_prelim || params.tfit_split_model",
        "stub": ""
    },
    "bedgraphs": {
        "name_process": "bedgraphs",
        "string_process": "\nprocess bedgraphs {\n    println \"[Log 2]: Generating BEDGRAPHS for TFit and FStitch\"\n    println \"[Log 2]: Genome information ..... $params.genome \"\n    println \"[Log 2]: Chromosome Sizes ....... $params.chrom_sizes\"\n\n    tag \"$prefix\"\n    memory '40 GB'\n    queue 'short'\n    time '4h'\n    \n    publishDir \"${params.outdir}/bedgraphs\", mode: 'copy', pattern: \"${prefix}.bedGraph\"\n\n    when:\n    params.tfit || params.fstitch || params.tfit_model || params.tfit_prelim || params.tfit_split_model\n\n    input:\n    tuple val(prefix), file(bam_file), file(index) from bam_for_tfit\n\n    output:\n    tuple val(prefix), file(\"${prefix}.bedGraph\"), file(\"${prefix}.pos.bedGraph\"), file(\"${prefix}.neg.bedGraph\") into fstitch_bg\n    tuple val(prefix), file(\"${prefix}.bedGraph\") into prelimtfit_bg, prelimtfit_process_bg, modeltfit_bg, modeltfit_bg_split_max5kb, modeltfit_bg_split_max10kb, post_tfit_bg_split, nqc_bg\n\n    script:\n    if (params.singleEnd) {\n    \"\"\"\n    genomeCoverageBed \\\n        -bg \\\n        -strand + \\\n        -g ${params.chrom_sizes} \\\n        -ibam ${bam_file} \\\n        > ${prefix}.pos.bedGraph\n    genomeCoverageBed \\\n        -bg \\\n        -strand - \\\n        -g ${params.chrom_sizes} \\\n        -ibam ${bam_file} \\\n        | awk 'BEGIN{FS=OFS=\"\\t\"} {\\$4=-\\$4}1' \\\n        > ${prefix}.neg.bedGraph\n    cat ${prefix}.pos.bedGraph \\\n        ${prefix}.neg.bedGraph \\\n        > ${prefix}.unsorted.bedGraph\n\n    sortBed \\\n        -i ${prefix}.unsorted.bedGraph \\\n        > ${prefix}.bedGraph\n\n    \"\"\"\n    } else {\n    \"\"\"\n    samtools view \\\n        -h -b -f 0x0040 \\\n        ${bam_file} \\\n        > ${prefix}.first_pair.bam\n\n    samtools view \\\n        -h -b -f 0x0080 \\\n        ${bam_file} \\\n        > ${prefix}.second_pair.bam\n\n    genomeCoverageBed \\\n        -bg \\\n        -split \\\n        -strand - \\\n        -g ${params.chrom_sizes} \\\n        -ibam ${prefix}.first_pair.bam \\\n        | sortBed \\\n        > ${prefix}.first_pair.pos.bedGraph\n    genomeCoverageBed \\\n        -bg \\\n        -split \\\n        -strand + \\\n        -g ${params.chrom_sizes} \\\n        -ibam ${prefix}.first_pair.bam \\\n        | sortBed \\\n        | awk 'BEGIN{FS=OFS=\"\\t\"} {\\$4=-\\$4}1' \\\n        > ${prefix}.first_pair.neg.bedGraph\n\n    genomeCoverageBed \\\n        -bg \\\n        -split \\\n        -strand + \\\n        -g ${params.chrom_sizes} \\\n        -ibam ${prefix}.second_pair.bam \\\n        | sortBed \\\n        > ${prefix}.second_pair.pos.bedGraph\n    genomeCoverageBed \\\n        -bg \\\n        -split \\\n        -strand - \\\n        -g ${params.chrom_sizes} \\\n        -ibam ${prefix}.second_pair.bam \\\n        | awk 'BEGIN{FS=OFS=\"\\t\"} {\\$4=-\\$4}1' \\\n        | sortBed \\\n        > ${prefix}.second_pair.neg.bedGraph\n\n    unionBedGraphs \\\n        -i ${prefix}.first_pair.pos.bedGraph ${prefix}.second_pair.pos.bedGraph \\\n        | awk -F '\\t' {'print \\$1\"\\t\"\\$2\"\\t\"\\$3\"\\t\"(\\$4+\\$5)'} \\\n        > ${prefix}.pos.bedGraph\n\n    unionBedGraphs \\\n        -i ${prefix}.first_pair.neg.bedGraph ${prefix}.second_pair.neg.bedGraph \\\n        | awk -F '\\t' {'print \\$1\"\\t\"\\$2\"\\t\"\\$3\"\\t\"(\\$4+\\$5)'} \\\n        > ${prefix}.neg.bedGraph\n\n    cat ${prefix}.pos.bedGraph \\\n        ${prefix}.neg.bedGraph \\\n        > ${prefix}.unsorted.bedGraph\n\n    sortBed \\\n        -i ${prefix}.unsorted.bedGraph \\\n        > ${prefix}.bedGraph\n\n    \"\"\"\n    }\n }",
        "nb_lignes_process": 115,
        "string_script": "    if (params.singleEnd) {\n    \"\"\"\n    genomeCoverageBed \\\n        -bg \\\n        -strand + \\\n        -g ${params.chrom_sizes} \\\n        -ibam ${bam_file} \\\n        > ${prefix}.pos.bedGraph\n    genomeCoverageBed \\\n        -bg \\\n        -strand - \\\n        -g ${params.chrom_sizes} \\\n        -ibam ${bam_file} \\\n        | awk 'BEGIN{FS=OFS=\"\\t\"} {\\$4=-\\$4}1' \\\n        > ${prefix}.neg.bedGraph\n    cat ${prefix}.pos.bedGraph \\\n        ${prefix}.neg.bedGraph \\\n        > ${prefix}.unsorted.bedGraph\n\n    sortBed \\\n        -i ${prefix}.unsorted.bedGraph \\\n        > ${prefix}.bedGraph\n\n    \"\"\"\n    } else {\n    \"\"\"\n    samtools view \\\n        -h -b -f 0x0040 \\\n        ${bam_file} \\\n        > ${prefix}.first_pair.bam\n\n    samtools view \\\n        -h -b -f 0x0080 \\\n        ${bam_file} \\\n        > ${prefix}.second_pair.bam\n\n    genomeCoverageBed \\\n        -bg \\\n        -split \\\n        -strand - \\\n        -g ${params.chrom_sizes} \\\n        -ibam ${prefix}.first_pair.bam \\\n        | sortBed \\\n        > ${prefix}.first_pair.pos.bedGraph\n    genomeCoverageBed \\\n        -bg \\\n        -split \\\n        -strand + \\\n        -g ${params.chrom_sizes} \\\n        -ibam ${prefix}.first_pair.bam \\\n        | sortBed \\\n        | awk 'BEGIN{FS=OFS=\"\\t\"} {\\$4=-\\$4}1' \\\n        > ${prefix}.first_pair.neg.bedGraph\n\n    genomeCoverageBed \\\n        -bg \\\n        -split \\\n        -strand + \\\n        -g ${params.chrom_sizes} \\\n        -ibam ${prefix}.second_pair.bam \\\n        | sortBed \\\n        > ${prefix}.second_pair.pos.bedGraph\n    genomeCoverageBed \\\n        -bg \\\n        -split \\\n        -strand - \\\n        -g ${params.chrom_sizes} \\\n        -ibam ${prefix}.second_pair.bam \\\n        | awk 'BEGIN{FS=OFS=\"\\t\"} {\\$4=-\\$4}1' \\\n        | sortBed \\\n        > ${prefix}.second_pair.neg.bedGraph\n\n    unionBedGraphs \\\n        -i ${prefix}.first_pair.pos.bedGraph ${prefix}.second_pair.pos.bedGraph \\\n        | awk -F '\\t' {'print \\$1\"\\t\"\\$2\"\\t\"\\$3\"\\t\"(\\$4+\\$5)'} \\\n        > ${prefix}.pos.bedGraph\n\n    unionBedGraphs \\\n        -i ${prefix}.first_pair.neg.bedGraph ${prefix}.second_pair.neg.bedGraph \\\n        | awk -F '\\t' {'print \\$1\"\\t\"\\$2\"\\t\"\\$3\"\\t\"(\\$4+\\$5)'} \\\n        > ${prefix}.neg.bedGraph\n\n    cat ${prefix}.pos.bedGraph \\\n        ${prefix}.neg.bedGraph \\\n        > ${prefix}.unsorted.bedGraph\n\n    sortBed \\\n        -i ${prefix}.unsorted.bedGraph \\\n        > ${prefix}.bedGraph\n\n    \"\"\"\n    }",
        "nb_lignes_script": 91,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_for_tfit"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fstitch_bg",
            "prelimtfit_bg",
            "prelimtfit_process_bg",
            "modeltfit_bg",
            "modeltfit_bg_split_max5kb",
            "modeltfit_bg_split_max10kb",
            "post_tfit_bg_split",
            "nqc_bg"
        ],
        "nb_outputs": 8,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "tag \"$prefix\"",
            "memory '40 GB'",
            "queue 'short'",
            "time '4h'",
            "publishDir \"${params.outdir}/bedgraphs\", mode: 'copy', pattern: \"${prefix}.bedGraph\""
        ],
        "when": "params.tfit || params.fstitch || params.tfit_model || params.tfit_prelim || params.tfit_split_model",
        "stub": ""
    },
    "FStitch": {
        "name_process": "FStitch",
        "string_process": "\nprocess FStitch {\n    println \"[Log 3]: Running FStitch\"\n    println \"[Log 3]: FStitch training file .. $params.fstitch_train\"\n    println \"[Log 3]: FStich source code ..... $params.fstitch_path\"\n\n    tag \"$prefix\"\n    memory '50 GB'\n    queue 'short'\n    time '4h'\n\n    publishDir \"${params.outdir}/fstitch/\", mode: 'copy', pattern: \"*.hmminfo\"\n    publishDir \"${params.outdir}/fstitch/segment/\", mode: 'copy', pattern: \"${prefix}.fstitch_seg.ON.merged.bed\"\n    publishDir \"${params.outdir}/fstitch/segment/\", mode: 'copy', pattern: \"${prefix}.fstitch_seg.bed\"\n    publishDir \"${params.outdir}/fstitch/segment/\", mode: 'copy', pattern: \"*.fstitch_seg.{pos,neg}.bed\"\n    publishDir \"${params.outdir}/fstitch/bidirs/\", mode: 'copy', pattern: \"${prefix}.fstitch_bidir.bed\"\n    publishDir \"${params.outdir}/fstitch/bidirs/\", mode: 'copy', pattern: \"*fstitch_bidir.{short,long}.bed\"\n    publishDir \"${params.outdir}/fstitch/bidirs/hist/\", mode: 'copy', pattern: \"*.html\"\n    publishDir \"${params.outdir}/fstitch/bidirs/stats/\", mode: 'copy', pattern: \"*.txt\"\n\n    when:\n    params.fstitch\n\n    input:\n    tuple val(prefix), file(bg), file(pos_bg), file(neg_bg) from fstitch_bg\n\n    output:\n    file (\"*.hmminfo\") into fs_train_out\n    tuple val(prefix), file (\"*.fstitch_seg.ON.merged.bed\") into fs_seg_out\n    tuple val(prefix), file (\"*.fstitch_bidir.bed\") into fs_bidir_out\n    file (\"*fstitch_bidir.{short,long}.bed\") into fs_bidir_short_long_out\n    file (\"*.html\") into fs_bidir_plot_out\n    file (\"*.txt\") into fs_bidir_stats_out\n\n    script:\n    \"\"\"\n    ${params.fstitch_path} train \\\n        -s + \\\n        -b ${bg} \\\n        -t ${params.fstitch_train} \\\n        -o ${prefix}.fstitch.hmminfo\n\n    ${params.fstitch_path} segment \\\n        -s + \\\n        -b ${pos_bg} \\\n        -p ${prefix}.fstitch.hmminfo \\\n        -o ${prefix}.fstitch_seg.pos.bed\n\n    ${params.fstitch_path} segment \\\n        -s - \\\n        -b ${neg_bg} \\\n        -p ${prefix}.fstitch.hmminfo \\\n        -o ${prefix}.fstitch_seg.neg.bed\n\n    cat ${prefix}.fstitch_seg.pos.bed \\\n        ${prefix}.fstitch_seg.neg.bed \\\n        | sortBed > ${prefix}.fstitch_seg.bed\n\t    \n    cat ${prefix}.fstitch_seg.bed | \\\n    \tgrep ON | \\\n\tbedtools merge -i stdin \\\n\t> ${prefix}.fstitch_seg.ON.merged.bed\n    \n    bidir \\\n        -b ${prefix}.fstitch_seg.bed \\\n        -g ${params.genome_refseq} \\\n        -o ${prefix}.fstitch_bidir.bed \\\n        -p \\\n        -s\n    \"\"\"\n}",
        "nb_lignes_process": 69,
        "string_script": "    \"\"\"\n    ${params.fstitch_path} train \\\n        -s + \\\n        -b ${bg} \\\n        -t ${params.fstitch_train} \\\n        -o ${prefix}.fstitch.hmminfo\n\n    ${params.fstitch_path} segment \\\n        -s + \\\n        -b ${pos_bg} \\\n        -p ${prefix}.fstitch.hmminfo \\\n        -o ${prefix}.fstitch_seg.pos.bed\n\n    ${params.fstitch_path} segment \\\n        -s - \\\n        -b ${neg_bg} \\\n        -p ${prefix}.fstitch.hmminfo \\\n        -o ${prefix}.fstitch_seg.neg.bed\n\n    cat ${prefix}.fstitch_seg.pos.bed \\\n        ${prefix}.fstitch_seg.neg.bed \\\n        | sortBed > ${prefix}.fstitch_seg.bed\n\t    \n    cat ${prefix}.fstitch_seg.bed | \\\n    \tgrep ON | \\\n\tbedtools merge -i stdin \\\n\t> ${prefix}.fstitch_seg.ON.merged.bed\n    \n    bidir \\\n        -b ${prefix}.fstitch_seg.bed \\\n        -g ${params.genome_refseq} \\\n        -o ${prefix}.fstitch_bidir.bed \\\n        -p \\\n        -s\n    \"\"\"",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "fstitch_bg"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fs_train_out",
            "fs_seg_out",
            "fs_bidir_out",
            "fs_bidir_short_long_out",
            "fs_bidir_plot_out",
            "fs_bidir_stats_out"
        ],
        "nb_outputs": 6,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "tag \"$prefix\"",
            "memory '50 GB'",
            "queue 'short'",
            "time '4h'",
            "publishDir \"${params.outdir}/fstitch/\", mode: 'copy', pattern: \"*.hmminfo\"",
            "publishDir \"${params.outdir}/fstitch/segment/\", mode: 'copy', pattern: \"${prefix}.fstitch_seg.ON.merged.bed\"",
            "publishDir \"${params.outdir}/fstitch/segment/\", mode: 'copy', pattern: \"${prefix}.fstitch_seg.bed\"",
            "publishDir \"${params.outdir}/fstitch/segment/\", mode: 'copy', pattern: \"*.fstitch_seg.{pos,neg}.bed\"",
            "publishDir \"${params.outdir}/fstitch/bidirs/\", mode: 'copy', pattern: \"${prefix}.fstitch_bidir.bed\"",
            "publishDir \"${params.outdir}/fstitch/bidirs/\", mode: 'copy', pattern: \"*fstitch_bidir.{short,long}.bed\"",
            "publishDir \"${params.outdir}/fstitch/bidirs/hist/\", mode: 'copy', pattern: \"*.html\"",
            "publishDir \"${params.outdir}/fstitch/bidirs/stats/\", mode: 'copy', pattern: \"*.txt\""
        ],
        "when": "params.fstitch",
        "stub": ""
    },
    "tfit_prelim": {
        "name_process": "tfit_prelim",
        "string_process": " process tfit_prelim {\n        println \"[Log 4a]: Running Tfit prelim\"\n\n        tag \"$prefix\"\n        memory '100 GB'\n        time '6h'\n        queue 'short'\n        clusterOptions = '-N 1 -c 64'\n\n        publishDir \"${params.outdir}/tfit/prelim_logs\", mode: 'copy', pattern: \"*{log}\"\n        publishDir \"${params.outdir}/tfit/prelim\", mode: 'copy', pattern: \"*_prelim_bidir_hits.bed\"\n\n        when:\n        params.tfit_prelim || params.tfit || params.tfit_model || params.tfit_split_model\n\n        input:\n        tuple val(prefix), file(bg) from prelimtfit_bg\n\n        output:\n        tuple val(prefix), file (\"*.sorted-1_prelim_bidir_hits.bed\") into tfit_prelim_out\n        file (\"*.log\") into prelimtfit_logs_out\n\n        script:\n        \"\"\"\n        ${params.tfit_prelim_run} -t ${params.tfit_path} \\\n                           -c ${params.tfit_config} \\\n                           -b ${bg} \\\n                           -p ${prefix}\n        \"\"\"\n\n    }",
        "nb_lignes_process": 29,
        "string_script": "        \"\"\"\n        ${params.tfit_prelim_run} -t ${params.tfit_path} \\\n                           -c ${params.tfit_config} \\\n                           -b ${bg} \\\n                           -p ${prefix}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prelimtfit_bg"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tfit_prelim_out",
            "prelimtfit_logs_out"
        ],
        "nb_outputs": 2,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "tag \"$prefix\"",
            "memory '100 GB'",
            "time '6h'",
            "queue 'short'",
            "clusterOptions = '-N 1 -c 64'",
            "publishDir \"${params.outdir}/tfit/prelim_logs\", mode: 'copy', pattern: \"*{log}\"",
            "publishDir \"${params.outdir}/tfit/prelim\", mode: 'copy', pattern: \"*_prelim_bidir_hits.bed\""
        ],
        "when": "params.tfit_prelim || params.tfit || params.tfit_model || params.tfit_split_model",
        "stub": ""
    },
    "tfit_prelim_process_split": {
        "name_process": "tfit_prelim_process_split",
        "string_process": " process tfit_prelim_process_split {\n        println \"[Log 4b]: Processing prelim file for split model run\"\n\n        tag \"$prefix\"\n        memory '20 GB'\n        time '1h'\n        queue 'short'\n\n        publishDir \"${params.outdir}/tfit/prelim\", mode: 'copy', pattern: \"*_prelim_coverage_filtered_diced.bed\"\n\n        when:\n        params.tfit_split_model\n\n        input:\n        tuple val(prefix), file(bg), file(prelim) from tfit_prelim_bg_out_preprocess\n\n        output:\n        tuple val(prefix), file(bg), file (\"*sorted_prelim_coverage_filtered_diced.bed\") into tfit_prelim_bg_out\n        tuple val(prefix), file(bg), file (\"*5kb_prelim_coverage_filtered_diced.bed\") into tfit_prelim_bg_out_split_max5kb\n        tuple val(prefix), file(bg), file (\"*10kb_prelim_coverage_filtered_diced.bed\") into tfit_prelim_bg_out_split_max10kb\n\n        script:\n        \"\"\"\n        python3 ${params.prelim_filter} \\\n                -p ${prelim} \\\n                -b ${bg} \\\n                -s ${prefix} \\\n                -o . \\\n                -g ${params.filtered_refseq} \\\n                -c ${params.chrom_sizes}\n\n        awk '{if (\\$3-\\$2 < 5000) print \\$0}' \\\n            ${prefix}_prelim_coverage_filtered_diced.bed \\\n            > ${prefix}_max5kb_prelim_coverage_filtered_diced.bed\n\n        awk '{if (\\$3-\\$2 >= 5000) print \\$0}' \\\n            ${prefix}_prelim_coverage_filtered_diced.bed \\\n            > ${prefix}_max10kb_prelim_coverage_filtered_diced.bed\n    \n        \"\"\"\n    }",
        "nb_lignes_process": 39,
        "string_script": "        \"\"\"\n        python3 ${params.prelim_filter} \\\n                -p ${prelim} \\\n                -b ${bg} \\\n                -s ${prefix} \\\n                -o . \\\n                -g ${params.filtered_refseq} \\\n                -c ${params.chrom_sizes}\n\n        awk '{if (\\$3-\\$2 < 5000) print \\$0}' \\\n            ${prefix}_prelim_coverage_filtered_diced.bed \\\n            > ${prefix}_max5kb_prelim_coverage_filtered_diced.bed\n\n        awk '{if (\\$3-\\$2 >= 5000) print \\$0}' \\\n            ${prefix}_prelim_coverage_filtered_diced.bed \\\n            > ${prefix}_max10kb_prelim_coverage_filtered_diced.bed\n    \n        \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tfit_prelim_bg_out_preprocess"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tfit_prelim_bg_out",
            "tfit_prelim_bg_out_split_max5kb",
            "tfit_prelim_bg_out_split_max10kb"
        ],
        "nb_outputs": 3,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "tag \"$prefix\"",
            "memory '20 GB'",
            "time '1h'",
            "queue 'short'",
            "publishDir \"${params.outdir}/tfit/prelim\", mode: 'copy', pattern: \"*_prelim_coverage_filtered_diced.bed\""
        ],
        "when": "params.tfit_split_model",
        "stub": ""
    },
    "tfit_split_model_max5kb": {
        "name_process": "tfit_split_model_max5kb",
        "string_process": " process tfit_split_model_max5kb {\n        println \"[Log 4b]: Running Tfit model on <5kb prelim regions (maxk=2)\"\n\n        tag \"$prefix\"\n        memory '70 GB'\n        time '72h'\n        queue 'long'\n        clusterOptions = '-N 1 -n 32'\n\n        publishDir \"${params.outdir}/tfit\", mode: 'copy', pattern: \"*_bidir_predictions.bed\"\n        publishDir \"${params.outdir}/tfit/logs\", mode: 'copy', pattern: \"*{tsv,log}\"\n\n        when:\n        params.tfit_split_model\n\n        input:\n        tuple val(prefix), file(bg), file(prelim_max5kb) from tfit_prelim_bg_out_split_max5kb\n\n        output:\n        tuple val(prefix), file (\"*_bidir_predictions.bed\") into tfit_model_bed_out_split_max5kb\n        file (\"*.tsv\") into tfit_model_model_out_split_max5kb\n        file (\"*.log\") into tfit_model_logs_out_split_max5kb\n\n        script:\n        \"\"\"\n        ${params.tfit_model_run} -t ${params.tfit_path} \\\n                            -c ${params.tfit_config_k2} \\\n                            -b ${bg} \\\n                            -k ${prelim_max5kb} \\\n                            -p ${prefix}_max5kb \\\n                            -n 32\n\n        \"\"\"\n    }",
        "nb_lignes_process": 32,
        "string_script": "        \"\"\"\n        ${params.tfit_model_run} -t ${params.tfit_path} \\\n                            -c ${params.tfit_config_k2} \\\n                            -b ${bg} \\\n                            -k ${prelim_max5kb} \\\n                            -p ${prefix}_max5kb \\\n                            -n 32\n\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tfit_prelim_bg_out_split_max5kb"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tfit_model_bed_out_split_max5kb",
            "tfit_model_model_out_split_max5kb",
            "tfit_model_logs_out_split_max5kb"
        ],
        "nb_outputs": 3,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "tag \"$prefix\"",
            "memory '70 GB'",
            "time '72h'",
            "queue 'long'",
            "clusterOptions = '-N 1 -n 32'",
            "publishDir \"${params.outdir}/tfit\", mode: 'copy', pattern: \"*_bidir_predictions.bed\"",
            "publishDir \"${params.outdir}/tfit/logs\", mode: 'copy', pattern: \"*{tsv,log}\""
        ],
        "when": "params.tfit_split_model",
        "stub": ""
    },
    "tfit_split_model_max10kb": {
        "name_process": "tfit_split_model_max10kb",
        "string_process": " process tfit_split_model_max10kb {\n        println \"[Log 4b]: Running Tfit model on 5-10kb prelim regions (maxk=5)\"\n\n        tag \"$prefix\"\n        memory '70 GB'\n        time '160h'\n        queue 'long'\n        clusterOptions = '-N 1 -n 32'\n\n        publishDir \"${params.outdir}/tfit\", mode: 'copy', pattern: \"*_bidir_predictions.bed\"\n        publishDir \"${params.outdir}/tfit/logs\", mode: 'copy', pattern: \"*{tsv,log}\"\n\n        when:\n        params.tfit_split_model\n\n        input:\n        tuple val(prefix), file(bg), file(prelim_max10kb) from tfit_prelim_bg_out_split_max10kb\n\n        output:\n        set val(prefix), file (\"*_bidir_predictions.bed\") into tfit_model_bed_out_split_max10kb\n        file (\"*.tsv\") into tfit_model_model_out_split_max10kb\n        file (\"*.log\") into tfit_model_logs_out_split_max10kb\n\n        script:\n        \"\"\"\n        ${params.tfit_model_run} -t ${params.tfit_path} \\\n                            -c ${params.tfit_config} \\\n                            -b ${bg} \\\n                            -k ${prelim_max10kb} \\\n                            -p ${prefix}_max10kb \\\n                            -n 32\n\n        \"\"\"\n    }",
        "nb_lignes_process": 32,
        "string_script": "        \"\"\"\n        ${params.tfit_model_run} -t ${params.tfit_path} \\\n                            -c ${params.tfit_config} \\\n                            -b ${bg} \\\n                            -k ${prelim_max10kb} \\\n                            -p ${prefix}_max10kb \\\n                            -n 32\n\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tfit_prelim_bg_out_split_max10kb"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tfit_model_bed_out_split_max10kb",
            "tfit_model_model_out_split_max10kb",
            "tfit_model_logs_out_split_max10kb"
        ],
        "nb_outputs": 3,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "tag \"$prefix\"",
            "memory '70 GB'",
            "time '160h'",
            "queue 'long'",
            "clusterOptions = '-N 1 -n 32'",
            "publishDir \"${params.outdir}/tfit\", mode: 'copy', pattern: \"*_bidir_predictions.bed\"",
            "publishDir \"${params.outdir}/tfit/logs\", mode: 'copy', pattern: \"*{tsv,log}\""
        ],
        "when": "params.tfit_split_model",
        "stub": ""
    },
    "tfit_split_cat": {
        "name_process": "tfit_split_cat",
        "string_process": " process tfit_split_cat {\n        tag \"$prefix\"\n        memory '4 GB'\n        time '1h'\n        queue 'short'\n\n        publishDir \"${params.outdir}/tfit\", mode: 'copy', pattern: \"*{split_bidir_predictions.bed,split_bidir_cov_filtered.bed}\"\n\n        when:\n        params.tfit_split_model\n\n        input:\n        tuple val(prefix), file(bg), file(out_max5kb), file(out_max10kb) from tfit_split_results\n\n        output:\n        set val(prefix), file (\"*split_bidir_predictions.bed\"), file(\"*split_bidir_cov_filtered.bed\") into tfit_model_split_out\n\n        script:\n        \"\"\"\n        grep -v '#' ${out_max5kb} > max5kb_noheader.bed\n        grep -v '#' ${out_max10kb} > max10kb_noheader.bed\n        cat max5kb_noheader.bed max10kb_noheader.bed | bedtools sort > ${prefix}_split_bidir_predictions.bed\n        bedtools coverage -a ${prefix}_split_bidir_predictions.bed -b ${bg} > ${prefix}_split_bidir_cov.bed\n        awk '{if (\\$5 > 9) print \\$0}' ${prefix}_split_bidir_cov.bed > ${prefix}_split_bidir_cov_filtered.bed\n        \"\"\"\n    }",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"\n        grep -v '#' ${out_max5kb} > max5kb_noheader.bed\n        grep -v '#' ${out_max10kb} > max10kb_noheader.bed\n        cat max5kb_noheader.bed max10kb_noheader.bed | bedtools sort > ${prefix}_split_bidir_predictions.bed\n        bedtools coverage -a ${prefix}_split_bidir_predictions.bed -b ${bg} > ${prefix}_split_bidir_cov.bed\n        awk '{if (\\$5 > 9) print \\$0}' ${prefix}_split_bidir_cov.bed > ${prefix}_split_bidir_cov_filtered.bed\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "tfit_split_results"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tfit_model_split_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "tag \"$prefix\"",
            "memory '4 GB'",
            "time '1h'",
            "queue 'short'",
            "publishDir \"${params.outdir}/tfit\", mode: 'copy', pattern: \"*{split_bidir_predictions.bed,split_bidir_cov_filtered.bed}\""
        ],
        "when": "params.tfit_split_model",
        "stub": ""
    },
    "tfit_prelim_process": {
        "name_process": "tfit_prelim_process",
        "string_process": " process tfit_prelim_process {\n        println \"[Log 4b]: Processing prelim file\"\n\n        tag \"$prefix\"\n        memory '20 GB'\n        time '1h'\n        queue 'short'\n\n        publishDir \"${params.outdir}/tfit/prelim\", mode: 'copy', pattern: \"*_prelim_coverage_filtered_diced.bed\"\n\n        when:\n        params.prelim_process\n\n        input:\n        tuple val(prefix), file(bg), file(prelim) from tfit_prelim_bg_out_preprocess\n\n        output:\n        tuple val(prefix), file(bg), file (\"*_prelim_coverage_filtered_diced.bed\") into tfit_prelim_bg_out\n\n        script:\n        \"\"\"\n        python3 ${params.prelim_filter} \\\n                -p ${prelim} \\\n                -b ${bg} \\\n                -s ${prefix} \\\n                -o . \\\n                -g ${params.filtered_refseq} \\\n                -c ${params.chrom_sizes}\n\n        \"\"\"\n    }",
        "nb_lignes_process": 29,
        "string_script": "        \"\"\"\n        python3 ${params.prelim_filter} \\\n                -p ${prelim} \\\n                -b ${bg} \\\n                -s ${prefix} \\\n                -o . \\\n                -g ${params.filtered_refseq} \\\n                -c ${params.chrom_sizes}\n\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tfit_prelim_bg_out_preprocess"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tfit_prelim_bg_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "tag \"$prefix\"",
            "memory '20 GB'",
            "time '1h'",
            "queue 'short'",
            "publishDir \"${params.outdir}/tfit/prelim\", mode: 'copy', pattern: \"*_prelim_coverage_filtered_diced.bed\""
        ],
        "when": "params.prelim_process",
        "stub": ""
    },
    "tfit_model": {
        "name_process": "tfit_model",
        "string_process": " process tfit_model {\n        println \"[Log 4b]: Running Tfit model\"\n\n        tag \"$prefix\"\n        memory '70 GB'\n        time '72h'\n        queue 'long'\n        clusterOptions = '-N 1 -n 32'\n\n        publishDir \"${params.outdir}/tfit\", mode: 'copy', pattern: \"*{_bidir_predictions.bed,_bidir_cov_filtered.bed}\"\n        publishDir \"${params.outdir}/tfit/logs\", mode: 'copy', pattern: \"*{tsv,log}\"\n    \n        when:\n        params.tfit_model || params.tfit\n\n        input:\n        tuple val(prefix), file(bg), file(prelim) from tfit_prelim_bg_out\n\n        output:\n        tuple val(prefix), file (\"*_bidir_predictions.bed\"), file(\"*_bidir_cov_filtered.bed\") into tfit_model_bed_out\n        file (\"*.tsv\") into tfit_model_model_out\n        file (\"*.log\") into tfit_model_logs_out\n\n        script:\n        \"\"\"\n        ${params.tfit_model_run} -t ${params.tfit_path} \\\n                            -c ${params.tfit_config} \\\n                            -b ${bg} \\\n                            -k ${prelim} \\\n                            -p ${prefix} \\\n                            -n 32\n\n        bedtools coverage -a ${prefix}-1_bidir_predictions.bed -b ${bg} > ${prefix}_bidir_cov.bed\n        awk '{if (\\$5 > 9) print \\$0}' ${prefix}_bidir_cov.bed > ${prefix}_bidir_cov_filtered.bed\n        \"\"\"\n    }",
        "nb_lignes_process": 34,
        "string_script": "        \"\"\"\n        ${params.tfit_model_run} -t ${params.tfit_path} \\\n                            -c ${params.tfit_config} \\\n                            -b ${bg} \\\n                            -k ${prelim} \\\n                            -p ${prefix} \\\n                            -n 32\n\n        bedtools coverage -a ${prefix}-1_bidir_predictions.bed -b ${bg} > ${prefix}_bidir_cov.bed\n        awk '{if (\\$5 > 9) print \\$0}' ${prefix}_bidir_cov.bed > ${prefix}_bidir_cov_filtered.bed\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "tfit_prelim_bg_out"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tfit_model_bed_out",
            "tfit_model_model_out",
            "tfit_model_logs_out"
        ],
        "nb_outputs": 3,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "tag \"$prefix\"",
            "memory '70 GB'",
            "time '72h'",
            "queue 'long'",
            "clusterOptions = '-N 1 -n 32'",
            "publishDir \"${params.outdir}/tfit\", mode: 'copy', pattern: \"*{_bidir_predictions.bed,_bidir_cov_filtered.bed}\"",
            "publishDir \"${params.outdir}/tfit/logs\", mode: 'copy', pattern: \"*{tsv,log}\""
        ],
        "when": "params.tfit_model || params.tfit",
        "stub": ""
    },
    "dreg_prep": {
        "name_process": "dreg_prep",
        "string_process": "\nprocess dreg_prep {\n    println \"[Log 5]: Generating bigwig files for dREG\"\n\n    errorStrategy 'ignore'\n    tag \"$prefix\"\n    memory '60 GB'\n    cpus 16\n    queue 'short'\n\n    publishDir \"${params.outdir}/bigwig/\", mode: 'copy', pattern: \"*.bw\"\n\n    when:\n    params.dreg || params.dreg_results\n\n    input:\n    set val(prefix), file(bam_file), file(index) from bam_for_dreg\n\n    output:\n    tuple val(prefix), file(\"${prefix}.pos.bw\"), file(\"${prefix}.neg.bw\") into dreg_bigwig\n    tuple val(prefix), file(\"${prefix}.bedGraph\") into dreg_bg\n\n    script:\n    if (params.singleEnd) {\n        \"\"\"\n        echo \"Creating BigWigs suitable as inputs to dREG\"\n\n        export CRAM_REFERENCE=${params.genome}\n\n        bamToBed -i ${bam_file} | awk 'BEGIN{OFS=\"\\t\"} (\\$5 > 0){print \\$0}' | \\\n        awk 'BEGIN{OFS=\"\\t\"} (\\$6 == \"+\") {print \\$1,\\$2,\\$2+1,\\$4,\\$5,\\$6}; (\\$6 == \"-\") {print \\$1, \\$3-1,\\$3,\\$4,\\$5,\\$6}' \\\n        > ${prefix}.dreg.bed\n        sortBed -i ${prefix}.dreg.bed > ${prefix}.dreg.sort.bed\n\n        echo \"positive strand processed to bedGraph\"\n\n        bedtools genomecov \\\n                -bg \\\n                -i ${prefix}.dreg.sort.bed \\\n                -g ${params.chrom_sizes} \\\n                -strand + \\\n                > ${prefix}.pos.bedGraph\n\n        sortBed \\\n                -i ${prefix}.pos.bedGraph \\\n                > ${prefix}.pos.sort.bedGraph\n\n        bedtools genomecov \\\n                -bg \\\n                -i ${prefix}.dreg.sort.bed \\\n                -g ${params.chrom_sizes} \\\n                -strand - \\\n                | awk 'BEGIN{FS=OFS=\"\\t\"} {\\$4=-\\$4}1' > ${prefix}.neg.bedGraph\n\n        sortBed \\\n                -i ${prefix}.neg.bedGraph \\\n                > ${prefix}.neg.sort.bedGraph\n\n        echo \"negative strand processed to bedGraph\"\n\n        ${params.bedGraphToBigWig} ${prefix}.pos.sort.bedGraph ${params.chrom_sizes} ${prefix}.pos.bw\n        ${params.bedGraphToBigWig} ${prefix}.neg.sort.bedGraph ${params.chrom_sizes} ${prefix}.neg.bw\n\n        cat ${prefix}.pos.bedGraph \\\n        ${prefix}.neg.bedGraph \\\n        > ${prefix}.unsorted.bedGraph\n\n        sortBed \\\n        -i ${prefix}.unsorted.bedGraph \\\n        > ${prefix}.bedGraph\n\n        echo \"bedGraph to bigwig done\"\n        \"\"\"\n    } else {\n        if (params.r1_five_prime) {\n            \"\"\"\n            samtools view -@ 16 -bf 0x2 ${bam_file} | samtools sort -n -@ 16 \\\n            > ${prefix}.dreg.bam\n\n            bedtools bamtobed -bedpe -mate1 -i ${prefix}.dreg.bam \\\n              | awk 'BEGIN{OFS=\"\\t\"} (\\$9 == \"+\") {print \\$1,\\$2,\\$2+1,\\$7,\\$8,\\$9}; (\\$9 == \"-\") {print \\$1,\\$3-1,\\$3,\\$7,\\$8,\\$9}' \\\n              | sort -k 1,1 -k 2,2n > ${prefix}.dreg.sort.bed\n\n            bedtools genomecov -bg \\\n              -i ${prefix}.dreg.sort.bed \\\n              -g ${params.chrom_sizes} \\\n              -strand + \\\n              > ${prefix}.pos.bedGraph\n\n            bedtools genomecov -bg \\\n              -i ${prefix}.dreg.sort.bed \\\n              -g ${params.chrom_sizes} \\\n              -strand - \\\n              > ${prefix}.neg.noinv.bedGraph\n\n            cat ${prefix}.neg.noinv.bedGraph \\\n              | awk 'BEGIN{OFS=\"\\t\"} {print \\$1,\\$2,\\$3,-1*\\$4}' \\\n              > ${prefix}.neg.bedGraph\n\n            ${params.bedGraphToBigWig} ${prefix}.pos.bedGraph \\\n              ${params.chrom_sizes} ${prefix}.pos.bw\n\n            ${params.bedGraphToBigWig} ${prefix}.neg.bedGraph \\\n              ${params.chrom_sizes} ${prefix}.neg.bw\n\n            cat ${prefix}.pos.bedGraph \\\n            ${prefix}.neg.bedGraph \\\n            > ${prefix}.unsorted.bedGraph\n\n            sortBed \\\n            -i ${prefix}.unsorted.bedGraph \\\n            > ${prefix}.bedGraph\n            \"\"\"\n        } else {\n            \"\"\"\n            samtools view -@ 16 -bf 0x2 ${bam_file} | samtools sort -n -@ 16 \\\n              > ${prefix}.dreg.bam\n\n            bedtools bamtobed -bedpe -mate1 -i ${prefix}.dreg.bam \\\n              | awk 'BEGIN{OFS=\"\\t\"} (\\$10 == \"+\") {print \\$1,\\$5,\\$5+1,\\$7,\\$8,\\$10}; (\\$10 == \"-\") {print \\$1,\\$6-1,\\$6,\\$7,\\$8,\\$10}' \\\n              | sort -k 1,1 -k 2,2n > ${prefix}.dreg.sort.bed\n\n            bedtools genomecov -bg \\\n              -i ${prefix}.dreg.sort.bed \\\n              -g ${params.chrom_sizes} \\\n              -strand + \\\n              > ${prefix}.pos.bedGraph\n\n            bedtools genomecov -bg \\\n              -i ${prefix}.dreg.sort.bed \\\n              -g ${params.chrom_sizes} \\\n              -strand - \\\n              > ${prefix}.neg.noinv.bedGraph\n\n            cat ${prefix}.neg.noinv.bedGraph \\\n              | awk 'BEGIN{OFS=\"\\t\"} {print \\$1,\\$2,\\$3,-1*\\$4}' \\\n              > ${prefix}.neg.bedGraph\n\n            ${params.bedGraphToBigWig} ${prefix}.pos.bedGraph \\\n              ${params.chrom_sizes} ${prefix}.pos.bw\n\n            ${params.bedGraphToBigWig} ${prefix}.neg.bedGraph \\\n              ${params.chrom_sizes} ${prefix}.neg.bw\n\n            cat ${prefix}.pos.bedGraph \\\n            ${prefix}.neg.bedGraph \\\n            > ${prefix}.unsorted.bedGraph\n\n            sortBed \\\n            -i ${prefix}.unsorted.bedGraph \\\n            > ${prefix}.bedGraph\n            \"\"\"\n        }\n    }\n}",
        "nb_lignes_process": 153,
        "string_script": "    if (params.singleEnd) {\n        \"\"\"\n        echo \"Creating BigWigs suitable as inputs to dREG\"\n\n        export CRAM_REFERENCE=${params.genome}\n\n        bamToBed -i ${bam_file} | awk 'BEGIN{OFS=\"\\t\"} (\\$5 > 0){print \\$0}' | \\\n        awk 'BEGIN{OFS=\"\\t\"} (\\$6 == \"+\") {print \\$1,\\$2,\\$2+1,\\$4,\\$5,\\$6}; (\\$6 == \"-\") {print \\$1, \\$3-1,\\$3,\\$4,\\$5,\\$6}' \\\n        > ${prefix}.dreg.bed\n        sortBed -i ${prefix}.dreg.bed > ${prefix}.dreg.sort.bed\n\n        echo \"positive strand processed to bedGraph\"\n\n        bedtools genomecov \\\n                -bg \\\n                -i ${prefix}.dreg.sort.bed \\\n                -g ${params.chrom_sizes} \\\n                -strand + \\\n                > ${prefix}.pos.bedGraph\n\n        sortBed \\\n                -i ${prefix}.pos.bedGraph \\\n                > ${prefix}.pos.sort.bedGraph\n\n        bedtools genomecov \\\n                -bg \\\n                -i ${prefix}.dreg.sort.bed \\\n                -g ${params.chrom_sizes} \\\n                -strand - \\\n                | awk 'BEGIN{FS=OFS=\"\\t\"} {\\$4=-\\$4}1' > ${prefix}.neg.bedGraph\n\n        sortBed \\\n                -i ${prefix}.neg.bedGraph \\\n                > ${prefix}.neg.sort.bedGraph\n\n        echo \"negative strand processed to bedGraph\"\n\n        ${params.bedGraphToBigWig} ${prefix}.pos.sort.bedGraph ${params.chrom_sizes} ${prefix}.pos.bw\n        ${params.bedGraphToBigWig} ${prefix}.neg.sort.bedGraph ${params.chrom_sizes} ${prefix}.neg.bw\n\n        cat ${prefix}.pos.bedGraph \\\n        ${prefix}.neg.bedGraph \\\n        > ${prefix}.unsorted.bedGraph\n\n        sortBed \\\n        -i ${prefix}.unsorted.bedGraph \\\n        > ${prefix}.bedGraph\n\n        echo \"bedGraph to bigwig done\"\n        \"\"\"\n    } else {\n        if (params.r1_five_prime) {\n            \"\"\"\n            samtools view -@ 16 -bf 0x2 ${bam_file} | samtools sort -n -@ 16 \\\n            > ${prefix}.dreg.bam\n\n            bedtools bamtobed -bedpe -mate1 -i ${prefix}.dreg.bam \\\n              | awk 'BEGIN{OFS=\"\\t\"} (\\$9 == \"+\") {print \\$1,\\$2,\\$2+1,\\$7,\\$8,\\$9}; (\\$9 == \"-\") {print \\$1,\\$3-1,\\$3,\\$7,\\$8,\\$9}' \\\n              | sort -k 1,1 -k 2,2n > ${prefix}.dreg.sort.bed\n\n            bedtools genomecov -bg \\\n              -i ${prefix}.dreg.sort.bed \\\n              -g ${params.chrom_sizes} \\\n              -strand + \\\n              > ${prefix}.pos.bedGraph\n\n            bedtools genomecov -bg \\\n              -i ${prefix}.dreg.sort.bed \\\n              -g ${params.chrom_sizes} \\\n              -strand - \\\n              > ${prefix}.neg.noinv.bedGraph\n\n            cat ${prefix}.neg.noinv.bedGraph \\\n              | awk 'BEGIN{OFS=\"\\t\"} {print \\$1,\\$2,\\$3,-1*\\$4}' \\\n              > ${prefix}.neg.bedGraph\n\n            ${params.bedGraphToBigWig} ${prefix}.pos.bedGraph \\\n              ${params.chrom_sizes} ${prefix}.pos.bw\n\n            ${params.bedGraphToBigWig} ${prefix}.neg.bedGraph \\\n              ${params.chrom_sizes} ${prefix}.neg.bw\n\n            cat ${prefix}.pos.bedGraph \\\n            ${prefix}.neg.bedGraph \\\n            > ${prefix}.unsorted.bedGraph\n\n            sortBed \\\n            -i ${prefix}.unsorted.bedGraph \\\n            > ${prefix}.bedGraph\n            \"\"\"\n        } else {\n            \"\"\"\n            samtools view -@ 16 -bf 0x2 ${bam_file} | samtools sort -n -@ 16 \\\n              > ${prefix}.dreg.bam\n\n            bedtools bamtobed -bedpe -mate1 -i ${prefix}.dreg.bam \\\n              | awk 'BEGIN{OFS=\"\\t\"} (\\$10 == \"+\") {print \\$1,\\$5,\\$5+1,\\$7,\\$8,\\$10}; (\\$10 == \"-\") {print \\$1,\\$6-1,\\$6,\\$7,\\$8,\\$10}' \\\n              | sort -k 1,1 -k 2,2n > ${prefix}.dreg.sort.bed\n\n            bedtools genomecov -bg \\\n              -i ${prefix}.dreg.sort.bed \\\n              -g ${params.chrom_sizes} \\\n              -strand + \\\n              > ${prefix}.pos.bedGraph\n\n            bedtools genomecov -bg \\\n              -i ${prefix}.dreg.sort.bed \\\n              -g ${params.chrom_sizes} \\\n              -strand - \\\n              > ${prefix}.neg.noinv.bedGraph\n\n            cat ${prefix}.neg.noinv.bedGraph \\\n              | awk 'BEGIN{OFS=\"\\t\"} {print \\$1,\\$2,\\$3,-1*\\$4}' \\\n              > ${prefix}.neg.bedGraph\n\n            ${params.bedGraphToBigWig} ${prefix}.pos.bedGraph \\\n              ${params.chrom_sizes} ${prefix}.pos.bw\n\n            ${params.bedGraphToBigWig} ${prefix}.neg.bedGraph \\\n              ${params.chrom_sizes} ${prefix}.neg.bw\n\n            cat ${prefix}.pos.bedGraph \\\n            ${prefix}.neg.bedGraph \\\n            > ${prefix}.unsorted.bedGraph\n\n            sortBed \\\n            -i ${prefix}.unsorted.bedGraph \\\n            > ${prefix}.bedGraph\n            \"\"\"\n        }\n    }",
        "nb_lignes_script": 130,
        "language_script": "bash",
        "tools": [
            "BEDTools",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_for_dreg"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dreg_bigwig",
            "dreg_bg"
        ],
        "nb_outputs": 2,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "errorStrategy 'ignore'",
            "tag \"$prefix\"",
            "memory '60 GB'",
            "cpus 16",
            "queue 'short'",
            "publishDir \"${params.outdir}/bigwig/\", mode: 'copy', pattern: \"*.bw\""
        ],
        "when": "params.dreg || params.dreg_results",
        "stub": ""
    },
    "dreg_run": {
        "name_process": "dreg_run",
        "string_process": "\nprocess dreg_run {\n    println \"Log[6]: Running dREG\"\n    println \"Log[6]: N.B. Requires GPUs\"\n\n    tag \"$prefix\"\n    memory '50 GB'\n    time '48h'\n    cpus 4\n    queue 'titan'\n    clusterOptions '--gres=gpu'\n\n    publishDir \"${params.outdir}/dreg/\", mode: 'copy', pattern: \"*dREG*\"\n\n    when:\n    params.dreg\n\n    input:\n    tuple val(prefix), file(pos_bw), file(neg_bw) from dreg_bigwig\n\n    output:\n    tuple val(prefix), file (\"${prefix}.*\") into dREG_out\n\n    script:\n        \"\"\"\n        bash ${params.dreg_path} \\\n\t     ${pos_bw} \\\n\t     ${neg_bw} \\\n\t     ${prefix} \\\n\t     ${params.dreg_train} \\\n\t     4 1 \n        \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "        \"\"\"\n        bash ${params.dreg_path} \\\n\t     ${pos_bw} \\\n\t     ${neg_bw} \\\n\t     ${prefix} \\\n\t     ${params.dreg_train} \\\n\t     4 1 \n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dreg_bigwig"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dREG_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "tag \"$prefix\"",
            "memory '50 GB'",
            "time '48h'",
            "cpus 4",
            "queue 'titan'",
            "clusterOptions '--gres=gpu'",
            "publishDir \"${params.outdir}/dreg/\", mode: 'copy', pattern: \"*dREG*\""
        ],
        "when": "params.dreg",
        "stub": ""
    },
    "dreg_postprocess": {
        "name_process": "dreg_postprocess",
        "string_process": "\nprocess dreg_postprocess {\n    println \"Log[6]: Running dREG postprocessing\"\n\n    tag \"$prefix\"\n    memory '8 GB'\n    time '1h'\n    cpus 1\n    queue 'short'\n\n    publishDir \"${params.outdir}/dreg/\", mode: 'copy', pattern: \"*covfiltered.bed\"\n    stageInMode 'copy'\n\n    when:\n    params.dreg || params.dreg_results\n\n    input:\n    tuple val(prefix), file(bg), file(dreg_resfile) from dreg_res_process\n\n    output:\n    tuple val(prefix), file (\"${prefix}.*\") into dREG_res_out\n\n    script:\n        \"\"\"\n        gunzip ${prefix}.dREG.peak.full.bed.gz\n\tbedtools merge -i ${prefix}.dREG.peak.full.bed -d 20 > ${prefix}.dREG.peak.full.merge_distance20bp.bed\n        bedtools coverage -a ${prefix}.dREG.peak.full.merge_distance20bp.bed -b ${bg} > ${prefix}.dREG.bidir.cov.bed\n        awk '{if (\\$4 > 9) print \\$0}' ${prefix}.dREG.bidir.cov.bed > ${prefix}.dREG.full.covfiltered.bed\n        gzip ${prefix}.dREG.peak.full.bed\n        \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "        \"\"\"\n        gunzip ${prefix}.dREG.peak.full.bed.gz\n\tbedtools merge -i ${prefix}.dREG.peak.full.bed -d 20 > ${prefix}.dREG.peak.full.merge_distance20bp.bed\n        bedtools coverage -a ${prefix}.dREG.peak.full.merge_distance20bp.bed -b ${bg} > ${prefix}.dREG.bidir.cov.bed\n        awk '{if (\\$4 > 9) print \\$0}' ${prefix}.dREG.bidir.cov.bed > ${prefix}.dREG.full.covfiltered.bed\n        gzip ${prefix}.dREG.peak.full.bed\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "dreg_res_process"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dREG_res_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "tag \"$prefix\"",
            "memory '8 GB'",
            "time '1h'",
            "cpus 1",
            "queue 'short'",
            "publishDir \"${params.outdir}/dreg/\", mode: 'copy', pattern: \"*covfiltered.bed\"",
            "stageInMode 'copy'"
        ],
        "when": "params.dreg || params.dreg_results",
        "stub": ""
    },
    "gene_count": {
        "name_process": "gene_count",
        "string_process": "\nprocess gene_count {\n   println \"[Log 7]: Running FeatureCounts\"\n\n    tag \"$prefix\"\n    memory '8 GB'\n    time '3h'\n    cpus 8\n    queue 'short'\n\n    publishDir \"${params.outdir}/featurecounts_genes/\", mode: 'copy', pattern: \"*gene_counts.txt\"\n\n    when:\n    params.gene_count\n\n    input:\n    tuple val(prefix), file(bam_file), file(index) from bam_for_gene_counting\n\n    output:\n    tuple val(prefix), file (\"*gene_counts.txt\") into gene_count_out\n\n    script:\n    if (params.singleEnd) {\n        paired = 'FALSE'\n    } else {\n        paired = 'TRUE'\n    }\n    \n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    library(\"Rsubread\")\n\n    gtf_table <- read.table(\"${params.filtered_refseq}\")   \n\n    if (${paired} == 'FALSE') {\n\n    fc <- featureCounts(files=\"${bam_file}\",\n        annot.ext=\"${params.filtered_refseq}\",\n        isGTFAnnotationFile=TRUE,\n        GTF.featureType=\"gene_length\",\n        useMetaFeatures=FALSE,\n        allowMultiOverlap=TRUE,\n        largestOverlap=TRUE,\n        countMultiMappingReads=FALSE,\n        isPairedEnd=${paired},\n        strandSpecific=1,\n        nthreads=8)\n    fc\\$annotation[\"TranscriptID\"] <- gtf_table[\"V13\"]\n    write.table(x=data.frame(fc\\$annotation[,c(\"GeneID\",\"TranscriptID\",\"Length\")],\n                             fc\\$counts,stringsAsFactors=FALSE),\n        file=paste0(\"${prefix}\",\".stranded.gene_counts.txt\"),\n        quote=FALSE,sep=\"\\t\",\n        row.names=FALSE)\n\n    fc <- featureCounts(files=\"${bam_file}\",\n        annot.ext=\"${params.trunc_refseq}\",\n        isGTFAnnotationFile=TRUE,\n        GTF.featureType=\"gene_length\",\n        useMetaFeatures=FALSE,\n        allowMultiOverlap=TRUE,\n        largestOverlap=TRUE,\n        countMultiMappingReads=FALSE,\n        isPairedEnd=${paired},\n        strandSpecific=1,\n        nthreads=8)\n    fc\\$annotation[\"TranscriptID\"] <- gtf_table[\"V13\"]\n    write.table(x=data.frame(fc\\$annotation[,c(\"GeneID\",\"TranscriptID\",\"Length\")],\n                             fc\\$counts,stringsAsFactors=FALSE),\n        file=paste0(\"${prefix}\",\".stranded.5ptrunc_gene_counts.txt\"),\n        quote=FALSE,sep=\"\\t\",\n        row.names=FALSE)\n\n    } else {\n\n    fc <- featureCounts(files=\"${bam_file}\",\n        annot.ext=\"${params.filtered_refseq}\",\n        isGTFAnnotationFile=TRUE,\n        GTF.featureType=\"gene_length\",\n        useMetaFeatures=FALSE,\n        allowMultiOverlap=TRUE,\n        largestOverlap=TRUE,\n        countMultiMappingReads=FALSE,\n        isPairedEnd=${paired},\n        strandSpecific=2,\n        nthreads=8)\n    fc\\$annotation[\"TranscriptID\"] <- gtf_table[\"V13\"]\n    write.table(x=data.frame(fc\\$annotation[,c(\"GeneID\",\"TranscriptID\",\"Length\")],\n                             fc\\$counts,stringsAsFactors=FALSE),\n        file=paste0(\"${prefix}\",\".stranded.gene_counts.txt\"),\n        quote=FALSE,sep=\"\\t\",\n        row.names=FALSE)\n\n    fc <- featureCounts(files=\"${bam_file}\",\n        annot.ext=\"${params.trunc_refseq}\",\n        isGTFAnnotationFile=TRUE,\n        GTF.featureType=\"gene_length\",\n        useMetaFeatures=FALSE,\n        allowMultiOverlap=TRUE,\n        largestOverlap=TRUE,\n        countMultiMappingReads=FALSE,\n        isPairedEnd=${paired},\n        strandSpecific=2,\n        nthreads=8)\n    fc\\$annotation[\"TranscriptID\"] <- gtf_table[\"V13\"]\n    write.table(x=data.frame(fc\\$annotation[,c(\"GeneID\",\"TranscriptID\",\"Length\")],\n                             fc\\$counts,stringsAsFactors=FALSE),\n        file=paste0(\"${prefix}\",\".stranded.5ptrunc_gene_counts.txt\"),\n        quote=FALSE,sep=\"\\t\",\n        row.names=FALSE)\n\n    }\n\n    fc <- featureCounts(files=\"${bam_file}\",\n        annot.ext=\"${params.filtered_refseq}\",\n        isGTFAnnotationFile=TRUE,\n        GTF.featureType=\"gene_length\",\n        useMetaFeatures=FALSE,\n        allowMultiOverlap=TRUE,\n        largestOverlap=TRUE,\n        countMultiMappingReads=FALSE,\n        isPairedEnd=${paired},\n        strandSpecific=0,\n        nthreads=8)\n    fc\\$annotation[\"TranscriptID\"] <- gtf_table[\"V13\"]\n    write.table(x=data.frame(fc\\$annotation[,c(\"GeneID\",\"TranscriptID\",\"Length\")],\n                             fc\\$counts,stringsAsFactors=FALSE),\n        file=paste0(\"${prefix}\",\".unstranded.gene_counts.txt\"),\n        quote=FALSE,sep=\"\\t\",\n        row.names=FALSE) \n\n    gtf_table <- read.table(\"${params.trunc_refseq}\")\n    \n    fc <- featureCounts(files=\"${bam_file}\",\n        annot.ext=\"${params.trunc_refseq}\",\n        isGTFAnnotationFile=TRUE,\n        GTF.featureType=\"gene_length\",\n        useMetaFeatures=FALSE,\n        allowMultiOverlap=TRUE,\n        largestOverlap=TRUE,\n        countMultiMappingReads=FALSE,\n        isPairedEnd=${paired},\n        strandSpecific=0,\n        nthreads=8)\n    fc\\$annotation[\"TranscriptID\"] <- gtf_table[\"V13\"]\n    write.table(x=data.frame(fc\\$annotation[,c(\"GeneID\",\"TranscriptID\",\"Length\")],\n                             fc\\$counts,stringsAsFactors=FALSE),\n        file=paste0(\"${prefix}\",\".unstranded.5ptrunc_gene_counts.txt\"),\n        quote=FALSE,sep=\"\\t\",\n        row.names=FALSE)\n    \n    \"\"\"\n}",
        "nb_lignes_process": 151,
        "string_script": "    if (params.singleEnd) {\n        paired = 'FALSE'\n    } else {\n        paired = 'TRUE'\n    }\n    \n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    library(\"Rsubread\")\n\n    gtf_table <- read.table(\"${params.filtered_refseq}\")   \n\n    if (${paired} == 'FALSE') {\n\n    fc <- featureCounts(files=\"${bam_file}\",\n        annot.ext=\"${params.filtered_refseq}\",\n        isGTFAnnotationFile=TRUE,\n        GTF.featureType=\"gene_length\",\n        useMetaFeatures=FALSE,\n        allowMultiOverlap=TRUE,\n        largestOverlap=TRUE,\n        countMultiMappingReads=FALSE,\n        isPairedEnd=${paired},\n        strandSpecific=1,\n        nthreads=8)\n    fc\\$annotation[\"TranscriptID\"] <- gtf_table[\"V13\"]\n    write.table(x=data.frame(fc\\$annotation[,c(\"GeneID\",\"TranscriptID\",\"Length\")],\n                             fc\\$counts,stringsAsFactors=FALSE),\n        file=paste0(\"${prefix}\",\".stranded.gene_counts.txt\"),\n        quote=FALSE,sep=\"\\t\",\n        row.names=FALSE)\n\n    fc <- featureCounts(files=\"${bam_file}\",\n        annot.ext=\"${params.trunc_refseq}\",\n        isGTFAnnotationFile=TRUE,\n        GTF.featureType=\"gene_length\",\n        useMetaFeatures=FALSE,\n        allowMultiOverlap=TRUE,\n        largestOverlap=TRUE,\n        countMultiMappingReads=FALSE,\n        isPairedEnd=${paired},\n        strandSpecific=1,\n        nthreads=8)\n    fc\\$annotation[\"TranscriptID\"] <- gtf_table[\"V13\"]\n    write.table(x=data.frame(fc\\$annotation[,c(\"GeneID\",\"TranscriptID\",\"Length\")],\n                             fc\\$counts,stringsAsFactors=FALSE),\n        file=paste0(\"${prefix}\",\".stranded.5ptrunc_gene_counts.txt\"),\n        quote=FALSE,sep=\"\\t\",\n        row.names=FALSE)\n\n    } else {\n\n    fc <- featureCounts(files=\"${bam_file}\",\n        annot.ext=\"${params.filtered_refseq}\",\n        isGTFAnnotationFile=TRUE,\n        GTF.featureType=\"gene_length\",\n        useMetaFeatures=FALSE,\n        allowMultiOverlap=TRUE,\n        largestOverlap=TRUE,\n        countMultiMappingReads=FALSE,\n        isPairedEnd=${paired},\n        strandSpecific=2,\n        nthreads=8)\n    fc\\$annotation[\"TranscriptID\"] <- gtf_table[\"V13\"]\n    write.table(x=data.frame(fc\\$annotation[,c(\"GeneID\",\"TranscriptID\",\"Length\")],\n                             fc\\$counts,stringsAsFactors=FALSE),\n        file=paste0(\"${prefix}\",\".stranded.gene_counts.txt\"),\n        quote=FALSE,sep=\"\\t\",\n        row.names=FALSE)\n\n    fc <- featureCounts(files=\"${bam_file}\",\n        annot.ext=\"${params.trunc_refseq}\",\n        isGTFAnnotationFile=TRUE,\n        GTF.featureType=\"gene_length\",\n        useMetaFeatures=FALSE,\n        allowMultiOverlap=TRUE,\n        largestOverlap=TRUE,\n        countMultiMappingReads=FALSE,\n        isPairedEnd=${paired},\n        strandSpecific=2,\n        nthreads=8)\n    fc\\$annotation[\"TranscriptID\"] <- gtf_table[\"V13\"]\n    write.table(x=data.frame(fc\\$annotation[,c(\"GeneID\",\"TranscriptID\",\"Length\")],\n                             fc\\$counts,stringsAsFactors=FALSE),\n        file=paste0(\"${prefix}\",\".stranded.5ptrunc_gene_counts.txt\"),\n        quote=FALSE,sep=\"\\t\",\n        row.names=FALSE)\n\n    }\n\n    fc <- featureCounts(files=\"${bam_file}\",\n        annot.ext=\"${params.filtered_refseq}\",\n        isGTFAnnotationFile=TRUE,\n        GTF.featureType=\"gene_length\",\n        useMetaFeatures=FALSE,\n        allowMultiOverlap=TRUE,\n        largestOverlap=TRUE,\n        countMultiMappingReads=FALSE,\n        isPairedEnd=${paired},\n        strandSpecific=0,\n        nthreads=8)\n    fc\\$annotation[\"TranscriptID\"] <- gtf_table[\"V13\"]\n    write.table(x=data.frame(fc\\$annotation[,c(\"GeneID\",\"TranscriptID\",\"Length\")],\n                             fc\\$counts,stringsAsFactors=FALSE),\n        file=paste0(\"${prefix}\",\".unstranded.gene_counts.txt\"),\n        quote=FALSE,sep=\"\\t\",\n        row.names=FALSE) \n\n    gtf_table <- read.table(\"${params.trunc_refseq}\")\n    \n    fc <- featureCounts(files=\"${bam_file}\",\n        annot.ext=\"${params.trunc_refseq}\",\n        isGTFAnnotationFile=TRUE,\n        GTF.featureType=\"gene_length\",\n        useMetaFeatures=FALSE,\n        allowMultiOverlap=TRUE,\n        largestOverlap=TRUE,\n        countMultiMappingReads=FALSE,\n        isPairedEnd=${paired},\n        strandSpecific=0,\n        nthreads=8)\n    fc\\$annotation[\"TranscriptID\"] <- gtf_table[\"V13\"]\n    write.table(x=data.frame(fc\\$annotation[,c(\"GeneID\",\"TranscriptID\",\"Length\")],\n                             fc\\$counts,stringsAsFactors=FALSE),\n        file=paste0(\"${prefix}\",\".unstranded.5ptrunc_gene_counts.txt\"),\n        quote=FALSE,sep=\"\\t\",\n        row.names=FALSE)\n    \n    \"\"\"",
        "nb_lignes_script": 129,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_for_gene_counting"
        ],
        "nb_inputs": 1,
        "outputs": [
            "gene_count_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "Dowell-Lab__Bidirectional-Flow",
        "directive": [
            "tag \"$prefix\"",
            "memory '8 GB'",
            "time '3h'",
            "cpus 8",
            "queue 'short'",
            "publishDir \"${params.outdir}/featurecounts_genes/\", mode: 'copy', pattern: \"*gene_counts.txt\""
        ],
        "when": "params.gene_count",
        "stub": ""
    }
}
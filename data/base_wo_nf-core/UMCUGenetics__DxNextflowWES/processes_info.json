{
    "ExonCovImportBam": {
        "name_process": "ExonCovImportBam",
        "string_process": "\nprocess ExonCovImportBam {\n                                               \n    tag {\"ExonCov ImportBam ${sample_id}\"}\n    label 'ExonCov'\n    label 'ExonCov_ImportBam'\n    shell = ['/bin/bash', '-eo', 'pipefail']\n\n    input:\n        tuple(analysis_id, sample_id, path(bam_file), path(bai_file))\n\n    output:\n        tuple(sample_id, stdout)\n\n    script:\n        \"\"\"\n        source ${params.exoncov_path}/venv/bin/activate\n        python ${params.exoncov_path}/ExonCov.py import_bam \\\n        --threads ${task.cpus} \\\n        --overwrite \\\n        --print_sample_id \\\n        --exon_bed ${params.dxtracks_path}/${params.exoncov_bed} \\\n        ${analysis_id} WES ${bam_file} | tr -d '\\n'\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n        source ${params.exoncov_path}/venv/bin/activate\n        python ${params.exoncov_path}/ExonCov.py import_bam \\\n        --threads ${task.cpus} \\\n        --overwrite \\\n        --print_sample_id \\\n        --exon_bed ${params.dxtracks_path}/${params.exoncov_bed} \\\n        ${analysis_id} WES ${bam_file} | tr -d '\\n'\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_file",
            "bai_file",
            "analysis_id"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "UMCUGenetics__DxNextflowWES",
        "directive": [
            "tag {\"ExonCov ImportBam ${sample_id}\"}",
            "label 'ExonCov'",
            "label 'ExonCov_ImportBam' shell = ['/bin/bash', '-eo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "ExonCovSampleQC": {
        "name_process": "ExonCovSampleQC",
        "string_process": "\nprocess ExonCovSampleQC {\n                                              \n    tag {\"ExonCov Sample QC ${analysis_id}\"}\n    label 'ExonCov'\n    label 'ExonCov_SampleQC'\n    shell = ['/bin/bash', '-eo', 'pipefail']\n\n    input:\n        tuple(analysis_id, sample_ids, indications)\n\n    output:\n        path(\"${analysis_id}.ExonCovQC_check.out\")\n\n    script:\n        def samples = sample_ids.collect{\"$it\"}.join(\" \")\n        def panels = indications.collect{\"$it\"}.join(\" \")\n        \"\"\"\n        source ${params.exoncov_path}/venv/bin/activate\n        python ${params.exoncov_path}/ExonCov.py sample_qc \\\n        -s ${samples} -p ${panels} > ${analysis_id}.ExonCovQC_check.out\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        def samples = sample_ids.collect{\"$it\"}.join(\" \")\n        def panels = indications.collect{\"$it\"}.join(\" \")\n        \"\"\"\n        source ${params.exoncov_path}/venv/bin/activate\n        python ${params.exoncov_path}/ExonCov.py sample_qc \\\n        -s ${samples} -p ${panels} > ${analysis_id}.ExonCovQC_check.out\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "analysis_id"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowWES",
        "directive": [
            "tag {\"ExonCov Sample QC ${analysis_id}\"}",
            "label 'ExonCov'",
            "label 'ExonCov_SampleQC' shell = ['/bin/bash', '-eo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "ClarityEppIndications": {
        "name_process": "ClarityEppIndications",
        "string_process": "\nprocess ClarityEppIndications {\n                                                                  \n    tag {\"ClarityEppExportSampleIndications ${analysis_id}\"}\n    label 'ClarityEpp'\n    shell = ['/bin/bash', '-eo', 'pipefail']\n    cache = false                                                                    \n\n    input:\n        val(sample_id)\n\n    output:\n        tuple(sample_id, stdout)\n\n    script:\n        \"\"\"\n        source ${params.clarity_epp_path}/venv/bin/activate\n        python ${params.clarity_epp_path}/clarity_epp.py export sample_indications \\\n        -a ${sample_id} | cut -f 2 | grep -v 'Indication' | tr -d '\\n'\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        source ${params.clarity_epp_path}/venv/bin/activate\n        python ${params.clarity_epp_path}/clarity_epp.py export sample_indications \\\n        -a ${sample_id} | cut -f 2 | grep -v 'Indication' | tr -d '\\n'\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "UMCUGenetics__DxNextflowWES",
        "directive": [
            "tag {\"ClarityEppExportSampleIndications ${analysis_id}\"}",
            "label 'ClarityEpp' shell = ['/bin/bash', '-eo', 'pipefail']",
            "cache = false"
        ],
        "when": "",
        "stub": ""
    },
    "ExomeDepth": {
        "name_process": "ExomeDepth",
        "string_process": "\nprocess ExomeDepth {\n                                       \n    tag {\"ExomeDepth ${sample_id}\"}\n    label 'ExomeDepth'\n    shell = ['/bin/bash', '-eo', 'pipefail']\n\n    input:\n        tuple(analysis_id, sample_id, path(bam_file), path(bai_file))\n\n    output:\n        path(\"*.xml\", emit: ED_xml)\n        path(\"*.log\", emit: ED_log)\n        path(\"HC_*.igv\", emit: HC_igv)\n        path(\"UMCU_*.igv\", emit: UMCU_igv)\n        path(\"HC_*.vcf\", emit: HC_vcf)\n        path(\"UMCU_*.vcf\", emit: UMCU_vcf)\n        path('HC_*_stats.log', emit: HC_stats_log)\n        path('UMCU_*_stats.log', emit: UMCU_stats_log)\n\n    script:\n        \"\"\"\n        source ${params.exomedepth_path}/venv/bin/activate\n        python ${params.exomedepth_path}/run_ExomeDepth.py callcnv ./ ${bam_file} ${analysis_id} ${sample_id}\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"\n        source ${params.exomedepth_path}/venv/bin/activate\n        python ${params.exomedepth_path}/run_ExomeDepth.py callcnv ./ ${bam_file} ${analysis_id} ${sample_id}\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_file",
            "bai_file",
            "analysis_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowWES",
        "directive": [
            "tag {\"ExomeDepth ${sample_id}\"}",
            "label 'ExomeDepth' shell = ['/bin/bash', '-eo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "ExomeDepthSummary": {
        "name_process": "ExomeDepthSummary",
        "string_process": "\nprocess ExomeDepthSummary {\n                                                       \n    tag {\"ExomeDepthSummary\"}\n    label 'ExomeDepthSummary'\n    shell = ['/bin/bash', '-eo', 'pipefail']\n\n    input:\n        val(analysis_id)\n        path(exomedepth_logs)\n\n    output:\n        path(\"${analysis_id}_exomedepth_summary.txt\")\n\n    script:\n        \"\"\"\n        source ${params.exomedepth_path}/venv/bin/activate\n        python ${params.exomedepth_path}/exomedepth_summary.py ${exomedepth_logs}  > ${analysis_id}_exomedepth_summary.txt\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        source ${params.exomedepth_path}/venv/bin/activate\n        python ${params.exomedepth_path}/exomedepth_summary.py ${exomedepth_logs}  > ${analysis_id}_exomedepth_summary.txt\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "analysis_id",
            "exomedepth_logs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowWES",
        "directive": [
            "tag {\"ExomeDepthSummary\"}",
            "label 'ExomeDepthSummary' shell = ['/bin/bash', '-eo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "Kinship": {
        "name_process": "Kinship",
        "string_process": "\nprocess Kinship {\n                                          \n                              \n                                                                          \n                            \n    tag {\"Kinship ${analysis_id}\"}\n    label 'Kinship'\n                                                                     \n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(analysis_id, path(vcf_file), path(vcf_index))\n\n    output:\n        tuple(analysis_id, path(\"${analysis_id}.kinship\"), path(\"${analysis_id}.kinship_check.out\"))\n\n    script:\n        \"\"\"\n        ${params.vcftools_path}/vcftools --vcf ${vcf_file} --plink\n        ${params.plink_path}/plink --file out --make-bed --noweb\n        ${params.king_path}/king -b plink.bed --kinship\n        cp king.kin0 ${analysis_id}.kinship\n        python ${baseDir}/assets/check_kinship.py ${analysis_id}.kinship ${ped_file} > ${analysis_id}.kinship_check.out\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"\n        ${params.vcftools_path}/vcftools --vcf ${vcf_file} --plink\n        ${params.plink_path}/plink --file out --make-bed --noweb\n        ${params.king_path}/king -b plink.bed --kinship\n        cp king.kin0 ${analysis_id}.kinship\n        python ${baseDir}/assets/check_kinship.py ${analysis_id}.kinship ${ped_file} > ${analysis_id}.kinship_check.out\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "VCFtools",
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/vcftools",
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "VCFtools",
                "uri": "https://bio.tools/vcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3675",
                                    "term": "Variant filtering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Provide easily accessible methods for working with complex genetic variation data in the form of VCF files.",
                "homepage": "https://vcftools.github.io/index.html"
            },
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "vcf_file",
            "vcf_index",
            "analysis_id"
        ],
        "nb_inputs": 3,
        "outputs": [
            "analysis_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "UMCUGenetics__DxNextflowWES",
        "directive": [
            "tag {\"Kinship ${analysis_id}\"}",
            "label 'Kinship' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "GetStatsFromFlagstat": {
        "name_process": "GetStatsFromFlagstat",
        "string_process": "\nprocess GetStatsFromFlagstat {\n                                                       \n    tag {\"GetStatsFromFlagstat\"}\n    label 'GetStatsFromFlagstat'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        path(flagstat_files)\n\n    output:\n        path('run_stats.txt')\n\n    script:\n        \"\"\"\n        python ${baseDir}/assets/get_stats_from_flagstat.py ${flagstat_files} > run_stats.txt\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        python ${baseDir}/assets/get_stats_from_flagstat.py ${flagstat_files} > run_stats.txt\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "flagstat_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowWES",
        "directive": [
            "tag {\"GetStatsFromFlagstat\"}",
            "label 'GetStatsFromFlagstat' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CreateHSmetricsSummary": {
        "name_process": "CreateHSmetricsSummary",
        "string_process": "\nprocess CreateHSmetricsSummary {\n                                                       \n    tag {\"CreateHSmetricsSummary\"}\n    label 'CreateHSmetricsSummary'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        path(hsmetrics_files)\n\n    output:\n        path('HSMetrics_summary.txt')\n\n    script:\n        \"\"\"\n        python ${baseDir}/assets/create_hsmetrics_summary.py ${hsmetrics_files} > HSMetrics_summary.txt\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        python ${baseDir}/assets/create_hsmetrics_summary.py ${hsmetrics_files} > HSMetrics_summary.txt\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "hsmetrics_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowWES",
        "directive": [
            "tag {\"CreateHSmetricsSummary\"}",
            "label 'CreateHSmetricsSummary' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "TrendAnalysisTool": {
        "name_process": "TrendAnalysisTool",
        "string_process": "\nprocess TrendAnalysisTool {\n                                                \n    tag {\"TrendAnalysisTool ${analysis_id}\"}\n    label 'TrendAnalysisTool'\n    shell = ['/bin/bash', '-eo', 'pipefail']\n\n    input:\n        tuple(analysis_id, path(input_files))\n\n    script:\n        \"\"\"\n        source ${params.trend_analysis_path}/venv/bin/activate\n        python ${params.trend_analysis_path}/trend_analysis.py upload processed_data ${analysis_id} .\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        source ${params.trend_analysis_path}/venv/bin/activate\n        python ${params.trend_analysis_path}/trend_analysis.py upload processed_data ${analysis_id} .\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_files",
            "analysis_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowWES",
        "directive": [
            "tag {\"TrendAnalysisTool ${analysis_id}\"}",
            "label 'TrendAnalysisTool' shell = ['/bin/bash', '-eo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "SavePedFile": {
        "name_process": "SavePedFile",
        "string_process": "\nprocess SavePedFile {\n    tag {\"SavePedFile ${analysis_id}\"}\n    label 'SavePedFile'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    cache = false                                                                            \n\n    output:\n        path(\"*.ped\")\n\n    script:\n        \"\"\"\n        cp ${ped_file} ./\n        \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        cp ${ped_file} ./\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowWES",
        "directive": [
            "tag {\"SavePedFile ${analysis_id}\"}",
            "label 'SavePedFile' shell = ['/bin/bash', '-euo', 'pipefail']",
            "cache = false"
        ],
        "when": "",
        "stub": ""
    },
    "VersionLog": {
        "name_process": "VersionLog",
        "string_process": "\nprocess VersionLog {\n                                                \n    tag {\"VersionLog ${analysis_id}\"}\n    label 'VersionLog'\n    shell = ['/bin/bash', '-eo', 'pipefail']\n    cache = false                                                                          \n\n    output:\n        path('repository_version.log')\n\n    script:\n        \"\"\"\n        echo 'DxNextflowWes' > repository_version.log\n        git --git-dir=${workflow.projectDir}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n\n        echo 'Dx_tracks' >> repository_version.log\n        git --git-dir=${params.dxtracks_path}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        echo 'DxNextflowWes' > repository_version.log\n        git --git-dir=${workflow.projectDir}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n\n        echo 'Dx_tracks' >> repository_version.log\n        git --git-dir=${params.dxtracks_path}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowWES",
        "directive": [
            "tag {\"VersionLog ${analysis_id}\"}",
            "label 'VersionLog' shell = ['/bin/bash', '-eo', 'pipefail']",
            "cache = false"
        ],
        "when": "",
        "stub": ""
    }
}
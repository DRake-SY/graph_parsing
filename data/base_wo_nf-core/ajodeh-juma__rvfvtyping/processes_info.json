{
    "IQTREE_QUERY": {
        "name_process": "IQTREE_QUERY",
        "string_process": "\nprocess IQTREE_QUERY {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::iqtree=2.0.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/iqtree:2.0.3--h176a8bc_1\"\n    } else {\n        container \"quay.io/biocontainers/iqtree:2.0.3--h176a8bc_1\"\n    }\n\n    input:\n    tuple val(meta), path(alignment)\n                        \n\n    output:\n    tuple val(meta), path(\"*.treefile\")    , emit: phylogeny\n    tuple val(meta), path(\"*.contree\")     , emit: consensus\n    tuple val(meta), path(\"*.iqtree\")      , emit: iqtree\n    path \"*.version.txt\"                   , emit: version\n\n    script:\n    def software          = getSoftwareName(task.process)\n    def memory            = task.memory.toString().replaceAll(' ', '')\n    def prefix            = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    iqtree \\\\\n        -s $alignment \\\\\n        -nt AUTO \\\\\n        -ntmax $task.cpus \\\\\n        -mem $memory \\\\\n        $options.args \\\\\n        -redo \n\n    echo \\$(iqtree -version 2>&1) | sed 's/^IQ-TREE multicore version \\\\([0-9\\\\.]*\\\\) .*\\$/\\\\1/' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software          = getSoftwareName(task.process)\n    def memory            = task.memory.toString().replaceAll(' ', '')\n    def prefix            = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    iqtree \\\\\n        -s $alignment \\\\\n        -nt AUTO \\\\\n        -ntmax $task.cpus \\\\\n        -mem $memory \\\\\n        $options.args \\\\\n        -redo \n\n    echo \\$(iqtree -version 2>&1) | sed 's/^IQ-TREE multicore version \\\\([0-9\\\\.]*\\\\) .*\\$/\\\\1/' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "alignment"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::iqtree=2.0.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/iqtree:2.0.3--h176a8bc_1\" } else { container \"quay.io/biocontainers/iqtree:2.0.3--h176a8bc_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "ORDER_BY_TIPLABELS": {
        "name_process": "ORDER_BY_TIPLABELS",
        "string_process": "\nprocess ORDER_BY_TIPLABELS {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::dendropy=4.5.2\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/dendropy:4.5.2--pyh3252c3a_0\"\n    } else {\n        container \"quay.io/biocontainers/dendropy:4.5.2--pyh3252c3a_0\"\n    }\n\n    input:\n    tuple val(meta), path(tree)\n    tuple val(meta), path(alignment)\n\n    output:\n    tuple val(meta), path(\"*.fasta\")       , emit: fasta\n\n    script:\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    orderseqs_by_tiplabels.py \\\\\n        --alignment $alignment \\\\\n        --tree $tree \\\\\n        --outfile ${prefix}.orderedseq.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    orderseqs_by_tiplabels.py \\\\\n        --alignment $alignment \\\\\n        --tree $tree \\\\\n        --outfile ${prefix}.orderedseq.fasta\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tree",
            "meta",
            "alignment"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::dendropy=4.5.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/dendropy:4.5.2--pyh3252c3a_0\" } else { container \"quay.io/biocontainers/dendropy:4.5.2--pyh3252c3a_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "DIAMOND_BLASTX": {
        "name_process": "DIAMOND_BLASTX",
        "string_process": "\nprocess DIAMOND_BLASTX {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::diamond=2.0.9' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/diamond:2.0.9--hdcc8f71_0'\n    } else {\n        container 'quay.io/biocontainers/diamond:2.0.9--hdcc8f71_0'\n    }\n\n    input:\n    tuple val(meta), path(fasta)\n    path  db\n\n    output:\n    tuple val(meta), path('*.blastx.txt')  , emit: txt\n    path '*.version.txt'                   , emit: version\n\n    script:\n    def software  = getSoftwareName(task.process)\n    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    DB=`find -L ./ -name \"*.dmnd\" | sed 's/.dmnd//'`\n\n    diamond blastx \\\\\n        --threads $task.cpus \\\\\n        --query $fasta \\\\\n        --db \\$DB \\\\\n        --out ${prefix}.dmnd.blastx.txt \\\\\n        --outfmt 6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore staxids sscinames stitle\n    \n    echo \\$(diamond version 2>&1) | tr -d [a-z] | sed -e 's/^[[:space:]]*//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def software  = getSoftwareName(task.process)\n    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    DB=`find -L ./ -name \"*.dmnd\" | sed 's/.dmnd//'`\n\n    diamond blastx \\\\\n        --threads $task.cpus \\\\\n        --query $fasta \\\\\n        --db \\$DB \\\\\n        --out ${prefix}.dmnd.blastx.txt \\\\\n        --outfmt 6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore staxids sscinames stitle\n    \n    echo \\$(diamond version 2>&1) | tr -d [a-z] | sed -e 's/^[[:space:]]*//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::diamond=2.0.9' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/diamond:2.0.9--hdcc8f71_0' } else { container 'quay.io/biocontainers/diamond:2.0.9--hdcc8f71_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "SNPS_TO_CSV": {
        "name_process": "SNPS_TO_CSV",
        "string_process": "\nprocess SNPS_TO_CSV {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.6.1\"\n    } else {\n        container \"quay.io/biocontainers/python:3.6.1\"\n    }\n\n    input:\n    tuple val(meta), path(alignment)\n\n    output:\n    tuple val(meta), path(\"*.csv\")           , emit: csv\n\n    script:\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    snpsTodataframe.py \\\\\n        --fasta $alignment \\\\\n        --outfile ${prefix}.masked_snps.csv\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    snpsTodataframe.py \\\\\n        --fasta $alignment \\\\\n        --outfile ${prefix}.masked_snps.csv\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "alignment"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.6.1\" } else { container \"quay.io/biocontainers/python:3.6.1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SUMMARY_LINEAGES": {
        "name_process": "SUMMARY_LINEAGES",
        "string_process": "\nprocess SUMMARY_LINEAGES {\n    tag \"summarize_lineages\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.6.1\"\n    } else {\n        container \"quay.io/biocontainers/python:3.6.1\"\n    }\n\n    input:\n    path query\n    path assignment\n    tuple val(meta) path(lineage)\n\n    output:\n    path \"*.csv\",         emit: summary\n\n    script:\n    def software  = getSoftwareName(task.process)\n                                                                       \n\n    \"\"\"\n    report.py \\\\\n        --query $query \\\\\n        --assignment $assignment \\\\\n        --lineage-csv $lineage\n    \"\"\"\n    \n}",
        "nb_lignes_process": 33,
        "string_script": "    def software  = getSoftwareName(task.process)\n                                                                       \n\n    \"\"\"\n    report.py \\\\\n        --query $query \\\\\n        --assignment $assignment \\\\\n        --lineage-csv $lineage\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "query",
            "assignment",
            "meta",
            "lineage"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"summarize_lineages\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.6.1\" } else { container \"quay.io/biocontainers/python:3.6.1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.6.1\"\n    } else {\n        container \"quay.io/biocontainers/python:3.6.1\"\n    }\n\n    cache false\n\n    input:\n    path versions\n    \n    output:\n    path \"software_versions.csv\"     , emit: csv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }",
            "conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.6.1\" } else { container \"quay.io/biocontainers/python:3.6.1\" }",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "DENDROPY_LINEAGE": {
        "name_process": "DENDROPY_LINEAGE",
        "string_process": "\nprocess DENDROPY_LINEAGE {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::dendropy=4.5.2\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/dendropy:4.5.2--pyh3252c3a_0\"\n    } else {\n        container \"quay.io/biocontainers/dendropy:4.5.2--pyh3252c3a_0\"\n    }\n\n    input:\n    tuple val(meta), path(in_tree)\n\n    output:\n    tuple val(meta), path(\"*.csv\")           , emit: lineage_csv\n    path '*.version.txt'                     , emit: version\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def collapse    = 0.000005\n\n    \"\"\"\n    \n    assignLineage.py  \\\\\n        --separator '|' \\\\\n        --index 1 \\\\\n        --taxon ${prefix} \\\\\n        --collapse_to_polytomies ${collapse} \\\\\n        --input $in_tree \\\\\n        --output ${prefix}.lineage.csv\n\n    \n    echo \\$(python -c 'import dendropy; print(dendropy.__version__)') > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def collapse    = 0.000005\n\n    \"\"\"\n    \n    assignLineage.py  \\\\\n        --separator '|' \\\\\n        --index 1 \\\\\n        --taxon ${prefix} \\\\\n        --collapse_to_polytomies ${collapse} \\\\\n        --input $in_tree \\\\\n        --output ${prefix}.lineage.csv\n\n    \n    echo \\$(python -c 'import dendropy; print(dendropy.__version__)') > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "in_tree"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::dendropy=4.5.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/dendropy:4.5.2--pyh3252c3a_0\" } else { container \"quay.io/biocontainers/dendropy:4.5.2--pyh3252c3a_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "IQTREE": {
        "name_process": "IQTREE",
        "string_process": "\nprocess IQTREE {\n    tag \"$alignment\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::iqtree=2.1.2\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/iqtree:2.1.2--h56fc30b_0\"\n    } else {\n        container \"quay.io/biocontainers/iqtree:2.1.2--h56fc30b_0\"\n    }\n\n    input:\n    path alignment\n                        \n\n    output:\n    path \"*.treefile\",    emit: phylogeny\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software    = getSoftwareName(task.process)\n                                                                        \n    def memory      = task.memory.toString().replaceAll(' ', '')\n                      \n    \"\"\"\n    iqtree \\\\\n        $options.args \\\\\n        -s $alignment \\\\\n        -nt AUTO \\\\\n        -ntmax $task.cpus \\\\\n        -mem $memory \\\\\n\n    echo \\$(iqtree -version 2>&1) | sed 's/^IQ-TREE multicore version \\\\([0-9\\\\.]*\\\\) .*\\$/\\\\1/' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def software    = getSoftwareName(task.process)\n                                                                        \n    def memory      = task.memory.toString().replaceAll(' ', '')\n                      \n    \"\"\"\n    iqtree \\\\\n        $options.args \\\\\n        -s $alignment \\\\\n        -nt AUTO \\\\\n        -ntmax $task.cpus \\\\\n        -mem $memory \\\\\n\n    echo \\$(iqtree -version 2>&1) | sed 's/^IQ-TREE multicore version \\\\([0-9\\\\.]*\\\\) .*\\$/\\\\1/' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$alignment\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::iqtree=2.1.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/iqtree:2.1.2--h56fc30b_0\" } else { container \"quay.io/biocontainers/iqtree:2.1.2--h56fc30b_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FILTER_INPUT": {
        "name_process": "FILTER_INPUT",
        "string_process": "\nprocess FILTER_INPUT {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.6.1\"\n    } else {\n        container \"quay.io/biocontainers/python:3.6.1\"\n    }\n\n    input:\n    tuple val(meta), path(fasta)\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: txt\n\n    script:\n    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                           \n\n    \"\"\"\n    filter_input.py \\\\\n        --fasta $fasta \\\\\n        --out ${prefix}.txt\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                           \n\n    \"\"\"\n    filter_input.py \\\\\n        --fasta $fasta \\\\\n        --out ${prefix}.txt\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.6.1\" } else { container \"quay.io/biocontainers/python:3.6.1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MAFFT_ALIGN_QUERY": {
        "name_process": "MAFFT_ALIGN_QUERY",
        "string_process": "\nprocess MAFFT_ALIGN_QUERY {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::mafft=7.475' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/mafft:7.475--h779adbc_1'\n    } else {\n        container 'quay.io/biocontainers/mafft:7.475--h779adbc_1'\n    }\n\n    input:\n    tuple val(meta),  path(query)\n    path  (alignment)\n\n    output:\n    tuple val(meta), path('*.fasta')         , emit: alignment\n    tuple val(meta), path('*.log')           , emit: log\n    path '*.version.txt'                     , emit: version\n\n    script:\n    def software  = getSoftwareName(task.process)\n    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n\n    \"\"\"\n    mafft \\\\\n        --add $query \\\\\n        --thread $task.cpus \\\\\n        $alignment 1> \\\\\n        ${prefix}.align.fasta 2> \\\\\n        ${prefix}.log\n    \n    echo \\$(mafft --version 2>&1) | sed -e 's/^*.v\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def software  = getSoftwareName(task.process)\n    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n\n    \"\"\"\n    mafft \\\\\n        --add $query \\\\\n        --thread $task.cpus \\\\\n        $alignment 1> \\\\\n        ${prefix}.align.fasta 2> \\\\\n        ${prefix}.log\n    \n    echo \\$(mafft --version 2>&1) | sed -e 's/^*.v\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "MAFFT"
        ],
        "tools_url": [
            "https://bio.tools/MAFFT"
        ],
        "tools_dico": [
            {
                "name": "MAFFT",
                "uri": "https://bio.tools/MAFFT",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.",
                "homepage": "http://mafft.cbrc.jp/alignment/server/index.html"
            }
        ],
        "inputs": [
            "meta",
            "query",
            "alignment"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::mafft=7.475' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/mafft:7.475--h779adbc_1' } else { container 'quay.io/biocontainers/mafft:7.475--h779adbc_1' }"
        ],
        "when": "",
        "stub": ""
    },
    "CHECK_SEGMENTS": {
        "name_process": "CHECK_SEGMENTS",
        "string_process": "\nprocess CHECK_SEGMENTS {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.6.1\"\n    } else {\n        container \"quay.io/biocontainers/python:3.6.1\"\n    }\n\n    input:\n    tuple val(meta), path(blast)\n\n    output:\n    tuple val(meta), path(\"*.tophit.txt\"), emit: txt\n\n    script:\n    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    check_segments.py \\\\\n        --blast $blast \\\\\n        --out ${prefix}.tophit.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    check_segments.py \\\\\n        --blast $blast \\\\\n        --out ${prefix}.tophit.txt\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "blast"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.6.1\" } else { container \"quay.io/biocontainers/python:3.6.1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FIND_SNPS": {
        "name_process": "FIND_SNPS",
        "string_process": "\nprocess FIND_SNPS {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.6.1\"\n    } else {\n        container \"quay.io/biocontainers/python:3.6.1\"\n    }\n\n    input:\n    tuple val(meta), path(alignment)\n    tuple val(meta), path(lineages)\n\n    output:\n    tuple val(meta), path(\"*_seqs.csv\")    , emit: representative\n    tuple val(meta), path(\"*_snps.csv\")    , emit: defining\n    tuple val(meta), path(\"*_mask.csv\")    , emit: mask\n\n    script:\n    def software  = getSoftwareName(task.process)\n    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    findSNPs.py \\\\\n        --alignment $alignment \\\\\n        --lineage-csv $lineages \\\\\n        --representative-seqs-out ${prefix}.representative_seqs.csv \\\\\n        --defining-snps-out ${prefix}.defining_snps.csv \\\\\n        --mask-out ${prefix}.to_mask.csv\n\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def software  = getSoftwareName(task.process)\n    def prefix    = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    findSNPs.py \\\\\n        --alignment $alignment \\\\\n        --lineage-csv $lineages \\\\\n        --representative-seqs-out ${prefix}.representative_seqs.csv \\\\\n        --defining-snps-out ${prefix}.defining_snps.csv \\\\\n        --mask-out ${prefix}.to_mask.csv\n\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "alignment",
            "meta",
            "lineages"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.6.1\" } else { container \"quay.io/biocontainers/python:3.6.1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BIOPYTHON_NEWICK_TO_NEXUS": {
        "name_process": "BIOPYTHON_NEWICK_TO_NEXUS",
        "string_process": "\nprocess BIOPYTHON_NEWICK_TO_NEXUS {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::biopython=1.78\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/biopython:1.78\"\n    } else {\n        container \"quay.io/biocontainers/biopython:1.78\"\n    }\n\n    input:\n    tuple val(meta), path(in_tree)\n\n    output:\n    tuple val(meta), path(\"*.nexus\")         , emit: out_tree\n    path '*.version.txt'                     , emit: version\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def in_format   = \"newick\"\n    def out_format  = \"nexus\"\n    \n    \"\"\"\n    convertTreeFormats.py \\\\\n        --in-tree $in_tree \\\\\n        --in-format ${in_format} \\\\\n        --out-tree ${prefix}.nexus \\\\\n        --out-format ${out_format}\n\n    echo \\$(python -c 'import Bio; print(Bio.__version__)') > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def prefix      = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def in_format   = \"newick\"\n    def out_format  = \"nexus\"\n    \n    \"\"\"\n    convertTreeFormats.py \\\\\n        --in-tree $in_tree \\\\\n        --in-format ${in_format} \\\\\n        --out-tree ${prefix}.nexus \\\\\n        --out-format ${out_format}\n\n    echo \\$(python -c 'import Bio; print(Bio.__version__)') > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "in_tree"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::biopython=1.78\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/biopython:1.78\" } else { container \"quay.io/biocontainers/biopython:1.78\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MAFFT_ALIGN": {
        "name_process": "MAFFT_ALIGN",
        "string_process": "\nprocess MAFFT_ALIGN {\n    tag \"$fasta\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::mafft=7.475' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/mafft:7.475--h779adbc_1'\n    } else {\n        container 'quay.io/biocontainers/mafft:7.475--h779adbc_1'\n    }\n\n    input:\n    path fasta\n\n    output:\n    path '*.fasta'                           , emit: alignment\n    path '*.log'                             , emit: log\n    path '*.version.txt'                     , emit: version\n\n    script:\n    def software  = getSoftwareName(task.process)\n    def prefix   = fasta.baseName\n\n                   \n                     \n                      \n                              \n\n    \"\"\"\n    mafft \\\\\n        --thread $task.cpus \\\\\n        $fasta 1> \\\\\n        ${prefix}.align.fasta 2> \\\\\n        ${prefix}.log\n    \n    echo \\$(mafft --version 2>&1) | sed -e 's/^*.v\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software  = getSoftwareName(task.process)\n    def prefix   = fasta.baseName\n\n                   \n                     \n                      \n                              \n\n    \"\"\"\n    mafft \\\\\n        --thread $task.cpus \\\\\n        $fasta 1> \\\\\n        ${prefix}.align.fasta 2> \\\\\n        ${prefix}.log\n    \n    echo \\$(mafft --version 2>&1) | sed -e 's/^*.v\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "MAFFT"
        ],
        "tools_url": [
            "https://bio.tools/MAFFT"
        ],
        "tools_dico": [
            {
                "name": "MAFFT",
                "uri": "https://bio.tools/MAFFT",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.",
                "homepage": "http://mafft.cbrc.jp/alignment/server/index.html"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::mafft=7.475' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/mafft:7.475--h779adbc_1' } else { container 'quay.io/biocontainers/mafft:7.475--h779adbc_1' }"
        ],
        "when": "",
        "stub": ""
    },
    "PLOT_TREE_SNPS": {
        "name_process": "PLOT_TREE_SNPS",
        "string_process": "\nprocess PLOT_TREE_SNPS {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"conda-forge::r-base=4.0.3 conda-forge::r-argparse=2.0.3 conda-forge::r-dplyr=1.0.5 conda-forge::r-ggplot2=3.3.4 conda-forge::r-rcolorbrewer=1.1_2 conda-forge::r-rvcheck=0.1.8 conda-forge::r-tidytree=0.3.4 bioconda::bioconductor-biostrings=2.58.0 bioconda::bioconductor-ggtree=2.4.1 bioconda::bioconductor-treeio=1.14.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/r-base:3.5.1\"\n    } else {\n        container \"quay.io/biocontainers/r-base:3.5.1\"\n    }\n\n    input:\n    tuple val(meta), path(tree)\n    tuple val(meta), path(snps)\n    path (lineages)\n\n    output:\n    tuple val(meta), path(\"*.pdf\")      , emit: pdf\n\n    script:\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    plot_tree_snps.r \\\\\n        --treefile $tree \\\\\n        --snps $snps \\\\\n        --metadata $lineages \\\\\n        --prefix ${prefix}\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    plot_tree_snps.r \\\\\n        --treefile $tree \\\\\n        --snps $snps \\\\\n        --metadata $lineages \\\\\n        --prefix ${prefix}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tree",
            "meta",
            "snps",
            "lineages"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"conda-forge::r-base=4.0.3 conda-forge::r-argparse=2.0.3 conda-forge::r-dplyr=1.0.5 conda-forge::r-ggplot2=3.3.4 conda-forge::r-rcolorbrewer=1.1_2 conda-forge::r-rvcheck=0.1.8 conda-forge::r-tidytree=0.3.4 bioconda::bioconductor-biostrings=2.58.0 bioconda::bioconductor-ggtree=2.4.1 bioconda::bioconductor-treeio=1.14.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/r-base:3.5.1\" } else { container \"quay.io/biocontainers/r-base:3.5.1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GUNZIP_DATABASE": {
        "name_process": "GUNZIP_DATABASE",
        "string_process": "\nprocess GUNZIP_DATABASE {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? 'conda-forge::curl=7.76.1' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/curl:7.45.0--1'\n    } else {\n        container 'quay.io/biocontainers/curl:7.45.0--1'\n    }\n\n    input:\n    tuple val(meta), path(db)\n\n    output:\n    path 'diamond'                 , emit: database\n    path '*.version.txt'           , emit: version\n\n    script:\n    def software        = getSoftwareName(task.process)\n    def lastPath        = \"${db}\".lastIndexOf(File.separator)\n    def lastExt         = \"${db}\".lastIndexOf(\".\")\n    def base            = \"${db}\".substring(lastPath+1,lastExt)\n    \n    \"\"\"\n    mkdir diamond\n    gunzip --keep -f -c $db > diamond/$base\n    echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software        = getSoftwareName(task.process)\n    def lastPath        = \"${db}\".lastIndexOf(File.separator)\n    def lastExt         = \"${db}\".lastIndexOf(\".\")\n    def base            = \"${db}\".substring(lastPath+1,lastExt)\n    \n    \"\"\"\n    mkdir diamond\n    gunzip --keep -f -c $db > diamond/$base\n    echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "db"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? 'conda-forge::curl=7.76.1' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/curl:7.45.0--1' } else { container 'quay.io/biocontainers/curl:7.45.0--1' }"
        ],
        "when": "",
        "stub": ""
    },
    "SNPSITES": {
        "name_process": "SNPSITES",
        "string_process": "\nprocess SNPSITES {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::snp-sites=2.5.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/snp-sites:2.5.1--h188c3c3_1\"\n    } else {\n        container \"quay.io/biocontainers/snp-sites:2.5.1--h188c3c3_1\"\n    }\n\n    input:\n    path alignment\n\n    output:\n    path \"*.fas\"        , emit: fasta\n    path \"*.sites.txt\"  , emit: constant_sites\n    path \"*.version.txt\", emit: version\n    env   CONSTANT_SITES, emit: constant_sites_string\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    snp-sites \\\\\n        $alignment \\\\\n        $options.args \\\\\n        > filtered_alignment.fas\n\n    echo \\$(snp-sites -C $alignment) > constant.sites.txt\n\n    CONSTANT_SITES=\\$(cat constant.sites.txt)\n\n    echo \\$(snp-sites -V 2>&1) | sed 's/snp-sites //' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    snp-sites \\\\\n        $alignment \\\\\n        $options.args \\\\\n        > filtered_alignment.fas\n\n    echo \\$(snp-sites -C $alignment) > constant.sites.txt\n\n    CONSTANT_SITES=\\$(cat constant.sites.txt)\n\n    echo \\$(snp-sites -V 2>&1) | sed 's/snp-sites //' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::snp-sites=2.5.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/snp-sites:2.5.1--h188c3c3_1\" } else { container \"quay.io/biocontainers/snp-sites:2.5.1--h188c3c3_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "REPORT": {
        "name_process": "REPORT",
        "string_process": "\nprocess REPORT {\n    tag \"report\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.6.1\"\n    } else {\n        container \"quay.io/biocontainers/python:3.6.1\"\n    }\n\n    input:\n    path query\n    path assignment\n    tuple val(meta), path(lineage)\n    path diamond\n    \n\n    output:\n    path \"*.csv\",         emit: summary\n\n    script:\n    def software   = getSoftwareName(task.process)\n\n\n    if (params.skip_diamond) {\n        \"\"\"\n        report.py \\\\\n            --query $query \\\\\n            --assignment $assignment \\\\\n            --lineage-csv $lineage\n        \"\"\"\n    } else {\n        \"\"\"\n        report.py \\\\\n            --query $query \\\\\n            --assignment $assignment \\\\\n            --lineage-csv $lineage \\\\\n            --blast $diamond\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 44,
        "string_script": "    def software   = getSoftwareName(task.process)\n\n\n    if (params.skip_diamond) {\n        \"\"\"\n        report.py \\\\\n            --query $query \\\\\n            --assignment $assignment \\\\\n            --lineage-csv $lineage\n        \"\"\"\n    } else {\n        \"\"\"\n        report.py \\\\\n            --query $query \\\\\n            --assignment $assignment \\\\\n            --lineage-csv $lineage \\\\\n            --blast $diamond\n        \"\"\"\n    }",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "query",
            "assignment",
            "meta",
            "lineage",
            "diamond"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"report\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.6.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.6.1\" } else { container \"quay.io/biocontainers/python:3.6.1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTTREE": {
        "name_process": "FASTTREE",
        "string_process": "\nprocess FASTTREE {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::fasttree=2.1.10\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/fasttree:2.1.10--hb4d813b_5\"\n    } else {\n        container \"quay.io/biocontainers/fasttree:2.1.10--hb4d813b_5\"\n    }\n\n    input:\n    path alignment\n\n    output:\n    path \"*.tre\",         emit: phylogeny\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    fasttree \\\\\n        $options.args \\\\\n        -log fasttree_phylogeny.tre.log \\\\\n        -nt $alignment \\\\\n        > fasttree_phylogeny.tre\n\n    echo \\$(fasttree -help 2>&1) | head -1  | sed 's/^FastTree \\\\([0-9\\\\.]*\\\\) .*\\$/\\\\1/' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    fasttree \\\\\n        $options.args \\\\\n        -log fasttree_phylogeny.tre.log \\\\\n        -nt $alignment \\\\\n        > fasttree_phylogeny.tre\n\n    echo \\$(fasttree -help 2>&1) | head -1  | sed 's/^FastTree \\\\([0-9\\\\.]*\\\\) .*\\$/\\\\1/' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "FastTree"
        ],
        "tools_url": [
            "https://bio.tools/fasttree"
        ],
        "tools_dico": [
            {
                "name": "FastTree",
                "uri": "https://bio.tools/fasttree",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic inference (from molecular sequences)"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree construction (from molecular sequences)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree generation (from molecular sequences)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Infers approximately-maximum-likelihood phylogenetic trees from alignments of nucleotide or protein sequences.",
                "homepage": "http://www.microbesonline.org/fasttree/"
            }
        ],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::fasttree=2.1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/fasttree:2.1.10--hb4d813b_5\" } else { container \"quay.io/biocontainers/fasttree:2.1.10--hb4d813b_5\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PLOT_TREE_MSA": {
        "name_process": "PLOT_TREE_MSA",
        "string_process": "\nprocess PLOT_TREE_MSA {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"conda-forge::r-base=4.0.3 conda-forge::r-argparse=2.0.3 conda-forge::r-dplyr=1.0.5 conda-forge::r-ggplot2=3.3.4 conda-forge::r-rcolorbrewer=1.1_2 conda-forge::r-rvcheck=0.1.8 conda-forge::r-tidytree=0.3.4 bioconda::bioconductor-biostrings=2.58.0 bioconda::bioconductor-ggtree=2.4.1 bioconda::bioconductor-treeio=1.14.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/r-base:3.5.1\"\n    } else {\n        container \"quay.io/biocontainers/r-base:3.5.1\"\n    }\n\n    input:\n    tuple val(meta), path(tree)\n    tuple val(meta), path(alignment)\n\n    output:\n    tuple val(meta), path(\"*.pdf\")      , emit: pdf\n\n    script:\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    plot_tree_dist_msa.r \\\\\n        --treefile $tree \\\\\n        --alignment $alignment \\\\\n        --prefix ${prefix}\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    plot_tree_dist_msa.r \\\\\n        --treefile $tree \\\\\n        --alignment $alignment \\\\\n        --prefix ${prefix}\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "tree",
            "meta",
            "alignment"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ajodeh-juma__rvfvtyping",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"conda-forge::r-base=4.0.3 conda-forge::r-argparse=2.0.3 conda-forge::r-dplyr=1.0.5 conda-forge::r-ggplot2=3.3.4 conda-forge::r-rcolorbrewer=1.1_2 conda-forge::r-rvcheck=0.1.8 conda-forge::r-tidytree=0.3.4 bioconda::bioconductor-biostrings=2.58.0 bioconda::bioconductor-ggtree=2.4.1 bioconda::bioconductor-treeio=1.14.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/r-base:3.5.1\" } else { container \"quay.io/biocontainers/r-base:3.5.1\" }"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "pairedFastqToUnmappedBam": {
        "name_process": "pairedFastqToUnmappedBam",
        "string_process": "\nprocess pairedFastqToUnmappedBam {\n    tag \"${sample_name}\"\n\n\n    memory '8 GB'\n    cpus 2\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container gatk_docker\n\n    input:\n\n    tuple   file(fastq_1),\n            file(fastq_2),\n            val(run_date),\n            val(sample_name),\n            val(library_name),\n            val(platform_name),\n            val(platform_unit),\n            val(readgroup_name),\n            val(sequencing_center)\n\n    output:\n    tuple val(sample_name), path(\"${readgroup_name}.unmapped.bam\")\n\n    script:\n\n    gatk_path = \"/gatk/gatk\"\n\n    \"\"\"\n    ${gatk_path}  \\\n    FastqToSam \\\n    --FASTQ ${fastq_1} \\\n    --FASTQ2 ${fastq_2} \\\n    --OUTPUT ${readgroup_name}.unmapped.bam \\\n    --READ_GROUP_NAME ${readgroup_name} \\\n    --SAMPLE_NAME ${sample_name} \\\n    --LIBRARY_NAME ${library_name} \\\n    --PLATFORM_UNIT ${platform_unit} \\\n    --RUN_DATE ${run_date} \\\n    --PLATFORM ${platform_name} \\\n    --SEQUENCING_CENTER ${sequencing_center}\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    gatk_path = \"/gatk/gatk\"\n\n    \"\"\"\n    ${gatk_path}  \\\n    FastqToSam \\\n    --FASTQ ${fastq_1} \\\n    --FASTQ2 ${fastq_2} \\\n    --OUTPUT ${readgroup_name}.unmapped.bam \\\n    --READ_GROUP_NAME ${readgroup_name} \\\n    --SAMPLE_NAME ${sample_name} \\\n    --LIBRARY_NAME ${library_name} \\\n    --PLATFORM_UNIT ${platform_unit} \\\n    --RUN_DATE ${run_date} \\\n    --PLATFORM ${platform_name} \\\n    --SEQUENCING_CENTER ${sequencing_center}\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "run_date",
            "sample_name",
            "library_name",
            "platform_name",
            "platform_unit",
            "readgroup_name",
            "sequencing_center",
            "fastq_1",
            "fastq_2"
        ],
        "nb_inputs": 9,
        "outputs": [
            "sample_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sample_name}\"",
            "memory '8 GB'",
            "cpus 2",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container gatk_docker"
        ],
        "when": "",
        "stub": ""
    },
    "getBwaVersion": {
        "name_process": "getBwaVersion",
        "string_process": "\nprocess getBwaVersion {\n    tag \"BWA version\"\n\n    container gotc_docker\n\n    output:\n    stdout\n\n    script:\n\n    bwa_path = \"/usr/gitc\"\n    \"\"\"\n\n    ${bwa_path}/bwa 2>&1  \\\n    | grep -e '^Version'  \\\n    | sed 's/Version: //' \\\n    | tr -d '\\n'\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    bwa_path = \"/usr/gitc\"\n    \"\"\"\n\n    ${bwa_path}/bwa 2>&1  \\\n    | grep -e '^Version'  \\\n    | sed 's/Version: //' \\\n    | tr -d '\\n'\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"BWA version\"",
            "container gotc_docker"
        ],
        "when": "",
        "stub": ""
    },
    "samToFastqBwaMem": {
        "name_process": "samToFastqBwaMem",
        "string_process": "\nprocess samToFastqBwaMem {\n    tag \"${sampleId}\"\n\n    memory '64 GB'\n    cpus 32\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container gotc_docker\n\n    input:\n    tuple val(sampleId), path(input_unmapped_bam)\n\n    path(ref_alt)\n    path(ref_amb)\n    path(ref_ann)\n    path(ref_bwt)\n    path(ref_pac)\n    path(ref_sa)\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n    output:\n    val(sampleId)\n    path \"*.mapped.bam\"\n    path(input_unmapped_bam)\n\n    script:\n    \n    gotc_path = \"/usr/gitc\"\n    bwa_path = gotc_path\n    \"\"\"\n    set -o pipefail\n    set -e\n\n    java -Dsamjdk.compression_level=${params.compression_level} ${params.java_opt_samtofastq} \\\n        -jar ${gotc_path}/picard.jar \\\n        SamToFastq \\\n        INPUT=${input_unmapped_bam} \\\n        FASTQ=/dev/stdout \\\n        INTERLEAVE=true \\\n        NON_PF=true \\\n    | \\\n        ${bwa_path}/bwa mem \\\n         -K 100000000 -p -v 3 -t 32 -Y ${ref_fasta} /dev/stdin -  2> >(tee ${sampleId}.bwa.stderr.log >&2) \\\n    | \\\n        samtools view -1 - > ${sampleId}.mapped.bam\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    gotc_path = \"/usr/gitc\"\n    bwa_path = gotc_path\n    \"\"\"\n    set -o pipefail\n    set -e\n\n    java -Dsamjdk.compression_level=${params.compression_level} ${params.java_opt_samtofastq} \\\n        -jar ${gotc_path}/picard.jar \\\n        SamToFastq \\\n        INPUT=${input_unmapped_bam} \\\n        FASTQ=/dev/stdout \\\n        INTERLEAVE=true \\\n        NON_PF=true \\\n    | \\\n        ${bwa_path}/bwa mem \\\n         -K 100000000 -p -v 3 -t 32 -Y ${ref_fasta} /dev/stdin -  2> >(tee ${sampleId}.bwa.stderr.log >&2) \\\n    | \\\n        samtools view -1 - > ${sampleId}.mapped.bam\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sampleId",
            "input_unmapped_bam",
            "ref_alt",
            "ref_amb",
            "ref_ann",
            "ref_bwt",
            "ref_pac",
            "ref_sa",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai"
        ],
        "nb_inputs": 11,
        "outputs": [
            "sampleId",
            "input_unmapped_bam"
        ],
        "nb_outputs": 2,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sampleId}\"",
            "memory '64 GB'",
            "cpus 32",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container gotc_docker"
        ],
        "when": "",
        "stub": ""
    },
    "mergeBamAlignment": {
        "name_process": "mergeBamAlignment",
        "string_process": "\nprocess mergeBamAlignment {\n    tag \"${sampleId}\"\n\n    memory '64 GB'\n    cpus 32\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container gatk_docker\n\n    input:\n\n    val(sampleId)\n    path(input_mapped_bam)\n    path(input_unmapped_bam)\n\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n    val(bwa_version)\n\n    output:\n    val(sampleId)\n    path \"*.mapped.merged.bam\"\n\n    script:\n                                              \n    gatk_path = \"/gatk/gatk\"\n    bwa_commandline = \"bwa mem -K 100000000 -p -v 3 -t 32 -Y ${ref_fasta}\"\n\n    \"\"\"\n    ${gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opt_mergebams}\" \\\n    MergeBamAlignment  \\\n    --VALIDATION_STRINGENCY SILENT \\\n    --EXPECTED_ORIENTATIONS FR \\\n    --ATTRIBUTES_TO_RETAIN X0 \\\n    --ALIGNED_BAM ${input_mapped_bam} \\\n    --UNMAPPED_BAM ${input_unmapped_bam} \\\n    --OUTPUT ${sampleId}.mapped.merged.bam \\\n    --REFERENCE_SEQUENCE ${ref_fasta} \\\n    --PAIRED_RUN true \\\n    --SORT_ORDER \"unsorted\" \\\n    --IS_BISULFITE_SEQUENCE false \\\n    --ALIGNED_READS_ONLY false \\\n    --CLIP_ADAPTERS false \\\n    --MAX_RECORDS_IN_RAM 2000000 \\\n    --ADD_MATE_CIGAR true \\\n    --MAX_INSERTIONS_OR_DELETIONS -1 \\\n    --PRIMARY_ALIGNMENT_STRATEGY MostDistant \\\n    --PROGRAM_RECORD_ID \"bwamem\" \\\n    --PROGRAM_GROUP_VERSION \"${bwa_version}\" \\\n    --PROGRAM_GROUP_COMMAND_LINE \"${bwa_commandline}\" \\\n    --PROGRAM_GROUP_NAME \"bwamem\" \\\n    --UNMAPPED_READ_STRATEGY COPY_TO_TAG \\\n    --ALIGNER_PROPER_PAIR_FLAGS true \\\n    --UNMAP_CONTAMINANT_READS true\n    \"\"\"\n}",
        "nb_lignes_process": 59,
        "string_script": "    gatk_path = \"/gatk/gatk\"\n    bwa_commandline = \"bwa mem -K 100000000 -p -v 3 -t 32 -Y ${ref_fasta}\"\n\n    \"\"\"\n    ${gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opt_mergebams}\" \\\n    MergeBamAlignment  \\\n    --VALIDATION_STRINGENCY SILENT \\\n    --EXPECTED_ORIENTATIONS FR \\\n    --ATTRIBUTES_TO_RETAIN X0 \\\n    --ALIGNED_BAM ${input_mapped_bam} \\\n    --UNMAPPED_BAM ${input_unmapped_bam} \\\n    --OUTPUT ${sampleId}.mapped.merged.bam \\\n    --REFERENCE_SEQUENCE ${ref_fasta} \\\n    --PAIRED_RUN true \\\n    --SORT_ORDER \"unsorted\" \\\n    --IS_BISULFITE_SEQUENCE false \\\n    --ALIGNED_READS_ONLY false \\\n    --CLIP_ADAPTERS false \\\n    --MAX_RECORDS_IN_RAM 2000000 \\\n    --ADD_MATE_CIGAR true \\\n    --MAX_INSERTIONS_OR_DELETIONS -1 \\\n    --PRIMARY_ALIGNMENT_STRATEGY MostDistant \\\n    --PROGRAM_RECORD_ID \"bwamem\" \\\n    --PROGRAM_GROUP_VERSION \"${bwa_version}\" \\\n    --PROGRAM_GROUP_COMMAND_LINE \"${bwa_commandline}\" \\\n    --PROGRAM_GROUP_NAME \"bwamem\" \\\n    --UNMAPPED_READ_STRATEGY COPY_TO_TAG \\\n    --ALIGNER_PROPER_PAIR_FLAGS true \\\n    --UNMAP_CONTAMINANT_READS true\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "input_mapped_bam",
            "input_unmapped_bam",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai",
            "bwa_version"
        ],
        "nb_inputs": 7,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sampleId}\"",
            "memory '64 GB'",
            "cpus 32",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container gatk_docker"
        ],
        "when": "",
        "stub": ""
    },
    "markDuplicates": {
        "name_process": "markDuplicates",
        "string_process": "\nprocess markDuplicates {\n    tag \"${sampleId}\"\n\n    memory '32 GB'\n    cpus 16\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container gatk_docker\n\n    input:\n    val(sampleId)\n    path(input_mapped_merged_bam)\n\n    output:\n    val(sampleId)\n    path(\"*_merged.deduped.bam\")\n    path(\"*_merged.deduped.metrics.txt\")\n\n    script:\n    gatk_path = \"/gatk/gatk\"\n\n    \"\"\"\n    ${gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opt_markdups}\" \\\n    MarkDuplicates \\\n    --INPUT ${input_mapped_merged_bam} \\\n    --OUTPUT ${sampleId}_merged.deduped.bam \\\n    --METRICS_FILE ${sampleId}_merged.deduped.metrics.txt \\\n    --VALIDATION_STRINGENCY SILENT \\\n    --OPTICAL_DUPLICATE_PIXEL_DISTANCE 2500 \\\n    --ASSUME_SORT_ORDER \"queryname\" \\\n    --CREATE_MD5_FILE true\n    \"\"\"\n\n}",
        "nb_lignes_process": 35,
        "string_script": "    gatk_path = \"/gatk/gatk\"\n\n    \"\"\"\n    ${gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opt_markdups}\" \\\n    MarkDuplicates \\\n    --INPUT ${input_mapped_merged_bam} \\\n    --OUTPUT ${sampleId}_merged.deduped.bam \\\n    --METRICS_FILE ${sampleId}_merged.deduped.metrics.txt \\\n    --VALIDATION_STRINGENCY SILENT \\\n    --OPTICAL_DUPLICATE_PIXEL_DISTANCE 2500 \\\n    --ASSUME_SORT_ORDER \"queryname\" \\\n    --CREATE_MD5_FILE true\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "MarkDuplicates (IP)"
        ],
        "tools_url": [
            "https://bio.tools/markduplicates_ip"
        ],
        "tools_dico": [
            {
                "name": "MarkDuplicates (IP)",
                "uri": "https://bio.tools/markduplicates_ip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Marks all duplicate reads in a provided SAM or BAM file and either removes them or flags them.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=toolshed.pasteur.fr/repos/fmareuil/picard_pasteur_wrapper/rgPicardMarkDups/1.56.0"
            }
        ],
        "inputs": [
            "sampleId",
            "input_mapped_merged_bam"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sampleId}\"",
            "memory '32 GB'",
            "cpus 16",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container gatk_docker"
        ],
        "when": "",
        "stub": ""
    },
    "sortAndFixTags": {
        "name_process": "sortAndFixTags",
        "string_process": "\nprocess sortAndFixTags {\n    tag \"${sampleId}\"\n\n    memory '32 GB'\n    cpus 16\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container gatk_docker\n\n    publishDir \"${params.outdir}/sorted.bams/\", mode: 'copy', overwrite: true\n\n    input:\n    val(sampleId)\n    path(input_mapped_merged_marked_bam)\n\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n    output:\n    val(sampleId)\n    path(\"${sampleId}.mapped.merged.duplicate_marked.sorted.bam\")\n    path(\"${sampleId}.mapped.merged.duplicate_marked.sorted.bai\")\n    path(\"${sampleId}.mapped.merged.duplicate_marked.sorted.bam.md5\")\n\n\n    script:\n    gatk_path = \"/gatk/gatk\"\n\n    \"\"\"\n    set -o pipefail\n\n    ${gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opt_sort}\" \\\n      SortSam \\\n    --INPUT ${input_mapped_merged_marked_bam} \\\n    --OUTPUT /dev/stdout \\\n    --SORT_ORDER \"coordinate\" \\\n    --CREATE_INDEX false \\\n    --CREATE_MD5_FILE false \\\n    | \\\n    ${gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opt_fix}\" \\\n    SetNmMdAndUqTags \\\n    --INPUT /dev/stdin \\\n    --OUTPUT ${sampleId}.mapped.merged.duplicate_marked.sorted.bam \\\n    --CREATE_INDEX true \\\n    --CREATE_MD5_FILE true \\\n    --REFERENCE_SEQUENCE ${ref_fasta}\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    gatk_path = \"/gatk/gatk\"\n\n    \"\"\"\n    set -o pipefail\n\n    ${gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opt_sort}\" \\\n      SortSam \\\n    --INPUT ${input_mapped_merged_marked_bam} \\\n    --OUTPUT /dev/stdout \\\n    --SORT_ORDER \"coordinate\" \\\n    --CREATE_INDEX false \\\n    --CREATE_MD5_FILE false \\\n    | \\\n    ${gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opt_fix}\" \\\n    SetNmMdAndUqTags \\\n    --INPUT /dev/stdin \\\n    --OUTPUT ${sampleId}.mapped.merged.duplicate_marked.sorted.bam \\\n    --CREATE_INDEX true \\\n    --CREATE_MD5_FILE true \\\n    --REFERENCE_SEQUENCE ${ref_fasta}\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "input_mapped_merged_marked_bam",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai"
        ],
        "nb_inputs": 5,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sampleId}\"",
            "memory '32 GB'",
            "cpus 16",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container gatk_docker",
            "publishDir \"${params.outdir}/sorted.bams/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "createSequenceGrouping": {
        "name_process": "createSequenceGrouping",
        "string_process": "\nprocess createSequenceGrouping {\n    tag { \"Create sequence grouping\" }\n\n    memory '32 GB'\n    cpus 16\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container gotc_docker\n\n    input:\n    path(ref_dict)\n\n    output:\n    path(\"*txt\")\n    path(\"*unmapped.txt\")\n\n    script:\n    \"\"\"\n    sequenceGrouping.py ${ref_dict} \"sequence_grouping.txt\" \"sequence_grouping_with_unmapped.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    sequenceGrouping.py ${ref_dict} \"sequence_grouping.txt\" \"sequence_grouping_with_unmapped.txt\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref_dict"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag { \"Create sequence grouping\" }",
            "memory '32 GB'",
            "cpus 16",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container gotc_docker"
        ],
        "when": "",
        "stub": ""
    },
    "baseRecalibrator": {
        "name_process": "baseRecalibrator",
        "string_process": "\nprocess baseRecalibrator {\n    tag \"${sampleId}_${subgroup_name}\"\n\n    memory '32 GB'\n    cpus 16\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container gatk_docker\n\n    input:\n    tuple val(sampleId),\n           path(input_mapped_merged_marked_sorted_bam),\n           path(input_mapped_merged_marked_sorted_bai),\n           path(input_mapped_merged_marked_sorted_md5),\n           val(subgroup_name),\n           val(subgroup)\n\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n    path(dbSNP_vcf)\n    path(dbSNP_vcf_index)\n    path(known_indels_mills)\n    path(known_indels_mills_index)\n    path(known_indels_dbSNP)\n    path(known_indels_dbSNP_index)\n\n    output:\n        tuple val(sampleId),\n        path(\"${sampleId}_recalibration_report_${subgroup_name}.recal_data.csv\")\n\n    script:\n    gatk_path = \"/gatk/gatk\"\n    subgroup_trimmed = subgroup.trim().split(\"\\t\").join(\" -L \")\n\n    \"\"\"\n    ${gatk_path} --java-options ${params.java_opt_baserecal} \\\n    BaseRecalibrator \\\n    -R ${ref_fasta} \\\n    -I ${input_mapped_merged_marked_sorted_bam} \\\n    --use-original-qualities \\\n    -O \"${sampleId}_recalibration_report_${subgroup_name}.recal_data.csv\" \\\n    --known-sites ${dbSNP_vcf} \\\n    --known-sites ${known_indels_mills} \\\n    --known-sites ${known_indels_dbSNP} \\\n    -L ${subgroup_trimmed}\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    gatk_path = \"/gatk/gatk\"\n    subgroup_trimmed = subgroup.trim().split(\"\\t\").join(\" -L \")\n\n    \"\"\"\n    ${gatk_path} --java-options ${params.java_opt_baserecal} \\\n    BaseRecalibrator \\\n    -R ${ref_fasta} \\\n    -I ${input_mapped_merged_marked_sorted_bam} \\\n    --use-original-qualities \\\n    -O \"${sampleId}_recalibration_report_${subgroup_name}.recal_data.csv\" \\\n    --known-sites ${dbSNP_vcf} \\\n    --known-sites ${known_indels_mills} \\\n    --known-sites ${known_indels_dbSNP} \\\n    -L ${subgroup_trimmed}\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "subgroup_name",
            "subgroup",
            "input_mapped_merged_marked_sorted_bam",
            "input_mapped_merged_marked_sorted_bai",
            "input_mapped_merged_marked_sorted_md5",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai",
            "dbSNP_vcf",
            "dbSNP_vcf_index",
            "known_indels_mills",
            "known_indels_mills_index",
            "known_indels_dbSNP",
            "known_indels_dbSNP_index"
        ],
        "nb_inputs": 15,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sampleId}_${subgroup_name}\"",
            "memory '32 GB'",
            "cpus 16",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container gatk_docker"
        ],
        "when": "",
        "stub": ""
    },
    "gatherBqsrReports": {
        "name_process": "gatherBqsrReports",
        "string_process": "\nprocess gatherBqsrReports {\n    tag \"${sampleId}\"\n\n    memory '32 GB'\n    cpus 16\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container gatk_docker\n\n    input:\n    tuple val(sampleId), path(input_bqsr_reports)\n\n    output:\n        tuple val(sampleId),\n        path(\"${sampleId}.recal_data.csv\")\n\n    script:\n    gatk_path = \"/gatk/gatk\"\n    input_bqsr_params = input_bqsr_reports.join(\" -I \")\n\n    \"\"\"\n    ${gatk_path} --java-options ${params.java_opt_bqsrreport} \\\n    GatherBQSRReports \\\n    -I ${input_bqsr_params} \\\n    -O \"${sampleId}.recal_data.csv\"\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    gatk_path = \"/gatk/gatk\"\n    input_bqsr_params = input_bqsr_reports.join(\" -I \")\n\n    \"\"\"\n    ${gatk_path} --java-options ${params.java_opt_bqsrreport} \\\n    GatherBQSRReports \\\n    -I ${input_bqsr_params} \\\n    -O \"${sampleId}.recal_data.csv\"\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "input_bqsr_reports"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sampleId}\"",
            "memory '32 GB'",
            "cpus 16",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container gatk_docker"
        ],
        "when": "",
        "stub": ""
    },
    "applyBQSR": {
        "name_process": "applyBQSR",
        "string_process": "\nprocess applyBQSR {\n    tag \"${sampleId}_${subgroup_unmapped_name}\"\n\n    memory '32 GB'\n    cpus 16\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container gatk_docker\n\n    input:\n    tuple val(sampleId),\n           path(input_mapped_merged_marked_sorted_bam),\n           path(input_mapped_merged_marked_sorted_bai),\n           path(input_mapped_merged_marked_sorted_md5),\n           path(input_merged_bqsr_report),\n           val(scatter_id),\n           val(subgroup_unmapped_name),\n           val(subgroup_unmapped)\n\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n\n    output:\n    tuple val(sampleId),\n        path(\"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${subgroup_unmapped_name}.recal.bam\")\n\n    script:\n\n    gatk_path = \"/gatk/gatk\"\n    subgroup_unmapped_trimmed = subgroup_unmapped.trim().split(\"\\t\").join(\" -L \")\n\n    \"\"\"\n    ${gatk_path} --java-options \"${params.java_opt_applybqsr}\" \\\n    ApplyBQSR \\\n    -R ${ref_fasta}  \\\n    -I ${input_mapped_merged_marked_sorted_bam}  \\\n    -O \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${subgroup_unmapped_name}.recal.bam\"  \\\n    -L ${subgroup_unmapped_trimmed} \\\n    -bqsr ${input_merged_bqsr_report} \\\n    --static-quantized-quals 10 --static-quantized-quals 20 --static-quantized-quals 30 \\\n    --add-output-sam-program-record \\\n    --create-output-bam-md5 \\\n    --use-original-qualities\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    gatk_path = \"/gatk/gatk\"\n    subgroup_unmapped_trimmed = subgroup_unmapped.trim().split(\"\\t\").join(\" -L \")\n\n    \"\"\"\n    ${gatk_path} --java-options \"${params.java_opt_applybqsr}\" \\\n    ApplyBQSR \\\n    -R ${ref_fasta}  \\\n    -I ${input_mapped_merged_marked_sorted_bam}  \\\n    -O \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${subgroup_unmapped_name}.recal.bam\"  \\\n    -L ${subgroup_unmapped_trimmed} \\\n    -bqsr ${input_merged_bqsr_report} \\\n    --static-quantized-quals 10 --static-quantized-quals 20 --static-quantized-quals 30 \\\n    --add-output-sam-program-record \\\n    --create-output-bam-md5 \\\n    --use-original-qualities\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "scatter_id",
            "subgroup_unmapped_name",
            "subgroup_unmapped",
            "input_mapped_merged_marked_sorted_bam",
            "input_mapped_merged_marked_sorted_bai",
            "input_mapped_merged_marked_sorted_md5",
            "input_merged_bqsr_report",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai"
        ],
        "nb_inputs": 11,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sampleId}_${subgroup_unmapped_name}\"",
            "memory '32 GB'",
            "cpus 16",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container gatk_docker"
        ],
        "when": "",
        "stub": ""
    },
    "gatherBamFiles": {
        "name_process": "gatherBamFiles",
        "string_process": "\nprocess gatherBamFiles {\n    tag \"${sampleId}\"\n\n    memory '32 GB'\n    cpus 16\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container gatk_docker\n\n    input:\n    tuple val(sampleId), path(input_recalibrated_bams)\n\n    output:\n    tuple   val(sampleId),\n            path(\"${sampleId}.recal.merged.bam\"),\n            path(\"${sampleId}.recal.merged.bai\"),\n            path(\"${sampleId}.recal.merged.bam.md5\")\n\n    script:\n\n    gatk_path = \"/gatk/gatk\"\n    inputs_bams_to_merge = input_recalibrated_bams\n                            .sort(false) { a, b -> a.getBaseName() <=> b.getBaseName() }.join(\" --INPUT \")\n\n    \"\"\"\n    ${gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level}  \\\n    ${params.java_opt_gatherbams} \" \\\n    GatherBamFiles \\\n    --INPUT ${inputs_bams_to_merge} \\\n    --OUTPUT \"${sampleId}.recal.merged.bam\" \\\n    --CREATE_INDEX true \\\n    --CREATE_MD5_FILE true\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    gatk_path = \"/gatk/gatk\"\n    inputs_bams_to_merge = input_recalibrated_bams\n                            .sort(false) { a, b -> a.getBaseName() <=> b.getBaseName() }.join(\" --INPUT \")\n\n    \"\"\"\n    ${gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level}  \\\n    ${params.java_opt_gatherbams} \" \\\n    GatherBamFiles \\\n    --INPUT ${inputs_bams_to_merge} \\\n    --OUTPUT \"${sampleId}.recal.merged.bam\" \\\n    --CREATE_INDEX true \\\n    --CREATE_MD5_FILE true\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "input_recalibrated_bams"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sampleId}\"",
            "memory '32 GB'",
            "cpus 16",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container gatk_docker"
        ],
        "when": "",
        "stub": ""
    },
    "haplotypeCaller": {
        "name_process": "haplotypeCaller",
        "string_process": "\nprocess haplotypeCaller {\n    tag \"${sampleId}_${interval_chunk_name}\"\n\n    memory '32 GB'\n    cpus 16\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container gatk_docker\n\n    input:\n\n    tuple val(sampleId),\n           path(input_recal_merged_bam),\n           path(input_recal_merged_bai),\n           path(input_recal_merged_md5),\n           val(scatter_id),\n           val(interval_chunk_name),\n           path(interval_list_file)\n\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n\n    output:\n\n    tuple   val(sampleId),\n            path(\"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${interval_chunk_name}.vcf\"),\n            path(\"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${interval_chunk_name}.vcf.idx\")\n\n\n    script:\n\n    gatk_path = \"/gatk/gatk\"\n\n    \"\"\"\n    set -e\n    ${gatk_path} --java-options \"${params.java_opt_haplotype}\" \\\n    HaplotypeCaller \\\n    -R ${ref_fasta} \\\n    -I ${input_recal_merged_bam} \\\n    --output \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${interval_chunk_name}.vcf\" \\\n    -contamination 0 \\\n    -ERC GVCF \\\n    -L ${interval_list_file}\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    gatk_path = \"/gatk/gatk\"\n\n    \"\"\"\n    set -e\n    ${gatk_path} --java-options \"${params.java_opt_haplotype}\" \\\n    HaplotypeCaller \\\n    -R ${ref_fasta} \\\n    -I ${input_recal_merged_bam} \\\n    --output \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${interval_chunk_name}.vcf\" \\\n    -contamination 0 \\\n    -ERC GVCF \\\n    -L ${interval_list_file}\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "scatter_id",
            "interval_chunk_name",
            "input_recal_merged_bam",
            "input_recal_merged_bai",
            "input_recal_merged_md5",
            "interval_list_file",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai"
        ],
        "nb_inputs": 10,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sampleId}_${interval_chunk_name}\"",
            "memory '32 GB'",
            "cpus 16",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container gatk_docker"
        ],
        "when": "",
        "stub": ""
    },
    "mergeVCFs": {
        "name_process": "mergeVCFs",
        "string_process": "\nprocess mergeVCFs {\n    tag \"${sampleId}\"\n\n    memory '32 GB'\n    cpus 16\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container gatk_docker\n\n    publishDir \"${params.outdir}/${params.projectId}/vcfs/\", mode: 'copy', overwrite: true\n\n    input:\n\n    tuple val(sampleId),\n           path(input_vcfs_to_merge),\n           path(inputs_vcf_indices)\n\n\n    output:\n    tuple   val(sampleId),\n            path(\"${sampleId}.merged.vcf.gz\"),\n            path(\"${sampleId}.merged.vcf.gz.tbi\")\n\n    script:\n\n    gatk_path = \"/gatk/gatk\"\n    input_vcfs_params = input_vcfs_to_merge\n                            .sort(false) { a, b -> a.getBaseName() <=> b.getBaseName() }.join(\" --INPUT \")\n\n    \"\"\"\n    set -e\n\n    ${gatk_path} --java-options \"${params.java_opt_mergevcfs}\"  \\\n    MergeVcfs \\\n    --INPUT ${input_vcfs_params} \\\n    --OUTPUT ${sampleId}.merged.vcf\n\n    bgzip -c ${sampleId}.merged.vcf>${sampleId}.merged.vcf.gz\n    tabix -fp vcf ${sampleId}.merged.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    gatk_path = \"/gatk/gatk\"\n    input_vcfs_params = input_vcfs_to_merge\n                            .sort(false) { a, b -> a.getBaseName() <=> b.getBaseName() }.join(\" --INPUT \")\n\n    \"\"\"\n    set -e\n\n    ${gatk_path} --java-options \"${params.java_opt_mergevcfs}\"  \\\n    MergeVcfs \\\n    --INPUT ${input_vcfs_params} \\\n    --OUTPUT ${sampleId}.merged.vcf\n\n    bgzip -c ${sampleId}.merged.vcf>${sampleId}.merged.vcf.gz\n    tabix -fp vcf ${sampleId}.merged.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "input_vcfs_to_merge",
            "inputs_vcf_indices"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sampleId}\"",
            "memory '32 GB'",
            "cpus 16",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container gatk_docker",
            "publishDir \"${params.outdir}/${params.projectId}/vcfs/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "splitIntervalList": {
        "name_process": "splitIntervalList",
        "string_process": "\nprocess splitIntervalList {\n    tag { \"Split interval list\" }\n\tmemory '4 GB'\n    cpus 1\n\n    container gatk4110_docker\n\n\n    input:\n\n    path(interval_list)\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n    val(scatter_count)\n\n    output:\n    path(\"scatterDir/*-scattered.interval_list\")\n\n\n    script:\n\n    \"\"\"\n    gatk --java-options -Xms3g SplitIntervals \\\n    -L ${interval_list} -O  scatterDir -scatter ${scatter_count} -R ${ref_fasta} \\\n    -mode ${scatter_mode} --interval-merging-rule OVERLAPPING_ONLY\n    \"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    gatk --java-options -Xms3g SplitIntervals \\\n    -L ${interval_list} -O  scatterDir -scatter ${scatter_count} -R ${ref_fasta} \\\n    -mode ${scatter_mode} --interval-merging-rule OVERLAPPING_ONLY\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "interval_list",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai",
            "scatter_count"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag { \"Split interval list\" }",
            "memory '4 GB'",
            "cpus 1",
            "container gatk4110_docker"
        ],
        "when": "",
        "stub": ""
    },
    "normalizeVcfs": {
        "name_process": "normalizeVcfs",
        "string_process": "\nprocess normalizeVcfs {\n    tag { \"Normalize_VCF_${sampleId}\" }\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n\n\tmemory '16 GB'\n    cpus 4\n\n    container gatk_joint_docker\n\n    beforeScript 'conda install -c bioconda bcftools'\n\n                                                                                                   \n\n    input:\n    tuple val(sampleId), path(vcf), path(vcfIndex)\n\n    output:\n    tuple path(\"${sampleId}.normalized.vcf.gz\"), path(\"${sampleId}.normalized.vcf.gz.tbi\")\n\n    script:\n    \"\"\"\n    /opt/miniconda/bin/bcftools norm -m +any -O 'z' -o ${sampleId}.normalized.vcf.gz ${vcf}\n    tabix -fp vcf ${sampleId}.normalized.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    /opt/miniconda/bin/bcftools norm -m +any -O 'z' -o ${sampleId}.normalized.vcf.gz ${vcf}\n    tabix -fp vcf ${sampleId}.normalized.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sampleId",
            "vcf",
            "vcfIndex"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag { \"Normalize_VCF_${sampleId}\" }",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "memory '16 GB'",
            "cpus 4",
            "container gatk_joint_docker",
            "beforeScript 'conda install -c bioconda bcftools'"
        ],
        "when": "",
        "stub": ""
    },
    "GenomicsDBImport": {
        "name_process": "GenomicsDBImport",
        "string_process": "\nprocess GenomicsDBImport {\n    tag { \"GenomicsDBImport_${scattered_interval_id}\" }\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n\n\tmemory '16 GB'\n    cpus 4\n\n    container gatk_joint_docker\n\n    input:\n\n\teach path(interval_file)\n\tpath(input_vcfs_and_indices)\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\tpath(sample_name_map)\n\n\toutput:\n    tuple val(scattered_interval_id), path(interval_file), path(\"${workspace_dir_name}.${scattered_interval_id}.tar\")\n\n    script:\n\n    scattered_interval_id = interval_file.getBaseName().split('-')[0]\n\n\t\"\"\"\n    set -euo pipefail\n\n    rm -rf \"${workspace_dir_name}.${scattered_interval_id}\"\n\n\tgatk --java-options -Xms8g \\\n    GenomicsDBImport \\\n    --genomicsdb-workspace-path \"${workspace_dir_name}.${scattered_interval_id}\" \\\n    --batch-size ${batch_size} \\\n    -L ${interval_file} \\\n    --sample-name-map ${sample_name_map} \\\n    --reader-threads 5 \\\n    --merge-input-intervals \\\n    --consolidate\n\n    tar -cf \"${workspace_dir_name}.${scattered_interval_id}.tar\" \"${workspace_dir_name}.${scattered_interval_id}\"\n\n\t\"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    scattered_interval_id = interval_file.getBaseName().split('-')[0]\n\n\t\"\"\"\n    set -euo pipefail\n\n    rm -rf \"${workspace_dir_name}.${scattered_interval_id}\"\n\n\tgatk --java-options -Xms8g \\\n    GenomicsDBImport \\\n    --genomicsdb-workspace-path \"${workspace_dir_name}.${scattered_interval_id}\" \\\n    --batch-size ${batch_size} \\\n    -L ${interval_file} \\\n    --sample-name-map ${sample_name_map} \\\n    --reader-threads 5 \\\n    --merge-input-intervals \\\n    --consolidate\n\n    tar -cf \"${workspace_dir_name}.${scattered_interval_id}.tar\" \"${workspace_dir_name}.${scattered_interval_id}\"\n\n\t\"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "interval_file",
            "input_vcfs_and_indices",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai",
            "sample_name_map"
        ],
        "nb_inputs": 6,
        "outputs": [
            "scattered_interval_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag { \"GenomicsDBImport_${scattered_interval_id}\" }",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "memory '16 GB'",
            "cpus 4",
            "container gatk_joint_docker"
        ],
        "when": "",
        "stub": ""
    },
    "genotypeGVCFs": {
        "name_process": "genotypeGVCFs",
        "string_process": "\nprocess genotypeGVCFs {\n    tag { \"Genotype_${scattered_interval_id}\" }\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n\n\tmemory '16 GB'\n    cpus 2\n\n    container gatk_joint_docker\n\n    input:\n\ttuple val(scattered_interval_id), path(interval_file), path(genomicsDB)\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n    path(dbSNP_vcf)\n    path(dbSNP_vcf_index)\n\n\toutput:\n    tuple val(scattered_interval_id), path(\"${callset_name}.${scattered_interval_id}.vcf.gz\"), path(\"${callset_name}.${scattered_interval_id}.vcf.gz.tbi\")\n\n    script:\n    dbName = genomicsDB.getBaseName()\n\n\t\"\"\"\n    set -euo pipefail\n\n    tar -xf $genomicsDB\n    WORKSPACE=${dbName}\n\n    gatk --java-options -Xms8g  \\\n    GenotypeGVCFs  \\\n    -R ${ref_fasta}  \\\n    -O \"${callset_name}.${scattered_interval_id}.vcf.gz\"  \\\n    -D ${dbSNP_vcf}  \\\n    -G StandardAnnotation -G AS_StandardAnnotation  \\\n    --only-output-calls-starting-in-intervals  \\\n    --use-new-qual-calculator  \\\n    -V gendb://\\$WORKSPACE  \\\n    -L ${interval_file}  \\\n    --merge-input-intervals\n\t\"\"\"\n\n}",
        "nb_lignes_process": 45,
        "string_script": "    dbName = genomicsDB.getBaseName()\n\n\t\"\"\"\n    set -euo pipefail\n\n    tar -xf $genomicsDB\n    WORKSPACE=${dbName}\n\n    gatk --java-options -Xms8g  \\\n    GenotypeGVCFs  \\\n    -R ${ref_fasta}  \\\n    -O \"${callset_name}.${scattered_interval_id}.vcf.gz\"  \\\n    -D ${dbSNP_vcf}  \\\n    -G StandardAnnotation -G AS_StandardAnnotation  \\\n    --only-output-calls-starting-in-intervals  \\\n    --use-new-qual-calculator  \\\n    -V gendb://\\$WORKSPACE  \\\n    -L ${interval_file}  \\\n    --merge-input-intervals\n\t\"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "scattered_interval_id",
            "interval_file",
            "genomicsDB",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai",
            "dbSNP_vcf",
            "dbSNP_vcf_index"
        ],
        "nb_inputs": 8,
        "outputs": [
            "scattered_interval_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag { \"Genotype_${scattered_interval_id}\" }",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "memory '16 GB'",
            "cpus 2",
            "container gatk_joint_docker"
        ],
        "when": "",
        "stub": ""
    },
    "hardFilterAndMakeSitesOnlyVcf": {
        "name_process": "hardFilterAndMakeSitesOnlyVcf",
        "string_process": "\nprocess hardFilterAndMakeSitesOnlyVcf {\n    tag { \"Genotype_${scattered_interval_id}\" }\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n\tmemory '4 GB'\n    cpus 1\n\n    container gatk_joint_docker\n\n    input:\n\ttuple val(scattered_interval_id), path(genotyped_vcf), path(genotyped_vcf_idx)\n\n\n\toutput:\n    path(\"${callset_name}.${scattered_interval_id}.variant_filtered.vcf.gz\")\n    path(\"${callset_name}.${scattered_interval_id}.variant_filtered.vcf.gz.tbi\")\n    path(\"${callset_name}.${scattered_interval_id}.sites_only.variant_filtered.vcf.gz\")\n    path(\"${callset_name}.${scattered_interval_id}.sites_only.variant_filtered.vcf.gz.tbi\")\n\n\n    script:\n\t\"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms3g \\\n      VariantFiltration \\\n      --filter-expression \"ExcessHet > ${excess_het_threshold}\" \\\n      --filter-name ExcessHet \\\n      -O \"${callset_name}.${scattered_interval_id}.variant_filtered.vcf.gz\" \\\n      -V ${genotyped_vcf}\n\n    gatk --java-options -Xms3g \\\n      MakeSitesOnlyVcf \\\n      -I \"${callset_name}.${scattered_interval_id}.variant_filtered.vcf.gz\" \\\n      -O \"${callset_name}.${scattered_interval_id}.sites_only.variant_filtered.vcf.gz\"\n\t\"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "\t\"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms3g \\\n      VariantFiltration \\\n      --filter-expression \"ExcessHet > ${excess_het_threshold}\" \\\n      --filter-name ExcessHet \\\n      -O \"${callset_name}.${scattered_interval_id}.variant_filtered.vcf.gz\" \\\n      -V ${genotyped_vcf}\n\n    gatk --java-options -Xms3g \\\n      MakeSitesOnlyVcf \\\n      -I \"${callset_name}.${scattered_interval_id}.variant_filtered.vcf.gz\" \\\n      -O \"${callset_name}.${scattered_interval_id}.sites_only.variant_filtered.vcf.gz\"\n\t\"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "scattered_interval_id",
            "genotyped_vcf",
            "genotyped_vcf_idx"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag { \"Genotype_${scattered_interval_id}\" }",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "memory '4 GB'",
            "cpus 1",
            "container gatk_joint_docker"
        ],
        "when": "",
        "stub": ""
    },
    "gatherVcfs": {
        "name_process": "gatherVcfs",
        "string_process": "\nprocess gatherVcfs {\n    tag { \"GatherVCFs\" }\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n\tmemory '8 GB'\n    cpus 2\n\n    container gatk4110_docker\n\n    input:\n    path(sites_only_filtered_vcfs)\n    path(sites_only_filtered_vcf_indices)\n\n\n\n    output:\n    path(\"${callset_name}.sites_only.vcf.gz\")\n    path(\"${callset_name}.sites_only.vcf.gz.tbi\")\n\n    script:\n    input_vcfs_params = sites_only_filtered_vcfs.sort(false) { a, b -> a.getBaseName() <=> b.getBaseName() }.join(\" --input \")\n    \"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms6g \\\n      GatherVcfsCloud \\\n      --ignore-safety-checks \\\n      --gather-type BLOCK \\\n      --input ${input_vcfs_params} \\\n      --output \"${callset_name}.sites_only.vcf.gz\"\n\n    tabix \"${callset_name}.sites_only.vcf.gz\"\n    \"\"\"\n\n}",
        "nb_lignes_process": 36,
        "string_script": "    input_vcfs_params = sites_only_filtered_vcfs.sort(false) { a, b -> a.getBaseName() <=> b.getBaseName() }.join(\" --input \")\n    \"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms6g \\\n      GatherVcfsCloud \\\n      --ignore-safety-checks \\\n      --gather-type BLOCK \\\n      --input ${input_vcfs_params} \\\n      --output \"${callset_name}.sites_only.vcf.gz\"\n\n    tabix \"${callset_name}.sites_only.vcf.gz\"\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "sites_only_filtered_vcfs",
            "sites_only_filtered_vcf_indices"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag { \"GatherVCFs\" }",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "memory '8 GB'",
            "cpus 2",
            "container gatk4110_docker"
        ],
        "when": "",
        "stub": ""
    },
    "indelsVariantRecalibrator": {
        "name_process": "indelsVariantRecalibrator",
        "string_process": "\nprocess indelsVariantRecalibrator {\n    tag { \"IndelsVariantRecalibrator\" }\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n\tmemory '16 GB'\n    cpus 2\n\n    container gatk4110_docker\n\n    input:\n\n    path(sites_only_variant_filtered_vcf)\n    path(sites_only_variant_filtered_vcf_index)\n\n    path(dbSNP_vcf)\n    path(dbSNP_vcf_index)\n    path(known_indels_mills)\n    path(known_indels_mills_index)\n    path(axiompoly_vcf)\n    path(axiompoly_vcf_index)\n\n    output:\n    tuple  path(\"${callset_name}.indels.recal\"),\n           path(\"${callset_name}.indels.recal.idx\"),\n           path(\"${callset_name}.indels.tranches\")\n\n\n\n    script:\n\n    recalibration_annotation_inputs_params = indel_recalibration_annotation_values.join(\" -an \")\n    recalibration_tranche_input_params = indel_recalibration_tranche_values.join(\" -tranche \")\n\n    \"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms14g \\\n      VariantRecalibrator \\\n      -V ${sites_only_variant_filtered_vcf} \\\n      -O \"${callset_name}.indels.recal\" \\\n      --tranches-file \"${callset_name}.indels.tranches\" \\\n      --trust-all-polymorphic \\\n      -tranche ${recalibration_tranche_input_params} \\\n      -an ${recalibration_annotation_inputs_params} \\\n      --use-allele-specific-annotations \\\n      -mode INDEL \\\n      --max-gaussians ${max_gaussians_indels_recal} \\\n      -resource:mills,known=false,training=true,truth=true,prior=12 ${known_indels_mills} \\\n      -resource:axiomPoly,known=false,training=true,truth=false,prior=10 ${axiompoly_vcf} \\\n      -resource:dbsnp,known=true,training=false,truth=false,prior=2 ${dbSNP_vcf}\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    recalibration_annotation_inputs_params = indel_recalibration_annotation_values.join(\" -an \")\n    recalibration_tranche_input_params = indel_recalibration_tranche_values.join(\" -tranche \")\n\n    \"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms14g \\\n      VariantRecalibrator \\\n      -V ${sites_only_variant_filtered_vcf} \\\n      -O \"${callset_name}.indels.recal\" \\\n      --tranches-file \"${callset_name}.indels.tranches\" \\\n      --trust-all-polymorphic \\\n      -tranche ${recalibration_tranche_input_params} \\\n      -an ${recalibration_annotation_inputs_params} \\\n      --use-allele-specific-annotations \\\n      -mode INDEL \\\n      --max-gaussians ${max_gaussians_indels_recal} \\\n      -resource:mills,known=false,training=true,truth=true,prior=12 ${known_indels_mills} \\\n      -resource:axiomPoly,known=false,training=true,truth=false,prior=10 ${axiompoly_vcf} \\\n      -resource:dbsnp,known=true,training=false,truth=false,prior=2 ${dbSNP_vcf}\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "sites_only_variant_filtered_vcf",
            "sites_only_variant_filtered_vcf_index",
            "dbSNP_vcf",
            "dbSNP_vcf_index",
            "known_indels_mills",
            "known_indels_mills_index",
            "axiompoly_vcf",
            "axiompoly_vcf_index"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag { \"IndelsVariantRecalibrator\" }",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "memory '16 GB'",
            "cpus 2",
            "container gatk4110_docker"
        ],
        "when": "",
        "stub": ""
    },
    "snpsVariantRecalibrator": {
        "name_process": "snpsVariantRecalibrator",
        "string_process": "\nprocess snpsVariantRecalibrator {\n    tag { \"SNPsVariantRecalibrator\" }\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n\tmemory '16 GB'\n    cpus 2\n\n    container gatk4110_docker\n\n    input:\n\n    path(sites_only_variant_filtered_vcf)\n    path(sites_only_variant_filtered_vcf_index)\n\n    path(dbSNP_vcf)\n    path(dbSNP_vcf_index)\n    path(omni_vcf)\n    path(omni_vcf_index)\n    path(hapmap_vcf)\n    path(hapmap_vcf_index)\n    path(onekg_vcf)\n    path(onekg_vcf_index)\n\n    output:\n    tuple   path(\"${callset_name}.snps.recal\"),\n            path(\"${callset_name}.snps.recal.idx\"),\n            path(\"${callset_name}.snps.tranches\")\n\n\n\n    script:\n\n    recalibration_annotation_inputs_params = snp_recalibration_annotation_values.join(\" -an \")\n    recalibration_tranche_input_params = snp_recalibration_tranche_values.join(\" -tranche \")\n\n    \"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms14g \\\n      VariantRecalibrator \\\n      -V ${sites_only_variant_filtered_vcf} \\\n      -O \"${callset_name}.snps.recal\" \\\n      --tranches-file \"${callset_name}.snps.tranches\" \\\n      --trust-all-polymorphic \\\n      -tranche ${recalibration_tranche_input_params} \\\n      -an ${recalibration_annotation_inputs_params} \\\n      --use-allele-specific-annotations \\\n      -mode SNP \\\n      --max-gaussians ${max_gaussians_snps_recal} \\\n      -resource:hapmap,known=false,training=true,truth=true,prior=15 ${hapmap_vcf} \\\n      -resource:omni,known=false,training=true,truth=true,prior=12 ${omni_vcf} \\\n      -resource:1000G,known=false,training=true,truth=false,prior=10 ${onekg_vcf} \\\n      -resource:dbsnp,known=true,training=false,truth=false,prior=7 ${dbSNP_vcf}\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    recalibration_annotation_inputs_params = snp_recalibration_annotation_values.join(\" -an \")\n    recalibration_tranche_input_params = snp_recalibration_tranche_values.join(\" -tranche \")\n\n    \"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms14g \\\n      VariantRecalibrator \\\n      -V ${sites_only_variant_filtered_vcf} \\\n      -O \"${callset_name}.snps.recal\" \\\n      --tranches-file \"${callset_name}.snps.tranches\" \\\n      --trust-all-polymorphic \\\n      -tranche ${recalibration_tranche_input_params} \\\n      -an ${recalibration_annotation_inputs_params} \\\n      --use-allele-specific-annotations \\\n      -mode SNP \\\n      --max-gaussians ${max_gaussians_snps_recal} \\\n      -resource:hapmap,known=false,training=true,truth=true,prior=15 ${hapmap_vcf} \\\n      -resource:omni,known=false,training=true,truth=true,prior=12 ${omni_vcf} \\\n      -resource:1000G,known=false,training=true,truth=false,prior=10 ${onekg_vcf} \\\n      -resource:dbsnp,known=true,training=false,truth=false,prior=7 ${dbSNP_vcf}\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "sites_only_variant_filtered_vcf",
            "sites_only_variant_filtered_vcf_index",
            "dbSNP_vcf",
            "dbSNP_vcf_index",
            "omni_vcf",
            "omni_vcf_index",
            "hapmap_vcf",
            "hapmap_vcf_index",
            "onekg_vcf",
            "onekg_vcf_index"
        ],
        "nb_inputs": 10,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag { \"SNPsVariantRecalibrator\" }",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "memory '16 GB'",
            "cpus 2",
            "container gatk4110_docker"
        ],
        "when": "",
        "stub": ""
    },
    "applyRecalibration": {
        "name_process": "applyRecalibration",
        "string_process": "\nprocess applyRecalibration {\n    tag { \"ApplyRecalibration\" }\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n\tmemory '8 GB'\n    cpus 2\n\n    container gatk4110_docker\n\n    input:\n    path(input_vcf)\n    path(input_vcf_indices)\n\n    tuple   path(input_indels_recal),\n            path(input_indels_recal_index),\n            path(input_indels_tranches)\n\n    tuple   path(input_snps_recal),\n            path(input_snps_recal_index),\n            path(input_snps_tranches)\n\n    output:\n    path(\"${callset_name}.${scattered_interval_id}.filtered.vcf.gz\")\n    path(\"${callset_name}.${scattered_interval_id}.filtered.vcf.gz.tbi\")\n\n\n    script:\n    scattered_interval_id = input_vcf.getBaseName().tokenize('.')[1]\n    \"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms5g \\\n      ApplyVQSR \\\n      -O 'tmp.indel.recalibrated.vcf' \\\n      -V ${input_vcf} \\\n      --recal-file ${input_indels_recal} \\\n      --use-allele-specific-annotations  \\\n      --tranches-file ${input_indels_tranches} \\\n      --truth-sensitivity-filter-level ${indel_filter_level} \\\n      --create-output-variant-index true \\\n      -mode INDEL\n\n    gatk --java-options -Xms5g \\\n      ApplyVQSR \\\n      -O \"${callset_name}.${scattered_interval_id}.filtered.vcf.gz\" \\\n      -V 'tmp.indel.recalibrated.vcf' \\\n      --recal-file ${input_snps_recal} \\\n      --use-allele-specific-annotations \\\n      --tranches-file ${input_snps_tranches} \\\n      --truth-sensitivity-filter-level ${snp_filter_level} \\\n      --create-output-variant-index true \\\n      -mode SNP\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    scattered_interval_id = input_vcf.getBaseName().tokenize('.')[1]\n    \"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms5g \\\n      ApplyVQSR \\\n      -O 'tmp.indel.recalibrated.vcf' \\\n      -V ${input_vcf} \\\n      --recal-file ${input_indels_recal} \\\n      --use-allele-specific-annotations  \\\n      --tranches-file ${input_indels_tranches} \\\n      --truth-sensitivity-filter-level ${indel_filter_level} \\\n      --create-output-variant-index true \\\n      -mode INDEL\n\n    gatk --java-options -Xms5g \\\n      ApplyVQSR \\\n      -O \"${callset_name}.${scattered_interval_id}.filtered.vcf.gz\" \\\n      -V 'tmp.indel.recalibrated.vcf' \\\n      --recal-file ${input_snps_recal} \\\n      --use-allele-specific-annotations \\\n      --tranches-file ${input_snps_tranches} \\\n      --truth-sensitivity-filter-level ${snp_filter_level} \\\n      --create-output-variant-index true \\\n      -mode SNP\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "input_vcf",
            "input_vcf_indices",
            "input_indels_recal",
            "input_indels_recal_index",
            "input_indels_tranches",
            "input_snps_recal",
            "input_snps_recal_index",
            "input_snps_tranches"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag { \"ApplyRecalibration\" }",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "memory '8 GB'",
            "cpus 2",
            "container gatk4110_docker"
        ],
        "when": "",
        "stub": ""
    },
    "gatherFinalVcf": {
        "name_process": "gatherFinalVcf",
        "string_process": "\nprocess gatherFinalVcf {\n    tag { \"GatherFinalRecalibratedVCFs\" }\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n\tmemory '8 GB'\n    cpus 2\n\n    container gatk4110_docker\n\n    publishDir \"${params.outdir}/${callset_name}/\", mode: 'copy', overwrite: true\n\n    input:\n    path(input_recal_vcfs)\n    path(input_recal_vcf_indices)\n\n\n\n    output:\n    tuple path(\"${callset_name}.vcf.gz\"), path(\"${callset_name}.vcf.gz.tbi\")\n\n    script:\n    input_recal_vcfs_params = input_recal_vcfs.sort(false) { a, b -> a.getBaseName() <=> b.getBaseName() }.join(\" --input \")\n    \"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms6g \\\n      GatherVcfsCloud \\\n      --ignore-safety-checks \\\n      --gather-type BLOCK \\\n      --input ${input_recal_vcfs_params} \\\n      --output \"${callset_name}.vcf.gz\"\n\n    tabix \"${callset_name}.vcf.gz\"\n    \"\"\"\n\n}",
        "nb_lignes_process": 37,
        "string_script": "    input_recal_vcfs_params = input_recal_vcfs.sort(false) { a, b -> a.getBaseName() <=> b.getBaseName() }.join(\" --input \")\n    \"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms6g \\\n      GatherVcfsCloud \\\n      --ignore-safety-checks \\\n      --gather-type BLOCK \\\n      --input ${input_recal_vcfs_params} \\\n      --output \"${callset_name}.vcf.gz\"\n\n    tabix \"${callset_name}.vcf.gz\"\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "input_recal_vcfs",
            "input_recal_vcf_indices"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag { \"GatherFinalRecalibratedVCFs\" }",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "memory '8 GB'",
            "cpus 2",
            "container gatk4110_docker",
            "publishDir \"${params.outdir}/${callset_name}/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "collectVariantCallingMetrics": {
        "name_process": "collectVariantCallingMetrics",
        "string_process": "\nprocess collectVariantCallingMetrics {\n    tag { \"CollectVariantCallingMetrics\" }\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n\tmemory '8 GB'\n    cpus 2\n\n    container gatk4110_docker\n\n    publishDir \"${params.outdir}/${callset_name}/\", mode: 'copy', overwrite: true\n\n    input:\n    tuple path(final_recal_full_vcf), path(final_recal_full_vcf_index)\n    path(ref_dict)\n    path(dbSNP_vcf)\n    path(dbSNP_vcf_index)\n    path(eval_interval_list)\n\n\n\n    output:\n    tuple   path(\"${callset_name}.variant_calling_detail_metrics\"),\n            path(\"${callset_name}.variant_calling_summary_metrics\")\n\n    script:\n    \"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms6g \\\n      CollectVariantCallingMetrics \\\n      --INPUT ${final_recal_full_vcf} \\\n      --DBSNP ${dbSNP_vcf} \\\n      --SEQUENCE_DICTIONARY ${ref_dict} \\\n      --OUTPUT ${callset_name} \\\n      --THREAD_COUNT 8 \\\n      --TARGET_INTERVALS ${eval_interval_list}\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    \"\"\"\n    set -euo pipefail\n\n    gatk --java-options -Xms6g \\\n      CollectVariantCallingMetrics \\\n      --INPUT ${final_recal_full_vcf} \\\n      --DBSNP ${dbSNP_vcf} \\\n      --SEQUENCE_DICTIONARY ${ref_dict} \\\n      --OUTPUT ${callset_name} \\\n      --THREAD_COUNT 8 \\\n      --TARGET_INTERVALS ${eval_interval_list}\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "final_recal_full_vcf",
            "final_recal_full_vcf_index",
            "ref_dict",
            "dbSNP_vcf",
            "dbSNP_vcf_index",
            "eval_interval_list"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag { \"CollectVariantCallingMetrics\" }",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "memory '8 GB'",
            "cpus 2",
            "container gatk4110_docker",
            "publishDir \"${params.outdir}/${callset_name}/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "cramToBam": {
        "name_process": "cramToBam",
        "string_process": "\nprocess cramToBam {\n    tag \"${sample_name}\"\n\n    memory '32 GB'\n    cpus 32\n\n    errorStrategy 'retry'\n    maxRetries 6\n\n    container \"broadinstitute/genomes-in-the-cloud:2.3.1-1512499786\"\n\n\n    publishDir \"${params.outdir}/BAMs/\", mode: 'copy', overwrite: true\n\n    input:\n    tuple   path(input_cram),\n            val(sample_name) \n    path(ref_fasta)\n\n    output:\n    tuple val(sample_name), path(\"${sample_name}.bam\"), path(\"${sample_name}.bai\")\n\n    script:\n    \"\"\"\n    set -eo pipefail\n\n    samtools view -h -T ${ref_fasta} ${input_cram} | samtools view -b -@ 32 -o ${sample_name}.bam -\n    samtools index -b ${sample_name}.bam\n    mv ${sample_name}.bam.bai ${sample_name}.bai\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    set -eo pipefail\n\n    samtools view -h -T ${ref_fasta} ${input_cram} | samtools view -b -@ 32 -o ${sample_name}.bam -\n    samtools index -b ${sample_name}.bam\n    mv ${sample_name}.bam.bai ${sample_name}.bai\n\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample_name",
            "input_cram",
            "ref_fasta"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sample_name}\"",
            "memory '32 GB'",
            "cpus 32",
            "errorStrategy 'retry'",
            "maxRetries 6",
            "container \"broadinstitute/genomes-in-the-cloud:2.3.1-1512499786\"",
            "publishDir \"${params.outdir}/BAMs/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "revertSam": {
        "name_process": "revertSam",
        "string_process": "\nprocess revertSam {\n\n    tag \"${sample_name}\"\n\n    memory '4 GB'\n    cpus 4\n\n    errorStrategy 'retry'\n    maxRetries 6\n\n    container \"broadinstitute/genomes-in-the-cloud:2.3.1-1512499786\"\n\n    publishDir \"${params.outdir}/uBAMs/\", mode: 'copy', overwrite: true\n\n    input:\n    tuple   val(sample_name),\n            path(bam),\n            path(bam_index)\n\n    output:\n    tuple   val(sample_name), \n            path(\"${sample_name}.u.bam\")\n\n    script:\n    output_name = \"${sample_name}.u.bam\"\n\n    \"\"\"\n    java ${params.java_opt_validateBAM} -jar /usr/gitc/picard.jar \\\n      RevertSam \\\n      INPUT=${bam} \\\n      OUTPUT=${output_name}\n    \"\"\"\n\n}",
        "nb_lignes_process": 33,
        "string_script": "    output_name = \"${sample_name}.u.bam\"\n\n    \"\"\"\n    java ${params.java_opt_validateBAM} -jar /usr/gitc/picard.jar \\\n      RevertSam \\\n      INPUT=${bam} \\\n      OUTPUT=${output_name}\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_name",
            "bam",
            "bam_index"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sample_name}\"",
            "memory '4 GB'",
            "cpus 4",
            "errorStrategy 'retry'",
            "maxRetries 6",
            "container \"broadinstitute/genomes-in-the-cloud:2.3.1-1512499786\"",
            "publishDir \"${params.outdir}/uBAMs/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "validateBam": {
        "name_process": "validateBam",
        "string_process": "\nprocess validateBam {\n    tag \"${sample_name}\"\n\n    memory '4 GB'\n    cpus 4\n\n    errorStrategy 'retry'\n    maxRetries 6\n\n    container \"broadinstitute/genomes-in-the-cloud:2.3.1-1512499786\"\n\n    publishDir \"${params.outdir}/reports/\", mode: 'copy', overwrite: true\n\n    input:\n    tuple   val(sample_name),\n            path(unmapped_bam)\n\n    output:\n    tuple   val(sample_name), \n            path(\"${unmapped_bam}.validation_report\")\n\n    script:\n    output_name = \"${unmapped_bam}.validation_report\"\n\n    \"\"\"\n    java ${params.java_opt_validateBAM} -jar /usr/gitc/picard.jar \\\n      ValidateSamFile \\\n      INPUT=${unmapped_bam} \\\n      OUTPUT=${output_name} \\\n      MODE=SUMMARY \\\n      IS_BISULFITE_SEQUENCED=false \n    \"\"\"\n\n\n}",
        "nb_lignes_process": 34,
        "string_script": "    output_name = \"${unmapped_bam}.validation_report\"\n\n    \"\"\"\n    java ${params.java_opt_validateBAM} -jar /usr/gitc/picard.jar \\\n      ValidateSamFile \\\n      INPUT=${unmapped_bam} \\\n      OUTPUT=${output_name} \\\n      MODE=SUMMARY \\\n      IS_BISULFITE_SEQUENCED=false \n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_name",
            "unmapped_bam"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"${sample_name}\"",
            "memory '4 GB'",
            "cpus 4",
            "errorStrategy 'retry'",
            "maxRetries 6",
            "container \"broadinstitute/genomes-in-the-cloud:2.3.1-1512499786\"",
            "publishDir \"${params.outdir}/reports/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "mosdepth": {
        "name_process": "mosdepth",
        "string_process": "\nprocess mosdepth {\n    tag \"mosdepth_${sampleId}\"\n\n    memory '16 GB'\n    cpus 8\n\n    errorStrategy 'retry'\n    maxRetries 3\n\n    container \"quay.io/biocontainers/mosdepth:0.3.1--ha7ba039_0\"\n\n    publishDir \"${params.outdir}/mosdepth/\", mode: 'copy', overwrite: true\n\n    input:\n    val(sampleId)\n    path(input_mapped_bam)\n    path(input_mapped_bam_bai)\n\n    output:\n    val(sampleId)\n    path(\"*.mosdepth.global.dist.txt\")\n    path(\"*.mosdepth.region.dist.txt\")\n    path(\"*.mosdepth.summary.txt\")\n    path(\"*.regions.bed.gz\")\n    path(\"*.regions.bed.gz.csi\")\n\n    script:\n    \"\"\"\n    mosdepth -n -t 4 --fast-mode --by 500 ${sampleId} ${input_mapped_bam}\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    mosdepth -n -t 4 --fast-mode --by 500 ${sampleId} ${input_mapped_bam}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "mosdepth"
        ],
        "tools_url": [
            "https://bio.tools/mosdepth"
        ],
        "tools_dico": [
            {
                "name": "mosdepth",
                "uri": "https://bio.tools/mosdepth",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3230",
                                    "term": "Read depth analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast BAM/CRAM depth calculation for WGS, exome, or targeted sequencing.",
                "homepage": "https://github.com/brentp/mosdepth"
            }
        ],
        "inputs": [
            "sampleId",
            "input_mapped_bam",
            "input_mapped_bam_bai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "aws-samples__aws-gatk-recipe-nextflow-pipeline",
        "directive": [
            "tag \"mosdepth_${sampleId}\"",
            "memory '16 GB'",
            "cpus 8",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "container \"quay.io/biocontainers/mosdepth:0.3.1--ha7ba039_0\"",
            "publishDir \"${params.outdir}/mosdepth/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "fastqc_RawReads": {
        "name_process": "fastqc_RawReads",
        "string_process": "\nprocess fastqc_RawReads{\n\n               \n    cpus params.ltp_cores\n    memory \"${params.l_mem} GB\"\t\n    input:\n\tset pair_id, file(reads) from reads1\n\n    output:\n       file(\"RawReadsQC/$pair_id\") into fastqc_results\n\n    when:\n        params.fastqc\n\n\n\"\"\"\n   mkdir -p RawReadsQC/${pair_id} \n   fastqc \\\n   --extract \\\n   -f fastq \\\n   -o RawReadsQC/$pair_id\\\n   -t 2 ${fileExt_glob}\n    \n\"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n   mkdir -p RawReadsQC/${pair_id} \n   fastqc \\\n   --extract \\\n   -f fastq \\\n   -o RawReadsQC/$pair_id\\\n   -t 2 ${fileExt_glob}\n    \n\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "reads1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.ltp_cores",
            "memory \"${params.l_mem} GB\""
        ],
        "when": "params.fastqc",
        "stub": ""
    },
    "multiqc_RawReads": {
        "name_process": "multiqc_RawReads",
        "string_process": "\nprocess multiqc_RawReads{\n\n               \n    publishDir path: \"$output/multiqc_RawReads\", mode: 'move'\n    cpus params.ltp_cores\n    memory \"${params.l_mem} GB\"\n\n    input:\n\tfile(\"RawReadsQC/*\") from fastqc_results.collect()\n\n    output:\n\tset file(\"multiqc*\"), file(\"RawReadsQC/*fastqc*\")  into multiqc_report1\n    \n    when:\n        params.fastqc\n\n\n\"\"\"\n    \n    mv  RawReadsQC/*/*_fastqc*  RawReadsQC\n    \n    fastqc_combine.pl\\\n    -v\\\n    --out\\\n    RawReadsQC\\\n    --skip\\\n    --files 'RawReadsQC/*_fastqc'\n     \n    multiqc \\\n    RawReadsQC \\\n    -v \n    \n\"\"\"\n\n}",
        "nb_lignes_process": 34,
        "string_script": "\"\"\"\n    \n    mv  RawReadsQC/*/*_fastqc*  RawReadsQC\n    \n    fastqc_combine.pl\\\n    -v\\\n    --out\\\n    RawReadsQC\\\n    --skip\\\n    --files 'RawReadsQC/*_fastqc'\n     \n    multiqc \\\n    RawReadsQC \\\n    -v \n    \n\"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "fastqc_results"
        ],
        "nb_inputs": 1,
        "outputs": [
            "multiqc_report1"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "publishDir path: \"$output/multiqc_RawReads\", mode: 'move'",
            "cpus params.ltp_cores",
            "memory \"${params.l_mem} GB\""
        ],
        "when": "params.fastqc",
        "stub": ""
    },
    "trimmomatic": {
        "name_process": "trimmomatic",
        "string_process": "\nprocess trimmomatic{\n    \n               \n    memory \"${params.m_mem} GB\"\n    cpus  params.mtp_cores\n    publishDir path: \"$output/trimmomatic\", mode: 'copy'\n   \n    \n    input:\n\tset pair_id, file(reads) from reads2\n\n    \n    output:\n        set pair_id, file(\"*_1P.fastq\"), file(\"*_2P.fastq\") into TrimmedReads\n        set file(\"trim_${pair_id}.log\"), file(\"${pair_id}.log\")  into  trim_log\n        file(\"${pair_id}_trim_{1,2}U.fastq\") into unpairedReads\n\t\n\n    when:\n        params.trimmomatic\n\n    script:\t\n    \t(fwd, rev)=reads\n    \t\n\t    \n\"\"\"\n\n    $trimmomatic PE\\\n    $fwd\\\n    $rev\\\n    -baseout ${pair_id}_trim.fastq\\\n    -threads $params.htp_cores\\\n    -phred33\\\n    -trimlog  ${pair_id}.log\\\n    LEADING:10\\\n    TRAILING:10\\\n    SLIDINGWINDOW:25:10\\\n    MINLEN:50  2> trim_${pair_id}.log \n   \n\"\"\"\t\n                                                                         \n                      \n                                                             \n                                                               \n                                                             \n                                                               \n}",
        "nb_lignes_process": 46,
        "string_script": "    \t(fwd, rev)=reads\n    \t\n\t    \n\"\"\"\n\n    $trimmomatic PE\\\n    $fwd\\\n    $rev\\\n    -baseout ${pair_id}_trim.fastq\\\n    -threads $params.htp_cores\\\n    -phred33\\\n    -trimlog  ${pair_id}.log\\\n    LEADING:10\\\n    TRAILING:10\\\n    SLIDINGWINDOW:25:10\\\n    MINLEN:50  2> trim_${pair_id}.log \n   \n\"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "TrimmedReads",
            "trim_log",
            "unpairedReads"
        ],
        "nb_outputs": 3,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "memory \"${params.m_mem} GB\"",
            "cpus params.mtp_cores",
            "publishDir path: \"$output/trimmomatic\", mode: 'copy'"
        ],
        "when": "params.trimmomatic",
        "stub": ""
    },
    "build_sortmerRNA_IDX": {
        "name_process": "build_sortmerRNA_IDX",
        "string_process": "\nprocess build_sortmerRNA_IDX{\n\n               \n    cpus params.mtp_cores\n    memory \"${params.m_mem} GB\"\n \n    input:\n\tval sortmerna_db\n        val sortmerna_idx\n    output:\n        val sortmerna_idx_out\n    \n    when:\n\tparams.sortmerna_index\n\n    script:\n\tsortmerna_idx_out  = sortmerna_idx\n    \n             \n\"\"\"\n    \n    indexdb_rna \\\n    --ref ${sortmerna_db},${sortmerna_idx} \\\n    -m ${params.h_mem} \\\n    -v \n     \n\"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "\tsortmerna_idx_out  = sortmerna_idx\n    \n             \n\"\"\"\n    \n    indexdb_rna \\\n    --ref ${sortmerna_db},${sortmerna_idx} \\\n    -m ${params.h_mem} \\\n    -v \n     \n\"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sortmerna_db",
            "sortmerna_idx"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sortmerna_idx_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.mtp_cores",
            "memory \"${params.m_mem} GB\""
        ],
        "when": "params.sortmerna_index",
        "stub": ""
    },
    "sortmerRNA": {
        "name_process": "sortmerRNA",
        "string_process": "\nprocess sortmerRNA{\n\n               \n    cpus params.ltp_cores\n    publishDir path: \"${output}/sortmerna\", mode: 'copy'\n    memory \"${params.m_mem} GB\"\n\n    input:\n        val sortmerna_IDX\n        val sortmerna_db\n        set pair_id, file(forward_reads), file(reverse_reads) from trimmed_reads \n    \n    output:\n\tset pair_id, file(forward_reads), file(reverse_reads) into filtered_reads \n        file(forward_reads) into mRNA_reads_fwd\n        file(reverse_reads) into mRNA_reads_rev\n\tfile(\"${pair_id}_lhist*\") into lhist\n        file(\"${pair_id}_sortmerna_aligned*\") into SortMeRNA_Aligned      \n\t\n       \n    when:\n\tparams.sortmerna\n\n    script:\n\tpaired=pair_id + \".fastq\"\n    \n     \t\n\"\"\"\n\n    reformat.sh \\\n    in=${forward_reads} \\\n    in2=${reverse_reads} \\\n    out=${paired}  \n\n    rm -v ${forward_reads} ${reverse_reads}\n\n    sortmerna \\\n    --ref  ${sortmerna_db},${sortmerna_IDX} \\\n    --reads ${paired} \\\n    --paired_out \\\n    --aligned ${pair_id}_sortmerna_aligned \\\n    --other mRNA \\\n    -a ${params.htp_cores} \\\n    --fastx \\\n    -m ${params.h_mem} \\\n    --log -v  \n\n    rm -v ${paired}\n\n    sed -i '/^\\$/d' mRNA.fastq\n\n    reformat.sh \\\n    deleteinput=t \\\n    in=mRNA.fastq \\\n    lhist=${pair_id}_lhist \\\n    out1=${forward_reads} \\\n    out2=${reverse_reads}\n\n  \n\"\"\"\n\n}",
        "nb_lignes_process": 61,
        "string_script": "\tpaired=pair_id + \".fastq\"\n    \n     \t\n\"\"\"\n\n    reformat.sh \\\n    in=${forward_reads} \\\n    in2=${reverse_reads} \\\n    out=${paired}  \n\n    rm -v ${forward_reads} ${reverse_reads}\n\n    sortmerna \\\n    --ref  ${sortmerna_db},${sortmerna_IDX} \\\n    --reads ${paired} \\\n    --paired_out \\\n    --aligned ${pair_id}_sortmerna_aligned \\\n    --other mRNA \\\n    -a ${params.htp_cores} \\\n    --fastx \\\n    -m ${params.h_mem} \\\n    --log -v  \n\n    rm -v ${paired}\n\n    sed -i '/^\\$/d' mRNA.fastq\n\n    reformat.sh \\\n    deleteinput=t \\\n    in=mRNA.fastq \\\n    lhist=${pair_id}_lhist \\\n    out1=${forward_reads} \\\n    out2=${reverse_reads}\n\n  \n\"\"\"",
        "nb_lignes_script": 35,
        "language_script": "bash",
        "tools": [
            "SortMeRna"
        ],
        "tools_url": [
            "https://bio.tools/sortmerna"
        ],
        "tools_dico": [
            {
                "name": "SortMeRna",
                "uri": "https://bio.tools/sortmerna",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence analysis tool for filtering, mapping and OTU-picking NGS reads.",
                "homepage": "http://bioinfo.lifl.fr/RNA/sortmerna/"
            }
        ],
        "inputs": [
            "sortmerna_IDX",
            "sortmerna_db",
            "trimmed_reads"
        ],
        "nb_inputs": 3,
        "outputs": [
            "filtered_reads",
            "mRNA_reads_fwd",
            "mRNA_reads_rev",
            "lhist",
            "SortMeRNA_Aligned"
        ],
        "nb_outputs": 5,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.ltp_cores",
            "publishDir path: \"${output}/sortmerna\", mode: 'copy'",
            "memory \"${params.m_mem} GB\""
        ],
        "when": "params.sortmerna",
        "stub": ""
    },
    "fastqc_filtered": {
        "name_process": "fastqc_filtered",
        "string_process": "\nprocess fastqc_filtered{\n    \n               \n    cpus params.ltp_cores\n    memory \"${params.m_mem} GB\"\n    publishDir path: \"$output/multiqc_filtered\", mode: 'copy'\n    input:\n\tset pair_id, file(fwd), file(rev) from filtered_reads\n\n    output:\n     \tfile(\"filtered/${pair_id}\") into fastqc_results2\n    when:\n        params.fastqc\n\n\t\n\"\"\"\n\n   mkdir -pv  filtered/${pair_id}\n   \n   fastqc --extract\\\n   -f fastq \\\n   -o filtered/$pair_id\\\n   -t 2 *f*q\n   \n\"\"\"\n\t    \n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n\n   mkdir -pv  filtered/${pair_id}\n   \n   fastqc --extract\\\n   -f fastq \\\n   -o filtered/$pair_id\\\n   -t 2 *f*q\n   \n\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "filtered_reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_results2"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.ltp_cores",
            "memory \"${params.m_mem} GB\"",
            "publishDir path: \"$output/multiqc_filtered\", mode: 'copy'"
        ],
        "when": "params.fastqc",
        "stub": ""
    },
    "multiqc_filtered": {
        "name_process": "multiqc_filtered",
        "string_process": "\nprocess multiqc_filtered{\n    \n               \n    cpus params.ltp_cores\n    memory \"${params.m_mem} GB\"\n    publishDir path: \"$output/multiqc_filtered\", mode: 'move'\n    \n    input:\n        file(\"filtered/*\") from fastqc_results2.collect()\n        file('*') from trim_log.collect()\n\t\n    output:\n    \tfile(\"multiqc*\")  into multiqc_report2\n\n    when:\n        params.fastqc\n\t\n\"\"\"\n\n   mv -v  filtered/*/*_fastqc*  filtered/\n   \n   fastqc_combine.pl \\\n   -v\\\n   --out  filtered \\\n   --skip\\\n   --files  'filtered/*_fastqc'\n\n   mv -v  trim_*.log  filtered/ \n   \n   multiqc filtered\\\n   -v \n        \n\"\"\"    \n\n}",
        "nb_lignes_process": 34,
        "string_script": "\"\"\"\n\n   mv -v  filtered/*/*_fastqc*  filtered/\n   \n   fastqc_combine.pl \\\n   -v\\\n   --out  filtered \\\n   --skip\\\n   --files  'filtered/*_fastqc'\n\n   mv -v  trim_*.log  filtered/ \n   \n   multiqc filtered\\\n   -v \n        \n\"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "fastqc_results2",
            "trim_log"
        ],
        "nb_inputs": 2,
        "outputs": [
            "multiqc_report2"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.ltp_cores",
            "memory \"${params.m_mem} GB\"",
            "publishDir path: \"$output/multiqc_filtered\", mode: 'move'"
        ],
        "when": "params.fastqc",
        "stub": ""
    },
    "cd_hit": {
        "name_process": "cd_hit",
        "string_process": "\nprocess  cd_hit{\n\n    cpus params.mtp_cores\n    memory \"${params.m_mem} GB\"\n    publishDir path: \"${output}/CD-Hit\", mode: 'copy'\n  \n   input:\n       \t file(forward_reads) from mRNA_fwdx\n\t file(reverse_reads) from mRNA_revx \n       \n   output:\n\tfile(cdhit_R1) into mRNA_fwdx1\n        file(cdhit_R2) into mRNA_revx1\t\n\n   when:\n        params.cdhit\n\n    script: \n\tcdhit_R1 =  \"${forward_reads}\".replaceFirst(/trim/, \"cdhit\")\n\tcdhit_R2 =  \"${reverse_reads}\".replaceFirst(/trim/, \"cdhit\")        \n\n\n\n\"\"\"  \n    cd-hit-est \\\n    -P 1 \\\n    -i ${forward_reads} \\\n    -j ${reverse_reads} \\\n    -o  ${cdhit_R1} \\\n    -op ${cdhit_R2} \\\n    -T ${params.htp_cores} \\\n    -c 1.0 \\\n    -M 0 \\\n    -d 0 \\\n    -r 0 \\\n    -p 1 \\\n    -g 1 \\\n\n\"\"\"\n\n}",
        "nb_lignes_process": 40,
        "string_script": "\tcdhit_R1 =  \"${forward_reads}\".replaceFirst(/trim/, \"cdhit\")\n\tcdhit_R2 =  \"${reverse_reads}\".replaceFirst(/trim/, \"cdhit\")        \n\n\n\n\"\"\"  \n    cd-hit-est \\\n    -P 1 \\\n    -i ${forward_reads} \\\n    -j ${reverse_reads} \\\n    -o  ${cdhit_R1} \\\n    -op ${cdhit_R2} \\\n    -T ${params.htp_cores} \\\n    -c 1.0 \\\n    -M 0 \\\n    -d 0 \\\n    -r 0 \\\n    -p 1 \\\n    -g 1 \\\n\n\"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mRNA_fwdx",
            "mRNA_revx"
        ],
        "nb_inputs": 2,
        "outputs": [
            "mRNA_fwdx1",
            "mRNA_revx1"
        ],
        "nb_outputs": 2,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.mtp_cores",
            "memory \"${params.m_mem} GB\"",
            "publishDir path: \"${output}/CD-Hit\", mode: 'copy'"
        ],
        "when": "params.cdhit",
        "stub": ""
    },
    "megahit": {
        "name_process": "megahit",
        "string_process": "\nprocess megahit{\n    \n               \n    cpus params.htp_cores \n    memory \"${params.h_mem} GB\"\n    publishDir path: output, mode: 'move'\n    \n    \n    input:\n\tfile(all_fwd) from mRNA_fwdx.collect()\n        file(all_rev) from mRNA_revx.collect()\n\t\n    when:\n        params.megahit\n\n    output:\n        file(\"MegaHit\") into MegahitOut\n        \n\t\n    script:\n        fwd=all_fwd.join(\",\")\n        rev=all_rev.join(\",\")\n\t   \n\n\n\"\"\" \n  \n    megahit \\\n    -1 $fwd \\\n    -2 $rev \\\n    -t ${params.htp_cores} \\\n    --presets meta-sensitive \\\n    --tmp-dir /tmp \\\n    -o MegaHit\\\n    --out-prefix MegaHit \\\n    --verbose\n   \n    \n\"\"\"\n                                      \n\n\n}",
        "nb_lignes_process": 42,
        "string_script": "        fwd=all_fwd.join(\",\")\n        rev=all_rev.join(\",\")\n\t   \n\n\n\"\"\" \n  \n    megahit \\\n    -1 $fwd \\\n    -2 $rev \\\n    -t ${params.htp_cores} \\\n    --presets meta-sensitive \\\n    --tmp-dir /tmp \\\n    -o MegaHit\\\n    --out-prefix MegaHit \\\n    --verbose\n   \n    \n\"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "MEGAHIT"
        ],
        "tools_url": [
            "https://bio.tools/megahit"
        ],
        "tools_dico": [
            {
                "name": "MEGAHIT",
                "uri": "https://bio.tools/megahit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0610",
                            "term": "Ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Single node assembler for large and complex metagenomics NGS reads, such as soil. It makes use of succinct de Bruijn graph to achieve low memory usage, whereas its goal is not to make memory usage as low as possible.",
                "homepage": "https://github.com/voutcn/megahit"
            }
        ],
        "inputs": [
            "mRNA_fwdx",
            "mRNA_revx"
        ],
        "nb_inputs": 2,
        "outputs": [
            "MegahitOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.htp_cores",
            "memory \"${params.h_mem} GB\"",
            "publishDir path: output, mode: 'move'"
        ],
        "when": "params.megahit",
        "stub": ""
    },
    "metaSpades": {
        "name_process": "metaSpades",
        "string_process": "\nprocess metaSpades{\n\n               \n    cpus params.htp_cores\n    memory \"${params.h_mem} GB\"\n    publishDir path: output, mode: 'move'\n\n    input:\n\tfile(all_fwd) from mRNA_fwd2.collect()\n        file(all_rev) from mRNA_rev2.collect()\n    \n    when:\n        params.metaspades\n\t\n\n    output:\n\tset file(\"Metaspades\"), file(\"time_metaspades\") into MetaspadesOut\n        \n\t\n    script:\n\t fwd=all_fwd.join(\" \")\n         rev=all_rev.join(\" \")\n    \n\n\"\"\"  \n    cat ${fwd} > fwd.fastq${gz_ext}\n    cat ${rev} > rev.fastq${gz_ext}\n    /usr/bin/time -v  -o time_metaspades  metaspades.py \\\n    -1 fwd.fastq${gz_ext} \\\n    -2 rev.fastq${gz_ext} \\\n    --only-assembler \\\n    -t ${params.htp_cores} \\\n    -m ${params.h_mem} \\\n    -o Metaspades\n     \n\"\"\"\n\n}",
        "nb_lignes_process": 37,
        "string_script": "\t fwd=all_fwd.join(\" \")\n         rev=all_rev.join(\" \")\n    \n\n\"\"\"  \n    cat ${fwd} > fwd.fastq${gz_ext}\n    cat ${rev} > rev.fastq${gz_ext}\n    /usr/bin/time -v  -o time_metaspades  metaspades.py \\\n    -1 fwd.fastq${gz_ext} \\\n    -2 rev.fastq${gz_ext} \\\n    --only-assembler \\\n    -t ${params.htp_cores} \\\n    -m ${params.h_mem} \\\n    -o Metaspades\n     \n\"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mRNA_fwd2",
            "mRNA_rev2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "MetaspadesOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.htp_cores",
            "memory \"${params.h_mem} GB\"",
            "publishDir path: output, mode: 'move'"
        ],
        "when": "params.metaspades",
        "stub": ""
    },
    "Trinity": {
        "name_process": "Trinity",
        "string_process": "\nprocess Trinity{\n\n               \n    cpus params.htp_cores\n    memory \"${params.h_mem} GB\"\n    publishDir path: output, mode: 'move'\n    \n    \n    input:\n\tfile(all_fwd) from mRNA_fwd3.collect()\n        file(all_rev) from mRNA_rev3.collect()\n\n    output:\n        set file(\"Trinity\"), file('time_Trinity') into Trinity\n       \n    when:\n\tparams.trinity\n\n    script:\n        fwd=all_fwd.join(\",\")\n        rev=all_rev.join(\",\")\n    \n\t   \n\"\"\"        \n     Trinity\\\n     --seqType fq \\\n     --samples_file /home/andhlovu/MT-trinity/Trinity_metadata.tsv \\\n     --max_memory ${params.h_mem}G \\\n     --no_normalize_reads \\\n     --CPU ${params.htp_cores}\\\n     --output Trinity\\\n     --verbose\n\n\"\"\"\n\n}",
        "nb_lignes_process": 35,
        "string_script": "        fwd=all_fwd.join(\",\")\n        rev=all_rev.join(\",\")\n    \n\t   \n\"\"\"        \n     Trinity\\\n     --seqType fq \\\n     --samples_file /home/andhlovu/MT-trinity/Trinity_metadata.tsv \\\n     --max_memory ${params.h_mem}G \\\n     --no_normalize_reads \\\n     --CPU ${params.htp_cores}\\\n     --output Trinity\\\n     --verbose\n\n\"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mRNA_fwd3",
            "mRNA_rev3"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Trinity"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.htp_cores",
            "memory \"${params.h_mem} GB\"",
            "publishDir path: output, mode: 'move'"
        ],
        "when": "params.trinity",
        "stub": ""
    },
    "cd_hit_est": {
        "name_process": "cd_hit_est",
        "string_process": "\nprocess cd_hit_est{\n   \n               \n    cpus params.htp_cores\n    memory \"${params.l_mem} GB\"\n    publishDir path: \"${output}/CD-Hit\", mode: 'copy'\n  \n   input:\n       file(contigs) from contig_queries\n       \n    \n   output:\n       file(contig_fname) into (cd_hits_bowtie, cd_hits_salmon, cd_hits_gmst)\n       file(\"${contig_basename}.cd_hits.clstr\") into cdhit_clusters\n       file(\"${contig_basename}.cd_hits\") into cd_hits \n       file(sqlite_database) into sqlite_db\n       val contig_basename into (contig_basename1,contig_basename2,contig_basename3)\n\n    script: \n\tcontig_basename = \"${contigs.baseName}_SHB\"\n        sqlite_database = \"${contig_basename}.db\"   \n\tcontig_fname = \"${contig_basename}.fasta\"\n\"\"\"\n\n    cd-hit-est \\\n    -i $contigs \\\n    -c ${params.cdHit_perc} \\\n    -T ${params.htp_cores} \\\n    -M 0 \\\n    -d 0 \\\n    -r 0 \\\n    -p 1 \\\n    -g 1 \\\n    -o ${contig_basename}.cd_hits \n\n    contig_initDB.py \\\n    -d ${sqlite_database} \\\n    -c ${contig_basename}.cd_hits \\\n    -f \\\n    -o ${contig_fname}\n\n\"\"\"\n\n}",
        "nb_lignes_process": 43,
        "string_script": "\tcontig_basename = \"${contigs.baseName}_SHB\"\n        sqlite_database = \"${contig_basename}.db\"   \n\tcontig_fname = \"${contig_basename}.fasta\"\n\"\"\"\n\n    cd-hit-est \\\n    -i $contigs \\\n    -c ${params.cdHit_perc} \\\n    -T ${params.htp_cores} \\\n    -M 0 \\\n    -d 0 \\\n    -r 0 \\\n    -p 1 \\\n    -g 1 \\\n    -o ${contig_basename}.cd_hits \n\n    contig_initDB.py \\\n    -d ${sqlite_database} \\\n    -c ${contig_basename}.cd_hits \\\n    -f \\\n    -o ${contig_fname}\n\n\"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contig_queries"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "cdhit_clusters",
            "cd_hits",
            "sqlite_db",
            ""
        ],
        "nb_outputs": 5,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.htp_cores",
            "memory \"${params.l_mem} GB\"",
            "publishDir path: \"${output}/CD-Hit\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bowtie_idx": {
        "name_process": "bowtie_idx",
        "string_process": "\nprocess bowtie_idx{\n\n               \n    cpus params.htp_cores\n    memory \"${params.l_mem} \n    memory \"${params.m_mem} GB\"\n    publishDir \"${DB_REF}/Bowtie\", mode: \"copy\"\n    \n    input:\n        val  contig_basename1\n        file contig_fasta from cd_hits_bowtie\n \t\n    output:  \n        val bowtie2_base\n        file(\"${bowtie2_base}*\") into bowtie_idx\n       \n    when:\n\tparams.bowtie_idx\n    \n    script:\n        bowtie2_base =  \"bowtie2_${contig_basename1}\"\n      \n    \n\"\"\"\n    \n    bowtie2-build  \\\n    --large-index \\\n    --threads ${params.htp_cores} \\\n    ${contig_fasta} \\\n    ${bowtie2_base}  > ${bowtie2_base}.log\n\n\n    bowtie2-inspect \\\n    --large-in \\\n    --summary \\\n    ${bowtie2_base}  >  bowtie2_${contig_fasta}.idx_stats\n\n    \n\"\"\"    \n    \n}",
        "nb_lignes_process": 40,
        "string_script": "        bowtie2_base =  \"bowtie2_${contig_basename1}\"\n      \n    \n\"\"\"\n    \n    bowtie2-build  \\\n    --large-index \\\n    --threads ${params.htp_cores} \\\n    ${contig_fasta} \\\n    ${bowtie2_base}  > ${bowtie2_base}.log\n\n\n    bowtie2-inspect \\\n    --large-in \\\n    --summary \\\n    ${bowtie2_base}  >  bowtie2_${contig_fasta}.idx_stats\n\n    \n\"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contig_basename1",
            "cd_hits_bowtie"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bowtie2_base",
            "bowtie_idx"
        ],
        "nb_outputs": 2,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.htp_cores",
            "memory \"${params.l_mem}",
            "memory \"${params.m_mem} GB\"",
            "publishDir \"${DB_REF}/Bowtie\", mode: \"copy\""
        ],
        "when": "params.bowtie_idx",
        "stub": ""
    },
    "bowtie2sam": {
        "name_process": "bowtie2sam",
        "string_process": "\nprocess bowtie2sam{\n\n    tag \"${sample}\"\n    cpus params.htp_cores\n    memory \"${params.l_mem} GB\"\n    publishDir \"${DB_REF}/Bowtie2sam\", mode: \"move\"\n    memory \"${params.m_mem} GB\"\n\n\n    input:\n        each data from reads3\n        file bowtie_idx_files from bowtie_idx.collect()\n\tval bowtie2_base\n\n    output:\n\tfile(\"${sample}.sam\") into bowtie_sam\n\tfile(\"${sample}.bam\") into bowtie_bam\n        file(\"*.un\")\n\tfile(\"*.al\")\n\tfile(\"*.log\")\n    \n    when:\n\tparams.bowtie\n\n    script:\n        (sample, reads) = data\n        (fwd_reads, rev_reads) = reads \n\tfwd_name = fwd_reads.baseName\n        rev_name = rev_reads.baseName\n\t\n\"\"\"\n\n     bowtie2 \\\n     --threads ${params.htp_cores} \\\n     -x ${bowtie2_base} \\\n     --fr \\\n     -1 ${fwd_reads} \\\n     -2 ${rev_reads} \\\n     --fr \\\n     --no-unal \\\n     --time \\\n     --un-conc ${sample}.un \\\n     --al-conc ${sample}.al \\\n     -S ${sample}.sam &> ${sample}.log \n\n\n     samtools \\\n     view \\\n     ${sample}.sam \\\n     -F 4 \\\n     -b \\\n     -o ${sample}.bam \n     \n\"\"\"\n                                                       \n\n}",
        "nb_lignes_process": 56,
        "string_script": "        (sample, reads) = data\n        (fwd_reads, rev_reads) = reads \n\tfwd_name = fwd_reads.baseName\n        rev_name = rev_reads.baseName\n\t\n\"\"\"\n\n     bowtie2 \\\n     --threads ${params.htp_cores} \\\n     -x ${bowtie2_base} \\\n     --fr \\\n     -1 ${fwd_reads} \\\n     -2 ${rev_reads} \\\n     --fr \\\n     --no-unal \\\n     --time \\\n     --un-conc ${sample}.un \\\n     --al-conc ${sample}.al \\\n     -S ${sample}.sam &> ${sample}.log \n\n\n     samtools \\\n     view \\\n     ${sample}.sam \\\n     -F 4 \\\n     -b \\\n     -o ${sample}.bam \n     \n\"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "Rbowtie2",
            "SAMtools",
            "iview"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2",
            "https://bio.tools/samtools",
            "https://bio.tools/iview"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "iview",
                "uri": "https://bio.tools/iview",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Interactive HTML5 visualizer of protein-ligand complex.",
                "homepage": "http://istar.cse.cuhk.edu.hk/iview/"
            }
        ],
        "inputs": [
            "reads3",
            "bowtie_idx",
            "bowtie2_base"
        ],
        "nb_inputs": 3,
        "outputs": [
            "bowtie_sam",
            "bowtie_bam"
        ],
        "nb_outputs": 2,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "tag \"${sample}\"",
            "cpus params.htp_cores",
            "memory \"${params.l_mem} GB\"",
            "publishDir \"${DB_REF}/Bowtie2sam\", mode: \"move\"",
            "memory \"${params.m_mem} GB\""
        ],
        "when": "params.bowtie",
        "stub": ""
    },
    "salmon_index": {
        "name_process": "salmon_index",
        "string_process": "\nprocess salmon_index{\n    \n    echo true\n    cpus params.mtp_cores\n    memory \"${params.m_mem} GB\"\n                                        \n    publishDir \"${DB_REF}/Salmon\", mode: \"copy\"\n\n    input:\n\tfile(cd_hits) from cd_hits_salmon\n    \n    output:\n        file(\"salmon_index\") into salmon_index\n\n    when:\n\tparams.salmon_index == true\n        \n\t    \n\"\"\"\n\n    salmon \\\n    --no-version-check \\\n    index \\\n    -t  ${cd_hits}  \\\n    -i  salmon_index \\\n    --type quasi \\\n    -p  ${params.htp_cores} \n\n\"\"\"\n    \n                                                                  \n                                                                                        \n   \n}",
        "nb_lignes_process": 33,
        "string_script": "\"\"\"\n\n    salmon \\\n    --no-version-check \\\n    index \\\n    -t  ${cd_hits}  \\\n    -i  salmon_index \\\n    --type quasi \\\n    -p  ${params.htp_cores} \n\n\"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "Salmon",
            "CINdex"
        ],
        "tools_url": [
            "https://bio.tools/salmon",
            "https://bio.tools/cindex"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            },
            {
                "name": "CINdex",
                "uri": "https://bio.tools/cindex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The package addresses important area of high-throughput genomic analysis. It allows the automated processing and analysis of the experimental DNA copy number data generated by Affymetrix SNP 6.0 arrays or similar. It calculates the chromosome instability index to quantitatively characterize genome-wide DNA copy number alterations. This package calculates not only overall genomic instability, but also instability in terms of copy number gains and losses at the chromosome and cytoband level.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/CINdex.html"
            }
        ],
        "inputs": [
            "cd_hits_salmon"
        ],
        "nb_inputs": 1,
        "outputs": [
            "salmon_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "echo true",
            "cpus params.mtp_cores",
            "memory \"${params.m_mem} GB\"",
            "publishDir \"${DB_REF}/Salmon\", mode: \"copy\""
        ],
        "when": "params.salmon_index == true",
        "stub": ""
    },
    "salmon_quant": {
        "name_process": "salmon_quant",
        "string_process": "\nprocess salmon_quant{\n    \n                \n    tag \"${pair_id}\"\n    cpus params.mtp_cores\n    memory \"${params.h_mem} GB\"\n    publishDir path: \"${output}/Quant\", mode: 'move'\n    \n    input:\n        each bam from bowtie_bam\n\tfile(cd_hits) from cd_hits_salmon\n        \n      \n    output:\n        file(pair_id) into salmon_quant\n\n    when:\n\tparams.salmon_quant\n\n   script:\n       pair_id = \"${bam.baseName}\"\n\t\n  \n\"\"\"\n\n    salmon \\\n    quant \\\n    --no-version-check \\\n    -l A \\\n    -a ${bam} \\\n    -t ${cd_hits} \\\n    --writeUnmappedNames \\\n    --meta \\\n    --output ${pair_id} \\\n    -p ${params.htp_cores}\n\n\"\"\"\n\t\n}",
        "nb_lignes_process": 38,
        "string_script": "       pair_id = \"${bam.baseName}\"\n\t\n  \n\"\"\"\n\n    salmon \\\n    quant \\\n    --no-version-check \\\n    -l A \\\n    -a ${bam} \\\n    -t ${cd_hits} \\\n    --writeUnmappedNames \\\n    --meta \\\n    --output ${pair_id} \\\n    -p ${params.htp_cores}\n\n\"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "Salmon",
            "Quant"
        ],
        "tools_url": [
            "https://bio.tools/salmon",
            "https://bio.tools/quant"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            },
            {
                "name": "Quant",
                "uri": "https://bio.tools/quant",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3635",
                                    "term": "Labeled quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3630",
                                    "term": "Protein quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3639",
                                    "term": "iTRAQ"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3441",
                                    "term": "Plotting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3630",
                                    "term": "Protein quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0945",
                                "term": "Peptide identification"
                            },
                            {
                                "uri": "http://edamontology.org/data_0943",
                                "term": "Mass spectrum"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2603",
                                "term": "Expression data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2884",
                                "term": "Plot"
                            }
                        ]
                    }
                ],
                "description": "MATLAB program for protein quantitation by iTRAQ.",
                "homepage": "http://sourceforge.net/projects/protms"
            }
        ],
        "inputs": [
            "bowtie_bam",
            "cd_hits_salmon"
        ],
        "nb_inputs": 2,
        "outputs": [
            "salmon_quant"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "tag \"${pair_id}\"",
            "cpus params.mtp_cores",
            "memory \"${params.h_mem} GB\"",
            "publishDir path: \"${output}/Quant\", mode: 'move'"
        ],
        "when": "params.salmon_quant",
        "stub": ""
    },
    "GeneMarkST": {
        "name_process": "GeneMarkST",
        "string_process": "\nprocess GeneMarkST{\n     \n                \n    cpus params.mtp_cores\n    memory \"${params.m_mem} GB\"\n    publishDir path: \"$output/GeneMarkST\", mode: 'move'\n    input:\n\tfile(cd_hits) from cd_hits_gmst\n\tfile sqlite_db\n\n    output:\n\tfile(genetable) into genetable\n\tfile(\"gms.log\") into gms_log\n\tfile(\"*.faa\") into predicted_aa\n\tfile(\"*.fnn\") into predicted_nn\n\tfile(\"*.gff\") into pedicted_gff\n\tfile(sqlite_db) into sqlite_database\n\n    when:\n\tparams.gmst\n\n    script:        \n        base =  cd_hits.baseName\n    \tgenetable = \"${base}.gene_tsv\"\n\tgff = \"${base}.gff\"\n\n\n\"\"\"\n\n      gmst.pl \\\n      --fnn \\\n      --faa \\\n      --format GFF \\\n      ${cd_hits} \\\n      --verbose      \n      \n      fasta_gff_dedup.py \\\n      ${cd_hits}.faa \\\n      ${cd_hits}.gff \\\n      -f ${cd_hits}_aa.faa \\\n      -g ${cd_hits}_aa.gff\n\n      fasta_gff_dedup.py \\\n      ${cd_hits}.fnn \\\n      ${cd_hits}.gff \\\n      -f ${cd_hits}_nt.faa \\\n      -g ${cd_hits}_nt.gff\n\n      gff2genetable.py \\\n      -d ${sqlite_db} \\\n      -o ${genetable} \\\n       ${cd_hits}.gff\n     \n      \n\"\"\"\n\n                           \n\n\n}",
        "nb_lignes_process": 59,
        "string_script": "        base =  cd_hits.baseName\n    \tgenetable = \"${base}.gene_tsv\"\n\tgff = \"${base}.gff\"\n\n\n\"\"\"\n\n      gmst.pl \\\n      --fnn \\\n      --faa \\\n      --format GFF \\\n      ${cd_hits} \\\n      --verbose      \n      \n      fasta_gff_dedup.py \\\n      ${cd_hits}.faa \\\n      ${cd_hits}.gff \\\n      -f ${cd_hits}_aa.faa \\\n      -g ${cd_hits}_aa.gff\n\n      fasta_gff_dedup.py \\\n      ${cd_hits}.fnn \\\n      ${cd_hits}.gff \\\n      -f ${cd_hits}_nt.faa \\\n      -g ${cd_hits}_nt.gff\n\n      gff2genetable.py \\\n      -d ${sqlite_db} \\\n      -o ${genetable} \\\n       ${cd_hits}.gff\n     \n      \n\"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "BASE",
            "GFF-Ex"
        ],
        "tools_url": [
            "https://bio.tools/base-antibody",
            "https://bio.tools/gff-ex"
        ],
        "tools_dico": [
            {
                "name": "BASE",
                "uri": "https://bio.tools/base-antibody",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0804",
                            "term": "Immunology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3304",
                            "term": "Neurobiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An easy-to-use software for complete data analysis in single cell immunoglobulin cloning.",
                "homepage": "https://github.com/automatedSequencing/BASE"
            },
            {
                "name": "GFF-Ex",
                "uri": "https://bio.tools/gff-ex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Automated feature-based extraction of sequences from a GFF file.",
                "homepage": "http://bioinfo.icgeb.res.in/gff/"
            }
        ],
        "inputs": [
            "cd_hits_gmst",
            "sqlite_db"
        ],
        "nb_inputs": 2,
        "outputs": [
            "genetable",
            "gms_log",
            "predicted_aa",
            "predicted_nn",
            "pedicted_gff",
            "sqlite_database"
        ],
        "nb_outputs": 6,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.mtp_cores",
            "memory \"${params.m_mem} GB\"",
            "publishDir path: \"$output/GeneMarkST\", mode: 'move'"
        ],
        "when": "params.gmst",
        "stub": ""
    },
    "gen_contigDB": {
        "name_process": "gen_contigDB",
        "string_process": "\nprocess gen_contigDB{\n                   \n    echo true\n    cpus params.ltp_cores\n    memory \"${params.m_mem} GB\"\n                            \n    publishDir path: output, mode: 'copy'\n    \n    input:\n        file contig\n        file gene_table\n\t\n    output:\n\tfile \"${contig.baseName}_anvio.db\"  into (contigDB1, contigDB2)  \n\n    \n\"\"\"\n\n  \n    anvi-gen-contigs-database \\\n    -f ${contig} \\\n    -o ${contig.baseName}_anvio.db \\\n    --external-gene-calls ${gene_table} \\\n    -n 'Anvio database: ${contig}'\n\n    #anvi-run-hmms \\\n    #-c ${contig.baseName}_anvio.db\n\n\"\"\"\n\n \n}",
        "nb_lignes_process": 31,
        "string_script": "\"\"\"\n\n  \n    anvi-gen-contigs-database \\\n    -f ${contig} \\\n    -o ${contig.baseName}_anvio.db \\\n    --external-gene-calls ${gene_table} \\\n    -n 'Anvio database: ${contig}'\n\n    #anvi-run-hmms \\\n    #-c ${contig.baseName}_anvio.db\n\n\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contig",
            "gene_table"
        ],
        "nb_inputs": 2,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "echo true",
            "cpus params.ltp_cores",
            "memory \"${params.m_mem} GB\"",
            "publishDir path: output, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "init_bam": {
        "name_process": "init_bam",
        "string_process": "\nprocess init_bam{\n\n                    \n    cpus params.mtp_cores\n    memory \"${params.m_mem} GB\"\n    publishDir path: output, mode: 'copyNoFollow'\n    \n    \n    input:\n\tfile bam from bam_files1\n        file contig\n    \n    output:\n\tset file(\"${bam_dir}/*.bam\"), file(\"${bam_dir}/*.bai\")  into anvio_bam\n\n   script:\n      bam_dir =  bam.baseName\n\n\"\"\"\n    mkdir -v ${bam_dir}\n    anvi-init-bam \\\n    ${bam} \\\n    -o ${bam_dir}/${bam} \n\n\"\"\"\n    \n}",
        "nb_lignes_process": 26,
        "string_script": "      bam_dir =  bam.baseName\n\n\"\"\"\n    mkdir -v ${bam_dir}\n    anvi-init-bam \\\n    ${bam} \\\n    -o ${bam_dir}/${bam} \n\n\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_files1",
            "contig"
        ],
        "nb_inputs": 2,
        "outputs": [
            "anvio_bam"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.mtp_cores",
            "memory \"${params.m_mem} GB\"",
            "publishDir path: output, mode: 'copyNoFollow'"
        ],
        "when": "",
        "stub": ""
    },
    "anvi_profile": {
        "name_process": "anvi_profile",
        "string_process": "\nprocess anvi_profile{\n\n                   \n    echo true\n    maxForks 1\n    cpus params.mtp_cores\n    memory \"${params.h_mem} GB\"\n    publishDir path: output, mode: 'copy'\n    \n    input:\n\tset file(bam), file(index) from  anvio_bam\n\tfile contig_db from  contigDB1 \n\n    output:\n\tfile(\"${sample}\") into anvi_profiles\n\t                                                 \n        set file(\"${sample}/AUXILIARY-DATA.db\"),  file(\"${sample}/RUNLOG.txt\") into profile_data\n        \n    \n    script:\n\tbam_filename = bam.getName()\n        sample = bam.baseName\n\t\n\t\n\"\"\"\n \n  anvi-profile \\\n  -i ${bam} \\\n  -c ${contig_db} \\\n  --skip-hierarchical-clustering \\\n  --min-contig-length ${params.min_contig} \\\n  --output-dir $sample \\\n  --num-threads ${params.mtp_cores} \\\n  --sample-name $sample \\\n  --skip-hierarchical-clustering\n    \n\"\"\"\n\n}",
        "nb_lignes_process": 38,
        "string_script": "\tbam_filename = bam.getName()\n        sample = bam.baseName\n\t\n\t\n\"\"\"\n \n  anvi-profile \\\n  -i ${bam} \\\n  -c ${contig_db} \\\n  --skip-hierarchical-clustering \\\n  --min-contig-length ${params.min_contig} \\\n  --output-dir $sample \\\n  --num-threads ${params.mtp_cores} \\\n  --sample-name $sample \\\n  --skip-hierarchical-clustering\n    \n\"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "SAMPLE"
        ],
        "tools_url": [
            "https://bio.tools/sample"
        ],
        "tools_dico": [
            {
                "name": "SAMPLE",
                "uri": "https://bio.tools/sample",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Linkage mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Functional mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The tool is designed to identify regions that are linked to a recessive disease by analysing genotype data from the parents and unaffected sibs of affected individuals. Since this analysis does not use data from affected patients, it is suited to the identification of lethal recessive genes, when the patients may have died before DNA samples could be obtained.",
                "homepage": "http://dna.leeds.ac.uk/sample/"
            }
        ],
        "inputs": [
            "anvio_bam",
            "contigDB1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "anvi_profiles",
            "profile_data"
        ],
        "nb_outputs": 2,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "echo true",
            "maxForks 1",
            "cpus params.mtp_cores",
            "memory \"${params.h_mem} GB\"",
            "publishDir path: output, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "anvi_merge": {
        "name_process": "anvi_merge",
        "string_process": "\nprocess anvi_merge{\n\n                   \n    echo true\n    cpus params.mtp_cores\n    memory \"${params.m_mem} GB\"\n    publishDir path: output, mode: 'move'\n\n    input:\n\tfile(profile) from anvi_profiles.collect()\n        file contig_db from contigDB2 \n\n    output:\n\tfile(\"samples_merged\") into samples_merged\n\n\"\"\"\n\n    anvi-merge */PROFILE.db  \\\n    -o samples_merged \\\n    -c ${contig_db} \\\n    --sample-name St_Helena_Bay \\\n    --skip-hierarchical-clustering\n\n\"\"\"\n\n}",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n\n    anvi-merge */PROFILE.db  \\\n    -o samples_merged \\\n    -c ${contig_db} \\\n    --sample-name St_Helena_Bay \\\n    --skip-hierarchical-clustering\n\n\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "anvi_profiles",
            "contigDB2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "samples_merged"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "echo true",
            "cpus params.mtp_cores",
            "memory \"${params.m_mem} GB\"",
            "publishDir path: output, mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "hmmscan": {
        "name_process": "hmmscan",
        "string_process": "\nprocess hmmscan{\n\n    echo true\n    cpus params.htp_cores\n    memory \"${params.m_mem} GB\"\n    publishDir path: \"${output}/hmmer\", mode: 'copy'\n\n    input:\n\tfile(pep_file) from peptide_queries\n\tval pfam_hmmerDB\n\n    output:\n        file(\"*\") into hmmscan_out\n\n    script:\n\t hmmer_base = pep_file.baseName\n\n\n\"\"\"\n \n   hmmscan \\\n   --tblout ${hmmer_base}.tbl \\\n   -o ${hmmer_base}.hmmscan \\\n   -E 100 \\\n   --cpu ${params.htp_cores} \\\n   --max \\\n   --domtblout ${hmmer_base}.domtbl \\\n   --pfamtblout ${hmmer_base}.pfamtbl \\\n   ${pfam_hmmerDB} \\\n   ${pep_file} \n  \n\"\"\"\n\n}",
        "nb_lignes_process": 33,
        "string_script": "\t hmmer_base = pep_file.baseName\n\n\n\"\"\"\n \n   hmmscan \\\n   --tblout ${hmmer_base}.tbl \\\n   -o ${hmmer_base}.hmmscan \\\n   -E 100 \\\n   --cpu ${params.htp_cores} \\\n   --max \\\n   --domtblout ${hmmer_base}.domtbl \\\n   --pfamtblout ${hmmer_base}.pfamtbl \\\n   ${pfam_hmmerDB} \\\n   ${pep_file} \n  \n\"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "peptide_queries",
            "pfam_hmmerDB"
        ],
        "nb_inputs": 2,
        "outputs": [
            "hmmscan_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "echo true",
            "cpus params.htp_cores",
            "memory \"${params.m_mem} GB\"",
            "publishDir path: \"${output}/hmmer\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "diamond_idx": {
        "name_process": "diamond_idx",
        "string_process": "\nprocess diamond_idx{\n\n    echo true\n    cpus params.htp_cores\n    memory \"${params.h_mem} GB\"\n    storeDir \"$params.DB_REF/Diamond\"\n    \n    \n    input:\n       file diamond_raw\n\n    output:\n       file \"${dmnd_base}.dmnd\" into diamond_idx\n       val dmnd_base into diamond_BaseName\n\t\n    when: params.diamond_idx == true\n\n    script:\n        dmnd_base = diamond_raw.baseName\n\n\"\"\"\n    \n    diamond \\\n    makedb \\\n    --in ${diamond_raw} \\\n    -d ${dmnd_base} \\\n    --threads ${params.htp_cores} \\\n    -v\n     \n\"\"\"\n \n}",
        "nb_lignes_process": 31,
        "string_script": "        dmnd_base = diamond_raw.baseName\n\n\"\"\"\n    \n    diamond \\\n    makedb \\\n    --in ${diamond_raw} \\\n    -d ${dmnd_base} \\\n    --threads ${params.htp_cores} \\\n    -v\n     \n\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "diamond_raw"
        ],
        "nb_inputs": 1,
        "outputs": [
            "diamond_idx",
            "diamond_BaseName"
        ],
        "nb_outputs": 2,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "echo true",
            "cpus params.htp_cores",
            "memory \"${params.h_mem} GB\"",
            "storeDir \"$params.DB_REF/Diamond\""
        ],
        "when": "",
        "stub": ""
    },
    "makeblastdb": {
        "name_process": "makeblastdb",
        "string_process": "\nprocess makeblastdb{\n\n               \n    cpus params.htp_cores\n    memory \"${params.h_mem} GB\"\n    storeDir \"$params.DB_REF/Blast\"\n\n    input:\n        file blastdb_raw \n\n    output:\n       file(\"${blastdb_base}*\") into blastdb_idx\n       val  blastdb_base into blastdb_BaseName\n\n    when:\n        params.makeblastdb == true\n\n    script:\n        blastdb_base = blastdb_raw.baseName\n    \n\n\"\"\"\n\n    makeblastdb \\\n    -in ${blastdb_raw} \\\n    -input_type fasta \\\n    -dbtype nucl \\\n    -out ${blastdb_base} \\\n    -parse_seqids \n     \n\n    makembindex \\\n    -input ${blastdb_base} \\\n    -iformat blastdb \\\n    -old_style_index false\n     \n    \n\"\"\"\n\n\n}",
        "nb_lignes_process": 40,
        "string_script": "        blastdb_base = blastdb_raw.baseName\n    \n\n\"\"\"\n\n    makeblastdb \\\n    -in ${blastdb_raw} \\\n    -input_type fasta \\\n    -dbtype nucl \\\n    -out ${blastdb_base} \\\n    -parse_seqids \n     \n\n    makembindex \\\n    -input ${blastdb_base} \\\n    -iformat blastdb \\\n    -old_style_index false\n     \n    \n\"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blastdb_raw"
        ],
        "nb_inputs": 1,
        "outputs": [
            "blastdb_idx",
            "blastdb_BaseName"
        ],
        "nb_outputs": 2,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.htp_cores",
            "memory \"${params.h_mem} GB\"",
            "storeDir \"$params.DB_REF/Blast\""
        ],
        "when": "params.makeblastdb == true",
        "stub": ""
    },
    "diamond": {
        "name_process": "diamond",
        "string_process": "\nprocess diamond{\n\n    cpus params.htp_cores\n    memory \"${params.h_mem} GB\"\n    publishDir path: \"${output}/diamond\" , mode: 'copy'\n    \n    input:\n       file query_seqs from diamond_queries\n       file diamond_db from diamond_idx\n       val  dmnd_base from diamond_BaseName\n       \n    output:\n\tfile(\"*\") into diamond_Out\n    \n    when:\n      params.diamond == true\n\n    script:\n       diamond_tag = query_seqs.getName()+\"_dmnd\"\n\n    \n       \t\n\"\"\"\n\n    diamond \\\n    blastx \\\n    -d ${dmnd_base}  \\\n    --un ${diamond_tag}.unaligned \\\n    --al ${diamond_tag}.aligned \\\n    -q ${query_seqs} \\\n    -o ${diamond_tag}.out \\\n    -f ${params.outformat}  \\\n    --more-sensitive \\\n    --id 40 \\\n    --max-hsps 1 \\\n    --header \\\n    --top 10 \\\n    --frameshift 15 \\\n    --range-culling \\\n    --evalue 1e-5 \\\n    --index-chunks 1 \\\n    --verbose    \n\n\n\"\"\"\n\n    \n}",
        "nb_lignes_process": 47,
        "string_script": "       diamond_tag = query_seqs.getName()+\"_dmnd\"\n\n    \n       \t\n\"\"\"\n\n    diamond \\\n    blastx \\\n    -d ${dmnd_base}  \\\n    --un ${diamond_tag}.unaligned \\\n    --al ${diamond_tag}.aligned \\\n    -q ${query_seqs} \\\n    -o ${diamond_tag}.out \\\n    -f ${params.outformat}  \\\n    --more-sensitive \\\n    --id 40 \\\n    --max-hsps 1 \\\n    --header \\\n    --top 10 \\\n    --frameshift 15 \\\n    --range-culling \\\n    --evalue 1e-5 \\\n    --index-chunks 1 \\\n    --verbose    \n\n\n\"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "diamond_queries",
            "diamond_idx",
            "diamond_BaseName"
        ],
        "nb_inputs": 3,
        "outputs": [
            "diamond_Out"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "cpus params.htp_cores",
            "memory \"${params.h_mem} GB\"",
            "publishDir path: \"${output}/diamond\" , mode: 'copy'"
        ],
        "when": "params.diamond == true",
        "stub": ""
    },
    "MegaBlast": {
        "name_process": "MegaBlast",
        "string_process": "\nprocess MegaBlast{\n    \n    echo true\n    cpus params.htp_cores\n    memory \"${params.h_mem} GB\"\n    publishDir path: \"${output}/MegaBlast\" , mode: 'copy'\n    \n    input:\n       file query_seqs from blast_queries\n       file blastdb_file from  blastdb_idx\n       val  blastdb_name from blastdb_BaseName\n       \n    output:\n\tfile(\"*\") into blastOut\n    \n    when:\n        params.megablast == true\n\n    script:\n        megablast_tag  =  query_seqs.getName()+\"_blast\"\n\n       \t\n\n\"\"\"\n \n   blastdbcmd \\\n   -db ${blastdb_name}  \\\n   -info\n\n   blastn \\\n   -query ${query_seqs} \\\n   -task megablast \\\n   -db ${blastdb_name} \\\n   -num_threads  ${params.htp_cores} \\\n   -outfmt ${params.outformat} \\\n   -perc_identity 40 \\\n   -evalue 1e-5 \\\n   -parse_deflines \\\n   -max_hsps 1 \\\n   -out ${megablast_tag}.out \\\n   -use_index true\n     \n\"\"\"\n\n    \n}",
        "nb_lignes_process": 45,
        "string_script": "        megablast_tag  =  query_seqs.getName()+\"_blast\"\n\n       \t\n\n\"\"\"\n \n   blastdbcmd \\\n   -db ${blastdb_name}  \\\n   -info\n\n   blastn \\\n   -query ${query_seqs} \\\n   -task megablast \\\n   -db ${blastdb_name} \\\n   -num_threads  ${params.htp_cores} \\\n   -outfmt ${params.outformat} \\\n   -perc_identity 40 \\\n   -evalue 1e-5 \\\n   -parse_deflines \\\n   -max_hsps 1 \\\n   -out ${megablast_tag}.out \\\n   -use_index true\n     \n\"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "blast_queries",
            "blastdb_idx",
            "blastdb_BaseName"
        ],
        "nb_inputs": 3,
        "outputs": [
            "blastOut"
        ],
        "nb_outputs": 1,
        "name_workflow": "PiscatorX__videre-pipeline",
        "directive": [
            "echo true",
            "cpus params.htp_cores",
            "memory \"${params.h_mem} GB\"",
            "publishDir path: \"${output}/MegaBlast\" , mode: 'copy'"
        ],
        "when": "params.megablast == true",
        "stub": ""
    }
}
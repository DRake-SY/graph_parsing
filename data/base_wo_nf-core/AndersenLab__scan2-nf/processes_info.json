{
    "scan2": {
        "name_process": "scan2",
        "string_process": "\nprocess scan2 {\n\tcpus 4\n\tmemory '20 GB'\n\tpublishDir params.out, mode: 'copy'\n\n\tinput:\n\t\tfile(\"pheno\") from riails\n\n\toutput:\n\t\tfile(\"scan2.Rda\") into scan2_object\n\t\tfile(\"mapcross.Rda\") into crossobj\n\t\tfile(\"scan2plot.png\")\n\n\n\t\"\"\"\n\t#!/usr/bin/env Rscript --vanilla\n\n\tlibrary(dplyr)\n\tlibrary(readr)\n\tlibrary(qtl)\n\tlibrary(linkagemapping)\n\n\t#insert cross data\n\tcrossobj <- get(linkagemapping::load_cross_obj(\"${params.cross}\"))\n\n\t# read RIAIL phenotype data for 1 trait\n\tpheno <- readr::read_tsv(\"$pheno\")\n\n\t#create completed cross object with pheno data set\n\tmapcross <- linkagemapping::mergepheno(crossobj, pheno, set = ${params.set})\n\n\t# save cross object\n\tsave(mapcross, file = \"mapcross.Rda\")\n\n\t# run scan2\n\tscan2 <- qtl::scantwo(mapcross, pheno.col=3, method=\"mr\")\n\n\t# make output into dataframe\n\tsave(scan2, file = \"scan2.Rda\")\n\n\t# plot scan2\n\tpng(\"scan2plot.png\")\n\tplot(scan2)\n\tdev.off()\n\n\t\"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "\"\"\"\n\t#!/usr/bin/env Rscript --vanilla\n\n\tlibrary(dplyr)\n\tlibrary(readr)\n\tlibrary(qtl)\n\tlibrary(linkagemapping)\n\n\t#insert cross data\n\tcrossobj <- get(linkagemapping::load_cross_obj(\"${params.cross}\"))\n\n\t# read RIAIL phenotype data for 1 trait\n\tpheno <- readr::read_tsv(\"$pheno\")\n\n\t#create completed cross object with pheno data set\n\tmapcross <- linkagemapping::mergepheno(crossobj, pheno, set = ${params.set})\n\n\t# save cross object\n\tsave(mapcross, file = \"mapcross.Rda\")\n\n\t# run scan2\n\tscan2 <- qtl::scantwo(mapcross, pheno.col=3, method=\"mr\")\n\n\t# make output into dataframe\n\tsave(scan2, file = \"scan2.Rda\")\n\n\t# plot scan2\n\tpng(\"scan2plot.png\")\n\tplot(scan2)\n\tdev.off()\n\n\t\"\"\"",
        "nb_lignes_script": 31,
        "language_script": "--vanilla",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "riails"
        ],
        "nb_inputs": 1,
        "outputs": [
            "scan2_object",
            "crossobj"
        ],
        "nb_outputs": 2,
        "name_workflow": "AndersenLab__scan2-nf",
        "directive": [
            "cpus 4",
            "memory '20 GB'",
            "publishDir params.out, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "scan2000": {
        "name_process": "scan2000",
        "string_process": "\nprocess scan2000 {\n\tcpus 4\n\tmemory '20 GB'\n\ttag { s }\n\n\tinput:\n\t\tset val(\"s\"), file(\"mapcross\") from crossobj_split\n\n\toutput:\n\t\tfile(\"scan2thousand*.tsv\") into scan2000\n\n\t\"\"\"\n\t#!/usr/bin/env Rscript --vanilla\n\n\tlibrary(dplyr)\n\tlibrary(readr)\n\tlibrary(qtl)\n\tlibrary(linkagemapping)\n\n\t# load cross object\n\tload(\"$mapcross\")\n\n\t# run scan2 with 5 permutations\n\tscan2thousand <- qtl::scantwo(mapcross, n.perm=1, pheno.col=3, method=\"mr\")\n\n\t# make output into dataframe\n\tdf <- data.frame(full = scan2thousand\\$full[[1]], fv1 = scan2thousand\\$fv1[[1]], int = scan2thousand\\$int[[1]], \n\t\t\t\t\t\tadd = scan2thousand\\$add[[1]], av1 = scan2thousand\\$av1[[1]], one = scan2thousand\\$one[[1]])\n\n\t# save dataframe\n\treadr::write_tsv(df, paste0(\"scan2thousand\", \"_\", $s, \".tsv\"))\n\n\t\"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "\"\"\"\n\t#!/usr/bin/env Rscript --vanilla\n\n\tlibrary(dplyr)\n\tlibrary(readr)\n\tlibrary(qtl)\n\tlibrary(linkagemapping)\n\n\t# load cross object\n\tload(\"$mapcross\")\n\n\t# run scan2 with 5 permutations\n\tscan2thousand <- qtl::scantwo(mapcross, n.perm=1, pheno.col=3, method=\"mr\")\n\n\t# make output into dataframe\n\tdf <- data.frame(full = scan2thousand\\$full[[1]], fv1 = scan2thousand\\$fv1[[1]], int = scan2thousand\\$int[[1]], \n\t\t\t\t\t\tadd = scan2thousand\\$add[[1]], av1 = scan2thousand\\$av1[[1]], one = scan2thousand\\$one[[1]])\n\n\t# save dataframe\n\treadr::write_tsv(df, paste0(\"scan2thousand\", \"_\", $s, \".tsv\"))\n\n\t\"\"\"",
        "nb_lignes_script": 21,
        "language_script": "--vanilla",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "crossobj_split"
        ],
        "nb_inputs": 1,
        "outputs": [
            "scan2000"
        ],
        "nb_outputs": 1,
        "name_workflow": "AndersenLab__scan2-nf",
        "directive": [
            "cpus 4",
            "memory '20 GB'",
            "tag { s }"
        ],
        "when": "",
        "stub": ""
    },
    "concatenate_quantiles": {
        "name_process": "concatenate_quantiles",
        "string_process": "\nprocess concatenate_quantiles {\n\n    publishDir params.out, mode: 'copy'\n    \n    input:\n\t\tval(\"scans\") from scan2000.toSortedList()\n\n    output:\n        file(\"scantwothousand.tsv\") into perms\n\n    \"\"\"\n    # use this to only print the header of the first line\n\tawk 'FNR>1 || NR==1' ${scans.join(\" \")} > scantwothousand.tsv\n    \"\"\"\n\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    # use this to only print the header of the first line\n\tawk 'FNR>1 || NR==1' ${scans.join(\" \")} > scantwothousand.tsv\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "scan2000"
        ],
        "nb_inputs": 1,
        "outputs": [
            "perms"
        ],
        "nb_outputs": 1,
        "name_workflow": "AndersenLab__scan2-nf",
        "directive": [
            "publishDir params.out, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "summarize_scan2": {
        "name_process": "summarize_scan2",
        "string_process": "\nprocess summarize_scan2 {\n\n\tpublishDir params.out, mode: \"copy\"\n\n\tinput:\n\tfile(\"scantwothousand\") from perms\n\tfile(\"scan2\") from scan2_object\n\n\toutput:\n\tfile(\"scan2summary.tsv\")\n\n\n\t\"\"\"\n\t#!/usr/bin/env Rscript --vanilla\n\n\tlibrary(dplyr)\n\tlibrary(readr)\n\tlibrary(linkagemapping)\n\tlibrary(qtl)\n\n\t#insert cross data\n\tcrossobj <- get(linkagemapping::load_cross_obj(\"${params.cross}\"))\n\n\t# load scan2\n\tload(\"$scan2\")\n\n\t# load perms\n\tperms <- readr::read_tsv(\"$scantwothousand\")\n\n\t# summarize scantwo and add GWER thresholds defined by permutations\n\tscan2_summary <- summary(scan2) %>%\n\t    dplyr::mutate(fv1_thresh = quantile(perms\\$fv1, probs = 0.95),\n\t                  full_thresh = quantile(perms\\$full, probs = 0.95),\n\t                  add_thresh = quantile(perms\\$add, probs = 0.95),\n\t                  av1_thresh = quantile(perms\\$av1, probs = 0.95),\n\t                  int_thresh = quantile(perms\\$int, probs = 0.95)) %>%\n\t    dplyr::mutate(pos1f = as.character(pos1f),\n\t                  pos2f = as.character(pos2f),\n\t                  pos1a = as.character(pos1a),\n\t                  pos2a = as.character(pos2a))\n\n\t# how to get marker positions for both N2xCB cross objects\n\tif(\"${params.cross}\" == \"N2xCB4856cross_full\") {\n\t    # riail marker conversion\n\t    mappos <- qtl::pull.map(crossobj, as.table = TRUE) %>%\n\t        dplyr::mutate(marker = rownames(.),\n\t                      cM = as.character(pos)) %>%\n\t        dplyr::select(-pos, -chr) %>%\n\t        dplyr::distinct(cM, .keep_all = T) \n\t    \n\t    # convert genetic pos to genomic pos\n\t    test <- scan2_summary %>%\n\t        # pos1f\n\t        dplyr::left_join(mappos, by = c(\"pos1f\" = \"cM\")) %>%\n\t        dplyr::mutate(pos1f = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker) %>%\n\t        # pos2f\n\t        dplyr::left_join(mappos, by = c(\"pos2f\" = \"cM\")) %>%\n\t        dplyr::mutate(pos2f = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker) %>%\n\t        # pos1a\n\t        dplyr::left_join(mappos, by = c(\"pos1a\" = \"cM\")) %>%\n\t        dplyr::mutate(pos1a = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker) %>%\n\t        # pos2a\n\t        dplyr::left_join(mappos, by = c(\"pos2a\" = \"cM\")) %>%\n\t        dplyr::mutate(pos2a = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker)\n\t} else if(\"${params.cross}\" == \"N2xCB4856cross\") {\n\t    data(\"N2xCB4856markers\")\n\t    \n\t    # riail marker conversion\n\t    mappos <- qtl::pull.map(crossobj, as.table = TRUE) %>%\n\t        dplyr::mutate(marker = rownames(.),\n\t                      cM = as.character(pos)) %>%\n\t        dplyr::select(-pos, -chr) %>%\n\t        dplyr::distinct(cM, .keep_all = T) %>%\n\t        dplyr::left_join(N2xCB4856markers) %>%\n\t        dplyr::mutate(marker = paste0(chr.roman, \"_\", position)) %>%\n\t        dplyr::select(marker, cM)\n\t    \n\t    # convert genetic pos to genomic pos\n\t    test <- scan2_summary %>%\n\t        # pos1f\n\t        dplyr::left_join(mappos, by = c(\"pos1f\" = \"cM\")) %>%\n\t        dplyr::mutate(pos1f = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker) %>%\n\t        # pos2f\n\t        dplyr::left_join(mappos, by = c(\"pos2f\" = \"cM\")) %>%\n\t        dplyr::mutate(pos2f = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker) %>%\n\t        # pos1a\n\t        dplyr::left_join(mappos, by = c(\"pos1a\" = \"cM\")) %>%\n\t        dplyr::mutate(pos1a = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker) %>%\n\t        # pos2a\n\t        dplyr::left_join(mappos, by = c(\"pos2a\" = \"cM\")) %>%\n\t        dplyr::mutate(pos2a = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker)\n\t} else {\n\t    # return scan2summary in cM instead of bp\n\t    test <- scan2_summary\n\t}\n\n\treadr::write_tsv(test, \"scan2summary.tsv\")\n\n\t\"\"\"\n\n\n}",
        "nb_lignes_process": 109,
        "string_script": "\"\"\"\n\t#!/usr/bin/env Rscript --vanilla\n\n\tlibrary(dplyr)\n\tlibrary(readr)\n\tlibrary(linkagemapping)\n\tlibrary(qtl)\n\n\t#insert cross data\n\tcrossobj <- get(linkagemapping::load_cross_obj(\"${params.cross}\"))\n\n\t# load scan2\n\tload(\"$scan2\")\n\n\t# load perms\n\tperms <- readr::read_tsv(\"$scantwothousand\")\n\n\t# summarize scantwo and add GWER thresholds defined by permutations\n\tscan2_summary <- summary(scan2) %>%\n\t    dplyr::mutate(fv1_thresh = quantile(perms\\$fv1, probs = 0.95),\n\t                  full_thresh = quantile(perms\\$full, probs = 0.95),\n\t                  add_thresh = quantile(perms\\$add, probs = 0.95),\n\t                  av1_thresh = quantile(perms\\$av1, probs = 0.95),\n\t                  int_thresh = quantile(perms\\$int, probs = 0.95)) %>%\n\t    dplyr::mutate(pos1f = as.character(pos1f),\n\t                  pos2f = as.character(pos2f),\n\t                  pos1a = as.character(pos1a),\n\t                  pos2a = as.character(pos2a))\n\n\t# how to get marker positions for both N2xCB cross objects\n\tif(\"${params.cross}\" == \"N2xCB4856cross_full\") {\n\t    # riail marker conversion\n\t    mappos <- qtl::pull.map(crossobj, as.table = TRUE) %>%\n\t        dplyr::mutate(marker = rownames(.),\n\t                      cM = as.character(pos)) %>%\n\t        dplyr::select(-pos, -chr) %>%\n\t        dplyr::distinct(cM, .keep_all = T) \n\t    \n\t    # convert genetic pos to genomic pos\n\t    test <- scan2_summary %>%\n\t        # pos1f\n\t        dplyr::left_join(mappos, by = c(\"pos1f\" = \"cM\")) %>%\n\t        dplyr::mutate(pos1f = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker) %>%\n\t        # pos2f\n\t        dplyr::left_join(mappos, by = c(\"pos2f\" = \"cM\")) %>%\n\t        dplyr::mutate(pos2f = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker) %>%\n\t        # pos1a\n\t        dplyr::left_join(mappos, by = c(\"pos1a\" = \"cM\")) %>%\n\t        dplyr::mutate(pos1a = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker) %>%\n\t        # pos2a\n\t        dplyr::left_join(mappos, by = c(\"pos2a\" = \"cM\")) %>%\n\t        dplyr::mutate(pos2a = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker)\n\t} else if(\"${params.cross}\" == \"N2xCB4856cross\") {\n\t    data(\"N2xCB4856markers\")\n\t    \n\t    # riail marker conversion\n\t    mappos <- qtl::pull.map(crossobj, as.table = TRUE) %>%\n\t        dplyr::mutate(marker = rownames(.),\n\t                      cM = as.character(pos)) %>%\n\t        dplyr::select(-pos, -chr) %>%\n\t        dplyr::distinct(cM, .keep_all = T) %>%\n\t        dplyr::left_join(N2xCB4856markers) %>%\n\t        dplyr::mutate(marker = paste0(chr.roman, \"_\", position)) %>%\n\t        dplyr::select(marker, cM)\n\t    \n\t    # convert genetic pos to genomic pos\n\t    test <- scan2_summary %>%\n\t        # pos1f\n\t        dplyr::left_join(mappos, by = c(\"pos1f\" = \"cM\")) %>%\n\t        dplyr::mutate(pos1f = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker) %>%\n\t        # pos2f\n\t        dplyr::left_join(mappos, by = c(\"pos2f\" = \"cM\")) %>%\n\t        dplyr::mutate(pos2f = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker) %>%\n\t        # pos1a\n\t        dplyr::left_join(mappos, by = c(\"pos1a\" = \"cM\")) %>%\n\t        dplyr::mutate(pos1a = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker) %>%\n\t        # pos2a\n\t        dplyr::left_join(mappos, by = c(\"pos2a\" = \"cM\")) %>%\n\t        dplyr::mutate(pos2a = as.numeric(stringr::str_split_fixed(marker, \"_\", 2)[,2])) %>%\n\t        dplyr::select(-marker)\n\t} else {\n\t    # return scan2summary in cM instead of bp\n\t    test <- scan2_summary\n\t}\n\n\treadr::write_tsv(test, \"scan2summary.tsv\")\n\n\t\"\"\"",
        "nb_lignes_script": 94,
        "language_script": "--vanilla",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "perms",
            "scan2_object"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AndersenLab__scan2-nf",
        "directive": [
            "publishDir params.out, mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    }
}
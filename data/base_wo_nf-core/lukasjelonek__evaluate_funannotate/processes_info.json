{
    "cleanup_proteins": {
        "name_process": "cleanup_proteins",
        "string_process": "\nprocess cleanup_proteins {\n  input:\n  path seq\n\n  output:\n  path \"${seq.simpleName}.c.faa\"\n\n  script:\n  \"\"\"\n  sed 's/[.*]\\$//' $seq > ${seq.simpleName}.c.faa\n  \"\"\"\n\n}",
        "nb_lignes_process": 12,
        "string_script": "  \"\"\"\n  sed 's/[.*]\\$//' $seq > ${seq.simpleName}.c.faa\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seq"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lukasjelonek__evaluate_funannotate",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "gunzip_contigs": {
        "name_process": "gunzip_contigs",
        "string_process": "\nprocess gunzip_contigs { \n\n  input:\n  path contigs\n\n  output:\n  path \"${contigs.baseName}\" \n\n  script:\n  \"\"\"\n  zcat $contigs > ${contigs.baseName}\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "  \"\"\"\n  zcat $contigs > ${contigs.baseName}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lukasjelonek__evaluate_funannotate",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "fix_ena_headers_for_trinity": {
        "name_process": "fix_ena_headers_for_trinity",
        "string_process": "\nprocess fix_ena_headers_for_trinity {\n  input:\n  path reads \n\n  output:\n  path \"${reads.simpleName}.corrected_headers.fastq.gz\" \n\n  script:\n  \"\"\"\n  zcat $reads | sed  -r 's#^(@.+)\\\\.[0-9]+ ([0-9]+)/([0-9]+)#\\\\1_\\\\2/\\\\3#' | pigz -c > ${reads.simpleName}.corrected_headers.fastq.gz\n  \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "  \"\"\"\n  zcat $reads | sed  -r 's#^(@.+)\\\\.[0-9]+ ([0-9]+)/([0-9]+)#\\\\1_\\\\2/\\\\3#' | pigz -c > ${reads.simpleName}.corrected_headers.fastq.gz\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lukasjelonek__evaluate_funannotate",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "split_single_fastq": {
        "name_process": "split_single_fastq",
        "string_process": "\nprocess split_single_fastq {\n\n  input:\n  path reads\n\n  output:\n  path \"${reads.simpleName}_*.fastq.gz\"\n\n  script:\n  \"\"\"\n  split_mixed_fastq.groovy -f $reads -p ${reads.simpleName} -r\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "  \"\"\"\n  split_mixed_fastq.groovy -f $reads -p ${reads.simpleName} -r\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lukasjelonek__evaluate_funannotate",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "clean_contigs": {
        "name_process": "clean_contigs",
        "string_process": "\nprocess clean_contigs {\n  \n                                                       \n\n  input:\n  path contigs \n\n  output:\n  path \"${contigs.simpleName}.cleaned.fa\" \n\n  script:\n  \"\"\"\n  funannotate clean -i $contigs --minlen ${params.contigs_minlen} -o ${contigs.simpleName}.cleaned.fa\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  funannotate clean -i $contigs --minlen ${params.contigs_minlen} -o ${contigs.simpleName}.cleaned.fa\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lukasjelonek__evaluate_funannotate",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "sort_contigs": {
        "name_process": "sort_contigs",
        "string_process": "\nprocess sort_contigs {\n                                                       \n\n  input:\n  path contigs \n\n  output:\n  path \"${contigs.simpleName}.sorted.fa\" \n\n  script:\n  \"\"\"\n  funannotate sort -i $contigs -b scaffold -o ${contigs.simpleName}.sorted.fa\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  funannotate sort -i $contigs -b scaffold -o ${contigs.simpleName}.sorted.fa\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lukasjelonek__evaluate_funannotate",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "mask_contigs": {
        "name_process": "mask_contigs",
        "string_process": "\nprocess mask_contigs {\n                                                       \n\n  input:\n  path contigs \n\n  output:\n  path \"${contigs.simpleName}.masked.fa\" \n\n  script:\n  \"\"\"\n  funannotate mask -i $contigs --cpus ${params.cpus} -o ${contigs.simpleName}.masked.fa\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  funannotate mask -i $contigs --cpus ${params.cpus} -o ${contigs.simpleName}.masked.fa\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lukasjelonek__evaluate_funannotate",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "train": {
        "name_process": "train",
        "string_process": "\nprocess train {\n                                                       \n\n  input:\n                                                                   \n  path contigs \n                                                                   \n                                                                         \n                                \n  path reads \n\n  output:\n  path \"fun/training\" \n\n  when:\n  reads.size() > 0\n\n  script:\n                          \n  all_reads = reads.groupBy{x -> getFilePrefix(x)}\n  se_reads = all_reads.findAll{k,v -> v.size() == 1}.collect{k,v -> v}\n  pe_reads = all_reads.findAll{k,v -> v.size() == 2}.collect{k,v -> v}\n\n  pe1_reads = pe_reads.collect{x -> x[0]}\n  pe2_reads = pe_reads.collect{x -> x[1]}\n\n  read_params = '' \n  if (se_reads) read_params += \"--single ${se_reads.join(' ')}\"\n  if (pe_reads) read_params += \"--left ${pe1_reads.join(' ')} --right ${pe2_reads.join(' ')}\"\n  \"\"\"\n  funannotate train -i $contigs -o fun $read_params --jaccard_clip --species  '${params.species}'  --cpus ${params.cpus} \n  \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "  all_reads = reads.groupBy{x -> getFilePrefix(x)}\n  se_reads = all_reads.findAll{k,v -> v.size() == 1}.collect{k,v -> v}\n  pe_reads = all_reads.findAll{k,v -> v.size() == 2}.collect{k,v -> v}\n\n  pe1_reads = pe_reads.collect{x -> x[0]}\n  pe2_reads = pe_reads.collect{x -> x[1]}\n\n  read_params = '' \n  if (se_reads) read_params += \"--single ${se_reads.join(' ')}\"\n  if (pe_reads) read_params += \"--left ${pe1_reads.join(' ')} --right ${pe2_reads.join(' ')}\"\n  \"\"\"\n  funannotate train -i $contigs -o fun $read_params --jaccard_clip --species  '${params.species}'  --cpus ${params.cpus} \n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lukasjelonek__evaluate_funannotate",
        "directive": [],
        "when": "reads.size() > 0",
        "stub": ""
    },
    "predict": {
        "name_process": "predict",
        "string_process": "\nprocess predict {\n                                                       \n\n  input:\n  path contigs \n  path \"fun/training\" \n  path proteins\n\n  output:\n  path \"fun/{training,predict_misc,predict_results}\" includeInputs true\n\n  script:\n  options = \"--protein_evidence \"\n  if (proteins) {\n    options += proteins.join(\" \")\n  }\n  options += ' $FUNANNOTATE_DB/uniprot_sprot.fasta'\n  \"\"\"\n  echo \"tes\"\n  funannotate predict -i $contigs -o fun --species \"${params.species}\" ${options} --cpus ${params.cpus} \n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  options = \"--protein_evidence \"\n  if (proteins) {\n    options += proteins.join(\" \")\n  }\n  options += ' $FUNANNOTATE_DB/uniprot_sprot.fasta'\n  \"\"\"\n  echo \"tes\"\n  funannotate predict -i $contigs -o fun --species \"${params.species}\" ${options} --cpus ${params.cpus} \n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs",
            "proteins"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lukasjelonek__evaluate_funannotate",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "annotate_utrs": {
        "name_process": "annotate_utrs",
        "string_process": "\nprocess annotate_utrs {\n                                                       \n\n  input:\n  path \"fun/\" \n\n  output:\n  path \"fun/{training,predict_misc,predict_results,update_misc,update_results}\" includeInputs true\n\n  when:\n  file(\"fun/training\").exists()\n\n  script:\n  \"\"\"\n  funannotate update -i fun --cpus ${params.cpus} \n  \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  funannotate update -i fun --cpus ${params.cpus} \n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lukasjelonek__evaluate_funannotate",
        "directive": [],
        "when": "file(\"fun/training\").exists()",
        "stub": ""
    },
    "annotate_function": {
        "name_process": "annotate_function",
        "string_process": "\nprocess annotate_function {\n                                                       \n\n  publishDir params.resultdir, mode: 'copy', saveAs: {x-> x.replaceAll(\"fun/annotate_results/\",\"\")}\n  input:\n  path \"fun/\" \n\n  output:\n  path \"fun/annotate_results/*\"\n\n  script:\n  \"\"\"\n  funannotate annotate -i fun --cpus ${params.cpus} \n  \"\"\"\n\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  funannotate annotate -i fun --cpus ${params.cpus} \n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lukasjelonek__evaluate_funannotate",
        "directive": [
            "publishDir params.resultdir, mode: 'copy', saveAs: {x-> x.replaceAll(\"fun/annotate_results/\",\"\")}"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "GOALIGN_REPLACE": {
        "name_process": "GOALIGN_REPLACE",
        "string_process": "\nprocess GOALIGN_REPLACE {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::goalign=0.3.2\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/goalign:0.3.2--h375a9b1_0\"\n    } else {\n        container \"quay.io/biocontainers/goalign:0.3.2--h375a9b1_0\"\n    }\n\n    input:\n    tuple val(meta), path(aln)\n\n    output:\n    tuple val(meta), path(\"*_replace.aln\"), emit: aln\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    goalign \\\\\n        --auto-detect \\\\\n        replace \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -o ${prefix}_replace.aln \\\\\n        -i $aln\n\n    echo \\$(goalign version 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    goalign \\\\\n        --auto-detect \\\\\n        replace \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -o ${prefix}_replace.aln \\\\\n        -i $aln\n\n    echo \\$(goalign version 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "goalign"
        ],
        "tools_url": [
            "https://bio.tools/goalign"
        ],
        "tools_dico": [
            {
                "name": "goalign",
                "uri": "https://bio.tools/goalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools to manipulate multiple alignments.",
                "homepage": "https://github.com/fredericlemoine/goalign"
            }
        ],
        "inputs": [
            "meta",
            "aln"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::goalign=0.3.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/goalign:0.3.2--h375a9b1_0\" } else { container \"quay.io/biocontainers/goalign:0.3.2--h375a9b1_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GOTREE_COLLAPSE_LENGTH": {
        "name_process": "GOTREE_COLLAPSE_LENGTH",
        "string_process": "\nprocess GOTREE_COLLAPSE_LENGTH {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::gotree=0.4.0\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/gotree:0.4.0--h375a9b1_0\"\n    } else {\n        container \"quay.io/biocontainers/gotree:0.4.0--h375a9b1_0\"\n    }\n\n    input:\n    tuple val(meta), path(nwk)\n\n    output:\n    tuple val(meta), path(\"*_collapse_length.nwk\"), emit: tree\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gotree \\\\\n        collapse \\\\\n        length \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -i $nwk \\\\\n        -o ${prefix}_collapse_length.nwk\n\n    echo \\$(gotree version 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gotree \\\\\n        collapse \\\\\n        length \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -i $nwk \\\\\n        -o ${prefix}_collapse_length.nwk\n\n    echo \\$(gotree version 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "collapsereads"
        ],
        "tools_url": [
            "https://bio.tools/collapsereads"
        ],
        "tools_dico": [
            {
                "name": "collapsereads",
                "uri": "https://bio.tools/collapsereads",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3002",
                                "term": "Annotation track"
                            },
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Merges two reads if they have exactly the same genomic coordinates.",
                "homepage": "https://urgi.versailles.inra.fr/Tools/REPET"
            }
        ],
        "inputs": [
            "meta",
            "nwk"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::gotree=0.4.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/gotree:0.4.0--h375a9b1_0\" } else { container \"quay.io/biocontainers/gotree:0.4.0--h375a9b1_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GOTREE_RESOLVE": {
        "name_process": "GOTREE_RESOLVE",
        "string_process": "\nprocess GOTREE_RESOLVE {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::gotree=0.4.0\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/gotree:0.4.0--h375a9b1_0\"\n    } else {\n        container \"quay.io/biocontainers/gotree:0.4.0--h375a9b1_0\"\n    }\n\n    input:\n    tuple val(meta), path(nwk)\n\n    output:\n    tuple val(meta), path(\"*_resolve.nwk\"), emit: tree\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gotree \\\\\n        resolve \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -i $nwk \\\\\n        -o ${prefix}_resolve.nwk \\\\\n\n    echo \\$(goalign version 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gotree \\\\\n        resolve \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -i $nwk \\\\\n        -o ${prefix}_resolve.nwk \\\\\n\n    echo \\$(goalign version 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "nwk"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::gotree=0.4.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/gotree:0.4.0--h375a9b1_0\" } else { container \"quay.io/biocontainers/gotree:0.4.0--h375a9b1_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTTREE": {
        "name_process": "FASTTREE",
        "string_process": "\nprocess FASTTREE {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::fasttree=2.1.10\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/fasttree:2.1.10--h516909a_4\"\n    } else {\n        container \"quay.io/biocontainers/fasttree:2.1.10--h516909a_4\"\n    }\n\n    input:\n    tuple val(meta), path(aln)\n\n    output:\n    tuple val(meta), path(\"*.nwk\"), emit: tree\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    OMP_NUM_THREADS=$task.cpus \\\\\n        fasttree \\\\\n        $options.args \\\\\n        -out ${prefix}.nwk \\\\\n        -nt $aln\n\n    (fasttree 2>&1 | grep version | sed -e 's/.*version //g' -e 's/ Double.*\\$//g'  > ${prefix}.version.txt) || true\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    OMP_NUM_THREADS=$task.cpus \\\\\n        fasttree \\\\\n        $options.args \\\\\n        -out ${prefix}.nwk \\\\\n        -nt $aln\n\n    (fasttree 2>&1 | grep version | sed -e 's/.*version //g' -e 's/ Double.*\\$//g'  > ${prefix}.version.txt) || true\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "FastTree"
        ],
        "tools_url": [
            "https://bio.tools/fasttree"
        ],
        "tools_dico": [
            {
                "name": "FastTree",
                "uri": "https://bio.tools/fasttree",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic inference (from molecular sequences)"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree construction (from molecular sequences)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree generation (from molecular sequences)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Infers approximately-maximum-likelihood phylogenetic trees from alignments of nucleotide or protein sequences.",
                "homepage": "http://www.microbesonline.org/fasttree/"
            }
        ],
        "inputs": [
            "meta",
            "aln"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::fasttree=2.1.10\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/fasttree:2.1.10--h516909a_4\" } else { container \"quay.io/biocontainers/fasttree:2.1.10--h516909a_4\" }"
        ],
        "when": "",
        "stub": ""
    },
    "NWUTILS_REROOT": {
        "name_process": "NWUTILS_REROOT",
        "string_process": "\nprocess NWUTILS_REROOT {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::newick_utils=1.6\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/newick_utils:1.6--h516909a_3\"\n    } else {\n        container \"quay.io/biocontainers/newick_utils:1.6--h516909a_3\"\n    }\n\n    input:\n    tuple val(meta), path(nwk)\n\n    output:\n    tuple val(meta), path(\"*_reroot.nwk\"), emit: tree\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def outgroup = params.outgroup\n    \"\"\"\n    nw_reroot \\\\\n        $nwk \\\\\n        $outgroup > ${prefix}_reroot.nwk\n\n    echo \"1.6\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def outgroup = params.outgroup\n    \"\"\"\n    nw_reroot \\\\\n        $nwk \\\\\n        $outgroup > ${prefix}_reroot.nwk\n\n    echo \"1.6\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "nwk"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::newick_utils=1.6\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/newick_utils:1.6--h516909a_3\" } else { container \"quay.io/biocontainers/newick_utils:1.6--h516909a_3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GOALIGN_DEDUP": {
        "name_process": "GOALIGN_DEDUP",
        "string_process": "\nprocess GOALIGN_DEDUP {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::goalign=0.3.2\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/goalign:0.3.2--h375a9b1_0\"\n    } else {\n        container \"quay.io/biocontainers/goalign:0.3.2--h375a9b1_0\"\n    }\n\n    input:\n    tuple val(meta), path(aln)\n\n    output:\n    tuple val(meta), path(\"*_dedup.aln\"), emit: aln\n    tuple val(meta), path(\"*.dedup\"), emit: dedup\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    goalign \\\\\n        --auto-detect \\\\\n        dedup \\\\\n        $options.args \\\\\n        -l ${prefix}.dedup \\\\\n        -t $task.cpus \\\\\n        -o ${prefix}_dedup.aln \\\\\n        -i $aln\n\n    echo \\$(goalign version 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    goalign \\\\\n        --auto-detect \\\\\n        dedup \\\\\n        $options.args \\\\\n        -l ${prefix}.dedup \\\\\n        -t $task.cpus \\\\\n        -o ${prefix}_dedup.aln \\\\\n        -i $aln\n\n    echo \\$(goalign version 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "goalign"
        ],
        "tools_url": [
            "https://bio.tools/goalign"
        ],
        "tools_dico": [
            {
                "name": "goalign",
                "uri": "https://bio.tools/goalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools to manipulate multiple alignments.",
                "homepage": "https://github.com/fredericlemoine/goalign"
            }
        ],
        "inputs": [
            "meta",
            "aln"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::goalign=0.3.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/goalign:0.3.2--h375a9b1_0\" } else { container \"quay.io/biocontainers/goalign:0.3.2--h375a9b1_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode,\n        saveAs: { filename ->\n                      if (filename.indexOf(\".csv\") > 0) filename\n                      else null\n                }\n\n    output:\n    file 'software_versions_mqc.yaml' into ch_software_versions_yaml\n    file \"software_versions.csv\"\n\n    script:\n                                                                     \n    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    fastqc --version > v_fastqc.txt\n    multiqc --version > v_multiqc.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    fastqc --version > v_fastqc.txt\n    multiqc --version > v_multiqc.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "FastQC",
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc",
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            },
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ch_software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode , saveAs: { filename -> if (filename.indexOf(\".csv\") > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    },
    "GOTREE_REPOPULATE": {
        "name_process": "GOTREE_REPOPULATE",
        "string_process": "\nprocess GOTREE_REPOPULATE {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::gotree=0.4.0\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/gotree:0.4.0--h375a9b1_0\"\n    } else {\n        container \"quay.io/biocontainers/gotree:0.4.0--h375a9b1_0\"\n    }\n\n    input:\n    tuple val(meta), path(nwk)\n    tuple val(meta), path(id_groups)\n\n    output:\n    tuple val(meta), path(\"*_repopulate.nwk\"), emit: tree\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gotree \\\\\n        repopulate \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -g $id_groups \\\\\n        -i $nwk \\\\\n        -o ${prefix}_repopulate.nwk \\\\\n\n    echo \\$(goalign version 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gotree \\\\\n        repopulate \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -g $id_groups \\\\\n        -i $nwk \\\\\n        -o ${prefix}_repopulate.nwk \\\\\n\n    echo \\$(goalign version 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "nwk",
            "meta",
            "id_groups"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::gotree=0.4.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/gotree:0.4.0--h375a9b1_0\" } else { container \"quay.io/biocontainers/gotree:0.4.0--h375a9b1_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CLIPKIT": {
        "name_process": "CLIPKIT",
        "string_process": "\nprocess CLIPKIT {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::clipkit=1.1.1\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/clipkit:1.1.1--py_0\"\n    } else {\n        container \"quay.io/biocontainers/clipkit:1.1.1--py_0\"\n    }\n\n    input:\n    tuple val(meta), path(aln)\n\n    output:\n    tuple val(meta), path(\"*_filtered.aln\"), emit: aln\n    tuple val(meta), path(\"*.log\"), optional: true, emit: log\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def mode = params.mode ? \"-m $params.mode\" : \"-m gappy\"\n    def log = params.clipkit_log ? \"-l\" : \"\"\n    \"\"\"\n    clipkit \\\\\n        $aln \\\\\n        $options.args \\\\\n        ${mode} \\\\\n        ${log} \\\\\n        -o ${prefix}_filtered.aln\n\n    clipkit --version | sed 's/clipkit //g' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def mode = params.mode ? \"-m $params.mode\" : \"-m gappy\"\n    def log = params.clipkit_log ? \"-l\" : \"\"\n    \"\"\"\n    clipkit \\\\\n        $aln \\\\\n        $options.args \\\\\n        ${mode} \\\\\n        ${log} \\\\\n        -o ${prefix}_filtered.aln\n\n    clipkit --version | sed 's/clipkit //g' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "aln"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::clipkit=1.1.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/clipkit:1.1.1--py_0\" } else { container \"quay.io/biocontainers/clipkit:1.1.1--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GOALIGN_COMPRESS": {
        "name_process": "GOALIGN_COMPRESS",
        "string_process": "\nprocess GOALIGN_COMPRESS {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::goalign=0.3.2\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/goalign:0.3.2--h375a9b1_0\"\n    } else {\n        container \"quay.io/biocontainers/goalign:0.3.2--h375a9b1_0\"\n    }\n\n    input:\n    tuple val(meta), path(aln)\n\n    output:\n    tuple val(meta), path(\"*_compress.aln\"), emit: aln\n    tuple val(meta), path(\"*.weights\"), emit: weights\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    goalign \\\\\n        --auto-detect \\\\\n        compress \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -o ${prefix}_compress.aln \\\\\n        --weight-out ${prefix}.weights \\\\\n        -i $aln\n\n    echo \\$(goalign version 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    goalign \\\\\n        --auto-detect \\\\\n        compress \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -o ${prefix}_compress.aln \\\\\n        --weight-out ${prefix}.weights \\\\\n        -i $aln\n\n    echo \\$(goalign version 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "goalign",
            "dbxcompress"
        ],
        "tools_url": [
            "https://bio.tools/goalign",
            "https://bio.tools/dbxcompress"
        ],
        "tools_dico": [
            {
                "name": "goalign",
                "uri": "https://bio.tools/goalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools to manipulate multiple alignments.",
                "homepage": "https://github.com/fredericlemoine/goalign"
            },
            {
                "name": "dbxcompress",
                "uri": "https://bio.tools/dbxcompress",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Compress an uncompressed dbx index.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/dbxcompress.html"
            }
        ],
        "inputs": [
            "meta",
            "aln"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::goalign=0.3.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/goalign:0.3.2--h375a9b1_0\" } else { container \"quay.io/biocontainers/goalign:0.3.2--h375a9b1_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GOALIGN_CLEAN_SEQS": {
        "name_process": "GOALIGN_CLEAN_SEQS",
        "string_process": "\nprocess GOALIGN_CLEAN_SEQS {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::goalign=0.3.2\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/goalign:0.3.2--h375a9b1_0\"\n    } else {\n        container \"quay.io/biocontainers/goalign:0.3.2--h375a9b1_0\"\n    }\n\n    input:\n    tuple val(meta), path(aln)\n\n    output:\n    tuple val(meta), path(\"*_clean.aln\"), emit: aln\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    goalign \\\\\n        --auto-detect \\\\\n        clean \\\\\n        seqs \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -o ${prefix}_clean.aln \\\\\n        -i $aln\n\n    echo \\$(goalign version 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    goalign \\\\\n        --auto-detect \\\\\n        clean \\\\\n        seqs \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -o ${prefix}_clean.aln \\\\\n        -i $aln\n\n    echo \\$(goalign version 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "goalign",
            "CLEAN",
            "MMseqs"
        ],
        "tools_url": [
            "https://bio.tools/goalign",
            "https://bio.tools/clean",
            "https://bio.tools/mmseqs"
        ],
        "tools_dico": [
            {
                "name": "goalign",
                "uri": "https://bio.tools/goalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools to manipulate multiple alignments.",
                "homepage": "https://github.com/fredericlemoine/goalign"
            },
            {
                "name": "CLEAN",
                "uri": "https://bio.tools/clean",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3432",
                                    "term": "Clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "CLEAN is a computational framework for analytically and visually integrating knowledge-based functional categories with the cluster analysis of genomics data. The framework is based on the simple, conceptually appealing, and biologically interpretable gene-specific functional coherence score (CLEAN score). The score is derived by correlating the clustering structure as a whole with functional categories of interest.",
                "homepage": "http://eh3.uc.edu/clean/"
            },
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            }
        ],
        "inputs": [
            "meta",
            "aln"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::goalign=0.3.2\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/goalign:0.3.2--h375a9b1_0\" } else { container \"quay.io/biocontainers/goalign:0.3.2--h375a9b1_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GOTREE_BRLEN_ROUND": {
        "name_process": "GOTREE_BRLEN_ROUND",
        "string_process": "\nprocess GOTREE_BRLEN_ROUND {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::gotree=0.4.0\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/gotree:0.4.0--h375a9b1_0\"\n    } else {\n        container \"quay.io/biocontainers/gotree:0.4.0--h375a9b1_0\"\n    }\n\n    input:\n    tuple val(meta), path(nwk)\n\n    output:\n    tuple val(meta), path(\"*_brlen_round.nwk\"), emit: tree\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gotree \\\\\n        brlen \\\\\n        round \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -i $nwk \\\\\n        -o ${prefix}_brlen_round.nwk\n\n    echo \\$(gotree version 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gotree \\\\\n        brlen \\\\\n        round \\\\\n        $options.args \\\\\n        -t $task.cpus \\\\\n        -i $nwk \\\\\n        -o ${prefix}_brlen_round.nwk\n\n    echo \\$(gotree version 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "nwk"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::gotree=0.4.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/gotree:0.4.0--h375a9b1_0\" } else { container \"quay.io/biocontainers/gotree:0.4.0--h375a9b1_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "NWUTILS_ORDER": {
        "name_process": "NWUTILS_ORDER",
        "string_process": "\nprocess NWUTILS_ORDER {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::newick_utils=1.6\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/newick_utils:1.6--h516909a_3\"\n    } else {\n        container \"quay.io/biocontainers/newick_utils:1.6--h516909a_3\"\n    }\n\n    input:\n    tuple val(meta), path(nwk)\n\n    output:\n    tuple val(meta), path(\"*_order.nwk\"), emit: tree\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    nw_order \\\\\n        $nwk > ${prefix}_order.nwk\n\n    echo \"1.6\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    nw_order \\\\\n        $nwk > ${prefix}_order.nwk\n\n    echo \"1.6\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "nwk"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::newick_utils=1.6\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/newick_utils:1.6--h516909a_3\" } else { container \"quay.io/biocontainers/newick_utils:1.6--h516909a_3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RAXMLNG_EVALUATE": {
        "name_process": "RAXMLNG_EVALUATE",
        "string_process": "\nprocess RAXMLNG_EVALUATE {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }\n\n    conda (params.enable_conda ? \"bioconda::raxml-ng=1.0.1\" : null)\n\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/raxml-ng:1.0.1--h7447c1b_0\"\n    } else {\n        container \"quay.io/biocontainers/raxml-ng:1.0.1--h7447c1b_0\"\n    }\n\n    input:\n    tuple val(meta), path(nwk)\n    tuple val(meta), path(aln)\n    tuple val(meta), path(weights)\n\n    output:\n    tuple val(meta), path(\"*.raxml.bestTree\"), emit: tree\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                                        \n    def force    = params.force ? \"${params.force}\" : \"--force perf_threads\"\n                              \n    def model    = params.subst_model ? \"--model ${params.subst_model}\" : \"--model GTR+G4\"\n    \"\"\"\n    raxml-ng \\\\\n    --evaluate \\\\\n    $options.args \\\\\n    --threads $task.cpus \\\\\n    --prefix ${prefix} \\\\\n    $force \\\\\n    $model \\\\\n    --tree $nwk \\\\\n    --msa $aln \\\\\n    --site-weights $weights\n\n    raxml-ng --version | grep release | sed -e 's/^.*v. //g' -e 's/ released.*\\$//g' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                                        \n    def force    = params.force ? \"${params.force}\" : \"--force perf_threads\"\n                              \n    def model    = params.subst_model ? \"--model ${params.subst_model}\" : \"--model GTR+G4\"\n    \"\"\"\n    raxml-ng \\\\\n    --evaluate \\\\\n    $options.args \\\\\n    --threads $task.cpus \\\\\n    --prefix ${prefix} \\\\\n    $force \\\\\n    $model \\\\\n    --tree $nwk \\\\\n    --msa $aln \\\\\n    --site-weights $weights\n\n    raxml-ng --version | grep release | sed -e 's/^.*v. //g' -e 's/ released.*\\$//g' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "RAxML-NG"
        ],
        "tools_url": [
            "https://bio.tools/RAxML-NG"
        ],
        "tools_dico": [
            {
                "name": "RAxML-NG",
                "uri": "https://bio.tools/RAxML-NG",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3810",
                            "term": "Agricultural science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0552",
                                    "term": "Phylogenetic tree bootstrapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Phylogenetic tree inference tool which uses maximum-likelihood (ML) optimality criterion.",
                "homepage": "https://raxml-ng.vital-it.ch/"
            }
        ],
        "inputs": [
            "meta",
            "nwk",
            "meta",
            "aln",
            "meta",
            "weights"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MDU-PHL__kovid-trees-nf",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:meta.id) }",
            "conda (params.enable_conda ? \"bioconda::raxml-ng=1.0.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/raxml-ng:1.0.1--h7447c1b_0\" } else { container \"quay.io/biocontainers/raxml-ng:1.0.1--h7447c1b_0\" }"
        ],
        "when": "",
        "stub": ""
    }
}
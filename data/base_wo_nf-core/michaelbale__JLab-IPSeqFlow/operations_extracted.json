{
    "OPERATION_1": {
        "string": "Channel\n\t\t  .fromPath(params.input)\n\t\t  .map { path -> tuple(getSampleID(path.getName()), path)}\n\t\t  .groupTuple()\n\t\t  .set { inFq_ch }",
        "origin": [
            [
                "params.input",
                "A"
            ]
        ],
        "gives": [
            [
                "inFq_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n\t  .fromFilePairs(params.input, flat: true)\n\t  .map { prefix, r1, r2 -> tuple(getSampleID(prefix), r1, r2) }\n\t  .groupTuple()\n\t  .set {inFq_ch}",
        "origin": [
            [
                "params.input, flat: true",
                "A"
            ]
        ],
        "gives": [
            [
                "inFq_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n\t\t.fromPath(params.input)\n\t\t.map { path -> tuple(getSampleID(path.getName()), path) }\n\t\t.set {reads_ch}",
        "origin": [
            [
                "params.input",
                "A"
            ]
        ],
        "gives": [
            [
                "reads_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n\t\t  .fromFilePairs(params.input)\n\t\t  .set {reads_ch}",
        "origin": [
            [
                "params.input",
                "A"
            ]
        ],
        "gives": [
            [
                "reads_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n      .fromPath(params.addBEDFilesProfile)\n\t  .splitCsv(header:false)\n\t  .map{ row -> tuple(row[0], file(row[1])) }\n\t  .set { extraBEDs_ch }",
        "origin": [
            [
                "params.addBEDFilesProfile",
                "A"
            ]
        ],
        "gives": [
            [
                "extraBEDs_ch",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n      .fromPath(params.addBEDFilesRefPoint)\n\t  .splitCsv(header:false)\n\t  .map{ row -> tuple(row[0], file(row[1]), row[2], row[3]) }\n\t  .set { extraBEDs2_ch }",
        "origin": [
            [
                "params.addBEDFilesRefPoint",
                "A"
            ]
        ],
        "gives": [
            [
                "extraBEDs2_ch",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "BEFPDF_ch = names_ch.toSortedList()",
        "origin": [
            [
                "names_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "BEFPDF_ch",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "sortedNamedBam = forBEPImage_ch.toSortedList()",
        "origin": [
            [
                "forBEPImage_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "sortedNamedBam",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "extraBEDs_ch\n\t  .combine(bigwig2_ch)\n\t  .set { totalExtraBed_ch }",
        "origin": [
            [
                "extraBEDs_ch",
                "P"
            ],
            [
                "bigwig2_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "totalExtraBed_ch",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "addBEDMatTupleGlobal_ch\n      .groupTuple()\n      .set { mixedExtraBEDsGT_ch }",
        "origin": [
            [
                "addBEDMatTupleGlobal_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "mixedExtraBEDsGT_ch",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "extraBEDs2_ch\n\t  .combine(bigwig3_ch)\n\t  .set { totalExtraBed2_ch }",
        "origin": [
            [
                "extraBEDs2_ch",
                "P"
            ],
            [
                "bigwig3_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "totalExtraBed2_ch",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "addBEDMatTupleGlobal2_ch\n      .groupTuple()\n      .set { mixedExtraBEDsGT2_ch }",
        "origin": [
            [
                "addBEDMatTupleGlobal2_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "mixedExtraBEDsGT2_ch",
                "P"
            ]
        ]
    }
}
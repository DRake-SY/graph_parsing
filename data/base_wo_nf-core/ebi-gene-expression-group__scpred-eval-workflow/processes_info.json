{
    "read_training_data": {
        "name_process": "read_training_data",
        "string_process": "\nprocess read_training_data{\n  conda \"${baseDir}/envs/dropletutils.yaml\"\n\n  errorStrategy { task.exitStatus == 130 || task.exitStatus == 137  ? 'retry' : 'finish' }   \n  maxRetries 10\n  memory { 16.GB * task.attempt }\n\n  input: \n    file(training_10X_data) from TRAINING_DATA\n    file(training_metadata) from  TRAINING_METADATA\n\n  output:\n    file(\"training_sce.rds\") into TRAINING_SCE\n\n  \"\"\"\n  dropletutils-read-10x-counts.R\\\n            --samples ${training_10X_data}\\\n            --col-names ${params.col_names}\\\n            --metadata-files ${training_metadata}\\\n            --cell-id-column ${params.cell_id_col_name}\\\n            --output-object-file training_sce.rds\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n  dropletutils-read-10x-counts.R\\\n            --samples ${training_10X_data}\\\n            --col-names ${params.col_names}\\\n            --metadata-files ${training_metadata}\\\n            --cell-id-column ${params.cell_id_col_name}\\\n            --output-object-file training_sce.rds\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "TRAINING_DATA",
            "TRAINING_METADATA"
        ],
        "nb_inputs": 2,
        "outputs": [
            "TRAINING_SCE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "conda \"${baseDir}/envs/dropletutils.yaml\"",
            "errorStrategy { task.exitStatus == 130 || task.exitStatus == 137 ? 'retry' : 'finish' }",
            "maxRetries 10",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "eval_train_test_split": {
        "name_process": "eval_train_test_split",
        "string_process": "\nprocess eval_train_test_split{\n  conda \"${baseDir}/envs/scpred.yaml\"\n\n  errorStrategy { task.exitStatus == 130 || task.exitStatus == 137  ? 'retry' : 'finish' }   \n  maxRetries 10\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(training_sce) from TRAIN_TEST_SPLIT.first()\n\n  output:\n    file(\"training_matrixd.rds\") into EVAL_TRAINING_MATRIX\n    file(\"test_matrix.rds\") into EVAL_TEST_MATRIX\n    file(\"training_labels.txt\") into EVAL_TRAINING_LABELS\n    file(\"test_labels.txt\") into EVAL_TEST_LABELS\n\n  \"\"\"\n  scpred_train_test_split.R\\\n            --input-sce-object ${training_sce}\\\n            --normalised-counts-slot ${params.normalised_counts_slot}\\\n            --training-matrix training_matrix.rds\\\n            --test-matrix test_matrix.rds\\\n            --training-labels training_labels.txt\\\n            --test-labels test_labels.txt\\\n            --cell-types-column ${params.cell_types_col_name}\\\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n  scpred_train_test_split.R\\\n            --input-sce-object ${training_sce}\\\n            --normalised-counts-slot ${params.normalised_counts_slot}\\\n            --training-matrix training_matrix.rds\\\n            --test-matrix test_matrix.rds\\\n            --training-labels training_labels.txt\\\n            --test-labels test_labels.txt\\\n            --cell-types-column ${params.cell_types_col_name}\\\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "TRAIN_TEST_SPLIT"
        ],
        "nb_inputs": 1,
        "outputs": [
            "EVAL_TRAINING_MATRIX",
            "EVAL_TEST_MATRIX",
            "EVAL_TRAINING_LABELS",
            "EVAL_TEST_LABELS"
        ],
        "nb_outputs": 4,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "conda \"${baseDir}/envs/scpred.yaml\"",
            "errorStrategy { task.exitStatus == 130 || task.exitStatus == 137 ? 'retry' : 'finish' }",
            "maxRetries 10",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "eval_eigen_decompose": {
        "name_process": "eval_eigen_decompose",
        "string_process": "\nprocess eval_eigen_decompose{\n  conda \"${baseDir}/envs/scpred.yaml\"\n\n  errorStrategy { task.exitStatus == 130 || task.exitStatus == 137  ? 'retry' : 'finish' }   \n  maxRetries 10\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(training_matrix) from EVAL_TRAINING_MATRIX\n    file(training_labels) from EVAL_TRAINING_LABELS\n\n  output:\n    file(\"scpred_training_object.rds\") into SCPRED_TRAINING_OBJECT \n\n  \"\"\"\n  scpred_eigen_decomp.R\\\n            --training-matrix ${training_matrix}\\\n            --log-transform ${params.log_transform}\\\n            --training-labels ${training_labels}\\\n            --output-path scpred_training_object.rds \n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n  scpred_eigen_decomp.R\\\n            --training-matrix ${training_matrix}\\\n            --log-transform ${params.log_transform}\\\n            --training-labels ${training_labels}\\\n            --output-path scpred_training_object.rds \n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "EVAL_TRAINING_MATRIX",
            "EVAL_TRAINING_LABELS"
        ],
        "nb_inputs": 2,
        "outputs": [
            "SCPRED_TRAINING_OBJECT"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "conda \"${baseDir}/envs/scpred.yaml\"",
            "errorStrategy { task.exitStatus == 130 || task.exitStatus == 137 ? 'retry' : 'finish' }",
            "maxRetries 10",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "eval_get_features": {
        "name_process": "eval_get_features",
        "string_process": "\nprocess eval_get_features{\n  conda \"${baseDir}/envs/scpred.yaml\"\n\n  errorStrategy { task.attempt < 5  ? 'retry' : 'finish' }   \n  maxRetries 5\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(scpred_training_object) from SCPRED_TRAINING_OBJECT\n\n  output:\n    file(\"scpred_training_features.rds\") into SCPRED_TRAINING_FEATURES\n\n  \"\"\"\n  scpred_get_feature_space.R\\\n          --input-object ${scpred_training_object}\\\n          --prediction-column ${params.cell_types_col_name}\\\n          --output-path scpred_training_features.rds\\\n          --eigenvalue-plot-path ${params.eigenvalue_plot_path}\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n  scpred_get_feature_space.R\\\n          --input-object ${scpred_training_object}\\\n          --prediction-column ${params.cell_types_col_name}\\\n          --output-path scpred_training_features.rds\\\n          --eigenvalue-plot-path ${params.eigenvalue_plot_path}\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "SCPRED_TRAINING_OBJECT"
        ],
        "nb_inputs": 1,
        "outputs": [
            "SCPRED_TRAINING_FEATURES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "conda \"${baseDir}/envs/scpred.yaml\"",
            "errorStrategy { task.attempt < 5 ? 'retry' : 'finish' }",
            "maxRetries 5",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "eval_train_model": {
        "name_process": "eval_train_model",
        "string_process": "\nprocess eval_train_model{\n  conda \"${baseDir}/envs/scpred.yaml\"\n\n  errorStrategy { task.attempt < 5  ? 'retry' : 'finish' }   \n  maxRetries 5\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(scpred_training_features) from SCPRED_TRAINING_FEATURES\n\n  output:\n    file(\"eval_trained_model.rds\") into EVAL_TRAINED_MODEL\n\n  \"\"\"\n  scpred_train_model.R\\\n          --input-object ${scpred_training_features}\\\n          --model ${params.model}\\\n          --output-path eval_trained_model.rds\\\n          --train-probs-plot ${params.train_probs_plot_path}\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n  scpred_train_model.R\\\n          --input-object ${scpred_training_features}\\\n          --model ${params.model}\\\n          --output-path eval_trained_model.rds\\\n          --train-probs-plot ${params.train_probs_plot_path}\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "SCPRED_TRAINING_FEATURES"
        ],
        "nb_inputs": 1,
        "outputs": [
            "EVAL_TRAINED_MODEL"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "conda \"${baseDir}/envs/scpred.yaml\"",
            "errorStrategy { task.attempt < 5 ? 'retry' : 'finish' }",
            "maxRetries 5",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "eval_predict_labels": {
        "name_process": "eval_predict_labels",
        "string_process": "\nprocess eval_predict_labels{\n  publishDir \"${baseDir}/data/evaluation_outputs\", mode: 'copy'\n  conda \"${baseDir}/envs/scpred.yaml\"\n\n  errorStrategy { task.attempt < 5  ? 'retry' : 'finish' }   \n  maxRetries 5\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(eval_trained_model) from EVAL_TRAINED_MODEL\n    file(test_matrix) from EVAL_TEST_MATRIX\n    file(test_labels) from EVAL_TEST_LABELS\n\n  \"\"\"\n  scpred_predict.R\\\n          --input-object ${eval_trained_model}\\\n          --pred-data ${test_matrix}\\\n          --test-labels ${test_labels}\\\n          --cell-types-column ${params.cell_types_col_name}\\\n          --output-path ${params.model_predictions_path}\\\n          --plot-path ${params.prediction_probs_path}\\\n          --confusion-table ${params.confusion_table_path}\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n  scpred_predict.R\\\n          --input-object ${eval_trained_model}\\\n          --pred-data ${test_matrix}\\\n          --test-labels ${test_labels}\\\n          --cell-types-column ${params.cell_types_col_name}\\\n          --output-path ${params.model_predictions_path}\\\n          --plot-path ${params.prediction_probs_path}\\\n          --confusion-table ${params.confusion_table_path}\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "EVAL_TRAINED_MODEL",
            "EVAL_TEST_MATRIX",
            "EVAL_TEST_LABELS"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "publishDir \"${baseDir}/data/evaluation_outputs\", mode: 'copy'",
            "conda \"${baseDir}/envs/scpred.yaml\"",
            "errorStrategy { task.attempt < 5 ? 'retry' : 'finish' }",
            "maxRetries 5",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "read_prediction_data": {
        "name_process": "read_prediction_data",
        "string_process": "\nprocess read_prediction_data{\n  conda \"${baseDir}/envs/dropletutils.yaml\"\n\n  errorStrategy { task.attempt < 5  ? 'retry' : 'finish' }   \n  maxRetries 5\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(prediction_10X_data) from PREDICTION_DATA\n\n  output: \n    file(\"prediction_sce.rds\") into PREDICTION_SCE\n\n    \"\"\"\n    dropletutils-read-10x-counts.R\\\n            --samples ${prediction_10X_data}\\\n            --col-names ${params.col_names}\\\n            --output-object-file prediction_sce.rds\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    dropletutils-read-10x-counts.R\\\n            --samples ${prediction_10X_data}\\\n            --col-names ${params.col_names}\\\n            --output-object-file prediction_sce.rds\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "PREDICTION_DATA"
        ],
        "nb_inputs": 1,
        "outputs": [
            "PREDICTION_SCE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "conda \"${baseDir}/envs/dropletutils.yaml\"",
            "errorStrategy { task.attempt < 5 ? 'retry' : 'finish' }",
            "maxRetries 5",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "pred_process_training_sce": {
        "name_process": "pred_process_training_sce",
        "string_process": "\nprocess pred_process_training_sce{\n  conda \"${baseDir}/envs/scpred.yaml\"\n\n  errorStrategy { task.attempt < 5  ? 'retry' : 'finish' }   \n  maxRetries 5\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(training_sce) from PROCESS_TRAIN_SCE.first()\n\n  output:\n    file(\"training_matrix.rds\") into PRED_TRAINING_MATRIX\n    file(\"training_labels.txt\") into PRED_TRAINING_LABELS\n\n  \"\"\"\n  scpred_preprocess_data.R\\\n            --input-sce-object ${training_sce}\\\n            --normalised-counts-slot ${params.normalised_counts_slot}\\\n            --output-matrix-object training_matrix.rds\\\n            --output-labels training_labels.txt \n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n  scpred_preprocess_data.R\\\n            --input-sce-object ${training_sce}\\\n            --normalised-counts-slot ${params.normalised_counts_slot}\\\n            --output-matrix-object training_matrix.rds\\\n            --output-labels training_labels.txt \n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "PROCESS_TRAIN_SCE"
        ],
        "nb_inputs": 1,
        "outputs": [
            "PRED_TRAINING_MATRIX",
            "PRED_TRAINING_LABELS"
        ],
        "nb_outputs": 2,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "conda \"${baseDir}/envs/scpred.yaml\"",
            "errorStrategy { task.attempt < 5 ? 'retry' : 'finish' }",
            "maxRetries 5",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "pred_process_prediction_sce": {
        "name_process": "pred_process_prediction_sce",
        "string_process": "\nprocess pred_process_prediction_sce{\n  conda \"${baseDir}/envs/scpred.yaml\"\n\n  errorStrategy { task.attempt < 5  ? 'retry' : 'finish' }   \n  maxRetries 5\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(prediction_sce) from PREDICTION_SCE\n\n  output:\n    file(\"prediction_matrix.rds\") into PREDICTION_MAT\n\n  \"\"\"\n  scpred_preprocess_data.R\\\n            --input-sce-object ${prediction_sce}\\\n            --normalised-counts-slot ${params.normalised_counts_slot}\\\n            --output-matrix-object prediction_matrix.rds\\\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n  scpred_preprocess_data.R\\\n            --input-sce-object ${prediction_sce}\\\n            --normalised-counts-slot ${params.normalised_counts_slot}\\\n            --output-matrix-object prediction_matrix.rds\\\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "PREDICTION_SCE"
        ],
        "nb_inputs": 1,
        "outputs": [
            "PREDICTION_MAT"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "conda \"${baseDir}/envs/scpred.yaml\"",
            "errorStrategy { task.attempt < 5 ? 'retry' : 'finish' }",
            "maxRetries 5",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "pred_eigen_decompose": {
        "name_process": "pred_eigen_decompose",
        "string_process": "\nprocess pred_eigen_decompose{\n  conda \"${baseDir}/envs/scpred.yaml\"\n\n  errorStrategy { task.attempt < 5  ? 'retry' : 'finish' }   \n  maxRetries 5\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(training_matrix) from PRED_TRAINING_MATRIX\n    file(training_labels) from PRED_TRAINING_LABELS\n\n  output:\n    file(\"scpred_training_object.rds\") into PRED_TRAINING_OBJECT\n\n  \"\"\"\n  scpred_eigen_decomp.R\\\n            --training-matrix ${training_matrix}\\\n            --log-transform ${params.log_transform}\\\n            --training-labels ${training_labels}\\\n            --output-path scpred_training_object.rds \n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n  scpred_eigen_decomp.R\\\n            --training-matrix ${training_matrix}\\\n            --log-transform ${params.log_transform}\\\n            --training-labels ${training_labels}\\\n            --output-path scpred_training_object.rds \n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "PRED_TRAINING_MATRIX",
            "PRED_TRAINING_LABELS"
        ],
        "nb_inputs": 2,
        "outputs": [
            "PRED_TRAINING_OBJECT"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "conda \"${baseDir}/envs/scpred.yaml\"",
            "errorStrategy { task.attempt < 5 ? 'retry' : 'finish' }",
            "maxRetries 5",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "pred_get_features": {
        "name_process": "pred_get_features",
        "string_process": "\nprocess pred_get_features{\n  conda \"${baseDir}/envs/scpred.yaml\"\n\n  errorStrategy { task.attempt < 5  ? 'retry' : 'finish' }   \n  maxRetries 5\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(scpred_training_object) from PRED_TRAINING_OBJECT\n\n  output:\n    file(\"scpred_training_features.rds\") into PRED_TRAINING_FEATURES\n\n  \"\"\"\n  scpred_get_feature_space.R\\\n          --input-object ${scpred_training_object}\\\n          --prediction-column ${params.cell_types_col_name}\\\n          --output-path scpred_training_features.rds\\\n          --eigenvalue-plot-path ${params.eigenvalue_plot_path}\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n  scpred_get_feature_space.R\\\n          --input-object ${scpred_training_object}\\\n          --prediction-column ${params.cell_types_col_name}\\\n          --output-path scpred_training_features.rds\\\n          --eigenvalue-plot-path ${params.eigenvalue_plot_path}\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "PRED_TRAINING_OBJECT"
        ],
        "nb_inputs": 1,
        "outputs": [
            "PRED_TRAINING_FEATURES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "conda \"${baseDir}/envs/scpred.yaml\"",
            "errorStrategy { task.attempt < 5 ? 'retry' : 'finish' }",
            "maxRetries 5",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "pred_train_model": {
        "name_process": "pred_train_model",
        "string_process": "\nprocess pred_train_model{\n  publishDir \"${baseDir}/data/prediction_outputs\", mode: 'copy'\n  conda \"${baseDir}/envs/scpred.yaml\"\n\n  errorStrategy { task.attempt < 5  ? 'retry' : 'finish' }   \n  maxRetries 5\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(scpred_training_features) from PRED_TRAINING_FEATURES\n\n  output:\n    file(\"pred_trained_model.rds\") into PRED_TRAINED_MODEL \n    file(\"${params.train_probs_plot_path}\") into PRED_TRAIN_PROBS\n\n\n  \"\"\"\n  scpred_train_model.R\\\n          --input-object ${scpred_training_features}\\\n          --model ${params.model}\\\n          --output-path pred_trained_model.rds\\\n          --train-probs-plot ${params.train_probs_plot_path}\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n  scpred_train_model.R\\\n          --input-object ${scpred_training_features}\\\n          --model ${params.model}\\\n          --output-path pred_trained_model.rds\\\n          --train-probs-plot ${params.train_probs_plot_path}\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "PRED_TRAINING_FEATURES"
        ],
        "nb_inputs": 1,
        "outputs": [
            "PRED_TRAINED_MODEL",
            "PRED_TRAIN_PROBS"
        ],
        "nb_outputs": 2,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "publishDir \"${baseDir}/data/prediction_outputs\", mode: 'copy'",
            "conda \"${baseDir}/envs/scpred.yaml\"",
            "errorStrategy { task.attempt < 5 ? 'retry' : 'finish' }",
            "maxRetries 5",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "pred_predict_labels": {
        "name_process": "pred_predict_labels",
        "string_process": "\nprocess pred_predict_labels{\n  publishDir \"${baseDir}/data/prediction_outputs\", mode: 'copy'\n  conda \"${baseDir}/envs/scpred.yaml\"\n\n  errorStrategy { task.attempt < 5  ? 'retry' : 'finish' }   \n  maxRetries 5\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(pred_trained_model) from PRED_TRAINED_MODEL\n    file(prediction_matrix) from PREDICTION_MAT\n\n  output:\n    file(\"${params.model_predictions_path}\") into PRED_MODEL_PREDICTIONS\n\n  \"\"\"\n  scpred_predict.R\\\n          --input-object ${pred_trained_model}\\\n          --pred-data ${prediction_matrix}\\\n          --output-path ${params.model_predictions_path}\\\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n  scpred_predict.R\\\n          --input-object ${pred_trained_model}\\\n          --pred-data ${prediction_matrix}\\\n          --output-path ${params.model_predictions_path}\\\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "PRED_TRAINED_MODEL",
            "PREDICTION_MAT"
        ],
        "nb_inputs": 2,
        "outputs": [
            "PRED_MODEL_PREDICTIONS"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "publishDir \"${baseDir}/data/prediction_outputs\", mode: 'copy'",
            "conda \"${baseDir}/envs/scpred.yaml\"",
            "errorStrategy { task.attempt < 5 ? 'retry' : 'finish' }",
            "maxRetries 5",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    },
    "get_pred_output": {
        "name_process": "get_pred_output",
        "string_process": "\nprocess get_pred_output{\n  publishDir \"${params.results_dir}\", mode: 'copy' // send the table into 'outer' workflow\n  conda \"${baseDir}/envs/scpred.yaml\"\n\n  errorStrategy { task.attempt < 5  ? 'retry' : 'finish' }   \n  maxRetries 5\n  memory { 16.GB * task.attempt }\n\n  input:\n    file(model_predicitons) from PRED_MODEL_PREDICTIONS\n    file(pred_trained_model) from PRED_TRAINED_MODEL\n  output:\n    file(\"scpred_output.txt\") into FINAL_TABLE\n\n  \"\"\"\n  scpred_get_std_output.R\\\n          --predictions-file ${model_predicitons}\\\n\t  --classifier ${pred_trained_model}\\\n          --output-table scpred_output.txt\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n  scpred_get_std_output.R\\\n          --predictions-file ${model_predicitons}\\\n\t  --classifier ${pred_trained_model}\\\n          --output-table scpred_output.txt\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "PRED_MODEL_PREDICTIONS",
            "PRED_TRAINED_MODEL"
        ],
        "nb_inputs": 2,
        "outputs": [
            "FINAL_TABLE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scpred-eval-workflow",
        "directive": [
            "publishDir \"${params.results_dir}\", mode: 'copy' // send the table into 'outer' workflow",
            "conda \"${baseDir}/envs/scpred.yaml\"",
            "errorStrategy { task.attempt < 5 ? 'retry' : 'finish' }",
            "maxRetries 5",
            "memory { 16.GB * task.attempt }"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "calculate_read_stats": {
        "name_process": "calculate_read_stats",
        "string_process": "\nprocess calculate_read_stats {\n    publishDir \"${params.outdir}\", mode: 'copy'\n    conda '/lustre/scratch116/tol/teams/team301/users/ls30/miniconda3/envs/seqkit_env'\n    \n    input:\n        tuple val(strain), path(reads)\n\n    output:\n        path \"${strain}_read_statistics.tsv\"\n\n    script:\n    \"\"\"\n    seqkit stats -a -T $reads >${strain}_read_statistics.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    seqkit stats -a -T $reads >${strain}_read_statistics.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "strain",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lstevens17__nemAsm",
        "directive": [
            "publishDir \"${params.outdir}\", mode: 'copy'",
            "conda '/lustre/scratch116/tol/teams/team301/users/ls30/miniconda3/envs/seqkit_env'"
        ],
        "when": "",
        "stub": ""
    },
    "prelim_wtdbg2_assembly": {
        "name_process": "prelim_wtdbg2_assembly",
        "string_process": "\nprocess prelim_wtdbg2_assembly {\n    publishDir \"${params.outdir}\", mode: 'copy'\n    conda '/lustre/scratch116/tol/teams/team301/users/ls30/miniconda3/envs/wtdbg2_env'\n    \n    input:\n        tuple val(strain), path(reads)\n\n    output:\n        path \"${strain}_wtdbg2_prelim.fa\"\n\n    script:\n    \"\"\"\n    wtdbg2 -fo ${strain}_wtdbg2_prelim -t ${task.cpus} -x ccs -g 100m -i $reads\n    wtpoa-cns -t ${task.cpus} -i ${strain}_wtdbg2_prelim.ctg.lay.gz -fo ${strain}_wtdbg2_prelim.fa\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    wtdbg2 -fo ${strain}_wtdbg2_prelim -t ${task.cpus} -x ccs -g 100m -i $reads\n    wtpoa-cns -t ${task.cpus} -i ${strain}_wtdbg2_prelim.ctg.lay.gz -fo ${strain}_wtdbg2_prelim.fa\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "wtdbg2"
        ],
        "tools_url": [
            "https://bio.tools/wtdbg2"
        ],
        "tools_dico": [
            {
                "name": "wtdbg2",
                "uri": "https://bio.tools/wtdbg2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0605",
                            "term": "Informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3316",
                            "term": "Computer science"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0605",
                            "term": "Knowledge management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0605",
                            "term": "Information science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0605",
                            "term": "Information management"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Wtdbg2 is a de novo sequence assembler for long noisy reads produced by PacBio or Oxford Nanopore Technologies (ONT). It assembles raw reads without error correction and then builds the consensus from intermediate assembly output. Wtdbg2 is able to assemble the human and even the 32Gb Axolotl genome at a speed tens of times faster than CANU and FALCON while producing contigs of comparable base accuracy.",
                "homepage": "https://github.com/ruanjue/wtdbg2"
            }
        ],
        "inputs": [
            "strain",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lstevens17__nemAsm",
        "directive": [
            "publishDir \"${params.outdir}\", mode: 'copy'",
            "conda '/lustre/scratch116/tol/teams/team301/users/ls30/miniconda3/envs/wtdbg2_env'"
        ],
        "when": "",
        "stub": ""
    }
}
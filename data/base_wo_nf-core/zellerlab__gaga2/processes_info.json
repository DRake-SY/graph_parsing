{
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "process fastqc {\n    publishDir params.output_dir, mode: params.publish_mode, pattern: \"raw_counts/*.txt\"\n\n    input:\n    tuple val(sample), path(reads)\n\n    output:\n    tuple val(sample), path(\"fastqc/*/*fastqc_data.txt\"), emit: reports\n    tuple val(sample), path(\"raw_counts/${sample.id}.txt\"), emit: counts\n\n    script:\n    def process_r2 = (sample.is_paired) ? \"fastqc -t $task.cpus --extract --outdir=fastqc ${sample.id}_R2.fastq.gz && mv fastqc/${sample.id}_R2_fastqc/fastqc_data.txt fastqc/${sample.id}_R2_fastqc/${sample.id}_R2_fastqc_data.txt\" : \"\";\n\n    \"\"\"\n    mkdir -p fastqc\n    mkdir -p raw_counts\n    fastqc -t $task.cpus --extract --outdir=fastqc ${sample.id}_R1.fastq.gz && mv fastqc/${sample.id}_R1_fastqc/fastqc_data.txt fastqc/${sample.id}_R1_fastqc/${sample.id}_R1_fastqc_data.txt\n    ${process_r2}\n    grep \"Total Sequences\" fastqc/*/*data.txt > seqcount.txt\n    echo \\$(wc -l seqcount.txt)\\$'\\t'\\$(head -n1 seqcount.txt | cut -f 2) > raw_counts/${sample.id}.txt\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    def process_r2 = (sample.is_paired) ? \"fastqc -t $task.cpus --extract --outdir=fastqc ${sample.id}_R2.fastq.gz && mv fastqc/${sample.id}_R2_fastqc/fastqc_data.txt fastqc/${sample.id}_R2_fastqc/${sample.id}_R2_fastqc_data.txt\" : \"\";\n\n    \"\"\"\n    mkdir -p fastqc\n    mkdir -p raw_counts\n    fastqc -t $task.cpus --extract --outdir=fastqc ${sample.id}_R1.fastq.gz && mv fastqc/${sample.id}_R1_fastqc/fastqc_data.txt fastqc/${sample.id}_R1_fastqc/${sample.id}_R1_fastqc_data.txt\n    ${process_r2}\n    grep \"Total Sequences\" fastqc/*/*data.txt > seqcount.txt\n    echo \\$(wc -l seqcount.txt)\\$'\\t'\\$(head -n1 seqcount.txt | cut -f 2) > raw_counts/${sample.id}.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "sample",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [
            "publishDir params.output_dir, mode: params.publish_mode, pattern: \"raw_counts/*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "qc_bbduk": {
        "name_process": "qc_bbduk",
        "string_process": "\nprocess qc_bbduk {\n\tlabel 'bbduk'\n\tpublishDir path: params.output_dir, mode: params.publish_mode, pattern: \"${sample.id}/${sample.id}.bbduk_stats.txt\"\n\n    input:\n    tuple val(sample), path(reads)\n\tpath(adapters)\n\tpath(run_sentinel)\n\n    output:\n    tuple val(sample), path(\"${sample.id}/${sample.id}_R*.fastq.gz\"), emit: reads\n    tuple val(sample), path(\"${sample.id}/${sample.id}_O.fastq.gz\"), emit: orphans, optional: true\n    path(\"${sample.id}/${sample.id}.bbduk_stats.txt\")\n\n    script:\n    def maxmem = task.memory.toString().replace(/ GB/, \"g\")\n                                                                                           \n    def read1 = \"in1=${sample.id}_R1.fastq.gz out1=${sample.id}/${sample.id}_R1.fastq.gz\"\n                                                                                                                                                         \n    read2 = sample.is_paired ? \"in2=${sample.id}_R2.fastq.gz out2=${sample.id}/${sample.id}_R2.fastq.gz outs=${sample.id}/${sample.id}_O.fastq.gz\" : \"\"\n\n\tif (params.primers) {\n\t\tqc_params = params.qc_params_primers\n\t\ttrim_params = \"literal=${params.primers} minlen=${params.qc_minlen}\"\n\t} else {\n\t\tqc_params = params.qc_params_adapters\n\t\ttrim_params = \"ref=${adapters} minlen=${params.qc_minlen}\"\n\t}\n\n    \"\"\"\n    mkdir -p ${sample.id}\n    bbduk.sh -Xmx${maxmem} t=${task.cpus} ordered=t ${qc_params} ${trim_params} stats=${sample.id}/${sample.id}.bbduk_stats.txt ${read1} ${read2}\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def maxmem = task.memory.toString().replace(/ GB/, \"g\")\n                                                                                           \n    def read1 = \"in1=${sample.id}_R1.fastq.gz out1=${sample.id}/${sample.id}_R1.fastq.gz\"\n                                                                                                                                                         \n    read2 = sample.is_paired ? \"in2=${sample.id}_R2.fastq.gz out2=${sample.id}/${sample.id}_R2.fastq.gz outs=${sample.id}/${sample.id}_O.fastq.gz\" : \"\"\n\n\tif (params.primers) {\n\t\tqc_params = params.qc_params_primers\n\t\ttrim_params = \"literal=${params.primers} minlen=${params.qc_minlen}\"\n\t} else {\n\t\tqc_params = params.qc_params_adapters\n\t\ttrim_params = \"ref=${adapters} minlen=${params.qc_minlen}\"\n\t}\n\n    \"\"\"\n    mkdir -p ${sample.id}\n    bbduk.sh -Xmx${maxmem} t=${task.cpus} ordered=t ${qc_params} ${trim_params} stats=${sample.id}/${sample.id}.bbduk_stats.txt ${read1} ${read2}\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "reads",
            "adapters",
            "run_sentinel"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [
            "label 'bbduk'",
            "publishDir path: params.output_dir, mode: params.publish_mode, pattern: \"${sample.id}/${sample.id}.bbduk_stats.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "figaro": {
        "name_process": "figaro",
        "string_process": "\nprocess figaro {\n\tpublishDir \"${params.output_dir}\", mode: params.publish_mode\n\n\tinput:\n\tpath input_reads\n\tval is_paired_end\n\n\toutput:\n\tpath(\"figaro/trimParameters.json\"), emit: trim_params\n\tpath(\"figaro/*.png\")\n\n\tscript:\n\tdef paired_params = (is_paired_end == true) ? \"-r ${params.right_primer} -m ${params.min_overlap}\" : \"\"\n\n\t\"\"\"\n\tfigaro -i . -o figaro/ -a ${params.amplicon_length} -f ${params.left_primer} ${paired_params}\n\t\"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\tdef paired_params = (is_paired_end == true) ? \"-r ${params.right_primer} -m ${params.min_overlap}\" : \"\"\n\n\t\"\"\"\n\tfigaro -i . -o figaro/ -a ${params.amplicon_length} -f ${params.left_primer} ${paired_params}\n\t\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Figaro"
        ],
        "tools_url": [
            "https://bio.tools/figaro"
        ],
        "tools_dico": [
            {
                "name": "Figaro",
                "uri": "https://bio.tools/figaro",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Figaro is a software tool for identifying and removing the vector from raw DNA sequence data without prior knowledge of the vector sequence.",
                "homepage": "http://amos.sourceforge.net/wiki/index.php?title=Figaro"
            }
        ],
        "inputs": [
            "input_reads",
            "is_paired_end"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [
            "publishDir \"${params.output_dir}\", mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "extract_trim_parameters": {
        "name_process": "extract_trim_parameters",
        "string_process": "\nprocess extract_trim_parameters {\n\tinput:\n\tpath(trim_params)\n\n\toutput:\n\tpath(\"trim_params.txt\"), emit: trim_params\n\n\tscript:\n\t\"\"\"\n\tpython $projectDir/scripts/trim_params.py $trim_params > trim_params.txt\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tpython $projectDir/scripts/trim_params.py $trim_params > trim_params.txt\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trim_params"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "dada2_preprocess": {
        "name_process": "dada2_preprocess",
        "string_process": "\nprocess dada2_preprocess {\n\tlabel 'dada2'\n\tpublishDir \"${params.output_dir}\", mode: params.publish_mode\n\n\tinput:\n\tpath input_reads\n\tpath trim_params\n\tpath dada2_script\n\tval is_paired_end\n\n\toutput:\n\tpath(\"read_quality.pdf\")\n\tpath(\"read_quality_postqc.pdf\")\n\tpath(\"filter_trim_table.tsv\")\n\tpath(\"filter_trim_table.final.tsv\"), emit: trim_table\n\tpath(\"dada2_preprocess.log\")\n\tpath(\"dada2_preprocess/*.{fastq,fq,fastq.gz,fq.gz}\"), emit: filtered_reads\n\n\tscript:\n\t\"\"\"\n\tmkdir -p dada2_in/\n\tfor f in \\$(find . -maxdepth 1 -type l); do ln -s ../\\$f dada2_in/; done\n\trm dada2_in/trim_params.txt dada2_in/*.R\n\tRscript --vanilla ${dada2_script} dada2_in/ dada2_preprocess/ \\$(cat trim_params.txt) $task.cpus > dada2_preprocess.log\n\t\"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "\t\"\"\"\n\tmkdir -p dada2_in/\n\tfor f in \\$(find . -maxdepth 1 -type l); do ln -s ../\\$f dada2_in/; done\n\trm dada2_in/trim_params.txt dada2_in/*.R\n\tRscript --vanilla ${dada2_script} dada2_in/ dada2_preprocess/ \\$(cat trim_params.txt) $task.cpus > dada2_preprocess.log\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_reads",
            "trim_params",
            "dada2_script",
            "is_paired_end"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [
            "label 'dada2'",
            "publishDir \"${params.output_dir}\", mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "dada2_analysis": {
        "name_process": "dada2_analysis",
        "string_process": "\nprocess dada2_analysis {\n\tlabel 'dada2'\n\tpublishDir \"${params.output_dir}\", mode: params.publish_mode\n\n\tinput:\n\tpath input_reads\n\tpath filter_trim_table\n\tpath dada2_script\n\tval is_paired_end\n\n\toutput:\n\tpath(\"dada2_analysis.log\")\n\tpath(\"error_model.pdf\")\n\tpath(\"summary_table.tsv\")\n\tpath(\"result.RData\")\n\tpath(\"dada2_figures.pdf\"), optional: true\n\tpath(\"ASVs.tsv\"), emit: asv_sequences\n\tpath(\"asv_table.tsv\")\n\n\tscript:\n\t\"\"\"\n\tmkdir -p dada2_in/\n\tfor f in \\$(find . -maxdepth 1 -type l); do ln -s ../\\$f dada2_in/; done\n\trm dada2_in/*.R dada2_in/filter_trim_table.final.tsv\n\tRscript --vanilla ${dada2_script} dada2_in/ dada2_analysis/ filter_trim_table.final.tsv $task.cpus ${params.dada2_chimera_method} ${params.dada2_chimera_min_fold_parent_over_abundance} > dada2_analysis.log\n\t\"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "\t\"\"\"\n\tmkdir -p dada2_in/\n\tfor f in \\$(find . -maxdepth 1 -type l); do ln -s ../\\$f dada2_in/; done\n\trm dada2_in/*.R dada2_in/filter_trim_table.final.tsv\n\tRscript --vanilla ${dada2_script} dada2_in/ dada2_analysis/ filter_trim_table.final.tsv $task.cpus ${params.dada2_chimera_method} ${params.dada2_chimera_min_fold_parent_over_abundance} > dada2_analysis.log\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_reads",
            "filter_trim_table",
            "dada2_script",
            "is_paired_end"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [
            "label 'dada2'",
            "publishDir \"${params.output_dir}\", mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "asv2fasta": {
        "name_process": "asv2fasta",
        "string_process": "\nprocess asv2fasta {\n\tpublishDir \"${params.output_dir}\", mode: params.publish_mode\n\n\tinput:\n\tpath(asv_seqs)\n\n\toutput:\n\ttuple val(meta), path(\"ASVs.fasta\"), emit: asv_fasta\n\n\tscript:\n\tmeta = [:]\n\tmeta.id = \"all\"\n\tmeta.is_paired = false\n\t\"\"\"\n\ttail -n +2 ${asv_seqs} | sed 's/^/>/' | tr '\\t' '\\n' > ASVs.fasta\n\t\"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\tmeta = [:]\n\tmeta.id = \"all\"\n\tmeta.is_paired = false\n\t\"\"\"\n\ttail -n +2 ${asv_seqs} | sed 's/^/>/' | tr '\\t' '\\n' > ASVs.fasta\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "meta"
        ],
        "tools_url": [
            "https://bio.tools/meta"
        ],
        "tools_dico": [
            {
                "name": "meta",
                "uri": "https://bio.tools/meta",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "meta is a program to produce and to align the TF-maps of two gene promoter regions. meta is very useful to characterize promoter regions from orthologous genes, or from co-regulated genes in microarrays, as it reduces the signal/noise ratio in a very significant manner, still detecting the real functional sites.",
                "homepage": "http://big.crg.cat/services/meta"
            }
        ],
        "inputs": [
            "asv_seqs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [
            "publishDir \"${params.output_dir}\", mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "assess_read_length_distribution": {
        "name_process": "assess_read_length_distribution",
        "string_process": "\nprocess assess_read_length_distribution {\n\tinput:\n\tpath(fastq_reports)\n\n\toutput:\n\tpath(\"read_length_thresholds.txt\"), emit: read_length\n\tpath(\"READSET_HOMOGENEOUS\"), emit: hom_reads_marker, optional: true\n\n\tscript:\n\t\"\"\"\n\tpython ${projectDir}/scripts/assess_readlengths.py . > read_length_thresholds.txt\n\t\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\t\"\"\"\n\tpython ${projectDir}/scripts/assess_readlengths.py . > read_length_thresholds.txt\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq_reports"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "homogenise_readlengths": {
        "name_process": "homogenise_readlengths",
        "string_process": "\nprocess homogenise_readlengths {\n\tlabel 'bbduk'\n\n\tinput:\n\ttuple val(sample), path(reads)\n\tpath(read_lengths)\n\n\toutput:\n\tpath(\"${sample.id}/*.{fastq,fq,fastq.gz,fq.gz}\"), emit: reads\n\n\tscript:\n\tdef maxmem = task.memory.toString().replace(/ GB/, \"g\")\n\n\tif (sample.is_paired) {\n\t\t\"\"\"\n\t\tmkdir -p ${sample.id}\n\t\tr1len=\\$(head -n 1 ${read_lengths} | cut -f 1)\n\t\tr2len=\\$(head -n 1 ${read_lengths} | cut -f 4)\n\t\tbbduk.sh -Xmx${maxmem} t=${task.cpus} ordered=t minlength=\\$((r1len-1)) ftr=\\$((r1len-1)) stats=${sample.id}/${sample.id}.homr_stats_1.txt in=${sample.id}_R1.fastq.gz out=${sample.id}/${sample.id}_R1.fastq.gz\n\t\tbbduk.sh -Xmx${maxmem} t=${task.cpus} ordered=t minlength=\\$((r2len-1)) ftr=\\$((r2len-1)) stats=${sample.id}/${sample.id}.homr_stats_2.txt in=${sample.id}_R2.fastq.gz out=${sample.id}/${sample.id}_R2.fastq.gz\n\t\t\"\"\"\n\t} else {\n\t\t\"\"\"\n\t\tmkdir -p ${sample.id}\n\t\tr1len=\\$(head -n 1 ${read_lengths} | cut -f 1)\n\t\tbbduk.sh -Xmx${maxmem} t=${task.cpus} ordered=t minlength=\\$((r1len-1)) ftr=\\$((r1len-1)) stats=${sample.id}/${sample.id}.homr_stats_1.txt in=${sample.id}_R1.fastq.gz out=${sample.id}/${sample.id}_R1.fastq.gz\n\t\t\"\"\"\n\t}\n}",
        "nb_lignes_process": 28,
        "string_script": "\tdef maxmem = task.memory.toString().replace(/ GB/, \"g\")\n\n\tif (sample.is_paired) {\n\t\t\"\"\"\n\t\tmkdir -p ${sample.id}\n\t\tr1len=\\$(head -n 1 ${read_lengths} | cut -f 1)\n\t\tr2len=\\$(head -n 1 ${read_lengths} | cut -f 4)\n\t\tbbduk.sh -Xmx${maxmem} t=${task.cpus} ordered=t minlength=\\$((r1len-1)) ftr=\\$((r1len-1)) stats=${sample.id}/${sample.id}.homr_stats_1.txt in=${sample.id}_R1.fastq.gz out=${sample.id}/${sample.id}_R1.fastq.gz\n\t\tbbduk.sh -Xmx${maxmem} t=${task.cpus} ordered=t minlength=\\$((r2len-1)) ftr=\\$((r2len-1)) stats=${sample.id}/${sample.id}.homr_stats_2.txt in=${sample.id}_R2.fastq.gz out=${sample.id}/${sample.id}_R2.fastq.gz\n\t\t\"\"\"\n\t} else {\n\t\t\"\"\"\n\t\tmkdir -p ${sample.id}\n\t\tr1len=\\$(head -n 1 ${read_lengths} | cut -f 1)\n\t\tbbduk.sh -Xmx${maxmem} t=${task.cpus} ordered=t minlength=\\$((r1len-1)) ftr=\\$((r1len-1)) stats=${sample.id}/${sample.id}.homr_stats_1.txt in=${sample.id}_R1.fastq.gz out=${sample.id}/${sample.id}_R1.fastq.gz\n\t\t\"\"\"\n\t}",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "reads",
            "read_lengths"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [
            "label 'bbduk'"
        ],
        "when": "",
        "stub": ""
    },
    "prepare_fastqs": {
        "name_process": "prepare_fastqs",
        "string_process": "\nprocess prepare_fastqs {\n\tinput:\n\ttuple val(sample), path(fq)\n\n\toutput:\n\ttuple val(sample), path(\"fastq/${sample.id}/${sample.id}_R*.fastq.gz\"), emit: reads\n\n\tscript:\n\tif (sample.is_paired) {\n\t\t\"\"\"\n\t\tmkdir -p fastq/${sample.id}\n\t\tln -sf ../../${fq[0]} fastq/${sample.id}/${sample.id}_R1.fastq.gz\n\t\tln -sf ../../${fq[1]} fastq/${sample.id}/${sample.id}_R2.fastq.gz\n\t\t\"\"\"\n\t} else {\n\t\t\"\"\"\n\t\tmkdir -p fastq/${sample.id}\n\t\tln -sf ../../${fq[0]} fastq/${sample.id}/${sample.id}_R1.fastq.gz\n\t\t\"\"\"\n\t}\n}",
        "nb_lignes_process": 20,
        "string_script": "\tif (sample.is_paired) {\n\t\t\"\"\"\n\t\tmkdir -p fastq/${sample.id}\n\t\tln -sf ../../${fq[0]} fastq/${sample.id}/${sample.id}_R1.fastq.gz\n\t\tln -sf ../../${fq[1]} fastq/${sample.id}/${sample.id}_R2.fastq.gz\n\t\t\"\"\"\n\t} else {\n\t\t\"\"\"\n\t\tmkdir -p fastq/${sample.id}\n\t\tln -sf ../../${fq[0]} fastq/${sample.id}/${sample.id}_R1.fastq.gz\n\t\t\"\"\"\n\t}",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "fq"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "mapseq": {
        "name_process": "mapseq",
        "string_process": "process mapseq {\n    input:\n    tuple val(sample), path(seqs)\n\tpath(db_path)\n\tval(db_name)\n\n    output:\n    path(\"${sample.id}/${sample.id}_bac_ssu.mseq\"), emit: bac_ssu\n\n    script:\n\tdef db = (db_name == \"default\" || db_name == \"\") ? \"\" : \"${db_path}/${db_name}.fasta ${db_path}/*.tax*\"\n\n\t\"\"\"\n\tmkdir -p ${sample.id}\n    ${params.mapseq_bin} ${seqs} > ${sample.id}/${sample.id}_bac_ssu.mseq\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\tdef db = (db_name == \"default\" || db_name == \"\") ? \"\" : \"${db_path}/${db_name}.fasta ${db_path}/*.tax*\"\n\n\t\"\"\"\n\tmkdir -p ${sample.id}\n    ${params.mapseq_bin} ${seqs} > ${sample.id}/${sample.id}_bac_ssu.mseq\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "seqs",
            "db_path",
            "db_name"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "mapseq_otutable": {
        "name_process": "mapseq_otutable",
        "string_process": "\nprocess mapseq_otutable {\n    publishDir params.output_dir, mode: params.publish_mode\n\t\n\tinput:\n\tpath(mapped_seqs)\n\n\toutput:\n\tpath(\"mapseq.otucounts.txt\")\n\n\tscript:\n\t\"\"\"\n\t${params.mapseq_bin} -otucounts ${mapped_seqs} > mapseq.otucounts.txt\n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\t\"\"\"\n\t${params.mapseq_bin} -otucounts ${mapped_seqs} > mapseq.otucounts.txt\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mapped_seqs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [
            "publishDir params.output_dir, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "collate_mapseq_tables": {
        "name_process": "collate_mapseq_tables",
        "string_process": "\nprocess collate_mapseq_tables {\n    publishDir params.output_dir, mode: params.publish_mode\n\n    input:\n    path(mapped_seqs)\n\n    output:\n    path(\"mapseq_tables/mapseq_counts_genus_*_bac_ssu.tsv\"), emit: ssu_tables\n\n    script:\n    if (mapped_seqs.size() == 2) {\n        \"\"\"\n        mkdir -p mapseq_tables\n        ${params.mapseq_bin} -otutable -tl 5 \\$(ls *_R1_bac_ssu.mseq) | sed 's/_R1_bac_ssu.mseq//g' > mapseq_tables/mapseq_counts_genus_fwd_bac_ssu.tsv\n        ${params.mapseq_bin} -otutable -tl 5 \\$(ls *_R2_bac_ssu.mseq) | sed 's/_R2_bac_ssu.mseq//g' > mapseq_tables/mapseq_counts_genus_rev_bac_ssu.tsv\n        \"\"\"\n    } else {\n        \"\"\"\n        mkdir -p mapseq_tables\n        ${params.mapseq_bin} -otutable -tl 5 \\$(ls *_R1_bac_ssu.mseq) | sed 's/_R1_bac_ssu.mseq//g' > mapseq_tables/mapseq_counts_genus_fwd_bac_ssu.tsv\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 22,
        "string_script": "    if (mapped_seqs.size() == 2) {\n        \"\"\"\n        mkdir -p mapseq_tables\n        ${params.mapseq_bin} -otutable -tl 5 \\$(ls *_R1_bac_ssu.mseq) | sed 's/_R1_bac_ssu.mseq//g' > mapseq_tables/mapseq_counts_genus_fwd_bac_ssu.tsv\n        ${params.mapseq_bin} -otutable -tl 5 \\$(ls *_R2_bac_ssu.mseq) | sed 's/_R2_bac_ssu.mseq//g' > mapseq_tables/mapseq_counts_genus_rev_bac_ssu.tsv\n        \"\"\"\n    } else {\n        \"\"\"\n        mkdir -p mapseq_tables\n        ${params.mapseq_bin} -otutable -tl 5 \\$(ls *_R1_bac_ssu.mseq) | sed 's/_R1_bac_ssu.mseq//g' > mapseq_tables/mapseq_counts_genus_fwd_bac_ssu.tsv\n        \"\"\"\n    }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mapped_seqs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "zellerlab__gaga2",
        "directive": [
            "publishDir params.output_dir, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    }
}
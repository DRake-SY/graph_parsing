{
    "OPERATION_1": {
        "string": "ch_multiqc_config1 = Channel.fromPath(params.multiqc_config)",
        "origin": [
            [
                "params.multiqc_config",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_config1",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_multiqc_config2 = Channel.fromPath(params.multiqc_config)",
        "origin": [
            [
                "params.multiqc_config",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_config2",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_output_docs = Channel.fromPath(\"$baseDir/docs/output.md\")",
        "origin": [
            [
                "\"$baseDir/docs/output.md\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_output_docs",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n            .from(params.readPaths)\n            .map { row -> [ row[0], [file(row[1][0])]] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into { read_files_fastqc; read_files_trimming }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "read_files_fastqc",
                "P"
            ],
            [
                "read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n            .from(params.readPaths)\n            .map { row -> [ row[0], [file(row[1][0]), file(row[1][1])]] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into { read_files_fastqc; read_files_trimming }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "read_files_fastqc",
                "P"
            ],
            [
                "read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n        .fromFilePairs( params.reads, size: single_end ? 1 : 2 )\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --single_end on the command line.\" }\n        .into { read_files_fastqc; read_files_trimming }",
        "origin": [
            [
                "params.reads, size: single_end ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "read_files_fastqc",
                "P"
            ],
            [
                "read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_8": {
        "string": "read_files_trimming.map {name, reads -> reads}\n        .into { trimmed_reads; trimmed_reads_for_spades; trimmed_reads_for_kraken; trimmed_reads_for_kmer }",
        "origin": [
            [
                "read_files_trimming",
                "P"
            ]
        ],
        "gives": [
            [
                "trimmed_reads",
                "P"
            ],
            [
                "trimmed_reads_for_spades",
                "P"
            ],
            [
                "trimmed_reads_for_kraken",
                "P"
            ],
            [
                "trimmed_reads_for_kmer",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "trimmed_reads_for_spades.set { normalized_reads_for_assembly }",
        "origin": [
            [
                "trimmed_reads_for_spades",
                "P"
            ]
        ],
        "gives": [
            [
                "normalized_reads_for_assembly",
                "P"
            ]
        ]
    }
}
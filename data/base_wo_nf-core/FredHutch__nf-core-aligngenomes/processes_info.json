{
    "correctHeaders": {
        "name_process": "correctHeaders",
        "string_process": "\nprocess correctHeaders {\n  container \"ubuntu:16.04\"\n  errorStrategy \"retry\"\n  \n  input:\n  file fastq from reads_ch\n  \n  output:\n  file \"${fastq.name}.unique.headers.fastq.gz\" into reads_for_alignment, reads_for_counting\n\n  afterScript \"rm *\"\n\n  \"\"\"\nset -e\n\necho Checking for input file existance\n[ -s \"${fastq}\" ]\n\necho \"Correcting headers\"\ngunzip -c \"${fastq}\" | \\\nawk '{if(NR % 4 == 1){print(\"@\" 1 + ((NR - 1) / 4))}else{print}}' | \\\ngzip -c > \\\n\"${fastq.name}.unique.headers.fastq.gz\"\n\necho Done\n  \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\nset -e\n\necho Checking for input file existance\n[ -s \"${fastq}\" ]\n\necho \"Correcting headers\"\ngunzip -c \"${fastq}\" | \\\nawk '{if(NR % 4 == 1){print(\"@\" 1 + ((NR - 1) / 4))}else{print}}' | \\\ngzip -c > \\\n\"${fastq.name}.unique.headers.fastq.gz\"\n\necho Done\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "reads_for_alignment",
            "reads_for_counting afterScript"
        ],
        "nb_outputs": 2,
        "name_workflow": "FredHutch__nf-core-aligngenomes",
        "directive": [
            "container \"ubuntu:16.04\"",
            "errorStrategy \"retry\""
        ],
        "when": "",
        "stub": ""
    },
    "alignGenome": {
        "name_process": "alignGenome",
        "string_process": "\nprocess alignGenome {\n  container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n  errorStrategy 'retry'\n\n  input:\n  file genome_fasta from genomes_ch\n  each file(input_fastq) from reads_for_alignment\n  val threads from 8\n  \n  output:\n  set file(\"*.bam\"), val(\"${genome_fasta.name}\"), val(\"${input_fastq.name.replaceAll('.unique.headers.fastq.gz', '')}\") into bam_ch\n\n  afterScript \"rm -r *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e \n\necho \"Processing ${genome_fasta}\"\n\necho \"Indexing ${genome_fasta}\"\nbwa index ${genome_fasta}\n\necho \"Aligning ${input_fastq} against ${genome_fasta}\"\n\nbwa mem -t ${threads} ${genome_fasta} ${input_fastq} | \\\nsamtools view -b -F 4 -o ${input_fastq}.${genome_fasta}.bam\necho \"Done aligning to ${genome_fasta}\"\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 32,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e \n\necho \"Processing ${genome_fasta}\"\n\necho \"Indexing ${genome_fasta}\"\nbwa index ${genome_fasta}\n\necho \"Aligning ${input_fastq} against ${genome_fasta}\"\n\nbwa mem -t ${threads} ${genome_fasta} ${input_fastq} | \\\nsamtools view -b -F 4 -o ${input_fastq}.${genome_fasta}.bam\necho \"Done aligning to ${genome_fasta}\"\n\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "genomes_ch",
            "reads_for_alignment",
            "8"
        ],
        "nb_inputs": 3,
        "outputs": [
            "bam_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__nf-core-aligngenomes",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "errorStrategy 'retry'"
        ],
        "when": "",
        "stub": ""
    },
    "sortBAM": {
        "name_process": "sortBAM",
        "string_process": "\nprocess sortBAM {\n  container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n  errorStrategy 'retry'\n  publishDir \"${params.outdir}/bam/\"\n\n  input:\n  set file(bam), val(genome_fasta_name), val(input_fastq_name) from bam_ch\n  \n  output:\n  set file(\"${bam}\"), val(\"${genome_fasta_name}\"), val(\"${input_fastq_name}\") into sorted_bam_ch\n  file \"${bam}.bai\"\n\n  afterScript \"rm -r *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\necho \"Processing ${bam}\"\n\necho \"Sorting alignments\"\nsamtools sort ${bam} > ${bam}.sorted\n\nmv ${bam}.sorted ${bam}\n\necho \"Indexing alignments\"\nsamtools index ${bam}\n\necho \"Done\"\n  \"\"\"\n\n}",
        "nb_lignes_process": 32,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\necho \"Processing ${bam}\"\n\necho \"Sorting alignments\"\nsamtools sort ${bam} > ${bam}.sorted\n\nmv ${bam}.sorted ${bam}\n\necho \"Indexing alignments\"\nsamtools index ${bam}\n\necho \"Done\"\n  \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sorted_bam_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__nf-core-aligngenomes",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "errorStrategy 'retry'",
            "publishDir \"${params.outdir}/bam/\""
        ],
        "when": "",
        "stub": ""
    },
    "alignmentStats": {
        "name_process": "alignmentStats",
        "string_process": "\nprocess alignmentStats {\n  container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"\n  errorStrategy 'retry'\n  publishDir \"${params.outdir}/stats/\"\n\n  input:\n  set file(bam), val(genome_fasta_name), val(input_fastq_name) from sorted_bam_ch\n  \n  output:\n  set file(\"${bam}.idxstats\"), file(\"${bam}.stats\"), file(\"${bam}.pileup.gz\"), file(\"${bam}.positions\"), val(\"${genome_fasta_name}\"), val(\"${input_fastq_name}\") into stats_ch\n  set val(\"${genome_fasta_name}\"), file(\"${bam}.pileup.gz\") into pileup_ch\n\n  afterScript \"rm -r *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\necho \"Processing ${bam}\"\n\necho \"Calculating stats\"\nsamtools stats ${bam} > ${bam}.stats\n\necho \"Indexing alignments\"\nsamtools index ${bam}\n\necho \"Calculating idxstats\"\nsamtools idxstats ${bam} > ${bam}.idxstats\n\necho \"Formatting pileup\"\nsamtools mpileup ${bam} > ${bam}.pileup\necho \"Compressing the pileup\"\ngzip ${bam}.pileup\n\n# Make a file with three columns, the bitwise flag, and the leftmost position, and the length of the mapped segment\necho \"Formatting positions TSV\"\nsamtools view ${bam} | awk '{print \\$2 \"\\\\t\" \\$4 \"\\\\t\" length(\\$10)}' > ${bam}.positions\n\necho \"Done\"\n  \"\"\"\n\n}",
        "nb_lignes_process": 42,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\necho \"Processing ${bam}\"\n\necho \"Calculating stats\"\nsamtools stats ${bam} > ${bam}.stats\n\necho \"Indexing alignments\"\nsamtools index ${bam}\n\necho \"Calculating idxstats\"\nsamtools idxstats ${bam} > ${bam}.idxstats\n\necho \"Formatting pileup\"\nsamtools mpileup ${bam} > ${bam}.pileup\necho \"Compressing the pileup\"\ngzip ${bam}.pileup\n\n# Make a file with three columns, the bitwise flag, and the leftmost position, and the length of the mapped segment\necho \"Formatting positions TSV\"\nsamtools view ${bam} | awk '{print \\$2 \"\\\\t\" \\$4 \"\\\\t\" length(\\$10)}' > ${bam}.positions\n\necho \"Done\"\n  \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sorted_bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "stats_ch",
            "pileup_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "FredHutch__nf-core-aligngenomes",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/bwa@sha256:2fc9c6c38521b04020a1e148ba042a2fccf8de6affebc530fbdd45abc14bf9e6\"",
            "errorStrategy 'retry'",
            "publishDir \"${params.outdir}/stats/\""
        ],
        "when": "",
        "stub": ""
    },
    "summarizeEach": {
        "name_process": "summarizeEach",
        "string_process": "\nprocess summarizeEach {\n  container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"\n  errorStrategy 'retry'\n\n  input:\n  set file(idxstats), file(stats), file(pileup), file(positions), val(genome_fasta_name), val(input_fastq_name) from stats_ch\n  \n  output:\n  file \"*json\" into all_stats_ch\n\n  afterScript \"rm -r *\"\n\n  \"\"\"\n#!/usr/bin/env python3\nimport os\nimport json\nimport pandas as pd\nfrom math import log as ln\n\ndef read_line(fp, prefix):\n    with open(fp, 'rt') as f:\n        for line in f:\n            if line.startswith(prefix):\n                return line.replace(prefix, '').strip(\" \").strip(\"\\\\t\")\n\ndef parse_flags(int_flags):\n    output = dict()\n    for n, flag in [\n        (2048, \"supplementary\"),\n        (1024, \"duplicate\"),\n        (512, \"fail_filter\"),\n        (256, \"secondary\"),\n        (128, \"last\"),\n        (64, \"first\"),\n        (32, \"next_rc\"),\n        (16, \"rc\"),\n        (8, \"next_unmapped\"),\n        (4, \"unmapped\"),\n        (2, \"aligned_properly\"),\n        (1, \"multiple_segments\"),\n    ]:\n        if int_flags >= n:\n            output[flag] = True\n            int_flags = int_flags - n\n        else:\n            output[flag] = False\n    assert int_flags == 0, int_flags\n    return output\n\n\ndef shannon_divesity(counts):\n    # See https://gist.github.com/audy/783125\n    \n    def p(n, N):\n        # Relative abundance\n        if n is 0:\n            return 0\n        else:\n            return (float(n)/N) * ln(float(n)/N)\n            \n    N = sum(counts)\n    \n    return -sum(p(n, N) for n in counts if n is not 0)\n\n\n# Read in the summary of alignment positions\npositions = pd.read_csv(\"${positions}\", sep=\"\\\\t\", header=None)\npositions = pd.concat([positions, pd.DataFrame(map(parse_flags, positions[0]))], axis=1)\n# If the read is aligned in the forward direction, use the leftmost position, otherwise use the rightmost\nposition_list = positions.apply(\n    lambda r: r[1] + r[2] if r[\"rc\"] else r[1],\n    axis=1\n).tolist()\n\n# Calculate Shannon diversity\nsdi = shannon_divesity(pd.Series(position_list).value_counts().values)\n\npileup = pd.read_csv(\"${pileup}\", sep=\"\\\\t\", header=None, compression=\"gzip\")\nn_reads = int(read_line(\"${stats}\", \"SN\\\\treads mapped:\"))\nreflen = int(pd.read_csv(\"${idxstats}\", sep=\"\\\\t\", header=None)[1].sum())\ncovlen = pileup[3].shape[0]\nnerror = float(read_line(\"${stats}\", \"SN\\\\terror rate:\").split(\"\\\\t\")[0])\nnbases = pileup[3].sum()\n\noutput = dict()\noutput[\"alignment_file\"] = \"${pileup}\".replace(\".pileup.gz\", \"\")\noutput[\"depth\"] = nbases / reflen\noutput[\"coverage\"] = covlen / reflen\noutput[\"error\"] = nerror\noutput[\"genome_length\"] = reflen\noutput[\"n_reads\"] = n_reads\noutput[\"entropy\"] = sdi\noutput[\"genome\"] = \"${genome_fasta_name}\"\noutput[\"input_fastq\"] = \"${input_fastq_name}\"\n\njson_fp = \"${pileup}\".replace(\".pileup.gz\", \".json\")\nassert json_fp.endswith(\".json\")\nwith open(json_fp, \"wt\") as fo:\n    fo.write(json.dumps(output, indent=4))\n\nassert os.path.exists(json_fp)\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 104,
        "string_script": "\"\"\"\n#!/usr/bin/env python3\nimport os\nimport json\nimport pandas as pd\nfrom math import log as ln\n\ndef read_line(fp, prefix):\n    with open(fp, 'rt') as f:\n        for line in f:\n            if line.startswith(prefix):\n                return line.replace(prefix, '').strip(\" \").strip(\"\\\\t\")\n\ndef parse_flags(int_flags):\n    output = dict()\n    for n, flag in [\n        (2048, \"supplementary\"),\n        (1024, \"duplicate\"),\n        (512, \"fail_filter\"),\n        (256, \"secondary\"),\n        (128, \"last\"),\n        (64, \"first\"),\n        (32, \"next_rc\"),\n        (16, \"rc\"),\n        (8, \"next_unmapped\"),\n        (4, \"unmapped\"),\n        (2, \"aligned_properly\"),\n        (1, \"multiple_segments\"),\n    ]:\n        if int_flags >= n:\n            output[flag] = True\n            int_flags = int_flags - n\n        else:\n            output[flag] = False\n    assert int_flags == 0, int_flags\n    return output\n\n\ndef shannon_divesity(counts):\n    # See https://gist.github.com/audy/783125\n    \n    def p(n, N):\n        # Relative abundance\n        if n is 0:\n            return 0\n        else:\n            return (float(n)/N) * ln(float(n)/N)\n            \n    N = sum(counts)\n    \n    return -sum(p(n, N) for n in counts if n is not 0)\n\n\n# Read in the summary of alignment positions\npositions = pd.read_csv(\"${positions}\", sep=\"\\\\t\", header=None)\npositions = pd.concat([positions, pd.DataFrame(map(parse_flags, positions[0]))], axis=1)\n# If the read is aligned in the forward direction, use the leftmost position, otherwise use the rightmost\nposition_list = positions.apply(\n    lambda r: r[1] + r[2] if r[\"rc\"] else r[1],\n    axis=1\n).tolist()\n\n# Calculate Shannon diversity\nsdi = shannon_divesity(pd.Series(position_list).value_counts().values)\n\npileup = pd.read_csv(\"${pileup}\", sep=\"\\\\t\", header=None, compression=\"gzip\")\nn_reads = int(read_line(\"${stats}\", \"SN\\\\treads mapped:\"))\nreflen = int(pd.read_csv(\"${idxstats}\", sep=\"\\\\t\", header=None)[1].sum())\ncovlen = pileup[3].shape[0]\nnerror = float(read_line(\"${stats}\", \"SN\\\\terror rate:\").split(\"\\\\t\")[0])\nnbases = pileup[3].sum()\n\noutput = dict()\noutput[\"alignment_file\"] = \"${pileup}\".replace(\".pileup.gz\", \"\")\noutput[\"depth\"] = nbases / reflen\noutput[\"coverage\"] = covlen / reflen\noutput[\"error\"] = nerror\noutput[\"genome_length\"] = reflen\noutput[\"n_reads\"] = n_reads\noutput[\"entropy\"] = sdi\noutput[\"genome\"] = \"${genome_fasta_name}\"\noutput[\"input_fastq\"] = \"${input_fastq_name}\"\n\njson_fp = \"${pileup}\".replace(\".pileup.gz\", \".json\")\nassert json_fp.endswith(\".json\")\nwith open(json_fp, \"wt\") as fo:\n    fo.write(json.dumps(output, indent=4))\n\nassert os.path.exists(json_fp)\n\n  \"\"\"",
        "nb_lignes_script": 90,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "stats_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "all_stats_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__nf-core-aligngenomes",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"",
            "errorStrategy 'retry'"
        ],
        "when": "",
        "stub": ""
    },
    "countReads": {
        "name_process": "countReads",
        "string_process": "\nprocess countReads {\n  container \"ubuntu:16.04\"\n  errorStrategy 'retry'\n  \n  input:\n  file fastq from reads_for_counting\n  \n  output:\n  file \"${fastq}.counts.csv\" into counts_ch\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\ngzip -t \"${fastq}\"\n\nn=\\$(gunzip -c \"${fastq}\" | awk 'NR % 4 == 1' | wc -l)\n\n(( \\$n > 0 ))\n\necho \"${fastq.name.replaceAll('.unique.headers.fastq.gz', '')},\\$n\" > \"${fastq}.counts.csv\"\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\ngzip -t \"${fastq}\"\n\nn=\\$(gunzip -c \"${fastq}\" | awk 'NR % 4 == 1' | wc -l)\n\n(( \\$n > 0 ))\n\necho \"${fastq.name.replaceAll('.unique.headers.fastq.gz', '')},\\$n\" > \"${fastq}.counts.csv\"\n\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads_for_counting"
        ],
        "nb_inputs": 1,
        "outputs": [
            "counts_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__nf-core-aligngenomes",
        "directive": [
            "container \"ubuntu:16.04\"",
            "errorStrategy 'retry'"
        ],
        "when": "",
        "stub": ""
    },
    "collectPileups": {
        "name_process": "collectPileups",
        "string_process": "\nprocess collectPileups {\n  container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"\n  publishDir \"${params.outdir}/\"\n  errorStrategy 'retry'\n  \n  input:\n  set val(genome_name), file(list_of_pileup_files) from pileup_ch.groupTuple()\n  \n  output:\n  file \"${genome_name}.depths.csv.gz\"\n\n  afterScript \"rm *\"\n\n  \"\"\"\n#!/usr/bin/env python3\n\nimport pandas as pd\nimport os\n\nlist_of_pileup_files = \"${list_of_pileup_files}\".split(\" \")\n\n# Make sure all of the files are present\nfor fp in list_of_pileup_files:\n    assert os.path.exists(fp)\n\n# Keep track of all of the sequencing depth values\ndepth_df = {}\n\n# Read in each pileup file\nfor fp in list_of_pileup_files:\n    # Extrapolate the sample name from the file name\n    sample_name = fp.replace(\".bam.pileup.gz\", \"\")\n    sample_name = sample_name.replace(\".${genome_name}\", \"\")\n    sample_name = sample_name.replace(\".unique.headers.fastq.gz\", \"\")\n\n    # Store the depth of sequencing indexed by contig and position\n    depth_df[sample_name] = pd.read_csv(\n        fp, \n        sep=\"\\\\t\",\n        header=None,\n        compression=\"gzip\"\n    ).rename(columns=dict(zip(\n        [0, 1, 2, 3],\n        [\"ref\", \"pos\", \"base\", \"depth\"]\n    ))).set_index(\n        [\"ref\", \"pos\"]\n    )[\"depth\"]\n\n# Make a DataFrame of the entire dataset\ndepth_df = pd.DataFrame(\n    depth_df\n).fillna(0).reset_index()\n\n# Save to a file\ndepth_df.to_csv(\n    \"${genome_name}.depths.csv.gz\",\n    sep=\",\",\n    compression=\"gzip\",\n    index=None\n)\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 63,
        "string_script": "\"\"\"\n#!/usr/bin/env python3\n\nimport pandas as pd\nimport os\n\nlist_of_pileup_files = \"${list_of_pileup_files}\".split(\" \")\n\n# Make sure all of the files are present\nfor fp in list_of_pileup_files:\n    assert os.path.exists(fp)\n\n# Keep track of all of the sequencing depth values\ndepth_df = {}\n\n# Read in each pileup file\nfor fp in list_of_pileup_files:\n    # Extrapolate the sample name from the file name\n    sample_name = fp.replace(\".bam.pileup.gz\", \"\")\n    sample_name = sample_name.replace(\".${genome_name}\", \"\")\n    sample_name = sample_name.replace(\".unique.headers.fastq.gz\", \"\")\n\n    # Store the depth of sequencing indexed by contig and position\n    depth_df[sample_name] = pd.read_csv(\n        fp, \n        sep=\"\\\\t\",\n        header=None,\n        compression=\"gzip\"\n    ).rename(columns=dict(zip(\n        [0, 1, 2, 3],\n        [\"ref\", \"pos\", \"base\", \"depth\"]\n    ))).set_index(\n        [\"ref\", \"pos\"]\n    )[\"depth\"]\n\n# Make a DataFrame of the entire dataset\ndepth_df = pd.DataFrame(\n    depth_df\n).fillna(0).reset_index()\n\n# Save to a file\ndepth_df.to_csv(\n    \"${genome_name}.depths.csv.gz\",\n    sep=\",\",\n    compression=\"gzip\",\n    index=None\n)\n\n  \"\"\"",
        "nb_lignes_script": 48,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pileup_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__nf-core-aligngenomes",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"",
            "publishDir \"${params.outdir}/\"",
            "errorStrategy 'retry'"
        ],
        "when": "",
        "stub": ""
    },
    "collectCounts": {
        "name_process": "collectCounts",
        "string_process": "\nprocess collectCounts {\n  container \"ubuntu:16.04\"\n  errorStrategy 'retry'\n\n  input:\n  file readcounts from counts_ch.collect()\n  \n  output:\n  file \"readcounts.csv\" into readcounts_csv\n\n  afterScript \"rm -r *\"\n\n  \"\"\"\n#!/bin/bash\n\nset -e\n\nfor fp in ${readcounts}; do\n  [ -s \\$fp ]\ndone\n\necho file,n_reads > TEMP\ncat *csv >> TEMP && rm *csv && mv TEMP readcounts.csv\n  \"\"\"\n\n}",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n#!/bin/bash\n\nset -e\n\nfor fp in ${readcounts}; do\n  [ -s \\$fp ]\ndone\n\necho file,n_reads > TEMP\ncat *csv >> TEMP && rm *csv && mv TEMP readcounts.csv\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "TEMP"
        ],
        "tools_url": [
            "https://bio.tools/temp"
        ],
        "tools_dico": [
            {
                "name": "TEMP",
                "uri": "https://bio.tools/temp",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0427",
                                    "term": "Transposon prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A software package for detecting transposable elements (TEs) insertions and excisions from pooled high-throughput sequencing data.",
                "homepage": "https://github.com/JialiUMassWengLab/TEMP"
            }
        ],
        "inputs": [
            "counts_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "readcounts_csv"
        ],
        "nb_outputs": 1,
        "name_workflow": "FredHutch__nf-core-aligngenomes",
        "directive": [
            "container \"ubuntu:16.04\"",
            "errorStrategy 'retry'"
        ],
        "when": "",
        "stub": ""
    },
    "collectAll": {
        "name_process": "collectAll",
        "string_process": "\nprocess collectAll {\n  container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"\n  publishDir \"${params.outdir}/\"\n  errorStrategy 'retry'\n\n  input:\n  file all_jsons from all_stats_ch.collect()\n  file readcounts_csv\n  \n  output:\n  file \"${params.output_csv}\"\n\n  afterScript \"rm -r *\"\n\n  \"\"\"\n#!/usr/bin/env python3\nimport os\nimport json\nimport pandas as pd\n\nreadcounts = pd.read_csv(\"${readcounts_csv}\").set_index(\n    \"file\"\n)[\"n_reads\"].to_dict()\n\ndf = pd.DataFrame([\n    json.load(open(fp, \"rt\"))\n    for fp in \"${all_jsons}\".split(\" \")\n    if fp.endswith(\".json\")\n])\n\ndf[\"total_reads\"] = df[\"input_fastq\"].apply(readcounts.get)\nassert df[\"total_reads\"].isnull().sum() == 0\nassert (df[\"total_reads\"] > 0).all()\ndf[\"prop_reads\"] = df[\"n_reads\"] / df[\"total_reads\"]\n\ndf.to_csv(\"${params.output_csv}\", index=None)\n\n\"\"\"\n\n}",
        "nb_lignes_process": 39,
        "string_script": "\"\"\"\n#!/usr/bin/env python3\nimport os\nimport json\nimport pandas as pd\n\nreadcounts = pd.read_csv(\"${readcounts_csv}\").set_index(\n    \"file\"\n)[\"n_reads\"].to_dict()\n\ndf = pd.DataFrame([\n    json.load(open(fp, \"rt\"))\n    for fp in \"${all_jsons}\".split(\" \")\n    if fp.endswith(\".json\")\n])\n\ndf[\"total_reads\"] = df[\"input_fastq\"].apply(readcounts.get)\nassert df[\"total_reads\"].isnull().sum() == 0\nassert (df[\"total_reads\"] > 0).all()\ndf[\"prop_reads\"] = df[\"n_reads\"] / df[\"total_reads\"]\n\ndf.to_csv(\"${params.output_csv}\", index=None)\n\n\"\"\"",
        "nb_lignes_script": 23,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_stats_ch",
            "readcounts_csv"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "FredHutch__nf-core-aligngenomes",
        "directive": [
            "container \"quay.io/fhcrc-microbiome/python-pandas:v0.24.2\"",
            "publishDir \"${params.outdir}/\"",
            "errorStrategy 'retry'"
        ],
        "when": "",
        "stub": ""
    }
}
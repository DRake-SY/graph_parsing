{
    "assembly": {
        "name_process": "assembly",
        "string_process": "\nprocess assembly {\n                                                 \n    label 'shovill'\n    publishDir \"${params.results}\", mode: 'copy', overwrite: true\n               \n                     \n\n    input:\n        tuple(val(name), path(genomes))\n\n    output:\n        tuple(val(name), path(\"*.fasta\"))\n\n    \"\"\"\n    shovill --R1 ${genomes[0]} --R2 ${genomes[1]} --gsize 5M --assembler megahit --trim --outdir assembly --minlen ${params.minlen} --cpus ${task.cpus} --force\n    mv assembly/contigs.fa ${name}.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    shovill --R1 ${genomes[0]} --R2 ${genomes[1]} --gsize 5M --assembler megahit --trim --outdir assembly --minlen ${params.minlen} --cpus ${task.cpus} --force\n    mv assembly/contigs.fa ${name}.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "shovill"
        ],
        "tools_url": [
            "https://bio.tools/shovill"
        ],
        "tools_dico": [
            {
                "name": "shovill",
                "uri": "https://bio.tools/shovill",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Shovill is a pipeline for assembly of bacterial isolate genomes from Illumina paired-end reads.  Shovill uses SPAdes at its core, but alters the steps before and after the primary assembly step to get similar results in less time. Shovill also supports other assemblers like SKESA, Velvet and Megahit, so you can take advantage of the pre- and post-processing the Shovill provides with those too.",
                "homepage": "https://github.com/tseemann/shovill"
            }
        ],
        "inputs": [
            "name",
            "genomes"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "phiweger__isolate_pe",
        "directive": [
            "label 'shovill'",
            "publishDir \"${params.results}\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "annotate": {
        "name_process": "annotate",
        "string_process": "\nprocess annotate {\n                                                 \n    label 'prokka'\n    publishDir \"${params.results}\", mode: 'copy', overwrite: true\n               \n\n    input:\n        tuple(val(name), path(genomes))\n\n    output:\n        tuple(val(name), path(\"${name}.gff\"))\n        tuple(val(name), path(\"${name}.faa\"), emit: 'proteins')\n\n    \"\"\"\n    prokka --mincontiglen ${params.minlen} --cpus ${task.cpus} --outdir anno --prefix ${name} ${genomes}\n    cp anno/${name}.gff ${name}.gff\n    cp anno/${name}.faa ${name}.faa\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    prokka --mincontiglen ${params.minlen} --cpus ${task.cpus} --outdir anno --prefix ${name} ${genomes}\n    cp anno/${name}.gff ${name}.gff\n    cp anno/${name}.faa ${name}.faa\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "name",
            "genomes"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name",
            "name"
        ],
        "nb_outputs": 2,
        "name_workflow": "phiweger__isolate_pe",
        "directive": [
            "label 'prokka'",
            "publishDir \"${params.results}\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "checkm": {
        "name_process": "checkm",
        "string_process": "\nprocess checkm {\n      \n                           \n\n                                                                     \n      \n                                                \n                \n    publishDir \"${params.results}/checkm/${name}/\", mode: 'copy', pattern: \"summary.txt\"\n    publishDir \"${params.results}/checkm/${name}/\", mode: 'copy', pattern: \"taxonomy.txt\"\n    publishDir \"${params.results}/checkm/${name}/\", mode: 'copy', pattern: \"*_checkm\"\n    errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }\n    maxRetries = 5\n    label 'checkm'\n                \n                     \n\n    input:\n        tuple val(name), path(assembly)\n    \n    output:\n        tuple val(name), path(\"summary.txt\")\n        tuple path(\"${name}_checkm\"), path(\"taxonomy.txt\")\n    \n    \"\"\"\n    mkdir tmp\n    mkdir input\n    cp ${assembly} input/assembly.fa\n    checkm lineage_wf --tmpdir tmp --pplacer_threads 4 -t ${task.cpus} --reduced_tree -x fa input ${name}_checkm > summary.txt\n    checkm tree_qa ${name}_checkm > taxonomy.txt\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "\"\"\"\n    mkdir tmp\n    mkdir input\n    cp ${assembly} input/assembly.fa\n    checkm lineage_wf --tmpdir tmp --pplacer_threads 4 -t ${task.cpus} --reduced_tree -x fa input ${name}_checkm > summary.txt\n    checkm tree_qa ${name}_checkm > taxonomy.txt\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "assembly"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "phiweger__isolate_pe",
        "directive": [
            "publishDir \"${params.results}/checkm/${name}/\", mode: 'copy', pattern: \"summary.txt\"",
            "publishDir \"${params.results}/checkm/${name}/\", mode: 'copy', pattern: \"taxonomy.txt\"",
            "publishDir \"${params.results}/checkm/${name}/\", mode: 'copy', pattern: \"*_checkm\"",
            "errorStrategy = { task.exitStatus==14 ? 'retry' : 'terminate' }",
            "maxRetries = 5",
            "label 'checkm'"
        ],
        "when": "",
        "stub": ""
    },
    "concern": {
        "name_process": "concern",
        "string_process": "\nprocess concern {\n    container 'nanozoo/mmseqs2:11.e1a1c--55acb62'\n    publishDir \"${params.results}\", mode: 'copy', overwrite: true\n                                 \n    \n    input:\n        tuple(val(name), path(proteins), path(db))\n\n    output:\n        tuple(val(name), path('aln.m8'))\n\n    \"\"\"\n    mmseqs easy-search --max-accept 1 --min-seq-id 0.8 -c 0.5 ${proteins} ${db} aln.m8 tmp\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    mmseqs easy-search --max-accept 1 --min-seq-id 0.8 -c 0.5 ${proteins} ${db} aln.m8 tmp\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MMseqs"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            }
        ],
        "inputs": [
            "name",
            "proteins",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "phiweger__isolate_pe",
        "directive": [
            "container 'nanozoo/mmseqs2:11.e1a1c--55acb62'",
            "publishDir \"${params.results}\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    }
}
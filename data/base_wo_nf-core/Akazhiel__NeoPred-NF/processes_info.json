{
    "FEATURECOUNTS": {
        "name_process": "FEATURECOUNTS",
        "string_process": "\nprocess FEATURECOUNTS {\n    tag \"$meta.id\"\n    label 'process_medium'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path(annotation)\n\n    output:\n    tuple val(meta), path(\"*.gene.counts\"), emit: counts\n    tuple val(meta), path(\"*.gene.counts\"), emit: summary\n    path \"*.version.txt\"                  , emit: version\n\n    script:\n    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def paired_end = '-p'\n\n    \"\"\"\n    featureCounts \\\\\n        $options.args \\\\\n        $paired_end \\\\\n        -T $task.cpus \\\\\n        -a $annotation \\\\\n        -o ${prefix}.gene.counts \\\\\n        ${bam}\n\n    echo \\$(featureCounts -v 2>&1) | sed 's/featureCounts v//g'> ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def paired_end = '-p'\n\n    \"\"\"\n    featureCounts \\\\\n        $options.args \\\\\n        $paired_end \\\\\n        -T $task.cpus \\\\\n        -a $annotation \\\\\n        -o ${prefix}.gene.counts \\\\\n        ${bam}\n\n    echo \\$(featureCounts -v 2>&1) | sed 's/featureCounts v//g'> ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "annotation"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "STRELKA_FILTER_SNV": {
        "name_process": "STRELKA_FILTER_SNV",
        "string_process": "\nprocess STRELKA_FILTER_SNV {\n    tag \"Strelka_snv_filtering\"\n    label 'process_low'\n                                     \n                                         \n                                                                                                                                                                          \n\n    input:\n    tuple val(meta), path(strelka_snv_vcf)\n\n    output:\n    tuple val(meta), path(\"*.vcf\")      , emit: vcf\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${strelka_snv_vcf.getBaseName(times=2)}${options.suffix}\" : \"${strelka_snv_vcf.getBaseName(times=2)}\"\n\n    \"\"\"\n    strelka_snv_filter.py ${strelka_snv_vcf} ${prefix}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${strelka_snv_vcf.getBaseName(times=2)}${options.suffix}\" : \"${strelka_snv_vcf.getBaseName(times=2)}\"\n\n    \"\"\"\n    strelka_snv_filter.py ${strelka_snv_vcf} ${prefix}.vcf\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "strelka_snv_vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"Strelka_snv_filtering\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "VARSCAN_FILTER": {
        "name_process": "VARSCAN_FILTER",
        "string_process": "\nprocess VARSCAN_FILTER {\n    tag \"Varscan_filtering\"\n    label 'process_low'\n                                     \n                                         \n                                                                                                                                                                          \n\n    input:\n    tuple val(meta), path(varscan_vcf)\n\n    output:\n    tuple val(meta), path(\"*snp_filtered.vcf\")  , optional: true      , emit: snv_vcf\n    tuple val(meta), path(\"*indel_filtered.vcf\"), optional: true      , emit: indel_vcf\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${varscan_vcf.baseName}${options.suffix}\" : \"${varscan_vcf.baseName}\"\n\n    \"\"\"\n    varscan_filter.py ${varscan_vcf}\n\n    awk '{if (\\$1 ~ /#/) {print} else if (\\$4 != \\$5) {gsub(/W|K|B|Y|D|H|V|R|S|M/,\"N\",\\$4); OFS=\"\\t\"; print}}' tmp_varscan.vcf > ${prefix}.vcf\n\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${varscan_vcf.baseName}${options.suffix}\" : \"${varscan_vcf.baseName}\"\n\n    \"\"\"\n    varscan_filter.py ${varscan_vcf}\n\n    awk '{if (\\$1 ~ /#/) {print} else if (\\$4 != \\$5) {gsub(/W|K|B|Y|D|H|V|R|S|M/,\"N\",\\$4); OFS=\"\\t\"; print}}' tmp_varscan.vcf > ${prefix}.vcf\n\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "varscan_vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"Varscan_filtering\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "GATK4_APPLYBQSR": {
        "name_process": "GATK4_APPLYBQSR",
        "string_process": "\nprocess GATK4_APPLYBQSR {\n    tag \"$meta.id\"\n    label 'process_low'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(bam), path(bai), path(bqsr_table)\n    path(fasta)\n    path(fastaidx)\n    path(dict)\n\n    output:\n    tuple val(meta), path(\"*.bam\"), path(\"*.bai\") , emit: bam\n    path \"*.version.txt\"                          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \n    if (meta.type == \"dna\") {\n    \"\"\"\n    gatk ApplyBQSR \\\\\n        -R $fasta \\\\\n        -I $bam \\\\\n        --bqsr-recal-file $bqsr_table \\\\\n        --tmp-dir . \\\\\n        -O ${prefix}.bam \\\\\n        $options.args\n    echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n    } else {\n    \"\"\"\n    gatk ApplyBQSR \\\\\n        -R $fasta \\\\\n        -I $bam \\\\\n        --add-output-sam-program-record \\\\\n        --bqsr-recal-file $bqsr_table \\\\\n        --tmp-dir . \\\\\n        -O ${prefix}.bam \\\\\n        $options.args\n    echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n    }\n    \n}",
        "nb_lignes_process": 46,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \n    if (meta.type == \"dna\") {\n    \"\"\"\n    gatk ApplyBQSR \\\\\n        -R $fasta \\\\\n        -I $bam \\\\\n        --bqsr-recal-file $bqsr_table \\\\\n        --tmp-dir . \\\\\n        -O ${prefix}.bam \\\\\n        $options.args\n    echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n    } else {\n    \"\"\"\n    gatk ApplyBQSR \\\\\n        -R $fasta \\\\\n        -I $bam \\\\\n        --add-output-sam-program-record \\\\\n        --bqsr-recal-file $bqsr_table \\\\\n        --tmp-dir . \\\\\n        -O ${prefix}.bam \\\\\n        $options.args\n    echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n    }",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "bqsr_table",
            "fasta",
            "fastaidx",
            "dict"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_VARIANTS": {
        "name_process": "MERGE_VARIANTS",
        "string_process": "\nprocess MERGE_VARIANTS {\n    tag \"Merge_variants\"\n    label 'process_low'\n    publishDir \"${params.outdir}/${patient}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'overlap_merge', meta:patient, publish_by_meta:[]) }\n\n    input:\n    tuple val(patient), val(tumor_dna), path(vcfs_dna), val(tumor_rna), path(vcfs_rna), path(counts)\n    val dna_tumor_cov     \n    val dna_tumor_depth   \n    val dna_tumor_vaf     \n    val dna_normal_cov    \n    val dna_normal_vaf    \n    val tumor_normal_ratio\n    val dna_snv_callers   \n    val dna_indel_callers \n    val rna_tumor_cov     \n    val rna_tumor_depth   \n    val rna_tumor_vaf     \n    val rna_callers    \n    path cdna_dict\n    path aa_dict   \n\n    output:\n    tuple val(patient), path(\"*_final.txt\"),                        emit: overlap_final\n    tuple val(patient), path(\"*_final_rna_unique.txt\"),             emit: overlap_rna\n    tuple val(patient), path(\"*_final_discarded.txt\"),              emit: overlap_discarded\n    tuple val(patient), path(\"*_rna_unique_discarded.txt\"),         emit: overlap_rna_discarded\n    tuple val(patient), path(\"*.gene.counts.final\"), optional:true, emit: final_counts\n\n    script:\n    def software    = getSoftwareName(task.process)\n    def vcf_dna     = vcfs_dna  ? \"--dna \" + vcfs_dna.join(' ')         : ''\n    def samples_dna = tumor_dna ? \"--dna-names \" + tumor_dna.join(' ')  : ''\n    def vcf_rna     = vcfs_rna  ? \"--rna \" + vcfs_rna.join(' ')         : ''\n    def samples_rna = tumor_rna ? \"--rna-names \" + tumor_rna.join(' ')  : ''\n    def rna_counts  = counts    ? \"--rna-counts \" + counts.join(' ')    : ''\n\n    \"\"\"\n    merge_variants.py \\\\\n        $vcf_dna \\\\\n        $samples_dna \\\\\n        $vcf_rna \\\\\n        $samples_rna \\\\\n        $rna_counts \\\\\n        --filter-dna-tumor-cov $dna_tumor_cov \\\\\n        --filter-dna-tumor-depth $dna_tumor_depth \\\\\n        --filter-dna-tumor-vaf $dna_tumor_vaf \\\\\n        --filter-dna-normal-cov $dna_normal_cov \\\\\n        --filter-dna-normal-vaf $dna_normal_vaf \\\\\n        --filter-dna-tn-ratio $tumor_normal_ratio \\\\\n        --filter-dna-snv-callers $dna_snv_callers \\\\\n        --filter-dna-indel-callers $dna_indel_callers \\\\\n        --filter-rna-tumor-cov $rna_tumor_cov \\\\\n        --filter-rna-tumor-depth $rna_tumor_depth \\\\\n        --filter-rna-tumor-vaf $rna_tumor_vaf \\\\\n        --filter-rna-callers $rna_callers \\\\\n        --ensembl-version $params.pyensembl \\\\\n        --dictAA $aa_dict \\\\\n        --dictcDNA $cdna_dict\n    \"\"\"\n}",
        "nb_lignes_process": 62,
        "string_script": "    def software    = getSoftwareName(task.process)\n    def vcf_dna     = vcfs_dna  ? \"--dna \" + vcfs_dna.join(' ')         : ''\n    def samples_dna = tumor_dna ? \"--dna-names \" + tumor_dna.join(' ')  : ''\n    def vcf_rna     = vcfs_rna  ? \"--rna \" + vcfs_rna.join(' ')         : ''\n    def samples_rna = tumor_rna ? \"--rna-names \" + tumor_rna.join(' ')  : ''\n    def rna_counts  = counts    ? \"--rna-counts \" + counts.join(' ')    : ''\n\n    \"\"\"\n    merge_variants.py \\\\\n        $vcf_dna \\\\\n        $samples_dna \\\\\n        $vcf_rna \\\\\n        $samples_rna \\\\\n        $rna_counts \\\\\n        --filter-dna-tumor-cov $dna_tumor_cov \\\\\n        --filter-dna-tumor-depth $dna_tumor_depth \\\\\n        --filter-dna-tumor-vaf $dna_tumor_vaf \\\\\n        --filter-dna-normal-cov $dna_normal_cov \\\\\n        --filter-dna-normal-vaf $dna_normal_vaf \\\\\n        --filter-dna-tn-ratio $tumor_normal_ratio \\\\\n        --filter-dna-snv-callers $dna_snv_callers \\\\\n        --filter-dna-indel-callers $dna_indel_callers \\\\\n        --filter-rna-tumor-cov $rna_tumor_cov \\\\\n        --filter-rna-tumor-depth $rna_tumor_depth \\\\\n        --filter-rna-tumor-vaf $rna_tumor_vaf \\\\\n        --filter-rna-callers $rna_callers \\\\\n        --ensembl-version $params.pyensembl \\\\\n        --dictAA $aa_dict \\\\\n        --dictcDNA $cdna_dict\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "patient",
            "tumor_dna",
            "tumor_rna",
            "vcfs_dna",
            "vcfs_rna",
            "counts",
            "dna_tumor_cov",
            "dna_tumor_depth",
            "dna_tumor_vaf",
            "dna_normal_cov",
            "dna_normal_vaf",
            "tumor_normal_ratio",
            "dna_snv_callers",
            "dna_indel_callers",
            "rna_tumor_cov",
            "rna_tumor_depth",
            "rna_tumor_vaf",
            "rna_callers",
            "cdna_dict",
            "aa_dict"
        ],
        "nb_inputs": 20,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"Merge_variants\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}/${patient}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'overlap_merge', meta:patient, publish_by_meta:[]) }"
        ],
        "when": "",
        "stub": ""
    },
    "QUALIMAP_BAMQC": {
        "name_process": "QUALIMAP_BAMQC",
        "string_process": "\nprocess QUALIMAP_BAMQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n                                     \n                                         \n                                                                                                                                                                  \n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path gff\n    val use_gff\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"*.version.txt\"             , emit: version\n\n    script:\n    def software       = getSoftwareName(task.process)\n    prefix             = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def collect_pairs = meta.single_end ? '' : '--collect-overlap-pairs'\n    def memory        = task.memory.toGiga() + \"G\"\n    def regions       = use_gff ? \"--gff $gff\" : ''\n\n    def strandedness = 'non-strand-specific'\n\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        bamqc \\\\\n        $options.args \\\\\n        -bam $bam \\\\\n        $regions \\\\\n        -p $strandedness \\\\\n        $collect_pairs \\\\\n        -outdir $prefix \\\\\n        -nt $task.cpus\n    echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def software       = getSoftwareName(task.process)\n    prefix             = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def collect_pairs = meta.single_end ? '' : '--collect-overlap-pairs'\n    def memory        = task.memory.toGiga() + \"G\"\n    def regions       = use_gff ? \"--gff $gff\" : ''\n\n    def strandedness = 'non-strand-specific'\n\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        bamqc \\\\\n        $options.args \\\\\n        -bam $bam \\\\\n        $regions \\\\\n        -p $strandedness \\\\\n        $collect_pairs \\\\\n        -outdir $prefix \\\\\n        -nt $task.cpus\n    echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "QualiMap"
        ],
        "tools_url": [
            "https://bio.tools/qualimap"
        ],
        "tools_dico": [
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "gff",
            "use_gff"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "HAPLOTYPECALLER_FILTER": {
        "name_process": "HAPLOTYPECALLER_FILTER",
        "string_process": "\nprocess HAPLOTYPECALLER_FILTER {\n    tag \"$meta.id\"\n    label 'process_high'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(vcf), path(idx)\n    path(fasta)\n    path(fai)\n    path(dict)\n\n    output:\n    tuple val(meta), path(\"*.vcf\"), emit: vcf\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${vcf.baseName}${options.suffix}\" : \"${vcf}\"\n\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        VariantFiltration \\\n        --reference ${fasta}\\\n        --variant ${vcf} \\\n        $options.args \\\n        --output ${prefix}.vcf\n\n    echo \\$(gatk VariantFiltration --version 2>&1) | sed 's/^.*(GATK) v//; s/ HTSJDK.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${vcf.baseName}${options.suffix}\" : \"${vcf}\"\n\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        VariantFiltration \\\n        --reference ${fasta}\\\n        --variant ${vcf} \\\n        $options.args \\\n        --output ${prefix}.vcf\n\n    echo \\$(gatk VariantFiltration --version 2>&1) | sed 's/^.*(GATK) v//; s/ HTSJDK.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "idx",
            "fasta",
            "fai",
            "dict"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'"
        ],
        "when": "",
        "stub": ""
    },
    "QUALIMAP_BAMQC_RNA": {
        "name_process": "QUALIMAP_BAMQC_RNA",
        "string_process": "\nprocess QUALIMAP_BAMQC_RNA {\n    tag \"$meta.id\"\n    label 'process_medium'\n                                     \n                                         \n                                                                                                                                                                  \n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path gff\n\n    output:\n    tuple val(meta), path(\"${prefix}\"), emit: results\n    path  \"*.version.txt\"             , emit: version\n\n    script:\n    def software       = getSoftwareName(task.process)\n    prefix             = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def memory        = task.memory.toGiga() + \"G\"\n    def regions       = \"-gtf $gff\"\n\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        rnaseq \\\\\n        $options.args2 \\\\\n        -bam $bam \\\\\n        $regions \\\\\n        -outdir $prefix\n    echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def software       = getSoftwareName(task.process)\n    prefix             = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def memory        = task.memory.toGiga() + \"G\"\n    def regions       = \"-gtf $gff\"\n\n    \"\"\"\n    unset DISPLAY\n    mkdir tmp\n    export _JAVA_OPTIONS=-Djava.io.tmpdir=./tmp\n    qualimap \\\\\n        --java-mem-size=$memory \\\\\n        rnaseq \\\\\n        $options.args2 \\\\\n        -bam $bam \\\\\n        $regions \\\\\n        -outdir $prefix\n    echo \\$(qualimap 2>&1) | sed 's/^.*QualiMap v.//; s/Built.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "QualiMap",
            "RNASEQR"
        ],
        "tools_url": [
            "https://bio.tools/qualimap",
            "https://bio.tools/rnaseqr"
        ],
        "tools_dico": [
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            },
            {
                "name": "RNASEQR",
                "uri": "https://bio.tools/rnaseqr",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Base-calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "Principal component visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Essential dynamics"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Base calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Phred base calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3185",
                                    "term": "Phred base-calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "PCA plotting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "Principal component plotting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "PCA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Principal modes"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "ED"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R package for automated two-group RNA-Seq analysis workflow.\n\nThis R package is designed for case-control RNA-Seq analysis (two-group). There are six steps: \"RNASeqRParam S4 Object Creation\", \"Environment Setup\", \"Quality Assessment\", \"Reads Alignment & Quantification\", \"Gene-level Differential Analyses\" and \"Functional Analyses\". Each step corresponds to a function in this package. After running functions in order, a basic RNASeq analysis would be done easily.",
                "homepage": "https://bioconductor.org/packages/release/bioc/html/RNASeqR.html"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "gff"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "COMBINE_VARIANTS": {
        "name_process": "COMBINE_VARIANTS",
        "string_process": "\nprocess COMBINE_VARIANTS {\n    tag \"Combine_variants\"\n    label 'process_low'\n                                     \n                                         \n                                                                                                                                                                          \n\n    input:\n    path(fasta)\n    path(fai)\n    path(dict)\n    tuple val(meta), path(mutect2_filtered), path(somaticsniper_filtered), path(strelka_indel_filtered), path(strelka_snv_filtered), path(varscan_indel_filtered), path(varscan_snv_filtered)\n\n    output:\n    tuple val(meta), path(\"*_combined_calls.vcf\"), path(\"*_combined_calls.vcf.idx\")      , emit: vcf\n    path \"*.version.txt\"                                                                 , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gatk3 -T CombineVariants \\\\\n        -R $fasta \\\\\n        -V:varscan_indel $varscan_indel_filtered \\\\\n        -V:varscan $varscan_snv_filtered \\\\\n        -V:strelka_indel $strelka_indel_filtered \\\\\n        -V:strelka $strelka_snv_filtered \\\\\n        -V:mutect $mutect2_filtered \\\\\n        -V:somaticsniper $somaticsniper_filtered \\\\\n        -o ${prefix}.vcf \\\\\n        $options.args \\\\\n        --num_threads $task.cpus\n\n    echo \\$(gatk3 -T CombineVariants --version) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gatk3 -T CombineVariants \\\\\n        -R $fasta \\\\\n        -V:varscan_indel $varscan_indel_filtered \\\\\n        -V:varscan $varscan_snv_filtered \\\\\n        -V:strelka_indel $strelka_indel_filtered \\\\\n        -V:strelka $strelka_snv_filtered \\\\\n        -V:mutect $mutect2_filtered \\\\\n        -V:somaticsniper $somaticsniper_filtered \\\\\n        -o ${prefix}.vcf \\\\\n        $options.args \\\\\n        --num_threads $task.cpus\n\n    echo \\$(gatk3 -T CombineVariants --version) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "fai",
            "dict",
            "meta",
            "mutect2_filtered",
            "somaticsniper_filtered",
            "strelka_indel_filtered",
            "strelka_snv_filtered",
            "varscan_indel_filtered",
            "varscan_snv_filtered"
        ],
        "nb_inputs": 10,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"Combine_variants\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "STAR_ALIGN": {
        "name_process": "STAR_ALIGN",
        "string_process": "\nprocess STAR_ALIGN {\n    tag \"$meta.id\"\n    label 'process_high'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n    path  gtf\n\n    output:\n    tuple val(meta), path('*d.out.bam')       , emit: bam\n    path \"*versions.txt\"                      , emit: versions\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def seq_center = \"--outSAMattrRGline ID:$prefix PU:$prefix SM:$prefix LB:$prefix PL:ILLUMINA\"\n\n    \"\"\"\n    STAR \\\\\n        --genomeDir $index \\\\\n        --readFilesIn $reads  \\\\\n        --runThreadN $task.cpus \\\\\n        --outFileNamePrefix $prefix. \\\\\n        $seq_center \\\\\n        $options.args\n\n    echo \\$(STAR --version 2>&1) > ${software}.versions.txt\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def seq_center = \"--outSAMattrRGline ID:$prefix PU:$prefix SM:$prefix LB:$prefix PL:ILLUMINA\"\n\n    \"\"\"\n    STAR \\\\\n        --genomeDir $index \\\\\n        --readFilesIn $reads  \\\\\n        --runThreadN $task.cpus \\\\\n        --outFileNamePrefix $prefix. \\\\\n        $seq_center \\\\\n        $options.args\n\n    echo \\$(STAR --version 2>&1) > ${software}.versions.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "gtf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'"
        ],
        "when": "",
        "stub": ""
    },
    "GATK4_MARKDUPLICATES": {
        "name_process": "GATK4_MARKDUPLICATES",
        "string_process": "\nprocess GATK4_MARKDUPLICATES {\n    tag \"$meta.id\"\n    label 'process_low'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(bam)\n    val use_metrics\n\n    output:\n    tuple val(meta), path(\"*.bam\"), path(\"*.bai\")      , emit: bam\n    tuple val(meta), path(\"*.metrics\"), optional : true, emit: metrics\n    path \"*.version.txt\"                               , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def metrics  = use_metrics ? \"M=${prefix}.metrics\" :''\n                                                                                   \n\n    def markdup_java_options = (task.memory.toGiga() > 8) ? params.markdup_java_options : \"\\\"-Xms\" +  (task.memory.toGiga() / 2).trunc() + \"g -Xmx\" + (task.memory.toGiga() - 1) + \"g\\\"\"\n    \"\"\"\n    gatk --java-options ${markdup_java_options} \\\\\n        MarkDuplicates \\\\\n        $metrics \\\\\n        INPUT=$bam \\\\\n        TMP_DIR=. \\\\\n        ASSUME_SORT_ORDER=coordinate \\\\\n        O=${prefix}.bam \\\\\n        $options.args\n\n    mv ${prefix}.bai ${prefix}.bam.bai\n\n    echo \\$(gatk MarkDuplicates --version 2>&1) | sed 's/^.*(GATK) v//; s/ HTSJDK.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def metrics  = use_metrics ? \"M=${prefix}.metrics\" :''\n                                                                                   \n\n    def markdup_java_options = (task.memory.toGiga() > 8) ? params.markdup_java_options : \"\\\"-Xms\" +  (task.memory.toGiga() / 2).trunc() + \"g -Xmx\" + (task.memory.toGiga() - 1) + \"g\\\"\"\n    \"\"\"\n    gatk --java-options ${markdup_java_options} \\\\\n        MarkDuplicates \\\\\n        $metrics \\\\\n        INPUT=$bam \\\\\n        TMP_DIR=. \\\\\n        ASSUME_SORT_ORDER=coordinate \\\\\n        O=${prefix}.bam \\\\\n        $options.args\n\n    mv ${prefix}.bai ${prefix}.bam.bai\n\n    echo \\$(gatk MarkDuplicates --version 2>&1) | sed 's/^.*(GATK) v//; s/ HTSJDK.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "GATK",
            "MarkDuplicates (IP)"
        ],
        "tools_url": [
            "https://bio.tools/gatk",
            "https://bio.tools/markduplicates_ip"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            },
            {
                "name": "MarkDuplicates (IP)",
                "uri": "https://bio.tools/markduplicates_ip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Marks all duplicate reads in a provided SAM or BAM file and either removes them or flags them.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=toolshed.pasteur.fr/repos/fmareuil/picard_pasteur_wrapper/rgPicardMarkDups/1.56.0"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "use_metrics"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "YARA_MAPPER": {
        "name_process": "YARA_MAPPER",
        "string_process": "\nprocess YARA_MAPPER {\n    tag \"$meta.id\"\n    label 'process_medium'\n                                     \n                                         \n                                                                                                                                                                 \n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path  index\n\n    output:\n    tuple val(meta), path(\"*.mapped.bam\") , emit: bam\n    path \"*.version.txt\"                  , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def split_cpus = Math.floor(task.cpus/2)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    samtools view -@ ${split_cpus} -h -f 0x40 $bam > output_1.bam\n    samtools view -@ ${split_cpus} -h -f 0x80 $bam > output_2.bam\n    samtools bam2fq output_1.bam > output_1.fastq\n    samtools bam2fq output_2.bam > output_2.fastq\n    yara_mapper \\\\\n        $options.args \\\\\n        -t ${task.cpus} \\\\\n        -f bam \\\\\n        ${index}/yara \\\\\n        output_1.fastq \\\\\n        output_2.fastq > output.bam\n    samtools view -@ ${split_cpus} -hF 4 -f 0x40 -b output.bam > ${prefix}_1.mapped.bam\n    samtools view -@ ${split_cpus} -hF 4 -f 0x80 -b output.bam > ${prefix}_2.mapped.bam\n    echo \\$(yara_mapper --version) | sed \"s/^.*yara_mapper version: //; s/ .*\\$//\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def software = getSoftwareName(task.process)\n    def split_cpus = Math.floor(task.cpus/2)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    samtools view -@ ${split_cpus} -h -f 0x40 $bam > output_1.bam\n    samtools view -@ ${split_cpus} -h -f 0x80 $bam > output_2.bam\n    samtools bam2fq output_1.bam > output_1.fastq\n    samtools bam2fq output_2.bam > output_2.fastq\n    yara_mapper \\\\\n        $options.args \\\\\n        -t ${task.cpus} \\\\\n        -f bam \\\\\n        ${index}/yara \\\\\n        output_1.fastq \\\\\n        output_2.fastq > output.bam\n    samtools view -@ ${split_cpus} -hF 4 -f 0x40 -b output.bam > ${prefix}_1.mapped.bam\n    samtools view -@ ${split_cpus} -hF 4 -f 0x80 -b output.bam > ${prefix}_2.mapped.bam\n    echo \\$(yara_mapper --version) | sed \"s/^.*yara_mapper version: //; s/ .*\\$//\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "yara"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/yara"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "yara",
                "uri": "https://bio.tools/yara",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Yara is an exact tool for aligning DNA sequencing reads to reference genomes.",
                "homepage": "http://www.seqan.de/yara/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "index"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "VARSCAN": {
        "name_process": "VARSCAN",
        "string_process": "\nprocess VARSCAN {\n    tag \"$meta.id\"\n    label 'process_high'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(bam_normal), path(bai_normal), path(bam_tumor), path(bai_tumor)\n    path  fasta\n    path  fai\n    path  target_bed\n    val   useBed\n\n    output:\n    tuple val(meta), path(\"*.snp.vcf\")  , emit: vcf_snvs\n    tuple val(meta), path(\"*.indel.vcf\"), emit: vcf_indels\n    path \"*.version.txt\"                , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def options_target_bed = useBed ? \"--positions ${target_bed}\" : \"\"\n\n    \"\"\"\n\n    samtools mpileup $options.args $options_target_bed -f ${fasta} ${bam_normal} > Normal.pileup\n    samtools mpileup $options.args $options_target_bed -f ${fasta} ${bam_tumor} > Tumor.pileup\n\n    varscan somatic    \\\\\n        Normal.pileup  \\\\\n        Tumor.pileup   \\\\\n        ${prefix}      \\\\\n        $options.args2\n\n    echo \\$(varscan 2>&1) | sed -e 's/^.*VarScan v//g; s/ \\\\*.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def options_target_bed = useBed ? \"--positions ${target_bed}\" : \"\"\n\n    \"\"\"\n\n    samtools mpileup $options.args $options_target_bed -f ${fasta} ${bam_normal} > Normal.pileup\n    samtools mpileup $options.args $options_target_bed -f ${fasta} ${bam_tumor} > Tumor.pileup\n\n    varscan somatic    \\\\\n        Normal.pileup  \\\\\n        Tumor.pileup   \\\\\n        ${prefix}      \\\\\n        $options.args2\n\n    echo \\$(varscan 2>&1) | sed -e 's/^.*VarScan v//g; s/ \\\\*.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "VarScan"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/varscan"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "VarScan",
                "uri": "https://bio.tools/varscan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "VarScan, an open source tool for variant detection that is compatible with several short read align-ers.",
                "homepage": "http://dkoboldt.github.io/varscan/"
            }
        ],
        "inputs": [
            "meta",
            "bam_normal",
            "bai_normal",
            "bam_tumor",
            "bai_tumor",
            "fasta",
            "fai",
            "target_bed",
            "useBed"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'"
        ],
        "when": "",
        "stub": ""
    },
    "GATK4_MARKDUPLICATES_SPARK": {
        "name_process": "GATK4_MARKDUPLICATES_SPARK",
        "string_process": "\nprocess GATK4_MARKDUPLICATES_SPARK {\n    tag \"$meta.id\"\n    label 'process_high'\n\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    input:\n    tuple val(meta), path(bam)\n    path(reference)\n    path(dict)                                 \n    path(fai)                                  \n\n    output:\n    tuple val(meta), path(\"*.bam\"), path(\"*.bai\"), emit: output\n    path(\"*.version.txt\")                              , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n                                                                            \n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def markdup_java_options = (task.memory.toGiga() > 8) ? params.markdup_java_options : \"\\\"-Xms\" +  (task.memory.toGiga() / 2).trunc() + \"g -Xmx\" + (task.memory.toGiga() - 1) + \"g\\\"\"\n    \"\"\"\n    gatk --java-options ${markdup_java_options} \\\n        MarkDuplicatesSpark \\\n        -I $bam \\\n        -O ${prefix}.bam \\\n        --reference ${reference} \\\n        --tmp-dir . \\\n        --spark-master local[${task.cpus}] \\\\\n        $options.args\n    echo \\$(gatk MarkDuplicatesSpark --version 2>&1) | sed 's/^.*(GATK) v//; s/ HTSJDK.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def software = getSoftwareName(task.process)\n                                                                            \n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    def markdup_java_options = (task.memory.toGiga() > 8) ? params.markdup_java_options : \"\\\"-Xms\" +  (task.memory.toGiga() / 2).trunc() + \"g -Xmx\" + (task.memory.toGiga() - 1) + \"g\\\"\"\n    \"\"\"\n    gatk --java-options ${markdup_java_options} \\\n        MarkDuplicatesSpark \\\n        -I $bam \\\n        -O ${prefix}.bam \\\n        --reference ${reference} \\\n        --tmp-dir . \\\n        --spark-master local[${task.cpus}] \\\\\n        $options.args\n    echo \\$(gatk MarkDuplicatesSpark --version 2>&1) | sed 's/^.*(GATK) v//; s/ HTSJDK.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "reference",
            "dict",
            "fai"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }"
        ],
        "when": "",
        "stub": ""
    },
    "BWA_MEM": {
        "name_process": "BWA_MEM",
        "string_process": "\nprocess BWA_MEM {\n    tag \"$meta.id\"\n    label 'process_high'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(reads)\n    path  index\n\n    output:\n    tuple val(meta), path(\"*.bam\"), emit: bam\n    path  \"*.version.txt\"         , emit: version\n\n    script:\n    def split_cpus = Math.floor(task.cpus/2)\n    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}.${part}\" : \"${meta.id}.\"\n    def read_group = meta.read_group ? \"-R ${meta.read_group}\" : \"\"\n    \n    println \"Mapping ${meta.patient}\"\n\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n    bwa mem \\\\\n        -t ${split_cpus} \\\\\n        $options.args \\\\\n        $read_group \\\\\n        \\$INDEX \\\\\n        $reads \\\\\n        | samtools $options.args2 --threads ${split_cpus} -o ${prefix}bam\n    echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def split_cpus = Math.floor(task.cpus/2)\n    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}.${part}\" : \"${meta.id}.\"\n    def read_group = meta.read_group ? \"-R ${meta.read_group}\" : \"\"\n    \n    println \"Mapping ${meta.patient}\"\n\n    \"\"\"\n    INDEX=`find -L ./ -name \"*.amb\" | sed 's/.amb//'`\n    bwa mem \\\\\n        -t ${split_cpus} \\\\\n        $options.args \\\\\n        $read_group \\\\\n        \\$INDEX \\\\\n        $reads \\\\\n        | samtools $options.args2 --threads ${split_cpus} -o ${prefix}bam\n    echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'"
        ],
        "when": "",
        "stub": ""
    },
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}/${meta.patient}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:meta, publish_by_meta: false) }\n\n    container \"quay.io/biocontainers/python:3.8.3\"\n\n    cache false\n\n    input:\n    tuple val(meta), path(reads)\n    path versions\n\n    output:\n    path \"software_versions.tsv\"     , emit: tsv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:                                                                       \n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "versions"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "publishDir \"${params.outdir}/${meta.patient}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:meta, publish_by_meta: false) }",
            "container \"quay.io/biocontainers/python:3.8.3\"",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "SOMATICSNIPER_FILTER": {
        "name_process": "SOMATICSNIPER_FILTER",
        "string_process": "\nprocess SOMATICSNIPER_FILTER {\n    tag \"Somaticsniper_filtering\"\n    label 'process_low'\n                                     \n                                         \n                                                                                                                                                                          \n\n    input:\n    tuple val(meta), path(somaticsniper_vcf)\n\n    output:\n    tuple val(meta), path(\"*_filtered.vcf\")      , emit: vcf\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${somaticsniper_vcf.baseName}${options.suffix}\" : \"${somaticsniper_vcf.baseName}\"\n\n    \"\"\"\n    somaticsniper_filter.py ${somaticsniper_vcf}\n\n    awk '{if (\\$1 ~ /#/) {print} else if (\\$4 != \\$5) {gsub(/W|K|B|Y|D|H|V|R|S|M/,\"N\",\\$4); OFS=\"\\t\"; print}}' tmp_ss.vcf > ${prefix}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${somaticsniper_vcf.baseName}${options.suffix}\" : \"${somaticsniper_vcf.baseName}\"\n\n    \"\"\"\n    somaticsniper_filter.py ${somaticsniper_vcf}\n\n    awk '{if (\\$1 ~ /#/) {print} else if (\\$4 != \\$5) {gsub(/W|K|B|Y|D|H|V|R|S|M/,\"N\",\\$4); OFS=\"\\t\"; print}}' tmp_ss.vcf > ${prefix}.vcf\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "somaticsniper_vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"Somaticsniper_filtering\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "STRELKA": {
        "name_process": "STRELKA",
        "string_process": "\nprocess STRELKA {\n    tag \"$meta.id\"\n    label 'process_high'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(bam_normal), path(bai_normal), path(bam_tumor), path(bai_tumor)\n    path  fasta\n    path  fai\n    path  target_bed\n    val   useBed\n\n    output:\n    tuple val(meta), path(\"*.somatic_indels.vcf.gz\")    , emit: vcf_indels\n    tuple val(meta), path(\"*.somatic_indels.vcf.gz.tbi\"), emit: vcf_indels_tbi\n    tuple val(meta), path(\"*.somatic_snvs.vcf.gz\")      , emit: vcf_snvs\n    tuple val(meta), path(\"*.somatic_snvs.vcf.gz.tbi\")  , emit: vcf_snvs_tbi\n    path \"*.version.txt\"                                , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def options_target_bed = useBed ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n    def beforeScript = params.target_bed ? \"bgzip --threads ${task.cpus} -c ${target_bed} > call_targets.bed.gz ; tabix call_targets.bed.gz\" : \"\"\n\n    \"\"\"\n    ${beforeScript}\n    configureStrelkaSomaticWorkflow.py \\\\\n        --tumor $bam_tumor \\\\\n        --normal $bam_normal \\\\\n        --referenceFasta $fasta \\\\\n        $options_target_bed \\\\\n        $options.args \\\\\n        --runDir strelka\n\n    python2 strelka/runWorkflow.py -m local -j $task.cpus\n    mv strelka/results/variants/somatic.indels.vcf.gz     ${prefix}.somatic_indels.vcf.gz\n    mv strelka/results/variants/somatic.indels.vcf.gz.tbi ${prefix}.somatic_indels.vcf.gz.tbi\n    mv strelka/results/variants/somatic.snvs.vcf.gz       ${prefix}.somatic_snvs.vcf.gz\n    mv strelka/results/variants/somatic.snvs.vcf.gz.tbi   ${prefix}.somatic_snvs.vcf.gz.tbi\n\n    echo \\$( configureStrelkaSomaticWorkflow.py --version ) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def options_target_bed = useBed ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n    def beforeScript = params.target_bed ? \"bgzip --threads ${task.cpus} -c ${target_bed} > call_targets.bed.gz ; tabix call_targets.bed.gz\" : \"\"\n\n    \"\"\"\n    ${beforeScript}\n    configureStrelkaSomaticWorkflow.py \\\\\n        --tumor $bam_tumor \\\\\n        --normal $bam_normal \\\\\n        --referenceFasta $fasta \\\\\n        $options_target_bed \\\\\n        $options.args \\\\\n        --runDir strelka\n\n    python2 strelka/runWorkflow.py -m local -j $task.cpus\n    mv strelka/results/variants/somatic.indels.vcf.gz     ${prefix}.somatic_indels.vcf.gz\n    mv strelka/results/variants/somatic.indels.vcf.gz.tbi ${prefix}.somatic_indels.vcf.gz.tbi\n    mv strelka/results/variants/somatic.snvs.vcf.gz       ${prefix}.somatic_snvs.vcf.gz\n    mv strelka/results/variants/somatic.snvs.vcf.gz.tbi   ${prefix}.somatic_snvs.vcf.gz.tbi\n\n    echo \\$( configureStrelkaSomaticWorkflow.py --version ) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam_normal",
            "bai_normal",
            "bam_tumor",
            "bai_tumor",
            "fasta",
            "fai",
            "target_bed",
            "useBed"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'"
        ],
        "when": "",
        "stub": ""
    },
    "GATK4_BASERECALIBRATOR_SPARK": {
        "name_process": "GATK4_BASERECALIBRATOR_SPARK",
        "string_process": "\nprocess GATK4_BASERECALIBRATOR_SPARK {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path fasta\n    path fai\n    path dict\n    path knownSites\n    path knownSites_tbi\n\n    output:\n    tuple val(meta), path(\"*.table\"), emit: table\n    path \"*.version.txt\" ,            emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def sitesCommand = knownSites.collect{\"--known-sites ${it}\"}.join(' ')\n\n    \"\"\"\n    gatk BaseRecalibratorSpark  \\\n        -R $fasta \\\n        -I $bam \\\n        $sitesCommand \\\n        --tmp-dir . \\\n        $options.args \\\n        -O ${prefix}.table \\\n        --spark-master local[${task.cpus}]\n    gatk --version | grep Picard | sed \"s/Picard Version: //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def sitesCommand = knownSites.collect{\"--known-sites ${it}\"}.join(' ')\n\n    \"\"\"\n    gatk BaseRecalibratorSpark  \\\n        -R $fasta \\\n        -I $bam \\\n        $sitesCommand \\\n        --tmp-dir . \\\n        $options.args \\\n        -O ${prefix}.table \\\n        --spark-master local[${task.cpus}]\n    gatk --version | grep Picard | sed \"s/Picard Version: //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "fasta",
            "fai",
            "dict",
            "knownSites",
            "knownSites_tbi"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }"
        ],
        "when": "",
        "stub": ""
    },
    "GATK4_BASERECALIBRATOR": {
        "name_process": "GATK4_BASERECALIBRATOR",
        "string_process": "\nprocess GATK4_BASERECALIBRATOR {\n    tag \"$meta.id\"\n    label 'process_low'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path fasta\n    path fai\n    path dict\n    path knownSites\n    path knownSites_tbi\n    path target_bed\n\n    output:\n    tuple val(meta), path(\"*.table\"), emit: table\n    path \"*.version.txt\" ,            emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def sitesCommand = knownSites.collect{\"--known-sites ${it}\"}.join(' ')\n    def intervals = target_bed ? \"--intervals ${target_bed}\" : \"\"\n\n    if (meta.type == \"dna\") {\n    \"\"\"\n    gatk BaseRecalibrator  \\\n        -R $fasta \\\n        -I $bam \\\n        $sitesCommand \\\n        --tmp-dir . \\\n        $options.args \\\n        $intervals \\\n        -O ${prefix}.table\n    gatk --version | grep Picard | sed \"s/Picard Version: //g\" > ${software}.version.txt\n    \"\"\"\n    } else {\n    \"\"\"\n    gatk BaseRecalibrator  \\\n        -R $fasta \\\n        -I $bam \\\n        $sitesCommand \\\n        --tmp-dir . \\\n        --use-original-qualities \\\n        $options.args \\\n        -O ${prefix}.table\n    gatk --version | grep Picard | sed \"s/Picard Version: //g\" > ${software}.version.txt\n    \"\"\"\n    }\n    \n}",
        "nb_lignes_process": 52,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def sitesCommand = knownSites.collect{\"--known-sites ${it}\"}.join(' ')\n    def intervals = target_bed ? \"--intervals ${target_bed}\" : \"\"\n\n    if (meta.type == \"dna\") {\n    \"\"\"\n    gatk BaseRecalibrator  \\\n        -R $fasta \\\n        -I $bam \\\n        $sitesCommand \\\n        --tmp-dir . \\\n        $options.args \\\n        $intervals \\\n        -O ${prefix}.table\n    gatk --version | grep Picard | sed \"s/Picard Version: //g\" > ${software}.version.txt\n    \"\"\"\n    } else {\n    \"\"\"\n    gatk BaseRecalibrator  \\\n        -R $fasta \\\n        -I $bam \\\n        $sitesCommand \\\n        --tmp-dir . \\\n        --use-original-qualities \\\n        $options.args \\\n        -O ${prefix}.table\n    gatk --version | grep Picard | sed \"s/Picard Version: //g\" > ${software}.version.txt\n    \"\"\"\n    }",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "fasta",
            "fai",
            "dict",
            "knownSites",
            "knownSites_tbi",
            "target_bed"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "HAPLOTYPECALLER": {
        "name_process": "HAPLOTYPECALLER",
        "string_process": "\nprocess HAPLOTYPECALLER {\n    tag \"$meta.id\"\n    label 'process_high'\n                                     \n                                         \n                                                                                                                                                                          \n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path(fasta)\n    path(fai)\n    path(dict)\n    path(dbsnp)\n    path(dbsnp_index)\n\n    output:\n    tuple val(meta), path(\"*.vcf\"), path(\"*.idx\")  , emit: vcf\n    path \"*.version.txt\"                           , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        HaplotypeCaller \\\n        --reference ${fasta}\\\n        --input ${bam} \\\n        --dbsnp ${dbsnp} \\\n        $options.args \\\n        --output ${prefix}.vcf\n\n    echo \\$(gatk HaplotypeCaller --version 2>&1) | sed 's/^.*(GATK) v//; s/ HTSJDK.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        HaplotypeCaller \\\n        --reference ${fasta}\\\n        --input ${bam} \\\n        --dbsnp ${dbsnp} \\\n        $options.args \\\n        --output ${prefix}.vcf\n\n    echo \\$(gatk HaplotypeCaller --version 2>&1) | sed 's/^.*(GATK) v//; s/ HTSJDK.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "fasta",
            "fai",
            "dict",
            "dbsnp",
            "dbsnp_index"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'"
        ],
        "when": "",
        "stub": ""
    },
    "MUTECT2_FILTER": {
        "name_process": "MUTECT2_FILTER",
        "string_process": "\nprocess MUTECT2_FILTER {\n    tag \"$meta.id\"\n    label 'process_low'\n                                     \n                                         \n                                                                                                                                                                          \n\n    input:\n    tuple val(meta), path(mutect_vcf), path(mutect_vcf_stats)\n    path fasta\n    path fasta_fai\n    path dict\n\n    output:\n    tuple val(meta), path(\"${prefix}.vcf\"), emit: vcf\n\n    script:\n    def software = getSoftwareName(task.process)\n    prefix   = options.suffix ? \"${mutect_vcf.baseName}${options.suffix}\" : \"${mutect_vcf.baseName}\"\n\n    \"\"\"\n    gatk FilterMutectCalls \\\\\n        --variant ${mutect_vcf} \\\\\n        --stats ${mutect_vcf_stats} \\\\\n        --output Mutect2_${meta.id}.vcf \\\\\n        --reference ${fasta}\n\n    mutect2_filter.py Mutect2_${meta.id}.vcf ${prefix}.vcf ${meta.tumor} ${meta.normal}\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def software = getSoftwareName(task.process)\n    prefix   = options.suffix ? \"${mutect_vcf.baseName}${options.suffix}\" : \"${mutect_vcf.baseName}\"\n\n    \"\"\"\n    gatk FilterMutectCalls \\\\\n        --variant ${mutect_vcf} \\\\\n        --stats ${mutect_vcf_stats} \\\\\n        --output Mutect2_${meta.id}.vcf \\\\\n        --reference ${fasta}\n\n    mutect2_filter.py Mutect2_${meta.id}.vcf ${prefix}.vcf ${meta.tumor} ${meta.normal}\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "mutect_vcf",
            "mutect_vcf_stats",
            "fasta",
            "fasta_fai",
            "dict"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "YARA_INDEX": {
        "name_process": "YARA_INDEX",
        "string_process": "\nprocess YARA_INDEX {\n    tag \"$fasta\"\n    label 'process_medium'\n                                     \n                                         \n                                                                                                                                          \n\n    input:\n    path fasta\n    tuple val(meta), path(reads)\n\n\n    output:\n    path \"yara\"             , emit: index\n    path \"*.version.txt\"    , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    mkdir yara\n    yara_indexer \\\\\n        $fasta \\\\\n        -o \"yara\"\n    mv *.{lf,rid,sa,txt}.* yara\n    cp $fasta yara/yara.fasta\n\n    echo \\$(yara_indexer --version) | sed \"s/^.*yara_indexer version: //; s/ .*\\$//\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    mkdir yara\n    yara_indexer \\\\\n        $fasta \\\\\n        -o \"yara\"\n    mv *.{lf,rid,sa,txt}.* yara\n    cp $fasta yara/yara.fasta\n\n    echo \\$(yara_indexer --version) | sed \"s/^.*yara_indexer version: //; s/ .*\\$//\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "meta",
            "reads"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "SPLITNCIGAR": {
        "name_process": "SPLITNCIGAR",
        "string_process": "\nprocess SPLITNCIGAR {\n    tag \"$meta.id\"\n    label 'process_low'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(bam), path(bai)\n    path fasta\n    path fai\n    path dict\n\n    output:\n    tuple val(meta), path(\"*.bam\"), path(\"*.bai\"), emit: bam\n    path \"*.version.txt\"                         , emit: versions\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gatk SplitNCigarReads  \\\n        --create-output-bam-index \\\n        -R $fasta \\\n        -I $bam \\\n        -O ${prefix}.bam\n    gatk --version | grep Picard | sed \"s/Picard Version: //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gatk SplitNCigarReads  \\\n        --create-output-bam-index \\\n        -R $fasta \\\n        -I $bam \\\n        -O ${prefix}.bam\n    gatk --version | grep Picard | sed \"s/Picard Version: //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "fasta",
            "fai",
            "dict"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "\nprocess FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"*.version.txt\"          , emit: version\n\n    script:\n                                                                          \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 34,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": "\nprocess SAMTOOLS_INDEX {\n    tag \"$meta.id\"\n    label 'process_low'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(input)\n\n    output:\n    tuple val(meta), path(\"*.bai\") , optional:true, emit: bai\n    tuple val(meta), path(\"*.csi\") , optional:true, emit: csi\n    tuple val(meta), path(\"*.crai\"), optional:true, emit: crai\n    path  \"*.version.txt\"                         , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    samtools index $options.args $input\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    samtools index $options.args $input\n    echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "VEP": {
        "name_process": "VEP",
        "string_process": "\nprocess VEP {\n    tag \"$meta.id\"\n    label 'process_high'\n                                     \n                                         \n                                                                                                                                                                          \n\n    container \"hla-vep:latest\"\n\n    input:\n    tuple val(meta), path(vcf), path(idx)\n    path(fasta)\n    path(cache)\n    val(cache_version)\n    val(vep_genome)\n\n    output:\n    tuple val(meta), path(\"*.ann.vcf\")  , emit: vcf\n    path \"*.version.txt\"                , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def dir_cache = cache ? \"\\${PWD}/${cache}\" : \"/.vep\"\n\n    \"\"\"\n    vep \\\\\n        -i $vcf \\\\\n        -o ${prefix}.ann.vcf \\\\\n        $options.args \\\\\n        --assembly ${params.genome} \\\\\n        --cache \\\\\n        --fasta ${fasta} \\\\\n        --cache_version $cache_version \\\\\n        --dir_cache $dir_cache \\\\\n        --fork $task.cpus \\\\\n        $options.args2\n\n    echo \\$(vep --help 2>&1) | sed 's/^.*Versions:.*ensembl-vep : //;s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def dir_cache = cache ? \"\\${PWD}/${cache}\" : \"/.vep\"\n\n    \"\"\"\n    vep \\\\\n        -i $vcf \\\\\n        -o ${prefix}.ann.vcf \\\\\n        $options.args \\\\\n        --assembly ${params.genome} \\\\\n        --cache \\\\\n        --fasta ${fasta} \\\\\n        --cache_version $cache_version \\\\\n        --dir_cache $dir_cache \\\\\n        --fork $task.cpus \\\\\n        $options.args2\n\n    echo \\$(vep --help 2>&1) | sed 's/^.*Versions:.*ensembl-vep : //;s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "fivepseq"
        ],
        "tools_url": [
            "https://bio.tools/fivepseq"
        ],
        "tools_dico": [
            {
                "name": "fivepseq",
                "uri": "https://bio.tools/fivepseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3563",
                                    "term": "RNA-seq read count analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fivepseq is a software package for analysis of 5prime endpoints distribution in RNA sequencing datasets. This is particularly useful for techniques that capture 5prime  monophosphorylated RNAs, such as 5PSeq, PARE-seq or GMUC. It may also be useful for ribosome profiling datasets and alike.",
                "homepage": "http://pelechanolab.com/software/fivepseq"
            }
        ],
        "inputs": [
            "meta",
            "vcf",
            "idx",
            "fasta",
            "cache",
            "cache_version",
            "vep_genome"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "container \"hla-vep:latest\""
        ],
        "when": "",
        "stub": ""
    },
    "TRIMGALORE": {
        "name_process": "TRIMGALORE",
        "string_process": "\nprocess TRIMGALORE {\n    tag \"$meta.id\"\n    label 'process_medium'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fq.gz\")    , emit: reads\n    tuple val(meta), path(\"*report.txt\"), emit: log\n    path \"*.version.txt\"                , emit: version\n\n    tuple val(meta), path(\"*.html\"), emit: html optional true\n    tuple val(meta), path(\"*.zip\") , emit: zip optional true\n\n    script:\n                                                                             \n                                                                                                                 \n                                                      \n    def cores = 1\n    if (task.cpus) {\n        cores = (task.cpus as int) - 4\n        if (meta.single_end) cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n    }\n\n                                                                           \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \n    \"\"\"\n    [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n    [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n    trim_galore \\\\\n        $options.args \\\\\n        --cores $cores \\\\\n        --paired \\\\\n        --gzip \\\\\n        ${prefix}_1.fastq.gz \\\\\n        ${prefix}_2.fastq.gz\n    echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def cores = 1\n    if (task.cpus) {\n        cores = (task.cpus as int) - 4\n        if (meta.single_end) cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n    }\n\n                                                                           \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \n    \"\"\"\n    [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n    [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n    trim_galore \\\\\n        $options.args \\\\\n        --cores $cores \\\\\n        --paired \\\\\n        --gzip \\\\\n        ${prefix}_1.fastq.gz \\\\\n        ${prefix}_2.fastq.gz\n    echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "CoreSlicer"
        ],
        "tools_url": [
            "https://bio.tools/CoreSlicer"
        ],
        "tools_dico": [
            {
                "name": "CoreSlicer",
                "uri": "https://bio.tools/CoreSlicer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "CT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Computed tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "TDM"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables extraction of morphomic markers from CT images by non-technically skilled clinicians.",
                "homepage": "https://coreslicer.com/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "STRELKA_FILTER_INDEL": {
        "name_process": "STRELKA_FILTER_INDEL",
        "string_process": "\nprocess STRELKA_FILTER_INDEL {\n    tag \"Strelka_indel_filtering\"\n    label 'process_low'\n                                     \n                                         \n                                                                                                                                                                          \n\n    input:\n    tuple val(meta), path(strelka_indel_vcf)\n\n    output:\n    tuple val(meta), path(\"*.vcf\")      , emit: vcf\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${strelka_indel_vcf.getBaseName(times=2)}${options.suffix}\" : \"${strelka_indel_vcf.getBaseName(times=2)}\"\n\n    \"\"\"\n    strelka_indel_filter.py ${strelka_indel_vcf} ${prefix}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${strelka_indel_vcf.getBaseName(times=2)}${options.suffix}\" : \"${strelka_indel_vcf.getBaseName(times=2)}\"\n\n    \"\"\"\n    strelka_indel_filter.py ${strelka_indel_vcf} ${prefix}.vcf\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "strelka_indel_vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"Strelka_indel_filtering\"",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "MUTECT2": {
        "name_process": "MUTECT2",
        "string_process": "\nprocess MUTECT2 {\n    tag \"$meta.id\"\n    label 'process_high'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(bam_normal), path(bai_normal), path(bam_tumor), path(bai_tumor)\n    path pon\n    path ponIndex\n    path dict\n    path fasta\n    path fai\n    path(germline_resource)\n    path(germline_resource_tbi)\n    path target_bed\n    val useBed\n\n    output:\n    tuple val(meta), path(\"*.vcf\"),       emit: vcf\n    tuple val(meta), path(\"*.vcf.stats\"), emit: vcf_stats\n    path \"*.version.txt\"                , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def intervalsOptions = useBed ? \"-L ${target_bed}\" : \"\"\n    def softClippedOption = params.ignore_soft_clipped_bases ? \"--dont-use-soft-clipped-bases true\" : \"\"\n    def PON = \"--panel-of-normals ${pon}\"\n\n    \"\"\"\n    # Get raw calls\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        Mutect2 \\\n        -R ${fasta}\\\n        -I ${bam_tumor} -tumor ${meta.tumor} \\\n        -I ${bam_normal} -normal ${meta.normal} \\\n        ${intervalsOptions} \\\n        ${softClippedOption} \\\n        --germline-resource ${germline_resource} \\\n        ${PON} \\\n        -O ${prefix}.vcf\n    echo \\$(gatk Mutect2 --version 2>&1) | sed 's/^.*(GATK) v//; s/ HTSJDK.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def intervalsOptions = useBed ? \"-L ${target_bed}\" : \"\"\n    def softClippedOption = params.ignore_soft_clipped_bases ? \"--dont-use-soft-clipped-bases true\" : \"\"\n    def PON = \"--panel-of-normals ${pon}\"\n\n    \"\"\"\n    # Get raw calls\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n        Mutect2 \\\n        -R ${fasta}\\\n        -I ${bam_tumor} -tumor ${meta.tumor} \\\n        -I ${bam_normal} -normal ${meta.normal} \\\n        ${intervalsOptions} \\\n        ${softClippedOption} \\\n        --germline-resource ${germline_resource} \\\n        ${PON} \\\n        -O ${prefix}.vcf\n    echo \\$(gatk Mutect2 --version 2>&1) | sed 's/^.*(GATK) v//; s/ HTSJDK.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bam_normal",
            "bai_normal",
            "bam_tumor",
            "bai_tumor",
            "pon",
            "ponIndex",
            "dict",
            "fasta",
            "fai",
            "germline_resource",
            "germline_resource_tbi",
            "target_bed",
            "useBed"
        ],
        "nb_inputs": 14,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'"
        ],
        "when": "",
        "stub": ""
    },
    "OPTITYPE": {
        "name_process": "OPTITYPE",
        "string_process": "\nprocess OPTITYPE {\n    tag \"$meta.id\"\n    label 'process_medium'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(bam)\n\n    output:\n    tuple val(meta.patient), path(\"${prefix}/*.tsv\"), emit: output\n    path  \"*.version.txt\"  , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    # Create a config for OptiType on a per sample basis with options.args2\n    #Doing it old school now\n    echo \"[mapping]\" > config.ini\n    echo \"razers3=razers3\" >> config.ini\n    echo \"threads=$task.cpus\" >> config.ini\n    echo \"[ilp]\" >> config.ini\n    echo \"$options.args2\" >> config.ini\n    echo \"threads=1\" >> config.ini\n    echo \"[behavior]\" >> config.ini\n    echo \"deletebam=true\" >> config.ini\n    echo \"unpaired_weight=0\" >> config.ini\n    echo \"use_discordant=false\" >> config.ini\n    # Run the actual OptiType typing with options.args\n\n    OptiTypePipeline.py -i ${bam} -c config.ini --${meta.seqtype} $options.args --prefix $prefix --outdir $prefix\n\n    cat \\$(which OptiTypePipeline.py) | grep -e \"Version:\" | sed -e \"s/Version: //g\" > ${software}.version.txt\n\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def software = getSoftwareName(task.process)\n    prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    # Create a config for OptiType on a per sample basis with options.args2\n    #Doing it old school now\n    echo \"[mapping]\" > config.ini\n    echo \"razers3=razers3\" >> config.ini\n    echo \"threads=$task.cpus\" >> config.ini\n    echo \"[ilp]\" >> config.ini\n    echo \"$options.args2\" >> config.ini\n    echo \"threads=1\" >> config.ini\n    echo \"[behavior]\" >> config.ini\n    echo \"deletebam=true\" >> config.ini\n    echo \"unpaired_weight=0\" >> config.ini\n    echo \"use_discordant=false\" >> config.ini\n    # Run the actual OptiType typing with options.args\n\n    OptiTypePipeline.py -i ${bam} -c config.ini --${meta.seqtype} $options.args --prefix $prefix --outdir $prefix\n\n    cat \\$(which OptiTypePipeline.py) | grep -e \"Version:\" | sed -e \"s/Version: //g\" > ${software}.version.txt\n\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "SOMATICSNIPER": {
        "name_process": "SOMATICSNIPER",
        "string_process": "\nprocess SOMATICSNIPER {\n    tag \"$meta.id\"\n    label 'process_high'\n                                     \n                                         \n                                                                                                                                                                     \n\n    input:\n    tuple val(meta), path(bam_normal), path(bai_normal), path(bam_tumor), path(bai_tumor)\n    path  fasta\n    path  fai\n\n    output:\n    tuple val(meta), path(\"*.vcf\"), emit: vcf\n    path \"*.version.txt\"          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    bam-somaticsniper \\\\\n        $options.args \\\\\n        -f $fasta \\\\\n        $bam_tumor \\\\\n        $bam_normal \\\\\n        ${prefix}.vcf\n\n    echo '1.0.5.0' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    bam-somaticsniper \\\\\n        $options.args \\\\\n        -f $fasta \\\\\n        $bam_tumor \\\\\n        $bam_normal \\\\\n        ${prefix}.vcf\n\n    echo '1.0.5.0' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bam_normal",
            "bai_normal",
            "bam_tumor",
            "bai_tumor",
            "fasta",
            "fai"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'"
        ],
        "when": "",
        "stub": ""
    },
    "GATK4_APPLYBQSR_SPARK": {
        "name_process": "GATK4_APPLYBQSR_SPARK",
        "string_process": "\nprocess GATK4_APPLYBQSR_SPARK {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    input:\n    tuple val(meta), path(bam), path(bai), path(bqsr_table)\n    path(fasta)\n    path(fastaidx)\n    path(dict)\n\n    output:\n    tuple val(meta), path(\"*.bam\"),  emit: bam\n    path \"*.version.txt\",            emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gatk ApplyBQSRSpark \\\\\n        -R $fasta \\\\\n        -I $bam \\\\\n        --bqsr-recal-file $bqsr_table \\\\\n        --tmp-dir . \\\n        -O ${prefix}.bam \\\\\n        $options.args \\\n        --spark-master local[${task.cpus}]\n    gatk --version | grep Picard | sed \"s/Picard Version: //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n\n    \"\"\"\n    gatk ApplyBQSRSpark \\\\\n        -R $fasta \\\\\n        -I $bam \\\\\n        --bqsr-recal-file $bqsr_table \\\\\n        --tmp-dir . \\\n        -O ${prefix}.bam \\\\\n        $options.args \\\n        --spark-master local[${task.cpus}]\n    gatk --version | grep Picard | sed \"s/Picard Version: //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai",
            "bqsr_table",
            "fasta",
            "fastaidx",
            "dict"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }"
        ],
        "when": "",
        "stub": ""
    },
    "MHCFLURRY": {
        "name_process": "MHCFLURRY",
        "string_process": "\nprocess MHCFLURRY {\n    tag \"MHC_Binding_prediction\"\n    label 'process_low'\n    publishDir \"${params.outdir}/${patient}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'mhc_predict', meta:patient, publish_by_meta:[]) }\n\n    input:\n    tuple val(patient), path(hlas), path(variants)\n    path(alleles)\n    val(results)\n    val(results_filter)\n    val(seq_mode)\n    val(cutoff)\n\n    output:\n    path(\"*_wt.csv\"), optional:true, emit: wt_predictions\n    path(\"*_mut.csv\"), optional:true, emit: mut_predictions\n\n    script:\n\n    def software    = getSoftwareName(task.process)\n    hla = \"--hla \" + hlas.join(' ')\n    \n    \"\"\"\n    mhc_predict.py \\\\\n        $hla \\\\\n        --variants $variants \\\\\n        --alleles $alleles \\\\\n        --mode $seq_mode \\\\\n        --cutoff $cutoff  \n\n    mhcflurry-predict-scan \\\\\n        --alleles \\$(cat allowed_alleles.txt) \\\\\n        --results-${results} ${results_filter} \\\\\n        --out predictions_wt.csv \\\\\n         $options.args \\\\\n        protein_sequences_wt.fasta  \n    \n    mhcflurry-predict-scan \\\\\n        --alleles \\$(cat allowed_alleles.txt) \\\\\n        --results-${results} ${results_filter} \\\\\n        --out predictions_mut.csv \\\\\n         $options.args \\\\\n        protein_sequences_mu.fasta \n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def software    = getSoftwareName(task.process)\n    hla = \"--hla \" + hlas.join(' ')\n    \n    \"\"\"\n    mhc_predict.py \\\\\n        $hla \\\\\n        --variants $variants \\\\\n        --alleles $alleles \\\\\n        --mode $seq_mode \\\\\n        --cutoff $cutoff  \n\n    mhcflurry-predict-scan \\\\\n        --alleles \\$(cat allowed_alleles.txt) \\\\\n        --results-${results} ${results_filter} \\\\\n        --out predictions_wt.csv \\\\\n         $options.args \\\\\n        protein_sequences_wt.fasta  \n    \n    mhcflurry-predict-scan \\\\\n        --alleles \\$(cat allowed_alleles.txt) \\\\\n        --results-${results} ${results_filter} \\\\\n        --out predictions_mut.csv \\\\\n         $options.args \\\\\n        protein_sequences_mu.fasta \n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "HLA"
        ],
        "tools_url": [
            "https://bio.tools/HLA"
        ],
        "tools_dico": [
            {
                "name": "HLA",
                "uri": "https://bio.tools/HLA",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3630",
                                    "term": "Protein quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3630",
                                    "term": "Protein quantitation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Using RNA Sequencing to Characterize the Tumor Microenvironment | Using k-mers to call HLA alleles in RNA sequencing data | HLAProfiler uses the k-mer content of next generation sequencing reads to call HLA types in a sample. Based on the k-mer content each each read pair is assigned to an HLA gene and the aggregate k-mer profile for the gene is compared to reference k-mer profiles to determin the HLA type. Currently HLAProfiler only supports paired-end RNA-seq data",
                "homepage": "https://github.com/ExpressionAnalysis/HLAProfiler"
            }
        ],
        "inputs": [
            "patient",
            "hlas",
            "variants",
            "alleles",
            "results",
            "results_filter",
            "seq_mode",
            "cutoff"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Akazhiel__NeoPred-NF",
        "directive": [
            "tag \"MHC_Binding_prediction\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}/${patient}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'mhc_predict', meta:patient, publish_by_meta:[]) }"
        ],
        "when": "",
        "stub": ""
    }
}
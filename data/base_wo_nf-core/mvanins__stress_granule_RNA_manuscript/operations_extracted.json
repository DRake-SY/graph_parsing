{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(\"${params.genomeDir}/annotations/*.annotations.{csv.gz,feather}\")\n    .first()\n    .ifEmpty{ exit 1, \"Cannot find annotation csv/feather in: ${params.genomeDir}/annotations\\nGenome directory not properly formed\" }\n    .set{annotationFeather}",
        "origin": [
            [
                "\"${params.genomeDir}/annotations/*.annotations.{csv.gz,feather}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "annotationFeather",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath(\"${params.genomeDir}/annotations/*.annotations.pickle\")\n    .first()\n    .ifEmpty{ exit 1, \"Cannot find annotation pickle in: ${params.genomeDir}/annotations\\nGenome directory not properly formed\" }\n    .set{annotationPickle}",
        "origin": [
            [
                "\"${params.genomeDir}/annotations/*.annotations.pickle\"",
                "A"
            ]
        ],
        "gives": [
            [
                "annotationPickle",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n    .fromPath(\"${params.genomeDir}/original/*.{fa,fasta}\")\n    .first()\n    .ifEmpty{ exit 1, \"Cannot find genome fasta in ${params.genomeDir}/original\\nGenome directory not properly formed\" }\n    .set{genomeFasta}",
        "origin": [
            [
                "\"${params.genomeDir}/original/*.{fa,fasta}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "genomeFasta",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n    .fromPath(\"${params.genomeDir}/original/*.fai\")\n    .first()\n    .ifEmpty{ exit 1, \"Cannot find genome index in ${params.genomeDir}/original\\nGenome directory not properly formed\" }\n    .set{genomeFai}",
        "origin": [
            [
                "\"${params.genomeDir}/original/*.fai\"",
                "A"
            ]
        ],
        "gives": [
            [
                "genomeFai",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n    .fromPath(\"${params.genomeDir}/star_tRNAmasked_${params.starOverhang}\")\n    .ifEmpty{ exit 1, \"Cannot find STAR index with overhang ${params.starOverhang} in: ${params.genomeDir}\\nGenome directory not properly formed\" }\n    .set{starIndex}",
        "origin": [
            [
                "\"${params.genomeDir}/star_tRNAmasked_${params.starOverhang}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "starIndex",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n      .fromPath(\"${params.genomeDir}/rRNA_depletion\")\n      .ifEmpty{ exit 1, \"Cannot find rRNA depletion index in ${params.genomeDir}\\nGenome directory not properly formed\" }\n      .set(rRNAIndex)",
        "origin": [
            [
                "\"${params.genomeDir}/rRNA_depletion\"",
                "A"
            ]
        ],
        "gives": []
    },
    "OPERATION_7": {
        "string": "Channel\n      .fromPath(\"${params.genomeDir}/rRNA_depletion\")\n      .ifEmpty{ exit 1, \"Cannot find rRNA depletion index in ${params.genomeDir}\\nGenome directory not properly formed\" }\n      .set(tRNAIndex)",
        "origin": [
            [
                "\"${params.genomeDir}/rRNA_depletion\"",
                "A"
            ]
        ],
        "gives": []
    },
    "OPERATION_8": {
        "string": "Channel\n  .fromFilePairs (params.reads, size: params.bulk ? 1:2)\n  .ifEmpty{ exit 1, \"Cannot find any reads matching: ${params.reads}\\nPath needs to be enclosed in quotes!\\nPath requires at least one * wildcard!\" }\n  .into { raw_reads_fastqc; raw_reads_trim }",
        "origin": [
            [
                "params.reads, size: params.bulk ? 1:2",
                "A"
            ]
        ],
        "gives": [
            [
                "raw_reads_fastqc",
                "P"
            ],
            [
                "raw_reads_trim",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "multiqc_trimmed_fastqc = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "multiqc_trimmed_fastqc",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "depleted_reads_fastqc = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "depleted_reads_fastqc",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "multiqc_depleted_fastqc = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "multiqc_depleted_fastqc",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "annotations.{csv.gz,feather}\"",
        "origin": [
            [
                "annotations",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_13": {
        "string": "raw_reads_trim.set{ trimmed_reads }",
        "origin": [
            [
                "raw_reads_trim",
                "P"
            ]
        ],
        "gives": [
            [
                "trimmed_reads",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "trimmed_reads .set { depleted_reads }",
        "origin": [
            [
                "trimmed_reads",
                "P"
            ]
        ],
        "gives": [
            [
                "depleted_reads",
                "P"
            ]
        ]
    }
}
{
    "OPERATION_1": {
        "string": "Channel\n            .from(params.readPaths)\n            .map { row -> [ row[0], [file(row[1][0])]] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into { raw_reads_fastqc; raw_reads_trimgalore; }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "raw_reads_fastqc",
                "P"
            ],
            [
                "raw_reads_trimgalore",
                "P"
            ],
            [
                "",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n            .from(params.readPaths)\n            .map { row -> [ row[0], [file(row[1][0]), file(row[1][1])]] }\n            .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n            .into { raw_reads_fastqc; raw_reads_trimgalore; }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "raw_reads_fastqc",
                "P"
            ],
            [
                "raw_reads_trimgalore",
                "P"
            ],
            [
                "",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n        .fromFilePairs( params.reads, size: params.singleEnd ? 1 : 2 )\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\\nNB: Path requires at least one * wildcard!\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n        .into { raw_reads_fastqc; raw_reads_trimgalore; }",
        "origin": [
            [
                "params.reads, size: params.singleEnd ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "raw_reads_fastqc",
                "P"
            ],
            [
                "raw_reads_trimgalore",
                "P"
            ],
            [
                "",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "summary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_5": {
        "string": "star_aligned\n    .filter { logs, bams -> check_log(logs) }\n    .flatMap {  logs, bams -> bams }\n.into { bam_markduplicates }",
        "origin": [
            [
                "star_aligned",
                "P"
            ]
        ],
        "gives": [
            [
                "bam_markduplicates",
                "P"
            ]
        ]
    }
}
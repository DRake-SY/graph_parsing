{
    "variant_missingness": {
        "name_process": "variant_missingness",
        "string_process": "\nprocess variant_missingness {\n  label 'plink1'\n  \n  input:\n  path(in_bed)\n  path(in_bim)\n  path(in_fam)\n\n  output:\n  path \"C1.bed\", emit: bed\n  path \"C1.bim\", emit: bim\n  path \"C1.fam\", emit: fam\n  path \"C1.log\", emit: log\n\n  shell:\n  '''\n  plink --bfile !{in_bed.baseName} \\\n      --fam !{in_fam} \\\n      --make-bed \\\n      --out data \n  plink --bfile data \\\n      --geno 0.1 \\\n      --make-bed  \\\n      --out C1 \n  '''\n}",
        "nb_lignes_process": 25,
        "string_script": "  '''\n  plink --bfile !{in_bed.baseName} \\\n      --fam !{in_fam} \\\n      --make-bed \\\n      --out data \n  plink --bfile data \\\n      --geno 0.1 \\\n      --make-bed  \\\n      --out C1 \n  '''",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "in_bed",
            "in_bim",
            "in_fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "individual_missingness": {
        "name_process": "individual_missingness",
        "string_process": "\nprocess individual_missingness {\n  label 'plink1'\n  \n  input:\n  path(C1_bed)\n  path(C1_bim)\n  path(C1_fam)\n\n  output:\n  path \"C2.bed\", emit: bed\n  path \"C2.bim\", emit: bim\n  path \"C2.fam\", emit: fam\n  path \"C2.log\", emit: log\n  path \"before.imiss\", emit: imiss_before\n  path \"after.imiss\", emit: imiss_after\n  \n  \n  shell:\n  '''\n  plink --bfile !{C1_bed.baseName} \\\n    --missing \\\n    --out before\n  plink --bfile !{C1_bed.baseName} \\\n    --make-bed \\\n    --mind !{params.mind} \\\n    --out C2 \n  plink --bfile C2 \\\n    --missing \\\n    --out after\n  '''\n}",
        "nb_lignes_process": 30,
        "string_script": "  '''\n  plink --bfile !{C1_bed.baseName} \\\n    --missing \\\n    --out before\n  plink --bfile !{C1_bed.baseName} \\\n    --make-bed \\\n    --mind !{params.mind} \\\n    --out C2 \n  plink --bfile C2 \\\n    --missing \\\n    --out after\n  '''",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "C1_bed",
            "C1_bim",
            "C1_fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "plot_missingness": {
        "name_process": "plot_missingness",
        "string_process": "\nprocess plot_missingness {\n  label 'small'\n  publishDir \"${params.results}/qc/figures\", mode: 'copy'\n\n  input:\n  path(before_imiss)\n  path(after_imiss)\n  val(threshold)\n\n  output:\n  path \"*.png\", emit: figure\n\n  shell:\n  '''\n  plot_sample_missingness.R !{before_imiss} !{after_imiss} !{threshold} \n  '''\n}",
        "nb_lignes_process": 16,
        "string_script": "  '''\n  plot_sample_missingness.R !{before_imiss} !{after_imiss} !{threshold} \n  '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "before_imiss",
            "after_imiss",
            "threshold"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "publishDir \"${params.results}/qc/figures\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "check_sex": {
        "name_process": "check_sex",
        "string_process": "\nprocess check_sex {\n    label 'plink1'\n\t\n    input:\n    path(C2_bed)\n    path(C2_bim)\n    path(C2_fam)\n    \n    output:\n    path \"C3.bed\", emit: bed \n    path \"C3.bim\", emit: bim\n    path \"C3.fam\", emit: fam\n    path \"C3.log\", emit: log\n    path \"before.sexcheck\", emit: sexcheck_before\n    path \"after.sexcheck\", emit: sexcheck_after\n \n    \n    shell:\n    '''\n    plink --bfile !{C2_bed.baseName} \\\n        --check-sex \\\n        --out before\n    # Identify the samples with sex discrepancies \n    grep \"PROBLEM\" before.sexcheck | awk '{print $1,$2}'> \\\n        problematic_samples.txt\n    # Delete all problematic samples\n    plink --bfile !{C2_bed.baseName} \\\n        --remove problematic_samples.txt \\\n        --make-bed \\\n        --out C3\n    plink --bfile C3 \\\n        --check-sex \\\n\t--out after \n    '''\n}",
        "nb_lignes_process": 34,
        "string_script": "    '''\n    plink --bfile !{C2_bed.baseName} \\\n        --check-sex \\\n        --out before\n    # Identify the samples with sex discrepancies \n    grep \"PROBLEM\" before.sexcheck | awk '{print $1,$2}'> \\\n        problematic_samples.txt\n    # Delete all problematic samples\n    plink --bfile !{C2_bed.baseName} \\\n        --remove problematic_samples.txt \\\n        --make-bed \\\n        --out C3\n    plink --bfile C3 \\\n        --check-sex \\\n\t--out after \n    '''",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "C2_bed",
            "C2_bim",
            "C2_fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "plot_sex": {
        "name_process": "plot_sex",
        "string_process": "\nprocess plot_sex {\n    label 'small'\n    publishDir \"${params.results}/qc/figures/\", mode: 'copy'\n\n    input:\n    path(sexcheck_before)\n    path(sexcheck_after) \n\n    output:\n    path \"*.png\", emit: figure\n\n    shell:\n    '''\n    plot_sex.R !{sexcheck_before} !{sexcheck_after}\n    '''\n}",
        "nb_lignes_process": 15,
        "string_script": "    '''\n    plot_sex.R !{sexcheck_before} !{sexcheck_after}\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sexcheck_before",
            "sexcheck_after"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "publishDir \"${params.results}/qc/figures/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "extract_autosomal": {
        "name_process": "extract_autosomal",
        "string_process": "\nprocess extract_autosomal {\n    label 'plink2'\n\t\n    input:\n    path(C3_bed)   \n    path(C3_bim)\n    path(C3_fam)\n    \n    output:\n    path \"C4.bed\", emit: bed\n    path \"C4.bim\", emit: bim \n    path \"C4.fam\", emit: fam\n    path \"C4.log\", emit: log\n    \n    shell:\n    '''\n    # Extract only autosomal chromosomes \n    plink2 --bfile !{C3_bed.baseName} \\\n        --autosome \\\n\t--make-bed \\\n\t--out C4    \n    ''' \n}",
        "nb_lignes_process": 22,
        "string_script": "    '''\n    # Extract only autosomal chromosomes \n    plink2 --bfile !{C3_bed.baseName} \\\n        --autosome \\\n\t--make-bed \\\n\t--out C4    \n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "C3_bed",
            "C3_bim",
            "C3_fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "heterozygosity_rate": {
        "name_process": "heterozygosity_rate",
        "string_process": "\nprocess heterozygosity_rate {\n    label 'plink1'\n\t\n    input:\n    path(C4_bed)\n    path(C4_bim)\n    path(C4_fam)\n    \n    output:\n    path \"C5_het.het\", emit: het\n\t\n    shell:\n    '''    \n    plink --bfile !{C4_bed.baseName} \\\n        --het \\\n        --out C5_het\n    '''\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''    \n    plink --bfile !{C4_bed.baseName} \\\n        --het \\\n        --out C5_het\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "C4_bed",
            "C4_bim",
            "C4_fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_het": {
        "name_process": "filter_het",
        "string_process": "\nprocess filter_het {\n    label 'small'\n\t\n    input:\n    path(het)\n\n    output:\n    path \"het_failed_samples.txt\", emit: failed\n    \n    shell:\n    '''\n    filter_het.R !{het}\n    '''\n}",
        "nb_lignes_process": 13,
        "string_script": "    '''\n    filter_het.R !{het}\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "het"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'"
        ],
        "when": "",
        "stub": ""
    },
    "plot_heterozygosity": {
        "name_process": "plot_heterozygosity",
        "string_process": "\nprocess plot_heterozygosity {\n    label 'small'\n    publishDir \"${params.results}/qc/figures/\", mode: 'copy'\n\n    input: \n    path(het_before)\n    path(het_after)\n\n    output:\n    path \"*.png\", emit: figure\n\n    shell:\n    '''\n    plot_heterozygosity.R !{het_before} !{het_after}\n    '''\n}",
        "nb_lignes_process": 15,
        "string_script": "    '''\n    plot_heterozygosity.R !{het_before} !{het_after}\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "het_before",
            "het_after"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "publishDir \"${params.results}/qc/figures/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "heterozygosity_prune": {
        "name_process": "heterozygosity_prune",
        "string_process": "\nprocess heterozygosity_prune {\n    label 'plink1'\n\t\n    input:\n    path(C4_bed)\n    path(C4_bim)\n    path(C4_fam)\n    path(het_failed)\n\n    output:\n    path \"C5.bed\", emit: bed\n    path \"C5.bim\", emit: bim\n    path \"C5.fam\", emit: fam\n    path \"C5.log\", emit: log\n    path \"C5_after.het\", emit: het\n\n    shell:\n    '''\n\tif !{params.heterozygosity};\n\tthen\n\t\tcut -f 1,2 !{het_failed} > het_failed_plink.txt\n\t\tplink --bfile !{C4_bim.baseName} \\\n\t\t  --make-bed \\\n\t\t  --remove het_failed_plink.txt \\\n\t\t  --out C5\n\t\tplink --bfile C5 \\\n\t\t  --het \\\n\t\t  --out C5_after\n\telse \n\t\tplink --bfile !{C4_bim.baseName} \\\n\t\t  --make-bed \\\n\t\t  --out C5\n\t\tplink --bfile C5 \\\n\t\t  --het \\\n\t\t  --out C5_after\n\tfi\n    '''\n}",
        "nb_lignes_process": 37,
        "string_script": "    '''\n\tif !{params.heterozygosity};\n\tthen\n\t\tcut -f 1,2 !{het_failed} > het_failed_plink.txt\n\t\tplink --bfile !{C4_bim.baseName} \\\n\t\t  --make-bed \\\n\t\t  --remove het_failed_plink.txt \\\n\t\t  --out C5\n\t\tplink --bfile C5 \\\n\t\t  --het \\\n\t\t  --out C5_after\n\telse \n\t\tplink --bfile !{C4_bim.baseName} \\\n\t\t  --make-bed \\\n\t\t  --out C5\n\t\tplink --bfile C5 \\\n\t\t  --het \\\n\t\t  --out C5_after\n\tfi\n    '''",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "C4_bed",
            "C4_bim",
            "C4_fam",
            "het_failed"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "relatedness": {
        "name_process": "relatedness",
        "string_process": "\nprocess relatedness {\n    label 'plink2' \n    label 'medium' \n\n    input:\n    path(C5_bed)\n    path(C5_bim)\n    path(C5_fam)\n\n    output:\n    path \"C6.bed\", emit: bed\n    path \"C6.bim\", emit: bim\n    path \"C6.fam\", emit: fam\n    path \"C6.log\", emit: log\n    \n    shell:\n    '''\n    plink2 --bfile !{C5_bed.baseName} \\\n        --king-cutoff !{params.king_cutoff} \\\n        --make-bed \\\n        --out C6\n    '''\n}",
        "nb_lignes_process": 22,
        "string_script": "    '''\n    plink2 --bfile !{C5_bed.baseName} \\\n        --king-cutoff !{params.king_cutoff} \\\n        --make-bed \\\n        --out C6\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "C5_bed",
            "C5_bim",
            "C5_fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'",
            "label 'medium'"
        ],
        "when": "",
        "stub": ""
    },
    "missing_phenotype": {
        "name_process": "missing_phenotype",
        "string_process": "\nprocess missing_phenotype {\n    label 'plink1'\n \n    input:\n    path(C6_bed)\n    path(C6_bim)\n    path(C6_fam)\n\n    output:\n    path \"C7.bed\", emit: bed\n    path \"C7.bim\", emit: bim\n    path \"C7.fam\", emit: fam\n    path \"C7.log\", emit: log\n\n    shell:\n    '''\n    plink --bfile !{C6_bed.baseName} \\\n        --prune \\\n        --make-bed \\\n        --out C7\n    '''\n}",
        "nb_lignes_process": 21,
        "string_script": "    '''\n    plink --bfile !{C6_bed.baseName} \\\n        --prune \\\n        --make-bed \\\n        --out C7\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "C6_bed",
            "C6_bim",
            "C6_fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "mpv": {
        "name_process": "mpv",
        "string_process": "\nprocess mpv {\n    label 'plink1'\n\t\n    input:\n    path(E7_bed)\n    path(E7_bim)\n    path(E7_fam)\n\n    output:\n    path \"E8.bed\", emit: bed\n    path \"E8.bim\", emit: bim\n    path \"E8.fam\", emit: fam\n    path \"E8.log\", emit: log\n    path \"E8_before.lmiss\", emit: lmiss_before\n    path \"E8_after.lmiss\", emit: lmiss_after\n\t\n    shell:\n    '''\n    plink --bfile !{E7_bed.baseName} \\\n        --missing \\\n\t--out E8_before\n    plink --bfile !{E7_bed.baseName} \\\n        --geno !{params.variant_geno} \\\n    \t--make-bed \\\n\t--out E8 \n    plink --bfile E8 \\\n\t--missing \\\n\t--out E8_after\n    '''\n}",
        "nb_lignes_process": 29,
        "string_script": "    '''\n    plink --bfile !{E7_bed.baseName} \\\n        --missing \\\n\t--out E8_before\n    plink --bfile !{E7_bed.baseName} \\\n        --geno !{params.variant_geno} \\\n    \t--make-bed \\\n\t--out E8 \n    plink --bfile E8 \\\n\t--missing \\\n\t--out E8_after\n    '''",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "E7_bed",
            "E7_bim",
            "E7_fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "plot_mpv": {
        "name_process": "plot_mpv",
        "string_process": "\nprocess plot_mpv {\n    label 'small'\n    publishDir \"${params.results}/qc/figures/\", mode: 'copy'\n\n    input:\n    path(lmiss_before)\n    path(lmiss_after)\n    val(threshold)\n\n    output:\n    path \"*.png\", emit: figure\n    \n    shell:\n    '''\n    plot_variant_missingness.R !{lmiss_before} !{lmiss_after} !{threshold} \n    '''\n}",
        "nb_lignes_process": 16,
        "string_script": "    '''\n    plot_variant_missingness.R !{lmiss_before} !{lmiss_after} !{threshold} \n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "lmiss_before",
            "lmiss_after",
            "threshold"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "publishDir \"${params.results}/qc/figures/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "hardy": {
        "name_process": "hardy",
        "string_process": "\nprocess hardy {\n    label 'plink1'\n\t\n    input:\n    path(E8_bed)\n    path(E8_bim)\n    path(E8_fam)\n\n    output:\n    path \"E9.bed\", emit: bed\n    path \"E9.bim\", emit: bim\n    path \"E9.fam\", emit: fam\n    path \"E9.log\", emit: log\n    path \"plink_sub_before.hwe\", emit: sub_before\n    path \"plinkzoomhwe_before.hwe\", emit: zoom_before\n    path \"plink_sub_after.hwe\", emit: sub_after\n    path \"plinkzoomhwe_after.hwe\", emit: zoom_after\n\n    shell: \n    '''\n    plink --bfile !{E8_bed.baseName} \\\n\t--hardy \\\n\t--out plink_before\n    # sample 1% of SNPs\n    head -n1 plink_before.hwe > plink_sub_before.hwe\n    awk 'BEGIN {srand()} !/^$/ { if (rand() <= .01) print $0}' < plink_before.hwe >> plink_sub_before.hwe\n    awk '{ if ($3==\"TEST\" || $3==\"UNAFF\" && $9 <0.001) print $0 }' \\\n\tplink_before.hwe > plinkzoomhwe_before.hwe\n    plink --bfile !{E8_bed.baseName} \\\n        --hwe !{params.hwe} \\\n        --make-bed \\\n        --out E9 \n    plink --bfile E9 \\\n        --hardy \\\n        --out plink_after\n    # sample 1% of SNPs\n    head -n1 plink_after.hwe > plink_sub_after.hwe\n    awk 'BEGIN {srand()} !/^$/ { if (rand() <= .01) print $0}' < plink_after.hwe >> plink_sub_after.hwe\n    awk '{ if ($3==\"TEST\" || $3==\"UNAFF\" && $9 <0.001) print $0 }' \\\n        plink_after.hwe > plinkzoomhwe_after.hwe\n    '''\n}",
        "nb_lignes_process": 41,
        "string_script": "    '''\n    plink --bfile !{E8_bed.baseName} \\\n\t--hardy \\\n\t--out plink_before\n    # sample 1% of SNPs\n    head -n1 plink_before.hwe > plink_sub_before.hwe\n    awk 'BEGIN {srand()} !/^$/ { if (rand() <= .01) print $0}' < plink_before.hwe >> plink_sub_before.hwe\n    awk '{ if ($3==\"TEST\" || $3==\"UNAFF\" && $9 <0.001) print $0 }' \\\n\tplink_before.hwe > plinkzoomhwe_before.hwe\n    plink --bfile !{E8_bed.baseName} \\\n        --hwe !{params.hwe} \\\n        --make-bed \\\n        --out E9 \n    plink --bfile E9 \\\n        --hardy \\\n        --out plink_after\n    # sample 1% of SNPs\n    head -n1 plink_after.hwe > plink_sub_after.hwe\n    awk 'BEGIN {srand()} !/^$/ { if (rand() <= .01) print $0}' < plink_after.hwe >> plink_sub_after.hwe\n    awk '{ if ($3==\"TEST\" || $3==\"UNAFF\" && $9 <0.001) print $0 }' \\\n        plink_after.hwe > plinkzoomhwe_after.hwe\n    '''",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "E8_bed",
            "E8_bim",
            "E8_fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "plot_hardy": {
        "name_process": "plot_hardy",
        "string_process": "\nprocess plot_hardy {\n    label 'small'\n    publishDir \"${params.results}/qc/figures/\", mode: 'copy'\n\n    input:\n    path(sub_before)\n    path(zoom_before)\n    path(sub_after)\n    path(zoom_after)\n    val(threshold)\n\n    output:\n    path \"*.png\", optional: true, emit: figure\n\n    shell:\n    '''\n    plot_hwe.R !{sub_before} !{sub_after} !{threshold} \"\" \n    plot_hwe.R !{zoom_before} !{zoom_after} !{threshold} \"strongly deviating SNPs only\"\n    '''\n}",
        "nb_lignes_process": 19,
        "string_script": "    '''\n    plot_hwe.R !{sub_before} !{sub_after} !{threshold} \"\" \n    plot_hwe.R !{zoom_before} !{zoom_after} !{threshold} \"strongly deviating SNPs only\"\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub_before",
            "zoom_before",
            "sub_after",
            "zoom_after",
            "threshold"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "publishDir \"${params.results}/qc/figures/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "maf": {
        "name_process": "maf",
        "string_process": "\nprocess maf {  \n    label 'plink1'\n    if (params.linear == true){\n       publishDir \"${params.results}/qc/bfiles/\", pattern: \"E10.*\",  mode: 'copy'\n    }\n\n    input:\n    path(E9_bed)\n    path(E9_bim)\n    path(E9_fam)\n\n    output:\n    path \"E10.bed\", emit: bed\n    path \"E10.bim\", emit: bim\n    path \"E10.fam\", emit: fam\n    path \"MAF_check_before.frq\", emit: before\n    path \"MAF_check_after.frq\", emit: after\n    path \"E10.log\", emit: log\n\n    shell:\n    '''\n    plink --bfile !{E9_bed.baseName} \\\n        --freq \\\n        --out MAF_check_before\n    plink --bfile !{E9_bed.baseName} \\\n        --maf !{params.maf} \\\n        --make-bed \\\n        --out E10\n    plink --bfile E10 \\\n        --freq \\\n        --out MAF_check_after\n    '''\n}",
        "nb_lignes_process": 32,
        "string_script": "    '''\n    plink --bfile !{E9_bed.baseName} \\\n        --freq \\\n        --out MAF_check_before\n    plink --bfile !{E9_bed.baseName} \\\n        --maf !{params.maf} \\\n        --make-bed \\\n        --out E10\n    plink --bfile E10 \\\n        --freq \\\n        --out MAF_check_after\n    '''",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "E9_bed",
            "E9_bim",
            "E9_fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1' if (params.linear == true){ publishDir \"${params.results}/qc/bfiles/\", pattern: \"E10.*\", mode: 'copy' }"
        ],
        "when": "",
        "stub": ""
    },
    "plot_maf": {
        "name_process": "plot_maf",
        "string_process": "\nprocess plot_maf {\n    label 'small'\n    publishDir \"${params.results}/qc/figures/\", mode: 'copy'\n   \n    input:\n    path(maf_before)\n    path(maf_after)\n    val(threshold)\n\n    output:\n    path \"*.png\", emit: figure\n  \n    shell:\n    '''\n    plot_maf.R !{maf_before} !{maf_after} !{threshold} \n    '''\n}",
        "nb_lignes_process": 16,
        "string_script": "    '''\n    plot_maf.R !{maf_before} !{maf_after} !{threshold} \n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "maf_before",
            "maf_after",
            "threshold"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "publishDir \"${params.results}/qc/figures/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "test_missing": {
        "name_process": "test_missing",
        "string_process": "\nprocess test_missing {\n    label 'plink1'\n    publishDir \"${params.results}/qc/bfiles/\", pattern: \"E11.*\",  mode: 'copy'\n\n    input:\n    path(E10_bed)\n    path(E10_bim)\n    path(E10_fam)\n\n    output:\n    path \"E11.bed\", emit: bed\n    path \"E11.bim\", emit: bim\n    path \"E11.fam\", emit: fam\n    path \"before.missing\", emit: before\n    path \"after.missing\", emit: after\n    path \"E11.log\", emit: log\n\n    shell:\n    '''\n    plink --bfile !{E10_bed.baseName} \\\n        --test-missing \\\n        --out before\n    awk '{ if ($5 < !{params.missingness}) print $2 }' before.missing > fail_missingness.txt\n    plink --bfile !{E10_bed.baseName} \\\n        --exclude fail_missingness.txt \\\n\t--make-bed \\\n\t--out E11\n    plink --bfile E11 \\\n        --test-missing \\\n        --out after\n    '''\n}",
        "nb_lignes_process": 31,
        "string_script": "    '''\n    plink --bfile !{E10_bed.baseName} \\\n        --test-missing \\\n        --out before\n    awk '{ if ($5 < !{params.missingness}) print $2 }' before.missing > fail_missingness.txt\n    plink --bfile !{E10_bed.baseName} \\\n        --exclude fail_missingness.txt \\\n\t--make-bed \\\n\t--out E11\n    plink --bfile E11 \\\n        --test-missing \\\n        --out after\n    '''",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "E10_bed",
            "E10_bim",
            "E10_fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'",
            "publishDir \"${params.results}/qc/bfiles/\", pattern: \"E11.*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "plot_missing_by_cohort": {
        "name_process": "plot_missing_by_cohort",
        "string_process": "\nprocess plot_missing_by_cohort {\n    label 'small'\n    publishDir \"${params.results}/qc/figures/\", mode: 'copy'\n\n    input:\n    path(missing_before)\n    path(missing_after)\n    val(threshold)\n\n    output:\n    path \"*.png\", optional: true, emit: figure\n\n    shell:\n    '''\n    plot_missing_cohort.R !{missing_before} !{missing_after} !{threshold} \n    ''' \n}",
        "nb_lignes_process": 16,
        "string_script": "    '''\n    plot_missing_cohort.R !{missing_before} !{missing_after} !{threshold} \n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "missing_before",
            "missing_after",
            "threshold"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "publishDir \"${params.results}/qc/figures/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pca": {
        "name_process": "pca",
        "string_process": "\nprocess pca {\n    label 'plink1'\n\t\n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n    path(exclude_regions)\n\n    output:\n    path \"E12_indep.log\", emit: log \n    path \"E12_pca.eigenvec\", emit: eigenvec_user \n    path \"E12_indep.fam\", emit: fam\n    \n    shell:\n    '''\n    plink --bfile !{bed.baseName} \\\n\t--exclude !{exclude_regions} \\\n\t--indep-pairwise !{params.indep_pairwise} \\\n\t--out indepSNPs_1k_1\n    plink --bfile !{bed.baseName} \\\n\t--extract indepSNPs_1k_1.prune.in \\\n\t--make-bed \\\n\t--out E12_indep\n    # Perform a PCA on user's data   \n    plink --bfile E12_indep \\\n        --pca header \\\n        --out E12_pca\n    '''\n}",
        "nb_lignes_process": 29,
        "string_script": "    '''\n    plink --bfile !{bed.baseName} \\\n\t--exclude !{exclude_regions} \\\n\t--indep-pairwise !{params.indep_pairwise} \\\n\t--out indepSNPs_1k_1\n    plink --bfile !{bed.baseName} \\\n\t--extract indepSNPs_1k_1.prune.in \\\n\t--make-bed \\\n\t--out E12_indep\n    # Perform a PCA on user's data   \n    plink --bfile E12_indep \\\n        --pca header \\\n        --out E12_pca\n    '''",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "bed",
            "bim",
            "fam",
            "exclude_regions"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "pca_covariates": {
        "name_process": "pca_covariates",
        "string_process": "\nprocess pca_covariates {\n    label 'small'\n    \n    input:\n    path(eigenvec_user)\n\n    output:\n    path \"covar_pca\", emit: covar\n    \n    shell:\n    '''\n    # Create covariate file including the first X PCs that the user requested\n    awk -v var=\"!{params.pca_covars}\" '{for(i=1;i<=var+2;i++) printf $i\" \"; print \"\"}' E12_pca.eigenvec > covar_pca\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    # Create covariate file including the first X PCs that the user requested\n    awk -v var=\"!{params.pca_covars}\" '{for(i=1;i<=var+2;i++) printf $i\" \"; print \"\"}' E12_pca.eigenvec > covar_pca\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "eigenvec_user"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'"
        ],
        "when": "",
        "stub": ""
    },
    "plot_pca_user_data": {
        "name_process": "plot_pca_user_data",
        "string_process": "\nprocess plot_pca_user_data {\n    label 'small'\n    publishDir \"${params.results}/qc/figures\", mode: 'copy'\n    \n    input:\n    path(eigenvec_user)\n    path(fam)\n\n    output:\n    path \"*.png\", emit: figure\n    path \"*.rds\", emit: rds\n    \n    shell:\n    '''\n    # Create case/control file\n    awk '{print $1, $2, $6}' !{fam} > status\n    plot_pca_OnlyUsersData.r !{eigenvec_user} status\n    '''    \n}",
        "nb_lignes_process": 18,
        "string_script": "    '''\n    # Create case/control file\n    awk '{print $1, $2, $6}' !{fam} > status\n    plot_pca_OnlyUsersData.r !{eigenvec_user} status\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "eigenvec_user",
            "fam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "publishDir \"${params.results}/qc/figures\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "parse_logs": {
        "name_process": "parse_logs",
        "string_process": "\nprocess parse_logs {\n    label 'small'\n    publishDir \"${params.results}/${dir}/figures\", mode: 'copy', pattern: \"*.png\"\n    publishDir \"${params.results}/${dir}/logs\", mode: 'copy', pattern: \"*.txt\"\n\n    input:\n    val(dir)\n    path(logs)\n    val(fn)\n\n    output:\n    path \"${fn}\", emit: log\n    path \"*.png\", emit: figure\n\n    shell:\n    '''\n    echo \"stage variants samples pheno pheno_case pheno_control pheno_miss wd\" > !{fn}\n    ls *.log | sort -V | xargs -n1 parse_logs.awk >> !{fn}\n    plot_logs.R !{fn} $(basename -s .txt !{fn})\n    '''\n}",
        "nb_lignes_process": 20,
        "string_script": "    '''\n    echo \"stage variants samples pheno pheno_case pheno_control pheno_miss wd\" > !{fn}\n    ls *.log | sort -V | xargs -n1 parse_logs.awk >> !{fn}\n    plot_logs.R !{fn} $(basename -s .txt !{fn})\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dir",
            "logs",
            "fn"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "publishDir \"${params.results}/${dir}/figures\", mode: 'copy', pattern: \"*.png\"",
            "publishDir \"${params.results}/${dir}/logs\", mode: 'copy', pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "report": {
        "name_process": "report",
        "string_process": "\nprocess report {\n    label 'small'\n\n    publishDir \"${params.results}/${dir}/\", mode: 'copy'\n                                         \n                                                       \n    stageInMode 'copy'\n\n    input:\n    val(dir)\n    path(x)\n    path(rmd)\n\n    output:\n    path \"*_report.html\"\n\n    shell:\n    '''\n    #!/usr/bin/env Rscript\n\n    rmarkdown::render('!{rmd}', output_options=list(self_contained=TRUE))\n    '''\n}",
        "nb_lignes_process": 22,
        "string_script": "    '''\n    #!/usr/bin/env Rscript\n\n    rmarkdown::render('!{rmd}', output_options=list(self_contained=TRUE))\n    '''",
        "nb_lignes_script": 4,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dir",
            "x",
            "rmd"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "publishDir \"${params.results}/${dir}/\", mode: 'copy'",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "run_gwas": {
        "name_process": "run_gwas",
        "string_process": "\nprocess run_gwas {    \n    label 'plink2'\n    publishDir \"${params.results}/gwas/files/\", mode: 'copy'\n\n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n    path(covar)\n\n    output:\n    path \"*.glm.*\", emit: gwas\n    path \"*.log\", emit: log\n   \n    shell:\n    '''\n    plink2 --bfile !{bed.baseName} \\\n      -covar !{covar} \\\n      --ci 0.95 \\\n      --glm hide-covar firth-fallback\\\n      --output-chr 26 \\\n      --adjust \\\n      --out gwas\n    plink2 --bfile !{bed.baseName} \\\n      --ci 0.95 \\\n      --glm hide-covar firth-fallback\\\n      --adjust \\\n      --output-chr 26 \\\n      --out gwas_nocovars\n    '''\n}",
        "nb_lignes_process": 30,
        "string_script": "    '''\n    plink2 --bfile !{bed.baseName} \\\n      -covar !{covar} \\\n      --ci 0.95 \\\n      --glm hide-covar firth-fallback\\\n      --output-chr 26 \\\n      --adjust \\\n      --out gwas\n    plink2 --bfile !{bed.baseName} \\\n      --ci 0.95 \\\n      --glm hide-covar firth-fallback\\\n      --adjust \\\n      --output-chr 26 \\\n      --out gwas_nocovars\n    '''",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam",
            "covar"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'",
            "publishDir \"${params.results}/gwas/files/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "plot": {
        "name_process": "plot",
        "string_process": "\nprocess plot {\n    label 'small'\n    publishDir \"${params.results}/gwas/figures/\", mode: 'copy'\n    \n    input:\n    tuple val(id), path(gwas), path(log)\n\t\n    output:\n    path \"*_qqplot.png\", emit: qqplot\n    path \"*_manhattan.png\", emit: manhattan\n \n    shell:\n    '''\n    # Identify lambda value calculated by plink2\n    awk '/lambda/  {print $11+0}' !{log} > lambda.txt\n    # NA p values sometimes happen\n    awk '!/'NA'/' !{gwas} > no_na.gwas\n    # Remove hash from beginning of line\n    sed 's/#//' no_na.gwas | sed 's/LOG(OR)_SE/SE/' | sed 's/CHROM/CHR/'|  sed 's/POS/BP/' | sed 's/ID/SNP/' > valid.gwas\n    # Run plots \n    qqplot.R valid.gwas lambda.txt\n    manhattan.R valid.gwas\n    cp qqplot.png !{id}_qqplot.png \n    cp manhattan.png !{id}_manhattan.png\n    '''\n}",
        "nb_lignes_process": 25,
        "string_script": "    '''\n    # Identify lambda value calculated by plink2\n    awk '/lambda/  {print $11+0}' !{log} > lambda.txt\n    # NA p values sometimes happen\n    awk '!/'NA'/' !{gwas} > no_na.gwas\n    # Remove hash from beginning of line\n    sed 's/#//' no_na.gwas | sed 's/LOG(OR)_SE/SE/' | sed 's/CHROM/CHR/'|  sed 's/POS/BP/' | sed 's/ID/SNP/' > valid.gwas\n    # Run plots \n    qqplot.R valid.gwas lambda.txt\n    manhattan.R valid.gwas\n    cp qqplot.png !{id}_qqplot.png \n    cp manhattan.png !{id}_manhattan.png\n    '''",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "gwas",
            "log"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "publishDir \"${params.results}/gwas/figures/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "set_chrom_code": {
        "name_process": "set_chrom_code",
        "string_process": "\nprocess set_chrom_code {\n    label 'plink2'\n\t\n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n\n    output:\n    path \"F1.bed\", emit: bed\n    path \"F1.bim\", emit: bim\n    path \"F1.fam\", emit: fam\n    path \"F1.log\", emit: log\n    \n    shell:\n    '''\n    plink2 --bfile !{bed.baseName} \\\n        --output-chr MT \\\n\t--make-bed \\\n        --out F1  \n    '''\n}",
        "nb_lignes_process": 21,
        "string_script": "    '''\n    plink2 --bfile !{bed.baseName} \\\n        --output-chr MT \\\n\t--make-bed \\\n        --out F1  \n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "fix_duplicates": {
        "name_process": "fix_duplicates",
        "string_process": "\nprocess fix_duplicates {\n    label 'plink2'\n\t\n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n\n    output:\n    path \"F3.bed\", emit: bed\n    path \"F3.bim\", emit: bim\n    path \"F3.fam\", emit: fam\n    path \"F3.log\", emit: log\n    \n    shell:\n    '''\n    # F3: Deduplicate variants\n    plink2 --bfile !{bed.baseName} \\\n      --rm-dup 'force-first' \\\n      --make-bed \\\n      --out F3\n    '''\n}",
        "nb_lignes_process": 22,
        "string_script": "    '''\n    # F3: Deduplicate variants\n    plink2 --bfile !{bed.baseName} \\\n      --rm-dup 'force-first' \\\n      --make-bed \\\n      --out F3\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "to_vcf": {
        "name_process": "to_vcf",
        "string_process": "\nprocess to_vcf {\n    label 'plink2'\n\t\n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n    \n    output:\n    path \"F4.vcf.gz\", emit: vcf\n    path \"F4.log\", emit: log\n\n    shell:\n    '''\n    plink2 --bfile !{bed.baseName} \\\n        --export vcf bgz \\\n        --out F4\n    '''\n}",
        "nb_lignes_process": 18,
        "string_script": "    '''\n    plink2 --bfile !{bed.baseName} \\\n        --export vcf bgz \\\n        --out F4\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "to_bcf": {
        "name_process": "to_bcf",
        "string_process": "\nprocess to_bcf {\n    label 'bcftools'\n\t\n    input:\n    path(vcf)\n    \n    output:\n    path \"F5.bcf\", emit: bcf\n\n    shell:\n    '''\n    bcftools index !{vcf}\n    bcftools convert !{vcf} -Ou -o F5.bcf --threads !{task.cpus}\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    bcftools index !{vcf}\n    bcftools convert !{vcf} -Ou -o F5.bcf --threads !{task.cpus}\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "vcf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'bcftools'"
        ],
        "when": "",
        "stub": ""
    },
    "check_ref_allele": {
        "name_process": "check_ref_allele",
        "string_process": "\nprocess check_ref_allele {\n    label 'bcftools'\n\t\n    input:\n    path(bcf)\n    path(dbsnp)\n    path(dbsnp_idx)\n    path(g37)\n\n    output:\n    path \"F6.bcf\", emit: bcf\n\n    shell:\n    '''\n    bcftools +fixref !{bcf} \\\n        -Ob -o F6.bcf -- \\\n        -d -f !{g37} \\\n        -i !{dbsnp}\n    '''\n}",
        "nb_lignes_process": 19,
        "string_script": "    '''\n    bcftools +fixref !{bcf} \\\n        -Ob -o F6.bcf -- \\\n        -d -f !{g37} \\\n        -i !{dbsnp}\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bcf",
            "dbsnp",
            "dbsnp_idx",
            "g37"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'bcftools'"
        ],
        "when": "",
        "stub": ""
    },
    "bcf_to_vcf": {
        "name_process": "bcf_to_vcf",
        "string_process": "\nprocess bcf_to_vcf {\n    label 'bcftools'\n    publishDir \"${params.results}/preImputation/files\", mode: 'copy'\n\n    input:\n    path(bcf)\n    \n    output:\n    path \"F7.vcf.gz\", emit: vcf\n    path \"F7.vcf.gz.csi\", emit: idx\n\t\n    shell:\n    '''\n    bcftools sort !{bcf} | bcftools convert -Oz --threads !{task.cpus} > F7.vcf.gz\n    bcftools index F7.vcf.gz \n    '''\n}",
        "nb_lignes_process": 16,
        "string_script": "    '''\n    bcftools sort !{bcf} | bcftools convert -Oz --threads !{task.cpus} > F7.vcf.gz\n    bcftools index F7.vcf.gz \n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bcf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'bcftools'",
            "publishDir \"${params.results}/preImputation/files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "split_user_chrom": {
        "name_process": "split_user_chrom",
        "string_process": "\nprocess split_user_chrom {\n    label 'bcftools'\n\t\n    input:\n    path(vcf)\n    path(idx)\n    each chr\n    \n    output:\n    tuple val(chr), file('G1.vcf.gz'), file('G1.vcf.gz.csi'), emit: chrom \n\n    shell:\n    '''\n    bcftools view -r !{chr} !{vcf} -Oz -o G1.vcf.gz --threads !{task.cpus}\n    bcftools index G1.vcf.gz --threads !{task.cpus}\n    '''\n}",
        "nb_lignes_process": 16,
        "string_script": "    '''\n    bcftools view -r !{chr} !{vcf} -Oz -o G1.vcf.gz --threads !{task.cpus}\n    bcftools index G1.vcf.gz --threads !{task.cpus}\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "vcf",
            "idx",
            "chr"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'bcftools'"
        ],
        "when": "",
        "stub": ""
    },
    "phasing": {
        "name_process": "phasing",
        "string_process": "\nprocess phasing {\n    label 'shapeit'\n\t\n    input:\n    tuple val(chr), file('G1.vcf.gz'), file('G1.vcf.gz.csi'), \\\n        file('genetic_maps.b37.tar.gz')  \n\n    output:\n    tuple val(chr), file('G2.vcf.gz'), emit: chrom, optional: true\n\n    shell:\n    '''\n    gunzip genetic_maps.b37.tar.gz\n    tar -xf genetic_maps.b37.tar\n    gunzip chr!{chr}.b37.gmap.gz # decompress the chromosome we need \n\n    # || true allows optional output without an error\n    # people might not always be imputing every chromosome\n    shapeit4 --input G1.vcf.gz \\\n        --map chr!{chr}.b37.gmap \\\n        --region !{chr} \\\n        --thread !{task.cpus} \\\n        --output G2.vcf.gz \\\n        --log log_chr.txt || true     \n    '''\n}",
        "nb_lignes_process": 25,
        "string_script": "    '''\n    gunzip genetic_maps.b37.tar.gz\n    tar -xf genetic_maps.b37.tar\n    gunzip chr!{chr}.b37.gmap.gz # decompress the chromosome we need \n\n    # || true allows optional output without an error\n    # people might not always be imputing every chromosome\n    shapeit4 --input G1.vcf.gz \\\n        --map chr!{chr}.b37.gmap \\\n        --region !{chr} \\\n        --thread !{task.cpus} \\\n        --output G2.vcf.gz \\\n        --log log_chr.txt || true     \n    '''",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chr"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'shapeit'"
        ],
        "when": "",
        "stub": ""
    },
    "bcftools_index_chr": {
        "name_process": "bcftools_index_chr",
        "string_process": "\nprocess bcftools_index_chr {\n    label 'bcftools'\n\t\n    input:\n    tuple val(chr), path('chr.vcf.gz')\n\n    output:\n    tuple val(chr), path('chr.vcf.gz'), path('chr.vcf.gz.csi'), emit: chrom_idx\n\n    shell:\n    '''\n    bcftools index chr.vcf.gz \n    '''\n}",
        "nb_lignes_process": 13,
        "string_script": "    '''\n    bcftools index chr.vcf.gz \n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "chr"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'bcftools'"
        ],
        "when": "",
        "stub": ""
    },
    "tabix_chr": {
        "name_process": "tabix_chr",
        "string_process": "\nprocess tabix_chr {\n    label 'small'\n    label 'tabix'\n\t\n\t\n    input:\n    tuple val(chr), path('chr.vcf.gz')\n\n    output:\n    tuple val(chr), path('chr.vcf.gz'), path('chr.vcf.gz.tbi'), emit: chrom_idx\n\n    shell:\n    '''\n    tabix -p vcf chr.vcf.gz\n    '''\n}",
        "nb_lignes_process": 15,
        "string_script": "    '''\n    tabix -p vcf chr.vcf.gz\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chr"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "label 'tabix'"
        ],
        "when": "",
        "stub": ""
    },
    "convert_imp5": {
        "name_process": "convert_imp5",
        "string_process": "\nprocess convert_imp5 {\n    label 'impute5'\n\t\n    input:\n    tuple val(chr), file('ref_chr.vcf.gz'), file('ref_chr.vcf.gz.tbi')\n\n    output:\n    tuple val(chr), file('1k_b37_reference_chr.imp5'), \\\n        file('1k_b37_reference_chr.imp5.idx'), emit: chrom\n\n    shell:\n    '''\n    imp5Converter!{params.impute5_version} --h ref_chr.vcf.gz \\\n        --r !{chr} \\\n\t--threads !{task.cpus} \\\n        --o 1k_b37_reference_chr.imp5\n    '''\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    imp5Converter!{params.impute5_version} --h ref_chr.vcf.gz \\\n        --r !{chr} \\\n\t--threads !{task.cpus} \\\n        --o 1k_b37_reference_chr.imp5\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chr"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chr"
        ],
        "nb_outputs": 1,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'impute5'"
        ],
        "when": "",
        "stub": ""
    },
    "impute5": {
        "name_process": "impute5",
        "string_process": "\nprocess impute5 {\n    label 'bigmem'\n    label 'impute5'\n\t\n    input:\n    tuple val(chr), file('1k_b37_reference_chr.imp5'), \\\n        file('1k_b37_reference_chr.imp5.idx'), file('G2.vcf.gz'), \\\n        file('G2.vcf.gz.csi'), file('genetic_maps.b37.tar.gz') \n       \n    output:\n    path \"${chr}.vcf.gz\", emit: imputed\n\n    shell:\n    '''\n    tar -xzf genetic_maps.b37.tar.gz\n    gunzip chr!{chr}.b37.gmap.gz # decompress the chromosome we need\n\n    impute5!{params.impute5_version} --h 1k_b37_reference_chr.imp5 \\\n        --m chr!{chr}.b37.gmap \\\n        --g G2.vcf.gz \\\n        --r !{chr} \\\n        --out-gp-field \\\n        --o !{chr}.vcf.gz\n    '''\n}",
        "nb_lignes_process": 24,
        "string_script": "    '''\n    tar -xzf genetic_maps.b37.tar.gz\n    gunzip chr!{chr}.b37.gmap.gz # decompress the chromosome we need\n\n    impute5!{params.impute5_version} --h 1k_b37_reference_chr.imp5 \\\n        --m chr!{chr}.b37.gmap \\\n        --g G2.vcf.gz \\\n        --r !{chr} \\\n        --out-gp-field \\\n        --o !{chr}.vcf.gz\n    '''",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chr"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'bigmem'",
            "label 'impute5'"
        ],
        "when": "",
        "stub": ""
    },
    "merge_imp": {
        "name_process": "merge_imp",
        "string_process": "\nprocess merge_imp {\n    label 'bcftools'\n\t\n    input:\n    path(imp)\n    \n    output:\n    path 'merged_imputed.vcf.gz', emit: vcf\n    \n    shell:\n    '''\n    # file order is important so use command substition\n    bcftools concat -n $(ls *.vcf.gz | sort -t . -k 1n) -Oz -o merged_imputed.vcf.gz --threads !{task.cpus}\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    # file order is important so use command substition\n    bcftools concat -n $(ls *.vcf.gz | sort -t . -k 1n) -Oz -o merged_imputed.vcf.gz --threads !{task.cpus}\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "imp"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'bcftools'"
        ],
        "when": "",
        "stub": ""
    },
    "prep_ref_data": {
        "name_process": "prep_ref_data",
        "string_process": "\nprocess prep_ref_data {\n  label 'samtools'\n\t\n  input:\n  path(h37)\n\n  output:\n  path \"h37_squeezed.fasta\", emit: h37\n  path \"h37_squeezed.fasta.fai\", emit: h37_idx\n  \n  shell:\n  '''\n  # -q to suppress warnings, which make nextflow unhappy\n  # readlink to fix symlink gzip problem\n  # || true to force exit code 0 \n  gunzip --quiet -dc $(readlink !{h37}) > human_g1k_v37.fasta || true\n  \n  # Fix formatting in the file or plink explodes\n  tr -s ':' < human_g1k_v37.fasta | tr -s '\\n' > h37_squeezed.fasta\n  samtools faidx h37_squeezed.fasta\n  '''\n}",
        "nb_lignes_process": 21,
        "string_script": "  '''\n  # -q to suppress warnings, which make nextflow unhappy\n  # readlink to fix symlink gzip problem\n  # || true to force exit code 0 \n  gunzip --quiet -dc $(readlink !{h37}) > human_g1k_v37.fasta || true\n  \n  # Fix formatting in the file or plink explodes\n  tr -s ':' < human_g1k_v37.fasta | tr -s '\\n' > h37_squeezed.fasta\n  samtools faidx h37_squeezed.fasta\n  '''",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "h37"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "qc_ref_data": {
        "name_process": "qc_ref_data",
        "string_process": "\nprocess qc_ref_data {\n  label 'plink2'\n\t\n  input:\n  path(thousand_pgen)\n  path(thousand_psam)\n  path(thousand_pvar)\n  path(exclude_region)\n\n  output:\n  path \"all_phase3_1.bed\", emit: bed\n  path \"all_phase3_1.bim\", emit: bim\n  path \"all_phase3_1.fam\", emit: fam\n  \n  shell:\n  '''\n  # Fix psam name\n  mv !{thousand_psam} all_phase3.psam \n  plink2 --zst-decompress all_phase3.pgen.zst > all_phase3.pgen\n  plink2 --pfile 'vzs' all_phase3 --chr 1-22 XY --make-pfile 'vzs' --out all_phase3_1\n\n  # Remove duplicates\n  plink2 --pfile 'vzs' all_phase3_1 \\\n    --rm-dup force-first \\\n    --make-pgen 'vzs'\\\n    --out all_phase3_2\n\t\n  # Remove multi-allelic variants\n  plink2 --pfile 'vzs' all_phase3_2 \\\n    --max-alleles 2 \\\n    --make-pgen 'vzs'\\\n    --out all_phase3_1\n\t\n  # Remove variants based on MAF\n  plink2 --pfile 'vzs' all_phase3_1 \\\n    --maf 0.05 \\\n    --set-missing-var-ids @:#:\\\\$r:\\\\$a \\\n    --make-bed \\\n    --out all_phase3_2\n\t\n  # Prune variants\n  plink2 --bfile all_phase3_2 \\\n    --exclude !{exclude_region} \\\n    --indep-pairwise 50 5 0.2 \\\n    --out indepSNPs_1k_allphase\n  plink2 --bfile all_phase3_2 \\\n    --extract indepSNPs_1k_allphase.prune.in \\\n    --make-bed \\\n    --out all_phase3_1\n  '''\n}",
        "nb_lignes_process": 50,
        "string_script": "  '''\n  # Fix psam name\n  mv !{thousand_psam} all_phase3.psam \n  plink2 --zst-decompress all_phase3.pgen.zst > all_phase3.pgen\n  plink2 --pfile 'vzs' all_phase3 --chr 1-22 XY --make-pfile 'vzs' --out all_phase3_1\n\n  # Remove duplicates\n  plink2 --pfile 'vzs' all_phase3_1 \\\n    --rm-dup force-first \\\n    --make-pgen 'vzs'\\\n    --out all_phase3_2\n\t\n  # Remove multi-allelic variants\n  plink2 --pfile 'vzs' all_phase3_2 \\\n    --max-alleles 2 \\\n    --make-pgen 'vzs'\\\n    --out all_phase3_1\n\t\n  # Remove variants based on MAF\n  plink2 --pfile 'vzs' all_phase3_1 \\\n    --maf 0.05 \\\n    --set-missing-var-ids @:#:\\\\$r:\\\\$a \\\n    --make-bed \\\n    --out all_phase3_2\n\t\n  # Prune variants\n  plink2 --bfile all_phase3_2 \\\n    --exclude !{exclude_region} \\\n    --indep-pairwise 50 5 0.2 \\\n    --out indepSNPs_1k_allphase\n  plink2 --bfile all_phase3_2 \\\n    --extract indepSNPs_1k_allphase.prune.in \\\n    --make-bed \\\n    --out all_phase3_1\n  '''",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "thousand_pgen",
            "thousand_psam",
            "thousand_pvar",
            "exclude_region"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "decompress": {
        "name_process": "decompress",
        "string_process": "\nprocess decompress {\n  label 'samtools'\n  \n  input:\n  path(x)\n\n  output:\n  path(\"${x.baseName}\"), emit: file\n\n  shell:\n  '''\n  bgzip -d !{x}\n  '''\n}",
        "nb_lignes_process": 13,
        "string_script": "  '''\n  bgzip -d !{x}\n  '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "x"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "qc": {
        "name_process": "qc",
        "string_process": "\nprocess qc {\n  label 'bcftools'\n\t\n  input:\n  tuple val(chr), path(vcf), path(g37)\n\n  output:\n  tuple val(chr), path(\"*.vcf.gz\"), emit: vcf\n  \n  shell:\n  '''\n  bcftools norm -m-any --check-ref w -f !{g37} !{vcf} | bcftools norm -Oz --rm-dup none -o !{chr}_norm.vcf.gz\n  '''\n}",
        "nb_lignes_process": 13,
        "string_script": "  '''\n  bcftools norm -m-any --check-ref w -f !{g37} !{vcf} | bcftools norm -Oz --rm-dup none -o !{chr}_norm.vcf.gz\n  '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "chr",
            "vcf",
            "g37"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'bcftools'"
        ],
        "when": "",
        "stub": ""
    },
    "unzip_shapeit4": {
        "name_process": "unzip_shapeit4",
        "string_process": "\nprocess unzip_shapeit4 {\n  input:\n  path(x)\n\n  output:\n  path \"genetic_maps.b37.tar.gz\", emit: maps\n\n  shell:\n  '''\n  unzip !{x}\n  mv shapeit4-4.2.0/maps/genetic_maps.b37.tar.gz .\n  '''\n}",
        "nb_lignes_process": 12,
        "string_script": "  '''\n  unzip !{x}\n  mv shapeit4-4.2.0/maps/genetic_maps.b37.tar.gz .\n  '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "x"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "annotate_ids": {
        "name_process": "annotate_ids",
        "string_process": "\nprocess annotate_ids {\n  label 'bcftools'\n  \n  input:\n  tuple val(chr), path(vcf)\n\n  output:\n  path \"*.vcf.gz\", emit: vcf\n \n  shell:\n  '''\n  bcftools annotate --set-id '%CHROM\\\\_%POS\\\\_%REF\\\\_%FIRST_ALT'  !{vcf} -Oz -o !{chr}.vcf.gz\n  '''\n}",
        "nb_lignes_process": 13,
        "string_script": "  '''\n  bcftools annotate --set-id '%CHROM\\\\_%POS\\\\_%REF\\\\_%FIRST_ALT'  !{vcf} -Oz -o !{chr}.vcf.gz\n  '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "chr",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'bcftools'"
        ],
        "when": "",
        "stub": ""
    },
    "index_vcf": {
        "name_process": "index_vcf",
        "string_process": "\nprocess index_vcf {\n  label 'tabix'\n\t\n  input:\n  path(vcf)\n\n  output:\n  path \"*.tbi\", emit: idx\n \n  shell:\n  '''\n  tabix !{vcf}\n  '''\n}",
        "nb_lignes_process": 13,
        "string_script": "  '''\n  tabix !{vcf}\n  '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'tabix'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_maf": {
        "name_process": "filter_maf",
        "string_process": "\nprocess filter_maf {\n    label 'plink2'\n\t\n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n\n    output:\n    path \"H2.bed\", emit: bed\n    path \"H2.bim\", emit: bim\n    path \"H2.fam\", emit: fam\n    path \"H2.log\", emit: log\n    \n    shell:\n    '''\n    plink2 --bfile !{bed.baseName} \\\n        --maf !{params.impute_maf} \\\n        --make-bed \\\n        --out H2\n    '''\n}",
        "nb_lignes_process": 21,
        "string_script": "    '''\n    plink2 --bfile !{bed.baseName} \\\n        --maf !{params.impute_maf} \\\n        --make-bed \\\n        --out H2\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "run_snpflip": {
        "name_process": "run_snpflip",
        "string_process": "\nprocess run_snpflip {\n    label 'medium'\n    label 'snpflip'\n\t\n\n    input: \n    path(bed)\n    path(bim)\n    path(fam)\n    path(g37)\n\n    output:\n    path \"flipped_snps.reverse\", emit: rev\n    path \"flipped_snps.ambiguous\", emit: ambig\n\n    shell:\n    '''\n    # Run snpflip to identify ambiguous SNPs and SNPs that are located on the \n    # reverse strand\n    snpflip -b !{bim} \\\n        -f !{g37} \\\n        -o flipped_snps \n    '''\n}",
        "nb_lignes_process": 23,
        "string_script": "    '''\n    # Run snpflip to identify ambiguous SNPs and SNPs that are located on the \n    # reverse strand\n    snpflip -b !{bim} \\\n        -f !{g37} \\\n        -o flipped_snps \n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam",
            "g37"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'medium'",
            "label 'snpflip'"
        ],
        "when": "",
        "stub": ""
    },
    "flip_snps": {
        "name_process": "flip_snps",
        "string_process": "\nprocess flip_snps {  \n    label 'plink1'\n\t\n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n    path(snpflip_rev)\n    path(snpflip_ambig)\n\n    output:\n    path \"D4.bed\", emit: bed\n    path \"D4.bim\", emit: bim\n    path \"D4.fam\", emit: fam\n    path \"D4.log\", emit: log\n\n    shell:\n    '''\n    # Flip all reversed SNPs\n    plink --bfile !{bed.baseName} \\\n        --flip !{snpflip_rev} \\\n        --make-bed \\\n        --out flipped\n\n    # Remove ambiguous SNPs\n    plink --bfile flipped \\\n        --exclude !{snpflip_ambig} \\\n        --make-bed \\\n        --out D4\n    '''\n}",
        "nb_lignes_process": 30,
        "string_script": "    '''\n    # Flip all reversed SNPs\n    plink --bfile !{bed.baseName} \\\n        --flip !{snpflip_rev} \\\n        --make-bed \\\n        --out flipped\n\n    # Remove ambiguous SNPs\n    plink --bfile flipped \\\n        --exclude !{snpflip_ambig} \\\n        --make-bed \\\n        --out D4\n    '''",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "bed",
            "bim",
            "fam",
            "snpflip_rev",
            "snpflip_ambig"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "align": {
        "name_process": "align",
        "string_process": "\nprocess align {\n    label 'plink1'\n\t\n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n    path(ref_bed)\n    path(ref_bim)\n    path(ref_fam)\n\n    output:\n    path \"D5.bed\", emit: bed\n    path \"D5.bim\", emit: bim\n    path \"D5.fam\", emit: fam\n    path \"D5.log\", emit: log\n\n    shell:\n    '''\n    # set 1k genome as reference to user's data \n    awk '{print$2,$5}' !{ref_bim} > 1kg_ref-list.txt\n\n    plink --bfile !{bed.baseName} \\\n        --reference-allele 1kg_ref-list.txt \\\n        --make-bed \\\n        --out D5\n    '''\n}",
        "nb_lignes_process": 27,
        "string_script": "    '''\n    # set 1k genome as reference to user's data \n    awk '{print$2,$5}' !{ref_bim} > 1kg_ref-list.txt\n\n    plink --bfile !{bed.baseName} \\\n        --reference-allele 1kg_ref-list.txt \\\n        --make-bed \\\n        --out D5\n    '''",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "bed",
            "bim",
            "fam",
            "ref_bed",
            "ref_bim",
            "ref_fam"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "merge": {
        "name_process": "merge",
        "string_process": "\nprocess merge {\n    label 'plink1'\n\t\n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n    path(ref_bed)\n    path(ref_bim)\n    path(ref_fam)\n    \n    output:\n    path \"D6.bed\", emit: bed\n    path \"D6.bim\", emit: bim\n    path \"D6.fam\", emit: fam\n    path \"D6.log\", emit: log\n    \n    shell:\n    '''\n    # Extract the variants present in user's dataset from the 1000 genomes dataset\n    awk '{print $2}' !{bim} > user_snps.txt\n    plink --bfile !{ref_bed.baseName} \\\n        --extract user_snps.txt \\\n        --make-bed \\\n        --out 1kG_subset\n\n    # Extract the variants present in 1000 Genomes dataset from the user's dataset\n    awk '{print $2}' 1kG_subset.bim > 1kG_PCA6_SNPs.txt\n    plink --bfile !{bim.baseName} \\\n        --extract 1kG_PCA6_SNPs.txt \\\n        --make-bed \\\n        --out D6_subset\n\n    # Find differences between the two files that still appear after flipping \n    # and removing ambiguous SNPs\n    awk '{print $2,$5,$6}' D6_subset.bim > user_data_corrected_tmp\n    awk '{print $2,$5,$6}' 1kG_subset.bim > 1k_corrected_tmp\n    sort user_data_corrected_tmp 1k_corrected_tmp | uniq -u > uncorresponding_SNPs.txt\n\n    # Keep only the unique SNP ids \n    awk '{print $1}' uncorresponding_SNPs.txt | sort -u > SNPs_for_exclusion.txt\n\n    # Remove the problematic SNPs from both datasets\n    plink --bfile D6_subset \\\n        --exclude SNPs_for_exclusion.txt \\\n        --make-bed \\\n        --out D6_subset_exclude\n          \n    plink --bfile 1kG_subset \\\n        --exclude SNPs_for_exclusion.txt \\\n        --make-bed \\\n        --out 1kG_subset_exclude\n\n    # Merge user's dataset with 1000 Genomes Data\n    plink --bfile D6_subset_exclude \\\n        --bmerge 1kG_subset_exclude.bed 1kG_subset_exclude.bim 1kG_subset_exclude.fam \\\n        --allow-no-sex \\\n        --make-bed \\\n        --out D6 \n    '''\n}",
        "nb_lignes_process": 60,
        "string_script": "    '''\n    # Extract the variants present in user's dataset from the 1000 genomes dataset\n    awk '{print $2}' !{bim} > user_snps.txt\n    plink --bfile !{ref_bed.baseName} \\\n        --extract user_snps.txt \\\n        --make-bed \\\n        --out 1kG_subset\n\n    # Extract the variants present in 1000 Genomes dataset from the user's dataset\n    awk '{print $2}' 1kG_subset.bim > 1kG_PCA6_SNPs.txt\n    plink --bfile !{bim.baseName} \\\n        --extract 1kG_PCA6_SNPs.txt \\\n        --make-bed \\\n        --out D6_subset\n\n    # Find differences between the two files that still appear after flipping \n    # and removing ambiguous SNPs\n    awk '{print $2,$5,$6}' D6_subset.bim > user_data_corrected_tmp\n    awk '{print $2,$5,$6}' 1kG_subset.bim > 1k_corrected_tmp\n    sort user_data_corrected_tmp 1k_corrected_tmp | uniq -u > uncorresponding_SNPs.txt\n\n    # Keep only the unique SNP ids \n    awk '{print $1}' uncorresponding_SNPs.txt | sort -u > SNPs_for_exclusion.txt\n\n    # Remove the problematic SNPs from both datasets\n    plink --bfile D6_subset \\\n        --exclude SNPs_for_exclusion.txt \\\n        --make-bed \\\n        --out D6_subset_exclude\n          \n    plink --bfile 1kG_subset \\\n        --exclude SNPs_for_exclusion.txt \\\n        --make-bed \\\n        --out 1kG_subset_exclude\n\n    # Merge user's dataset with 1000 Genomes Data\n    plink --bfile D6_subset_exclude \\\n        --bmerge 1kG_subset_exclude.bed 1kG_subset_exclude.bim 1kG_subset_exclude.fam \\\n        --allow-no-sex \\\n        --make-bed \\\n        --out D6 \n    '''",
        "nb_lignes_script": 41,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "bed",
            "bim",
            "fam",
            "ref_bed",
            "ref_bim",
            "ref_fam"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "pca_prep": {
        "name_process": "pca_prep",
        "string_process": "\nprocess pca_prep {    \n    label 'plink2'\n\t\n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n    path(exclude_region)\n    \n    output:\n    path(\"D6_indep.bed\"), emit: bed \n    path(\"D6_indep.bim\"), emit: bim\n    path(\"D6_indep.fam\"), emit: fam\n    path(\"D6_indep.log\"), emit: log\n    \n    shell:\n    '''\n    # recalculate independent snps\n    plink2 --bfile !{bed.baseName} \\\n        --exclude !{exclude_region} \\\n        --indep-pairwise !{params.indep_pairwise} \\\n        --out independent_SNPs \n\n    # Pruning on merged dataset\n    plink2 --bfile !{bed.baseName} \\\n        --extract independent_SNPs.prune.in \\\n        --make-bed \\\n        --out D6_indep \n    '''\n}",
        "nb_lignes_process": 29,
        "string_script": "    '''\n    # recalculate independent snps\n    plink2 --bfile !{bed.baseName} \\\n        --exclude !{exclude_region} \\\n        --indep-pairwise !{params.indep_pairwise} \\\n        --out independent_SNPs \n\n    # Pruning on merged dataset\n    plink2 --bfile !{bed.baseName} \\\n        --extract independent_SNPs.prune.in \\\n        --make-bed \\\n        --out D6_indep \n    '''",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam",
            "exclude_region"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "popfile": {
        "name_process": "popfile",
        "string_process": "\nprocess popfile {\n    label 'small'\n    \n    input:\n    path(panel)\n    \n    output:\n    path \"super_popfile.txt\", emit: super\n    path \"sub_popfile.txt\", emit: sub\n\n    shell:\n    '''\n    # Make 1st popfile, using the 20130502 panel using superpopulation codes\n    # (i.e., AFR,AMR,EASN,SAS and EUR)\n    awk '{print $1,$1,$3}' !{panel} > super_popfile.txt\n\n    # Make 2nd popfile, using the 20130502 panel using subpopulation codes \n    awk '{print $1,$1,$2}' !{panel} > sub_popfile.txt  \n    '''\n}",
        "nb_lignes_process": 19,
        "string_script": "    '''\n    # Make 1st popfile, using the 20130502 panel using superpopulation codes\n    # (i.e., AFR,AMR,EASN,SAS and EUR)\n    awk '{print $1,$1,$3}' !{panel} > super_popfile.txt\n\n    # Make 2nd popfile, using the 20130502 panel using subpopulation codes \n    awk '{print $1,$1,$2}' !{panel} > sub_popfile.txt  \n    '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "panel"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'"
        ],
        "when": "",
        "stub": ""
    },
    "eigensoft": {
        "name_process": "eigensoft",
        "string_process": "\nprocess eigensoft {\n    label 'eigensoft'\n    label 'medium'\n\n    input:\n    path bed\n    path bim\n    path fam\n    path popfile\n    path pca_fam\n    path parfile\n\n    output:\n    path \"eigenvec\", emit: eigenvec\n    path \"merged_popfile.txt\", emit: merged_popfile \n    path \"keep_sample_list.txt\", emit: keep_samples\n    \n    shell:\n    '''\n    # Concatenate popfiles: User's + popfile\n    awk '{print $1,$2,\"OWN\"}' !{pca_fam} > popfile_toy_own.txt\n    cat !{popfile} popfile_toy_own.txt | sed -e '1i\\\\FID IID pop' >  merged_popfile.txt\n\n    # Assign populations to FID and IIDs, make .pedind\n    awk 'NR==FNR {h[\\$2] = \\$3; next} {print \\$1,\\$2,\\$3,\\$4,\\$5,h[\\$2]}' merged_popfile.txt !{fam} > D8_indep.pedind\n\n    # make poplist.txt\n    echo \"OWN\" > poplist.txt\n    echo !{params.popcode} | xargs -n1 >> poplist.txt\n    \n    echo \"genotypename: !{bed}\" > parfile\n    echo \"snpname:      !{bim}\" >> parfile\n    echo \"indivname:    D8_indep.pedind\" >> parfile\n    echo \"evecoutname:  eigenvec\" >> parfile\n    echo \"evaloutname:  eigenval\" >> parfile\n    echo \"outlieroutname: excluded_outliers.txt\" >> parfile\n    echo \"poplistname: poplist.txt\" >> parfile\n\n    cat !{parfile} >> parfile\n    \n    smartpca -p parfile > log.txt\n\n    awk -F \" \" '{print $1}' eigenvec | sed '1d' | awk -F \":\" '{print $1,$2}' > keep_sample_list.txt\n    '''\n}",
        "nb_lignes_process": 44,
        "string_script": "    '''\n    # Concatenate popfiles: User's + popfile\n    awk '{print $1,$2,\"OWN\"}' !{pca_fam} > popfile_toy_own.txt\n    cat !{popfile} popfile_toy_own.txt | sed -e '1i\\\\FID IID pop' >  merged_popfile.txt\n\n    # Assign populations to FID and IIDs, make .pedind\n    awk 'NR==FNR {h[\\$2] = \\$3; next} {print \\$1,\\$2,\\$3,\\$4,\\$5,h[\\$2]}' merged_popfile.txt !{fam} > D8_indep.pedind\n\n    # make poplist.txt\n    echo \"OWN\" > poplist.txt\n    echo !{params.popcode} | xargs -n1 >> poplist.txt\n    \n    echo \"genotypename: !{bed}\" > parfile\n    echo \"snpname:      !{bim}\" >> parfile\n    echo \"indivname:    D8_indep.pedind\" >> parfile\n    echo \"evecoutname:  eigenvec\" >> parfile\n    echo \"evaloutname:  eigenval\" >> parfile\n    echo \"outlieroutname: excluded_outliers.txt\" >> parfile\n    echo \"poplistname: poplist.txt\" >> parfile\n\n    cat !{parfile} >> parfile\n    \n    smartpca -p parfile > log.txt\n\n    awk -F \" \" '{print $1}' eigenvec | sed '1d' | awk -F \":\" '{print $1,$2}' > keep_sample_list.txt\n    '''",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam",
            "popfile",
            "pca_fam",
            "parfile"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'eigensoft'",
            "label 'medium'"
        ],
        "when": "",
        "stub": ""
    },
    "pca_plink": {
        "name_process": "pca_plink",
        "string_process": "\nprocess pca_plink {\n    label 'plink1'\n\t\n    input:\n    path bed\n    path bim\n    path fam\n    path eigenvec\n\n    output:\n    path 'before.eigenvec', emit: before\n    path 'after.eigenvec', emit: after\n    \n    shell:\n    '''\n    plink --bfile !{bed.baseName} \\\n\t--pca header \\\n\t--out before\n    # Keep only a homogenous cohort\n    awk '{print $1}' !{eigenvec} | tail -n +2 | awk -F \":\" '{print $1,$2}' > keep_sample_list.txt\n    plink --bfile !{bed.baseName} \\\n        --keep keep_sample_list.txt \\\n        --make-bed \\\n        --out keep\n    plink --bfile keep \\\n        --pca header \\\n        --out after\n    '''\n}",
        "nb_lignes_process": 28,
        "string_script": "    '''\n    plink --bfile !{bed.baseName} \\\n\t--pca header \\\n\t--out before\n    # Keep only a homogenous cohort\n    awk '{print $1}' !{eigenvec} | tail -n +2 | awk -F \":\" '{print $1,$2}' > keep_sample_list.txt\n    plink --bfile !{bed.baseName} \\\n        --keep keep_sample_list.txt \\\n        --make-bed \\\n        --out keep\n    plink --bfile keep \\\n        --pca header \\\n        --out after\n    '''",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "bed",
            "bim",
            "fam",
            "eigenvec"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "plot_plink_pca": {
        "name_process": "plot_plink_pca",
        "string_process": "\nprocess plot_plink_pca {\n    publishDir \"${params.results}/pop_strat/figures\", mode: 'copy'\n    \n    input:\n    tuple val(id), path(eigenvec), path(popfile)\n\n    output:\n    path \"*.png\", emit: figure\n    path \"*.rds\", emit: rds\n    \n    shell:\n    '''\n    plot_pca_plink.R !{eigenvec} !{popfile} !{id}\n    '''    \n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    plot_pca_plink.R !{eigenvec} !{popfile} !{id}\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "eigenvec",
            "popfile"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "publishDir \"${params.results}/pop_strat/figures\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "extract_homogenous": {
        "name_process": "extract_homogenous",
        "string_process": "\nprocess extract_homogenous {\n    label 'plink2'\n    publishDir \"${params.results}/pop_strat/bfiles\", mode: 'copy'\n    \n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n    path(keep)\n    \n    output:\n    path \"D9.bed\", emit: bed\n    path \"D9.bim\", emit: bim\n    path \"D9.fam\", emit: fam\n    path \"D9.log\", emit: log\n    \n    shell:\n    '''\n    plink2 --bfile !{bed.baseName} \\\n         --keep !{keep} \\\n         --make-bed \\\n         --out D9\n    '''\n}",
        "nb_lignes_process": 23,
        "string_script": "    '''\n    plink2 --bfile !{bed.baseName} \\\n         --keep !{keep} \\\n         --make-bed \\\n         --out D9\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam",
            "keep"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'",
            "publishDir \"${params.results}/pop_strat/bfiles\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "dictionary": {
        "name_process": "dictionary",
        "string_process": "\nprocess dictionary {\n    label 'small'\n    label 'picard'\n  \n    input:\n    path(fa)\n\n    output:\n    path \"*.dict\", emit: dict\n\n    shell:\n    '''\n    # make it so!\n    picard \\\n\tCreateSequenceDictionary \\\n\t-R !{fa} \\\n\t-O !{fa.baseName}.fa.dict\n    '''\n}",
        "nb_lignes_process": 18,
        "string_script": "    '''\n    # make it so!\n    picard \\\n\tCreateSequenceDictionary \\\n\t-R !{fa} \\\n\t-O !{fa.baseName}.fa.dict\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "fa"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "label 'picard'"
        ],
        "when": "",
        "stub": ""
    },
    "num_to_chr": {
        "name_process": "num_to_chr",
        "string_process": "\nprocess num_to_chr {\n    label 'bcftools'\n  \n    input:\n    path(in_vcf)\n    path(chr_map)\n\n    output:\n    path \"out.vcf.gz\", emit: vcf\n\n    shell:\n    '''\n    bcftools annotate --rename-chr !{chr_map} !{in_vcf} \\\n\t-Oz -o out.vcf.gz --threads !{task.cpus}\n    '''\n}",
        "nb_lignes_process": 15,
        "string_script": "    '''\n    bcftools annotate --rename-chr !{chr_map} !{in_vcf} \\\n\t-Oz -o out.vcf.gz --threads !{task.cpus}\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "in_vcf",
            "chr_map"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'bcftools'"
        ],
        "when": "",
        "stub": ""
    },
    "liftover": {
        "name_process": "liftover",
        "string_process": "\nprocess liftover {\n    label 'small'\n    label 'picard'\n    memory { (params.mem * 1.2) + 'G' }\n\n    input:\n    path(vcf)\n    path(hg)\n    path(chain)\n    path(dict)\n\n    output:\n    path \"out.vcf\", emit: vcf\n    path \"rejected_variants.vcf\", emit: rejected_vcf\n\n    shell:\n    '''\n    # !{dict} unused but needed to stage in file\n    picard \"-Xmx!{params.mem}G\" LiftoverVcf \\\n\t-I !{vcf} \\\n\t-O out.vcf \\\n\t-CHAIN !{chain} \\\n\t-REJECT rejected_variants.vcf \\\n\t-R !{hg}\n    '''\n}",
        "nb_lignes_process": 25,
        "string_script": "    '''\n    # !{dict} unused but needed to stage in file\n    picard \"-Xmx!{params.mem}G\" LiftoverVcf \\\n\t-I !{vcf} \\\n\t-O out.vcf \\\n\t-CHAIN !{chain} \\\n\t-REJECT rejected_variants.vcf \\\n\t-R !{hg}\n    '''",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "vcf",
            "hg",
            "chain",
            "dict"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'small'",
            "label 'picard'",
            "memory { (params.mem * 1.2) + 'G' }"
        ],
        "when": "",
        "stub": ""
    },
    "chr_to_num": {
        "name_process": "chr_to_num",
        "string_process": "\nprocess chr_to_num {  \n    label 'bcftools'\n    publishDir \"${params.results}/convertBuild/files/\", mode: 'copy'\n\n    input:\n    path(vcf)\n    path(chr_map)\n\n    output:\n    path \"converted.vcf.gz\", emit: vcf\n\n    shell:\n    '''\n    awk '{print $2 \"\\t\" $1}' !{chr_map} > Chr1To1.txt\n\n    # Change the chromosome ids again\n    bcftools annotate --rename-chr Chr1To1.txt !{vcf} -Oz -o converted.vcf.gz --threads !{task.cpus}\n    '''\n}",
        "nb_lignes_process": 18,
        "string_script": "    '''\n    awk '{print $2 \"\\t\" $1}' !{chr_map} > Chr1To1.txt\n\n    # Change the chromosome ids again\n    bcftools annotate --rename-chr Chr1To1.txt !{vcf} -Oz -o converted.vcf.gz --threads !{task.cpus}\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "vcf",
            "chr_map"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'bcftools'",
            "publishDir \"${params.results}/convertBuild/files/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "vcf_to_plink": {
        "name_process": "vcf_to_plink",
        "string_process": "\nprocess vcf_to_plink {\n    label 'plink2'\n    publishDir \"${params.results}/convertBuild/files/\", mode: 'copy'\n\n    input:\n    path(vcf)\n    path(in_fam)\n\n    output:\n    path \"converted.bed\", emit: bed\n    path \"converted.bim\", emit: bim\n    path \"converted.fam\", emit: fam\n\n    shell:\n    '''\n    # Convert VCF to PLINK format\n    plink2 --vcf !{vcf} \\\n        --id-delim _ \\\n        --max-alleles 2 \\\n        --chr 1-22 XY \\\n        --allow-extra-chr \\\n        --make-bed \\\n        --out converted\n\n    # Update phenotypes\n    plink2 --bfile converted \\\n        --fam !{in_fam} \\\n        --make-bed \\\n        --out converted \n    '''\n}",
        "nb_lignes_process": 30,
        "string_script": "    '''\n    # Convert VCF to PLINK format\n    plink2 --vcf !{vcf} \\\n        --id-delim _ \\\n        --max-alleles 2 \\\n        --chr 1-22 XY \\\n        --allow-extra-chr \\\n        --make-bed \\\n        --out converted\n\n    # Update phenotypes\n    plink2 --bfile converted \\\n        --fam !{in_fam} \\\n        --make-bed \\\n        --out converted \n    '''",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf",
            "in_fam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'",
            "publishDir \"${params.results}/convertBuild/files/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_imp": {
        "name_process": "filter_imp",
        "string_process": "\nprocess filter_imp {\n    label 'plink2'\n\t\n    input:\n    path(imp)\n\n    output:\n    path \"H1.bed\", emit: bed\n    path \"H1.bim\", emit: bim\n    path \"H1.fam\", emit: fam\n    path \"H1.log\", emit: log\n    \n    shell:\n    '''\n    plink2 --vcf !{imp} \\\n        --extract-if-info INFO '>'= !{params.info} \\\n        --make-bed \\\n        --out H1\n    '''\n}",
        "nb_lignes_process": 19,
        "string_script": "    '''\n    plink2 --vcf !{imp} \\\n        --extract-if-info INFO '>'= !{params.info} \\\n        --make-bed \\\n        --out H1\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "imp"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "duplicates_cat1": {
        "name_process": "duplicates_cat1",
        "string_process": "\nprocess duplicates_cat1 {\n    label 'plink2' \n \n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n\n    output:\n    path \"H3.bed\", emit: bed\n    path \"H3.bim\", emit: bim \n    path \"H3.fam\", emit: fam\n    path \"H3.log\", emit: log\n    \n    shell:\n    '''\n    # All variants are annotated to this format chr:pos:ref:alt and remove exact duplicates\n    plink2 --bfile !{bed.baseName} \\\n        --rm-dup force-first list \\\n        --make-bed \\\n        --out H3\n    '''\n}",
        "nb_lignes_process": 22,
        "string_script": "    '''\n    # All variants are annotated to this format chr:pos:ref:alt and remove exact duplicates\n    plink2 --bfile !{bed.baseName} \\\n        --rm-dup force-first list \\\n        --make-bed \\\n        --out H3\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "duplicates_cat2": {
        "name_process": "duplicates_cat2",
        "string_process": "\nprocess duplicates_cat2 {\n    label 'plink2'\n\t\n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n    \n    output:\n    path \"H4.bed\", emit: bed\n    path \"H4.bim\", emit: bim \n    path \"H4.fam\", emit: fam\n    path \"H4.log\", emit: log\n  \n    shell:\n    '''\n    # Identify the multi-allelics based on position and reference allele\n    cut -f 1,4,6 !{bim} | sort | uniq -d | cut -f 2 | grep -w -F -f - !{bim} | cut -f 2 > multi_allelics.txt\n    if [[ $(wc -l < multi_allelics.txt) -gt 0 ]]\n    then\n        plink2 --bfile !{bed.baseName} \\\n\t    --exclude multi_allelics.txt \\\n\t    --make-bed \\\n\t    --out H4\n        else\n        plink2 --bfile !{bim.baseName} \\\n\t    --make-bed \\\n\t    --out H4\n    fi\n    '''\n}",
        "nb_lignes_process": 30,
        "string_script": "    '''\n    # Identify the multi-allelics based on position and reference allele\n    cut -f 1,4,6 !{bim} | sort | uniq -d | cut -f 2 | grep -w -F -f - !{bim} | cut -f 2 > multi_allelics.txt\n    if [[ $(wc -l < multi_allelics.txt) -gt 0 ]]\n    then\n        plink2 --bfile !{bed.baseName} \\\n\t    --exclude multi_allelics.txt \\\n\t    --make-bed \\\n\t    --out H4\n        else\n        plink2 --bfile !{bim.baseName} \\\n\t    --make-bed \\\n\t    --out H4\n    fi\n    '''",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "duplicates_cat3": {
        "name_process": "duplicates_cat3",
        "string_process": "\nprocess duplicates_cat3 {\n    label 'plink1'\n \n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n\n    output:\n    path \"H5.bed\", emit: bed\n    path \"H5.bim\", emit: bim\n    path \"H5.fam\", emit: fam\n    path \"H5.log\", emit: log \n    \n    shell:\n    '''\n    cut -f 2 !{bim} | sort | uniq -d > merged_variants.txt\n\n    if [[ $(wc -l < merged_variants.txt) -gt 0 ]]\n    then\n      plink --bfile !{bim.baseName} \\\n          --extract merged_variants.txt \\\n          --make-bed \\\n          --out merged_snps\n      plink --bfile !{bim.baseName} \\\n          --exclude merged_variants.txt \\\n          --make-bed \\\n          --out excluded_snps\n      plink --bfile merged_snps \\\n          --set-all-var-ids @:#:\\\\$r:\\\\$a \\\n          --new-id-max-allele-len 300 missing\\\n          --make-bed \\\n          --out annotated\n      plink --bfile excluded_snps \\\n          --bmerge annotated \\\n          --make-bed \\\n          --out H5   \n    else\n      plink -bfile !{bim.baseName} \\\n          --make-bed \\\n          --out H5\n    fi\n    '''\n}",
        "nb_lignes_process": 43,
        "string_script": "    '''\n    cut -f 2 !{bim} | sort | uniq -d > merged_variants.txt\n\n    if [[ $(wc -l < merged_variants.txt) -gt 0 ]]\n    then\n      plink --bfile !{bim.baseName} \\\n          --extract merged_variants.txt \\\n          --make-bed \\\n          --out merged_snps\n      plink --bfile !{bim.baseName} \\\n          --exclude merged_variants.txt \\\n          --make-bed \\\n          --out excluded_snps\n      plink --bfile merged_snps \\\n          --set-all-var-ids @:#:\\\\$r:\\\\$a \\\n          --new-id-max-allele-len 300 missing\\\n          --make-bed \\\n          --out annotated\n      plink --bfile excluded_snps \\\n          --bmerge annotated \\\n          --make-bed \\\n          --out H5   \n    else\n      plink -bfile !{bim.baseName} \\\n          --make-bed \\\n          --out H5\n    fi\n    '''",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "bed",
            "bim",
            "fam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink1'"
        ],
        "when": "",
        "stub": ""
    },
    "update_ids": {
        "name_process": "update_ids",
        "string_process": "\nprocess update_ids {    \n    label 'plink2'\n\t\n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n    path(user_fam)\n\n    output:\n    path \"H6.bed\", emit: bed\n    path \"H6.bim\", emit: bim\n    path \"H6.fam\", emit: fam\n    path \"H6.log\", emit: log \n    \n    shell:\n    '''\n    awk '{print $1, $2}' !{fam} > old_pids.txt\n    awk '{print $1, $2}' !{user_fam} > new_pids.txt\n    paste old_pids.txt new_pids.txt > update_ids.txt\n\t\n    plink2 --bfile !{bed.baseName} \\\n        --update-ids update_ids.txt \\\n        --make-bed \\\n        --out H6\n    '''\n}",
        "nb_lignes_process": 26,
        "string_script": "    '''\n    awk '{print $1, $2}' !{fam} > old_pids.txt\n    awk '{print $1, $2}' !{user_fam} > new_pids.txt\n    paste old_pids.txt new_pids.txt > update_ids.txt\n\t\n    plink2 --bfile !{bed.baseName} \\\n        --update-ids update_ids.txt \\\n        --make-bed \\\n        --out H6\n    '''",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam",
            "user_fam"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "update_phenotype": {
        "name_process": "update_phenotype",
        "string_process": "\nprocess update_phenotype {\n    label 'plink2'\n    publishDir \"${params.results}/post_imputation/bfiles\", mode: 'copy'\n    \n    input:\n    path(bed)\n    path(bim)\n    path(fam)\n    path(user_fam)\n\n    output:\n    path \"H7.bed\", emit: bed\n    path \"H7.bim\", emit: bim\n    path \"H7.fam\", emit: fam\n    path \"H7.log\", emit: log \n    \n    shell:\n    '''\n    plink2 --bfile !{bed.baseName} \\\n        --fam !{user_fam} \\\n        --make-bed \\\n        --out H7\n    '''\n}",
        "nb_lignes_process": 23,
        "string_script": "    '''\n    plink2 --bfile !{bed.baseName} \\\n        --fam !{user_fam} \\\n        --make-bed \\\n        --out H7\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bed",
            "bim",
            "fam",
            "user_fam"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nebfield__snpQT",
        "directive": [
            "label 'plink2'",
            "publishDir \"${params.results}/post_imputation/bfiles\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
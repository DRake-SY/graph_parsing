{
    "meta_manifest_lines": {
        "name_process": "meta_manifest_lines",
        "string_process": "\nprocess meta_manifest_lines {\n    \n    executor 'local'\n    \n    publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true\n    \n    input:\n        file(cellMeta) from CELL_METADATA\n        file(condensedSdrf) from CONDENSED_SDRF\n        file(projectFile) from PROJECT_FILE\n\n    output:\n        stdout META_MANIFEST_LINES\n        file(\"${expName}.condensed-sdrf.tsv\")\n        file(\"${expName}.cell_metadata.tsv\")\n        file(\"${expName}.project.h5ad\")\n\n    \"\"\"\n    cp -P $condensedSdrf ${expName}.condensed-sdrf.tsv\n    cp -P $cellMeta ${expName}.cell_metadata.tsv\n    cp -P $projectFile ${expName}.project.h5ad\n    echo -e \"cell_metadata\\t${expName}.cell_metadata.tsv\\t\"\n    echo -e \"condensed_sdrf\\t${expName}.condensed-sdrf.tsv\\t\"\n    echo -e \"project_file\\t${expName}.project.h5ad\\t\"\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n    cp -P $condensedSdrf ${expName}.condensed-sdrf.tsv\n    cp -P $cellMeta ${expName}.cell_metadata.tsv\n    cp -P $projectFile ${expName}.project.h5ad\n    echo -e \"cell_metadata\\t${expName}.cell_metadata.tsv\\t\"\n    echo -e \"condensed_sdrf\\t${expName}.condensed-sdrf.tsv\\t\"\n    echo -e \"project_file\\t${expName}.project.h5ad\\t\"\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "CELL_METADATA",
            "CONDENSED_SDRF",
            "PROJECT_FILE"
        ],
        "nb_inputs": 3,
        "outputs": [
            "META_MANIFEST_LINES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'",
            "publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "reference_manifest_lines": {
        "name_process": "reference_manifest_lines",
        "string_process": "\nprocess reference_manifest_lines {\n\n    executor 'local'\n\n    input:\n        file(referenceFasta) from REFERENCE_FASTA\n        file(referenceGtf) from REFERENCE_GTF\n        file(geneMetadata) from GENE_METADATA\n\n    output:\n        stdout REFERENCE_MANIFEST_LINES \n\n    \"\"\"\n    echo -e \"reference_transcriptome\\treference/$referenceFasta\\t\"\n    echo -e \"reference_annotation\\treference/$referenceGtf\\t\"\n    echo -e \"gene_metadata\\treference/$geneMetadata\\t\"\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    echo -e \"reference_transcriptome\\treference/$referenceFasta\\t\"\n    echo -e \"reference_annotation\\treference/$referenceGtf\\t\"\n    echo -e \"gene_metadata\\treference/$geneMetadata\\t\"\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "REFERENCE_FASTA",
            "REFERENCE_GTF",
            "GENE_METADATA"
        ],
        "nb_inputs": 3,
        "outputs": [
            "REFERENCE_MANIFEST_LINES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "publish_reference": {
        "name_process": "publish_reference",
        "string_process": "\nprocess publish_reference {\n    \n    publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true\n    \n    input:\n        file(referenceFasta) from REFERENCE_FASTA\n        file(referenceGtf) from REFERENCE_GTF\n        file(geneMetadata) from GENE_METADATA\n\n    output:\n        file(\"reference/$referenceFasta\")\n        file(\"reference/$referenceGtf\")\n        file(\"reference/$geneMetadata\")\n        \n    \"\"\"\n    mkdir -p reference\n    cp -P $referenceFasta reference\n    cp -P $referenceGtf reference\n    cp -P $geneMetadata reference\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n    mkdir -p reference\n    cp -P $referenceFasta reference\n    cp -P $referenceGtf reference\n    cp -P $geneMetadata reference\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "REFERENCE_FASTA",
            "REFERENCE_GTF",
            "GENE_METADATA"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "reference_supplementary_lines": {
        "name_process": "reference_supplementary_lines",
        "string_process": "\nprocess reference_supplementary_lines {\n\n    executor 'local'\n    \n    input:\n        file(referenceFasta) from REFERENCE_FASTA\n        file(referenceGtf) from REFERENCE_GTF\n\n    output:\n        file(\"software_reference.tsv\") into REFERENCE_SOFTWARE \n\n    \"\"\"\n    ensembl_version=\\$(echo $referenceGtf | cut -d '.' -f 3)\n    echo \"Analysis\\tSoftware\\tVersion\\tCitation\" > software_reference.tsv\n    echo -e \"Reference\\tEnsembl\\t\\$ensembl_version\\t$referenceFasta, $referenceGtf\" >> software_reference.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    ensembl_version=\\$(echo $referenceGtf | cut -d '.' -f 3)\n    echo \"Analysis\\tSoftware\\tVersion\\tCitation\" > software_reference.tsv\n    echo -e \"Reference\\tEnsembl\\t\\$ensembl_version\\t$referenceFasta, $referenceGtf\" >> software_reference.tsv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "REFERENCE_FASTA",
            "REFERENCE_GTF"
        ],
        "nb_inputs": 2,
        "outputs": [
            "REFERENCE_SOFTWARE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_tpms": {
        "name_process": "filter_tpms",
        "string_process": "\nprocess filter_tpms {\n\n    conda \"${workflow.projectDir}/envs/bioconductor-dropletutils.yml\"\n    \n    memory { 2.GB * task.attempt }\n    errorStrategy { task.exitStatus == 130 ? 'retry' : 'finish' }\n    maxRetries 10\n    \n    input:\n        file(filteredCountsMatrix) from RAW_FILTERED_MATRIX_FOR_TPM_FILTERING\n        file(tpmMatrix) from RAW_TPM_MATRIX_FOR_FILTERING\n\n    output:\n        set val(\"${tpmMatrix.getBaseName()}\"), file(\"${tpmMatrix.getBaseName()}_filter_cells_genes/matrix.mtx\") into TPM_FILTER_CELLS_MTX\n        set val(\"${tpmMatrix.getBaseName()}\"), file(\"${tpmMatrix.getBaseName()}_filter_cells_genes/genes.tsv\") into TPM_FILTER_CELLS_MTX_ROWS\n        set val(\"${tpmMatrix.getBaseName()}\"), file(\"${tpmMatrix.getBaseName()}_filter_cells_genes/barcodes.tsv\") into TPM_FILTER_CELLS_MTX_COLS\n\n    \"\"\"\n        #!/usr/bin/env Rscript\n        \n        suppressPackageStartupMessages(require(DropletUtils))\n   \n        unzip('$filteredCountsMatrix')\n        filt_counts_sce <- read10xCounts(sub('.zip', '', '$filteredCountsMatrix'))\n        \n        unzip('$tpmMatrix')\n        tpm_sce <- read10xCounts(sub('.zip', '', '$tpmMatrix'))\n\n        tpm_sce <- tpm_sce[rownames(filt_counts_sce), which(colData(tpm_sce)\\$Barcode %in% colData(filt_counts_sce)\\$Barcode ) ]\n        write10xCounts(assays(tpm_sce)[[1]], path = '${tpmMatrix.getBaseName()}_filter_cells_genes', barcodes = colData(tpm_sce)\\$Barcode, gene.id = rownames(tpm_sce))\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "\"\"\"\n        #!/usr/bin/env Rscript\n        \n        suppressPackageStartupMessages(require(DropletUtils))\n   \n        unzip('$filteredCountsMatrix')\n        filt_counts_sce <- read10xCounts(sub('.zip', '', '$filteredCountsMatrix'))\n        \n        unzip('$tpmMatrix')\n        tpm_sce <- read10xCounts(sub('.zip', '', '$tpmMatrix'))\n\n        tpm_sce <- tpm_sce[rownames(filt_counts_sce), which(colData(tpm_sce)\\$Barcode %in% colData(filt_counts_sce)\\$Barcode ) ]\n        write10xCounts(assays(tpm_sce)[[1]], path = '${tpmMatrix.getBaseName()}_filter_cells_genes', barcodes = colData(tpm_sce)\\$Barcode, gene.id = rownames(tpm_sce))\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "RAW_FILTERED_MATRIX_FOR_TPM_FILTERING",
            "RAW_TPM_MATRIX_FOR_FILTERING"
        ],
        "nb_inputs": 2,
        "outputs": [
            "TPM_FILTER_CELLS_MTX",
            "TPM_FILTER_CELLS_MTX_ROWS",
            "TPM_FILTER_CELLS_MTX_COLS"
        ],
        "nb_outputs": 3,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "conda \"${workflow.projectDir}/envs/bioconductor-dropletutils.yml\"",
            "memory { 2.GB * task.attempt }",
            "errorStrategy { task.exitStatus == 130 ? 'retry' : 'finish' }",
            "maxRetries 10"
        ],
        "when": "",
        "stub": ""
    },
    "compress_filtered_tpms": {
        "name_process": "compress_filtered_tpms",
        "string_process": "\nprocess compress_filtered_tpms {\n    \n    publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true\n    \n    input:\n        set val(matName), file(mtx), file(genes), file(barcodes) from TPM_FILTER_CELLS_MTX.join(TPM_FILTER_CELLS_MTX_ROWS).join(TPM_FILTER_CELLS_MTX_COLS)\n\n    output:\n        file(\"${matName}_filter_cells_genes.zip\") into RAW_FILTERED_TPM_MATRIX\n\n    \"\"\"\n        mkdir -p ${matName}_filter_cells_genes\n        mv matrix.mtx genes.tsv barcodes.tsv ${matName}_filter_cells_genes \n        zip -r ${matName}_filter_cells_genes.zip ${matName}_filter_cells_genes\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n        mkdir -p ${matName}_filter_cells_genes\n        mv matrix.mtx genes.tsv barcodes.tsv ${matName}_filter_cells_genes \n        zip -r ${matName}_filter_cells_genes.zip ${matName}_filter_cells_genes\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "TPM_FILTER_CELLS_MTX",
            "TPM_FILTER_CELLS_MTX_ROWS",
            "TPM_FILTER_CELLS_MTX_COLS"
        ],
        "nb_inputs": 3,
        "outputs": [
            "RAW_FILTERED_TPM_MATRIX"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "master_workflow_software": {
        "name_process": "master_workflow_software",
        "string_process": "\nprocess master_workflow_software {\n\n    output:\n        file('master.software.tsv') into MASTER_SOFTWARE\n\n    \"\"\"\n        generateSoftwareReport.sh ${masterWorkflow} master.software.tsv\n    \"\"\"        \n}",
        "nb_lignes_process": 8,
        "string_script": "\"\"\"\n        generateSoftwareReport.sh ${masterWorkflow} master.software.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "MASTER_SOFTWARE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "make_base_software_report": {
        "name_process": "make_base_software_report",
        "string_process": "\nprocess make_base_software_report {\n\n    output:\n        file \"base.software.tsv\" into BASE_SOFTWARE\n\n    script:\n\n        if ( isDroplet ) {\n            baseWorkflow = 'scxa-workflows/w_droplet_quantification'\n        } else if ( isSmart ) {\n            baseWorkflow = 'scxa-workflows/w_smart-seq_quantification'\n        } else {\n            baseWorkflow = ''\n        }\n    \n\n    \"\"\"\n        generateSoftwareReport.sh ${baseWorkflow} base.software.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        if ( isDroplet ) {\n            baseWorkflow = 'scxa-workflows/w_droplet_quantification'\n        } else if ( isSmart ) {\n            baseWorkflow = 'scxa-workflows/w_smart-seq_quantification'\n        } else {\n            baseWorkflow = ''\n        }\n    \n\n    \"\"\"\n        generateSoftwareReport.sh ${baseWorkflow} base.software.tsv\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "BASE_SOFTWARE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "make_tertiary_software_report": {
        "name_process": "make_tertiary_software_report",
        "string_process": " process make_tertiary_software_report {\n\n        output:\n            file \"${tertiaryWorkflow}.software.tsv\" into TERTIARY_SOFTWARE\n\n        script:\n\n        if ( tertiaryWorkflow == 'scanpy-workflow' )\n\n            \"\"\"\n                generateSoftwareReport.sh ${tertiaryWorkflow} ${tertiaryWorkflow}.software.tsv\n            \"\"\"\n\n        else\n            \"\"\"\n               cp ${tertiarySoftwareReport} ${tertiaryWorkflow}.software.tsv\n            \"\"\"\n    }",
        "nb_lignes_process": 16,
        "string_script": "        if ( tertiaryWorkflow == 'scanpy-workflow' )\n\n            \"\"\"\n                generateSoftwareReport.sh ${tertiaryWorkflow} ${tertiaryWorkflow}.software.tsv\n            \"\"\"\n\n        else\n            \"\"\"\n               cp ${tertiarySoftwareReport} ${tertiaryWorkflow}.software.tsv\n            \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "TERTIARY_SOFTWARE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "finalise_software": {
        "name_process": "finalise_software",
        "string_process": "\nprocess finalise_software {\n\n    publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true\n\n    input:\n        file(software) from MERGED_SOFTWARE\n\n    output:\n        file('software.tsv') into SOFTWARE_FOR_MANIFEST\n\n    \"\"\"\n    head -n 1 $software > software.tsv\n    tail -n +2 $software | sort | uniq >> software.tsv\n\n    # Fetch the current SHA of the config repo, for reproducibility\n\n    pushd $SCXA_WORKFLOW_ROOT/workflow/scxa-workflows > /dev/null\n    current_sha=\\$(git rev-parse --short HEAD)\n    popd > /dev/null\n    echo -e \"Configuration\\tscxa-workflows\\t\\$current_sha\\thttps://github.com/ebi-gene-expression-group/scxa-workflows\" >> software.tsv\n\n    # Remove any empty lines\n    sed -i '/^\\$/d' software.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n    head -n 1 $software > software.tsv\n    tail -n +2 $software | sort | uniq >> software.tsv\n\n    # Fetch the current SHA of the config repo, for reproducibility\n\n    pushd $SCXA_WORKFLOW_ROOT/workflow/scxa-workflows > /dev/null\n    current_sha=\\$(git rev-parse --short HEAD)\n    popd > /dev/null\n    echo -e \"Configuration\\tscxa-workflows\\t\\$current_sha\\thttps://github.com/ebi-gene-expression-group/scxa-workflows\" >> software.tsv\n\n    # Remove any empty lines\n    sed -i '/^\\$/d' software.tsv\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "NullSeq",
            "PopDel"
        ],
        "tools_url": [
            "https://bio.tools/nullseq",
            "https://bio.tools/PopDel"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            },
            {
                "name": "PopDel",
                "uri": "https://bio.tools/PopDel",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A tool for population level deletion calling from short paired-end sequence reads.",
                "homepage": "https://github.com/kehrlab/PopDel"
            }
        ],
        "inputs": [
            "MERGED_SOFTWARE"
        ],
        "nb_inputs": 1,
        "outputs": [
            "SOFTWARE_FOR_MANIFEST"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "mark_dimred_params": {
        "name_process": "mark_dimred_params",
        "string_process": "\nprocess mark_dimred_params {\n\n    executor 'local'\n    \n    input:\n        set val(dimredType), val(param), file(embeddings) from SCANPY_DIMRED\n\n    output:\n        set val(dimredType), val(param), stdout, file (embeddings) into EMBEDDINGS_BY_PARAMVAL\n\n    \"\"\"\n       echo $embeddings | grep -o -E '[0-9]+' | tr -d \\'\\\\n\\'  \n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n       echo $embeddings | grep -o -E '[0-9]+' | tr -d \\'\\\\n\\'  \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "SCANPY_DIMRED"
        ],
        "nb_inputs": 1,
        "outputs": [
            "EMBEDDINGS_BY_PARAMVAL"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "dimred_lines": {
        "name_process": "dimred_lines",
        "string_process": "\nprocess dimred_lines {\n\n    executor 'local'\n    \n    publishDir \"$resultsRoot/bundle\", mode: 'move', overwrite: true\n    \n    input:\n        set val(dimredType), val(param), val(paramVal), file('embeddings') from EMBEDDINGS_BY_PARAMVAL\n\n    output:\n        stdout TSNE_MANIFEST_LINES\n        file(\"${dimredType}_${param}_${paramVal}.tsv\") \n\n    \"\"\"\n    outFile=${dimredType}_${param}_${paramVal}.tsv\n    echo -e \"${dimredType}_embeddings\\t\\${outFile}\\t$paramVal\"\n    cp embeddings \\$outFile\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    outFile=${dimredType}_${param}_${paramVal}.tsv\n    echo -e \"${dimredType}_embeddings\\t\\${outFile}\\t$paramVal\"\n    cp embeddings \\$outFile\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "EMBEDDINGS_BY_PARAMVAL"
        ],
        "nb_inputs": 1,
        "outputs": [
            "TSNE_MANIFEST_LINES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'",
            "publishDir \"$resultsRoot/bundle\", mode: 'move', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "repackage_matrices": {
        "name_process": "repackage_matrices",
        "string_process": "\nprocess repackage_matrices {\n\n    cache 'deep'\n\n    publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true\n    \n    conda \"${workflow.projectDir}/envs/bioconductor-dropletutils.yml\"\n   \n    memory { 16.GB * task.attempt }\n    errorStrategy { task.exitStatus == 130 || task.exitStatus == 137 ? 'retry' : 'finish' }\n    maxRetries 20\n \n    input:\n        set file(expressionMatrix), val(expressionType) from MATRICES_TO_REPACKAGE\n\n    output:\n        set val(expressionType), file(\"${expressionType}/genes.tsv.gz\") into MTX_MATRIX_ROWNAMES\n        set val(expressionType), file(\"${expressionType}/barcodes.tsv.gz\") into MTX_MATRIX_COLNAMES\n        set val(expressionType), file(\"${expressionType}/matrix.mtx.gz\") into MTX_MATRIX_CONTENT\n        set val(expressionType), file(\"${expressionType}_dir\") into MTX_MATRICES_FOR_SUMMARY\n        \n\n    \"\"\"\n        zipdir=\\$(unzip -qql ${expressionMatrix.getBaseName()}.zip | head -n1 | tr -s ' ' | cut -d' ' -f5- | sed 's|/||')\n        unzip ${expressionMatrix.getBaseName()}        \n   \n        if [ \"\\$zipdir\" != ${expressionType} ]; then\n            ln -s \\$zipdir ${expressionType}            \n        fi\n\n        mv ${expressionType} ${expressionType}_tmp\n        reorder.R ${expressionType}_tmp ${expressionType}     \n \n        gzip ${expressionType}/matrix.mtx\n        gzip ${expressionType}/genes.tsv\n        gzip ${expressionType}/barcodes.tsv\n\n        ln -s ${expressionType} ${expressionType}_dir\n    \"\"\"        \n}",
        "nb_lignes_process": 39,
        "string_script": "\"\"\"\n        zipdir=\\$(unzip -qql ${expressionMatrix.getBaseName()}.zip | head -n1 | tr -s ' ' | cut -d' ' -f5- | sed 's|/||')\n        unzip ${expressionMatrix.getBaseName()}        \n   \n        if [ \"\\$zipdir\" != ${expressionType} ]; then\n            ln -s \\$zipdir ${expressionType}            \n        fi\n\n        mv ${expressionType} ${expressionType}_tmp\n        reorder.R ${expressionType}_tmp ${expressionType}     \n \n        gzip ${expressionType}/matrix.mtx\n        gzip ${expressionType}/genes.tsv\n        gzip ${expressionType}/barcodes.tsv\n\n        ln -s ${expressionType} ${expressionType}_dir\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "MATRICES_TO_REPACKAGE"
        ],
        "nb_inputs": 1,
        "outputs": [
            "MTX_MATRIX_ROWNAMES",
            "MTX_MATRIX_COLNAMES",
            "MTX_MATRIX_CONTENT",
            "MTX_MATRICES_FOR_SUMMARY"
        ],
        "nb_outputs": 4,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "cache 'deep'",
            "publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true",
            "conda \"${workflow.projectDir}/envs/bioconductor-dropletutils.yml\"",
            "memory { 16.GB * task.attempt }",
            "errorStrategy { task.exitStatus == 130 || task.exitStatus == 137 ? 'retry' : 'finish' }",
            "maxRetries 20"
        ],
        "when": "",
        "stub": ""
    },
    "cell_library_mappings": {
        "name_process": "cell_library_mappings",
        "string_process": "\nprocess cell_library_mappings {\n\n    publishDir \"$resultsRoot/bundle/$expressionType\", mode: 'move'\n\n    input:\n        set val(expressionType), file(barcodesFile) from MTX_MATRIX_COLNAMES_FOR_CELLMAPPING\n\n    output:\n        set val(expressionType), file('cell_to_library.txt') optional true\n\n    script:\n\n        def sampleField = params.fields.run\n        if ( params.fields.containsKey('techrep') ){\n            sampleField = params.fields.techrep\n        }\n\n    \"\"\"\n        if [ \"$isDroplet\" = 'true' ]; then\n            cellToLib=cell_to_library.txt\n            echo \"# $sampleField\" > \\${cellToLib}.tmp\n\n            zcat $barcodesFile | while read -r b; do \n                barcode=\\${b##*-} \n                run=\\${b/-\\$barcode/''}\n                echo -e \"\\$b\\t\\$run\" \n            done >> \\${cellToLib}.tmp\n            \n            nlines=\\$(cat \\${cellToLib}.tmp | wc -l)\n            if [ \"\\$nlines\" -lt 2 ]; then   \n                echo \"\\${cellToLib}.tmp file creation failed\" \n                exit 1\n            else\n                mv \\${cellToLib}.tmp \\${cellToLib}\n            fi\n        fi\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "        def sampleField = params.fields.run\n        if ( params.fields.containsKey('techrep') ){\n            sampleField = params.fields.techrep\n        }\n\n    \"\"\"\n        if [ \"$isDroplet\" = 'true' ]; then\n            cellToLib=cell_to_library.txt\n            echo \"# $sampleField\" > \\${cellToLib}.tmp\n\n            zcat $barcodesFile | while read -r b; do \n                barcode=\\${b##*-} \n                run=\\${b/-\\$barcode/''}\n                echo -e \"\\$b\\t\\$run\" \n            done >> \\${cellToLib}.tmp\n            \n            nlines=\\$(cat \\${cellToLib}.tmp | wc -l)\n            if [ \"\\$nlines\" -lt 2 ]; then   \n                echo \"\\${cellToLib}.tmp file creation failed\" \n                exit 1\n            else\n                mv \\${cellToLib}.tmp \\${cellToLib}\n            fi\n        fi\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "MTX_MATRIX_COLNAMES_FOR_CELLMAPPING"
        ],
        "nb_inputs": 1,
        "outputs": [
            "expressionType"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "publishDir \"$resultsRoot/bundle/$expressionType\", mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "cell_count": {
        "name_process": "cell_count",
        "string_process": "\nprocess cell_count {\n\n    input:\n        set file(expressionMatrix), val(expressionType) from MATRICES_FOR_TSV\n\n    output:\n        set stdout, file(\"out/${expressionMatrix}\"), val(expressionType) into MATRICES_FOR_TSV_WITH_COUNT\n\n    \"\"\"\n        zipdir=\\$(unzip -qql ${expressionMatrix} | head -n1 | tr -s ' ' | cut -d' ' -f5- | sed 's|/||')\n        unzip -p ${expressionMatrix} \\${zipdir}/barcodes.tsv | wc -l | tr -d \\'\\\\n\\'  \n        \n        mkdir -p out\n        cp -p $expressionMatrix out/${expressionMatrix}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n        zipdir=\\$(unzip -qql ${expressionMatrix} | head -n1 | tr -s ' ' | cut -d' ' -f5- | sed 's|/||')\n        unzip -p ${expressionMatrix} \\${zipdir}/barcodes.tsv | wc -l | tr -d \\'\\\\n\\'  \n        \n        mkdir -p out\n        cp -p $expressionMatrix out/${expressionMatrix}\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "MATRICES_FOR_TSV"
        ],
        "nb_inputs": 1,
        "outputs": [
            "MATRICES_FOR_TSV_WITH_COUNT"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "mtx_to_tsv": {
        "name_process": "mtx_to_tsv",
        "string_process": "\nprocess mtx_to_tsv {\n    \n    cache 'lenient'\n    \n    conda \"${workflow.projectDir}/envs/bioconductor-dropletutils.yml\"\n\n    publishDir \"$resultsRoot/bundle\", mode: 'move', overwrite: true\n    \n    memory { 5.GB * task.attempt }\n    errorStrategy { task.exitStatus == 130 || task.exitStatus == 137 ? 'retry' : 'finish' }\n    maxRetries 20\n    \n    input:\n        set val(cellCount), file(expressionMatrix), val(expressionType) from SMALL_MATRICES\n        \n    output:\n        set val(expressionType), file(\"${expressionType}/${expressionType}.tsv\") into TSV_MATRICES\n\n    \"\"\"\n        #!/usr/bin/env Rscript\n        \n        suppressPackageStartupMessages(require(DropletUtils))\n        suppressPackageStartupMessages(require(data.table))\n        source(file.path(Sys.getenv(c(\"SCXA_BIN\")), \"utils.R\"))\n   \n        unzip('$expressionMatrix')\n        sce <- read10xCounts(sub('.zip', '', '$expressionMatrix'))\n        colnames(sce) <- colData(sce)\\$Barcode \n\n        dir.create('${expressionType}')\n        write.tsv(as.data.frame(cbind(Feature = rownames(sce), as.matrix(assays(sce)[[1]])), col.names = c('Feature', colData(sce)\\$Barcode)), \"${expressionType}/${expressionType}.tsv\")      \n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "\"\"\"\n        #!/usr/bin/env Rscript\n        \n        suppressPackageStartupMessages(require(DropletUtils))\n        suppressPackageStartupMessages(require(data.table))\n        source(file.path(Sys.getenv(c(\"SCXA_BIN\")), \"utils.R\"))\n   \n        unzip('$expressionMatrix')\n        sce <- read10xCounts(sub('.zip', '', '$expressionMatrix'))\n        colnames(sce) <- colData(sce)\\$Barcode \n\n        dir.create('${expressionType}')\n        write.tsv(as.data.frame(cbind(Feature = rownames(sce), as.matrix(assays(sce)[[1]])), col.names = c('Feature', colData(sce)\\$Barcode)), \"${expressionType}/${expressionType}.tsv\")      \n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "SMALL_MATRICES"
        ],
        "nb_inputs": 1,
        "outputs": [
            "TSV_MATRICES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "cache 'lenient'",
            "conda \"${workflow.projectDir}/envs/bioconductor-dropletutils.yml\"",
            "publishDir \"$resultsRoot/bundle\", mode: 'move', overwrite: true",
            "memory { 5.GB * task.attempt }",
            "errorStrategy { task.exitStatus == 130 || task.exitStatus == 137 ? 'retry' : 'finish' }",
            "maxRetries 20"
        ],
        "when": "",
        "stub": ""
    },
    "matrix_lines": {
        "name_process": "matrix_lines",
        "string_process": "\nprocess matrix_lines {\n    \n    executor 'local'\n\n    executor 'local'\n    \n    input:\n        set val(expressionType), file(matrixRows), file(matrixCols), file(matrixContent), file(tsvMatrix) from MTX_MATRIX_ROWNAMES.join(MTX_MATRIX_COLNAMES_FOR_MANIFEST_LINES).join(MTX_MATRIX_CONTENT).join(TSV_AND_NOTSV_MATRICES)\n\n    output:\n        stdout MATRIX_MANIFEST_LINES \n\n    \"\"\"\n    echo -e \"mtx_matrix_rows\\t$expressionType/$matrixRows\\t$expressionType\"\n    echo -e \"mtx_matrix_cols\\t$expressionType/$matrixCols\\t$expressionType\"\n    echo -e \"mtx_matrix_content\\t$expressionType/$matrixContent\\t$expressionType\"\n    if [ \"${tsvMatrix.name}\" != 'NOTSV' ]; then \n        echo -e \"tsv_matrix\\t$expressionType/$tsvMatrix\\t$expressionType\"\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n    echo -e \"mtx_matrix_rows\\t$expressionType/$matrixRows\\t$expressionType\"\n    echo -e \"mtx_matrix_cols\\t$expressionType/$matrixCols\\t$expressionType\"\n    echo -e \"mtx_matrix_content\\t$expressionType/$matrixContent\\t$expressionType\"\n    if [ \"${tsvMatrix.name}\" != 'NOTSV' ]; then \n        echo -e \"tsv_matrix\\t$expressionType/$tsvMatrix\\t$expressionType\"\n    fi\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "MTX_MATRIX_ROWNAMES",
            "MTX_MATRIX_COLNAMES_FOR_MANIFEST_LINES",
            "MTX_MATRIX_CONTENT",
            "TSV_AND_NOTSV_MATRICES"
        ],
        "nb_inputs": 4,
        "outputs": [
            "MATRIX_MANIFEST_LINES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "renumber_clusters": {
        "name_process": "renumber_clusters",
        "string_process": "\nprocess renumber_clusters {\n    \n    publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true\n    \n    conda \"${workflow.projectDir}/envs/r-data.table.yml\"\n    \n    memory { 5.GB * task.attempt }\n    errorStrategy { task.exitStatus == 130 || task.exitStatus == 137 ? 'retry' : 'finish' }\n    maxRetries 20\n\n    input:\n        file 'possibly_misnumbered_clusters.txt' from SCANPY_CLUSTERS\n    \n    output:\n        file 'clusters_for_bundle.txt' into FINAL_CLUSTERS\n\n    \"\"\"\n        renumberClusters.R possibly_misnumbered_clusters.txt clusters_for_bundle.txt.tmp\n        mv clusters_for_bundle.txt.tmp clusters_for_bundle.txt      \n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n        renumberClusters.R possibly_misnumbered_clusters.txt clusters_for_bundle.txt.tmp\n        mv clusters_for_bundle.txt.tmp clusters_for_bundle.txt      \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "SCANPY_CLUSTERS"
        ],
        "nb_inputs": 1,
        "outputs": [
            "FINAL_CLUSTERS"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true",
            "conda \"${workflow.projectDir}/envs/r-data.table.yml\"",
            "memory { 5.GB * task.attempt }",
            "errorStrategy { task.exitStatus == 130 || task.exitStatus == 137 ? 'retry' : 'finish' }",
            "maxRetries 20"
        ],
        "when": "",
        "stub": ""
    },
    "mark_marker_param": {
        "name_process": "mark_marker_param",
        "string_process": "\nprocess mark_marker_param {\n\n    executor 'local'\n    \n    input:\n        file markersFile from SCANPY_MARKERS\n\n    output:\n        set stdout, file ('cluster_markers.tsv') optional true into CLUSTER_MARKERS_BY_RESOLUTION \n        set stdout, file ('meta_markers.tsv') optional true into META_MARKERS_BY_VAR \n\n    \"\"\"\n        set +e\n        cellgroup_name=\\$(echo $markersFile | sed 's/markers_//g' | sed 's/.tsv//g')\n        echo \"\\$cellgroup_name\" | grep -o -E '[0-9]+' > /dev/null\n        if [ \\$? -eq 0 ]; then\n            cp -P $markersFile cluster_markers.tsv\n        else\n            cp -P $markersFile meta_markers.tsv\n            cellgroup_name=\\$(echo \\$cellgroup_name | sed 's/^meta_//')\n        fi\n        echo -n \"\\$cellgroup_name\"\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n        set +e\n        cellgroup_name=\\$(echo $markersFile | sed 's/markers_//g' | sed 's/.tsv//g')\n        echo \"\\$cellgroup_name\" | grep -o -E '[0-9]+' > /dev/null\n        if [ \\$? -eq 0 ]; then\n            cp -P $markersFile cluster_markers.tsv\n        else\n            cp -P $markersFile meta_markers.tsv\n            cellgroup_name=\\$(echo \\$cellgroup_name | sed 's/^meta_//')\n        fi\n        echo -n \"\\$cellgroup_name\"\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "SCANPY_MARKERS"
        ],
        "nb_inputs": 1,
        "outputs": [
            "CLUSTER_MARKERS_BY_RESOLUTION",
            "META_MARKERS_BY_VAR"
        ],
        "nb_outputs": 2,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "renumber_markers": {
        "name_process": "renumber_markers",
        "string_process": "\nprocess renumber_markers {\n    \n    conda \"${workflow.projectDir}/envs/r-data.table.yml\"\n    \n    memory { 5.GB * task.attempt }\n    errorStrategy { task.exitStatus == 130 || task.exitStatus == 137 ? 'retry' : 'finish' }\n    maxRetries 20\n\n    input:\n        set val(resolution), file('markers.tsv') from CLUSTER_MARKERS_BY_RESOLUTION\n\n    output:\n        set val('cluster_markers'), val(resolution), file(\"markers_${resolution}.tsv\") into RENUMBERED_CLUSTER_MARKERS_BY_RESOLUTION\n\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    markers <- read.delim('markers.tsv', check.names = FALSE)\n\n    if ('groups' %in% names(markers) && min(markers\\$groups) == 0){\n        markers\\$groups <- markers\\$groups + 1\n    }else if ('cluster' %in% names(markers) && min(markers\\$cluster) == 0){\n        markers\\$cluster <- markers\\$cluster + 1\n    }\n    dir.create('out', showWarnings = FALSE)\n    write.table(markers, file='markers_${resolution}.tsv', sep=\"\\\\t\", quote=FALSE, row.names=FALSE)\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n    #!/usr/bin/env Rscript\n\n    markers <- read.delim('markers.tsv', check.names = FALSE)\n\n    if ('groups' %in% names(markers) && min(markers\\$groups) == 0){\n        markers\\$groups <- markers\\$groups + 1\n    }else if ('cluster' %in% names(markers) && min(markers\\$cluster) == 0){\n        markers\\$cluster <- markers\\$cluster + 1\n    }\n    dir.create('out', showWarnings = FALSE)\n    write.table(markers, file='markers_${resolution}.tsv', sep=\"\\\\t\", quote=FALSE, row.names=FALSE)\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "CLUSTER_MARKERS_BY_RESOLUTION"
        ],
        "nb_inputs": 1,
        "outputs": [
            "RENUMBERED_CLUSTER_MARKERS_BY_RESOLUTION"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "conda \"${workflow.projectDir}/envs/r-data.table.yml\"",
            "memory { 5.GB * task.attempt }",
            "errorStrategy { task.exitStatus == 130 || task.exitStatus == 137 ? 'retry' : 'finish' }",
            "maxRetries 20"
        ],
        "when": "",
        "stub": ""
    },
    "rename_meta_markers": {
        "name_process": "rename_meta_markers",
        "string_process": "\nprocess rename_meta_markers{\n\n    executor 'local'\n\n    input:\n        set val(var), file('markers.tsv') from META_MARKERS_BY_VAR\n    \n    output:\n        set val('meta_markers'), val(var), file(\"markers_${var}.tsv\") into RENAMED_META_MARKERS_BY_VAR\n\n    \"\"\"\n    cp -P markers.tsv markers_${var}.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    cp -P markers.tsv markers_${var}.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "META_MARKERS_BY_VAR"
        ],
        "nb_inputs": 1,
        "outputs": [
            "RENAMED_META_MARKERS_BY_VAR"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "collate_cluster_markers": {
        "name_process": "collate_cluster_markers",
        "string_process": "\nprocess collate_cluster_markers {\n    \n    executor 'local'\n    \n    input:\n        file(\"cluster_markers_in/*\") from CLUSTER_MARKERS_FOR_SUMMARY.map{r -> r[2]}.collect()\n\n    output:\n        file(\"cluster_markers\") into COLLATED_CLUSTER_MARKERS\n\n    \"\"\"\n    ln -s cluster_markers_in cluster_markers\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    ln -s cluster_markers_in cluster_markers\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "CLUSTER_MARKERS_FOR_SUMMARY"
        ],
        "nb_inputs": 1,
        "outputs": [
            "COLLATED_CLUSTER_MARKERS"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "collate_meta_markers": {
        "name_process": "collate_meta_markers",
        "string_process": "\nprocess collate_meta_markers {\n    \n    executor 'local'\n    \n    input:\n        file(\"meta_markers_in/*\") from META_MARKERS_FOR_SUMMARY.map{r -> r[2]}.collect()\n\n    output:\n        file(\"meta_markers\") into COLLATED_META_MARKERS\n\n    \"\"\"\n    ln -s meta_markers_in meta_markers\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    ln -s meta_markers_in meta_markers\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "META_MARKERS_FOR_SUMMARY"
        ],
        "nb_inputs": 1,
        "outputs": [
            "COLLATED_META_MARKERS"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "publish_markers": {
        "name_process": "publish_markers",
        "string_process": "\nprocess publish_markers {\n    \n    publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true\n    executor 'local'\n\n    input:\n        set val(markerType), val(param), file ('markers.tsv') from CLUSTER_MARKERS_FOR_BUNDLE.concat(META_MARKERS_FOR_BUNDLE)\n    \n    output:\n        set val(markerType), val(param), file(\"markers_${param}.tsv\") into ALL_MARKERS\n\n    \"\"\"\n    cp -P markers.tsv \"markers_${param}.tsv\"\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    cp -P markers.tsv \"markers_${param}.tsv\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "CLUSTER_MARKERS_FOR_BUNDLE",
            "META_MARKERS_FOR_BUNDLE"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ALL_MARKERS"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "bundle_summary": {
        "name_process": "bundle_summary",
        "string_process": "\nprocess bundle_summary {\n\n    publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true\n    \n    conda \"${workflow.projectDir}/envs/bundle-summary.yml\"\n    \n    memory { 16.GB * task.attempt }\n    errorStrategy { task.exitStatus == 130 ? 'retry' : 'finish' }\n    maxRetries 10\n    \n    input:\n       file(\"*\") from MTX_MATRICES_FOR_SUMMARY.map{r -> r[1]}.collect() \n       file(\"*\") from COLLATED_CLUSTER_MARKERS.concat(COLLATED_META_MARKERS).collect()\n       file clusters from FINAL_CLUSTERS_FOR_SUMMARY\n       file cellMeta from CELL_METADATA\n\n    output:\n        set val('filtered_normalised'), file('filtered_normalised_stats.csv') into BUNDLE_SUMMARY\n        set val('tpm_filtered'), file('tpm_filtered_stats.csv') optional true into BUNDLE_SUMMARY_TPM\n\n    \"\"\"\n    for matrix_type in filtered_normalised tpm_filtered; do\n        if [ -d \\${matrix_type}_dir ]; then\n            makeMarkerStats.R \\\n                --counts-dir=\\${matrix_type}_dir \\\n                --clusters-file=${clusters} \\\n                --cluster-markers-dir=cluster_markers \\\n                --meta-markers-dir=meta_markers \\\n                --cellgroups-file=${cellMeta} \\\n                --select-top=${params.topmarkersForSummary} \\\n                --output-file=\\${matrix_type}_stats.csv\n        fi\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "\"\"\"\n    for matrix_type in filtered_normalised tpm_filtered; do\n        if [ -d \\${matrix_type}_dir ]; then\n            makeMarkerStats.R \\\n                --counts-dir=\\${matrix_type}_dir \\\n                --clusters-file=${clusters} \\\n                --cluster-markers-dir=cluster_markers \\\n                --meta-markers-dir=meta_markers \\\n                --cellgroups-file=${cellMeta} \\\n                --select-top=${params.topmarkersForSummary} \\\n                --output-file=\\${matrix_type}_stats.csv\n        fi\n    done\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "MTX_MATRICES_FOR_SUMMARY",
            "COLLATED_CLUSTER_MARKERS",
            "COLLATED_META_MARKERS",
            "FINAL_CLUSTERS_FOR_SUMMARY",
            "CELL_METADATA"
        ],
        "nb_inputs": 5,
        "outputs": [
            "BUNDLE_SUMMARY",
            "BUNDLE_SUMMARY_TPM"
        ],
        "nb_outputs": 2,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "publishDir \"$resultsRoot/bundle\", mode: 'copy', overwrite: true",
            "conda \"${workflow.projectDir}/envs/bundle-summary.yml\"",
            "memory { 16.GB * task.attempt }",
            "errorStrategy { task.exitStatus == 130 ? 'retry' : 'finish' }",
            "maxRetries 10"
        ],
        "when": "",
        "stub": ""
    },
    "bundle_summary_lines": {
        "name_process": "bundle_summary_lines",
        "string_process": "\nprocess bundle_summary_lines{\n    \n    executor 'local'\n\n    input:\n        set val(matrixType), file(markerStats) from BUNDLE_SUMMARY.concat(BUNDLE_SUMMARY_TPM)\n\n    output:\n        stdout SUMMARY_MANIFEST_LINES\n\n    \"\"\"\n    echo -e \"marker_stats\\t${markerStats}\\t$matrixType\"\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    echo -e \"marker_stats\\t${markerStats}\\t$matrixType\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "BUNDLE_SUMMARY",
            "BUNDLE_SUMMARY_TPM"
        ],
        "nb_inputs": 2,
        "outputs": [
            "SUMMARY_MANIFEST_LINES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "markers_lines": {
        "name_process": "markers_lines",
        "string_process": "\nprocess markers_lines {\n\n    executor 'local'\n    \n    input:\n        set val(markerType), val(markerVal), file(markersFile) from ALL_MARKERS\n\n    output:\n        stdout MARKER_MANIFEST_LINES \n\n    \"\"\"\n    echo -e \"$markerType\\t${markersFile}\\t$markerVal\"\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    echo -e \"$markerType\\t${markersFile}\\t$markerVal\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ALL_MARKERS"
        ],
        "nb_inputs": 1,
        "outputs": [
            "MARKER_MANIFEST_LINES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "base_manifest": {
        "name_process": "base_manifest",
        "string_process": "\nprocess base_manifest {\n\n    executor 'local'\n    \n    input:\n        file matrices from MATRIX_MANIFEST_CONTENT\n        file software from SOFTWARE_FOR_MANIFEST \n        file reference from REFERENCE_MANIFEST_LINES\n        file meta from META_MANIFEST_LINES\n\n    output:\n        file \"BASE_MANIFEST\" into BASE_MANIFEST\n\n    \"\"\"\n        echo -e \"Description\\tFile\\tParameterisation\" > BASE_MANIFEST\n        echo -e \"software_versions_file\\t\\$(basename ${software})\\t\" >> BASE_MANIFEST\n        cat ${matrices} >> BASE_MANIFEST\n        cat ${meta} >> BASE_MANIFEST\n        cat ${reference} >> BASE_MANIFEST\n        echo -e protocol\\t\\t${params.protocolList} >> BASE_MANIFEST\n    \"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n        echo -e \"Description\\tFile\\tParameterisation\" > BASE_MANIFEST\n        echo -e \"software_versions_file\\t\\$(basename ${software})\\t\" >> BASE_MANIFEST\n        cat ${matrices} >> BASE_MANIFEST\n        cat ${meta} >> BASE_MANIFEST\n        cat ${reference} >> BASE_MANIFEST\n        echo -e protocol\\t\\t${params.protocolList} >> BASE_MANIFEST\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "MATRIX_MANIFEST_CONTENT",
            "SOFTWARE_FOR_MANIFEST",
            "REFERENCE_MANIFEST_LINES",
            "META_MANIFEST_LINES"
        ],
        "nb_inputs": 4,
        "outputs": [
            "BASE_MANIFEST"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "tertiary_manifest": {
        "name_process": "tertiary_manifest",
        "string_process": " process tertiary_manifest {\n    \n        executor 'local'\n\n        publishDir \"$resultsRoot/bundle\", mode: 'move', overwrite: true\n        \n        input:\n            file startingManifest from STARTING_MANIFEST\n            file clusters from FINAL_CLUSTERS_FOR_MANIFEST\n\n        output:\n            file \"MANIFEST\"\n\n        \"\"\"\n            cp $startingManifest MANIFEST\n            echo -e \"cluster_memberships\\t${clusters}\" >> MANIFEST\n        \"\"\"\n    }",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n            cp $startingManifest MANIFEST\n            echo -e \"cluster_memberships\\t${clusters}\" >> MANIFEST\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "STARTING_MANIFEST",
            "FINAL_CLUSTERS_FOR_MANIFEST"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'",
            "publishDir \"$resultsRoot/bundle\", mode: 'move', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "publish_manifest": {
        "name_process": "publish_manifest",
        "string_process": " process publish_manifest {\n    \n        executor 'local'\n        \n        publishDir \"$resultsRoot/bundle\", mode: 'move', overwrite: true\n        \n        input:\n            file baseManifest from BASE_MANIFEST\n\n        output:\n            file \"MANIFEST\"\n\n        \"\"\"\n            cp $baseManifest MANIFEST\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n            cp $baseManifest MANIFEST\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "BASE_MANIFEST"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ebi-gene-expression-group__scxa-bundle-workflow",
        "directive": [
            "executor 'local'",
            "publishDir \"$resultsRoot/bundle\", mode: 'move', overwrite: true"
        ],
        "when": "",
        "stub": ""
    }
}
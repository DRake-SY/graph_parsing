{
    "OPERATION_1": {
        "string": "RAW_MATRIX = Channel.fromPath( \"$resultsRoot/${params.rawMatrix}\", checkIfExists: true)",
        "origin": [
            [
                "\"$resultsRoot/${params.rawMatrix}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "RAW_MATRIX",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "REFERENCE_FASTA = Channel.fromPath( \"$resultsRoot/${params.referenceFasta}\", checkIfExists: true ).first()",
        "origin": [
            [
                "\"$resultsRoot/${params.referenceFasta}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "REFERENCE_FASTA",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "REFERENCE_GTF = Channel.fromPath( \"$resultsRoot/${params.referenceGtf}\", checkIfExists: true ).first()",
        "origin": [
            [
                "\"$resultsRoot/${params.referenceGtf}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "REFERENCE_GTF",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "GENE_METADATA = Channel.fromPath( \"$resultsRoot/${params.geneMetadata}\", checkIfExists: true ).first()",
        "origin": [
            [
                "\"$resultsRoot/${params.geneMetadata}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "GENE_METADATA",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "CELL_METADATA = Channel.fromPath( \"$resultsRoot/${params.cellMetadata}\", checkIfExists: true).first()",
        "origin": [
            [
                "\"$resultsRoot/${params.cellMetadata}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "CELL_METADATA",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "CONDENSED_SDRF = Channel.fromPath( \"$resultsRoot/${params.condensedSdrf}\", checkIfExists: true).first()",
        "origin": [
            [
                "\"$resultsRoot/${params.condensedSdrf}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "CONDENSED_SDRF",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "PROJECT_FILE = Channel.fromPath( \"$resultsRoot/${params.projectFile}\", checkIfExists: true).first()",
        "origin": [
            [
                "\"$resultsRoot/${params.projectFile}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "PROJECT_FILE",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "RAW_FILTERED_MATRIX = Channel.fromPath( \"$resultsRoot/${params.rawFilteredMatrix}\", checkIfExists: true)",
        "origin": [
            [
                "\"$resultsRoot/${params.rawFilteredMatrix}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "RAW_FILTERED_MATRIX",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "NORMALISED_MATRIX = Channel.fromPath( \"$resultsRoot/${params.normalisedMatrix}\", checkIfExists: true)",
        "origin": [
            [
                "\"$resultsRoot/${params.normalisedMatrix}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "NORMALISED_MATRIX",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "SCANPY_CLUSTERS = Channel.fromPath( \"$resultsRoot/${params.clusters}\", checkIfExists: true)",
        "origin": [
            [
                "\"$resultsRoot/${params.clusters}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "SCANPY_CLUSTERS",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "SCANPY_TSNE = Channel.fromPath( \"$resultsRoot/${params.tsneDir}/tsne_perplexity*.tsv\", checkIfExists: true )",
        "origin": [
            [
                "\"$resultsRoot/${params.tsneDir}/tsne_perplexity*.tsv\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "SCANPY_TSNE",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "SCANPY_UMAP = Channel.fromPath( \"$resultsRoot/${params.umapDir}/umap_n_neighbors*.tsv\", checkIfExists: true )",
        "origin": [
            [
                "\"$resultsRoot/${params.umapDir}/umap_n_neighbors*.tsv\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "SCANPY_UMAP",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "SCANPY_MARKERS = Channel.fromPath( \"$resultsRoot/${params.markersDir}/markers_*.tsv\" )",
        "origin": [
            [
                "\"$resultsRoot/${params.markersDir}/markers_*.tsv\"",
                "A"
            ]
        ],
        "gives": [
            [
                "SCANPY_MARKERS",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "RAW_FILTERED_MATRIX = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "RAW_FILTERED_MATRIX",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "NORMALISED_MATRIX = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "NORMALISED_MATRIX",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "RAW_TPM_MATRIX = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "RAW_TPM_MATRIX",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "SCANPY_CLUSTERS = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SCANPY_CLUSTERS",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "SCANPY_TSNE = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SCANPY_TSNE",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "SCANPY_UMAP = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SCANPY_UMAP",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "SCANPY_MARKERS = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SCANPY_MARKERS",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "RAW_TPM_MATRIX = Channel.fromPath( \"$resultsRoot/${params.tpmMatrix}\", checkIfExists: true)",
        "origin": [
            [
                "\"$resultsRoot/${params.tpmMatrix}\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "RAW_TPM_MATRIX",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "RAW_TPM_MATRIX = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "RAW_TPM_MATRIX",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "Channel.from( expressionTypes ).into{\n    EXPRESSION_TYPES_FOR_MTX\n    EXPRESSION_TYPES_FOR_TSV\n}",
        "origin": [
            [
                "expressionTypes",
                "V"
            ]
        ],
        "gives": []
    },
    "OPERATION_24": {
        "string": "SMALL_MATRICES = Channel.create()",
        "origin": [],
        "gives": [
            [
                "SMALL_MATRICES",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "BIG_MATRICES = Channel.create()",
        "origin": [],
        "gives": [
            [
                "BIG_MATRICES",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "SCANPY_TSNE\n    .map{ r -> tuple('tsne', 'perplexity', r) }\n    .concat(SCANPY_UMAP.map{ r -> tuple('umap', 'n_neighbors', r) })\n    .set {SCANPY_DIMRED}",
        "origin": [
            [
                "SCANPY_TSNE",
                "P"
            ]
        ],
        "gives": [
            [
                "SCANPY_DIMRED",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "RAW_MATRIX.into{\n    RAW_MATRIX_FOR_MTX\n    RAW_MATRIX_FOR_TSV\n}",
        "origin": [
            [
                "RAW_MATRIX",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_28": {
        "string": "RAW_FILTERED_MATRIX.into{\n    RAW_FILTERED_MATRIX_FOR_TPM_FILTERING\n    RAW_FILTERED_MATRIX_FOR_MTX\n    RAW_FILTERED_MATRIX_FOR_TSV\n}",
        "origin": [
            [
                "RAW_FILTERED_MATRIX",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_29": {
        "string": "NORMALISED_MATRIX.into{\n    NORMALISED_MATRIX_FOR_MTX\n    NORMALISED_MATRIX_FOR_TSV\n}",
        "origin": [
            [
                "NORMALISED_MATRIX",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_30": {
        "string": "RAW_TPM_MATRIX.into{\n    RAW_TPM_MATRIX_FOR_FILTERING\n    RAW_TPM_MATRIX_FOR_MTX\n    RAW_TPM_MATRIX_FOR_TSV\n}",
        "origin": [
            [
                "RAW_TPM_MATRIX",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_31": {
        "string": "MASTER_SOFTWARE\n    .concat(BASE_SOFTWARE)\n    .concat(REFERENCE_SOFTWARE)\n    .collectFile(name: 'software.tsv', newLine: true, keepHeader: true )\n    .set { ALL_BASE_SOFTWARE }",
        "origin": [
            [
                "MASTER_SOFTWARE",
                "P"
            ],
            [
                "BASE_SOFTWARE",
                "P"
            ],
            [
                "REFERENCE_SOFTWARE",
                "P"
            ]
        ],
        "gives": [
            [
                "ALL_BASE_SOFTWARE",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "ALL_BASE_SOFTWARE\n        .concat(TERTIARY_SOFTWARE)\n        .set{ SOFTWARE }",
        "origin": [
            [
                "ALL_BASE_SOFTWARE",
                "P"
            ],
            [
                "TERTIARY_SOFTWARE",
                "P"
            ]
        ],
        "gives": [
            [
                "SOFTWARE",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "ALL_BASE_SOFTWARE\n        .set{ SOFTWARE }",
        "origin": [
            [
                "ALL_BASE_SOFTWARE",
                "P"
            ]
        ],
        "gives": [
            [
                "SOFTWARE",
                "P"
            ]
        ]
    },
    "OPERATION_34": {
        "string": "SOFTWARE\n    .collectFile(name: 'collected_software.tsv', keepHeader: true, newLine: false)\n    .set{ MERGED_SOFTWARE }",
        "origin": [
            [
                "SOFTWARE",
                "P"
            ]
        ],
        "gives": [
            [
                "MERGED_SOFTWARE",
                "P"
            ]
        ]
    },
    "OPERATION_35": {
        "string": "RAW_FILTERED_TPM_MATRIX.into{\n    RAW_FILTERED_TPM_MATRIX_FOR_MTX\n    RAW_FILTERED_TPM_MATRIX_FOR_TSV\n}",
        "origin": [
            [
                "RAW_FILTERED_TPM_MATRIX",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_36": {
        "string": "RAW_MATRIX_FOR_MTX\n    .concat(RAW_FILTERED_MATRIX_FOR_MTX)\n    .concat(NORMALISED_MATRIX_FOR_MTX)\n    .concat(RAW_TPM_MATRIX_FOR_MTX)\n    .concat(RAW_FILTERED_TPM_MATRIX_FOR_MTX)\n    .merge(EXPRESSION_TYPES_FOR_MTX)\n    .set{\n        MATRICES_TO_REPACKAGE\n    }",
        "origin": [
            [
                "RAW_MATRIX_FOR_MTX",
                "P"
            ],
            [
                "RAW_FILTERED_MATRIX_FOR_MTX",
                "P"
            ],
            [
                "NORMALISED_MATRIX_FOR_MTX",
                "P"
            ],
            [
                "RAW_TPM_MATRIX_FOR_MTX",
                "P"
            ],
            [
                "RAW_FILTERED_TPM_MATRIX_FOR_MTX",
                "P"
            ],
            [
                "EXPRESSION_TYPES_FOR_MTX",
                "P"
            ]
        ],
        "gives": [
            [
                "MATRICES_TO_REPACKAGE",
                "P"
            ]
        ]
    },
    "OPERATION_37": {
        "string": "MTX_MATRIX_COLNAMES\n    .into{\n        MTX_MATRIX_COLNAMES_FOR_MANIFEST_LINES\n        MTX_MATRIX_COLNAMES_FOR_CELLMAPPING\n    }",
        "origin": [
            [
                "MTX_MATRIX_COLNAMES",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_38": {
        "string": "RAW_MATRIX_FOR_TSV\n    .concat(RAW_FILTERED_MATRIX_FOR_TSV)\n    .concat(NORMALISED_MATRIX_FOR_TSV)\n    .concat(RAW_TPM_MATRIX_FOR_TSV)\n    .concat(RAW_FILTERED_TPM_MATRIX_FOR_TSV)\n    .merge( EXPRESSION_TYPES_FOR_TSV)\n    .set{\n        MATRICES_FOR_TSV\n    }",
        "origin": [
            [
                "RAW_MATRIX_FOR_TSV",
                "P"
            ],
            [
                "RAW_FILTERED_MATRIX_FOR_TSV",
                "P"
            ],
            [
                "NORMALISED_MATRIX_FOR_TSV",
                "P"
            ],
            [
                "RAW_TPM_MATRIX_FOR_TSV",
                "P"
            ],
            [
                "RAW_FILTERED_TPM_MATRIX_FOR_TSV",
                "P"
            ],
            [
                "EXPRESSION_TYPES_FOR_TSV",
                "P"
            ]
        ],
        "gives": [
            [
                "MATRICES_FOR_TSV",
                "P"
            ]
        ]
    },
    "OPERATION_39": {
        "string": "MATRICES_FOR_TSV_WITH_COUNT\n    .choice( SMALL_MATRICES, BIG_MATRICES ) {a -> a[0].toInteger() < params.largeMatrixThreshold ? 0 : 1 }",
        "origin": [
            [
                "MATRICES_FOR_TSV_WITH_COUNT",
                "P"
            ]
        ],
        "gives": [
            [
                "SMALL_MATRICES",
                "P"
            ],
            [
                "BIG_MATRICES",
                "P"
            ]
        ]
    },
    "OPERATION_40": {
        "string": "BIG_MATRICES\n    .map{ row-> tuple( row[2], file('NOTSV')) }        \n    .concat( TSV_MATRICES)\n    .set { \n        TSV_AND_NOTSV_MATRICES \n    }",
        "origin": [
            [
                "BIG_MATRICES",
                "P"
            ],
            [
                "TSV_MATRICES",
                "P"
            ]
        ],
        "gives": [
            [
                "TSV_AND_NOTSV_MATRICES",
                "P"
            ]
        ]
    },
    "OPERATION_41": {
        "string": "FINAL_CLUSTERS.into{\n    FINAL_CLUSTERS_FOR_MANIFEST\n    FINAL_CLUSTERS_FOR_SUMMARY\n}",
        "origin": [
            [
                "FINAL_CLUSTERS",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_42": {
        "string": "RENUMBERED_CLUSTER_MARKERS_BY_RESOLUTION.into{\n    CLUSTER_MARKERS_FOR_SUMMARY\n    CLUSTER_MARKERS_FOR_BUNDLE\n}",
        "origin": [
            [
                "RENUMBERED_CLUSTER_MARKERS_BY_RESOLUTION",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_43": {
        "string": "RENAMED_META_MARKERS_BY_VAR.into{\n    META_MARKERS_FOR_SUMMARY\n    META_MARKERS_FOR_BUNDLE\n}",
        "origin": [
            [
                "RENAMED_META_MARKERS_BY_VAR",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_44": {
        "string": "TSNE_MANIFEST_LINES\n    .collectFile(name: 'tsnes.txt', newLine: false, sort: true)\n    .set{ TSNE_MANIFEST_CONTENT }",
        "origin": [
            [
                "TSNE_MANIFEST_LINES",
                "P"
            ]
        ],
        "gives": [
            [
                "TSNE_MANIFEST_CONTENT",
                "P"
            ]
        ]
    },
    "OPERATION_45": {
        "string": "MATRIX_MANIFEST_LINES\n    .collectFile(name: 'matrixes.txt',  newLine: false, sort: false )\n    .set{ MATRIX_MANIFEST_CONTENT }",
        "origin": [
            [
                "MATRIX_MANIFEST_LINES",
                "P"
            ]
        ],
        "gives": [
            [
                "MATRIX_MANIFEST_CONTENT",
                "P"
            ]
        ]
    },
    "OPERATION_46": {
        "string": "MARKER_MANIFEST_LINES\n    .collectFile(name: 'markers.txt',  newLine: false, sort: true )\n    .set{ MARKER_MANIFEST_CONTENT }",
        "origin": [
            [
                "MARKER_MANIFEST_LINES",
                "P"
            ]
        ],
        "gives": [
            [
                "MARKER_MANIFEST_CONTENT",
                "P"
            ]
        ]
    },
    "OPERATION_47": {
        "string": "SUMMARY_MANIFEST_LINES\n    .collectFile(name: 'summaries.txt',  newLine: false, sort: true )\n    .set{ SUMMARY_MANIFEST_CONTENT }",
        "origin": [
            [
                "SUMMARY_MANIFEST_LINES",
                "P"
            ]
        ],
        "gives": [
            [
                "SUMMARY_MANIFEST_CONTENT",
                "P"
            ]
        ]
    },
    "OPERATION_48": {
        "string": "BASE_MANIFEST\n        .concat(TSNE_MANIFEST_CONTENT)\n        .concat(MARKER_MANIFEST_CONTENT)\n        .concat(SUMMARY_MANIFEST_CONTENT)\n        .collectFile(name: 'manifest_lines.tsv', newLine: false, sort: 'index' )\n        .set { STARTING_MANIFEST }",
        "origin": [
            [
                "BASE_MANIFEST",
                "P"
            ],
            [
                "TSNE_MANIFEST_CONTENT",
                "P"
            ],
            [
                "MARKER_MANIFEST_CONTENT",
                "P"
            ],
            [
                "SUMMARY_MANIFEST_CONTENT",
                "P"
            ]
        ],
        "gives": [
            [
                "STARTING_MANIFEST",
                "P"
            ]
        ]
    }
}
{
    "OPERATION_1": {
        "string": "Channel\n  .fromPath(params.sequencing_summary, type:'file')\n  .view { \"Summary File : $it\" }\n  .ifEmpty{\n    params.nanoplot = false\n    println(\"Could not find sequencing summary file! Set with 'params.sequencing_summary'\")\n  }\n  .set { sequencing_summary }",
        "origin": [
            [
                "params.sequencing_summary, type:'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "sequencing_summary",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n  .fromPath(\"${params.reads}/*.{fastq,fastq.gz,fq,fq.gz}\", type:'file')\n  .ifEmpty {\n    println(\"Could not find fastq files for nanopore sequencing. Set with 'params.reads'\")\n    exit 1\n  }\n  .map { reads -> tuple(reads.simpleName, reads ) }\n  .view { \"Fastq file found : ${it[0]}\" }\n  .set { fastq }",
        "origin": [
            [
                "\"${params.reads}/*.{fastq,fastq.gz,fq,fq.gz}\", type:'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n  .fromFilePairs(\"${params.illumina}/*_R{1,2}*.{fastq,fastq.gz}\", size: 2 )\n  .map { reads -> tuple(reads[0].replaceAll(~/_S[0-9]+_L[0-9]+/,\"\"), reads[1]) }\n  .view { \"Illumina fastq files for for greater accuracy : ${it[0]}\" }\n  .into { illumina_fastqs ; illumina_fastqs_polishing }",
        "origin": [
            [
                "\"${params.illumina}/*_R{1,2}*.{fastq,fastq.gz}\", size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "illumina_fastqs",
                "P"
            ],
            [
                "illumina_fastqs_polishing",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "assembled_fastas = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "assembled_fastas",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "round = Channel.of( 0 )",
        "origin": [
            [
                "0",
                "V"
            ]
        ],
        "gives": [
            [
                "round",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "changes = Channel.of(10000)",
        "origin": [
            [
                "10000",
                "V"
            ]
        ],
        "gives": [
            [
                "changes",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "new_rounds = Channel.create()",
        "origin": [],
        "gives": [
            [
                "new_rounds",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "medaka_fastas\n  .join(illumina_fastqs_polishing, by:0 )\n  .combine(round)\n  .combine(changes)\n  .set{ round_1 }",
        "origin": [
            [
                "medaka_fastas",
                "P"
            ],
            [
                "round",
                "P"
            ],
            [
                "changes",
                "P"
            ]
        ],
        "gives": [
            [
                "round_1",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "round_1\n  .mix(new_rounds)\n  .view()\n  .set{ for_polca }",
        "origin": [
            [
                "round_1",
                "P"
            ],
            [
                "new_rounds",
                "P"
            ]
        ],
        "gives": [
            [
                "for_polca",
                "P"
            ]
        ]
    }
}
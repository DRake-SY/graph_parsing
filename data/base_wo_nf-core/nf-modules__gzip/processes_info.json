{
    "decompress": {
        "name_process": "decompress",
        "string_process": "\nprocess decompress {\n    container 'abhi18av/biodragao_base'\n    publishDir params.resultsDir, mode: params.saveMode\n\n    when:\n    !params.compress\n\n    input:\n    set genomeFileName, file(genomeReads) from ch_in_gzip\n\n    output:\n    tuple path(genome_1_fq), path(genome_2_fq) into ch_out_gzip\n\n    script:\n    outputExtension = params.trimmed ? '.p.fastq' : '.fastq'\n\n                              \n    genome_1_fq = genomeReads[0].name.split(\"\\\\.\")[0] + outputExtension\n    genome_2_fq = genomeReads[1].name.split(\"\\\\.\")[0] + outputExtension\n\n    \"\"\"\n    gzip -dc ${genomeReads[0]} > ${genome_1_fq} \n    gzip -dc ${genomeReads[1]} > ${genome_2_fq}\n    \"\"\"\n\n}",
        "nb_lignes_process": 25,
        "string_script": "    outputExtension = params.trimmed ? '.p.fastq' : '.fastq'\n\n                              \n    genome_1_fq = genomeReads[0].name.split(\"\\\\.\")[0] + outputExtension\n    genome_2_fq = genomeReads[1].name.split(\"\\\\.\")[0] + outputExtension\n\n    \"\"\"\n    gzip -dc ${genomeReads[0]} > ${genome_1_fq} \n    gzip -dc ${genomeReads[1]} > ${genome_2_fq}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_in_gzip"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_out_gzip"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-modules__gzip",
        "directive": [
            "container 'abhi18av/biodragao_base'",
            "publishDir params.resultsDir, mode: params.saveMode"
        ],
        "when": "!params.compress",
        "stub": ""
    },
    "compress": {
        "name_process": "compress",
        "string_process": "\nprocess compress {\n    container 'abhi18av/biodragao_base'\n    publishDir params.resultsDir, mode: params.saveMode\n\n    when:\n    params.compress\n\n    input:\n    set genomeFileName, file(genomeReads) from ch_in_gzip\n\n    output:\n    tuple path(genome_1_fq), path(genome_2_fq) into ch_out_gzip\n\n    script:\n    outputExtension = params.trimmed ? '.p.fastq' : '.fastq'\n\n    genome_1_fq = genomeReads[0].name.split(\"\\\\.\")[0] + outputExtension\n    genome_2_fq = genomeReads[1].name.split(\"\\\\.\")[0] + outputExtension\n\n    \"\"\"\n    gzip -k ${genomeReads[0]} \n    gzip -k ${genomeReads[1]} \n    \"\"\"\n\n}",
        "nb_lignes_process": 24,
        "string_script": "    outputExtension = params.trimmed ? '.p.fastq' : '.fastq'\n\n    genome_1_fq = genomeReads[0].name.split(\"\\\\.\")[0] + outputExtension\n    genome_2_fq = genomeReads[1].name.split(\"\\\\.\")[0] + outputExtension\n\n    \"\"\"\n    gzip -k ${genomeReads[0]} \n    gzip -k ${genomeReads[1]} \n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_in_gzip"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_out_gzip"
        ],
        "nb_outputs": 1,
        "name_workflow": "nf-modules__gzip",
        "directive": [
            "container 'abhi18av/biodragao_base'",
            "publishDir params.resultsDir, mode: params.saveMode"
        ],
        "when": "params.compress",
        "stub": ""
    }
}
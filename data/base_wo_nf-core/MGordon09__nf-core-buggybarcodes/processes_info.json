{
    "QIIME2_FEATURETABLE_SUMMARIZE": {
        "name_process": "QIIME2_FEATURETABLE_SUMMARIZE",
        "string_process": "\nprocess QIIME2_FEATURETABLE_SUMMARIZE {\n                      \n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n    input:\n    path table\n\n    output:\n    path \"table.qzv\"    , emit: qzv\n    path \"*.version.txt\", emit: version\n\n\n    script:\n    def software      = getSoftwareName(task.process)\n    \"\"\"\n    qiime feature-table summarize \\\\\n        $options.args \\\\\n        --i-table  $table \\\\\n        --o-visualization table.qzv \\\\\n\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software      = getSoftwareName(task.process)\n    \"\"\"\n    qiime feature-table summarize \\\\\n        $options.args \\\\\n        --i-table  $table \\\\\n        --o-visualization table.qzv \\\\\n\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "table"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    },
    "CAT_FASTQ": {
        "name_process": "CAT_FASTQ",
        "string_process": "\nprocess CAT_FASTQ {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'merged_fastq', meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.merged.fastq.gz\"), emit: reads\n\n    script:\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.sort().join(' ')} > ${prefix}.merged.fastq.gz\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.sort().join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.sort().join(' ')} > ${prefix}_2.merged.fastq.gz\n            \"\"\"\n        }\n    }\n}",
        "nb_lignes_process": 40,
        "string_script": "    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.sort().join(' ')} > ${prefix}.merged.fastq.gz\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.sort().join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.sort().join(' ')} > ${prefix}_2.merged.fastq.gz\n            \"\"\"\n        }\n    }",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'merged_fastq', meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_TAXA_BARPLOT": {
        "name_process": "QIIME2_TAXA_BARPLOT",
        "string_process": "\nprocess QIIME2_TAXA_BARPLOT {\n    tag \"metadata: $metadata, taxonomy: $taxonomy, table: $table\"\n\tlabel 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n\tinput:\n\tpath metadata\n\tpath table\n\tpath taxonomy\n\n\toutput:\n\tpath \"*barplots.qzv\", emit: plot\n\tpath \"*.log\"\t\t, emit: log\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software     = getSoftwareName(task.process)\n\t\"\"\"\n\tqiime taxa barplot \\\\\n\t\t--i-table ${table} \\\\\n\t\t--i-taxonomy ${taxonomy} \\\\\n\t\t--m-metadata-file ${metadata} \\\\\n\t\t--o-visualization taxa-barplots.qzv \\\\\n\t\t> taxa-barplot.log\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n\t\"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def software     = getSoftwareName(task.process)\n\t\"\"\"\n\tqiime taxa barplot \\\\\n\t\t--i-table ${table} \\\\\n\t\t--i-taxonomy ${taxonomy} \\\\\n\t\t--m-metadata-file ${metadata} \\\\\n\t\t--o-visualization taxa-barplots.qzv \\\\\n\t\t> taxa-barplot.log\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "metadata",
            "table",
            "taxonomy"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"metadata: $metadata, taxonomy: $taxonomy, table: $table\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    },
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    cache false\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.csv\"     , emit: csv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "\nprocess SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }\n\n    conda     (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    container \"quay.io/biocontainers/python:3.8.3\"\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.csv'\n\n\n    script:                                                                      \n    \"\"\"\n    python3 ${projectDir}/bin/check_samplesheet.py $samplesheet samplesheet.valid.csv\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    python3 ${projectDir}/bin/check_samplesheet.py $samplesheet samplesheet.valid.csv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$samplesheet\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)",
            "container \"quay.io/biocontainers/python:3.8.3\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_FEATURETABLE_FILTERFEATURES": {
        "name_process": "QIIME2_FEATURETABLE_FILTERFEATURES",
        "string_process": "\nprocess QIIME2_FEATURETABLE_FILTERFEATURES {\n    tag \"$deblur_table\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n    input:\n    path deblur_table\n\n    output:\n    path 'table-deblur-filtered.qza' , emit: qza\n    path '*.version.txt'             , emit: version\n\n    script:\n    def software     = getSoftwareName(task.process)\n    \"\"\"\n    qiime feature-table filter-features \\\\\n        --i-table $deblur_table \\\\\n        $options.args \\\\\n        --o-filtered-table table-deblur-filtered.qza \\\\\n        > filter-features_sample.log\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software     = getSoftwareName(task.process)\n    \"\"\"\n    qiime feature-table filter-features \\\\\n        --i-table $deblur_table \\\\\n        $options.args \\\\\n        --o-filtered-table table-deblur-filtered.qza \\\\\n        > filter-features_sample.log\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "deblur_table"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$deblur_table\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_CUTADAPT_TRIMPAIRED": {
        "name_process": "QIIME2_CUTADAPT_TRIMPAIRED",
        "string_process": "\nprocess QIIME2_CUTADAPT_TRIMPAIRED {\n    tag \"$demux\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n    input:\n    path demux\n\n    output:\n    path \"*.qza\"                , emit: qza\n    path \"*.log\"                , emit: log\n    path \"*.version.txt\"        , emit: version\n\n    script:\n    def software      = getSoftwareName(task.process)\n    \"\"\"\n\n    qiime cutadapt trim-paired \\\\\n        --i-demultiplexed-sequences $demux \\\\\n        $options.args \\\\\n        --o-trimmed-sequences demux_trimmed.qza \\\\\n        --p-cores $task.cpus \\\\\n        > cutadapt_trimpairs.log\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def software      = getSoftwareName(task.process)\n    \"\"\"\n\n    qiime cutadapt trim-paired \\\\\n        --i-demultiplexed-sequences $demux \\\\\n        $options.args \\\\\n        --o-trimmed-sequences demux_trimmed.qza \\\\\n        --p-cores $task.cpus \\\\\n        > cutadapt_trimpairs.log\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "demux"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$demux\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_METADATA_TABULATE": {
        "name_process": "QIIME2_METADATA_TABULATE",
        "string_process": "\nprocess QIIME2_METADATA_TABULATE {\n    tag \"$artifact\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n    input:\n    path artifact\n\n    output:\n    path \"taxonomy.qzv\",  emit: qzv\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software      = getSoftwareName(task.process)\n                                                                                                         \n    \"\"\"\n    qiime metadata tabulate \\\\\n        --m-input-file $artifact \\\\\n        --o-visualization taxonomy.qzv\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def software      = getSoftwareName(task.process)\n                                                                                                         \n    \"\"\"\n    qiime metadata tabulate \\\\\n        --m-input-file $artifact \\\\\n        --o-visualization taxonomy.qzv\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "artifact"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$artifact\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_DEBLUR_DENOISE16S": {
        "name_process": "QIIME2_DEBLUR_DENOISE16S",
        "string_process": "\nprocess QIIME2_DEBLUR_DENOISE16S {\n    tag \"$demux\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n    input:\n    path demux\n\n    output:\n    path \"table-deblur.qza\"                , emit: table\n    path \"*-seqs-deblur.qza\"               , emit: rep_seqs\n    path \"stats-deblur.qza\"                , emit: stats\n    path \"*.version.txt\"                   , emit: version\n\n    script:\n    def software      = getSoftwareName(task.process)\n    \"\"\"\n    qiime deblur denoise-16S \\\\\n        --i-demultiplexed-seqs $demux \\\\\n        $options.args \\\\\n        --p-jobs-to-start $task.cpus \\\\\n        --o-representative-sequences reps-seqs-deblur.qza \\\\\n        --o-table table-deblur.qza \\\\\n        --o-stats stats-deblur.qza\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def software      = getSoftwareName(task.process)\n    \"\"\"\n    qiime deblur denoise-16S \\\\\n        --i-demultiplexed-seqs $demux \\\\\n        $options.args \\\\\n        --p-jobs-to-start $task.cpus \\\\\n        --o-representative-sequences reps-seqs-deblur.qza \\\\\n        --o-table table-deblur.qza \\\\\n        --o-stats stats-deblur.qza\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "demux"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$demux\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_QUALITYFILTER_QSCORE": {
        "name_process": "QIIME2_QUALITYFILTER_QSCORE",
        "string_process": "\nprocess QIIME2_QUALITYFILTER_QSCORE {\n    tag \"$demux_qza\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n    input:\n    path demux_qza\n\n    output:\n    path \"*filtered.qza\"     , emit: qza\n    path \"*stats.qza\"        , emit: stats\n    path \"*.version.txt\"     , emit: version\n\n    script:\n    def software      = getSoftwareName(task.process)\n    \"\"\"\n    qiime quality-filter q-score \\\\\n        --i-demux  ${demux_qza} \\\\\n        $options.args \\\\\n        --o-filtered-sequences demux_filtered.qza \\\\\n        --o-filter-stats demux_filtered_stats.qza\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software      = getSoftwareName(task.process)\n    \"\"\"\n    qiime quality-filter q-score \\\\\n        --i-demux  ${demux_qza} \\\\\n        $options.args \\\\\n        --o-filtered-sequences demux_filtered.qza \\\\\n        --o-filter-stats demux_filtered_stats.qza\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "demux_qza"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$demux_qza\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "\nprocess FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\"\n    } else {\n        container \"quay.io/biocontainers/fastqc:0.11.9--0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"*.version.txt\"          , emit: version\n\n    script:\n                                                                          \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\" } else { container \"quay.io/biocontainers/fastqc:0.11.9--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "\nprocess MULTIQC {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\"\n    } else {\n        container \"quay.io/biocontainers/multiqc:1.10.1--py_0\"\n    }\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"*.version.txt\"       , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\" } else { container \"quay.io/biocontainers/multiqc:1.10.1--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_IMPORT": {
        "name_process": "QIIME2_IMPORT",
        "string_process": "\nprocess QIIME2_IMPORT {\n    tag \"$reads\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n    input:\n    path reads\n\n    output:\n    path \"demux.qza\"    , emit: qza\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software      = getSoftwareName(task.process)\n    \"\"\"\n    qiime tools import \\\\\n        --input-path  ${reads} \\\\\n        $options.args \\\\\n        --output-path  demux.qza\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def software      = getSoftwareName(task.process)\n    \"\"\"\n    qiime tools import \\\\\n        --input-path  ${reads} \\\\\n        $options.args \\\\\n        --output-path  demux.qza\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "reads"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$reads\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_TOOLS_VIEW": {
        "name_process": "QIIME2_TOOLS_VIEW",
        "string_process": "\nprocess QIIME2_TOOLS_VIEW {\n                      \n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n    input:\n    path table\n\n    output:\n    path  \"table.qzv\", emit: qzv\n\n    script:\n    def software      = getSoftwareName(task.process)\n    \"\"\"\n    qiime tools view $table\n\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    def software      = getSoftwareName(task.process)\n    \"\"\"\n    qiime tools view $table\n\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "table"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_FEATURETABLE_FILTERFEATURESCONDITIONALLY": {
        "name_process": "QIIME2_FEATURETABLE_FILTERFEATURESCONDITIONALLY",
        "string_process": "\nprocess QIIME2_FEATURETABLE_FILTERFEATURESCONDITIONALLY {\n    tag \"$deblur_table\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n    input:\n    path deblur_table\n\n    output:\n    path 'table-deblur-filtered.qza'         , emit: qza\n    path 'filter-features-conditionally.log' , emit: log\n    path '*.version.txt'                     , emit: version\n\n    script:\n    def software     = getSoftwareName(task.process)\n    \"\"\"\n    qiime feature-table filter-features-conditionally \\\\\n        --i-table $deblur_table \\\\\n        $options.args \\\\\n        --o-filtered-table table-deblur-filtered.qza \\\\\n        > filter-features-conditionally.log\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software     = getSoftwareName(task.process)\n    \"\"\"\n    qiime feature-table filter-features-conditionally \\\\\n        --i-table $deblur_table \\\\\n        $options.args \\\\\n        --o-filtered-table table-deblur-filtered.qza \\\\\n        > filter-features-conditionally.log\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "deblur_table"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$deblur_table\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    },
    "CUTADAPT": {
        "name_process": "CUTADAPT",
        "string_process": "\nprocess CUTADAPT {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::cutadapt=3.2' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/cutadapt:3.2--py38h0213d0e_0'\n    } else {\n        container 'quay.io/biocontainers/cutadapt:3.2--py38h0213d0e_0'\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*.trim.fastq.gz'), emit: reads\n    tuple val(meta), path('*.log')          , emit: log\n    path '*.version.txt'                    , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def trimmed  = meta.single_end ? \"-o ${prefix}.trim.fastq.gz\" : \"-o ${prefix}_1.trim.fastq.gz -p ${prefix}_2.trim.fastq.gz\"\n    \"\"\"\n    cutadapt \\\\\n        --cores $task.cpus \\\\\n        $options.args \\\\\n        $trimmed \\\\\n        $reads \\\\\n        > ${prefix}.cutadapt.log\n    echo \\$(cutadapt --version) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def trimmed  = meta.single_end ? \"-o ${prefix}.trim.fastq.gz\" : \"-o ${prefix}_1.trim.fastq.gz -p ${prefix}_2.trim.fastq.gz\"\n    \"\"\"\n    cutadapt \\\\\n        --cores $task.cpus \\\\\n        $options.args \\\\\n        $trimmed \\\\\n        $reads \\\\\n        > ${prefix}.cutadapt.log\n    echo \\$(cutadapt --version) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::cutadapt=3.2' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/cutadapt:3.2--py38h0213d0e_0' } else { container 'quay.io/biocontainers/cutadapt:3.2--py38h0213d0e_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_VSEARCH_JOINPAIRS": {
        "name_process": "QIIME2_VSEARCH_JOINPAIRS",
        "string_process": "\nprocess QIIME2_VSEARCH_JOINPAIRS {\n    tag \"$trim_qza\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n    input:\n    path trim_qza                                     \n                                                                                  \n\n    output:\n    path \"*.qza\"                , emit: qza\n    path \"*.log\"                , emit: log\n    path \"*.version.txt\"        , emit: version\n\n    script:\n    def software      = getSoftwareName(task.process)\n    \"\"\"\n\n    qiime vsearch join-pairs \\\\\n        --i-demultiplexed-seqs $trim_qza \\\\\n        --o-joined-sequences demux_joined.qza \\\\\n        --p-threads $task.cpus \\\\\n        $options.args \\\\\n        > vsearch_joinpairs.log\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def software      = getSoftwareName(task.process)\n    \"\"\"\n\n    qiime vsearch join-pairs \\\\\n        --i-demultiplexed-seqs $trim_qza \\\\\n        --o-joined-sequences demux_joined.qza \\\\\n        --p-threads $task.cpus \\\\\n        $options.args \\\\\n        > vsearch_joinpairs.log\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "trim_qza"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$trim_qza\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_FEATURECLASSIFIER_CLASSIFYSKLEARN": {
        "name_process": "QIIME2_FEATURECLASSIFIER_CLASSIFYSKLEARN",
        "string_process": "\nprocess QIIME2_FEATURECLASSIFIER_CLASSIFYSKLEARN {\n    tag \"$rep_seqs,$trained_classifier\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n    input:\n    path trained_classifier\n    path rep_seqs\n\n    output:\n    path \"taxonomy.qza\"          , emit: qza\n    path \"feature-classifier.log\", emit: log\n    path \"*.version.txt\"         , emit: version\n\n    script:\n    def software      = getSoftwareName(task.process)\n    \"\"\"\n    qiime feature-classifier classify-sklearn \\\\\n        --i-classifier ${trained_classifier} \\\\\n        $options.args \\\\\n        --p-n-jobs ${task.cpus} \\\\\n        --i-reads ${rep_seqs} \\\\\n        --o-classification taxonomy.qza \\\\\n        > feature-classifier.log\n\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software      = getSoftwareName(task.process)\n    \"\"\"\n    qiime feature-classifier classify-sklearn \\\\\n        --i-classifier ${trained_classifier} \\\\\n        $options.args \\\\\n        --p-n-jobs ${task.cpus} \\\\\n        --i-reads ${rep_seqs} \\\\\n        --o-classification taxonomy.qza \\\\\n        > feature-classifier.log\n\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "trained_classifier",
            "rep_seqs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$rep_seqs,$trained_classifier\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    },
    "QIIME2_TOOLS_EXPORT": {
        "name_process": "QIIME2_TOOLS_EXPORT",
        "string_process": "\nprocess QIIME2_TOOLS_EXPORT {\n\ttag \"$qiime_qzv\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)\n    container \"quay.io/qiime2/core:2021.2\"\n\n\tinput:\n\tpath qiime_qzv\n\n\toutput:\n\tpath \"export/*\"     , emit: folder\n    path \"*.version.txt\", emit: version\n\n    script:\n    def software     = getSoftwareName(task.process)\n\t\"\"\"\n\tqiime tools export \\\\\n\t    --input-path $qiime_qzv \\\\\n\t\t--output-path export\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n\t\"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    def software     = getSoftwareName(task.process)\n\t\"\"\"\n\tqiime tools export \\\\\n\t    --input-path $qiime_qzv \\\\\n\t\t--output-path export\n    echo \\$(qiime --version | sed -e \"s/q2cli version //g\" | tr -d '`' | sed -e \"s/Run qiime info for more version details.//g\") > ${software}.version.txt\n\t\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "qiime_qzv"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-buggybarcodes",
        "directive": [
            "tag \"$qiime_qzv\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? { exit 1 \"QIIME2 has no conda package\" } : null)",
            "container \"quay.io/qiime2/core:2021.2\""
        ],
        "when": "",
        "stub": ""
    }
}
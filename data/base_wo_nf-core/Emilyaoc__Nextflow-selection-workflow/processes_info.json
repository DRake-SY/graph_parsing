{
    "PRANK": {
        "name_process": "PRANK",
        "string_process": "\nprocess PRANK {\n\n    conda (params.enable_conda ? \"bioconda::prank:v.150803\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/prank:v.150803--0\"\n    } else {\n        container \"quay.io/biocontainers/prank:v.150803--0\"\n    }\n\n    input:\n    tuple path( sequences ), path( tree )\n\n    output:\n    tuple path( \"*.best.fas\" ), path( tree ), emit: hyphy_alignment\n    path \"*.phy\"                            , emit: paml_alignment\n\n    script:\n    def prefix = sequences.baseName\n    def args   = task.ext.args  ?: ''\n    def args2  = task.ext.args2 ?: ''\n    \"\"\"\n    prank -d=$sequences \\\\\n        -t=$tree \\\\\n        -o=${prefix} \\\\\n        $args\n    prank $args2 \\\\\n        -d=${prefix}.best.fas \\\\\n        -o=${prefix}\n    \"\"\"\n\n}",
        "nb_lignes_process": 30,
        "string_script": "    def prefix = sequences.baseName\n    def args   = task.ext.args  ?: ''\n    def args2  = task.ext.args2 ?: ''\n    \"\"\"\n    prank -d=$sequences \\\\\n        -t=$tree \\\\\n        -o=${prefix} \\\\\n        $args\n    prank $args2 \\\\\n        -d=${prefix}.best.fas \\\\\n        -o=${prefix}\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "PRANK"
        ],
        "tools_url": [
            "https://bio.tools/prank"
        ],
        "tools_dico": [
            {
                "name": "PRANK",
                "uri": "https://bio.tools/prank",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Probabilistic multiple alignment program for DNA, codon and amino-acid sequences.",
                "homepage": "http://wasabiapp.org/software/prank/"
            }
        ],
        "inputs": [
            "sequences",
            "tree"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Emilyaoc__Nextflow-selection-workflow",
        "directive": [
            "conda (params.enable_conda ? \"bioconda::prank:v.150803\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/prank:v.150803--0\" } else { container \"quay.io/biocontainers/prank:v.150803--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "PAML": {
        "name_process": "PAML",
        "string_process": "\nprocess PAML {\n\n    conda (params.enable_conda ? \"bioconda::paml:4.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/paml:4.9--h779adbc_6\"\n    } else {\n        container \"quay.io/biocontainers/paml:4.9--h779adbc_6\"\n    }\n\n    input:\n    path alignment\n\n    output:\n    path \"*\", emit: paml\n\n    script:\n    \"\"\"\n    cat << END_CTL > model.ctl\n    END_CTL\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    cat << END_CTL > model.ctl\n    END_CTL\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Emilyaoc__Nextflow-selection-workflow",
        "directive": [
            "conda (params.enable_conda ? \"bioconda::paml:4.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/paml:4.9--h779adbc_6\" } else { container \"quay.io/biocontainers/paml:4.9--h779adbc_6\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SANITIZE_STOP_CODONS": {
        "name_process": "SANITIZE_STOP_CODONS",
        "string_process": "process SANITIZE_STOP_CODONS {\n\n                \n                     \n                                          \n                \n                                                  \n                                      \n                                          \n\n    conda (params.enable_conda ? \"conda-forge::biopython:1.78\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/biopython:1.78\"\n    } else {\n        container \"quay.io/biocontainers/biopython:1.78\"\n    }\n\n    input:\n    path sequences\n\n    output:\n    path \"*.fasta\"                , emit: fasta\n    path \"*_stop_codon_count.tsv\" , emit: tsv  , optional: true\n\n    script:\n    prefix = sequences.baseName\n    \"\"\"\n    locate_intermediate_stop_codons.py $sequences ${prefix}_nostop.fasta ${prefix}_stop_codon_count.tsv\n\n    if [[ \\$( wc -l < ${prefix}_stop_codon_count.tsv ) -gt 1 ]]; then\n        mv ${prefix}_nostop.fasta ${prefix}_stops.fasta\n    else\n        rm ${prefix}_stop_codon_count.tsv\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    prefix = sequences.baseName\n    \"\"\"\n    locate_intermediate_stop_codons.py $sequences ${prefix}_nostop.fasta ${prefix}_stop_codon_count.tsv\n\n    if [[ \\$( wc -l < ${prefix}_stop_codon_count.tsv ) -gt 1 ]]; then\n        mv ${prefix}_nostop.fasta ${prefix}_stops.fasta\n    else\n        rm ${prefix}_stop_codon_count.tsv\n    fi\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sequences"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Emilyaoc__Nextflow-selection-workflow",
        "directive": [
            "conda (params.enable_conda ? \"conda-forge::biopython:1.78\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/biopython:1.78\" } else { container \"quay.io/biocontainers/biopython:1.78\" }"
        ],
        "when": "",
        "stub": ""
    },
    "JQ": {
        "name_process": "JQ",
        "string_process": "\nprocess JQ {\n\n    container = ''\n    conda (params.enable_conda ? \"conda-forge::jq:1.6\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/jq:1.6\"\n    } else {\n        container \"quay.io/biocontainers/jq:1.6\"\n    }\n\n    input:\n    path json\n    path jq_filter\n\n    output:\n    path \"*.tsv\", emit: tsv\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    jq $args \\\\\n        -f ${jq_filter} \\\\\n        $json > ${json.baseName}.tsv\n    \"\"\"\n\n}",
        "nb_lignes_process": 25,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    jq $args \\\\\n        -f ${jq_filter} \\\\\n        $json > ${json.baseName}.tsv\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "json",
            "jq_filter"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Emilyaoc__Nextflow-selection-workflow",
        "directive": [
            "container = ''",
            "conda (params.enable_conda ? \"conda-forge::jq:1.6\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/jq:1.6\" } else { container \"quay.io/biocontainers/jq:1.6\" }"
        ],
        "when": "",
        "stub": ""
    },
    "HYPHY": {
        "name_process": "HYPHY",
        "string_process": "\nprocess HYPHY {\n\n    conda (params.enable_conda ? \"bioconda::hyphy:2.5.31\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/hyphy:2.5.31--h48c199c_0\"\n    } else {\n        container \"quay.io/biocontainers/hyphy:2.5.31--h48c199c_0\"\n    }\n\n    input:\n    tuple path(fasta), path(tree)\n    val test\n\n    output:\n    path \"*.json\", emit: json\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    hyphy $args $test --alignment $fasta --tree $tree\n    \"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    hyphy $args $test --alignment $fasta --tree $tree\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "HyPhy"
        ],
        "tools_url": [
            "https://bio.tools/HyPhy"
        ],
        "tools_dico": [
            {
                "name": "HyPhy",
                "uri": "https://bio.tools/HyPhy",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0084",
                            "term": "Phylogeny"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software package for the analysis of genetic sequences using techniques in phylogenetics, molecular evolution, and machine learning.",
                "homepage": "http://hyphy.org"
            }
        ],
        "inputs": [
            "fasta",
            "tree",
            "test"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Emilyaoc__Nextflow-selection-workflow",
        "directive": [
            "conda (params.enable_conda ? \"bioconda::hyphy:2.5.31\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/hyphy:2.5.31--h48c199c_0\" } else { container \"quay.io/biocontainers/hyphy:2.5.31--h48c199c_0\" }"
        ],
        "when": "",
        "stub": ""
    }
}
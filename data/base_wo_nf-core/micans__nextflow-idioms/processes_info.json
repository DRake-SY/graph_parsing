{
    "star": {
        "name_process": "star",
        "string_process": "\nprocess star {\n  output: file('*.txt') into ch_input\n  script: 'for i in {00..09}; do echo \"some F $i content\" > f$i.txt; done'\n}",
        "nb_lignes_process": 3,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "merge": {
        "name_process": "merge",
        "string_process": "\nprocess merge {\n   publishDir \"$baseDir/results\", mode: 'copy'\n\n   input:\n   file inputs from ch_merge.collect()\n\n   output:\n   file('catmix.txt')\n\n   script:\n   \"\"\"\n   cat $inputs > catmix.txt\n   \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "   \"\"\"\n   cat $inputs > catmix.txt\n   \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_merge"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "publishDir \"$baseDir/results\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "foo": {
        "name_process": "foo",
        "string_process": "\nprocess foo {\n                                                                                           \n                                                                                                \n          \n    memory { 1.GB * Math.max(4*(1<<30), ((1<<30) + (int) task.attempt ** 0.5 * inputfile.size())).intdiv(1<<30) }\n    echo true\n    input: file(inputfile) from A\n    script: \"ls $inputfile && echo ${task.memory} ${task.attempt}\"\n}",
        "nb_lignes_process": 8,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "memory { 1.GB * Math.max(4*(1<<30), ((1<<30) + (int) task.attempt ** 0.5 * inputfile.size())).intdiv(1<<30) }",
            "echo true input: file(inputfile) from A script: \"ls $inputfile && echo ${task.memory} ${task.attempt}\""
        ],
        "when": "",
        "stub": ""
    },
    "bar": {
        "name_process": "bar",
        "string_process": "\nprocess bar {\n  echo true\n  input: file(mydir) from ch_bcl.flatten()\n\n  script: \"echo have file $mydir && ls $mydir\"\n}",
        "nb_lignes_process": 5,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "echo true input: file(mydir) from ch_bcl.flatten() script: \"echo have file $mydir && ls $mydir\""
        ],
        "when": "",
        "stub": ""
    },
    "processA": {
        "name_process": "processA",
        "string_process": "\nprocess processA {\n  output: file \"name.txt\" into name_ch\n\n  script:\n  \"\"\"\n    #!/usr/bin/python\n    with open(\"name.txt\", 'w') as file1:\n      file1.write(\"/nfs/users/nfs_s/svd/git/cellgeni/patterns/file2.txt\")\n  \"\"\"\n                                       \n}",
        "nb_lignes_process": 10,
        "string_script": "  \"\"\"\n    #!/usr/bin/python\n    with open(\"name.txt\", 'w') as file1:\n      file1.write(\"/nfs/users/nfs_s/svd/git/cellgeni/patterns/file2.txt\")\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "processB": {
        "name_process": "processB",
        "string_process": "\nprocess processB {\n  input:  set val(sampleid), file(thefile) from ch_AB\n  output: set val(sampleid), file('out.txt') into ch_BC\n  script: \"(echo 'B process'; cat $thefile; md5sum $thefile) > out.txt\"\n}",
        "nb_lignes_process": 4,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "processC": {
        "name_process": "processC",
        "string_process": "\nprocess processC {\n  publishDir \"results\"\n  input: set val(sampleid), file(a) from ch_C.view()\n  output: file('*.out')\n  script: \"(echo 'C process'; cat $a) > ${sampleid}.out\"\n}",
        "nb_lignes_process": 5,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "publishDir \"results\" input: set val(sampleid), file(a) from ch_C.view() output: file('*.out') script: \"(echo 'C process'; cat $a) > ${sampleid}.out\""
        ],
        "when": "",
        "stub": ""
    },
    "get_data": {
        "name_process": "get_data",
        "string_process": "\nprocess get_data {\n  output: file('index.txt') into channel_index\n\n  shell:\n  '''\n  find !{params.inputdir} -name '*.txt' > index.txt\n  '''\n}",
        "nb_lignes_process": 7,
        "string_script": "  '''\n  find !{params.inputdir} -name '*.txt' > index.txt\n  '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "use_data": {
        "name_process": "use_data",
        "string_process": "\nprocess use_data {\n  echo true\n  input: file myfile from channel_index.readLines().flatMap().map{file(it)}.view()\n\n  shell:\n  '''\n  cat !{myfile}\n  '''\n}",
        "nb_lignes_process": 8,
        "string_script": "  '''\n  cat !{myfile}\n  '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "echo true input: file myfile from channel_index.readLines().flatMap().map{file(it)}.view()"
        ],
        "when": "",
        "stub": ""
    },
    "dostuff": {
        "name_process": "dostuff",
        "string_process": "\nprocess dostuff {\n    tag \"$pair_id ${reads.size()}\"\n\n    input:\n    set pair_id, file(reads) from read_pairs\n\n    script:\n    f1 = reads[0]\n    f2 = reads[1]\n    \"\"\"\n    echo \"I have files $f1 and $f2\"\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    f1 = reads[0]\n    f2 = reads[1]\n    \"\"\"\n    echo \"I have files $f1 and $f2\"\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "gff2ps"
        ],
        "tools_url": [
            "https://bio.tools/gff2ps"
        ],
        "tools_dico": [
            {
                "name": "gff2ps",
                "uri": "https://bio.tools/gff2ps",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1255",
                                "term": "Sequence features"
                            }
                        ]
                    }
                ],
                "description": "Program for visualizing annotations of genomic sequences. The program takes the annotated features on a genomic sequence in GFF format as input, and produces a visual output in PostScript. While it can be used in a very simple way, it also allows for a great degree of customization through a number of options and/or customization files.",
                "homepage": "http://big.crg.cat/services/gff2ps"
            }
        ],
        "inputs": [
            "read_pairs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "tag \"$pair_id ${reads.size()}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_datasets": {
        "name_process": "get_datasets",
        "string_process": "\nprocess get_datasets {\n\n    tag \"$datasetname\"\n\n    input:\n    val datasetname from ch_datalist\n\n    output:\n    set val(datasetname), file('*.h5ad') into ch_bbknn, ch_scanorama\n    set val(datasetname), file('*.rds') into  ch_R_harmony,  ch_R_mnn\n\n    shell:\n    '''\n    pyfile=\"!{params.datadir}/!{datasetname}.h5ad\"\n    Rfile=\"!{params.datadir}/!{datasetname}.rds\"\n    if [[ ! -e $pyfile || ! -e $Rfile ]]; then\n      echo \"Please check existence of $pyfile and $Rfile\"\n      false\n    fi\n    ln -s $pyfile .\n    ln -s $Rfile .\n    '''\n}",
        "nb_lignes_process": 22,
        "string_script": "    '''\n    pyfile=\"!{params.datadir}/!{datasetname}.h5ad\"\n    Rfile=\"!{params.datadir}/!{datasetname}.rds\"\n    if [[ ! -e $pyfile || ! -e $Rfile ]]; then\n      echo \"Please check existence of $pyfile and $Rfile\"\n      false\n    fi\n    ln -s $pyfile .\n    ln -s $Rfile .\n    '''",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_datalist"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_bbknn",
            "ch_scanorama",
            "ch_R_harmony",
            "ch_R_mnn"
        ],
        "nb_outputs": 4,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "tag \"$datasetname\""
        ],
        "when": "",
        "stub": ""
    },
    "py_bbknn": {
        "name_process": "py_bbknn",
        "string_process": "\nprocess py_bbknn {\n\n    tag \"bbknn (py) $datasetname\"\n\n    input:\n    set val(datasetname), file(datain) from ch_bbknn\n\n    output:\n    set val(datasetname), val('bbknn'), file('scana.*.h5ad') into ch_bbknn_entryopy\n\n    shell:\n    '''\n    cat !{datain} > scana.!{datasetname}.h5ad\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    cat !{datain} > scana.!{datasetname}.h5ad\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_bbknn"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_bbknn_entryopy"
        ],
        "nb_outputs": 1,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "tag \"bbknn (py) $datasetname\""
        ],
        "when": "",
        "stub": ""
    },
    "py_scanorama": {
        "name_process": "py_scanorama",
        "string_process": "\nprocess py_scanorama {\n\n    tag \"scanaorama (py) $datasetname\"\n\n    input:\n    set val(datasetname), file(datain) from ch_scanorama\n\n    output:\n    set val(datasetname), val('scanorama'), file('scana.*.h5ad') into ch_scanorama_entropy\n\n    shell:\n    '''\n    cat !{datain} > scana.!{datasetname}.h5ad\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    cat !{datain} > scana.!{datasetname}.h5ad\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_scanorama"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_scanorama_entropy"
        ],
        "nb_outputs": 1,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "tag \"scanaorama (py) $datasetname\""
        ],
        "when": "",
        "stub": ""
    },
    "R_harmony": {
        "name_process": "R_harmony",
        "string_process": "\nprocess R_harmony {\n\n    tag \"harmony (R) $datasetname\"\n\n    input:\n    set val(datasetname), file(datain) from ch_R_harmony\n\n    output:\n    set val(datasetname), val('harmony'), file('harmony.*.rds') into ch_R_entropy1\n\n    shell:\n    '''\n    cat !{datain} > harmony.!{datasetname}.rds\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    cat !{datain} > harmony.!{datasetname}.rds\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_R_harmony"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_R_entropy1"
        ],
        "nb_outputs": 1,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "tag \"harmony (R) $datasetname\""
        ],
        "when": "",
        "stub": ""
    },
    "R_mnn": {
        "name_process": "R_mnn",
        "string_process": "\nprocess R_mnn {\n\n    tag \"mnn (R) $datasetname\"\n\n    input:\n    set val(datasetname), file(datain) from ch_R_mnn\n\n    output:\n    set val(datasetname), val('mnn'), file('mnn.*.rds') into ch_R_entropy2\n\n    shell:\n    '''\n    cat !{datain} > mnn.!{datasetname}.rds\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    cat !{datain} > mnn.!{datasetname}.rds\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_R_mnn"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_R_entropy2"
        ],
        "nb_outputs": 1,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "tag \"mnn (R) $datasetname\""
        ],
        "when": "",
        "stub": ""
    },
    "R_entroy": {
        "name_process": "R_entroy",
        "string_process": "\nprocess R_entroy {\n\n    tag \"entropy (R) $datain $method $datasetname\"\n\n    publishDir \"${params.outdir}\", mode: 'copy'\n\n    input:\n    set val(datasetname), val(method), file(datain) from ch_R_entropy\n\n    output:\n    file('*.epy')\n\n    shell:\n    '''\n    echo \"!{datasetname} !{method} !{datain}\" > \"!{method}.!{datasetname}.epy\"\n    '''\n}",
        "nb_lignes_process": 16,
        "string_script": "    '''\n    echo \"!{datasetname} !{method} !{datain}\" > \"!{method}.!{datasetname}.epy\"\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_R_entropy"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "tag \"entropy (R) $datain $method $datasetname\"",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "py_entroy": {
        "name_process": "py_entroy",
        "string_process": "\nprocess py_entroy {\n\n    tag \"entropy (python) $datain $method $datasetname\"\n\n    publishDir \"${params.outdir}\", mode: 'copy'\n\n    input:\n    set val(datasetname), val(method), file(datain) from ch_py_entropy\n\n    output:\n    file('*.epy')\n\n    shell:\n    '''\n    echo \"!{datasetname} !{method} !{datain}\" > \"!{method}.!{datasetname}.epy\"\n    '''\n}",
        "nb_lignes_process": 16,
        "string_script": "    '''\n    echo \"!{datasetname} !{method} !{datain}\" > \"!{method}.!{datasetname}.epy\"\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_py_entropy"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "tag \"entropy (python) $datain $method $datasetname\"",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "make_files": {
        "name_process": "make_files",
        "string_process": "\nprocess make_files {\n  output: file '*.txt' into ch_genesis                                          \n  script:\n  \"\"\"\n  for i in {00..15}; do\n    rv=\\$((\\$RANDOM % 13))\n    echo \"reads \\$rv\" > f\\$i.txt\n  done\n  \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "  \"\"\"\n  for i in {00..15}; do\n    rv=\\$((\\$RANDOM % 13))\n    echo \"reads \\$rv\" > f\\$i.txt\n  done\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "transient_error": {
        "name_process": "transient_error",
        "string_process": "\nprocess transient_error {\n\n                           \n                          \n\n  errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }\n  maxRetries 3\n\n  output: set val(i), file('newfile.txt') into ch_filter\n\n  input: set val(i), file(afile) from ch_transient\n  script:\n  if (task.attempt > 0) {\n    log.info \"-- attempt ${task.attempt} value $i file $afile\"\n  }\n  \"\"\"\n  read txt val < $afile\n  rv=\\$((\\$RANDOM % 10))\n  if (( \\$rv > 4 )); then       # This fails 50% of the time.\n    (echo \"attempt ${task.attempt}\"; cat $afile) > newfile.txt\n  else\n    false\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  if (task.attempt > 0) {\n    log.info \"-- attempt ${task.attempt} value $i file $afile\"\n  }\n  \"\"\"\n  read txt val < $afile\n  rv=\\$((\\$RANDOM % 10))\n  if (( \\$rv > 4 )); then       # This fails 50% of the time.\n    (echo \"attempt ${task.attempt}\"; cat $afile) > newfile.txt\n  else\n    false\n  fi\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "errorStrategy { task.attempt <= 3 ? 'retry' : 'ignore' }",
            "maxRetries 3 output: set val(i), file('newfile.txt') into ch_filter input: set val(i), file(afile) from ch_transient"
        ],
        "when": "",
        "stub": ""
    },
    "publish": {
        "name_process": "publish",
        "string_process": "\nprocess publish {\n   publishDir \"$baseDir/results\", mode: 'copy'\n\n   input:\n   set val(i), file(afile) from ch_output\n\n   output:\n   file('anotherfile.*')\n\n   script:\n   \"\"\"\n   cp $afile anotherfile.$i\n   \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "   \"\"\"\n   cp $afile anotherfile.$i\n   \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_output"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "publishDir \"$baseDir/results\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "make_file": {
        "name_process": "make_file",
        "string_process": "\nprocess make_file {\n  output: file('*.txt') into ch_f\n  script: 'for i in {00..09}; do echo \"some F $i content\" > f$i.txt; done'\n}",
        "nb_lignes_process": 3,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "make_md5_index": {
        "name_process": "make_md5_index",
        "string_process": "\nprocess make_md5_index {\n  input: file myfile from ch_g\n  output: set file('*.vcf'), file('*.md5') into ch_h\n  script:\n  \"\"\"\n  g=${myfile}\n  cp ${myfile} \\${g%.txt}.vcf\n  md5sum ${myfile} > \\${g%.txt}.md5\n  \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "  \"\"\"\n  g=${myfile}\n  cp ${myfile} \\${g%.txt}.vcf\n  md5sum ${myfile} > \\${g%.txt}.md5\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "chunk": {
        "name_process": "chunk",
        "string_process": "\nprocess chunk {\n   echo true\n\n   input:\n   set file(vcfs), file(md5s) from ch_i\n\n   script:\n   \"\"\"\n   echo \"my vcfs: ${vcfs}\"\n   echo \"my md5s: ${md5s}\"\n   \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "   \"\"\"\n   echo \"my vcfs: ${vcfs}\"\n   echo \"my md5s: ${md5s}\"\n   \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_i"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "a": {
        "name_process": "a",
        "string_process": "\nprocess a {\n   input: set val(sampid), val(x) from ch1.view()\n   output: set val(sampid), val(xx) into ch_a\n   shell: xx = x+x\n   'true'\n}",
        "nb_lignes_process": 5,
        "string_script": "'true'",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "b": {
        "name_process": "b",
        "string_process": "\nprocess b {\n   input: set val(sampid), val(x) from ch2.view()\n   output: set val(sampid), val(xx) into ch_b\n   shell: xx = x+x\n   'true'\n}",
        "nb_lignes_process": 5,
        "string_script": "'true'",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "c": {
        "name_process": "c",
        "string_process": "\nprocess c {\n   echo true\n   input: set val(sampid), val(resa), val(resb) from ch_a.join(ch_b)\n   shell: 'echo \"!{sampid} !{resa} !{resb}\"'\n}",
        "nb_lignes_process": 4,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "echo true input: set val(sampid), val(resa), val(resb) from ch_a.join(ch_b) shell: 'echo \"!{sampid} !{resa} !{resb}\"'"
        ],
        "when": "",
        "stub": ""
    },
    "blob": {
        "name_process": "blob",
        "string_process": "\nprocess blob {\n   input: file x from myfiles\n   output: stdout dummy\n\n   script:\n   \"wc -c < ${x}\"\n}",
        "nb_lignes_process": 6,
        "string_script": "   \"wc -c < ${x}\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "get_value": {
        "name_process": "get_value",
        "string_process": "\nprocess get_value {\n   echo true\n   input: val(v) from ch_value\n   output: stdout dummy2\n   script: \"echo value $v\"\n}",
        "nb_lignes_process": 5,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "echo true input: val(v) from ch_value output: stdout dummy2 script: \"echo value $v\""
        ],
        "when": "",
        "stub": ""
    },
    "get_file": {
        "name_process": "get_file",
        "string_process": "\nprocess get_file {\n   echo true\n   input: file(f) from ch_file\n   output: stdout dummy3\n   script: \"echo file $f\"\n}",
        "nb_lignes_process": 5,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "echo true input: file(f) from ch_file output: stdout dummy3 script: \"echo file $f\""
        ],
        "when": "",
        "stub": ""
    },
    "moon": {
        "name_process": "moon",
        "string_process": "\nprocess moon {\n  output: set val('moon'), file('*.txt') into ch_g\n  script: 'for i in {00..14}; do echo \"some G $i content\" > g$i.txt; done'\n}",
        "nb_lignes_process": 3,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "print_sleep": {
        "name_process": "print_sleep",
        "string_process": "\nprocess print_sleep {\n    input:\n    val foo from \"${params.in}\"\n\n    output:\n    stdout into result\n\n    script:\n    \"\"\"\n    echo ${foo} && sleep 1\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "    \"\"\"\n    echo ${foo} && sleep 1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "\"${params"
        ],
        "nb_inputs": 1,
        "outputs": [
            "result"
        ],
        "nb_outputs": 1,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "gen": {
        "name_process": "gen",
        "string_process": "\nprocess gen {\n  tag \"$sample\"\n\n  input:\n  val sample from ch_input\n  output: file('out_my/???') into ch_merge\n\n  shell:\n  '''\n  dirname=$(printf \"%03d\" !{sample})\n  mkdir -p out_my/$dirname\n  echo 'my !{sample} content' > out_my/$dirname/f!{sample}.txt\n  '''\n}",
        "nb_lignes_process": 13,
        "string_script": "  '''\n  dirname=$(printf \"%03d\" !{sample})\n  mkdir -p out_my/$dirname\n  echo 'my !{sample} content' > out_my/$dirname/f!{sample}.txt\n  '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "'out_my/???') into ch_merg"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [
            "tag \"$sample\""
        ],
        "when": "",
        "stub": ""
    },
    "process_file2": {
        "name_process": "process_file2",
        "string_process": "\nprocess process_file2 {\n  input: file(file2) from name_ch.map { file(it.text) }\n\n  script:\n  \"\"\"\n  echo I have file $file2\n  \"\"\"\n}",
        "nb_lignes_process": 7,
        "string_script": "  \"\"\"\n  echo I have file $file2\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "micans__nextflow-idioms",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
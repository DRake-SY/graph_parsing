{
    "OPERATION_1": {
        "string": "bedfiles = Channel.fromPath(params.bed + \"*.bed\")",
        "origin": [
            [
                "params.bed + \"*.bed\"",
                "A"
            ]
        ],
        "gives": [
            [
                "bedfiles",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath(pheno_file)\n    .splitCsv(header: false)\n    .set { ch_pheno }",
        "origin": [
            [
                "pheno_file",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_pheno",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "InputBedsPerChr\n    .flatMap { item ->\n        inputname = item[0];\n        files  = item[1];\n        files.collect { onefile -> \\\n        return [ inputname, \\\n        onefile, \\\n        file(model_path + \"${onefile.simpleName.replaceFirst(/chr/,'')}\" + \".annot.gz\"), \\\n        file(plink + \"${onefile.simpleName.replaceFirst(/chr/,'')}\" + \".bim\"), \\\n        file(plink + \"${onefile.simpleName.replaceFirst(/chr/,'')}\" + \".bed\"), \\\n        file(plink + \"${onefile.simpleName.replaceFirst(/chr/,'')}\" + \".fam\"), \\\n        file(hmsnps)]}\n    }\n    .set { ch_chr }",
        "origin": [
            [
                "InputBedsPerChr",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_chr",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "LDscores\n.groupTuple()\n.map { mytuple ->\n\t def key = mytuple[0]\n     def myfiles = mytuple[1].flatten()\n     return tuple(key.toString(), myfiles) \n     }\n.combine(ch_pheno)\n.set { LDscores_join }",
        "origin": [
            [
                "LDscores",
                "P"
            ],
            [
                "ch_pheno",
                "P"
            ]
        ],
        "gives": [
            [
                "LDscores_join",
                "P"
            ]
        ]
    }
}
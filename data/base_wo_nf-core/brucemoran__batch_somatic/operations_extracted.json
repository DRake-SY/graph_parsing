{
    "OPERATION_1": {
        "string": "Channel.from(params.sampleCsv, checkIfExists: true)){\n  exit 1, \"Please include --sampleCsv, see --help for format\"\n}\n\nif(!Channel.from(params.runID, checkIfExists: true)){\n    exit 1, \"Please include --runID <your_runID>\"\n}\n\nif(!Channel.from(params.refDir, checkIfExists: true)){\n  exit 1, \"Please include --refDir <path> see github.com/brucemoran/somatic_n-of-1/ for how to run download-references.nf\"\n}\n\nif(!Channel.from(params.assembly, checkIfExists: true)){\n    exit 1, \"Please include --assembly <GRCh3x>\"\n}\n\nif(!params.email){\n    exit 1, \"Please include --email your@email.com\"\n}\n\n         \nparams.outDir = \"batch_${params.seqLevel}\"\nparams.seqlevel = \"${params.seqLevel}\".toLowerCase()\n\n                                             \njavaTaskmem = { it.replace(\" GB\", \"g\") }\n\n                                                         \nreference = [\n    grchvers: false,\n    fa: false,\n    fai: false,\n    dict: false,\n    bwa: false,\n    hc_dbs: false,\n    dbsnp: false,\n    gridss: false,\n    pcgrbase: false,\n    intlist: false,\n    seqlevel: false,\n    bbres: false\n]\n\nreference.grchvers  = Channel.fromPath(\"${params.refDir}/${params.assembly}/pcgr/data/*\", type",
        "origin": [],
        "gives": []
    },
    "OPERATION_2": {
        "string": "fa = Channel.value(file(params.genomes[params.assembly].fa))",
        "origin": [],
        "gives": [
            [
                "fa",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "fai = Channel.value(file(params.genomes[params.assembly].fai))",
        "origin": [],
        "gives": [
            [
                "fai",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "dict = Channel.value(file(params.genomes[params.assembly].dict))",
        "origin": [],
        "gives": [
            [
                "dict",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "bwa = Channel.value(file(params.genomes[params.assembly].bwa))",
        "origin": [],
        "gives": [
            [
                "bwa",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "hc_dbs = Channel.value(file(params.genomes[params.assembly].hc_dbs))",
        "origin": [],
        "gives": [
            [
                "hc_dbs",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "dbsnp = Channel.value(file(params.genomes[params.assembly].dbsnp))",
        "origin": [],
        "gives": [
            [
                "dbsnp",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "gridss = Channel.value(file(params.genomes[params.assembly].gridss))",
        "origin": [],
        "gives": [
            [
                "gridss",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "pcgrbase = Channel.value(file(params.genomes[params.assembly].pcgr))",
        "origin": [],
        "gives": [
            [
                "pcgrbase",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "seqlevel = Channel.value(file(params.genomes[params.assembly].\"${params.seqlevel}\"))",
        "origin": [],
        "gives": [
            [
                "seqlevel",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "cosmic = Channel.value(file(params.genomes[params.assembly].cosmic))",
        "origin": [],
        "gives": [
            [
                "cosmic",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "intlist = Channel.fromPath(\"${params.refDir}/${params.assembly}/${params.seqlevel}/wgs.bed.interval_list\").getVal()",
        "origin": [
            [
                "\"${params.refDir}/${params.assembly}/${params.seqlevel}/wgs.bed.interval_list\"",
                "A"
            ]
        ],
        "gives": [
            [
                "intlist",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "intlist = Channel.fromPath(\"${params.refDir}/${params.assembly}/${params.seqlevel}/${params.exomeTag}.bed.interval_list\").getVal()",
        "origin": [
            [
                "\"${params.refDir}/${params.assembly}/${params.seqlevel}/${params.exomeTag}.bed.interval_list\"",
                "A"
            ]
        ],
        "gives": [
            [
                "intlist",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel.fromPath(\"$params.sampleCsv\", type: 'file')\n       .splitCsv( header: true )\n       .map { row -> [row.caseID, row.soma_sampleID, file(row.soma_read1), file(row.soma_read2), row.germ_sampleID, file(row.germ_read1), file(row.germ_read2)] }\n       .set { split_soma_germ }",
        "origin": [
            [
                "\"$params.sampleCsv\", type: 'file'",
                "A"
            ]
        ],
        "gives": [
            [
                "split_soma_germ",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "splitcsv2.splitCsv( header: true )\n         .map { row -> [row.caseID, row.type, row.sampleID, file(row.read1), file(row.read2)] }\n         .set { bbduking }",
        "origin": [
            [
                "splitcsv2",
                "P"
            ]
        ],
        "gives": [
            [
                "bbduking",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "hcbedding = hc_bedding.flatten()",
        "origin": [
            [
                "hc_bedding",
                "P"
            ]
        ],
        "gives": [
            [
                "hcbedding",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "hc_germ\n  .map { it -> [it[0],it[1],it[2],it[3],it[4]] }\n  .combine(hcbedding)\n  .set { hcgermbedding }",
        "origin": [
            [
                "hc_germ",
                "P"
            ],
            [
                "hcbedding",
                "P"
            ]
        ],
        "gives": [
            [
                "hcgermbedding",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "hc_gt\n  .groupTuple()\n  .map { it -> tuple(it[0], it[1][0], it[2][0..-1].flatten()) }\n  .set { hc_fm }",
        "origin": [
            [
                "hc_gt",
                "P"
            ]
        ],
        "gives": [
            [
                "hc_fm",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "germfiltering\n    .branch(germfilter)\n    .set { somagerm }",
        "origin": [
            [
                "germfiltering",
                "P"
            ]
        ],
        "gives": [
            [
                "somagerm",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "somafiltered\n    .map { [it[0], it[2..-1]] }\n    .tap { somatap }",
        "origin": [
            [
                "somafiltered",
                "P"
            ]
        ],
        "gives": [
            [
                "somatap",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "germfiltered\n    .map { [it[0], it[2..-1]] }\n    .tap { germtap }",
        "origin": [
            [
                "germfiltered",
                "P"
            ]
        ],
        "gives": [
            [
                "germtap",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "somatap.join(germtap).tap{ somagermtap }",
        "origin": [
            [
                "somatap",
                "P"
            ],
            [
                "germtap",
                "P"
            ]
        ],
        "gives": [
            [
                "somagermtap",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "somagermtap\n    .map { it -> tuple(it[0],\n                       it[1][0],\n                       it[1][1..2],\n                       it[2][0],\n                       it[2][1..2]).flatten() }\n    .into { mutect2somaticing; mutect2_contam; facetsomaing; mantastrelka2ing; lanceting }",
        "origin": [
            [
                "somagermtap",
                "P"
            ]
        ],
        "gives": [
            [
                "mutect2somaticing",
                "P"
            ],
            [
                "mutect2_contam",
                "P"
            ],
            [
                "facetsomaing",
                "P"
            ],
            [
                "mantastrelka2ing",
                "P"
            ],
            [
                "lanceting",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "mutect2bedding = mutect2_bedding.flatten()",
        "origin": [
            [
                "mutect2_bedding",
                "P"
            ]
        ],
        "gives": [
            [
                "mutect2bedding",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "mutect2somaticing\n  .map { it -> [it[0],it[1],it[2],it[3],it[4],it[5],it[6]]}\n  .combine(mutect2bedding)\n  .set { mutect2somaticbedding }",
        "origin": [
            [
                "mutect2somaticing",
                "P"
            ],
            [
                "mutect2bedding",
                "P"
            ]
        ],
        "gives": [
            [
                "mutect2somaticbedding",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "mutect2_gt\n  .groupTuple()\n  .map { it -> tuple(it[0], it[1][0], it[2][0..-1].flatten()) }\n  .set { mutect2_fm }",
        "origin": [
            [
                "mutect2_gt",
                "P"
            ]
        ],
        "gives": [
            [
                "mutect2_fm",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "mutect2_st\n  .groupTuple()\n  .map { it -> tuple(it[0], it[1][0], it[2][0..-1].flatten()) }\n  .set { mutect2_sm }",
        "origin": [
            [
                "mutect2_st",
                "P"
            ]
        ],
        "gives": [
            [
                "mutect2_sm",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "mutect2_f1r2.groupTuple()\n            .map { it -> [it[0], it[1][0], it[2..-1].flatten()] }\n            .set { mutect2_f1r2_set }PROCESS DEF mutct2_f1r2_comb",
        "origin": [
            [
                "mutect2_f1r2",
                "P"
            ]
        ],
        "gives": [
            [
                "mutect2_f1r2_set",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "mutect2_contam\n  .join(mutect2_merge)    \n  .join(mutect2_stats)    \n  .join(mutect2_f1r2_comb)    \n  .groupTuple()\n  .map { it -> [it[0], it[1][0], it[2][0], it[3][0], it[4][0], it[5][0], it[6][0], it[8][0], it[10][0], it[12][0]].flatten() }\n  .set { mutect2_contam_merge }",
        "origin": [
            [
                "mutect2_contam",
                "P"
            ],
            [
                "mutect2_merge",
                "P"
            ],
            [
                "mutect2_stats",
                "P"
            ],
            [
                "mutect2_f1r2_comb",
                "P"
            ]
        ],
        "gives": [
            [
                "mutect2_contam_merge",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "lancetbedding = lancet_bedding.flatten()",
        "origin": [
            [
                "lancet_bedding",
                "P"
            ]
        ],
        "gives": [
            [
                "lancetbedding",
                "P"
            ]
        ]
    },
    "OPERATION_31": {
        "string": "lanceting\n  .map { it -> [it[0],it[1],it[2],it[3],it[4],it[5],it[6]]}\n  .combine(lancetbedding)\n  .set { lancetsbedding }",
        "origin": [
            [
                "lanceting",
                "P"
            ],
            [
                "lancetbedding",
                "P"
            ]
        ],
        "gives": [
            [
                "lancetsbedding",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "lancet_gt\n  .groupTuple()\n  .map { it -> tuple(it[0], it[1][0], it[2][0..-1].flatten()) }\n  .set { lancet_fm }",
        "origin": [
            [
                "lancet_gt",
                "P"
            ]
        ],
        "gives": [
            [
                "lancet_fm",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "lancet_veping\n  .join( mutect2_veping )\n  .join( strelka2_veping )\n  .groupTuple()\n  .map { it -> [it[0], it[1][0], it[2][0], it[3][0]].flatten() }\n  .set { case_veping }",
        "origin": [
            [
                "lancet_veping",
                "P"
            ],
            [
                "mutect2_veping",
                "P"
            ],
            [
                "strelka2_veping",
                "P"
            ]
        ],
        "gives": [
            [
                "case_veping",
                "P"
            ]
        ]
    },
    "OPERATION_34": {
        "string": "runGRanges\n  .join(mutect2_rawVcf)\n  .join(strelka2_rawVcf)\n  .join(lancet_rawVcf)\n  .groupTuple()\n  .map { it -> [it[0], it[1][0], it[1][1], it[1][2], it[2], it[3], it[4]] }\n  .set { cons_vcfs }",
        "origin": [
            [
                "runGRanges",
                "P"
            ],
            [
                "mutect2_rawVcf",
                "P"
            ],
            [
                "strelka2_rawVcf",
                "P"
            ],
            [
                "lancet_rawVcf",
                "P"
            ]
        ],
        "gives": [
            [
                "cons_vcfs",
                "P"
            ]
        ]
    },
    "OPERATION_35": {
        "string": "snvpass_pcgr\n  .join(facets_pcgr)\n  .set { pcgr_inputs }",
        "origin": [
            [
                "snvpass_pcgr",
                "P"
            ],
            [
                "facets_pcgr",
                "P"
            ]
        ],
        "gives": [
            [
                "pcgr_inputs",
                "P"
            ]
        ]
    }
}
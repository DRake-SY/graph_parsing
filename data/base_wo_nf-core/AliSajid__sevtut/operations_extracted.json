{
    "OPERATION_1": {
        "string": "Channel\n      .fromPath(params.query)\n      .splitFasta(by: params.chunkSize, file: true)\n      .set { queryFile_ch }",
        "origin": [
            [
                "params.query",
                "A"
            ]
        ],
        "gives": [
            [
                "queryFile_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "genomefile_ch = Channel\n                  .fromPath(params.genome)\n                  .map { file -> tuple(file.simpleName, file.parent, file) }",
        "origin": [
            [
                "params.genome",
                "A"
            ]
        ],
        "gives": [
            [
                "genomefile_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n      .fromPath(params.dbDir)\n      .set{dbDir_ch}",
        "origin": [
            [
                "params.dbDir",
                "A"
            ]
        ],
        "gives": [
            [
                "dbDir_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n   .from(params.dbName)\n   .set{dbName_ch}",
        "origin": [
            [
                "params.dbName",
                "V"
            ]
        ],
        "gives": [
            [
                "dbName_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "blast_output_ch\n.collectFile(name: 'blast_output_combined.txt', storeDir: params.outdir)",
        "origin": [
            [
                "blast_output_ch",
                "P"
            ]
        ],
        "gives": []
    }
}
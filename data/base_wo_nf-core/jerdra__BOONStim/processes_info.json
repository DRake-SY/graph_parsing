{
    "grid_optimization": {
        "name_process": "grid_optimization",
        "string_process": "\nprocess grid_optimization{\n\n    stageInMode 'copy'\n    label 'rtms'\n    containerOptions \"-B ${params.bin}:/scripts\"\n\n    input:\n    tuple val(sub), path(msh),\\\n    path(weights), path(centroid), path(coil)\n\n    output:\n    tuple val(sub), path(\"${sub}_orientation.txt\"), emit: orientation\n    tuple val(sub), path(\"${sub}_history.txt\"), emit: history\n\n    shell:\n    '''\n    #!/bin/bash\n\n    /scripts/gridopt_fem.py !{msh} !{weights} !{centroid} \\\n                            !{coil} \\\n                            $(pwd)/!{sub}_orientation.txt \\\n                            !{params.positional_grid_num} \\\n                            !{params.rotational_grid_num} \\\n                            --history !{sub}_history.txt \\\n                            --workdir $(pwd) \\\n                            --ncpus !{params.grid_cpus} \\\n                            --batchsize !{params.batch_size}\n    '''\n}",
        "nb_lignes_process": 28,
        "string_script": "    '''\n    #!/bin/bash\n\n    /scripts/gridopt_fem.py !{msh} !{weights} !{centroid} \\\n                            !{coil} \\\n                            $(pwd)/!{sub}_orientation.txt \\\n                            !{params.positional_grid_num} \\\n                            !{params.rotational_grid_num} \\\n                            --history !{sub}_history.txt \\\n                            --workdir $(pwd) \\\n                            --ncpus !{params.grid_cpus} \\\n                            --batchsize !{params.batch_size}\n    '''",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "msh",
            "weights",
            "centroid",
            "coil"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "stageInMode 'copy'",
            "label 'rtms'",
            "containerOptions \"-B ${params.bin}:/scripts\""
        ],
        "when": "",
        "stub": ""
    },
    "split_dscalar": {
        "name_process": "split_dscalar",
        "string_process": "\nprocess split_dscalar {\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), path(dscalar)\n\n    output:\n    tuple val(sub), val('L'), path('L.shape.gii'), emit: left\n    tuple val(sub), val('R'), path('R.shape.gii'), emit: right\n\n    shell:\n    '''\n    wb_command -cifti-separate \\\n                !{dscalar} \\\n                COLUMN \\\n                -metric CORTEX_LEFT L.shape.gii \\\n                -metric CORTEX_RIGHT R.shape.gii\n    '''\n\n\n}",
        "nb_lignes_process": 21,
        "string_script": "    '''\n    wb_command -cifti-separate \\\n                !{dscalar} \\\n                COLUMN \\\n                -metric CORTEX_LEFT L.shape.gii \\\n                -metric CORTEX_RIGHT R.shape.gii\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "dscalar"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "resample_surf": {
        "name_process": "resample_surf",
        "string_process": "\nprocess resample_surf{\n\n    label 'connectome'\n\n    input:\n    tuple val(id), val(hemi), path(shape), path(source_sphere), path(target_sphere)\n\n    output:\n    tuple val(id), val(hemi), path(\"resampled_shape.${hemi}.shape.gii\"), emit: resampled\n\n    shell:\n    '''\n    wb_command -metric-resample \\\n                !{shape} \\\n                !{target_sphere} \\\n                !{source_sphere} \\\n                BARYCENTRIC \\\n                resampled_shape.!{hemi}.shape.gii\n    '''\n\n\n}",
        "nb_lignes_process": 21,
        "string_script": "    '''\n    wb_command -metric-resample \\\n                !{shape} \\\n                !{target_sphere} \\\n                !{source_sphere} \\\n                BARYCENTRIC \\\n                resampled_shape.!{hemi}.shape.gii\n    '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "hemi",
            "shape",
            "source_sphere",
            "target_sphere"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "recombine": {
        "name_process": "recombine",
        "string_process": "\nprocess recombine {\n\n    label 'connectome'\n\n    input:\n    tuple val(id), path(left), path(right)\n\n    output:\n    tuple val(id), path(\"resampled_dscalar.nii\"), emit: dscalar\n\n    shell:\n    '''\n    wb_command -cifti-create-dense-scalar \\\n                 resampled_dscalar.nii \\\n                -left-metric !{left} \\\n                -right-metric !{right}\n    '''\n\n\n}",
        "nb_lignes_process": 19,
        "string_script": "    '''\n    wb_command -cifti-create-dense-scalar \\\n                 resampled_dscalar.nii \\\n                -left-metric !{left} \\\n                -right-metric !{right}\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "left",
            "right"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "convert_pial_to_metric": {
        "name_process": "convert_pial_to_metric",
        "string_process": "\nprocess convert_pial_to_metric{\n\n    label 'connectome'\n    input:\n    tuple val(sub), val(hemi), path(pial)\n\n    output:\n    tuple val(sub), val(hemi),\\\n    path(\"${sub}.${hemi}.pial_coordinates.shape.gii\"),\\\n    emit: shape_coords\n\n    shell:\n    '''\n\n    wb_command -surface-coordinates-to-metric \\\n        !{pial} \\\n        !{sub}.!{hemi}.pial_coordinates.shape.gii\n\n    '''\n}",
        "nb_lignes_process": 19,
        "string_script": "    '''\n\n    wb_command -surface-coordinates-to-metric \\\n        !{pial} \\\n        !{sub}.!{hemi}.pial_coordinates.shape.gii\n\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "pial"
        ],
        "nb_inputs": 3,
        "outputs": [
            "hemi"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "join_surface_coordinates": {
        "name_process": "join_surface_coordinates",
        "string_process": "\nprocess join_surface_coordinates{\n\n    label 'connectome'\n    input:\n    tuple val(sub), path(L), path(R)\n\n    output:\n    tuple val(sub), path(\"${sub}.cifti_coords.dscalar.nii\"), emit: cifti_coords\n\n    shell:\n    '''\n\n    wb_command -cifti-create-dense-scalar \\\n        -left-metric !{L} -right-metric !{R} \\\n        !{sub}.cifti_coords.dscalar.nii\n\n    '''\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n\n    wb_command -cifti-create-dense-scalar \\\n        -left-metric !{L} -right-metric !{R} \\\n        !{sub}.cifti_coords.dscalar.nii\n\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "L",
            "R"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "average_coordinate": {
        "name_process": "average_coordinate",
        "string_process": "\nprocess average_coordinate{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), path(coords), path(roi),\\\n    val(index), val(ori)\n\n    output:\n    tuple val(sub), val(ori), path(\"${ori}.txt\"), emit: avg_coord\n\n    shell:\n    '''\n\n    # Apply the ROI mask to the CIFTI data\n    wb_command -cifti-math \\\n        \"x*y\" \\\n        -var \"x\" !{coords} \\\n        -select 1 !{index} \\\n        -var \"y\" !{roi} \\\n        !{ori}.dscalar.nii\n\n    # Calculate the average coordinate within the centroid\n    wb_command -cifti-roi-average \\\n        !{ori}.dscalar.nii \\\n        -cifti-roi !{roi} \\\n        !{ori}.txt\n    '''\n}",
        "nb_lignes_process": 28,
        "string_script": "    '''\n\n    # Apply the ROI mask to the CIFTI data\n    wb_command -cifti-math \\\n        \"x*y\" \\\n        -var \"x\" !{coords} \\\n        -select 1 !{index} \\\n        -var \"y\" !{roi} \\\n        !{ori}.dscalar.nii\n\n    # Calculate the average coordinate within the centroid\n    wb_command -cifti-roi-average \\\n        !{ori}.dscalar.nii \\\n        -cifti-roi !{roi} \\\n        !{ori}.txt\n    '''",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "coords",
            "roi",
            "index",
            "ori"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "make_centroid": {
        "name_process": "make_centroid",
        "string_process": "\nprocess make_centroid{\n\n    input:\n    tuple val(uuid), path(x), path(y), path(z)\n\n    output:\n    tuple val(uuid), path(\"${uuid}.roi_centroid.txt\"), emit: centroid\n\n    shell:\n    '''\n    paste -d '\\n' !{x} !{y} !{z} > !{uuid}.roi_centroid.txt\n    '''\n\n}",
        "nb_lignes_process": 13,
        "string_script": "    '''\n    paste -d '\\n' !{x} !{y} !{z} > !{uuid}.roi_centroid.txt\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "uuid",
            "x",
            "y",
            "z"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "threshold_roi": {
        "name_process": "threshold_roi",
        "string_process": "\nprocess threshold_roi{\n\n    label 'connectome'\n\n    input:\n    tuple val(uuid), path(roi)\n\n    output:\n    tuple val(uuid), path(\"${uuid}.roi_thresholded.dscalar.nii\"), emit: mask\n\n    shell:\n    '''\n    #!/bin/bash\n\n    wb_command -cifti-math \"x > 0.5\" -var \"x\" !{roi} \\\n                            !{uuid}.roi_thresholded.dscalar.nii\n    '''\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    #!/bin/bash\n\n    wb_command -cifti-math \"x > 0.5\" -var \"x\" !{roi} \\\n                            !{uuid}.roi_thresholded.dscalar.nii\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "uuid",
            "roi"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "calculate_roi2cortex": {
        "name_process": "calculate_roi2cortex",
        "string_process": "\nprocess calculate_roi2cortex{\n\n    label 'rtms'\n    input:\n    tuple val(uuid), path(mesh), path(centroid)\n\n    output:\n    tuple val(uuid), path(\"${uuid}.roi_distance.npy\"), emit: distance\n\n    shell:\n    '''\n    /scripts/get_cortex_to_scalp.py !{mesh} --roi !{centroid} !{uuid}.roi_distance.npy\n    '''\n}",
        "nb_lignes_process": 13,
        "string_script": "    '''\n    /scripts/get_cortex_to_scalp.py !{mesh} --roi !{centroid} !{uuid}.roi_distance.npy\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "uuid",
            "mesh",
            "centroid"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "get_cortical_distance_masked": {
        "name_process": "get_cortical_distance_masked",
        "string_process": "\nprocess get_cortical_distance_masked{\n\n    label 'rtms'\n    input:\n    tuple val(uuid), path(mesh), path(left_surf), path(right_surf), path(roi)\n\n    output:\n    tuple val(uuid), path(\"${uuid}.roi_distance.txt\"), emit: distance\n\n    shell:\n    '''\n    /scripts/cortical_distance.py !{mesh} !{left_surf} !{right_surf} \\\n                                  --roi !{roi} \\\n                                  !{uuid}.roi_distance.txt\n    '''\n\n}",
        "nb_lignes_process": 16,
        "string_script": "    '''\n    /scripts/cortical_distance.py !{mesh} !{left_surf} !{right_surf} \\\n                                  --roi !{roi} \\\n                                  !{uuid}.roi_distance.txt\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "uuid",
            "mesh",
            "left_surf",
            "right_surf",
            "roi"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "get_cortical_distance": {
        "name_process": "get_cortical_distance",
        "string_process": "\nprocess get_cortical_distance{\n\n    label 'rtms'\n    input:\n    tuple val(uuid), path(mesh), path(left_surf), path(right_surf), path(coilcentre)\n\n    output:\n    tuple val(uuid), path(\"${uuid}.coil_distance.txt\"), emit: distance\n\n    shell:\n    '''\n    /scripts/cortical_distance.py !{mesh} !{left_surf} !{right_surf} \\\n                                  --coilcentre !{coilcentre} \\\n                                  !{uuid}.coil_distance.txt\n    '''\n\n\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    /scripts/cortical_distance.py !{mesh} !{left_surf} !{right_surf} \\\n                                  --coilcentre !{coilcentre} \\\n                                  !{uuid}.coil_distance.txt\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "uuid",
            "mesh",
            "left_surf",
            "right_surf",
            "coilcentre"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "calculate_coil2cortex": {
        "name_process": "calculate_coil2cortex",
        "string_process": "\nprocess calculate_coil2cortex{\n\n    label 'rtms'\n    input:\n    tuple val(uuid), path(mesh), path(coil_centre)\n\n    output:\n    tuple val(uuid), path(\"${uuid}.coil_distance.npy\"), emit: distance\n\n    shell:\n    '''\n    /scripts/get_cortex_to_scalp.py !{mesh} --coilcentre !{coil_centre} \\\n                                    !{uuid}.coil_distance.txt\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    /scripts/get_cortex_to_scalp.py !{mesh} --coilcentre !{coil_centre} \\\n                                    !{uuid}.coil_distance.txt\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "uuid",
            "mesh",
            "coil_centre"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "get_ratio": {
        "name_process": "get_ratio",
        "string_process": "\nprocess get_ratio{\n\n    label 'rtms'\n    input:\n    tuple val(sub), path(cortex2scalp), path(coil2cortex)\n\n    output:\n    tuple val(sub), path(\"${sub}.scaling_factor.txt\"), emit: scaling_factor\n\n    shell:\n    '''\n    #!/usr/bin/env python\n\n    import numpy as np\n\n    c2s = np.genfromtxt(\"!{cortex2scalp}\")\n    c2c = np.genfromtxt(\"!{coil2cortex}\")\n    ratio = c2c/c2s * 100\n\n    to_write = f\"{ratio:.2f}\" + \"\\\\n\"\n    with open(\"!{sub}.scaling_factor.txt\",\"w\") as f:\n        f.write(to_write)\n\n    '''\n}",
        "nb_lignes_process": 24,
        "string_script": "    '''\n    #!/usr/bin/env python\n\n    import numpy as np\n\n    c2s = np.genfromtxt(\"!{cortex2scalp}\")\n    c2c = np.genfromtxt(\"!{coil2cortex}\")\n    ratio = c2c/c2s * 100\n\n    to_write = f\"{ratio:.2f}\" + \"\\\\n\"\n    with open(\"!{sub}.scaling_factor.txt\",\"w\") as f:\n        f.write(to_write)\n\n    '''",
        "nb_lignes_script": 13,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "cortex2scalp",
            "coil2cortex"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "get_stokes_cf": {
        "name_process": "get_stokes_cf",
        "string_process": "\nprocess get_stokes_cf{\n\n    label 'rtms'\n    input:\n    tuple val(uuid), path(cortex2scalp), path(coil2cortex)\n\n    output:\n    tuple val(uuid), path(\"${uuid}.stokes_correction.txt\"), emit: stokes_correction\n\n    shell:\n    '''\n    #!/usr/bin/env python\n\n    import numpy as np\n\n    c2s = np.genfromtxt(\"!{cortex2scalp}\")\n    c2c = np.genfromtxt(\"!{coil2cortex}\")\n    cf = 2.8*(c2c - c2s)\n\n    to_write = f\"{cf:.2f}\" + \"\\\\n\"\n    with open(\"!{uuid}.stokes_correction.txt\",\"w\") as f:\n        f.write(to_write)\n    '''\n}",
        "nb_lignes_process": 23,
        "string_script": "    '''\n    #!/usr/bin/env python\n\n    import numpy as np\n\n    c2s = np.genfromtxt(\"!{cortex2scalp}\")\n    c2c = np.genfromtxt(\"!{coil2cortex}\")\n    cf = 2.8*(c2c - c2s)\n\n    to_write = f\"{cf:.2f}\" + \"\\\\n\"\n    with open(\"!{uuid}.stokes_correction.txt\",\"w\") as f:\n        f.write(to_write)\n    '''",
        "nb_lignes_script": 12,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "uuid",
            "cortex2scalp",
            "coil2cortex"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "matsimnibs2centre": {
        "name_process": "matsimnibs2centre",
        "string_process": "\nprocess matsimnibs2centre{\n\n    label 'rtms'\n    input:\n    tuple val(uuid), path(matsimnibs)\n\n    output:\n    tuple val(uuid), path(\"${uuid}_coilcentre.txt\"), emit: coil_centre\n\n    shell:\n    '''\n    #!/usr/bin/env python\n    import numpy as np\n\n    matsimnibs = np.load(\"!{matsimnibs}\")\n    coil_centre = matsimnibs[:3,-1]\n    np.savetxt(\"!{uuid}_coilcentre.txt\", coil_centre)\n    '''\n}",
        "nb_lignes_process": 18,
        "string_script": "    '''\n    #!/usr/bin/env python\n    import numpy as np\n\n    matsimnibs = np.load(\"!{matsimnibs}\")\n    coil_centre = matsimnibs[:3,-1]\n    np.savetxt(\"!{uuid}_coilcentre.txt\", coil_centre)\n    '''",
        "nb_lignes_script": 7,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "uuid",
            "matsimnibs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "qc_cortical_distance": {
        "name_process": "qc_cortical_distance",
        "string_process": "\nprocess qc_cortical_distance{\n\n    label 'rtms'\n    input:\n    tuple val(uuid), path(mesh), path(left_surf), path(right_surf),\\\n    path(coil), path(mask)\n\n    output:\n    tuple val(uuid), path(\"${uuid}_distqc.geo\"), emit: qc_geo\n    tuple val(uuid), path(\"${uuid}_distqc.html\"), emit: qc_html\n\n    shell:\n    '''\n    /scripts/cortical_distance.py !{mesh} !{left_surf} !{right_surf} \\\n                                !{uuid}_distqc.geo \\\n                                --coilcentre !{coil} --roi !{mask} \\\n                                --gmsh-qc /geo/dist.geo \\\n                                --html-qc !{uuid}_distqc.html\n    '''\n}",
        "nb_lignes_process": 19,
        "string_script": "    '''\n    /scripts/cortical_distance.py !{mesh} !{left_surf} !{right_surf} \\\n                                !{uuid}_distqc.geo \\\n                                --coilcentre !{coil} --roi !{mask} \\\n                                --gmsh-qc /geo/dist.geo \\\n                                --html-qc !{uuid}_distqc.html\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "uuid",
            "mesh",
            "left_surf",
            "right_surf",
            "coil",
            "mask"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "bayesian_optimization": {
        "name_process": "bayesian_optimization",
        "string_process": "\nprocess bayesian_optimization{\n\n    stageInMode 'copy'\n    label 'rtms'\n    containerOptions \"-B ${params.bin}:/scripts\"\n\n    input:\n    tuple val(sub), path(msh), path(weights),\\\n          path(centroid), path(coil)\n\n    output:\n    tuple val(sub), path(\"${sub}_orientation.txt\"), emit: orientation\n    tuple val(sub), path(\"${sub}_history.txt\"), emit: history\n\n    shell:\n    '''\n    /scripts/optimize_fem.py !{msh} !{weights} !{centroid} \\\n                             !{coil} \\\n                             !{sub}_orientation.txt \\\n                             --history !{sub}_history.txt \\\n                             --n-iters !{params.max_iters} \\\n                             --cpus !{params.bayes_cpus.intdiv(2) - 2} \\\n                             --tmp-dir $(pwd)\n    '''\n}",
        "nb_lignes_process": 24,
        "string_script": "    '''\n    /scripts/optimize_fem.py !{msh} !{weights} !{centroid} \\\n                             !{coil} \\\n                             !{sub}_orientation.txt \\\n                             --history !{sub}_history.txt \\\n                             --n-iters !{params.max_iters} \\\n                             --cpus !{params.bayes_cpus.intdiv(2) - 2} \\\n                             --tmp-dir $(pwd)\n    '''",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "msh",
            "weights",
            "centroid",
            "coil"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "stageInMode 'copy'",
            "label 'rtms'",
            "containerOptions \"-B ${params.bin}:/scripts\""
        ],
        "when": "",
        "stub": ""
    },
    "publish_base": {
        "name_process": "publish_base",
        "string_process": "\nprocess publish_base{\n\n    publishDir path: \"${params.out}/boonstim/${sub}\", \\\n               mode: 'move', \\\n               overwrite: true\n\n    input:\n    tuple val(sub),\\\n    path(t1fs), path(centroid),\\\n    path(fem), path(dscalar)\n\n    output:\n    tuple path(t1fs), path(centroid),\\\n    path(fem), path(dscalar),\\\n    emit: base_out\n\n    shell:\n    '''\n    #!/bin/bash\n\n    echo \"Moving files into boonstim/!{sub}...\"\n    '''\n\n}",
        "nb_lignes_process": 23,
        "string_script": "    '''\n    #!/bin/bash\n\n    echo \"Moving files into boonstim/!{sub}...\"\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "t1fs",
            "centroid",
            "fem",
            "dscalar"
        ],
        "nb_inputs": 5,
        "outputs": [
            "centroid"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "publishDir path: \"${params.out}/boonstim/${sub}\", mode: 'move', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "publish_surfs": {
        "name_process": "publish_surfs",
        "string_process": "\nprocess publish_surfs{\n\n    publishDir path: \"${params.out}/boonstim/${sub}/T1w\", \\\n               mode: 'move', \\\n               overwrite: true\n\n    input:\n    tuple val(sub),\\\n    path(pl), path(pr),\\\n    path(wl), path(wr),\\\n    path(ml), path(mr),\\\n    path(msml), path(msmr)\n\n    output:\n    tuple path(pl), path(pr),\\\n    path(wl), path(wr),\\\n    path(ml), path(mr),\\\n    path(msml), path(msmr), emit: surfs_out\n\n    shell:\n    '''\n    #!/bin/bash\n    echo \"Transferring surfaces to boonstim/!{sub}/T1w...\"\n    '''\n\n}",
        "nb_lignes_process": 25,
        "string_script": "    '''\n    #!/bin/bash\n    echo \"Transferring surfaces to boonstim/!{sub}/T1w...\"\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "pl",
            "pr",
            "wl",
            "wr",
            "ml",
            "mr",
            "msml",
            "msmr"
        ],
        "nb_inputs": 9,
        "outputs": [
            "pr",
            "wr",
            "mr"
        ],
        "nb_outputs": 3,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "publishDir path: \"${params.out}/boonstim/${sub}/T1w\", mode: 'move', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "publish_mri2mesh": {
        "name_process": "publish_mri2mesh",
        "string_process": "\nprocess publish_mri2mesh{\n\n    publishDir path: \"${params.out}/boonstim/${sub}\", \\\n               mode: 'move', \\\n               overwrite: true\n\n    input:\n    tuple val(sub),\\\n    path(m2m), path(fs)\n\n    output:\n    tuple val(sub), path(m2m), path(fs)\n\n    shell:\n    '''\n    #!/bin/bash\n    echo \"Transferring !{m2m} and !{fs} to boonstim/!{sub} folder...\"\n    '''\n}",
        "nb_lignes_process": 18,
        "string_script": "    '''\n    #!/bin/bash\n    echo \"Transferring !{m2m} and !{fs} to boonstim/!{sub} folder...\"\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "m2m",
            "fs"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sub"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "publishDir path: \"${params.out}/boonstim/${sub}\", mode: 'move', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "publish_opt": {
        "name_process": "publish_opt",
        "string_process": "\nprocess publish_opt{\n\n    publishDir path: \"${params.out}/boonstim/${sub}/results\", \\\n               mode: 'move', \\\n               overwrite: true\n\n    input:\n    tuple val(sub),\\\n    path(fields), path(coil), path(history),\\\n    path(brainsight), path(localite)\n\n    output:\n    tuple path(fields), path(coil), path(history),\\\n    path(brainsight), path(localite)\n\n    shell:\n    '''\n    #!/bin/bash\n    echo \"Transferring optimization results to boonstim/!{sub}/results...\"\n    '''\n}",
        "nb_lignes_process": 20,
        "string_script": "    '''\n    #!/bin/bash\n    echo \"Transferring optimization results to boonstim/!{sub}/results...\"\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "fields",
            "coil",
            "history",
            "brainsight",
            "localite"
        ],
        "nb_inputs": 6,
        "outputs": [
            "history",
            "localite"
        ],
        "nb_outputs": 2,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "publishDir path: \"${params.out}/boonstim/${sub}/results\", mode: 'move', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "publish_scaleref": {
        "name_process": "publish_scaleref",
        "string_process": "\nprocess publish_scaleref{\n\n    publishDir path: \"${params.out}/boonstim/${sub}/results\", \\\n               pattern: \"${sub}.${name}*\", \\\n               mode: 'move', \\\n               overwrite: true\n\n    input:\n    tuple val(sub),\\\n    val(name), path(factor), path(html), path(geo)\n\n    output:\n    tuple val(sub), path(\"${sub}.${name}*\")\n\n    shell:\n    '''\n    echo \"Moving stimulation scaling factor values into boonstim/!{sub}...\"\n    cp !{factor} \"!{sub}.!{name}_scalefactor.txt\"\n    cp !{html} \"!{sub}.!{name}_qc.html\"\n    cp !{geo} \"!{sub}.!{name}_qc.geo\"\n    '''\n\n}",
        "nb_lignes_process": 22,
        "string_script": "    '''\n    echo \"Moving stimulation scaling factor values into boonstim/!{sub}...\"\n    cp !{factor} \"!{sub}.!{name}_scalefactor.txt\"\n    cp !{html} \"!{sub}.!{name}_qc.html\"\n    cp !{geo} \"!{sub}.!{name}_qc.geo\"\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "name",
            "factor",
            "html",
            "geo"
        ],
        "nb_inputs": 5,
        "outputs": [
            "sub"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "publishDir path: \"${params.out}/boonstim/${sub}/results\", pattern: \"${sub}.${name}*\", mode: 'move', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "publish_cifti": {
        "name_process": "publish_cifti",
        "string_process": "\nprocess publish_cifti{\n\n    stageInMode 'copy'\n\n    publishDir path: \"$params.out\",\\\n               mode: 'move'\n\n    input:\n    tuple val(sub),\\\n    path(\"ciftify/${sub}\"), path(\"ciftify/qc_fmri/*\"),\\\n    path(\"ciftify/qc_recon_all/${sub}\"),\\\n    path(\"fmriprep/*\"), path(html),\\\n    path(\"freesurfer/*\"),\\\n    path(\"ciftify/zz_templates\")\n\n    output:\n    tuple path(\"ciftify/${sub}\"),\n    path(\"ciftify/qc_fmri/${sub}*\", includeInputs: true),\\\n    path(\"ciftify/qc_recon_all/${sub}\"),\\\n    path(\"fmriprep/${sub}\"), path(\"fmriprep/${sub}.html\"),\\\n    path(\"freesurfer/${sub}\"), path(\"ciftify/zz_templates\")\n\n    shell:\n    '''\n    echo \"Copying fMRIPrep_Ciftify outputs\"\n    mv !{html} fmriprep/\n\n    '''\n}",
        "nb_lignes_process": 28,
        "string_script": "    '''\n    echo \"Copying fMRIPrep_Ciftify outputs\"\n    mv !{html} fmriprep/\n\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "html"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "stageInMode 'copy'",
            "publishDir path: \"$params.out\", mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "calc_distmap_from_coord": {
        "name_process": "calc_distmap_from_coord",
        "string_process": "\nprocess calc_distmap_from_coord{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi),\\\n    val(name), val(x), val(y), val(z),\\\n    path(surf)\n\n    output:\n    tuple val(sub), val(hemi),  val(name),\\\n    path(\"${sub}.${hemi}.${name}_distmap.shape.gii\"), emit: dist_shape\n\n    shell:\n    '''\n    #Convert surfs --> metric\n    wb_command -surface-coordinates-to-metric !{surf} surf.shape.gii\n\n    # Subtract component\n    wb_command -metric-math \"x-!{x}\" -var x surf.shape.gii -column \"x coordinate\" xdist.shape.gii\n    wb_command -metric-math \"x-!{y}\" -var x surf.shape.gii -column \"y coordinate\" ydist.shape.gii\n    wb_command -metric-math \"x-!{z}\" -var x surf.shape.gii -column \"z coordinate\" zdist.shape.gii\n\n    # Compute euclidean distance\n    wb_command -metric-math \\\n        \"sqrt( x^2 + y^2 + z^2 )\" \\\n        -var x xdist.shape.gii \\\n        -var y ydist.shape.gii \\\n        -var z zdist.shape.gii \\\n        !{sub}.!{hemi}.!{name}_distmap.shape.gii\n    '''\n}",
        "nb_lignes_process": 31,
        "string_script": "    '''\n    #Convert surfs --> metric\n    wb_command -surface-coordinates-to-metric !{surf} surf.shape.gii\n\n    # Subtract component\n    wb_command -metric-math \"x-!{x}\" -var x surf.shape.gii -column \"x coordinate\" xdist.shape.gii\n    wb_command -metric-math \"x-!{y}\" -var x surf.shape.gii -column \"y coordinate\" ydist.shape.gii\n    wb_command -metric-math \"x-!{z}\" -var x surf.shape.gii -column \"z coordinate\" zdist.shape.gii\n\n    # Compute euclidean distance\n    wb_command -metric-math \\\n        \"sqrt( x^2 + y^2 + z^2 )\" \\\n        -var x xdist.shape.gii \\\n        -var y ydist.shape.gii \\\n        -var z zdist.shape.gii \\\n        !{sub}.!{hemi}.!{name}_distmap.shape.gii\n    '''",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "SymMetric"
        ],
        "tools_url": [
            "https://bio.tools/symmetric"
        ],
        "tools_dico": [
            {
                "name": "SymMetric",
                "uri": "https://bio.tools/symmetric",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3318",
                            "term": "Physics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Experimental medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Clinical medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Biomedical research"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computer-assisted craniometric evaluation for diagnosis and follow-up of craniofacial asymmetries.\n\nThe current assessment of patients with craniofacial asymmetries is accomplished by physical examination, anamnesis and radiological imaging. We propose a semi-automated, computer-assisted craniofacial evaluation (SymMetric v 1.0) based on orthogonal photography of the patient's head in 3 positions. The system is simple, low-cost, no-radiation or special resources needed. Although it does not substitute CT in cases of doubt between craniosynostosis and positional plagiocephaly, multiple numeric evaluations indicate regional deformities and severity of the asymmetry, which can help in the clinical decision of indicating or not the orthosis in positional deformities, determining treatment duration or evaluating surgical outcomes after correction.",
                "homepage": "https://github.com/ealho/SymMetric_v1.0"
            }
        ],
        "inputs": [
            "sub",
            "hemi",
            "name",
            "x",
            "y",
            "z",
            "surf"
        ],
        "nb_inputs": 7,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "join_distmaps": {
        "name_process": "join_distmaps",
        "string_process": "\nprocess join_distmaps{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(name), path(L), path(R)\n\n    output:\n    tuple val(sub), val(name),\\\n    path(\"${sub}.${name}_distmap.dscalar.nii\"), emit: dist_dscalar\n\n    shell:\n    '''\n    wb_command -cifti-create-dense-scalar \\\n        !{sub}.!{name}_distmap.dscalar.nii \\\n        -left-metric !{L} \\\n        -right-metric !{R}\n    '''\n\n}",
        "nb_lignes_process": 19,
        "string_script": "    '''\n    wb_command -cifti-create-dense-scalar \\\n        !{sub}.!{name}_distmap.dscalar.nii \\\n        -left-metric !{L} \\\n        -right-metric !{R}\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "name",
            "L",
            "R"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "threshold_distmap": {
        "name_process": "threshold_distmap",
        "string_process": "\nprocess threshold_distmap {\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(name), path(distmap), val(thres)\n\n    output:\n    tuple val(sub), val(name),\\\n    path(\"${sub}.${name}_distmap_roi.dscalar.nii\"), emit: distmap_roi\n\n    shell:\n    '''\n    wb_command -cifti-math \\\n        \"x < !{thres}\" \\\n        -var x !{distmap} \\\n        !{sub}.!{name}_distmap_roi.dscalar.nii\n    '''\n\n}",
        "nb_lignes_process": 19,
        "string_script": "    '''\n    wb_command -cifti-math \\\n        \"x < !{thres}\" \\\n        -var x !{distmap} \\\n        !{sub}.!{name}_distmap_roi.dscalar.nii\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "name",
            "thres",
            "distmap"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "remove_medial_wall": {
        "name_process": "remove_medial_wall",
        "string_process": "\nprocess remove_medial_wall{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(name), path(infile), path(tplfile)\n\n    output:\n    tuple val(sub), val(name),\\\n    path(\"${sub}.${name}_medial_removed.dscalar.nii\"), emit: cropped\n\n    shell:\n    '''\n    #!/bin/bash\n    wb_command -cifti-create-dense-from-template \\\n        !{tplfile} -cifti !{infile} \\\n        !{sub}.!{name}_medial_removed.dscalar.nii\n    '''\n}",
        "nb_lignes_process": 18,
        "string_script": "    '''\n    #!/bin/bash\n    wb_command -cifti-create-dense-from-template \\\n        !{tplfile} -cifti !{infile} \\\n        !{sub}.!{name}_medial_removed.dscalar.nii\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "name",
            "infile",
            "tplfile"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "get_precentral": {
        "name_process": "get_precentral",
        "string_process": "\nprocess get_precentral{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), path(aparc)\n\n    output:\n    tuple val(sub), path(\"${sub}.precentral.dscalar.nii\"), emit: precentral\n\n    shell:\n    '''\n    #!/bin/bash\n\n    wb_command -cifti-label-to-roi !{aparc} \\\n        -name L_precentral \\\n        left_precentral.dscalar.nii\n\n    wb_command -cifti-label-to-roi !{aparc} \\\n        -name R_precentral \\\n        right_precentral.dscalar.nii\n\n    wb_command -cifti-math \"(x+y) > 0\" \\\n        -var \"x\" left_precentral.dscalar.nii \\\n        -var \"y\" right_precentral.dscalar.nii \\\n        !{sub}.precentral.dscalar.nii\n    '''\n}",
        "nb_lignes_process": 27,
        "string_script": "    '''\n    #!/bin/bash\n\n    wb_command -cifti-label-to-roi !{aparc} \\\n        -name L_precentral \\\n        left_precentral.dscalar.nii\n\n    wb_command -cifti-label-to-roi !{aparc} \\\n        -name R_precentral \\\n        right_precentral.dscalar.nii\n\n    wb_command -cifti-math \"(x+y) > 0\" \\\n        -var \"x\" left_precentral.dscalar.nii \\\n        -var \"y\" right_precentral.dscalar.nii \\\n        !{sub}.precentral.dscalar.nii\n    '''",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "aparc"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "dilate_mt_roi": {
        "name_process": "dilate_mt_roi",
        "string_process": "\nprocess dilate_mt_roi{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(name), path(left_surf), path(right_surf), path(roi)\n\n    output:\n    tuple val(sub), val(name),\\\n    path(\"${sub}.${name}_distmap_roi_dilated.dscalar.nii\"), emit: distmap_roi\n\n    shell:\n    '''\n    #!/bin/bash\n\n    wb_command -cifti-dilate \\\n        !{roi} COLUMN 6 6 \\\n        -left-surface !{left_surf} \\\n        -right-surface !{right_surf} \\\n        -nearest \\\n        !{sub}.!{name}_distmap_roi_dilated.dscalar.nii\n    '''\n}",
        "nb_lignes_process": 22,
        "string_script": "    '''\n    #!/bin/bash\n\n    wb_command -cifti-dilate \\\n        !{roi} COLUMN 6 6 \\\n        -left-surface !{left_surf} \\\n        -right-surface !{right_surf} \\\n        -nearest \\\n        !{sub}.!{name}_distmap_roi_dilated.dscalar.nii\n    '''",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "name",
            "left_surf",
            "right_surf",
            "roi"
        ],
        "nb_inputs": 5,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "apply_precentral": {
        "name_process": "apply_precentral",
        "string_process": "\nprocess apply_precentral{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(name), path(distmap), path(precentral)\n\n    output:\n    tuple val(sub), val(name),\\\n    path(\"${sub}.${name}_distmap_precentral.dscalar.nii\"), emit: distmap_roi\n\n    shell:\n    '''\n    #!/bin/bash\n\n    wb_command -cifti-math \"x*y\" \\\n        -var \"x\" !{distmap} \\\n        -var \"y\" !{precentral} \\\n        !{sub}.!{name}_distmap_precentral.dscalar.nii\n    '''\n}",
        "nb_lignes_process": 20,
        "string_script": "    '''\n    #!/bin/bash\n\n    wb_command -cifti-math \"x*y\" \\\n        -var \"x\" !{distmap} \\\n        -var \"y\" !{precentral} \\\n        !{sub}.!{name}_distmap_precentral.dscalar.nii\n    '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "name",
            "distmap",
            "precentral"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "centroid_project2vol": {
        "name_process": "centroid_project2vol",
        "string_process": "\nprocess centroid_project2vol {\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), path(shape), path(pial), path(white), path(midthick), path(t1)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.${hemi}.ribbon.nii.gz\"), emit: ribbon\n\n    shell:\n    '''\n    wb_command -metric-to-volume-mapping \\\n                !{shape} \\\n                !{midthick} \\\n                !{t1} \\\n                -ribbon-constrained \\\n                    !{white} \\\n                    !{pial} \\\n                !{sub}.!{hemi}.ribbon.nii.gz\n    '''\n}",
        "nb_lignes_process": 21,
        "string_script": "    '''\n    wb_command -metric-to-volume-mapping \\\n                !{shape} \\\n                !{midthick} \\\n                !{t1} \\\n                -ribbon-constrained \\\n                    !{white} \\\n                    !{pial} \\\n                !{sub}.!{hemi}.ribbon.nii.gz\n    '''",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "shape",
            "pial",
            "white",
            "midthick",
            "t1"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "add_centroid_niftis": {
        "name_process": "add_centroid_niftis",
        "string_process": "\nprocess add_centroid_niftis {\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), path(nifti1), path(nifti2)\n\n    output:\n    tuple val(sub), path('combined.nii.gz'), emit: sumvol\n\n    shell:\n    '''\n    wb_command -volume-math \\\n                \"x + y\" \\\n                -var x !{nifti1} \\\n                -var y !{nifti2} \\\n                combined.nii.gz\n    '''\n}",
        "nb_lignes_process": 18,
        "string_script": "    '''\n    wb_command -volume-math \\\n                \"x + y\" \\\n                -var x !{nifti1} \\\n                -var y !{nifti2} \\\n                combined.nii.gz\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "nifti1",
            "nifti2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "normalize_vol": {
        "name_process": "normalize_vol",
        "string_process": "\nprocess normalize_vol {\n\n    label 'connectome'\n    input:\n    tuple val(sub), path(vol)\n\n    output:\n    tuple val(sub), path('normalized.nii.gz'), emit: normvol\n\n    shell:\n    '''\n    wb_command -volume-math 'a' fixed.nii.gz -var a !{vol} -fixnan 0\n\n    sum=$(wb_command -volume-stats \\\n                fixed.nii.gz \\\n                -reduce SUM)\n\n    wb_command -volume-math \\\n                \"x/${sum}\" \\\n                -var x fixed.nii.gz \\\n                normalized.nii.gz\n    '''\n\n}",
        "nb_lignes_process": 23,
        "string_script": "    '''\n    wb_command -volume-math 'a' fixed.nii.gz -var a !{vol} -fixnan 0\n\n    sum=$(wb_command -volume-stats \\\n                fixed.nii.gz \\\n                -reduce SUM)\n\n    wb_command -volume-math \\\n                \"x/${sum}\" \\\n                -var x fixed.nii.gz \\\n                normalized.nii.gz\n    '''",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "vol"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "compute_weighted_centroid": {
        "name_process": "compute_weighted_centroid",
        "string_process": "\nprocess compute_weighted_centroid{\n\n    label 'rtms'\n\n    input:\n    tuple val(sub), path(vol)\n\n    output:\n    tuple val(sub), path(\"${sub}_ras_coord.txt\"), emit: coord\n\n    shell:\n    '''\n    #!/usr/bin/env python\n\n    import nibabel as nib\n    import numpy as np\n\n    #Load image\n    img = nib.load(\"!{vol}\")\n    affine = img.affine\n    data = img.get_data()\n\n    #Mask\n    x,y,z = np.where(data > 0)\n    coords = np.array([x,y,z])\n    vals = data[(x,y,z)]\n\n    #Compute\n    weighted_vox = np.dot(coords,vals)[:,np.newaxis]\n    r_weighted_vox = np.dot(affine[:3,:3],weighted_vox)\n    weighted_coord = r_weighted_vox + affine[:3,3:4]\n\n    #Save\n    np.savetxt(\"!{sub}_ras_coord.txt\",weighted_coord)\n    '''\n\n\n}",
        "nb_lignes_process": 37,
        "string_script": "    '''\n    #!/usr/bin/env python\n\n    import nibabel as nib\n    import numpy as np\n\n    #Load image\n    img = nib.load(\"!{vol}\")\n    affine = img.affine\n    data = img.get_data()\n\n    #Mask\n    x,y,z = np.where(data > 0)\n    coords = np.array([x,y,z])\n    vals = data[(x,y,z)]\n\n    #Compute\n    weighted_vox = np.dot(coords,vals)[:,np.newaxis]\n    r_weighted_vox = np.dot(affine[:3,:3],weighted_vox)\n    weighted_coord = r_weighted_vox + affine[:3,3:4]\n\n    #Save\n    np.savetxt(\"!{sub}_ras_coord.txt\",weighted_coord)\n    '''",
        "nb_lignes_script": 23,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "vol"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "get_scalp_seed": {
        "name_process": "get_scalp_seed",
        "string_process": "\nprocess get_scalp_seed {\n\n    label 'rtms'\n\n    input:\n    tuple val(sub), path(mesh), path(dscalar), path(l_pial), path(r_pial)\n\n    output:\n    tuple val(sub), path(\"${sub}_seed.txt\"), emit: seed\n    tuple val(sub), path(\"${sub}_qcseed.html\"), emit: qchtml\n\n    shell:\n    '''\n    #!/bin/bash\n\n    /scripts/get_scalp_seed.py !{mesh} !{dscalar} !{l_pial} !{r_pial} \\\n                               !{sub}_seed.txt --qc-file !{sub}_qcseed.html\n    '''\n}",
        "nb_lignes_process": 18,
        "string_script": "    '''\n    #!/bin/bash\n\n    /scripts/get_scalp_seed.py !{mesh} !{dscalar} !{l_pial} !{r_pial} \\\n                               !{sub}_seed.txt --qc-file !{sub}_qcseed.html\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "mesh",
            "dscalar",
            "l_pial",
            "r_pial"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "convert_sulcal": {
        "name_process": "convert_sulcal",
        "string_process": "\nprocess convert_sulcal{\n\n    label 'freesurfer'\n    containerOptions \"-B ${params.license}:/license\"\n\n    input:\n    tuple val(sub), val(hemi), path(sulc), path(white)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.${hemi}.sulc.native.shape.gii\")\n\n    \"\"\"\n    export FS_LICENSE=/license/license.txt\n    mris_convert -c $sulc $white ${sub}.${hemi}.sulc.native.shape.gii\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    export FS_LICENSE=/license/license.txt\n    mris_convert -c $sulc $white ${sub}.${hemi}.sulc.native.shape.gii\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "sulc",
            "white"
        ],
        "nb_inputs": 4,
        "outputs": [
            "hemi"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'freesurfer'",
            "containerOptions \"-B ${params.license}:/license\""
        ],
        "when": "",
        "stub": ""
    },
    "assign_sulcal": {
        "name_process": "assign_sulcal",
        "string_process": "\nprocess assign_sulcal{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), val(structure), path(sulc)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.${hemi}.assigned_sulc.native.shape.gii\")\n\n    \"\"\"\n    cp -L $sulc ${sub}.${hemi}.assigned_sulc.native.shape.gii\n    wb_command -set-structure ${sub}.${hemi}.assigned_sulc.native.shape.gii $structure\n    \"\"\"\n\n\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    cp -L $sulc ${sub}.${hemi}.assigned_sulc.native.shape.gii\n    wb_command -set-structure ${sub}.${hemi}.assigned_sulc.native.shape.gii $structure\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "structure",
            "sulc"
        ],
        "nb_inputs": 4,
        "outputs": [
            "hemi"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "invert_sulcal": {
        "name_process": "invert_sulcal",
        "string_process": "\nprocess invert_sulcal{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), path(sulc)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.inverted_sulc.${hemi}.shape.gii\")\n\n    \"\"\"\n    wb_command -metric-math 'a*(-1)' -var 'a' $sulc \"${sub}.inverted_sulc.${hemi}.shape.gii\"\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    wb_command -metric-math 'a*(-1)' -var 'a' $sulc \"${sub}.inverted_sulc.${hemi}.shape.gii\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "sulc"
        ],
        "nb_inputs": 3,
        "outputs": [
            "hemi"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "convert_sphere": {
        "name_process": "convert_sphere",
        "string_process": "\nprocess convert_sphere{\n\n    label 'freesurfer'\n    containerOptions \"-B ${params.license}:/license\"\n\n    input:\n    tuple val(sub), val(hemi), path(sphere), val(output)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.${output}.surf.gii\")\n\n    shell:\n    '''\n    export FS_LICENSE=/license/license.txt\n    mris_convert !{sphere} !{sphere}.surf.gii\n    mv !{sphere}.surf.gii !{sub}.!{output}.surf.gii\n    '''\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    export FS_LICENSE=/license/license.txt\n    mris_convert !{sphere} !{sphere}.surf.gii\n    mv !{sphere}.surf.gii !{sub}.!{output}.surf.gii\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "output",
            "sphere"
        ],
        "nb_inputs": 4,
        "outputs": [
            "hemi"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'freesurfer'",
            "containerOptions \"-B ${params.license}:/license\""
        ],
        "when": "",
        "stub": ""
    },
    "assign_sphere": {
        "name_process": "assign_sphere",
        "string_process": "\nprocess assign_sphere{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), val(structure), path(sphere)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.assigned_${sphere}\")\n\n    \"\"\"\n    cp -L ${sphere} ${sub}.assigned_${sphere}\n    wb_command -set-structure ${sub}.assigned_${sphere} ${structure} -surface-type \"SPHERICAL\"\n    \"\"\"\n\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    cp -L ${sphere} ${sub}.assigned_${sphere}\n    wb_command -set-structure ${sub}.assigned_${sphere} ${structure} -surface-type \"SPHERICAL\"\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "structure",
            "sphere"
        ],
        "nb_inputs": 4,
        "outputs": [
            "hemi"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "deform_sphere": {
        "name_process": "deform_sphere",
        "string_process": "\nprocess deform_sphere{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), path(sphere)\n\n    output:\n    tuple val(sub), val(hemi), file(\"${sub}.${hemi}.sphere.reg.reg_LR.native.surf.gii\")\n\n    shell:\n    '''\n    wb_command -surface-sphere-project-unproject \\\n                !{sphere} \\\n                /atlas/fsaverage.!{hemi}.sphere.164k_fs_!{hemi}.surf.gii \\\n                /atlas/fs_!{hemi}-to-fs_LR_fsaverage.!{hemi}_LR.spherical_std.164k_fs_!{hemi}.surf.gii \\\n                !{sub}.!{hemi}.sphere.reg.reg_LR.native.surf.gii\n    '''\n\n}",
        "nb_lignes_process": 19,
        "string_script": "    '''\n    wb_command -surface-sphere-project-unproject \\\n                !{sphere} \\\n                /atlas/fsaverage.!{hemi}.sphere.164k_fs_!{hemi}.surf.gii \\\n                /atlas/fs_!{hemi}-to-fs_LR_fsaverage.!{hemi}_LR.spherical_std.164k_fs_!{hemi}.surf.gii \\\n                !{sub}.!{hemi}.sphere.reg.reg_LR.native.surf.gii\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "sphere"
        ],
        "nb_inputs": 3,
        "outputs": [
            "hemi"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "spherical_affine": {
        "name_process": "spherical_affine",
        "string_process": "\nprocess spherical_affine{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), path(sphere), path(reg_LR_sphere)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}_${hemi}_affine.mat\")\n\n    \"\"\"\n    wb_command -surface-affine-regression \\\n                ${sphere} \\\n                ${reg_LR_sphere} \\\n                ${sub}_${hemi}_affine.mat\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    wb_command -surface-affine-regression \\\n                ${sphere} \\\n                ${reg_LR_sphere} \\\n                ${sub}_${hemi}_affine.mat\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "sphere",
            "reg_LR_sphere"
        ],
        "nb_inputs": 4,
        "outputs": [
            "hemi"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "normalize_rotation": {
        "name_process": "normalize_rotation",
        "string_process": "\nprocess normalize_rotation{\n\n    label 'rtms'\n\n    input:\n    tuple val(sub), val(hemi), path(affine)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}_norm_affine.mat\")\n\n    shell:\n    '''\n    #!/usr/bin/env python\n\n    import numpy as np\n\n    M = np.genfromtxt(\"!{affine}\")\n    M[:,3] = 0\n    M[3,3] = 1\n\n    linear_map = M[:3,:3]\n    U,S,V = np.linalg.svd(linear_map)\n    M[:3,:3] = np.matmul(U,V)\n    np.savetxt(\"!{sub}_norm_affine.mat\",M)\n    '''\n\n}",
        "nb_lignes_process": 26,
        "string_script": "    '''\n    #!/usr/bin/env python\n\n    import numpy as np\n\n    M = np.genfromtxt(\"!{affine}\")\n    M[:,3] = 0\n    M[3,3] = 1\n\n    linear_map = M[:3,:3]\n    U,S,V = np.linalg.svd(linear_map)\n    M[:3,:3] = np.matmul(U,V)\n    np.savetxt(\"!{sub}_norm_affine.mat\",M)\n    '''",
        "nb_lignes_script": 13,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "affine"
        ],
        "nb_inputs": 3,
        "outputs": [
            "hemi"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "apply_affine": {
        "name_process": "apply_affine",
        "string_process": "\nprocess apply_affine{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), path(sphere), path(affine)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.${hemi}.sphere_rot.surf.gii\")\n\n    \"\"\"\n    wb_command -surface-apply-affine \\\n                $sphere \\\n                $affine \\\n                ${sub}.${hemi}.sphere_rot.surf.gii\n\n    wb_command -surface-modify-sphere \\\n                ${sub}.${hemi}.sphere_rot.surf.gii \\\n                100 \\\n                ${sub}.${hemi}.sphere_rot.surf.gii\n    \"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n    wb_command -surface-apply-affine \\\n                $sphere \\\n                $affine \\\n                ${sub}.${hemi}.sphere_rot.surf.gii\n\n    wb_command -surface-modify-sphere \\\n                ${sub}.${hemi}.sphere_rot.surf.gii \\\n                100 \\\n                ${sub}.${hemi}.sphere_rot.surf.gii\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "sphere",
            "affine"
        ],
        "nb_inputs": 4,
        "outputs": [
            "hemi"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "msm_sulc": {
        "name_process": "msm_sulc",
        "string_process": "\nprocess msm_sulc{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), path(sphere), path(sulc), val(structure)\n\n    output:\n    tuple val(sub), val(hemi), path(sphere), path(\"${sub}.${hemi}.sphere.reg_msm.surf.gii\")\n\n    shell:\n    '''\n    /msm/msm --inmesh=!{sphere} \\\n             --indata=!{sulc} \\\n             --refmesh=/atlas/fsaverage.!{hemi}_LR.spherical_std.164k_fs_LR.surf.gii \\\n             --refdata=/atlas/!{hemi}.refsulc.164k_fs_LR.shape.gii \\\n             --conf=/msm_conf/MSMSulcStrainFinalconf \\\n             --out=!{hemi}. \\\n             --verbose\n\n    mv \"!{hemi}.sphere.reg.surf.gii\" \\\n       \"!{sub}.!{hemi}.sphere.reg_msm.surf.gii\"\n\n    wb_command -set-structure !{sub}.!{hemi}.sphere.reg_msm.surf.gii \\\n                                !{structure}\n    '''\n\n}",
        "nb_lignes_process": 27,
        "string_script": "    '''\n    /msm/msm --inmesh=!{sphere} \\\n             --indata=!{sulc} \\\n             --refmesh=/atlas/fsaverage.!{hemi}_LR.spherical_std.164k_fs_LR.surf.gii \\\n             --refdata=/atlas/!{hemi}.refsulc.164k_fs_LR.shape.gii \\\n             --conf=/msm_conf/MSMSulcStrainFinalconf \\\n             --out=!{hemi}. \\\n             --verbose\n\n    mv \"!{hemi}.sphere.reg.surf.gii\" \\\n       \"!{sub}.!{hemi}.sphere.reg_msm.surf.gii\"\n\n    wb_command -set-structure !{sub}.!{hemi}.sphere.reg_msm.surf.gii \\\n                                !{structure}\n    '''",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "msms"
        ],
        "tools_url": [
            "https://bio.tools/msms"
        ],
        "tools_dico": [
            {
                "name": "msms",
                "uri": "https://bio.tools/msms",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2259",
                            "term": "Systems biology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MSMS is a coalescent simulator that and permits the full range of demographic models provided by ms, in particular, it allows for multiple demes with arbitrary migration patterns, population growth and decay, and for population splits and merges. Applications include power studies, analytical comparisons, approximated Bayesian computation among others.",
                "homepage": "http://www.mabs.at/ewing/msms/index.shtml"
            }
        ],
        "inputs": [
            "sub",
            "hemi",
            "structure",
            "sphere",
            "sulc"
        ],
        "nb_inputs": 5,
        "outputs": [
            "hemi"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "areal_distortion": {
        "name_process": "areal_distortion",
        "string_process": "\nprocess areal_distortion{\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), path(sphere), path(msm_sphere)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.${hemi}.areal_distortion.shape.gii\"), emit: areal\n\n    \"\"\"\n    wb_command -surface-distortion \\\n                ${sphere} \\\n                ${msm_sphere} \\\n                ${sub}.${hemi}.areal_distortion.shape.gii\n    \"\"\"\n\n\n\n\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n    wb_command -surface-distortion \\\n                ${sphere} \\\n                ${msm_sphere} \\\n                ${sub}.${hemi}.areal_distortion.shape.gii\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "sphere",
            "msm_sphere"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "evaluate_fem": {
        "name_process": "evaluate_fem",
        "string_process": "\nprocess evaluate_fem{\n\n    label 'rtms'\n\n    input:\n    tuple val(sub), path(msh),\\\n    path(weights), path(centroid),\\\n    path(orientation), path(coil)\n\n    output:\n    tuple val(sub), path(\"${sub}_optimized_fields.msh\"), emit: fields\n    tuple val(sub), path(\"${sub}_optimized_coil.geo\"), emit: coil\n    tuple val(sub), path(\"${sub}_optimized_coords.npy\"), emit: coords\n\n    shell:\n    '''\n    /scripts/evaluate_fem.py !{msh} !{orientation} \\\n                            !{centroid} !{weights} \\\n                            !{coil} \\\n                            !{sub}_optimized_fields.msh \\\n                            !{sub}_optimized_coil.geo \\\n                            !{sub}_optimized_coords.npy\n    '''\n\n}",
        "nb_lignes_process": 24,
        "string_script": "    '''\n    /scripts/evaluate_fem.py !{msh} !{orientation} \\\n                            !{centroid} !{weights} \\\n                            !{coil} \\\n                            !{sub}_optimized_fields.msh \\\n                            !{sub}_optimized_coil.geo \\\n                            !{sub}_optimized_coords.npy\n    '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "msh",
            "weights",
            "centroid",
            "orientation",
            "coil"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "qc_parameteric_surf": {
        "name_process": "qc_parameteric_surf",
        "string_process": "\nprocess qc_parameteric_surf{\n    label 'rtms'\n\n    input:\n    tuple val(sub), path(msh),\\\n    path(centroid), path(dscalar)\n\n    output:\n    tuple val(sub), path(\"${sub}_parameteric_qc.html\"), emit:qc_parameteric\n\n    shell:\n    '''\n    #!/bin/bash\n    /scripts/qc/parameteric_surf.py !{msh} !{centroid} !{dscalar} \\\n                                    !{sub}_parameteric_qc.html\n\n    '''\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    #!/bin/bash\n    /scripts/qc/parameteric_surf.py !{msh} !{centroid} !{dscalar} \\\n                                    !{sub}_parameteric_qc.html\n\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "msh",
            "centroid",
            "dscalar"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "brainsight_transform": {
        "name_process": "brainsight_transform",
        "string_process": "\nprocess brainsight_transform{\n\n    label 'rtms'\n\n    input:\n    tuple val(sub), path(orientation)\n\n    output:\n    tuple val(sub), path(\"${sub}_brainsight.csv\"), emit: brainsight_coords\n\n    shell:\n    '''\n    #!/usr/bin/env python\n\n    from numpy import arcsin, degrees, arctan2\n    import numpy as np\n\n    msn = np.load(\"!{orientation}\")\n\n    msn[:3,1] = -msn[:3,1]\n    msn[:3,2] = -msn[:3,2]\n\n    xyz_alpha = degrees(arctan2(-msn[1,2],msn[2,2]))\n    xyz_beta = degrees(arcsin(msn[0,2]))\n    xyz_gamma = degrees(arctan2(-msn[0,1],msn[0,0]))\n\n    to_write = np.array([\n        msn[0,3],\n        msn[1,3],\n        msn[2,3],\n        -xyz_alpha,\n        -xyz_beta,\n        xyz_gamma\n    ])\n\n    header = \"X,Y,Z,AP,LR,Twist\"\n\n    np.savetxt(\"!{sub}_brainsight.csv\", to_write,\n        delimiter=\",\", header=header)\n    '''\n\n}",
        "nb_lignes_process": 41,
        "string_script": "    '''\n    #!/usr/bin/env python\n\n    from numpy import arcsin, degrees, arctan2\n    import numpy as np\n\n    msn = np.load(\"!{orientation}\")\n\n    msn[:3,1] = -msn[:3,1]\n    msn[:3,2] = -msn[:3,2]\n\n    xyz_alpha = degrees(arctan2(-msn[1,2],msn[2,2]))\n    xyz_beta = degrees(arcsin(msn[0,2]))\n    xyz_gamma = degrees(arctan2(-msn[0,1],msn[0,0]))\n\n    to_write = np.array([\n        msn[0,3],\n        msn[1,3],\n        msn[2,3],\n        -xyz_alpha,\n        -xyz_beta,\n        xyz_gamma\n    ])\n\n    header = \"X,Y,Z,AP,LR,Twist\"\n\n    np.savetxt(\"!{sub}_brainsight.csv\", to_write,\n        delimiter=\",\", header=header)\n    '''",
        "nb_lignes_script": 28,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "orientation"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "localite_transform": {
        "name_process": "localite_transform",
        "string_process": "\nprocess localite_transform{\n\n    label 'rtms'\n\n    input:\n    tuple val(sub), path(orientation)\n\n    output:\n    tuple val(sub), path(\"${sub}_localite.csv\"), emit: localite_coords\n\n    shell:\n    '''\n    #!/usr/bin/env python\n\n    import numpy as np\n\n    AFFINE = np.array([\n    [0, 0, 1, 0],\n    [0, -1, 0, 0,],\n    [1, 0, 0, 0],\n    [0, 0, 0, 1]\n    ])\n\n    matsimnibs = np.load(\"!{orientation}\")\n    localite_af = matsimnibs @ AFFINE\n    np.savetxt(\"!{sub}_localite.csv\", localite_af, delimiter=',')\n    '''\n}",
        "nb_lignes_process": 27,
        "string_script": "    '''\n    #!/usr/bin/env python\n\n    import numpy as np\n\n    AFFINE = np.array([\n    [0, 0, 1, 0],\n    [0, -1, 0, 0,],\n    [1, 0, 0, 0],\n    [0, 0, 0, 1]\n    ])\n\n    matsimnibs = np.load(\"!{orientation}\")\n    localite_af = matsimnibs @ AFFINE\n    np.savetxt(\"!{sub}_localite.csv\", localite_af, delimiter=',')\n    '''",
        "nb_lignes_script": 15,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "orientation"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'"
        ],
        "when": "",
        "stub": ""
    },
    "tet_project2vol": {
        "name_process": "tet_project2vol",
        "string_process": "\nprocess tet_project2vol {\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), path(shape), path(pial), path(white), path(midthick), path(t1)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.${hemi}.ribbon.nii.gz\"), emit: ribbon\n\n    shell:\n    '''\n    wb_command -metric-to-volume-mapping \\\n                !{shape} \\\n                !{midthick} \\\n                !{t1} \\\n                -ribbon-constrained \\\n                    !{white} \\\n                    !{pial} \\\n                !{sub}.!{hemi}.ribbon.nii.gz\n    '''\n}",
        "nb_lignes_process": 21,
        "string_script": "    '''\n    wb_command -metric-to-volume-mapping \\\n                !{shape} \\\n                !{midthick} \\\n                !{t1} \\\n                -ribbon-constrained \\\n                    !{white} \\\n                    !{pial} \\\n                !{sub}.!{hemi}.ribbon.nii.gz\n    '''",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "shape",
            "pial",
            "white",
            "midthick",
            "t1"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "add_tet_niftis": {
        "name_process": "add_tet_niftis",
        "string_process": "\nprocess add_tet_niftis {\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), path(nifti1), path(nifti2)\n\n    output:\n    tuple val(sub), path(\"${sub}_combined.nii.gz\"), emit: sumvol\n\n    shell:\n    '''\n    wb_command -volume-math \\\n                \"x + y\" \\\n                -var x !{nifti1} \\\n                -var y !{nifti2} \\\n                !{sub}_combined.nii.gz\n    '''\n}",
        "nb_lignes_process": 18,
        "string_script": "    '''\n    wb_command -volume-math \\\n                \"x + y\" \\\n                -var x !{nifti1} \\\n                -var y !{nifti2} \\\n                !{sub}_combined.nii.gz\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "nifti1",
            "nifti2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "tetrahedral_projection": {
        "name_process": "tetrahedral_projection",
        "string_process": "\nprocess tetrahedral_projection {\n\n    label 'rtms'\n    containerOptions \"-B ${params.bin}:/scripts\"\n\n    input:\n    tuple val(sub), path(vol), path(msh)\n\n    output:\n    tuple val(sub), path(\"${sub}_femfunc.npy\"), emit: fem_weights\n\n\n    shell:\n    '''\n    /scripts/volume_to_tetrahedral_mapping.py !{vol} !{msh} \"!{sub}_femfunc.npy\"\n    '''\n\n\n}",
        "nb_lignes_process": 18,
        "string_script": "    '''\n    /scripts/volume_to_tetrahedral_mapping.py !{vol} !{msh} \"!{sub}_femfunc.npy\"\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "vol",
            "msh"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'",
            "containerOptions \"-B ${params.bin}:/scripts\""
        ],
        "when": "",
        "stub": ""
    },
    "convert_fs2gifti": {
        "name_process": "convert_fs2gifti",
        "string_process": "\nprocess convert_fs2gifti{\n\n    label 'freesurfer'\n    maxForks 4\n\n    containerOptions \"-B ${params.license}:/license\"\n\n    input:\n    tuple val(sub), val(hemi), val(surf), path(fs_surf)\n\n    output:\n    tuple val(sub), val(hemi), val(surf),\\\n    path(\"${sub}.${hemi}.unassigned_${surf}.surf.gii\"), emit: hemi_surf\n\n    shell:\n    '''\n    export FS_LICENSE=/license/license.txt\n\n    mris_convert !{fs_surf} !{surf}.surf.gii\n\n    hemi=\"!{hemi}\"\n    mv ${hemi,,}h.!{surf}.surf.gii \\\n        !{sub}.!{hemi}.unassigned_!{surf}.surf.gii\n    '''\n\n}",
        "nb_lignes_process": 25,
        "string_script": "    '''\n    export FS_LICENSE=/license/license.txt\n\n    mris_convert !{fs_surf} !{surf}.surf.gii\n\n    hemi=\"!{hemi}\"\n    mv ${hemi,,}h.!{surf}.surf.gii \\\n        !{sub}.!{hemi}.unassigned_!{surf}.surf.gii\n    '''",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "surf",
            "fs_surf"
        ],
        "nb_inputs": 4,
        "outputs": [
            "surf"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'freesurfer'",
            "maxForks 4",
            "containerOptions \"-B ${params.license}:/license\""
        ],
        "when": "",
        "stub": ""
    },
    "assign_structure": {
        "name_process": "assign_structure",
        "string_process": "\nprocess assign_structure {\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), val(surf), val(structure), path(gifti)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.${hemi}.${surf}.surf.gii\"), emit: gifti\n\n    shell:\n    '''\n    cp -L !{gifti} !{sub}.!{hemi}.!{surf}.surf.gii\n    wb_command -set-structure !{sub}.!{hemi}.!{surf}.surf.gii !{structure}\n\n    '''\n\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    cp -L !{gifti} !{sub}.!{hemi}.!{surf}.surf.gii\n    wb_command -set-structure !{sub}.!{hemi}.!{surf}.surf.gii !{structure}\n\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "surf",
            "structure",
            "gifti"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "compute_midthickness": {
        "name_process": "compute_midthickness",
        "string_process": "\nprocess compute_midthickness {\n\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), path(pial), path(white)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.${hemi}.midthickness.surf.gii\"), emit: midthickness\n\n    \"\"\"\n    wb_command -surface-average -surf ${pial} \\\n                                -surf ${white} \\\n                                ${sub}.${hemi}.midthickness.surf.gii\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    wb_command -surface-average -surf ${pial} \\\n                                -surf ${white} \\\n                                ${sub}.${hemi}.midthickness.surf.gii\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "pial",
            "white"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "apply_mask": {
        "name_process": "apply_mask",
        "string_process": "\nprocess apply_mask {\n\n    label 'connectome'\n    input:\n    tuple val(sub), path(dscalar), path(mask)\n\n    output:\n    tuple val(sub), path(\"${sub}.masked.dscalar.nii\"), emit: masked\n\n    shell:\n    '''\n    wb_command -cifti-math \\\n                \"x * (mask > 0)\" \\\n                -var \"x\" !{dscalar} \\\n                -var \"mask\" !{mask} \\\n                !{sub}.masked.dscalar.nii\n    '''\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    wb_command -cifti-math \\\n                \"x * (mask > 0)\" \\\n                -var \"x\" !{dscalar} \\\n                -var \"mask\" !{mask} \\\n                !{sub}.masked.dscalar.nii\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "dscalar",
            "mask"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "cifti_dilate": {
        "name_process": "cifti_dilate",
        "string_process": "\nprocess cifti_dilate {\n\n    label 'connectome'\n    input:\n    tuple val(sub), path(dscalar), path(left), path(right)\n\n    output:\n    tuple val(sub), path(\"${sub}.dilated.dscalar.nii\"), emit: dilated\n\n    shell:\n    '''\n    wb_command -cifti-dilate \\\n                !{dscalar} \\\n                COLUMN \\\n                6 6 \\\n                -left-surface !{left} \\\n                -right-surface !{right} \\\n                !{sub}.dilated.dscalar.nii\n    '''\n\n}",
        "nb_lignes_process": 20,
        "string_script": "    '''\n    wb_command -cifti-dilate \\\n                !{dscalar} \\\n                COLUMN \\\n                6 6 \\\n                -left-surface !{left} \\\n                -right-surface !{right} \\\n                !{sub}.dilated.dscalar.nii\n    '''",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "dscalar",
            "left",
            "right"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "ciftify_invocation": {
        "name_process": "ciftify_invocation",
        "string_process": "\nprocess ciftify_invocation{\n\n    input:\n    val sub\n\n    output:\n    tuple val(sub), path(\"${sub}.json\"), emit: json\n\n    \"\"\"\n\n    #!/usr/bin/env python\n\n    import json\n    import sys\n\n    out_file = '${sub}.json'\n    invoke_file = '${params.ciftify_invocation}'\n    x = '${sub}'.replace('sub-','')\n\n    with open(invoke_file,'r') as f:\n        j_dict = json.load(f)\n\n    j_dict.update({'participant_label' : [x]})\n\n    with open(out_file,'w') as f:\n        json.dump(j_dict,f,indent=4)\n\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n\n    #!/usr/bin/env python\n\n    import json\n    import sys\n\n    out_file = '${sub}.json'\n    invoke_file = '${params.ciftify_invocation}'\n    x = '${sub}'.replace('sub-','')\n\n    with open(invoke_file,'r') as f:\n        j_dict = json.load(f)\n\n    j_dict.update({'participant_label' : [x]})\n\n    with open(out_file,'w') as f:\n        json.dump(j_dict,f,indent=4)\n\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "ciftify": {
        "name_process": "ciftify",
        "string_process": "\nprocess ciftify{\n\n    stageInMode 'copy'\n\n    input:\n    tuple val(sub), path(json), path(\"fmriprep/$sub\"), path(\"freesurfer/$sub\")\n\n    output:\n    tuple val(sub), path(\"ciftify/${sub}\"), emit: ciftify\n    path(\"ciftify/zz_templates\"), emit: zz_templates\n    tuple val(sub), path(\"ciftify/qc_recon_all/${sub}\"), emit: qc_recon\n    tuple val(sub), path(\"ciftify/qc_fmri/${sub}*\"), emit: qc_fmri\n\n    shell:\n    '''\n    mkdir work\n    bosh exec launch \\\n    -v !{params.bids}:/bids \\\n    -v $(pwd):/output \\\n    -v $(pwd)/work:/work \\\n    -v !{params.license}:/license \\\n    -v !{params.resources}:/resources \\\n    !{params.ciftify_descriptor} $(pwd)/!{json} \\\n    --imagepath !{params.ciftify} -x --stream\n    '''\n}",
        "nb_lignes_process": 25,
        "string_script": "    '''\n    mkdir work\n    bosh exec launch \\\n    -v !{params.bids}:/bids \\\n    -v $(pwd):/output \\\n    -v $(pwd)/work:/work \\\n    -v !{params.license}:/license \\\n    -v !{params.resources}:/resources \\\n    !{params.ciftify_descriptor} $(pwd)/!{json} \\\n    --imagepath !{params.ciftify} -x --stream\n    '''",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "json"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fmriprep_invocation": {
        "name_process": "fmriprep_invocation",
        "string_process": "\nprocess fmriprep_invocation{\n\n    input:\n    tuple val(sub), path(invocation)\n\n    output:\n    tuple val(\"$sub\"), path(\"${sub}.json\"), emit: json\n\n    shell:\n    \"\"\"\n\n    #!/usr/bin/env python\n\n    import json\n    import sys\n\n    out_file = '${sub}.json'\n    invoke_file = '${invocation}'\n    x = '${sub}'.replace('sub-','')\n\n    print(invoke_file)\n\n    with open(invoke_file,'r') as f:\n        j_dict = json.load(f)\n\n    j_dict.update({'participant_label' : [x]})\n\n    with open(out_file,'w') as f:\n        json.dump(j_dict,f,indent=4)\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n\n    #!/usr/bin/env python\n\n    import json\n    import sys\n\n    out_file = '${sub}.json'\n    invoke_file = '${invocation}'\n    x = '${sub}'.replace('sub-','')\n\n    print(invoke_file)\n\n    with open(invoke_file,'r') as f:\n        j_dict = json.load(f)\n\n    j_dict.update({'participant_label' : [x]})\n\n    with open(out_file,'w') as f:\n        json.dump(j_dict,f,indent=4)\n\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "invocation"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "fmriprep_anat": {
        "name_process": "fmriprep_anat",
        "string_process": "\nprocess fmriprep_anat{\n\n    module 'slurm'\n\n    input:\n    tuple val(sub), path(json)\n\n    output:\n    tuple val(sub),\\\n    path(\"${sub}*_desc-preproc_T1w.nii.gz\"),\\\n    emit: preproc_t1\n\n\n    shell:\n    '''\n    mkdir work\n    bosh exec launch \\\n    -v !{params.bids}:/bids \\\n    -v $(pwd):/output \\\n    -v $(pwd)/work:/work \\\n    -v !{params.license}:/license \\\n    -v !{params.resources}:/resources \\\n    !{params.fmriprep_descriptor} $(pwd)/!{json} \\\n    --imagepath !{params.fmriprep} -x --stream\n\n    # Find anat file and link to current folder\n    find fmriprep/!{sub}/ -type f -name \"*preproc_T1w.nii.gz\" | \\\n    grep -v MNI152 | xargs -I [] cp [] .\n    '''\n}",
        "nb_lignes_process": 29,
        "string_script": "    '''\n    mkdir work\n    bosh exec launch \\\n    -v !{params.bids}:/bids \\\n    -v $(pwd):/output \\\n    -v $(pwd)/work:/work \\\n    -v !{params.license}:/license \\\n    -v !{params.resources}:/resources \\\n    !{params.fmriprep_descriptor} $(pwd)/!{json} \\\n    --imagepath !{params.fmriprep} -x --stream\n\n    # Find anat file and link to current folder\n    find fmriprep/!{sub}/ -type f -name \"*preproc_T1w.nii.gz\" | \\\n    grep -v MNI152 | xargs -I [] cp [] .\n    '''",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "json"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sub"
        ],
        "nb_outputs": 1,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "module 'slurm'"
        ],
        "when": "",
        "stub": ""
    },
    "run_fmriprep": {
        "name_process": "run_fmriprep",
        "string_process": "\nprocess run_fmriprep{\n\n    module 'slurm'\n\n    input:\n    tuple val(sub), path(json)\n\n    output:\n    tuple val(sub), path(\"freesurfer/${sub}\"), emit: freesurfer\n    tuple val(sub), path(\"fmriprep/${sub}\"), emit: fmriprep\n    tuple val(sub), path(\"fmriprep/${sub}.html\"), emit: html\n\n    shell:\n    '''\n    mkdir work\n    bosh exec launch \\\n    -v !{params.bids}:/bids \\\n    -v $(pwd):/output \\\n    -v $(pwd)/work:/work \\\n    -v !{params.license}:/license \\\n    -v !{params.resources}:/resources \\\n    !{params.fmriprep_descriptor} $(pwd)/!{json} \\\n    --imagepath !{params.fmriprep} -x --stream\n\n    '''\n}",
        "nb_lignes_process": 25,
        "string_script": "    '''\n    mkdir work\n    bosh exec launch \\\n    -v !{params.bids}:/bids \\\n    -v $(pwd):/output \\\n    -v $(pwd)/work:/work \\\n    -v !{params.license}:/license \\\n    -v !{params.resources}:/resources \\\n    !{params.fmriprep_descriptor} $(pwd)/!{json} \\\n    --imagepath !{params.fmriprep} -x --stream\n\n    '''",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "json"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "module 'slurm'"
        ],
        "when": "",
        "stub": ""
    },
    "mri2mesh": {
        "name_process": "mri2mesh",
        "string_process": "\nprocess mri2mesh {\n\n\n    input:\n    tuple val(sub), path(t1)\n\n    output:\n    tuple val(sub), path(\"fs_${sub}\"), emit: freesurfer\n    tuple val(sub), path(\"m2m_${sub}\"), emit: mri2mesh\n    tuple val(sub), path(\"${sub}.geo\"), emit: geo\n    tuple val(sub), path(\"${sub}_T1fs_conform.nii.gz\"), emit: T1\n\n                                   \n    shell:\n    '''\n    set +u\n    export FS_LICENSE=/license/license.txt\n    source $FREESURFER_HOME/SetUpFreeSurfer.sh\n    source $FSLDIR/etc/fslconf/fsl.sh\n    mri2mesh --all !{sub} !{t1}\n    '''\n\n}",
        "nb_lignes_process": 22,
        "string_script": "    '''\n    set +u\n    export FS_LICENSE=/license/license.txt\n    source $FREESURFER_HOME/SetUpFreeSurfer.sh\n    source $FSLDIR/etc/fslconf/fsl.sh\n    mri2mesh --all !{sub} !{t1}\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "t1"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "update_msh": {
        "name_process": "update_msh",
        "string_process": "\nprocess update_msh{\n\n    label 'gmsh4'\n\n    input:\n    tuple val(sub), path(\"${sub}.geo\"), path(m2m)\n\n    output:\n    tuple val(sub), path(\"${sub}.msh\"), emit: mesh\n\n    shell:\n    '''\n    set +u\n\n    sed 's/Merge.*m2m/Merge \"m2m/g' !{sub}.geo -i\n    /gmsh-sdk/bin/gmsh -3 -format msh2 -o !{sub}.msh !{sub}.geo || true\n    '''\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    set +u\n\n    sed 's/Merge.*m2m/Merge \"m2m/g' !{sub}.geo -i\n    /gmsh-sdk/bin/gmsh -3 -format msh2 -o !{sub}.msh !{sub}.geo || true\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "m2m"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'gmsh4'"
        ],
        "when": "",
        "stub": ""
    },
    "extract_surf_patch": {
        "name_process": "extract_surf_patch",
        "string_process": "\nprocess extract_surf_patch {\n\n    label 'rtms'\n    containerOptions \"-B ${params.bin}:/scripts\"\n\n    input:\n    tuple val(sub), path(msh), path(centroid)\n\n    output:\n    tuple val(sub), path(\"${sub}_dilated_coords.npy\"), path(\"${sub}_mean_norm.npy\"), emit: surf_patch\n    tuple val(sub), path(\"${sub}_param_surf.msh\"), emit: qc_surf\n\n    shell:\n    '''\n    /scripts/extract_surface_patch.py !{msh} !{centroid} !{sub}\n    '''\n}",
        "nb_lignes_process": 16,
        "string_script": "    '''\n    /scripts/extract_surface_patch.py !{msh} !{centroid} !{sub}\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "msh",
            "centroid"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'",
            "containerOptions \"-B ${params.bin}:/scripts\""
        ],
        "when": "",
        "stub": ""
    },
    "parameterize_surf": {
        "name_process": "parameterize_surf",
        "string_process": "\nprocess parameterize_surf {\n\n    label 'rtms'\n    containerOptions \"-B ${params.bin}:/scripts\"\n\n    input:\n    tuple val(sub), path(patch), path(norm)\n\n    output:\n    tuple val(sub), path(\"${sub}_C.npy\"), emit: C\n    tuple val(sub), path(\"${sub}_R.npy\"), emit: R\n    tuple val(sub), path(\"${sub}_bounds.npy\"), emit: bounds\n\n    shell:\n    '''\n    /scripts/parameterize_surface_patch.py !{patch} !{norm} !{sub}\n    '''\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    /scripts/parameterize_surface_patch.py !{patch} !{norm} !{sub}\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "patch",
            "norm"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'",
            "containerOptions \"-B ${params.bin}:/scripts\""
        ],
        "when": "",
        "stub": ""
    },
    "qc_parameterization": {
        "name_process": "qc_parameterization",
        "string_process": "\nprocess qc_parameterization {\n\n    label 'rtms'\n    containerOptions \"-B ${params.bin}:/scripts\"\n\n    input:\n    tuple val(sub), path(qc_surf), path(C), path(R), path(bounds)\n\n    output:\n    tuple val(sub), path(\"${sub}_quadratic_surf.msh\"), emit: qc_param\n\n    shell:\n    '''\n    /scripts/qc_parametric.py !{qc_surf} !{C} !{R} !{bounds} !{sub}_quadratic_surf.msh\n    '''\n}",
        "nb_lignes_process": 15,
        "string_script": "    '''\n    /scripts/qc_parametric.py !{qc_surf} !{C} !{R} !{bounds} !{sub}_quadratic_surf.msh\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "qc_surf",
            "C",
            "R",
            "bounds"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jerdra__BOONStim",
        "directive": [
            "label 'rtms'",
            "containerOptions \"-B ${params.bin}:/scripts\""
        ],
        "when": "",
        "stub": ""
    }
}
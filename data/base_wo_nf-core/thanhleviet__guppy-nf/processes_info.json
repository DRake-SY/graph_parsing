{
    "guppy_basecaller": {
        "name_process": "guppy_basecaller",
        "string_process": "\nprocess guppy_basecaller {\n    tag \"${fast5.baseName}\"\n    \n    cache true\n\n    publishDir \"${params.outdir}\",\n        mode: \"copy\",\n        overwrite: true,\n        saveAs: { filename -> filename }\n\n    input:\n        path(fast5)\n\n    output:\n        path(\"fastq/pass\"), emit: fastq\n        tuple val(fast5.baseName), path(\"fastq/sequencing_summary.txt\"), emit: sequencing_summary\n    script:\n        model = params.sup_model ? \"dna_r9.4.1_450bps_sup.cfg\" : \"dna_r9.4.1_450bps_hac.cfg\"\n        cuda = params.full_cuda ? \"'cuda:all'\" : \"cuda:0\"\n        \"\"\"\n        guppy_basecaller --input_path $fast5 \\\\\n            -r \\\\\n            --min_qscore ${params.min_qscore} \\\\\n            --save_path fastq \\\\\n            --records_per_fastq 0 \\\\\n            --chunks_per_runner ${params.chunks_per_runner} \\\\\n            --compress_fastq \\\\\n            -c ${model} -x ${cuda} \\\\\n            --num_callers ${params.num_callers}\n        \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "        model = params.sup_model ? \"dna_r9.4.1_450bps_sup.cfg\" : \"dna_r9.4.1_450bps_hac.cfg\"\n        cuda = params.full_cuda ? \"'cuda:all'\" : \"cuda:0\"\n        \"\"\"\n        guppy_basecaller --input_path $fast5 \\\\\n            -r \\\\\n            --min_qscore ${params.min_qscore} \\\\\n            --save_path fastq \\\\\n            --records_per_fastq 0 \\\\\n            --chunks_per_runner ${params.chunks_per_runner} \\\\\n            --compress_fastq \\\\\n            -c ${model} -x ${cuda} \\\\\n            --num_callers ${params.num_callers}\n        \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "MoDEL",
            "SWCuda"
        ],
        "tools_url": [
            "https://bio.tools/model",
            "https://bio.tools/swcuda"
        ],
        "tools_dico": [
            {
                "name": "MoDEL",
                "uri": "https://bio.tools/model",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0842",
                                "term": "Identifier"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2080",
                                "term": "Database search results"
                            }
                        ]
                    }
                ],
                "description": "Database of protein Molecular Dynamics simulations, with 1800 trajectories representing different structural clusters of the PDB.",
                "homepage": "http://mmb.irbbarcelona.org/MoDEL"
            },
            {
                "name": "SWCuda",
                "uri": "https://bio.tools/swcuda",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This allows to perform alignments between one or more sequences and a database (all the sequences, even in the DB, are intended to be proteinic). It is implemented in the recently released CUDA programming environment by NVidia.",
                "homepage": "http://bioinformatics.cribi.unipd.it/cuda/swcuda.html"
            }
        ],
        "inputs": [
            "fast5"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__guppy-nf",
        "directive": [
            "tag \"${fast5.baseName}\"",
            "cache true",
            "publishDir \"${params.outdir}\" , mode: \"copy\" , overwrite: true , saveAs: { filename -> filename }"
        ],
        "when": "",
        "stub": ""
    },
    "guppy_barcoder": {
        "name_process": "guppy_barcoder",
        "string_process": "\nprocess guppy_barcoder {\n    publishDir \"${params.outdir}/named_samples/${output}\",\n        mode: \"move\",\n        overwrite: true,\n        saveAs: { filename -> filename } \n    \n    tag {\"Running\"}\n    \n    cache true\n\n    cpus 48\n\n    input:\n    path(\"fastq\")\n    output:\n    path(\"*.fastq.gz\")\n    path(\"*.stats\")\n    path(\"${output}/barcoding_summary.txt\")\n    \n    script:\n    barcode_kit=params.barcode_kit ? \"-d  $params.barcoding_folder --barcode_kits '$params.barcode_kit'\": \"\"\n    trim_barcodes=params.trim_barcodes ? \"--trim_barcodes\" : \"\"\n    output=params.trim_barcodes ? \"deplexed-barcodes-trimmed\" : \"deplexed\" \n    barcoder_options = params.barcoder_options ? \"$params.barcoder_options\" : \"\"\n    \"\"\"\n    guppy_barcoder -i fastq \\\\\n    -r \\\\\n    -s $output \\\\\n    -q 0 \\\\\n    $barcoder_options \\\\\n    $barcode_kit \\\\\n    $trim_barcodes \\\\\n    -t ${task.cpus}\n    \n    # Combine fastq\n    cd $output\n    for f in barcode*;do echo \\$f;cat \\$f/*.fastq | pigz -p ${task.cpus} - > ../\\${f}.fastq.gz;done\n    cd ..\n    if [[ -f '${params.map}' ]]; then\n        brename -e -p '(barcode[0-9]{2})' -r '{kv}' -k ${params.map}\n        cat <(zcat barcode*.gz) <(cat ${output}/unclassified/*.*) | pigz -p ${task.cpus} - > unclassified.fastq.gz\n        rm barcode*.fastq.gz 2> /dev/null\n    else\n        cat ${output}/unclassified/*.* | pigz -p ${task.cpus} - > unclassified.fastq.gz\n    fi\n    seqkit stats *.fastq.gz > reads.stats\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    barcode_kit=params.barcode_kit ? \"-d  $params.barcoding_folder --barcode_kits '$params.barcode_kit'\": \"\"\n    trim_barcodes=params.trim_barcodes ? \"--trim_barcodes\" : \"\"\n    output=params.trim_barcodes ? \"deplexed-barcodes-trimmed\" : \"deplexed\" \n    barcoder_options = params.barcoder_options ? \"$params.barcoder_options\" : \"\"\n    \"\"\"\n    guppy_barcoder -i fastq \\\\\n    -r \\\\\n    -s $output \\\\\n    -q 0 \\\\\n    $barcoder_options \\\\\n    $barcode_kit \\\\\n    $trim_barcodes \\\\\n    -t ${task.cpus}\n    \n    # Combine fastq\n    cd $output\n    for f in barcode*;do echo \\$f;cat \\$f/*.fastq | pigz -p ${task.cpus} - > ../\\${f}.fastq.gz;done\n    cd ..\n    if [[ -f '${params.map}' ]]; then\n        brename -e -p '(barcode[0-9]{2})' -r '{kv}' -k ${params.map}\n        cat <(zcat barcode*.gz) <(cat ${output}/unclassified/*.*) | pigz -p ${task.cpus} - > unclassified.fastq.gz\n        rm barcode*.fastq.gz 2> /dev/null\n    else\n        cat ${output}/unclassified/*.* | pigz -p ${task.cpus} - > unclassified.fastq.gz\n    fi\n    seqkit stats *.fastq.gz > reads.stats\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__guppy-nf",
        "directive": [
            "publishDir \"${params.outdir}/named_samples/${output}\" , mode: \"move\" , overwrite: true , saveAs: { filename -> filename }",
            "tag {\"Running\"}",
            "cache true",
            "cpus 48"
        ],
        "when": "",
        "stub": ""
    },
    "STATS_PYCOQC": {
        "name_process": "STATS_PYCOQC",
        "string_process": "\nprocess STATS_PYCOQC {\n    publishDir \"${params.outdir}\", mode: \"copy\"\n    \n    tag {\"\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\"}\n    \n    conda '/qib/instruments/n91636/software/miniconda3/envs/nanopore'\n\n    cpus 8\n\n    input:\n    tuple val(run_name), path(\"sequencing_summary.txt\")\n    \n    output:\n    path(\"${run_name}.html\")\n    \n    script:\n    \"\"\"\n    pycoQC -f sequencing_summary.txt -o ${run_name}.html --min_pass_qual ${params.min_qscore}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    pycoQC -f sequencing_summary.txt -o ${run_name}.html --min_pass_qual ${params.min_qscore}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "run_name"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__guppy-nf",
        "directive": [
            "publishDir \"${params.outdir}\", mode: \"copy\"",
            "tag {\"\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\"}",
            "conda '/qib/instruments/n91636/software/miniconda3/envs/nanopore'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "MINIONQC": {
        "name_process": "MINIONQC",
        "string_process": "\nprocess MINIONQC {\n    \n    publishDir \"${params.outdir}\", mode: \"copy\" \n    \n    tag {\"\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\"}\n    \n    conda '/qib/instruments/n91636/software/miniconda3/envs/nanopore/envs/minionqc'\n\n    cpus 8\n\n    input:\n        tuple val(run_name), path(\"sequencing_summary.txt\")\n    output:\n        path(\"${run_name}_minionqc\")\n    script:\n    \"\"\"\n    MinIONQC.R -i sequencing_summary.txt -o ${run_name}_minionqc -p ${task.cpus} -q ${params.min_qscore}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    MinIONQC.R -i sequencing_summary.txt -o ${run_name}_minionqc -p ${task.cpus} -q ${params.min_qscore}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "run_name"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__guppy-nf",
        "directive": [
            "publishDir \"${params.outdir}\", mode: \"copy\"",
            "tag {\"\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\ud83c\udfc3\"}",
            "conda '/qib/instruments/n91636/software/miniconda3/envs/nanopore/envs/minionqc'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(params.input)\n    .splitCsv(header:true)\n    .map {row -> tuple(row.group, row.cond, row.SampleId, file(\"${params.data}/${row.SampleId}_${row.read1}\"), file(\"${params.data}/${row.SampleId}_${row.read2}\"))}\n    .into {fastqc_ch; align_ch}",
        "origin": [
            [
                "params.input",
                "A"
            ]
        ],
        "gives": [
            [
                "fastqc_ch",
                "P"
            ],
            [
                "align_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.fromPath(params.ref_hg38).set{ref_hg38_ch}",
        "origin": [
            [
                "params.ref_hg38",
                "A"
            ]
        ],
        "gives": [
            [
                "ref_hg38_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(params.ref_ecoli).set{ref_ecoli_ch}",
        "origin": [
            [
                "params.ref_ecoli",
                "A"
            ]
        ],
        "gives": [
            [
                "ref_ecoli_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "seacr_4_summit_ch = Channel.empty()}\n} else {seacr_4_summit_ch = seacr_noctrl4hp_ch}\n\n\nif (params.workflow.heatmap_on_trans) {\n    Channel.fromPath(params.gene_for_heatmap).set{ref_heatmap_ch}\n    \n    bw4trans_ch\n        .map {group, cond, id, path -> [path]}\n        .collect()\n        .set {bw4trans_collect_ch}\n\n   PROCESS DEF trans_heatmap\n}\n\nif (params.workflow.heatmap_on_peak) {\n    if (params.use_ctrl) {",
        "origin": [
            [
                "params.gene_for_heatmap",
                "A"
            ]
        ],
        "gives": [
            [
                "seacr_4_summit_ch",
                "P"
            ],
            [
                "ref_heatmap_ch",
                "P"
            ],
            [
                "bw4trans_collect_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "align_ch.into {hg38_ch; ecoli_ch}}\n\nif (params.workflow.bowtie2_build_hg38) {",
        "origin": [
            [
                "align_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "hg38_ch",
                "P"
            ],
            [
                "ecoli_ch",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "ref_hg38_ch.set{index_hg38_ch}}\n\nif (params.workflow.bowtie2_build_ecoli) {",
        "origin": [
            [
                "ref_hg38_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "index_hg38_ch",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ref_ecoli_ch.set{index_ecoli_ch}}\n\n  \n                                                                                       \n                                         \n                                                                                       \n  \n\nhg38_ch\n    .combine(index_hg38_ch.collect())\n    .map {group, cond, id, read1,read2, bt1, bt2, bt3, bt4, bt5, bt6 ->",
        "origin": [
            [
                "ref_ecoli_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "index_ecoli_ch",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "ecoli_ch\n    .combine(index_ecoli_ch.collect())\n    .map {group, cond, id, read1,read2, bt1, bt2, bt3, bt4, bt5, bt6 ->\n        [group, cond, id, read1, read2, [bt1,bt2,bt3,bt4,bt5,bt6]]\n    }\n    .set {align_ecoli_ch}",
        "origin": [
            [
                "ecoli_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "align_ecoli_ch",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "rmdup_sam_ch.into{sam4filter_ch; sam4assess_frag}",
        "origin": [
            [
                "rmdup_sam_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "sam4filter_ch",
                "P"
            ],
            [
                "sam4assess_frag",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "sam_hg38_nopicard_ch.into{sam4filter_ch; sam4assess_frag}}\n\n  \n                                                                                       \n                               \n                                                                                       \n  \nPROCESS DEF assess_frag_size_distribution\n\n  \n                                                                                       \n                               \n                                                                                       \n  \n\nif (params.args.filter_miniQualityScore > 0) {params.workflow.map_quality_filter = true}\n\nif (params.workflow.map_quality_filter) {",
        "origin": [
            [
                "sam_hg38_nopicard_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "sam4filter_ch",
                "P"
            ],
            [
                "sam4assess_frag",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "sam4filter_ch.set{sam2bam_ch}}\n\n  \n                                                                                       \n                          \n                                                                                       \n  \nPROCESS DEF sam2bam\n\nPROCESS DEF bam2bed\n\nseqdepth_4_bedgraph_ch\n    .join(fragBed_convert_ch, by:[0,1,2])\n    .set{bed2bedgraph_ch}\n    PROCESS DEF bed2bedgraph\n\nif (params.workflow.heatmap_on_peak || params.workflow.heatmap_on_trans) {params.workflow.bam2bigwig = true}\n\nif (params.workflow.bam2bigwig) {",
        "origin": [
            [
                "sam4filter_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "sam2bam_ch",
                "P"
            ],
            [
                "bed2bedgraph_ch",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "sort_bam_ch\n        .filter {group, cond, id, path -> cond == 'exp'}\n        .set{exp_bam_ch}",
        "origin": [
            [
                "sort_bam_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "exp_bam_ch",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "seqdepth_4_R_ch\n    .map{group, cond, id, seqdepth -> [seqdepth]}\n    .set{seqDepth_file_ch}",
        "origin": [
            [
                "seqdepth_4_R_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "seqDepth_file_ch",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "bedgraph_ch\n            .branch {group, cond, id, path ->\n                ctrl: cond == \"ctrl\"\n                exp: cond == \"exp\"\n            }\n            .set {branch_bedgraph_ch}",
        "origin": [
            [
                "bedgraph_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "branch_bedgraph_ch",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "branch_bedgraph_ch.ctrl().combine(branch_bedgraph_ch.exp, by: 0)\n            .set {seacr_ch}",
        "origin": [
            [
                "branch_bedgraph_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "seacr_ch",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "seacr_ctrl4report_ch\n            .map{group, id, file -> [file]}\n            .set{seacr_ctrl4r_ch}",
        "origin": [
            [
                "seacr_ctrl4report_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "seacr_ctrl4r_ch",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "seacr_top4report_ch\n            .map{group, id, file -> [file]}\n            .set{seacr_top4r_ch}",
        "origin": [
            [
                "seacr_top4report_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "seacr_top4r_ch",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "bam4seacr_report_ch\n            .map{group,cond, id, bam -> [bam]}\n            .set{seacr_bam_ch}",
        "origin": [
            [
                "bam4seacr_report_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "seacr_bam_ch",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "bam4macs2_ch\n            .branch {group, cond, id, path ->\n                ctrl: cond == \"ctrl\"\n                exp: cond == \"exp\"\n            }\n            .set {branch_macs2_ch}",
        "origin": [
            [
                "bam4macs2_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "branch_macs2_ch",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "branch_macs2_ch.ctrl().combine(branch_macs2_ch.exp, by:0)\n            .set {macs2_ch}",
        "origin": [
            [
                "branch_macs2_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "macs2_ch",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "macs2_4report_ch\n            .map{group, id, file -> file}\n            .set{macs2_4r_ch}",
        "origin": [
            [
                "macs2_4report_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "macs2_4r_ch",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "bam4macs2_report_ch\n            .map{group,cond, id, bam -> bam}\n            .set{macs2_bam_ch}",
        "origin": [
            [
                "bam4macs2_report_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "macs2_bam_ch",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "seacr_noctrl4report_ch\n        .map{group, id, file -> [file]}\n        .set{seacr_noctrl4r_ch}",
        "origin": [
            [
                "seacr_noctrl4report_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "seacr_noctrl4r_ch",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "seacr_top4report_ch\n        .map{group, id, file -> [file]}\n        .set{seacr_top4r_ch}",
        "origin": [
            [
                "seacr_top4report_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "seacr_top4r_ch",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "bam4seacr_report_ch\n        .map{group,cond, id, bam -> [bam]}\n        .set{seacr_bam_ch}",
        "origin": [
            [
                "bam4seacr_report_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "seacr_bam_ch",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "seacr_summit_ch\n                .join(bw4seacr_ch, by:[0,1])\n                .set {bw_seacr_ch}",
        "origin": [
            [
                "seacr_summit_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "bw_seacr_ch",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "macs2_4hp_ch\n                .join(bw4macs2_ch, by:[0,1])\n                .set {bw_macs2_ch}",
        "origin": [
            [
                "macs2_4hp_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "bw_macs2_ch",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "seacr_summit_ch\n            .join(bw4seacr_ch, by:[0,1])\n            .set {bw_seacr_ch}",
        "origin": [
            [
                "seacr_summit_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "bw_seacr_ch",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "seacr_4_summit_ch = seacr_ctrl4hp_ch",
        "origin": [
            [
                "seacr_ctrl4hp_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "seacr_4_summit_ch",
                "P"
            ]
        ]
    }
}
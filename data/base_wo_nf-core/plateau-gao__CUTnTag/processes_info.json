{
    "workflow_record": {
        "name_process": "workflow_record",
        "string_process": "\nprocess workflow_record {\n    publishDir \"${params.result}\", mode: 'copy'\n\n    output:\n    path(\"workflow.txt\")\n\n    script:\n    \"\"\"\n    echo \"Whether use control group: ${params.use_ctrl}\" >> workflow.txt\n    echo \"do_fastqc: ${params.workflow.fastqc}\" >> workflow.txt\n    echo \"do_trim: ${params.workflow.trim}\" >> workflow.txt\n    echo \"do_bowtie2_build_spikeIn: ${params.workflow.bowtie2_build_ecoli}\" >> workflow.txt\n    echo \"do_bowtie2_build_hg38: ${params.workflow.bowtie2_build_hg38}\" >> workflow.txt\n    echo \"do_picard_rmDup: ${params.workflow.picard_rmDup}\" >> workflow.txt\n    echo \"do_bam2bigwig: ${params.workflow.bam2bigwig}\" >> workflow.txt\n    echo \"do_map_quality_filter: ${params.workflow.map_quality_filter}\" >> workflow.txt\n    echo \"do_peak_calling_by_seacr: ${params.workflow.seacr}\" >> workflow.txt\n    echo \"do_peak_calling_by_macs2: ${params.workflow.macs2}\" >> workflow.txt\n    echo \"draw heatmap on transcription units: ${params.workflow.heatmap_on_trans}\" >> workflow.txt\n    echo \"draw heatmap on peaks: ${params.workflow.heatmap_on_peak}\" >> workflow.txt\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    echo \"Whether use control group: ${params.use_ctrl}\" >> workflow.txt\n    echo \"do_fastqc: ${params.workflow.fastqc}\" >> workflow.txt\n    echo \"do_trim: ${params.workflow.trim}\" >> workflow.txt\n    echo \"do_bowtie2_build_spikeIn: ${params.workflow.bowtie2_build_ecoli}\" >> workflow.txt\n    echo \"do_bowtie2_build_hg38: ${params.workflow.bowtie2_build_hg38}\" >> workflow.txt\n    echo \"do_picard_rmDup: ${params.workflow.picard_rmDup}\" >> workflow.txt\n    echo \"do_bam2bigwig: ${params.workflow.bam2bigwig}\" >> workflow.txt\n    echo \"do_map_quality_filter: ${params.workflow.map_quality_filter}\" >> workflow.txt\n    echo \"do_peak_calling_by_seacr: ${params.workflow.seacr}\" >> workflow.txt\n    echo \"do_peak_calling_by_macs2: ${params.workflow.macs2}\" >> workflow.txt\n    echo \"draw heatmap on transcription units: ${params.workflow.heatmap_on_trans}\" >> workflow.txt\n    echo \"draw heatmap on peaks: ${params.workflow.heatmap_on_peak}\" >> workflow.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": " process fastqc {\n        publishDir \"${params.result}/fastqc\", mode:\"copy\"\n\n        input:\n        tuple val(group), val(cond), val(id), path(read1), path(read2) from fastqc_ch\n\n        output:\n        path \"*\"\n\n        script:\n        \"\"\"\n        fastqc -f fastq ${read1}\n        fastqc -f fastq ${read2}\n        \"\"\"\n    }",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        fastqc -f fastq ${read1}\n        fastqc -f fastq ${read2}\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "fastqc_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/fastqc\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "trim": {
        "name_process": "trim",
        "string_process": " process trim {\n        publishDir \"${params.result}/trimed_fastqa\", pattern: \"*.fq.gz\", mode:\"copy\"\n        publishDir \"${params.result}/trimed_fastqa/trimmed_repoort\", pattern: \"*.txt\", mode:\"copy\"\n\n        input:\n        tuple val(group), val(cond), val(id), path(read1), path(read2) from align_ch\n\n        output:\n        tuple val(group), val(cond), val(id), path(\"*1.fq.gz\"), path(\"*2.fq.gz\") into (hg38_ch, ecoli_ch)\n        path (\"*.txt\")\n\n        script:\n        \"\"\"\n        trim_galore ${params.args.trim_galore} --paired ${read1} ${read2}\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        trim_galore ${params.args.trim_galore} --paired ${read1} ${read2}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "align_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/trimed_fastqa\", pattern: \"*.fq.gz\", mode:\"copy\"",
            "publishDir \"${params.result}/trimed_fastqa/trimmed_repoort\", pattern: \"*.txt\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "build_index_hg38": {
        "name_process": "build_index_hg38",
        "string_process": " process build_index_hg38{\n        publishDir \"${params.result}/index_hg38\", mode:\"copy\"\n\n        input:\n        path ref_hg38 from ref_hg38_ch\n\n        output:\n        path \"hg38.*\" into index_hg38_ch\n\n        script:\n        \"\"\"\n        bowtie2-build --threads ${params.threads} ${ref_hg38} hg38\n        \"\"\"\n    }",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        bowtie2-build --threads ${params.threads} ${ref_hg38} hg38\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref_hg38_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "index_hg38_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/index_hg38\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "build_index_ecoli": {
        "name_process": "build_index_ecoli",
        "string_process": " process build_index_ecoli{\n        publishDir \"${params.result}/index_ecoli\", mode:\"copy\"\n\n        input:\n        path ref_ecoli from ref_ecoli_ch\n\n        output:\n        path \"ecoli.*\" into index_ecoli_ch\n\n        script:\n        \"\"\"\n        bowtie2-build --threads ${params.threads} ${ref_ecoli} ecoli\n        \"\"\"    \n    }",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        bowtie2-build --threads ${params.threads} ${ref_ecoli} ecoli\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref_ecoli_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "index_ecoli_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/index_ecoli\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "align_hg38": {
        "name_process": "align_hg38",
        "string_process": "\nprocess align_hg38 {\n    publishDir \"${params.result}/alignment/hg38_sam\", mode:\"copy\"\n\n    input:\n    tuple val(group), val(cond), val(id), path(read1), path(read2), path(index) from align_hg38_ch\n\n    output:\n    tuple val(group), val(cond), val(id), path(\"${group}_${id}_bowtie2.sam\") into (sam_hg38_picard_ch, sam_hg38_nopicard_ch)\n    path \"${group}_${id}_bowtie2_hg38.txt\" into bowtie2_report_hg38_ch\n\n    script:\n    index_base = index[0].toString() - ~/.rev.\\d.bt2?/ - ~/.\\d.bt2?/\n    \"\"\"\n    bowtie2 ${params.args.bowtie2_align_target} -p ${params.threads} \\\n    -x $index_base -1 ${read1} -2 ${read2} \\\n    -S ${group}_${id}_bowtie2.sam &>${group}_${id}_bowtie2_hg38.txt\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    index_base = index[0].toString() - ~/.rev.\\d.bt2?/ - ~/.\\d.bt2?/\n    \"\"\"\n    bowtie2 ${params.args.bowtie2_align_target} -p ${params.threads} \\\n    -x $index_base -1 ${read1} -2 ${read2} \\\n    -S ${group}_${id}_bowtie2.sam &>${group}_${id}_bowtie2_hg38.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Rbowtie2"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            }
        ],
        "inputs": [
            "align_hg38_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "bowtie2_report_hg38_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/alignment/hg38_sam\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "align_ecoli": {
        "name_process": "align_ecoli",
        "string_process": "\nprocess align_ecoli {\n    publishDir \"${params.result}/alignment/spikeIn_sam\", mode:\"copy\"\n\n    input:\n    tuple val(group), val(cond), val(id), path(read1), path(read2), path(index) from align_ecoli_ch\n\n    output:\n    tuple val(group), val(cond), val(id), path(\"${group}_${id}_bowtie2_spikeIn.sam\")\n    path \"${group}_${id}_bowtie2_spikeIn.txt\" into bowtie2_report_spikeIn_ch\n    tuple val(group), val(cond), val(id), path (\"${group}_${id}_spikeIn.seqDepth\") into (seqdepth_4_bedgraph_ch, seqdepth_4_R_ch)\n\n    script:\n    index_base = index[0].toString() - ~/.rev.\\d.bt2?/ - ~/.\\d.bt2?/\n    \"\"\"\n    # align to ecoli\n    bowtie2 ${params.args.bowtie2_align_spikein} -p ${params.threads} \\\n    -x $index_base -1 ${read1} -2 ${read2} \\\n    -S ${group}_${id}_bowtie2_spikeIn.sam &> ${group}_${id}_bowtie2_spikeIn.txt\n\n    # count seqDepth\n    seqDepthDouble=`samtools view ${params.args.samtool_seqDepth_view} ${group}_${id}_bowtie2_spikeIn.sam | wc -l`\n    seqDepth=\\$((seqDepthDouble/2))\n    echo \\$seqDepth > ${group}_${id}_spikeIn.seqDepth\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    index_base = index[0].toString() - ~/.rev.\\d.bt2?/ - ~/.\\d.bt2?/\n    \"\"\"\n    # align to ecoli\n    bowtie2 ${params.args.bowtie2_align_spikein} -p ${params.threads} \\\n    -x $index_base -1 ${read1} -2 ${read2} \\\n    -S ${group}_${id}_bowtie2_spikeIn.sam &> ${group}_${id}_bowtie2_spikeIn.txt\n\n    # count seqDepth\n    seqDepthDouble=`samtools view ${params.args.samtool_seqDepth_view} ${group}_${id}_bowtie2_spikeIn.sam | wc -l`\n    seqDepth=\\$((seqDepthDouble/2))\n    echo \\$seqDepth > ${group}_${id}_spikeIn.seqDepth\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "Rbowtie2"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            }
        ],
        "inputs": [
            "align_ecoli_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "id",
            "bowtie2_report_spikeIn_ch",
            ""
        ],
        "nb_outputs": 3,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/alignment/spikeIn_sam\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "picard_rmDup": {
        "name_process": "picard_rmDup",
        "string_process": "\nprocess picard_rmDup {\n    publishDir \"${params.result}/alignment/hg38_sam\", pattern:\"*_sorted.sam\", mode:\"copy\"\n    publishDir \"${params.result}/alignment/removeDuplicate\", pattern:\"*_*Dup.sam\", mode:\"copy\"\n    publishDir \"${params.result}/alignment/removeDuplicate/picard_summary\", pattern:\"*_*Dup.txt\", mode:\"copy\"\n\n    input:\n    tuple val(group), val(cond), val(id), path(ori_sam) from sam_hg38_picard_ch\n\n    output:\n    tuple val(group), val(cond), val(id), path(\"${group}_${id}_sorted.sam\")\n    tuple val(group), val(cond), val(id), path(\"${group}_${id}_markDup.sam\")\n    path (\"${group}_${id}_markDup.txt\")\n    tuple val(group), val(cond), val(id), path(\"${group}_${id}_rmDup.sam\") into rmdup_sam_ch\n    path \"${group}_${id}_rmDup.txt\" into rmdup_report_ch\n\n    script:\n    \"\"\"\n    picard SortSam -I ${ori_sam} -O ${group}_${id}_sorted.sam ${params.args.picard_sort}\n    picard MarkDuplicates -I ${group}_${id}_sorted.sam -O ${group}_${id}_markDup.sam --METRICS_FILE ${group}_${id}_markDup.txt\n    picard MarkDuplicates -I ${group}_${id}_sorted.sam -O ${group}_${id}_rmDup.sam --REMOVE_DUPLICATES true -METRICS_FILE ${group}_${id}_rmDup.txt\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    picard SortSam -I ${ori_sam} -O ${group}_${id}_sorted.sam ${params.args.picard_sort}\n    picard MarkDuplicates -I ${group}_${id}_sorted.sam -O ${group}_${id}_markDup.sam --METRICS_FILE ${group}_${id}_markDup.txt\n    picard MarkDuplicates -I ${group}_${id}_sorted.sam -O ${group}_${id}_rmDup.sam --REMOVE_DUPLICATES true -METRICS_FILE ${group}_${id}_rmDup.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "sam_hg38_picard_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "id",
            "id",
            "rmdup_sam_ch",
            "rmdup_report_ch"
        ],
        "nb_outputs": 4,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/alignment/hg38_sam\", pattern:\"*_sorted.sam\", mode:\"copy\"",
            "publishDir \"${params.result}/alignment/removeDuplicate\", pattern:\"*_*Dup.sam\", mode:\"copy\"",
            "publishDir \"${params.result}/alignment/removeDuplicate/picard_summary\", pattern:\"*_*Dup.txt\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "assess_frag_size_distribution": {
        "name_process": "assess_frag_size_distribution",
        "string_process": "\nprocess assess_frag_size_distribution {\n    publishDir \"${params.result}/alignment/sam/fragmentLen\", mode: 'copy'\n\n    input:\n    tuple val(group), val(cond), val(id), path(sam) from sam4assess_frag\n\n    output:\n    path(\"${group}_${id}_fragmentLen.txt\") into fragmentLen_ch\n\n    script:\n    \"\"\"\n    samtools view ${params.args.samtool_assess_frag} ${sam} | ${params.args.assess_frag} > ${group}_${id}_fragmentLen.txt\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    samtools view ${params.args.samtool_assess_frag} ${sam} | ${params.args.assess_frag} > ${group}_${id}_fragmentLen.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sam4assess_frag"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fragmentLen_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/alignment/sam/fragmentLen\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "quality_filter": {
        "name_process": "quality_filter",
        "string_process": " process quality_filter {\n        publishDir \"${params.result}/alignment/hg38_filterScore_${params.agrs.filter_miniQualityScore}_sam\", mode:\"copy\"\n\n        input:\n        tuple val(group), val(cond), val(id), path(sam) from sam4filter_ch\n\n        output:\n        tuple val(group), val(cond), val(id), path(\"${group}_${id}_*.sam\") into sam2bam_ch\n\n        script:\n        \"\"\"\n        samtools view -q ${params.agrs.filter_miniQualityScore} ${sam} >${group}_${id}_qualityScore${params.agrs.filter_miniQualityScore}.sam\n        \"\"\"\n    }",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        samtools view -q ${params.agrs.filter_miniQualityScore} ${sam} >${group}_${id}_qualityScore${params.agrs.filter_miniQualityScore}.sam\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sam4filter_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sam2bam_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/alignment/hg38_filterScore_${params.agrs.filter_miniQualityScore}_sam\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "sam2bam": {
        "name_process": "sam2bam",
        "string_process": "\nprocess sam2bam {\n    publishDir \"${params.result}/alignment/bam\", mode: \"copy\"\n\n    input:\n    tuple val(group), val(cond), val(id), path(sam) from sam2bam_ch\n\n    output:\n    tuple val(group), val(cond), val(id), path(\"${group}_${id}_mapped.bam\") into (bam2bed_ch, bam2bigwig_ch, bam4macs2_ch, bam4seacr_report_ch, bam4macs2_report_ch)\n    tuple val(group), val(cond), val(id), path(\"${group}_${id}_sorted.bam\") into sort_bam_ch\n\n    script:\n    \"\"\"\n    samtools view ${params.args.samtool_sam2bam_view} ${sam} > ${group}_${id}_mapped.bam\n    samtools sort ${group}_${id}_mapped.bam -o ${group}_${id}_sorted.bam\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    samtools view ${params.args.samtool_sam2bam_view} ${sam} > ${group}_${id}_mapped.bam\n    samtools sort ${group}_${id}_mapped.bam -o ${group}_${id}_sorted.bam\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sam2bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "sort_bam_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/alignment/bam\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "bam2bed": {
        "name_process": "bam2bed",
        "string_process": "\nprocess bam2bed {\n    publishDir \"${params.result}/alignment/bed\", mode: \"copy\"\n\n    input:\n    tuple val(group), val(cond), val(id), path(mapped_bam) from bam2bed_ch\n\n    output:\n    tuple val(group), val(cond), val(id), path(\"${group}_${id}.bed\") into bed_ch\n    tuple val(group), val(cond), val(id), path(\"${group}_${id}_clean.bed\") into clean_bed_ch\n    tuple val(group), val(cond), val(id), path(\"${group}_${id}_fragments.bed\") into (fragBed_assess_ch, fragBed_convert_ch)\n    \n    script:\n    \"\"\"\n    bedtools bamtobed -i ${mapped_bam} ${params.args.bedtool_bam2bed} > ${group}_${id}.bed\n    awk ${params.args.clean_bed} ${group}_${id}.bed > ${group}_${id}_clean.bed\n    cut ${params.args.frag_bed_cut} ${group}_${id}_clean.bed | sort ${params.args.frag_bed_sort} > ${group}_${id}_fragments.bed\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    bedtools bamtobed -i ${mapped_bam} ${params.args.bedtool_bam2bed} > ${group}_${id}.bed\n    awk ${params.args.clean_bed} ${group}_${id}.bed > ${group}_${id}_clean.bed\n    cut ${params.args.frag_bed_cut} ${group}_${id}_clean.bed | sort ${params.args.frag_bed_sort} > ${group}_${id}_fragments.bed\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "bam2bed_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bed_ch",
            "clean_bed_ch",
            ""
        ],
        "nb_outputs": 3,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/alignment/bed\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "bed2bedgraph": {
        "name_process": "bed2bedgraph",
        "string_process": "\nprocess bed2bedgraph {\n    echo true\n    publishDir \"${params.result}/alignment/bedgraph\", mode: \"copy\"\n\n    input:\n    tuple val(group), val(cond), val(id), path(seq_Depth), path(fragbed) from bed2bedgraph_ch\n\n    output:\n    tuple val(group), val(cond), val(id), path (\"${group}_${id}_*.bedgraph\") into bedgraph_ch\n\n    script:\n    \"\"\"\n    seqDepth=`cat ${seq_Depth}`\n    if [[ \"\\$seqDepth\" -gt \"1\" ]]; then\n        scale_factor=`echo \"${params.args.constant_C} / \\$seqDepth\"| bc -l`\n        bedtools genomecov -bg -scale \\$scale_factor -i ${fragbed} -g ${params.genome_size} > ${group}_${id}_fragments.normalized.bedgraph\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    seqDepth=`cat ${seq_Depth}`\n    if [[ \"\\$seqDepth\" -gt \"1\" ]]; then\n        scale_factor=`echo \"${params.args.constant_C} / \\$seqDepth\"| bc -l`\n        bedtools genomecov -bg -scale \\$scale_factor -i ${fragbed} -g ${params.genome_size} > ${group}_${id}_fragments.normalized.bedgraph\n    fi\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "bed2bedgraph_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bedgraph_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "echo true",
            "publishDir \"${params.result}/alignment/bedgraph\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "bam2bigwig": {
        "name_process": "bam2bigwig",
        "string_process": " process bam2bigwig {\n        publishDir \"${params.result}/alignment/bigwig\", mode:\"copy\"\n\n        input:\n        tuple val(group), val(cond), val(id), path(sort_bam) from exp_bam_ch\n\n        output:\n        tuple val(group), val(id), path(\"${group}_${id}_raw.bw\") into (bw4trans_ch, bw4seacr_ch, bw4macs2_ch)\n\n        script:\n        \"\"\"\n        samtools index ${sort_bam}\n        bamCoverage -b ${sort_bam} -o ${group}_${id}_raw.bw\n        \"\"\"  \n    }",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        samtools index ${sort_bam}\n        bamCoverage -b ${sort_bam} -o ${group}_${id}_raw.bw\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "exp_bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/alignment/bigwig\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "assess_reproducibility": {
        "name_process": "assess_reproducibility",
        "string_process": "\nprocess assess_reproducibility {\n    publishDir \"${params.result}/alignment/bed\", mode: \"copy\"\n\n    input:\n    tuple val(group), val(cond), val(id), path(frag_bed) from fragBed_assess_ch\n\n    output:\n    path(\"${group}_${id}_*.bed\") into fragcount_bed_ch\n\n    script:\n    \"\"\"\n    awk ${params.args.awk_binLen} ${frag_bed} | ${params.args.assess_reproducibility} > ${group}_${id}_fragmentsCount.bin${params.args.binLen}.bed\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    awk ${params.args.awk_binLen} ${frag_bed} | ${params.args.assess_reproducibility} > ${group}_${id}_fragmentsCount.bin${params.args.binLen}.bed\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fragBed_assess_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fragcount_bed_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/alignment/bed\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "align_summary_R": {
        "name_process": "align_summary_R",
        "string_process": "\nprocess align_summary_R {\n    publishDir \"${params.result}/report_R\", mode: \"copy\"\n\n    input:\n    path(hg38) from bowtie2_report_hg38_ch.collect()\n    path(spikeIn) from bowtie2_report_spikeIn_ch.collect()\n    path(picard) from rmdup_report_ch.collect()\n    path(fragLen) from fragmentLen_ch.collect()\n    path(bed) from fragcount_bed_ch.collect()\n    path(seqDepth) from seqDepth_file_ch.collect()\n    \n    output:\n    path(\"Alignment_summary.csv\") into (alignsummary4Seacr_ch, alignsummary4Macs2_ch)\n    path(\"Sequencing_Depth_Summary.png\")\n    path(\"Duplicate_Summary.png\")\n    path(\"fragment_size_summary.png\")\n    path(\"Replicate_Reproducibility.png\")\n    path(\"Sequencing_depth.png\")\n    \n    script:\n    \"\"\"\n    Rscript \"$projectDir/alignment_report.r\" $hg38 $spikeIn $picard $fragLen $bed $seqDepth\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    Rscript \"$projectDir/alignment_report.r\" $hg38 $spikeIn $picard $fragLen $bed $seqDepth\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bowtie2_report_hg38_ch",
            "bowtie2_report_spikeIn_ch",
            "rmdup_report_ch",
            "fragmentLen_ch",
            "fragcount_bed_ch",
            "seqDepth_file_ch"
        ],
        "nb_inputs": 6,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/report_R\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "seacr_with_ctrl": {
        "name_process": "seacr_with_ctrl",
        "string_process": " process seacr_with_ctrl {\n            publishDir \"${params.result}/peakcalling/seacr\", mode: \"copy\"\n\n            input:\n            tuple val(group), val(ctrl), val(ctrl_id), path(ctrl_file), val(exp), val(exp_id), path(exp_file) from seacr_ch \n\n            output:\n            tuple val(group), val(exp_id), path(\"${group}_${exp_id}_seacr_ctrl_peaks.*\") into (seacr_ctrl4hp_ch, seacr_ctrl4report_ch)\n            tuple val(group), val(exp_id), path(\"${group}_${exp_id}_seacr_top${params.args.seacr_top}_peaks.*\") into seacr_top4report_ch\n\n            script:\n            \"\"\"\n            bash ${params.seacr_sh} ${exp_file} ${ctrl_file} ${params.args.seacr_norm_mode} ${group}_${exp_id}_seacr_ctrl_peaks\n            bash ${params.seacr_sh} ${exp_file} ${params.args.seacr_top} ${params.args.seacr_norm_mode} ${group}_${exp_id}_seacr_top${params.args.seacr_top}_peaks\n            \"\"\"\n       }",
        "nb_lignes_process": 14,
        "string_script": "            \"\"\"\n            bash ${params.seacr_sh} ${exp_file} ${ctrl_file} ${params.args.seacr_norm_mode} ${group}_${exp_id}_seacr_ctrl_peaks\n            bash ${params.seacr_sh} ${exp_file} ${params.args.seacr_top} ${params.args.seacr_norm_mode} ${group}_${exp_id}_seacr_top${params.args.seacr_top}_peaks\n            \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seacr_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "seacr_top4report_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/peakcalling/seacr\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "seacr_with_ctrl_R": {
        "name_process": "seacr_with_ctrl_R",
        "string_process": " process seacr_with_ctrl_R {\n            publishDir \"${params.result}/report_R\", mode: 'copy'\n\n            input:\n            path(peak_ctrl) from seacr_ctrl4r_ch.collect()\n            path(peak_top) from seacr_top4r_ch.collect()\n            path(bam) from seacr_bam_ch.collect()\n            path(alignSummary) from alignsummary4Seacr_ch\n\n            output:\n\n            path(\"seacr_peak_summary.csv\")\n            path(\"seacr_frip_summary.csv\")\n            path(\"seacr_frip_summary.png\")\n        \n            script:\n            \"\"\"\n            Rscript \"$projectDir/peak_seacr.r\" $peak_ctrl $peak_top $bam $alignSummary\n            \"\"\"\n        }",
        "nb_lignes_process": 18,
        "string_script": "            \"\"\"\n            Rscript \"$projectDir/peak_seacr.r\" $peak_ctrl $peak_top $bam $alignSummary\n            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seacr_ctrl4r_ch",
            "seacr_top4r_ch",
            "seacr_bam_ch",
            "alignsummary4Seacr_ch"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/report_R\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "macs2": {
        "name_process": "macs2",
        "string_process": " process macs2 {\n            publishDir \"${params.result}/peakcalling/macs2\", mode: \"copy\"\n\n            input:\n            tuple val(group), val(ctr), val(ctr_id), path(ctrl_bam), val(exp), val(exp_id), path(exp_bam) from macs2_ch\n\n            output:\n            tuple val(group), val(exp_id), path(\"${group}_${exp_id}.macs2_*_summary.txt\")\n            tuple val(group), val(exp_id), path(\"${group}_${exp_id}_macs2_*_peaks.xls\")\n            tuple val(group), val(exp_id), path(\"${group}_${exp_id}_macs2_topq*_summits.bed\")\n\n            tuple val(group), val(exp_id), path(\"${group}_${exp_id}_macs2_baseq*_summits.bed\") into macs2_4hp_ch\n            tuple val(group), val(exp_id), path(\"${group}_${exp_id}_macs2_*_peaks.narrowPeak\") into macs2_4report_ch\n\n            script:\n            \"\"\"\n            macs2 callpeak -t ${exp_bam} -c ${ctrl_bam} ${params.args.macs2_args} -q ${params.args.macs2_base_qvalue} -n ${group}_${exp_id}_macs2_baseq${params.args.macs2_base_qvalue} 2>${group}_${exp_id}.macs2_base_summary.txt\n            macs2 callpeak -t ${exp_bam} -c ${ctrl_bam} ${params.args.macs2_args} -q ${params.args.macs2_top_qvalue} -n ${group}_${exp_id}_macs2_topq${params.args.macs2_top_qvalue} 2>${group}_${exp_id}.macs2_top_summary.txt\n\n            \"\"\"\n        }",
        "nb_lignes_process": 19,
        "string_script": "            \"\"\"\n            macs2 callpeak -t ${exp_bam} -c ${ctrl_bam} ${params.args.macs2_args} -q ${params.args.macs2_base_qvalue} -n ${group}_${exp_id}_macs2_baseq${params.args.macs2_base_qvalue} 2>${group}_${exp_id}.macs2_base_summary.txt\n            macs2 callpeak -t ${exp_bam} -c ${ctrl_bam} ${params.args.macs2_args} -q ${params.args.macs2_top_qvalue} -n ${group}_${exp_id}_macs2_topq${params.args.macs2_top_qvalue} 2>${group}_${exp_id}.macs2_top_summary.txt\n\n            \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "macs2_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "exp_id",
            "exp_id",
            "exp_id",
            "macs2_4hp_ch",
            "macs2_4report_ch"
        ],
        "nb_outputs": 5,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/peakcalling/macs2\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "macs2_R": {
        "name_process": "macs2_R",
        "string_process": " process macs2_R {\n            publishDir \"${params.result}/report_R\", mode: 'copy'\n\n            input:\n            path(peak) from macs2_4r_ch.collect()\n            path(bam) from macs2_bam_ch.collect()\n            path(alignSummary) from alignsummary4Macs2_ch\n\n            output:\n\n            path(\"macs2_peak_summary.csv\")\n            path(\"macs2_frip_summary.csv\")\n            path(\"macs2_frip_summary.png\")\n        \n            script:\n            \"\"\"\n            Rscript \"$projectDir/peak_macs2.r\" $peak $bam $alignSummary\n            \"\"\"\n        }",
        "nb_lignes_process": 17,
        "string_script": "            \"\"\"\n            Rscript \"$projectDir/peak_macs2.r\" $peak $bam $alignSummary\n            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "macs2_4r_ch",
            "macs2_bam_ch",
            "alignsummary4Macs2_ch"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/report_R\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "seacr_without_ctrl": {
        "name_process": "seacr_without_ctrl",
        "string_process": " process seacr_without_ctrl {\n        publishDir \"${params.result}/peakcalling/seacr\", mode: \"copy\"\n\n        input:\n        tuple val(group), val(cond), val(id), path(bedgraph) from bedgraph_ch\n\n        output:\n        tuple val(group), val(id), path(\"${group}_${id}_seacr_noctrl_top*_peaks.*\") into (seacr_noctrl4hp_ch, seacr_noctrl4report_ch)\n        tuple val(group), val(id), path (\"${group}_${id}_seacr_top${params.args.seacr_top}_peaks.*\") into seacr_top4report_ch\n\n        script:\n        \"\"\"\n        bash ${params.seacr_sh} ${bedgraph} ${params.args.seacr_threshold_noconrl} ${params.args.seacr_norm_mode} ${group}_${id}_seacr_noctrl_top${params.args.seacr_threshold_noconrl}_peaks\n        bash ${params.seacr_sh} ${bedgraph} ${params.args.seacr_top} ${params.args.seacr_norm_mode} ${group}_${id}_seacr_top${params.args.seacr_top}_peaks\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        bash ${params.seacr_sh} ${bedgraph} ${params.args.seacr_threshold_noconrl} ${params.args.seacr_norm_mode} ${group}_${id}_seacr_noctrl_top${params.args.seacr_threshold_noconrl}_peaks\n        bash ${params.seacr_sh} ${bedgraph} ${params.args.seacr_top} ${params.args.seacr_norm_mode} ${group}_${id}_seacr_top${params.args.seacr_top}_peaks\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bedgraph_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "seacr_top4report_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/peakcalling/seacr\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "seacr_without_ctrl_report": {
        "name_process": "seacr_without_ctrl_report",
        "string_process": " process seacr_without_ctrl_report {\n    publishDir \"${params.result}/report_R\", mode: 'copy'\n\n    input:\n    path(peak_noctrl) from seacr_noctrl4r_ch.collect()\n    path(peak_top) from seacr_top4r_ch.collect()\n    path(bam) from seacr_bam_ch.collect()\n    path(alignSummary) from alignsummary4Seacr_ch\n\n    output:\n    path(\"seacr_peak_summary.csv\")\n    path(\"seacr_frip_summary.csv\")\n    path(\"seacr_frip_summary.png\")\n\n    script:\n    \"\"\"\n    Rscript \"$projectDir/peak_seacr.r\" $peak_noctrl $peak_top $bam $alignSummary\n    \"\"\"\n    }",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    Rscript \"$projectDir/peak_seacr.r\" $peak_noctrl $peak_top $bam $alignSummary\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seacr_noctrl4r_ch",
            "seacr_top4r_ch",
            "seacr_bam_ch",
            "alignsummary4Seacr_ch"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/report_R\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "trans_heatmap": {
        "name_process": "trans_heatmap",
        "string_process": " process trans_heatmap {\n        publishDir \"${params.result}/heatmap/matrix\", pattern:\"*.mat.gz\", mode:\"copy\"\n        publishDir \"${params.result}/heatmap\", pattern:\"*.png\", mode:\"copy\"\n        \n        input:\n        path(ref) from ref_heatmap_ch\n        path(bw) from bw4trans_collect_ch\n        \n        output:\n        path(\"matrix_gene.mat.gz\")\n        path(\"Over_Transcription_Units.png\")\n        \n        script:\n        \"\"\"\n        computeMatrix scale-regions -p ${params.threads} -S ${bw} -R ${ref} -o matrix_gene.mat.gz ${params.args.matrix_transcription}\n        plotHeatmap -m matrix_gene.mat.gz -out Over_Transcription_Units.png ${params.args.plot_transcription}\n        \"\"\"\n    }",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        computeMatrix scale-regions -p ${params.threads} -S ${bw} -R ${ref} -o matrix_gene.mat.gz ${params.args.matrix_transcription}\n        plotHeatmap -m matrix_gene.mat.gz -out Over_Transcription_Units.png ${params.args.plot_transcription}\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref_heatmap_ch",
            "bw4trans_collect_ch"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/heatmap/matrix\", pattern:\"*.mat.gz\", mode:\"copy\"",
            "publishDir \"${params.result}/heatmap\", pattern:\"*.png\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "seacr_summitregion": {
        "name_process": "seacr_summitregion",
        "string_process": " process seacr_summitregion{\n                publishDir \"${params.result}/peakcalling/seacr\", mode:\"copy\"\n\n                input:\n                tuple val(group), val(id), path(ctrl_peak) from seacr_ctrl4hp_ch\n\n                output:\n                tuple val(group), val(id), path(\"${group}_${id}_seacr_control_peaks.summitRegion.bed\") into seacr_summit_ch\n\n                script:\n                \"\"\"\n                awk ${params.args.seacr_summit_awk} ${ctrl_peak} > ${group}_${id}_seacr_control_peaks.summitRegion.bed\n                \"\"\"\n            }",
        "nb_lignes_process": 12,
        "string_script": "                \"\"\"\n                awk ${params.args.seacr_summit_awk} ${ctrl_peak} > ${group}_${id}_seacr_control_peaks.summitRegion.bed\n                \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seacr_ctrl4hp_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "seacr_summit_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/peakcalling/seacr\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "seacr_withCtrl_heatmap": {
        "name_process": "seacr_withCtrl_heatmap",
        "string_process": " process seacr_withCtrl_heatmap {\n                publishDir \"${params.result}/heatmap/matrix\", pattern:\"*.mat.gz\", mode:\"copy\"\n                publishDir \"${params.result}/heatmap\", pattern:\"*.png\", mode:\"copy\"\n\n                input:\n                tuple val(group), val(id), path(sr_bed), path(bw) from bw_seacr_ch\n\n                output:\n                tuple val(group), val(id), path(\"${group}_${id}_seacr_withCtrl.mat.gz\")\n                tuple val(group), val(id), path(\"${group}_${id}_seacr_withCtrl.png\")\n\n                script:\n                \"\"\"\n                computeMatrix reference-point -p ${params.threads} -S ${bw} -R ${sr_bed} -o ${group}_${id}_seacr_withCtrl.mat.gz ${params.args.matrix_peak}\n                plotHeatmap -m ${group}_${id}_seacr_withCtrl.mat.gz -out ${group}_${id}_seacr_withCtrl.png ${params.args.plot_peak} --samplesLabel \"${id} group: ${group}\"\n                \"\"\"\n            }",
        "nb_lignes_process": 15,
        "string_script": "                \"\"\"\n                computeMatrix reference-point -p ${params.threads} -S ${bw} -R ${sr_bed} -o ${group}_${id}_seacr_withCtrl.mat.gz ${params.args.matrix_peak}\n                plotHeatmap -m ${group}_${id}_seacr_withCtrl.mat.gz -out ${group}_${id}_seacr_withCtrl.png ${params.args.plot_peak} --samplesLabel \"${id} group: ${group}\"\n                \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bw_seacr_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "id",
            "id"
        ],
        "nb_outputs": 2,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/heatmap/matrix\", pattern:\"*.mat.gz\", mode:\"copy\"",
            "publishDir \"${params.result}/heatmap\", pattern:\"*.png\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "macs2_heatmap": {
        "name_process": "macs2_heatmap",
        "string_process": " process macs2_heatmap {\n                publishDir \"${params.result}/heatmap/matrix\", pattern:\"*_macs2.mat.gz\", mode:\"copy\"\n                publishDir \"${params.result}/heatmap\", pattern:\"*_macs2.png\", mode:\"copy\"\n\n                input:\n                tuple val(group), val(id), path(macs_bed), path(bw) from bw_macs2_ch\n\n                output:\n                tuple val(group), val(id), path(\"${group}_${id}_macs2.mat.gz\")\n                tuple val(group), val(id), path(\"${group}_${id}_macs2.png\")\n\n                script:\n                \"\"\"\n                computeMatrix reference-point -p ${params.threads} -S ${bw} -R ${macs_bed} -o ${group}_${id}_macs2.mat.gz ${params.args.matrix_peak}\n                plotHeatmap -m ${group}_${id}_macs2.mat.gz -out ${group}_${id}_macs2.png ${params.args.plot_peak} --samplesLabel \"${id} group: ${group}\"\n                \"\"\"\n            }",
        "nb_lignes_process": 15,
        "string_script": "                \"\"\"\n                computeMatrix reference-point -p ${params.threads} -S ${bw} -R ${macs_bed} -o ${group}_${id}_macs2.mat.gz ${params.args.matrix_peak}\n                plotHeatmap -m ${group}_${id}_macs2.mat.gz -out ${group}_${id}_macs2.png ${params.args.plot_peak} --samplesLabel \"${id} group: ${group}\"\n                \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bw_macs2_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "id",
            "id"
        ],
        "nb_outputs": 2,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/heatmap/matrix\", pattern:\"*_macs2.mat.gz\", mode:\"copy\"",
            "publishDir \"${params.result}/heatmap\", pattern:\"*_macs2.png\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "seacr_noCtrl_summitregion": {
        "name_process": "seacr_noCtrl_summitregion",
        "string_process": " process seacr_noCtrl_summitregion{\n            publishDir \"${params.result}/peakcalling/seacr\", mode:\"copy\"\n\n            input:\n            tuple val(group), val(id), path(ctrl_peak) from seacr_noctrl4hp_ch\n\n            output:\n            tuple val(group), val(id), path(\"${group}_${id}_seacr_noctrl_peaks.summitRegion.bed\") into seacr_summit_ch\n\n            script:\n            \"\"\"\n            awk ${params.args.seacr_summit_awk} ${ctrl_peak} > ${group}_${id}_seacr_nortcl_peaks.summitRegion.bed\n            \"\"\"\n        }",
        "nb_lignes_process": 12,
        "string_script": "            \"\"\"\n            awk ${params.args.seacr_summit_awk} ${ctrl_peak} > ${group}_${id}_seacr_nortcl_peaks.summitRegion.bed\n            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seacr_noctrl4hp_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "seacr_summit_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/peakcalling/seacr\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "seacr_noCtrl_heatmap": {
        "name_process": "seacr_noCtrl_heatmap",
        "string_process": " process seacr_noCtrl_heatmap {\n            publishDir \"${params.result}/heatmap/matrix\", pattern:\"*_seacr_noCtrl.mat.gz\", mode:\"copy\"\n            publishDir \"${params.result}/heatmap\", pattern:\"*_seacr_noCtrl.png\", mode:\"copy\"\n\n            input:\n            tuple val(group), val(id), path(sr_bed), path(bw) from bw_seacr_ch\n\n            output:\n            tuple val(group), val(id), path(\"${group}_${id}_seacr_noCtrl.mat.gz\")\n            tuple val(group), val(id), path(\"${group}_${id}_seacr_noCtrl.png\")\n\n            script:\n            \"\"\"\n            computeMatrix reference-point -p ${params.threads} -S ${bw} -R ${sr_bed} -o ${group}_${id}_seacr_noCtrl.mat.gz ${params.args.matrix_peak}\n            plotHeatmap -m ${group}_${id}_seacr_noCtrl.mat.gz -out ${group}_${id}_seacr_noCtrl.png ${params.args.plot_peak} --samplesLabel \"${id} group: ${group}\"\n            \"\"\"\n        }",
        "nb_lignes_process": 15,
        "string_script": "            \"\"\"\n            computeMatrix reference-point -p ${params.threads} -S ${bw} -R ${sr_bed} -o ${group}_${id}_seacr_noCtrl.mat.gz ${params.args.matrix_peak}\n            plotHeatmap -m ${group}_${id}_seacr_noCtrl.mat.gz -out ${group}_${id}_seacr_noCtrl.png ${params.args.plot_peak} --samplesLabel \"${id} group: ${group}\"\n            \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bw_seacr_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "id",
            "id"
        ],
        "nb_outputs": 2,
        "name_workflow": "plateau-gao__CUTnTag",
        "directive": [
            "publishDir \"${params.result}/heatmap/matrix\", pattern:\"*_seacr_noCtrl.mat.gz\", mode:\"copy\"",
            "publishDir \"${params.result}/heatmap\", pattern:\"*_seacr_noCtrl.png\", mode:\"copy\""
        ],
        "when": "",
        "stub": ""
    }
}
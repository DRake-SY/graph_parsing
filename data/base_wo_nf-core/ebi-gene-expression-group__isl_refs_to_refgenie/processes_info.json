{
    "find_current_reference_files": {
        "name_process": "find_current_reference_files",
        "string_process": "\nprocess find_current_reference_files {\n\n    errorStrategy 'finish'\n    conda \"${baseDir}/envs/refgenie.yml\"\n    \n    input: \n        file(confFile) from IRAP_CONFIGS\n\n    output:\n        tuple file('species.txt'), file('assembly.txt'), file('release.txt'), file('reference.txt'), file('cdna_file.txt'), file('gtf_file.txt'), file('tags.txt'), file('build.txt') into CURRENT_REF_FILES\n\n    \"\"\"\n    set +e\n    species=\\$(grep \"species=\" $confFile | awk -F'=' '{print \\$2}' | tr -d '\\\\n')\n    assembly=\\$(detect_current_isl_genome_assembly.sh $confFile ${params.islGenomes})\n    release=\\$(detect_current_isl_genome_release.sh $confFile \"${params.islGenomes}\")\n    fileRoot=${params.irapDataDir}/reference/\\$species\n    reference=\\$(echo -n \\${fileRoot}/\\$(grep \"^reference=\" $confFile | awk -F'=' '{print \\$2}' | tr -d '\\\\n'))    \n    cdna_file=\\$(echo -n \\${fileRoot}/\\$(grep \"^cdna_file=\" $confFile | awk -F'=' '{print \\$2}' | tr -d '\\\\n'))    \n    gtf_file=\\$(echo -n \\${fileRoot}/\\$(grep \"^gtf_file=\" $confFile | awk -F'=' '{print \\$2}' | tr -d '\\\\n'))    \n    tag='current'\n\n    env COLUMNS=500 check_refgenie_status.sh \"\\$species\" \"\\$assembly\" \"\\$release\" \"\\$reference\" \"\\$cdna_file\" \"\\$gtf_file\" \"\\$tag\"\n\n    if [ \\$? -eq 1 ]; then\n        build='true'\n    else\n        build='false'\n    fi\n    \n    echo -n \"\\$species\" > species.txt\n    echo -n \"\\$assembly\" > assembly.txt\n    echo -n \"\\$release\" > release.txt\n    echo -n \"\\$reference\" > reference.txt\n    echo -n \"\\$cdna_file\" > cdna_file.txt\n    echo -n \"\\$gtf_file\" > gtf_file.txt\n    echo -n \"\\$tag\" > tags.txt\n    echo -n \"\\$build\" > build.txt\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "\"\"\"\n    set +e\n    species=\\$(grep \"species=\" $confFile | awk -F'=' '{print \\$2}' | tr -d '\\\\n')\n    assembly=\\$(detect_current_isl_genome_assembly.sh $confFile ${params.islGenomes})\n    release=\\$(detect_current_isl_genome_release.sh $confFile \"${params.islGenomes}\")\n    fileRoot=${params.irapDataDir}/reference/\\$species\n    reference=\\$(echo -n \\${fileRoot}/\\$(grep \"^reference=\" $confFile | awk -F'=' '{print \\$2}' | tr -d '\\\\n'))    \n    cdna_file=\\$(echo -n \\${fileRoot}/\\$(grep \"^cdna_file=\" $confFile | awk -F'=' '{print \\$2}' | tr -d '\\\\n'))    \n    gtf_file=\\$(echo -n \\${fileRoot}/\\$(grep \"^gtf_file=\" $confFile | awk -F'=' '{print \\$2}' | tr -d '\\\\n'))    \n    tag='current'\n\n    env COLUMNS=500 check_refgenie_status.sh \"\\$species\" \"\\$assembly\" \"\\$release\" \"\\$reference\" \"\\$cdna_file\" \"\\$gtf_file\" \"\\$tag\"\n\n    if [ \\$? -eq 1 ]; then\n        build='true'\n    else\n        build='false'\n    fi\n    \n    echo -n \"\\$species\" > species.txt\n    echo -n \"\\$assembly\" > assembly.txt\n    echo -n \"\\$release\" > release.txt\n    echo -n \"\\$reference\" > reference.txt\n    echo -n \"\\$cdna_file\" > cdna_file.txt\n    echo -n \"\\$gtf_file\" > gtf_file.txt\n    echo -n \"\\$tag\" > tags.txt\n    echo -n \"\\$build\" > build.txt\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "IRAP_CONFIGS"
        ],
        "nb_inputs": 1,
        "outputs": [
            "CURRENT_REF_FILES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "errorStrategy 'finish'",
            "conda \"${baseDir}/envs/refgenie.yml\""
        ],
        "when": "",
        "stub": ""
    },
    "find_newest_reference_files": {
        "name_process": "find_newest_reference_files",
        "string_process": "\nprocess find_newest_reference_files {\n\n    errorStrategy 'finish'\n    conda \"${baseDir}/envs/refgenie.yml\"\n\n    input:\n        tuple val(species), val(taxId), val(source), val(genomePattern), val(cdnaPattern), val(gtfPattern), val(assembly) from GENOMES.join(CURRENT_REF_FILES_FOR_NEWEST.map{r -> tuple(r[0])})\n\n    output:\n        tuple file('species.txt'), file('assembly.txt'), file('release.txt'), file('reference.txt'), file('cdna_file.txt'), file('gtf_file.txt'), file('tags.txt'), file('build.txt') into NEWEST_REF_FILES\n         \n    \"\"\"\n    set +e\n    releaseNo=\\$(detect_newest_isl_genome_release.sh $species ${params.irapDataDir} $gtfPattern)\n    release=${source}\\${releaseNo}\n    fileRoot=${params.irapDataDir}/reference/$species\n    reference=\\$(echo -n \\${fileRoot}/\\$(basename $genomePattern | sed \"s/RELNO/\\${releaseNo}/\" | sed 's|primary_assembly|toplevel|'))\n    gtf_file=\\$(echo -n \\${fileRoot}/\\$(basename $gtfPattern | sed \"s/RELNO/\\${releaseNo}/\"))\n\n    # ISL was switched at some point to append the E! release to cDNA files.\n    # Ensembl does't do that, but the files do differ between releases. We need\n    # to account for versioned and unversioned possibilities.\n\n    unversioned_cdna_fasta=\\$(basename $cdnaPattern |  sed \"s/RELNO/\\${releaseNo}/\")\n    versioned_cdna_fasta=\\$(echo -e \"\\$unversioned_cdna_fasta\" | sed \"s/.fa.gz/.\\${releaseNo}.fa.gz/\")\n    \n    if [ -e \"\\${fileRoot}/\\$versioned_cdna_fasta\" ]; then\n        cdna_file=\\$(echo -n \"\\${fileRoot}/\\$versioned_cdna_fasta\")\n    else\n        cdna_file=\\$(echo -n \"\\${fileRoot}/\\$unversioned_cdna_fasta\")\n    fi\n    tag='newest'\n\n    env COLUMNS=500 check_refgenie_status.sh \"$species\" \"$assembly\" \"\\$release\" \"\\$reference\" \"\\$cdna_file\" \"\\$gtf_file\" \"\\$tag\"\n\n    if [ \\$? -eq 1 ]; then\n        build='true'\n    else\n        build='false'\n    fi\n\n    echo -n \"$species\" > species.txt\n    echo -n \"$assembly\" > assembly.txt\n    echo -n \"\\$release\" > release.txt\n    echo -n \"\\$reference\" > reference.txt\n    echo -n \"\\$cdna_file\" > cdna_file.txt\n    echo -n \"\\$gtf_file\" > gtf_file.txt\n    echo -n \"\\$tag\" > tags.txt\n    echo -n \"\\$build\" > build.txt\n    \"\"\" \n}",
        "nb_lignes_process": 50,
        "string_script": "\"\"\"\n    set +e\n    releaseNo=\\$(detect_newest_isl_genome_release.sh $species ${params.irapDataDir} $gtfPattern)\n    release=${source}\\${releaseNo}\n    fileRoot=${params.irapDataDir}/reference/$species\n    reference=\\$(echo -n \\${fileRoot}/\\$(basename $genomePattern | sed \"s/RELNO/\\${releaseNo}/\" | sed 's|primary_assembly|toplevel|'))\n    gtf_file=\\$(echo -n \\${fileRoot}/\\$(basename $gtfPattern | sed \"s/RELNO/\\${releaseNo}/\"))\n\n    # ISL was switched at some point to append the E! release to cDNA files.\n    # Ensembl does't do that, but the files do differ between releases. We need\n    # to account for versioned and unversioned possibilities.\n\n    unversioned_cdna_fasta=\\$(basename $cdnaPattern |  sed \"s/RELNO/\\${releaseNo}/\")\n    versioned_cdna_fasta=\\$(echo -e \"\\$unversioned_cdna_fasta\" | sed \"s/.fa.gz/.\\${releaseNo}.fa.gz/\")\n    \n    if [ -e \"\\${fileRoot}/\\$versioned_cdna_fasta\" ]; then\n        cdna_file=\\$(echo -n \"\\${fileRoot}/\\$versioned_cdna_fasta\")\n    else\n        cdna_file=\\$(echo -n \"\\${fileRoot}/\\$unversioned_cdna_fasta\")\n    fi\n    tag='newest'\n\n    env COLUMNS=500 check_refgenie_status.sh \"$species\" \"$assembly\" \"\\$release\" \"\\$reference\" \"\\$cdna_file\" \"\\$gtf_file\" \"\\$tag\"\n\n    if [ \\$? -eq 1 ]; then\n        build='true'\n    else\n        build='false'\n    fi\n\n    echo -n \"$species\" > species.txt\n    echo -n \"$assembly\" > assembly.txt\n    echo -n \"\\$release\" > release.txt\n    echo -n \"\\$reference\" > reference.txt\n    echo -n \"\\$cdna_file\" > cdna_file.txt\n    echo -n \"\\$gtf_file\" > gtf_file.txt\n    echo -n \"\\$tag\" > tags.txt\n    echo -n \"\\$build\" > build.txt\n    \"\"\"",
        "nb_lignes_script": 38,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "GENOMES"
        ],
        "nb_inputs": 1,
        "outputs": [
            "NEWEST_REF_FILES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "errorStrategy 'finish'",
            "conda \"${baseDir}/envs/refgenie.yml\""
        ],
        "when": "",
        "stub": ""
    },
    "add_spikes": {
        "name_process": "add_spikes",
        "string_process": "\nprocess add_spikes {\n\n    executor 'local'\n    errorStrategy 'finish'\n\n    input:\n        tuple val(species), val(assembly), val(release), file(referenceFile), file(cdnaFile), file(gtfFile), val(tags), val(spikesName), val(spikesGenome), val(spikesCdna), val(spikesGtf) from REF_FILES_FOR_SPIKES.combine(SPIKES)\n\n    output:\n        tuple val(species), val(\"${assembly}--spikes_${spikesName}\"), val(release), file(\"${species}-${assembly}-${spikesName}.fa.gz\"), file(\"${species}-${assembly}-${release}-${spikesName}.cdna.fa.gz\"), file(\"${species}-${assembly}-${release}-${spikesName}.gtf.gz\"), val(tags) into REF_FILES_WITH_SPIKES\n\n    \"\"\"\n    cat $referenceFile $spikesGenome > ${species}-${assembly}-${spikesName}.fa.gz\n    cat $cdnaFile $spikesCdna > ${species}-${assembly}-${release}-${spikesName}.cdna.fa.gz\n    cat $gtfFile $spikesGtf > ${species}-${assembly}-${release}-${spikesName}.gtf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    cat $referenceFile $spikesGenome > ${species}-${assembly}-${spikesName}.fa.gz\n    cat $cdnaFile $spikesCdna > ${species}-${assembly}-${release}-${spikesName}.cdna.fa.gz\n    cat $gtfFile $spikesGtf > ${species}-${assembly}-${release}-${spikesName}.gtf.gz\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "REF_FILES_FOR_SPIKES",
            "SPIKES"
        ],
        "nb_inputs": 2,
        "outputs": [
            "REF_FILES_WITH_SPIKES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "executor 'local'",
            "errorStrategy 'finish'"
        ],
        "when": "",
        "stub": ""
    },
    "make_contamination_fastas": {
        "name_process": "make_contamination_fastas",
        "string_process": "\nprocess make_contamination_fastas {\n\n    errorStrategy 'finish'\n    input:\n        tuple val(ecoliSpecies), val(ecoliAssembly), file(\"ecoli.fa.gz\"), val(tag) from ECOLI\n        tuple val(fungiSpecies), val(fungiAssembly), file(\"fungi.fa.gz\"), val(tag) from FUNGI\n        tuple val(virusesSpecies), val(virusesAssembly), file(\"viruses.fa.gz\"), val(tag) from VIRUSES\n\n    output:\n        tuple val(\"${ecoliSpecies}-${fungiSpecies}\"), val(\"${ecoliAssembly}-${fungiAssembly}\"), file('ecoli_fungi.fa.gz'), val('default') into ECOLI_FUNGI_CONTAMINATION_FASTA\n        tuple val(\"${fungiSpecies}-${virusesSpecies}\"), val(\"${fungiAssembly}-${virusesAssembly}\"), file('fungi_viral.fa.gz'), val('default') into FUNGI_VIRUSES_CONTAMINATION_FASTA\n        tuple val(\"${ecoliSpecies}-${virusesSpecies}\"), val(\"${ecoliAssembly}-${virusesAssembly}\"), file('ecoli_viral.fa.gz'), val('default') into ECOLI_VIRUSES_CONTAMINATION_FASTA\n        tuple val(\"${ecoliSpecies}-${fungiSpecies}-${virusesSpecies}\"), val(\"${ecoliAssembly}-${fungiAssembly}-${virusesAssembly}\"), file('ecoli_fungi_viral.fa.gz'), val('default') into ECOLI_FUNGI_VIRUSES_CONTAMINATION_FASTA\n\n    \"\"\"\n    cat ecoli.fa.gz fungi.fa.gz > ecoli_fungi.fa.gz\n    cat fungi.fa.gz viruses.fa.gz > fungi_viral.fa.gz\n    cat ecoli.fa.gz viruses.fa.gz > ecoli_viral.fa.gz\n    cat ecoli.fa.gz fungi.fa.gz viruses.fa.gz > ecoli_fungi_viral.fa.gz\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n    cat ecoli.fa.gz fungi.fa.gz > ecoli_fungi.fa.gz\n    cat fungi.fa.gz viruses.fa.gz > fungi_viral.fa.gz\n    cat ecoli.fa.gz viruses.fa.gz > ecoli_viral.fa.gz\n    cat ecoli.fa.gz fungi.fa.gz viruses.fa.gz > ecoli_fungi_viral.fa.gz\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ECOLI",
            "FUNGI",
            "VIRUSES"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ECOLI_FUNGI_CONTAMINATION_FASTA",
            "FUNGI_VIRUSES_CONTAMINATION_FASTA",
            "ECOLI_VIRUSES_CONTAMINATION_FASTA",
            "ECOLI_FUNGI_VIRUSES_CONTAMINATION_FASTA"
        ],
        "nb_outputs": 4,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "errorStrategy 'finish'"
        ],
        "when": "",
        "stub": ""
    },
    "build_genome": {
        "name_process": "build_genome",
        "string_process": "\nprocess build_genome {\n    \n    memory { 2.GB * task.attempt }\n\n    errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return  task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3  ? 'retry': 'ignore' }\n    maxRetries 3\n \n    conda \"${baseDir}/envs/refgenie.yml\"\n\n    input:\n        tuple val(species), val(assembly), file(filePath), val(additionalTag) from GENOME_BUILD_INPUTS\n\n    output:\n        tuple val(species), val(assembly) into GENOME_REFERENCE\n\n    \"\"\"\n    build_asset.sh \\\n        -a ${species}--$assembly \\\n        -r fasta \\\n        -f fasta \\\n        -p $filePath \\\n        -d ${params.refgenieDir} \\\n        -m yes \\\n        -b true \\\n        -t genome\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n    build_asset.sh \\\n        -a ${species}--$assembly \\\n        -r fasta \\\n        -f fasta \\\n        -p $filePath \\\n        -d ${params.refgenieDir} \\\n        -m yes \\\n        -b true \\\n        -t genome\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "GENOME_BUILD_INPUTS"
        ],
        "nb_inputs": 1,
        "outputs": [
            "GENOME_REFERENCE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "memory { 2.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3 ? 'retry': 'ignore' }",
            "maxRetries 3",
            "conda \"${baseDir}/envs/refgenie.yml\""
        ],
        "when": "",
        "stub": ""
    },
    "reduce_genomes": {
        "name_process": "reduce_genomes",
        "string_process": "\nprocess reduce_genomes {\n\n    conda \"${baseDir}/envs/refgenie.yml\"\n    errorStrategy 'finish'\n    \n    memory { 20.GB * task.attempt }\n    \n    maxForks 1\n    \n    input:\n        val(collected) from COLLECTED_REFERENCES\n\n    output:\n        val('reduced') into REDUCED_REFERENCES\n\n    \"\"\"\n    refgenie build --reduce -c ${params.refgenieDir}/genome_config.yaml\n    \"\"\" \n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    refgenie build --reduce -c ${params.refgenieDir}/genome_config.yaml\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "refgenie"
        ],
        "tools_url": [
            "https://bio.tools/Refgenie"
        ],
        "tools_dico": [
            {
                "name": "refgenie",
                "uri": "https://bio.tools/Refgenie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Refgenie manages storage, access, and transfer of reference genome resources. It provides command-line and Python interfaces to download pre-built reference genome \"assets\", like indexes used by bioinformatics tools. It can also build assets for custom genome assemblies. Refgenie provides programmatic access to a standard genome folder structure, so software can swap from one genome to another.",
                "homepage": "http://refgenie.databio.org"
            }
        ],
        "inputs": [
            "COLLECTED_REFERENCES"
        ],
        "nb_inputs": 1,
        "outputs": [
            "REDUCED_REFERENCES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "conda \"${baseDir}/envs/refgenie.yml\"",
            "errorStrategy 'finish'",
            "memory { 20.GB * task.attempt }",
            "maxForks 1"
        ],
        "when": "",
        "stub": ""
    },
    "build_cdna": {
        "name_process": "build_cdna",
        "string_process": "\nprocess build_cdna {\n \n    errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return  task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3  ? 'retry': 'ignore' }\n    maxRetries 3\n    \n    conda \"${baseDir}/envs/refgenie.yml\"\n\n    input:\n        val(reduced) from REDUCED_REFERENCES\n        tuple val(species), val(assembly), val(version), file(filePath), val(additionalTags) from CDNA_BUILD_INPUTS.map{r -> tuple(r[0], r[1], r[2], r[4], r[6])}\n\n    output:\n        tuple val(species), val(assembly), val(version), val(additionalTags) into CDNA_REFERENCE\n\n    \"\"\"\n    build_asset.sh \\\n        -a ${species}--${assembly} \\\n        -r fasta_txome \\\n        -f fasta \\\n        -p $filePath \\\n        -d ${params.refgenieDir} \\\n        -t ${version},${additionalTags} \\\n        -m yes \\\n        -b true \\\n        -x cdna_ \n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n    build_asset.sh \\\n        -a ${species}--${assembly} \\\n        -r fasta_txome \\\n        -f fasta \\\n        -p $filePath \\\n        -d ${params.refgenieDir} \\\n        -t ${version},${additionalTags} \\\n        -m yes \\\n        -b true \\\n        -x cdna_ \n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "REDUCED_REFERENCES",
            "CDNA_BUILD_INPUTS"
        ],
        "nb_inputs": 2,
        "outputs": [
            "CDNA_REFERENCE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3 ? 'retry': 'ignore' }",
            "maxRetries 3",
            "conda \"${baseDir}/envs/refgenie.yml\""
        ],
        "when": "",
        "stub": ""
    },
    "reduce_cdnas": {
        "name_process": "reduce_cdnas",
        "string_process": "\nprocess reduce_cdnas {\n\n    conda \"${baseDir}/envs/refgenie.yml\"\n    errorStrategy 'finish'\n    \n    memory { 20.GB * task.attempt }\n    \n    maxForks 1\n    \n    input:\n        val(collected) from COLLECTED_CDNAS\n\n    output:\n        val('reduced') into REDUCED_CDNAS\n\n    \"\"\"\n    refgenie build --reduce -c ${params.refgenieDir}/genome_config.yaml\n    \"\"\" \n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    refgenie build --reduce -c ${params.refgenieDir}/genome_config.yaml\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "refgenie"
        ],
        "tools_url": [
            "https://bio.tools/Refgenie"
        ],
        "tools_dico": [
            {
                "name": "refgenie",
                "uri": "https://bio.tools/Refgenie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Refgenie manages storage, access, and transfer of reference genome resources. It provides command-line and Python interfaces to download pre-built reference genome \"assets\", like indexes used by bioinformatics tools. It can also build assets for custom genome assemblies. Refgenie provides programmatic access to a standard genome folder structure, so software can swap from one genome to another.",
                "homepage": "http://refgenie.databio.org"
            }
        ],
        "inputs": [
            "COLLECTED_CDNAS"
        ],
        "nb_inputs": 1,
        "outputs": [
            "REDUCED_CDNAS"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "conda \"${baseDir}/envs/refgenie.yml\"",
            "errorStrategy 'finish'",
            "memory { 20.GB * task.attempt }",
            "maxForks 1"
        ],
        "when": "",
        "stub": ""
    },
    "build_annotation": {
        "name_process": "build_annotation",
        "string_process": "\nprocess build_annotation {\n    \n    errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return  task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3  ? 'retry': 'ignore' }\n    maxRetries 3\n    \n    conda \"${baseDir}/envs/refgenie.yml\"\n\n    input:\n        val(reduced) from REDUCED_REFERENCES\n        val(reduced) from REDUCED_CDNAS\n        tuple val(species), val(assembly), val(version), val(filePath), val(additionalTags) from GTF_BUILD_INPUTS.map{r -> tuple(r[0], r[1], r[2], r[5], r[6])}\n\n    output:\n        tuple val(species), val(assembly), val('none') into ANNOTATION_DONE\n\n    \"\"\"\n    build_asset.sh \\\n        -a ${species}--${assembly} \\\n        -r ensembl_gtf \\\n        -f ensembl_gtf  \\\n        -p $filePath \\\n        -d ${params.refgenieDir} \\\n        -m yes \\\n        -b true \\\n        -t ${version},${additionalTags}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n    build_asset.sh \\\n        -a ${species}--${assembly} \\\n        -r ensembl_gtf \\\n        -f ensembl_gtf  \\\n        -p $filePath \\\n        -d ${params.refgenieDir} \\\n        -m yes \\\n        -b true \\\n        -t ${version},${additionalTags}\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "REDUCED_REFERENCES",
            "REDUCED_CDNAS",
            "GTF_BUILD_INPUTS"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ANNOTATION_DONE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3 ? 'retry': 'ignore' }",
            "maxRetries 3",
            "conda \"${baseDir}/envs/refgenie.yml\""
        ],
        "when": "",
        "stub": ""
    },
    "build_hisat_index": {
        "name_process": "build_hisat_index",
        "string_process": "\nprocess build_hisat_index {\n \n    conda \"${baseDir}/envs/refgenie.yml\"\n\n    memory { 20.GB * task.attempt }\n\n    errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return  task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3  ? 'retry': 'ignore' }\n    maxRetries 3\n\n    input:\n        val(reduced) from REDUCED_REFERENCES\n        val(reduced) from REDUCED_CDNAS\n        tuple val(species), val(assembly) from GENOME_REFERENCE_FOR_HISAT\n\n    output:\n        tuple val(species), val(assembly), val('none') into HISAT2_DONE\n\n    \"\"\"\n    hisat2_version=\\$(cat ${baseDir}/envs/refgenie.yml | grep hisat2 | awk -F'=' '{print \\$2}')\n    genome_asset=\"fasta=${species}--${assembly}/fasta:genome\"\n    \n    build_asset.sh \\\n        -a ${species}--${assembly} \\\n        -r hisat2_index \\\n        -d ${params.refgenieDir} \\\n        -t genome--hisat2_v\\${hisat2_version} \\\n        -m yes \\\n        -b true \\\n        -s \\$genome_asset\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "\"\"\"\n    hisat2_version=\\$(cat ${baseDir}/envs/refgenie.yml | grep hisat2 | awk -F'=' '{print \\$2}')\n    genome_asset=\"fasta=${species}--${assembly}/fasta:genome\"\n    \n    build_asset.sh \\\n        -a ${species}--${assembly} \\\n        -r hisat2_index \\\n        -d ${params.refgenieDir} \\\n        -t genome--hisat2_v\\${hisat2_version} \\\n        -m yes \\\n        -b true \\\n        -s \\$genome_asset\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "REDUCED_REFERENCES",
            "REDUCED_CDNAS",
            "GENOME_REFERENCE_FOR_HISAT"
        ],
        "nb_inputs": 3,
        "outputs": [
            "HISAT2_DONE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "conda \"${baseDir}/envs/refgenie.yml\"",
            "memory { 20.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3 ? 'retry': 'ignore' }",
            "maxRetries 3"
        ],
        "when": "",
        "stub": ""
    },
    "build_bowtie2_index": {
        "name_process": "build_bowtie2_index",
        "string_process": "\nprocess build_bowtie2_index {\n \n    conda \"${baseDir}/envs/refgenie.yml\"\n\n    memory { 20.GB * task.attempt }\n\n    errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return  task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3  ? 'retry': 'ignore' }\n    maxRetries 3\n\n    input:\n        val(reduced) from REDUCED_REFERENCES\n        val(reduced) from REDUCED_CDNAS\n        tuple val(species), val(assembly) from GENOME_REFERENCE_FOR_BOWTIE2.join(CONTAMINATION_GENOMES_FOR_BOWTIE2).map{ r -> tuple(r[0], r[1]) }\n\n    output:\n        tuple val(species), val(assembly), val('none') into BOWTIE2_DONE\n\n    \"\"\"\n    bowtie2_version=\\$(cat ${baseDir}/envs/refgenie.yml | grep bowtie2 | awk -F'=' '{print \\$2}')\n    build_asset.sh \\\n        -a ${species}--${assembly} \\\n        -r bowtie2_index \\\n        -d ${params.refgenieDir} \\\n        -m yes \\\n        -b true \\\n        -t v\\${bowtie2_version}\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n    bowtie2_version=\\$(cat ${baseDir}/envs/refgenie.yml | grep bowtie2 | awk -F'=' '{print \\$2}')\n    build_asset.sh \\\n        -a ${species}--${assembly} \\\n        -r bowtie2_index \\\n        -d ${params.refgenieDir} \\\n        -m yes \\\n        -b true \\\n        -t v\\${bowtie2_version}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "REDUCED_REFERENCES",
            "REDUCED_CDNAS",
            "GENOME_REFERENCE_FOR_BOWTIE2",
            "CONTAMINATION_GENOMES_FOR_BOWTIE2"
        ],
        "nb_inputs": 4,
        "outputs": [
            "BOWTIE2_DONE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "conda \"${baseDir}/envs/refgenie.yml\"",
            "memory { 20.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3 ? 'retry': 'ignore' }",
            "maxRetries 3"
        ],
        "when": "",
        "stub": ""
    },
    "build_salmon_index": {
        "name_process": "build_salmon_index",
        "string_process": "\nprocess build_salmon_index {\n \n    conda \"${baseDir}/envs/refgenie.yml\"\n\n    memory { 20.GB * task.attempt }\n\n    errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return  task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3  ? 'retry': 'ignore' }\n    maxRetries 3\n\n    input:\n        val(reduced) from REDUCED_CDNAS\n        tuple val(species), val(assembly), val(version), val(additionalTags) from CDNA_REFERENCE_FOR_SALMON\n\n    output:\n        tuple val(species), val(assembly), val(version) into SALMON_DONE\n\n    \"\"\"\n    salmon_version=\\$(cat ${baseDir}/envs/refgenie.yml | grep salmon | awk -F'=' '{print \\$2}')\n    cdna_asset=\"fasta=${species}--${assembly}/fasta_txome:cdna_${version}\"\n    \n    # Append the salmon version to all the input tags\n    tags=\\$(for at in \\$(echo ${version} ${additionalTags} | tr \",\" \"\\\\n\"); do\n        echo \"\\${at}--salmon_v\\${salmon_version}\"\n    done | tr '\\\\n' ',' | sed 's/,\\$//')  \n    build_asset.sh \\\n        -a ${species}--${assembly} \\\n        -r salmon_index \\\n        -d ${params.refgenieDir} \\\n        -t \\$tags \\\n        -x 'cdna_' \\\n        -m yes \\\n        -b true \\\n        -s \\$cdna_asset\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "\"\"\"\n    salmon_version=\\$(cat ${baseDir}/envs/refgenie.yml | grep salmon | awk -F'=' '{print \\$2}')\n    cdna_asset=\"fasta=${species}--${assembly}/fasta_txome:cdna_${version}\"\n    \n    # Append the salmon version to all the input tags\n    tags=\\$(for at in \\$(echo ${version} ${additionalTags} | tr \",\" \"\\\\n\"); do\n        echo \"\\${at}--salmon_v\\${salmon_version}\"\n    done | tr '\\\\n' ',' | sed 's/,\\$//')  \n    build_asset.sh \\\n        -a ${species}--${assembly} \\\n        -r salmon_index \\\n        -d ${params.refgenieDir} \\\n        -t \\$tags \\\n        -x 'cdna_' \\\n        -m yes \\\n        -b true \\\n        -s \\$cdna_asset\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "REDUCED_CDNAS",
            "CDNA_REFERENCE_FOR_SALMON"
        ],
        "nb_inputs": 2,
        "outputs": [
            "SALMON_DONE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "conda \"${baseDir}/envs/refgenie.yml\"",
            "memory { 20.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3 ? 'retry': 'ignore' }",
            "maxRetries 3"
        ],
        "when": "",
        "stub": ""
    },
    "build_kallisto_index": {
        "name_process": "build_kallisto_index",
        "string_process": "\nprocess build_kallisto_index {\n \n    conda \"${baseDir}/envs/refgenie.yml\"\n\n    memory { 20.GB * task.attempt }\n\n    errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return  task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3  ? 'retry': 'ignore' }\n    maxRetries 3\n\n    input:\n        val(reduced) from REDUCED_CDNAS\n        tuple val(species), val(assembly), val(version), val(additionalTags) from CDNA_REFERENCE_FOR_KALLISTO\n\n    output:\n        tuple val(species), val(assembly), val(version) into KALLISTO_DONE\n\n    \"\"\"\n    kallisto_version=\\$(cat ${baseDir}/envs/refgenie.yml | grep kallisto | awk -F'=' '{print \\$2}')\n    cdna_asset=\"fasta=${species}--${assembly}/fasta_txome:cdna_${version}\"\n    \n    # Append the kallisto version to all the input tags\n    tags=\\$(for at in \\$(echo ${additionalTags} | tr \",\" \"\\\\n\"); do\n        echo \"\\${at}--kallisto_v\\${kallisto_version}\"\n    done | tr '\\\\n' ',' | sed 's/,\\$//')  \n    \n    build_asset.sh \\\n        -a ${species}--${assembly} \\\n        -r kallisto_index \\\n        -d ${params.refgenieDir} \\\n        -t \\$tags \\\n        -x 'cdna_' \\\n        -m yes \\\n        -b true \\\n        -s \\$cdna_asset\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "\"\"\"\n    kallisto_version=\\$(cat ${baseDir}/envs/refgenie.yml | grep kallisto | awk -F'=' '{print \\$2}')\n    cdna_asset=\"fasta=${species}--${assembly}/fasta_txome:cdna_${version}\"\n    \n    # Append the kallisto version to all the input tags\n    tags=\\$(for at in \\$(echo ${additionalTags} | tr \",\" \"\\\\n\"); do\n        echo \"\\${at}--kallisto_v\\${kallisto_version}\"\n    done | tr '\\\\n' ',' | sed 's/,\\$//')  \n    \n    build_asset.sh \\\n        -a ${species}--${assembly} \\\n        -r kallisto_index \\\n        -d ${params.refgenieDir} \\\n        -t \\$tags \\\n        -x 'cdna_' \\\n        -m yes \\\n        -b true \\\n        -s \\$cdna_asset\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "REDUCED_CDNAS",
            "CDNA_REFERENCE_FOR_KALLISTO"
        ],
        "nb_inputs": 2,
        "outputs": [
            "KALLISTO_DONE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "conda \"${baseDir}/envs/refgenie.yml\"",
            "memory { 20.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3 ? 'retry': 'ignore' }",
            "maxRetries 3"
        ],
        "when": "",
        "stub": ""
    },
    "reduce": {
        "name_process": "reduce",
        "string_process": "\nprocess reduce {\n\n    cache false\n\n    conda \"${baseDir}/envs/refgenie.yml\"\n    \n    memory { 20.GB * task.attempt }\n    \n    maxForks 1\n    \n    input:\n        val(collected) from INDEX_DONE.collect().map { r -> 'collected' }\n\n    output:\n        val('reduced') into REDUCED\n\n    \"\"\"\n    refgenie build --reduce\n    \"\"\" \n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    refgenie build --reduce\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "refgenie"
        ],
        "tools_url": [
            "https://bio.tools/Refgenie"
        ],
        "tools_dico": [
            {
                "name": "refgenie",
                "uri": "https://bio.tools/Refgenie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Refgenie manages storage, access, and transfer of reference genome resources. It provides command-line and Python interfaces to download pre-built reference genome \"assets\", like indexes used by bioinformatics tools. It can also build assets for custom genome assemblies. Refgenie provides programmatic access to a standard genome folder structure, so software can swap from one genome to another.",
                "homepage": "http://refgenie.databio.org"
            }
        ],
        "inputs": [
            "INDEX_DONE"
        ],
        "nb_inputs": 1,
        "outputs": [
            "REDUCED"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "cache false",
            "conda \"${baseDir}/envs/refgenie.yml\"",
            "memory { 20.GB * task.attempt }",
            "maxForks 1"
        ],
        "when": "",
        "stub": ""
    },
    "get_alias_table": {
        "name_process": "get_alias_table",
        "string_process": "\nprocess get_alias_table {\n\n    conda \"${baseDir}/envs/refgenie.yml\"\n    \n    input:\n        val('reduced') from REDUCED_SPECIES\n   \n    output:\n        file('alias_table.txt') into ALIAS_TABLE \n\n    \"\"\"\n    env COLUMNS=500 refgenie alias get > alias_table.txt.tmp\n    mv alias_table.txt.tmp alias_table.txt \n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    env COLUMNS=500 refgenie alias get > alias_table.txt.tmp\n    mv alias_table.txt.tmp alias_table.txt \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "REDUCED_SPECIES"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ALIAS_TABLE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "conda \"${baseDir}/envs/refgenie.yml\""
        ],
        "when": "",
        "stub": ""
    },
    "alias_genomes": {
        "name_process": "alias_genomes",
        "string_process": "\nprocess alias_genomes {\n\n    conda \"${baseDir}/envs/refgenie.yml\"\n    errorStrategy 'ignore'\n    \n    maxForks 1\n    \n    input:\n        file(aliasTable) from ALIAS_TABLE\n        tuple val(species), val(assembly), file(filePath), val(additionalTag) from GENOME_ALIAS_INPUTS\n\n    output:\n         tuple val(species), val(assembly), val('none') into ALIAS_DONE\n\n    \"\"\"\n    set +e\n    export REFGENIE=${params.refgenieDir}/genome_config.yaml\n\n    # The 'current' assembly for a species will be the defult, so set a\n    # species-wide alias for that\n\n    aliases=''\n    \n    spikePart=''\n    echo \"$assembly\" | grep \"spikes\" > /dev/null\n    if [ \\$? -eq -0 ]; then\n        assembly=$assembly\n        parts=(\\${assembly//--/ })\n        spikePart=--\\${parts[1]} \n    fi\n    \n    echo -e \"$additionalTag\" | grep \"current\" > /dev/null 2>&1\n    if [ \\$? -eq 0 ]; then\n        aliases=\"$species\\${spikePart}\"\n    fi\n\n    # Non-spiked genomes will be aliased to e.g. homo_sapiens--current. Spiked\n    # genomes will be aliased to e.g. homo_sapiens--current--spikes_ercc\n\n    for tag in \\$(echo -e \"$additionalTag\" | sed 's/,/ /g'); do \n        alias=\"${species}--\\$tag\"\n        if [ -z \"\\$aliases\" ]; then\n            aliases=\\$alias\\${spikePart}\n        else\n            aliases=\"\\${aliases} \\${alias}\\${spikePart}\"\n        fi\n    done\n\n    # Now alias this assembly    \n    digest=\\$(digest_from_alias.sh ${species}--${assembly} $aliasTable)\n\n    for alias in \\$aliases; do\n        existing_alias_digest=\\$(digest_from_alias.sh \\$alias ${aliasTable})\n        found_existing=\\$?\n\n        # If the alias exists, but points to a different digest, then remove\n        # the previous\n\n        if [ \"\\$found_existing\" -eq '0' ] && [ \"\\$existing_alias_digest\" != \"\\$digest\" ]; then\n            echo \"Removing alias \\$alias on  \\$existing_alias_digest to re-point it at \\$digest\"\n            refgenie alias remove -a \\$alias -d \\$existing_alias_digest\n        fi\n\n        # The the alias didn't already exist, or did not match the current\n        # digest (and so was removed), then add it\n\n        if [ \"\\$found_existing\" -eq '1' ] || [ \"\\$existing_alias_digest\" != \"\\$digest\" ]; then\n            echo \"Aliasing \\$digest to \\$alias\"\n            refgenie alias set --aliases \\$alias --digest \\$digest\n            if [ \\$? -ne 0 ]; then\n                echo \"Aliasing \\$assembly to \\$alias failed\" 1>&2\n                exit 1\n            fi\n        else\n            echo \"\\$alias was already pointing at \\$digest\"\n        fi\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 78,
        "string_script": "\"\"\"\n    set +e\n    export REFGENIE=${params.refgenieDir}/genome_config.yaml\n\n    # The 'current' assembly for a species will be the defult, so set a\n    # species-wide alias for that\n\n    aliases=''\n    \n    spikePart=''\n    echo \"$assembly\" | grep \"spikes\" > /dev/null\n    if [ \\$? -eq -0 ]; then\n        assembly=$assembly\n        parts=(\\${assembly//--/ })\n        spikePart=--\\${parts[1]} \n    fi\n    \n    echo -e \"$additionalTag\" | grep \"current\" > /dev/null 2>&1\n    if [ \\$? -eq 0 ]; then\n        aliases=\"$species\\${spikePart}\"\n    fi\n\n    # Non-spiked genomes will be aliased to e.g. homo_sapiens--current. Spiked\n    # genomes will be aliased to e.g. homo_sapiens--current--spikes_ercc\n\n    for tag in \\$(echo -e \"$additionalTag\" | sed 's/,/ /g'); do \n        alias=\"${species}--\\$tag\"\n        if [ -z \"\\$aliases\" ]; then\n            aliases=\\$alias\\${spikePart}\n        else\n            aliases=\"\\${aliases} \\${alias}\\${spikePart}\"\n        fi\n    done\n\n    # Now alias this assembly    \n    digest=\\$(digest_from_alias.sh ${species}--${assembly} $aliasTable)\n\n    for alias in \\$aliases; do\n        existing_alias_digest=\\$(digest_from_alias.sh \\$alias ${aliasTable})\n        found_existing=\\$?\n\n        # If the alias exists, but points to a different digest, then remove\n        # the previous\n\n        if [ \"\\$found_existing\" -eq '0' ] && [ \"\\$existing_alias_digest\" != \"\\$digest\" ]; then\n            echo \"Removing alias \\$alias on  \\$existing_alias_digest to re-point it at \\$digest\"\n            refgenie alias remove -a \\$alias -d \\$existing_alias_digest\n        fi\n\n        # The the alias didn't already exist, or did not match the current\n        # digest (and so was removed), then add it\n\n        if [ \"\\$found_existing\" -eq '1' ] || [ \"\\$existing_alias_digest\" != \"\\$digest\" ]; then\n            echo \"Aliasing \\$digest to \\$alias\"\n            refgenie alias set --aliases \\$alias --digest \\$digest\n            if [ \\$? -ne 0 ]; then\n                echo \"Aliasing \\$assembly to \\$alias failed\" 1>&2\n                exit 1\n            fi\n        else\n            echo \"\\$alias was already pointing at \\$digest\"\n        fi\n    done\n    \"\"\"",
        "nb_lignes_script": 63,
        "language_script": "bash",
        "tools": [
            "NullSeq",
            "refgenie"
        ],
        "tools_url": [
            "https://bio.tools/nullseq",
            "https://bio.tools/Refgenie"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            },
            {
                "name": "refgenie",
                "uri": "https://bio.tools/Refgenie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Refgenie manages storage, access, and transfer of reference genome resources. It provides command-line and Python interfaces to download pre-built reference genome \"assets\", like indexes used by bioinformatics tools. It can also build assets for custom genome assemblies. Refgenie provides programmatic access to a standard genome folder structure, so software can swap from one genome to another.",
                "homepage": "http://refgenie.databio.org"
            }
        ],
        "inputs": [
            "ALIAS_TABLE",
            "GENOME_ALIAS_INPUTS"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ALIAS_DONE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "conda \"${baseDir}/envs/refgenie.yml\"",
            "errorStrategy 'ignore'",
            "maxForks 1"
        ],
        "when": "",
        "stub": ""
    },
    "find_references": {
        "name_process": "find_references",
        "string_process": "\nprocess find_references {\n\n    conda \"${baseDir}/envs/refgenie.yml\"\n\n    output:\n        file('reference.csv') into REFERENCES\n\n    \"\"\"\n    env COLUMNS=500 refgenie list | awk -F'\u2502' '{print \\$2}' | sed 's/ //g' | awk -F',' '{print \\$1}' | grep '^[A-Za-z]' > reference.csv\n    \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\n    env COLUMNS=500 refgenie list | awk -F'\u2502' '{print \\$2}' | sed 's/ //g' | awk -F',' '{print \\$1}' | grep '^[A-Za-z]' > reference.csv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "REFERENCES"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "conda \"${baseDir}/envs/refgenie.yml\""
        ],
        "when": "",
        "stub": ""
    },
    "find_cdnas": {
        "name_process": "find_cdnas",
        "string_process": "\nprocess find_cdnas {\n    \n    conda \"${baseDir}/envs/refgenie.yml\"\n\n    input:\n        val(reference) from REFERENCES.splitText().map{it.trim()}\n\n    output:\n        tuple val(reference), stdout into CDNAS\n\n    \"\"\"\n    env COLUMNS=500 refgenie list -g \\$(echo $reference | tr -d '\\\\n') | grep fasta_txome | awk -F'\u2502' '{print \\$4}' | sed 's/ //g'\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    env COLUMNS=500 refgenie list -g \\$(echo $reference | tr -d '\\\\n') | grep fasta_txome | awk -F'\u2502' '{print \\$4}' | sed 's/ //g'\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "REFERENCES"
        ],
        "nb_inputs": 1,
        "outputs": [
            "CDNAS"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "conda \"${baseDir}/envs/refgenie.yml\""
        ],
        "when": "",
        "stub": ""
    },
    "build_index": {
        "name_process": "build_index",
        "string_process": "\nprocess build_index {\n \n    conda \"${baseDir}/envs/refgenie.yml\"\n\n    memory { 20.GB * task.attempt }\n\n    errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return  task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3  ? 'retry': 'ignore' }\n    maxRetries 3\n\n    input:\n        tuple val(reference), val(cdnaName), val(indexer) from CDNAS_FOR_INDEXING\n\n    output:\n        tuple val(reference), val(cdnaName), val(indexer) into INDEX_DONE\n\n    \"\"\"\n    indexer_version=\\$(cat ${baseDir}/envs/refgenie.yml | grep $indexer | awk -F'=' '{print \\$2}')\n    cdna_asset=\"fasta=${reference}/fasta_txome:${cdnaName}\"\n    tag=${cdnaName}--${indexer}_\\${indexer_version} \n    \n    build_asset.sh \\\n        -a ${reference} \\\n        -r ${indexer}_index \\\n        -t \\$tag \\\n        -m yes \\\n        -s \\$cdna_asset\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n    indexer_version=\\$(cat ${baseDir}/envs/refgenie.yml | grep $indexer | awk -F'=' '{print \\$2}')\n    cdna_asset=\"fasta=${reference}/fasta_txome:${cdnaName}\"\n    tag=${cdnaName}--${indexer}_\\${indexer_version} \n    \n    build_asset.sh \\\n        -a ${reference} \\\n        -r ${indexer}_index \\\n        -t \\$tag \\\n        -m yes \\\n        -s \\$cdna_asset\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "CDNAS_FOR_INDEXING"
        ],
        "nb_inputs": 1,
        "outputs": [
            "INDEX_DONE"
        ],
        "nb_outputs": 1,
        "name_workflow": "ebi-gene-expression-group__isl_refs_to_refgenie",
        "directive": [
            "conda \"${baseDir}/envs/refgenie.yml\"",
            "memory { 20.GB * task.attempt }",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return task.exitStatus == 130 || task.exitStatus == 137 || task.attempt < 3 ? 'retry': 'ignore' }",
            "maxRetries 3"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "plotAggregateTADs": {
        "name_process": "plotAggregateTADs",
        "string_process": " process plotAggregateTADs {\n        label 'plotAggregateTADs'\n        tag \"_${id}\"\n        cpus 8\n        memory '64 GB'\n        container \"mblanche/fan-c\"\n\n        publishDir \"${outDir}/APAs\",\n        mode: 'copy'\n\n        input:\n        tuple path(hic), path(regions) from hic_ch\n        .combine(regions_ch)\n\n        output:\n        tuple id, path(\"*.png\"), path(\"*.strength\") into apaPng_ch\n        \n        script:\n        id = hic.name.toString().take(hic.name.toString().lastIndexOf('.'))\n        \"\"\"\n        fanc aggregate ${hic}@${params.resolution} \\\n                ${regions} \\\n                ${id}.${params.resolution}.tads.agg \\\n                -p ${id}.${params.resolution}.tads.png \\\n                --tad-strength ${id}.${params.resolution}.tads.strength \\\n                --tads\n        \"\"\"\n    }",
        "nb_lignes_process": 26,
        "string_script": "        id = hic.name.toString().take(hic.name.toString().lastIndexOf('.'))\n        \"\"\"\n        fanc aggregate ${hic}@${params.resolution} \\\n                ${regions} \\\n                ${id}.${params.resolution}.tads.agg \\\n                -p ${id}.${params.resolution}.tads.png \\\n                --tad-strength ${id}.${params.resolution}.tads.strength \\\n                --tads\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MID"
        ],
        "tools_url": [
            "https://bio.tools/mid"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            }
        ],
        "inputs": [
            "hic_ch",
            "regions_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "apaPng_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "label 'plotAggregateTADs'",
            "tag \"_${id}\"",
            "cpus 8",
            "memory '64 GB'",
            "container \"mblanche/fan-c\"",
            "publishDir \"${outDir}/APAs\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "plotAggregateLoops": {
        "name_process": "plotAggregateLoops",
        "string_process": " process plotAggregateLoops {\n            label 'plotAggregateLoops'\n            tag \"_${id}\"\n            cpus 8\n            memory '64 GB'\n            container \"mblanche/fan-c\"\n\n            publishDir \"${outDir}/APAs\",\n            mode: 'copy'\n\n            input:\n            tuple path(hic), path(regions) from hic_ch\n            .combine(regions_ch)\n\n            output:\n            tuple id, path(\"*.png\"), path(\"*.strength\") into apaPng_ch\n            \n            script:\n            id = hic.name.toString().take(hic.name.toString().lastIndexOf('.'))\n            \"\"\"\n            fanc aggregate ${hic}@${params.resolution} \\\n                    ${regions} \\\n                    ${id}.${params.resolution}.loops.agg \\\n                    -p ${id}.${params.resolution}.loops.png \\\n                    --loop-strength ${id}.${params.resolution}.loops.strength \\\n                    -e -l -r 1.0 \\\n                    --loops\n            \"\"\"\n        }",
        "nb_lignes_process": 27,
        "string_script": "            id = hic.name.toString().take(hic.name.toString().lastIndexOf('.'))\n            \"\"\"\n            fanc aggregate ${hic}@${params.resolution} \\\n                    ${regions} \\\n                    ${id}.${params.resolution}.loops.agg \\\n                    -p ${id}.${params.resolution}.loops.png \\\n                    --loop-strength ${id}.${params.resolution}.loops.strength \\\n                    -e -l -r 1.0 \\\n                    --loops\n            \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "MID"
        ],
        "tools_url": [
            "https://bio.tools/mid"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            }
        ],
        "inputs": [
            "hic_ch",
            "regions_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "apaPng_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "label 'plotAggregateLoops'",
            "tag \"_${id}\"",
            "cpus 8",
            "memory '64 GB'",
            "container \"mblanche/fan-c\"",
            "publishDir \"${outDir}/APAs\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bamFilter": {
        "name_process": "bamFilter",
        "string_process": "\nprocess bamFilter {\n    label 'bamFilter'\n    tag \"_${id}\"\n    cpus 8\n    memory '64 GB'\n    container 'mblanche/bwa-samtools'\n    \n    input:\n    path(bam) from bam_ch\n\n    output:\n    tuple id, path(\"${id}_filtered.bam\") into bamFilt_ch\n                                                                                           \n    \n    script:\n    id = bam.name.toString().take(bam.name.toString().lastIndexOf('.'))\n    \"\"\"\n    samtools view -h -f1 -F 3328 ${bam} | samtools sort -n -O BAM -@ ${task.cpus} -o ${id}_filtered.bam -\n\t#samtools index ${id}_filtered.bam\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "    id = bam.name.toString().take(bam.name.toString().lastIndexOf('.'))\n    \"\"\"\n    samtools view -h -f1 -F 3328 ${bam} | samtools sort -n -O BAM -@ ${task.cpus} -o ${id}_filtered.bam -\n\t#samtools index ${id}_filtered.bam\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MID",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/mid",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bamFilt_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "label 'bamFilter'",
            "tag \"_${id}\"",
            "cpus 8",
            "memory '64 GB'",
            "container 'mblanche/bwa-samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "bam2pairs": {
        "name_process": "bam2pairs",
        "string_process": "\nprocess bam2pairs {\n    label 'bam2pairs'\n    tag \"_${id}\"\n    cpus 16\n    memory '100 GB'\n    container 'dovetailg/pairtools'\n    \n    publishDir \"${outDir}/validPairs\",\n    \tmode: 'copy'\n    \n    input:\n    tuple id, path(bam) from bamFilt_ch\n    \n    output:\n    tuple id, path(\"*.gz\"), path(\"*.px2\") into pairs_chrSize_ch\n\n    script:\n    \"\"\"\n    bam2pairs ${bam} ${id}\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    bam2pairs ${bam} ${id}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamFilt_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pairs_chrSize_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "label 'bam2pairs'",
            "tag \"_${id}\"",
            "cpus 16",
            "memory '100 GB'",
            "container 'dovetailg/pairtools'",
            "publishDir \"${outDir}/validPairs\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "chr_size": {
        "name_process": "chr_size",
        "string_process": "\nprocess chr_size {\n    tag \"_${id}\"\n    cpus 8\n    memory '32 GB'\n    container 'dovetailg/pairtools'\n    \n    input:\n    tuple id, path(pairs), path(idx) from pairs_chrSize_ch\n    \n    output:\n    tuple id, path(pairs), path(idx), path(\"*.tsv\") into pairs_ch_cooler, pairs_ch_juicer\n    \n    script:\n    \"\"\"\n    pairix -H -f ${pairs} \\\n\t| awk -v OFS='\\t' '/^#chromsize/  {print \\$2,\\$3}' \\\n\t| sort -V -k1,1 \\\n\t> chr_size.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    pairix -H -f ${pairs} \\\n\t| awk -v OFS='\\t' '/^#chromsize/  {print \\$2,\\$3}' \\\n\t| sort -V -k1,1 \\\n\t> chr_size.tsv\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairs_chrSize_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pairs_ch_cooler",
            "pairs_ch_juicer"
        ],
        "nb_outputs": 2,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 8",
            "memory '32 GB'",
            "container 'dovetailg/pairtools'"
        ],
        "when": "",
        "stub": ""
    },
    "cooler_sort": {
        "name_process": "cooler_sort",
        "string_process": "\nprocess cooler_sort {\n    tag \"_${id}\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/cooler'\n    \n    input:\n    tuple id, path(pairs), path(idx), path(chr_sizes) from pairs_ch_cooler\n    \n    output:\n    tuple id, path(\"*.pairs.sorted.txt.gz\"), path(\"*pairs.sorted.txt.gz.px2\"), path(chr_sizes) into sort_cload_ch\n    \n    script:\n    \"\"\"\n    cooler csort \\\n\t-c1 2 -p1 3 -c2 4 -p2 5 \\\n\t-i pairix \\\n\t-p ${task.cpus} \\\n\t--out ${id}.pairs.sorted.txt.gz \\\n\t${pairs} \\\n\t${chr_sizes}\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    cooler csort \\\n\t-c1 2 -p1 3 -c2 4 -p2 5 \\\n\t-i pairix \\\n\t-p ${task.cpus} \\\n\t--out ${id}.pairs.sorted.txt.gz \\\n\t${pairs} \\\n\t${chr_sizes}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairs_ch_cooler"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sort_cload_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/cooler'"
        ],
        "when": "",
        "stub": ""
    },
    "cooler_cload": {
        "name_process": "cooler_cload",
        "string_process": "\nprocess cooler_cload {\n    tag \"_${id}\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/cooler'\n\n    input:\n    tuple id, path(pairs), path(idx), path(chr_sizes) from sort_cload_ch\n    \n    output:\n    tuple id, path(\"*.cool\") into balance_cooler_ch\n        \n    script:\n    \"\"\"\n    cooler cload pairix \\\n\t-p ${task.cpus} \\\n\t${chr_sizes}:1000 \\\n\t${pairs} \\\n\t${id}.cool\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    cooler cload pairix \\\n\t-p ${task.cpus} \\\n\t${chr_sizes}:1000 \\\n\t${pairs} \\\n\t${id}.cool\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sort_cload_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "balance_cooler_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/cooler'"
        ],
        "when": "",
        "stub": ""
    },
    "balance_cooler": {
        "name_process": "balance_cooler",
        "string_process": "\nprocess balance_cooler {\n    tag \"_${id}\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/cooler'\n    \n    publishDir \"${outDir}/coolerFiles\",\n    \tmode: 'copy'\n    \n    input:\n    tuple id, path(cooler) from balance_cooler_ch\n\n    output:\n    tuple id, path(cooler) into zoomify_cooler_ch \n    \n    script:\n    \"\"\"\n    cooler balance --force -p ${task.cpus} ${cooler}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    cooler balance --force -p ${task.cpus} ${cooler}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "balance_cooler_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "zoomify_cooler_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/cooler'",
            "publishDir \"${outDir}/coolerFiles\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "cooler_zoomify": {
        "name_process": "cooler_zoomify",
        "string_process": "\nprocess cooler_zoomify {\n    tag \"_${id}\"\n    cpus 48\n    memory '100 GB'\n    container 'mblanche/cooler'\n    \n    publishDir \"${outDir}/coolerFiles\",\n    \tmode: 'copy'\n    \n    input:\n    tuple id, path(cooler) from zoomify_cooler_ch\n\n    output:\n    tuple id, path(\"*.mcool\") into mustache_mcool_ch, abcomp_mcool_ch\n    \n    script:\n    \"\"\"\n    cooler zoomify --balance -p ${task.cpus} ${cooler}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    cooler zoomify --balance -p ${task.cpus} ${cooler}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "zoomify_cooler_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mustache_mcool_ch",
            "abcomp_mcool_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 48",
            "memory '100 GB'",
            "container 'mblanche/cooler'",
            "publishDir \"${outDir}/coolerFiles\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "juicer": {
        "name_process": "juicer",
        "string_process": "\nprocess juicer {\n    tag \"_${id}\"\n    cpus 24\n    memory '150 GB'\n    container 'mblanche/juicer'\n    \n    publishDir \"${outDir}/hicFiles\",\n    mode: 'copy'\n    \n    input:\n    tuple id, path(pairs), path(idx), path(chr_sizes) from pairs_ch_juicer\n    \n    output:\n    tuple id, path(\"*.hic\") into arrowhead_ch, hiccups_ch\n\n    script:\n    \"\"\"\n    java -Xmx96000m -Djava.awt.headless=true \\\n\t-jar /juicer_tools.jar pre \\\n\t--threads ${task.cpus} \\\n\t-j ${task.cpus} \\\n\t-k VC,VC_SQRT,KR,SCALE \\\n\t${pairs} \\\n\t${id}.hic \\\n\t${chr_sizes}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    java -Xmx96000m -Djava.awt.headless=true \\\n\t-jar /juicer_tools.jar pre \\\n\t--threads ${task.cpus} \\\n\t-j ${task.cpus} \\\n\t-k VC,VC_SQRT,KR,SCALE \\\n\t${pairs} \\\n\t${id}.hic \\\n\t${chr_sizes}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairs_ch_juicer"
        ],
        "nb_inputs": 1,
        "outputs": [
            "arrowhead_ch",
            "hiccups_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 24",
            "memory '150 GB'",
            "container 'mblanche/juicer'",
            "publishDir \"${outDir}/hicFiles\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "arrowhead": {
        "name_process": "arrowhead",
        "string_process": " process arrowhead {\n\ttag \"_${id}\"\n\tcpus 12\n\tmemory '40 GB'\n\tcontainer \"mblanche/juicer\"\n\t\n\tpublishDir \"${outDir}/arrowHead\",\n\t    mode: 'copy'\n\t\n\tinput:\n\ttuple id, path(hic), val(res) from arrowhead_ch\n\t    .combine(Channel.from(resolutions))\n\t\n\toutput:\n\ttuple id, path(\"${id}_${res}kb\") into arrowhead_out_ch\n\t\n\tscript:\n\tbpRes = res.toInteger() * 1000\n\t\"\"\"\n\tmkdir -p ${id}_${res}kb && touch ${id}_${res}kb/${bpRes}_blocks.bedpe\n\tjava -Xmx24000m \\\n\t    -jar /juicer_tools.jar \\\n\t    arrowhead \\\n\t    --threads ${task.cpus} \\\n\t    --ignore-sparsity \\\n\t    -r ${bpRes} \\\n\t    -k KR \\\n\t    ${hic} \\\n\t    ${id}_${res}kb\n\t\"\"\"\n    }",
        "nb_lignes_process": 29,
        "string_script": "\tbpRes = res.toInteger() * 1000\n\t\"\"\"\n\tmkdir -p ${id}_${res}kb && touch ${id}_${res}kb/${bpRes}_blocks.bedpe\n\tjava -Xmx24000m \\\n\t    -jar /juicer_tools.jar \\\n\t    arrowhead \\\n\t    --threads ${task.cpus} \\\n\t    --ignore-sparsity \\\n\t    -r ${bpRes} \\\n\t    -k KR \\\n\t    ${hic} \\\n\t    ${id}_${res}kb\n\t\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "arrowhead_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "arrowhead_out_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 12",
            "memory '40 GB'",
            "container \"mblanche/juicer\"",
            "publishDir \"${outDir}/arrowHead\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "hiccups": {
        "name_process": "hiccups",
        "string_process": " process hiccups {\n\ttag \"_${id}\"\n\tlabel 'gpu'\n\taccelerator 1\n\tcpus 6\n\tmemory '32 GB'\n\tcontainer \"mblanche/hiccups-gpu\"\n\t\n\tpublishDir \"${outDir}/hiccups/\",\n\t    mode: 'copy'\n\t\n\tinput:\n\ttuple id, path(hic), val(res)  from hiccups_ch\n            .combine(Channel.from(resolutions.collect{it*1000}.join(',')))\n\t\n\toutput:\n\ttuple id, path(\"${id}_loops\") into hiccups_out_ch\n\t\n\tscript:\n\t\"\"\"\n\tjava -Xmx24000m \\\n\t    -jar /juicer_tools.jar \\\n\t    hiccups \\\n\t    --threads ${task.cpus} \\\n\t    --ignore-sparsity \\\n\t    -m 500 \\\n\t    -r ${res} \\\n\t    -k KR \\\n\t    ${hic} \\\n\t    ${id}_loops\n\t\"\"\"\n    }",
        "nb_lignes_process": 30,
        "string_script": "\t\"\"\"\n\tjava -Xmx24000m \\\n\t    -jar /juicer_tools.jar \\\n\t    hiccups \\\n\t    --threads ${task.cpus} \\\n\t    --ignore-sparsity \\\n\t    -m 500 \\\n\t    -r ${res} \\\n\t    -k KR \\\n\t    ${hic} \\\n\t    ${id}_loops\n\t\"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "hiccups_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "hiccups_out_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "label 'gpu'",
            "accelerator 1",
            "cpus 6",
            "memory '32 GB'",
            "container \"mblanche/hiccups-gpu\"",
            "publishDir \"${outDir}/hiccups/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mustache": {
        "name_process": "mustache",
        "string_process": " process mustache {\n\ttag \"_${id}\"\n\tcpus 24\n\tmemory '48 GB'\n\tcontainer \"mblanche/mustache\"\n\t\n\tpublishDir \"${outDir}/mustache\",\n\t    mode: 'copy'\n\t\n\tinput:\n\ttuple id, path(mcool), val(res)  from mustache_mcool_ch\n\t    .combine(Channel.from(1000,4000,16000))\n\t\n\toutput:\n\ttuple id, path(\"*.tsv\") into mustache_2_merge_ch\n\t\n\tscript:\n\t\"\"\"\n\ttouch ${id}_${res}kb_loops.tsv \n\tmustache -p ${task.cpus} \\\n\t    -f ${mcool} \\\n\t    -r ${res} \\\n\t    -o ${id}_${res}kb_loops.tsv\n\t\"\"\"\n    }",
        "nb_lignes_process": 23,
        "string_script": "\t\"\"\"\n\ttouch ${id}_${res}kb_loops.tsv \n\tmustache -p ${task.cpus} \\\n\t    -f ${mcool} \\\n\t    -r ${res} \\\n\t    -o ${id}_${res}kb_loops.tsv\n\t\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mustache_mcool_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mustache_2_merge_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 24",
            "memory '48 GB'",
            "container \"mblanche/mustache\"",
            "publishDir \"${outDir}/mustache\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "ABcomp": {
        "name_process": "ABcomp",
        "string_process": " process ABcomp {\n\ttag \"_${id}\"\n\tcpus 1\n\tmemory '12 GB'\n\tcontainer \"mblanche/fan-c\"\n\t\n\tpublishDir \"${outDir}/AB_comp\",\n\t    mode: 'copy'\n\t\n\tinput:\n\ttuple id, path(cool), val(resKB) from abcomp_mcool_ch\n    \t    .combine(Channel.from(ABresolutions))\n\t\n\tpath(genome) from abcomp_genome_ch.first()\n\t\n\toutput:\n\ttuple id, path(\"*.bed\"), path(\"*.ab\") into fanc_out_ch\n\t\n\tscript:\n\tres = resKB.toInteger() * 1000\n\t\"\"\"\n\tfanc compartments \\\n\t    -f \\\n\t    -v ${id}_eigenV_${resKB}kb.bed \\\n\t    -d ${id}_AB_${resKB}kb.bed \\\n\t    -g ${genome} \\\n\t    ${cool}@${res} \\\n\t    ${id}_${resKB}kb.ab\n\t\"\"\"\n\t\n    }",
        "nb_lignes_process": 29,
        "string_script": "\tres = resKB.toInteger() * 1000\n\t\"\"\"\n\tfanc compartments \\\n\t    -f \\\n\t    -v ${id}_eigenV_${resKB}kb.bed \\\n\t    -d ${id}_AB_${resKB}kb.bed \\\n\t    -g ${genome} \\\n\t    ${cool}@${res} \\\n\t    ${id}_${resKB}kb.ab\n\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "TRES"
        ],
        "tools_url": [
            "https://bio.tools/tres"
        ],
        "tools_dico": [
            {
                "name": "TRES",
                "uri": "https://bio.tools/tres",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Toolbox for Ranking and Evaluation of SNPs (Population Genomic Data).",
                "homepage": "http://mlkd.csd.auth.gr/bio/tres/"
            }
        ],
        "inputs": [
            "abcomp_mcool_ch",
            "abcomp_genome_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "fanc_out_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "tag \"_${id}\"",
            "cpus 1",
            "memory '12 GB'",
            "container \"mblanche/fan-c\"",
            "publishDir \"${outDir}/AB_comp\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "index": {
        "name_process": "index",
        "string_process": "\nprocess index {\n    label 'index'\n    tag '_${id}'\n    cpus 4\n    memory '16 GB'\n    container 'mblanche/bwa-samtools'\n    \n    input:\n    path(bam) from bam_ch\n\n    output:\n    tuple id, path(bam), path(\"*.bam.bai\") into bamNidx_ch\n    \n    script:\n    id = bam.name.toString().take(bam.name.toString().lastIndexOf('.'))\n    \"\"\"\n    samtools index -@${task.cpus} ${bam}\n    \"\"\"\n    \n\n}",
        "nb_lignes_process": 20,
        "string_script": "    id = bam.name.toString().take(bam.name.toString().lastIndexOf('.'))\n    \"\"\"\n    samtools index -@${task.cpus} ${bam}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MID",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/mid",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bamNidx_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "label 'index'",
            "tag '_${id}'",
            "cpus 4",
            "memory '16 GB'",
            "container 'mblanche/bwa-samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "bam2bw": {
        "name_process": "bam2bw",
        "string_process": "\nprocess bam2bw {\n    label 'batch'\n    tag \"_${id}\"\n    cpus 20\n    memory '150 GB'\n    container 'mblanche/r-cov'\n    \n    publishDir \"${outDir}\",\n\tmode: 'copy'\n    \n    input:\n    tuple val(id), path(bam), path(idx) from bamNidx_ch\n    \n    output:\n    path \"*.bw\" into bigwig_ch\n    \n    script:\n    \"\"\"\n    bam2bw ${bam} ${id}.bw ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    bam2bw ${bam} ${id}.bw ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamNidx_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bigwig_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "label 'batch'",
            "tag \"_${id}\"",
            "cpus 20",
            "memory '150 GB'",
            "container 'mblanche/r-cov'",
            "publishDir \"${outDir}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "indexBam": {
        "name_process": "indexBam",
        "string_process": "\nprocess indexBam {\n    cpus 8\n    memory \"64 GB\"\n    container 'mblanche/bwa-samtools'\n\n    input:\n    path(bam) from bam_ch\n\n    output:\n    tuple id, path(\"*index.bam\"), path(\"*.index.bam.bai\") into bamIdx_ch, bamFilt_ch\n\n    script:\n    id = bam.name.toString().take(bam.name.toString().lastIndexOf('.'))\n    \"\"\"\n    ln -s ${bam} ${id}.index.bam\n    samtools index -@ ${task.cpus} ${id}.index.bam\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    id = bam.name.toString().take(bam.name.toString().lastIndexOf('.'))\n    \"\"\"\n    ln -s ${bam} ${id}.index.bam\n    samtools index -@ ${task.cpus} ${id}.index.bam\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MID",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/mid",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bamIdx_ch",
            "bamFilt_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "cpus 8",
            "memory \"64 GB\"",
            "container 'mblanche/bwa-samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "deepVariant": {
        "name_process": "deepVariant",
        "string_process": "\nprocess deepVariant {\n    cpus 48\n    memory \"140 GB\"\n    container 'google/deepvariant:1.1.0'\n    publishDir \"${outDir}/deepVariant\"\n\n    input:\n    tuple id, path(bam), path(bai) from bamIdx_ch\n    tuple ref, path(index_files) from refIndex.first()\n\n    output:\n    tuple id, path(\"*.vcf\") into variants_ch\n\n    script:\n    \"\"\"\n       /opt/deepvariant/bin/run_deepvariant \\\n        --model_type=WGS \\\n        --ref=${ref}.fa \\\n        --reads=${bam} \\\n        --output_vcf=${id}.variants.vcf \\\n        --intermediate_results_dir ./tmp \\\n        --num_shards=${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n       /opt/deepvariant/bin/run_deepvariant \\\n        --model_type=WGS \\\n        --ref=${ref}.fa \\\n        --reads=${bam} \\\n        --output_vcf=${id}.variants.vcf \\\n        --intermediate_results_dir ./tmp \\\n        --num_shards=${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamIdx_ch",
            "refIndex"
        ],
        "nb_inputs": 2,
        "outputs": [
            "variants_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "cpus 48",
            "memory \"140 GB\"",
            "container 'google/deepvariant:1.1.0'",
            "publishDir \"${outDir}/deepVariant\""
        ],
        "when": "",
        "stub": ""
    },
    "clean_and_filter_lq_regions": {
        "name_process": "clean_and_filter_lq_regions",
        "string_process": "\nprocess clean_and_filter_lq_regions{\n    cpus 2\n    memory \"16 GB\"\n    container 'dovetailg/get-hq-region'\n    publishDir \"${outDir}/deepVariant\"\n\n    input:\n    tuple id, path(variants) from variants_ch\n    tuple id, path(bam), path(bai) from bamFilt_ch\n\n    output:\n    file(\"${id}.variants_hq.vcf.gz\") into variantsFilt_ch\n\n    script:\n    \"\"\"\n    cat ${variants} | grep -E '^#|0/0|CHROM|1/1|0/1|1/0|0/2|2/0' -w > variants_clean.vcf\n    get_HQ_region_bed.py -bam ${bam} -bedroot hq_intermediate\n    # get_HQ_region_bed.py variants_clean.vcf -bam ${bam} -bedroot hq_intermediate > hqregion.bed\n    bedtools intersect -header -a variants_clean.vcf -b hq_intermediate_highconf.bed > ${id}.variants_hq.vcf\n    bgzip ${id}.variants_hq.vcf\n    tabix -p vcf ${id}.variants_hq.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    cat ${variants} | grep -E '^#|0/0|CHROM|1/1|0/1|1/0|0/2|2/0' -w > variants_clean.vcf\n    get_HQ_region_bed.py -bam ${bam} -bedroot hq_intermediate\n    # get_HQ_region_bed.py variants_clean.vcf -bam ${bam} -bedroot hq_intermediate > hqregion.bed\n    bedtools intersect -header -a variants_clean.vcf -b hq_intermediate_highconf.bed > ${id}.variants_hq.vcf\n    bgzip ${id}.variants_hq.vcf\n    tabix -p vcf ${id}.variants_hq.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Chromas",
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/chromas",
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "Chromas",
                "uri": "https://bio.tools/chromas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0266",
                                    "term": "Vector sequence detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Chromas is a low-cost chromatogram file editor with search, vector sequence detection and multi-format sequence export functions, plus powerful batch processing.",
                "homepage": "http://technelysium.com.au/?page_id=13"
            },
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "variants_ch",
            "bamFilt_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "variantsFilt_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "cpus 2",
            "memory \"16 GB\"",
            "container 'dovetailg/get-hq-region'",
            "publishDir \"${outDir}/deepVariant\""
        ],
        "when": "",
        "stub": ""
    },
    "convertToBedpe": {
        "name_process": "convertToBedpe",
        "string_process": "\nprocess convertToBedpe {\n    label 'convertToBedpe'\n    tag '_${id}'\n    cpus 8\n    memory '16 GB'\n    container 'mblanche/bedtools'\n\n    publishDir \"${outDir}/pairsbedpe\",\n        mode: 'copy'\n\n    input:\n    path(pairs) from pairs_ch\n\n    output:\n    tuple id, path(\"*.pairsbedpe\") into pairsBedpe_ch\n    \n    script:\n    id = pairs.name.toString().take(pairs.name.toString().lastIndexOf('.'))\n    \"\"\"\n    zgrep -v \"^#\" ${pairs} \\\n        | awk -v OFS='\\t' '{print \\$2,(\\$3-75),(\\$3+75),\\$4,(\\$5-75),(\\$5+75),\"pair\"NR,\"1\",\"+\",\"-\"}' \\\n        > ${id}.pairsbedpe\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    id = pairs.name.toString().take(pairs.name.toString().lastIndexOf('.'))\n    \"\"\"\n    zgrep -v \"^#\" ${pairs} \\\n        | awk -v OFS='\\t' '{print \\$2,(\\$3-75),(\\$3+75),\\$4,(\\$5-75),(\\$5+75),\"pair\"NR,\"1\",\"+\",\"-\"}' \\\n        > ${id}.pairsbedpe\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "MID"
        ],
        "tools_url": [
            "https://bio.tools/mid"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            }
        ],
        "inputs": [
            "pairs_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pairsBedpe_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "label 'convertToBedpe'",
            "tag '_${id}'",
            "cpus 8",
            "memory '16 GB'",
            "container 'mblanche/bedtools'",
            "publishDir \"${outDir}/pairsbedpe\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pairToPair": {
        "name_process": "pairToPair",
        "string_process": "\nprocess pairToPair {\n    label 'pairToPair'\n    tag '_${id}'\n    cpus 16\n    memory '128 GB'\n    container 'mblanche/bedtools'\n\n    publishDir \"${outDir}/loopsSupport\",\n        mode: 'copy'\n\n    input:\n    tuple id, path(pairsBedpe), path(bedpe) from pairsBedpe_ch\n    .combine(loops_ch)\n\n    output:\n    tuple id, path(\"*.support\"), path(\"*.input.bedpe\") into support_ch\n    \n    script:\n    \"\"\"\n    bedtools pairtopair -a ${pairsBedpe} \\\n           -b ${bedpe} \\\n           -is | cut -f17 | sort | uniq -c | awk -v OFS='\\t' '{print \\$2,\\$1}' > ${id}.support\n    \n    ln -s ${bedpe} ${id}.input.bedpe\n\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    bedtools pairtopair -a ${pairsBedpe} \\\n           -b ${bedpe} \\\n           -is | cut -f17 | sort | uniq -c | awk -v OFS='\\t' '{print \\$2,\\$1}' > ${id}.support\n    \n    ln -s ${bedpe} ${id}.input.bedpe\n\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "pairsBedpe_ch",
            "loops_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "support_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "label 'pairToPair'",
            "tag '_${id}'",
            "cpus 16",
            "memory '128 GB'",
            "container 'mblanche/bedtools'",
            "publishDir \"${outDir}/loopsSupport\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "joinSupportToLoops": {
        "name_process": "joinSupportToLoops",
        "string_process": "\nprocess joinSupportToLoops {\n    label 'joinSupportToLoops'\n    tag '_${id}'\n    cpus 8\n    memory '16 GB'\n    container 'mblanche/bedtools'\n\n    publishDir \"${outDir}/loops\",\n        mode: 'copy'\n\n    input:\n    tuple id, path(support), path(bedpe) from support_ch\n\n    output:\n    tuple id, path(\"*.supported.bedpe\") into supportLoops_ch\n    \n    script:\n    \"\"\"\n    join -t \\$'\\t' \\\n     -a 1 \\\n     -1 7 \\\n     -2 1 \\\n     -e \"0\" \\\n     -o 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.10 2.2 \\\n     <(cat ${bedpe} | sort -k7,7b) <(sort -k1,1b ${support}) > ${id}.supported.bedpe\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    join -t \\$'\\t' \\\n     -a 1 \\\n     -1 7 \\\n     -2 1 \\\n     -e \"0\" \\\n     -o 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.10 2.2 \\\n     <(cat ${bedpe} | sort -k7,7b) <(sort -k1,1b ${support}) > ${id}.supported.bedpe\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "joineRML"
        ],
        "tools_url": [
            "https://bio.tools/joinerml"
        ],
        "tools_dico": [
            {
                "name": "joineRML",
                "uri": "https://bio.tools/joinerml",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3569",
                            "term": "Applied mathematics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Joint Modelling of Multivariate Longitudinal Data and Time-to-Event Outcomes.",
                "homepage": "https://cran.r-project.org/web/packages/joineRML/"
            }
        ],
        "inputs": [
            "support_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "supportLoops_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "torchij__nextflow",
        "directive": [
            "label 'joinSupportToLoops'",
            "tag '_${id}'",
            "cpus 8",
            "memory '16 GB'",
            "container 'mblanche/bedtools'",
            "publishDir \"${outDir}/loops\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
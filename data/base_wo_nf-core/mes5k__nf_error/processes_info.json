{
    "solid": {
        "name_process": "solid",
        "string_process": "\nprocess solid {\n                                                      \n    afterScript 'source after.sh solid'\n\n    input:\n    val(x)\n\n    output:\n                                                                               \n                                                                            \n                                             \n    path 'solid.txt', emit: values optional true\n    path 'error.json',  emit: errors optional true\n\n    script:\n    \"\"\"\n    echo ${x} > solid.txt\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    echo ${x} > solid.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "x"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mes5k__nf_error",
        "directive": [
            "afterScript 'source after.sh solid'"
        ],
        "when": "",
        "stub": ""
    },
    "flaky": {
        "name_process": "flaky",
        "string_process": "\nprocess flaky {\n                                                      \n    afterScript 'source after.sh flaky'\n\n    input:\n    path(x)\n\n    output:\n                                                                               \n    path \"*.txt\", emit: data optional true\n    path 'error.json', emit: errors optional true\n\n    script:\n    \"\"\"\n    N=\\$(cat ${x})\n    Y=\\$(mod3.py \\$N)\n    echo \\$Y > flaky.\\$N.txt\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    N=\\$(cat ${x})\n    Y=\\$(mod3.py \\$N)\n    echo \\$Y > flaky.\\$N.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "x"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mes5k__nf_error",
        "directive": [
            "afterScript 'source after.sh flaky'"
        ],
        "when": "",
        "stub": ""
    },
    "gen_report": {
        "name_process": "gen_report",
        "string_process": "\nprocess gen_report {\n    publishDir 'results', mode: \"copy\", overwite: true\n\n    input:\n    val(success)\n    val(errors)\n\n    output:\n    path 'report.txt'\n\n    script:\n    just_success = success.join(\" \")\n    just_errors = errors.join(\" \")\n    \"\"\"\n    # Combine successes and failures into\n    # a single report so all samples are\n    # accounted for!\n    for f in ${just_success}; do\n        res=\\$(cat \\$f)\n        echo \"Success: \\$res\" >> report.txt\n    done\n    for f in ${just_errors}; do\n        res=\\$(cat \\$f)\n        echo \"Failures: \\$res\" >> report.txt\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    just_success = success.join(\" \")\n    just_errors = errors.join(\" \")\n    \"\"\"\n    # Combine successes and failures into\n    # a single report so all samples are\n    # accounted for!\n    for f in ${just_success}; do\n        res=\\$(cat \\$f)\n        echo \"Success: \\$res\" >> report.txt\n    done\n    for f in ${just_errors}; do\n        res=\\$(cat \\$f)\n        echo \"Failures: \\$res\" >> report.txt\n    done\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "success",
            "errors"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "mes5k__nf_error",
        "directive": [
            "publishDir 'results', mode: \"copy\", overwite: true"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "LOAD_TAXONOMY": {
        "name_process": "LOAD_TAXONOMY",
        "string_process": "\nprocess LOAD_TAXONOMY {\n  label 'minimal'\n  publishDir params.outdir, mode: 'symlink'\n\n  output:\n  path params.database, emit: db\n\n  \"\"\"\n  kraken2-build --download-taxonomy --db \"${params.database}\"\n  \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\n  kraken2-build --download-taxonomy --db \"${params.database}\"\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UnseenBio__kraken2-humgut",
        "directive": [
            "label 'minimal'",
            "publishDir params.outdir, mode: 'symlink'"
        ],
        "when": "",
        "stub": ""
    },
    "LOAD_LIBRARY": {
        "name_process": "LOAD_LIBRARY",
        "string_process": "\nprocess LOAD_LIBRARY {\n  label 'minimal'\n\n  input:\n  tuple path(database), val(library)\n\n  output:\n  path \"${database}/library/${library}\", emit: library\n\n  script:\n  \"\"\"\n  kraken2-build --download-library ${library} --db \"${database}\"\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  kraken2-build --download-library ${library} --db \"${database}\"\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library",
            "database"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UnseenBio__kraken2-humgut",
        "directive": [
            "label 'minimal'"
        ],
        "when": "",
        "stub": ""
    },
    "EXTRACT_GENOMES": {
        "name_process": "EXTRACT_GENOMES",
        "string_process": "\nprocess EXTRACT_GENOMES {\n  label 'minimal'\n\n  input:\n  path archive\n  path table\n\n  output:\n  path '*.fna.gz', emit: genomes\n\n  \"\"\"\n  tail --lines=+2 \"${table}\" | \\\n    cut --fields=5 | \\\n    sed --expression='s/\\$/.fna.gz/' | \\\n    tar -xf \"${archive}\" --no-anchored --strip-components=1 --files-from -\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n  tail --lines=+2 \"${table}\" | \\\n    cut --fields=5 | \\\n    sed --expression='s/\\$/.fna.gz/' | \\\n    tar -xf \"${archive}\" --no-anchored --strip-components=1 --files-from -\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "archive",
            "table"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UnseenBio__kraken2-humgut",
        "directive": [
            "label 'minimal'"
        ],
        "when": "",
        "stub": ""
    },
    "ADD_TAXID": {
        "name_process": "ADD_TAXID",
        "string_process": "\nprocess ADD_TAXID {\n  label 'minimal'\n\n  input:\n  tuple path(table), path(genome)\n\n  output:\n  path taxid_genome, emit: genome\n\n  script:\n  decompressed = genome.baseName\n  taxid_genome = \"tax_${decompressed}\"\n  \"\"\"\n  gzip --decompress --keep --force \"${genome}\"\n  add_tax_id.py \"${table}\" \"${decompressed}\" \"${taxid_genome}\"\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  decompressed = genome.baseName\n  taxid_genome = \"tax_${decompressed}\"\n  \"\"\"\n  gzip --decompress --keep --force \"${genome}\"\n  add_tax_id.py \"${table}\" \"${decompressed}\" \"${taxid_genome}\"\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "table",
            "genome"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UnseenBio__kraken2-humgut",
        "directive": [
            "label 'minimal'"
        ],
        "when": "",
        "stub": ""
    },
    "ADD_LIBRARY": {
        "name_process": "ADD_LIBRARY",
        "string_process": "\nprocess ADD_LIBRARY {\n  input:\n  path(database)\n  path 'tax_*.fna'\n\n  output:\n  path \"${database}/library/added\", emit: library\n\n  script:\n  \"\"\"\n  cat tax_*.fna > humgut.fna\n  kraken2-build --add-to-library humgut.fna \\\n    --threads ${task.cpus} \\\n    --db \"${database}\"\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  cat tax_*.fna > humgut.fna\n  kraken2-build --add-to-library humgut.fna \\\n    --threads ${task.cpus} \\\n    --db \"${database}\"\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "database"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UnseenBio__kraken2-humgut",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "BUILD_KRAKEN": {
        "name_process": "BUILD_KRAKEN",
        "string_process": "\nprocess BUILD_KRAKEN {\n  input:\n  path(database)\n  path('*')\n\n  output:\n  path database, emit: db\n\n  script:\n  \"\"\"\n  kraken2-build --build \\\n    --db \"${database}\" \\\n    --threads ${task.cpus} \\\n    --kmer-len ${params.kmer_length} \\\n    --minimizer-len ${params.minimizer_length} \\\n    --minimizer-spaces ${params.minimizer_spaces}\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  kraken2-build --build \\\n    --db \"${database}\" \\\n    --threads ${task.cpus} \\\n    --kmer-len ${params.kmer_length} \\\n    --minimizer-len ${params.minimizer_length} \\\n    --minimizer-spaces ${params.minimizer_spaces}\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "database"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UnseenBio__kraken2-humgut",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "BUILD_BRACKEN": {
        "name_process": "BUILD_BRACKEN",
        "string_process": "\nprocess BUILD_BRACKEN {\n  input:\n  tuple path(database), val(read_length)\n\n  output:\n  path database, emit: db\n\n  script:\n  \"\"\"\n  bracken-build \\\n    -d \"${database}\" \\\n    -t ${task.cpus} \\\n    -k ${params.kmer_length} \\\n    -l ${read_length}\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  bracken-build \\\n    -d \"${database}\" \\\n    -t ${task.cpus} \\\n    -k ${params.kmer_length} \\\n    -l ${read_length}\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_length",
            "database"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UnseenBio__kraken2-humgut",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
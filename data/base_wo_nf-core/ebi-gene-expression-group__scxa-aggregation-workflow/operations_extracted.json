{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(\"$quantDir/*\", type: 'dir')\n    .set { QUANT_DIRS }",
        "origin": [
            [
                "\"$quantDir/*\", type: 'dir'",
                "A"
            ]
        ],
        "gives": [
            [
                "QUANT_DIRS",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath(\"$quantDir/*/transcript_to_gene.txt\", checkIfExists: true )\n    .set { TRANSCRIPT_TO_GENE_MANY }",
        "origin": [
            [
                "\"$quantDir/*/transcript_to_gene.txt\", checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "TRANSCRIPT_TO_GENE_MANY",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ALEVIN_RESULTS = Channel.create()",
        "origin": [],
        "gives": [
            [
                "ALEVIN_RESULTS",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "KALLISTO_RESULTS = Channel.create()",
        "origin": [],
        "gives": [
            [
                "KALLISTO_RESULTS",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "ALL_RESULTS\n    .map{ row-> tuple( row[0].text, row[1].text, row[2]) }        \n    .set{ ALL_RESULTS_VALS }",
        "origin": [
            [
                "ALL_RESULTS",
                "P"
            ]
        ],
        "gives": [
            [
                "ALL_RESULTS_VALS",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "ALL_RESULTS_VALS.choice( KALLISTO_RESULTS, ALEVIN_RESULTS ) {a -> \nif (= 'kallisto' ) { \n    a[1]  = 0\n } else { \n    a[1]  = 1\n } \n}",
        "origin": [
            [
                "ALL_RESULTS_VALS",
                "P"
            ]
        ],
        "gives": [
            [
                "KALLISTO_RESULTS",
                "P"
            ],
            [
                "ALEVIN_RESULTS",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "KALLISTO_CHUNKS\n    .transpose()\n    .set { FLATTENED_KALLISTO_CHUNKS }",
        "origin": [
            [
                "KALLISTO_CHUNKS",
                "P"
            ]
        ],
        "gives": [
            [
                "FLATTENED_KALLISTO_CHUNKS",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "ALEVIN_RESULTS_BY_LIB\n    .transpose()\n    .into{\n        FLATTENED_ALEVIN_RESULTS_BY_LIB\n        FLATTENED_ALEVIN_RESULTS_BY_LIB_FOR_STATS\n    }",
        "origin": [
            [
                "ALEVIN_RESULTS_BY_LIB",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_9": {
        "string": "ALEVIN_CHUNK_COUNT_MATRICES\n    .concat(KALLISTO_CHUNK_COUNT_MATRICES)\n    .groupTuple()\n    .set { PROTOCOL_COUNT_CHUNKS }",
        "origin": [
            [
                "ALEVIN_CHUNK_COUNT_MATRICES",
                "P"
            ],
            [
                "KALLISTO_CHUNK_COUNT_MATRICES",
                "P"
            ]
        ],
        "gives": [
            [
                "PROTOCOL_COUNT_CHUNKS",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "KALLISTO_CHUNK_ABUNDANCE_MATRICES\n    .groupTuple()\n    .set { PROTOCOL_KALLISTO_ABUNDANCE_CHUNKS }",
        "origin": [
            [
                "KALLISTO_CHUNK_ABUNDANCE_MATRICES",
                "P"
            ]
        ],
        "gives": [
            [
                "PROTOCOL_KALLISTO_ABUNDANCE_CHUNKS",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "KALLISTO_CHUNK_STATS\n    .collectFile( sort: true, name: \"kallisto_stats.tsv\", storeDir: \"${resultsRoot}/matrices\", keepHeader: true )",
        "origin": [
            [
                "KALLISTO_CHUNK_STATS",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_12": {
        "string": "ALEVIN_CHUNK_STATS\n    .collectFile( sort: true, name: \"alevin_stats.tsv\", storeDir: \"${resultsRoot}/matrices\", keepHeader: true )",
        "origin": [
            [
                "ALEVIN_CHUNK_STATS",
                "P"
            ]
        ],
        "gives": []
    }
}
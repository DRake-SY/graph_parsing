{
    "OPERATION_1": {
        "string": "Channel.fromPath(params.reads)\n    .map { f -> tuple(f.baseName, f) }\n    .set { readsToAlign }",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "readsToAlign",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.fromPath(params.reads)\n    .set { readsToCat }",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "readsToCat",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "referenceFaidx.into { referenceFaidx1; referenceFaidx2 }",
        "origin": [
            [
                "referenceFaidx",
                "P"
            ]
        ],
        "gives": [
            [
                "referenceFaidx1",
                "P"
            ],
            [
                "referenceFaidx2",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "referenceFaidx1\n    .splitCsv(sep: \"\\t\")\n    .map { it[0] }\n    .combine(referenceFaidx2)\n    .combine(alignedAll)\n    .combine(alignedAllBai)\n    .set { contigsRefBam }",
        "origin": [
            [
                "referenceFaidx1",
                "P"
            ],
            [
                "referenceFaidx2",
                "P"
            ],
            [
                "alignedAll",
                "P"
            ],
            [
                "alignedAllBai",
                "P"
            ]
        ],
        "gives": [
            [
                "contigsRefBam",
                "P"
            ]
        ]
    }
}
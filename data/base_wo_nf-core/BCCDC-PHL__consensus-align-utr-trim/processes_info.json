{
    "updatePangolin": {
        "name_process": "updatePangolin",
        "string_process": "process updatePangolin {\n  executor 'local'\n\n  input:\n  val(should_update)\n\n  output:\n  val(did_update)\n\n  script:\n  did_update = should_update\n  should_update_string = should_update ? \"true\" : \"false\"\n  \"\"\"\n  should_update=${should_update_string}\n  if [ \"\\$should_update\" = true ]; then\n    pangolin --update\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  did_update = should_update\n  should_update_string = should_update ? \"true\" : \"false\"\n  \"\"\"\n  should_update=${should_update_string}\n  if [ \"\\$should_update\" = true ]; then\n    pangolin --update\n  fi\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "should_update"
        ],
        "nb_inputs": 1,
        "outputs": [
            "did_update"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__consensus-align-utr-trim",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "pangolin": {
        "name_process": "pangolin",
        "string_process": "\nprocess pangolin {\n\n  tag { sampleName }\n\n  publishDir \"${params.run_dir}/${sampleName}\", pattern: \"${sampleName}_lineage_report.csv\", mode: 'copy'\n\n  input:\n  tuple val(sampleName), path(consensus_fasta), val(pangolin_updated)\n\n  output:\n  tuple val(sampleName), path(\"${sampleName}_lineage_report.csv\")\n\n  script:\n  \"\"\"\n  pangolin ${consensus_fasta} \n  mv lineage_report.csv ${sampleName}_lineage_report.csv\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  pangolin ${consensus_fasta} \n  mv lineage_report.csv ${sampleName}_lineage_report.csv\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleName",
            "pangolin_updated",
            "consensus_fasta"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sampleName"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__consensus-align-utr-trim",
        "directive": [
            "tag { sampleName }",
            "publishDir \"${params.run_dir}/${sampleName}\", pattern: \"${sampleName}_lineage_report.csv\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "getSampleDirs": {
        "name_process": "getSampleDirs",
        "string_process": "process getSampleDirs {\n\n  tag { runId }\n\n  executor 'local'\n\n  input:\n      path(input_dir)\n\n  output:\n      tuple val(runId), path(\"${runId}/*\")\n\n  script:\n      runId = input_dir.baseName\n      \"\"\"\n      \"\"\"  \n}",
        "nb_lignes_process": 15,
        "string_script": "      runId = input_dir.baseName\n      \"\"\"\n      \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_dir"
        ],
        "nb_inputs": 1,
        "outputs": [
            "runId"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__consensus-align-utr-trim",
        "directive": [
            "tag { runId }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "getConsensusFile": {
        "name_process": "getConsensusFile",
        "string_process": "\nprocess getConsensusFile {\n\n  tag { sampleName }\n\n  executor 'local'\n\n  input:\n      path(sampleDir)\n\n  output:\n      tuple val(sampleName), path(\"${sampleName}.consensus.fasta\"), optional: true\n\n  script:\n      sampleName = sampleDir.baseName\n      \"\"\"\n      if [[ -f ${sampleDir}/${sampleName}.consensus.fasta ]]; then\n        sed -E 's/^>([[:alnum:]]+).*/>\\\\1/' ${sampleDir}/${sampleName}.consensus.fasta > ${sampleName}.consensus.fasta\n      elif [[ -f ${sampleDir}/${sampleName}.corrected.consensus.fasta ]]; then\n        sed -E 's/^>([[:alnum:]]+).*/>\\\\1/' ${sampleDir}/${sampleName}.corrected.consensus.fasta > ${sampleName}.consensus.fasta\n      fi\n      \"\"\"  \n}",
        "nb_lignes_process": 21,
        "string_script": "      sampleName = sampleDir.baseName\n      \"\"\"\n      if [[ -f ${sampleDir}/${sampleName}.consensus.fasta ]]; then\n        sed -E 's/^>([[:alnum:]]+).*/>\\\\1/' ${sampleDir}/${sampleName}.consensus.fasta > ${sampleName}.consensus.fasta\n      elif [[ -f ${sampleDir}/${sampleName}.corrected.consensus.fasta ]]; then\n        sed -E 's/^>([[:alnum:]]+).*/>\\\\1/' ${sampleDir}/${sampleName}.corrected.consensus.fasta > ${sampleName}.consensus.fasta\n      fi\n      \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleDir"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sampleName"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__consensus-align-utr-trim",
        "directive": [
            "tag { sampleName }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "alignConsensusToReference": {
        "name_process": "alignConsensusToReference",
        "string_process": "\nprocess alignConsensusToReference {\n       \n                                                                                    \n                                                                                    \n      \n\n    tag { sampleName }\n\n    publishDir \"${params.run_dir}/${sampleName}\", pattern: \"${sampleName}.consensus.aln.fa\", mode: 'copy'\n\n    input:\n        tuple val(sampleName), path(consensus)\n\n    output:\n        tuple val(sampleName), path(\"${sampleName}.consensus.aln.fa\")\n\n    script:\n                                                  \n        awk_string = '/^>/ {printf(\"\\\\n%s\\\\n\", $0); next; } { printf(\"%s\", $0); }  END { printf(\"\\\\n\"); }'\n        \"\"\"\n        mafft \\\n          --preservecase \\\n          --keeplength \\\n          --add \\\n          ${consensus} \\\n          ${params.ref} \\\n          > ${sampleName}.with_ref.multi_line.alignment.fa\n        awk '${awk_string}' ${sampleName}.with_ref.multi_line.alignment.fa > ${sampleName}.with_ref.single_line.alignment.fa\n        tail -n 2 ${sampleName}.with_ref.single_line.alignment.fa > ${sampleName}.consensus.aln.fa\n        \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "        awk_string = '/^>/ {printf(\"\\\\n%s\\\\n\", $0); next; } { printf(\"%s\", $0); }  END { printf(\"\\\\n\"); }'\n        \"\"\"\n        mafft \\\n          --preservecase \\\n          --keeplength \\\n          --add \\\n          ${consensus} \\\n          ${params.ref} \\\n          > ${sampleName}.with_ref.multi_line.alignment.fa\n        awk '${awk_string}' ${sampleName}.with_ref.multi_line.alignment.fa > ${sampleName}.with_ref.single_line.alignment.fa\n        tail -n 2 ${sampleName}.with_ref.single_line.alignment.fa > ${sampleName}.consensus.aln.fa\n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "NextSV",
            "MAFFT"
        ],
        "tools_url": [
            "https://bio.tools/nextsv",
            "https://bio.tools/MAFFT"
        ],
        "tools_dico": [
            {
                "name": "NextSV",
                "uri": "https://bio.tools/nextsv",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A meta SV caller and a computational pipeline to perform SV calling from low coverage long-read sequencing data. It integrates three aligners and three SV callers and generates two integrated call sets (sensitive/stringent) for different analysis purpose.",
                "homepage": "http://github.com/Nextomics/NextSV"
            },
            {
                "name": "MAFFT",
                "uri": "https://bio.tools/MAFFT",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.",
                "homepage": "http://mafft.cbrc.jp/alignment/server/index.html"
            }
        ],
        "inputs": [
            "sampleName",
            "consensus"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sampleName"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__consensus-align-utr-trim",
        "directive": [
            "tag { sampleName }",
            "publishDir \"${params.run_dir}/${sampleName}\", pattern: \"${sampleName}.consensus.aln.fa\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "trimUTRFromAlignment": {
        "name_process": "trimUTRFromAlignment",
        "string_process": "\nprocess trimUTRFromAlignment {\n       \n                                                                   \n      \n\n    tag { sampleName }\n\n    publishDir \"${params.run_dir}/${sampleName}\", pattern: \"${sampleName}.consensus.aln.utr_trimmed.fa\", mode: 'copy'\n\n    input:\n        tuple val(sampleName), path(alignment)\n\n    output:\n        tuple val(sampleName), path(\"${sampleName}.consensus.aln.utr_trimmed.fa\")\n\n    script:\n    awk_string = '/^>/ { printf(\"%s\\\\n\", $0); next; } { printf(\"%s\", $0); } END { printf(\"\\\\n\"); }'\n        \"\"\"\n        echo -e \"\\$(head -n 1 ${alignment} | cut -c 2-):266-29674\" > non_utr.txt\n        samtools faidx ${alignment}\n        samtools faidx -r non_utr.txt ${alignment} > ${sampleName}.consensus.aln.utr_trimmed.multi_line.fa\n        awk '${awk_string}' ${sampleName}.consensus.aln.utr_trimmed.multi_line.fa > ${sampleName}.consensus.aln.utr_trimmed.fa\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    awk_string = '/^>/ { printf(\"%s\\\\n\", $0); next; } { printf(\"%s\", $0); } END { printf(\"\\\\n\"); }'\n        \"\"\"\n        echo -e \"\\$(head -n 1 ${alignment} | cut -c 2-):266-29674\" > non_utr.txt\n        samtools faidx ${alignment}\n        samtools faidx -r non_utr.txt ${alignment} > ${sampleName}.consensus.aln.utr_trimmed.multi_line.fa\n        awk '${awk_string}' ${sampleName}.consensus.aln.utr_trimmed.multi_line.fa > ${sampleName}.consensus.aln.utr_trimmed.fa\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "NextSV",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/nextsv",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "NextSV",
                "uri": "https://bio.tools/nextsv",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A meta SV caller and a computational pipeline to perform SV calling from low coverage long-read sequencing data. It integrates three aligners and three SV callers and generates two integrated call sets (sensitive/stringent) for different analysis purpose.",
                "homepage": "http://github.com/Nextomics/NextSV"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sampleName",
            "alignment"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sampleName"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__consensus-align-utr-trim",
        "directive": [
            "tag { sampleName }",
            "publishDir \"${params.run_dir}/${sampleName}\", pattern: \"${sampleName}.consensus.aln.utr_trimmed.fa\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
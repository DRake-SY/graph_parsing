{
    "bcl2fastq_single": {
        "name_process": "bcl2fastq_single",
        "string_process": "process bcl2fastq_single {\n\n    tag { \"Bcl2Fastq single end\" }\n    publishDir \"${outdir}/${sampleProject}/fastq\", mode: 'copy'\n                         \n    label 'process_medium'\n\n    input:\n    file sampleSheet\n    val sampleProject\n    val sampleProjectTF\n    val outdir\n    val path_bcl \n\n    output:\n    path \"*_R1.fastq.gz\", emit: R1\n    path \"Stats\", emit: bcl_stats\n    path \"Reports\", emit: bcl_reports\n    file \"fastq.md5\"\n\n    script:\n    \"\"\"\n    cleanSamplesheet.py ${sampleSheet}\n\n    bcl2fastq \\\n        --runfolder-dir ${path_bcl} \\\n        -p ${task.cpus} \\\n        --output-dir \\$PWD \\\n        --no-lane-splitting \\\n        --sample-sheet nf-SampleSheet.csv \\\n        --minimum-trimmed-read-length=8 \\\n        --ignore-missing-positions \\\n        --ignore-missing-controls \\\n        --ignore-missing-filter \\\n        --barcode-mismatches=1\n\n    #rm -f Undetermined*.fastq.gz\n\n    # Move FASTQ files from subdirectories into the top level\n    if [[ ${sampleProjectTF} == 'true' ]]; then\n        find . -mindepth 2 -type f -name '*.fastq.gz' -exec mv -t \\$PWD {} +\n    fi\n\n    shopt -s nullglob\n\n    # Rename FASTQ files\n    for f in *R1_001.fastq.gz; do\n        BN=\\${f%_S*}\n        mv \\${f} \\${BN}_R1.fastq.gz\n    done\n\n    find . -maxdepth 1 -type f -name '*.fastq.gz' -exec md5sum {} + > fastq.md5\n    \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    \"\"\"\n    cleanSamplesheet.py ${sampleSheet}\n\n    bcl2fastq \\\n        --runfolder-dir ${path_bcl} \\\n        -p ${task.cpus} \\\n        --output-dir \\$PWD \\\n        --no-lane-splitting \\\n        --sample-sheet nf-SampleSheet.csv \\\n        --minimum-trimmed-read-length=8 \\\n        --ignore-missing-positions \\\n        --ignore-missing-controls \\\n        --ignore-missing-filter \\\n        --barcode-mismatches=1\n\n    #rm -f Undetermined*.fastq.gz\n\n    # Move FASTQ files from subdirectories into the top level\n    if [[ ${sampleProjectTF} == 'true' ]]; then\n        find . -mindepth 2 -type f -name '*.fastq.gz' -exec mv -t \\$PWD {} +\n    fi\n\n    shopt -s nullglob\n\n    # Rename FASTQ files\n    for f in *R1_001.fastq.gz; do\n        BN=\\${f%_S*}\n        mv \\${f} \\${BN}_R1.fastq.gz\n    done\n\n    find . -maxdepth 1 -type f -name '*.fastq.gz' -exec md5sum {} + > fastq.md5\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleSheet",
            "sampleProject",
            "sampleProjectTF",
            "outdir",
            "path_bcl"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"Bcl2Fastq single end\" }",
            "publishDir \"${outdir}/${sampleProject}/fastq\", mode: 'copy'",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "SalmonIndex": {
        "name_process": "SalmonIndex",
        "string_process": "\nprocess SalmonIndex {\n    tag \"$transcriptome.simpleName\"\n\n    input:\n    path transcriptome \n\n    output:\n    path 'index' \n\n    script:\n    \"\"\"\n    salmon index --threads $task.cpus -t $transcriptome -i index\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    salmon index --threads $task.cpus -t $transcriptome -i index\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "transcriptome"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag \"$transcriptome.simpleName\""
        ],
        "when": "",
        "stub": ""
    },
    "umiDedup": {
        "name_process": "umiDedup",
        "string_process": "process umiDedup {\n    \n    tag { \"UmiToolsDedup - ${sample_id}\" }\n    publishDir \"${params.outdir}/umi_dedup\", mode: 'copy'\n    label 'process_medium'\n\n    input:\n    tuple val(sample_id),\n        file(bam),\n        file(bai)\n    val outdir\n    val opt_args\n\n    output:\n    path \"${sample_id}.umidup.bam\", emit: bam\n    path \"${sample_id}.umidup.bam.bai\", emit: bai\n    file \"*.{log,err,tsv}\"\n\n    script:\n    def usr_args = opt_args ?: ''\n\n    \"\"\"\n    umi_tools dedup \\\n    -I ${bam} \\\n    -L ${sample_id}.log \\\n    -E ${sample_id}.err \\\n    -S ${sample_id}.umidup.bam \\\n    --umi-separator=\":\" \\\n    --temp-dir=\\${PWD} \\\n    --paired \\\n    --output-stats=${sample_id}\n\n    samtools index ${sample_id}.umidup.bam\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def usr_args = opt_args ?: ''\n\n    \"\"\"\n    umi_tools dedup \\\n    -I ${bam} \\\n    -L ${sample_id}.log \\\n    -E ${sample_id}.err \\\n    -S ${sample_id}.umidup.bam \\\n    --umi-separator=\":\" \\\n    --temp-dir=\\${PWD} \\\n    --paired \\\n    --output-stats=${sample_id}\n\n    samtools index ${sample_id}.umidup.bam\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample_id",
            "bam",
            "bai",
            "outdir",
            "opt_args"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"UmiToolsDedup - ${sample_id}\" }",
            "publishDir \"${params.outdir}/umi_dedup\", mode: 'copy'",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "factera": {
        "name_process": "factera",
        "string_process": "process factera {\n\n\ttag { \"factera - ${sample_id}\" } \n    publishDir \"${outdir}/Factera\", mode: 'copy'\n    label 'process_factera'\n\n    input:\n    path factera\n\tpath bam\n\tpath exons\n\tpath bitRef\n    \t \n    output:\n    file \"*\"\n\n    script:\n    \"\"\"\n\tperl ${factera} -o ./ ${bam} ${exons} ${bitRef}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n\tperl ${factera} -o ./ ${bam} ${exons} ${bitRef}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "factera",
            "bam",
            "exons",
            "bitRef"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"factera - ${sample_id}\" }",
            "publishDir \"${outdir}/Factera\", mode: 'copy'",
            "label 'process_factera'"
        ],
        "when": "",
        "stub": ""
    },
    "arriba": {
        "name_process": "arriba",
        "string_process": "process arriba {\n\n\ttag { \"Arriba - ${filename}\" } \n    publishDir \"${outdir}/${group}/${filename}/Arriba\", mode: 'copy'\n    label 'process_arriba'\n\n    input:\n\ttuple val(filename), val(group), val(sample), val(path), file(reads)\n\tval assembly\n\tval gtf\n\tval blacklist\n\tval knownfus\n\tval proteindom\n\tval staridx\n\tval outdir\n    \t \n    output:\n\tfile \"${filename}.arriba.fusions.tsv\"\n\tfile \"${filename}.arriba.fusions.discarded.tsv\"\n\n    script:\n    \"\"\"\n\tSTAR \\\n\t\t--genomeDir ${staridx} \\\n\t\t--genomeLoad NoSharedMemory \\\n\t\t--readFilesIn ${reads} \\\n\t\t--runThreadN ${task.cpus} \\\n\t\t--readFilesCommand zcat \\\n\t\t--outStd BAM_Unsorted \\\n\t\t--outSAMtype BAM Unsorted \\\n\t\t--outSAMunmapped Within \\\n\t\t--outBAMcompression 0 \\\n\t\t--outFilterMultimapNmax 50 \\\n\t\t--peOverlapNbasesMin 10 \\\n\t\t--alignSplicedMateMapLminOverLmate 0.5 \\\n\t\t--alignSJstitchMismatchNmax 5 -1 5 5 \\\n\t\t--chimSegmentMin 10 \\\n\t\t--chimOutType WithinBAM HardClip \\\n\t\t--chimJunctionOverhangMin 10 \\\n\t\t--chimScoreDropMax 30 \\\n\t\t--chimScoreJunctionNonGTAG 0 \\\n\t\t--chimScoreSeparation 1 \\\n\t\t--chimSegmentReadGapMax 3 \\\n\t\t--chimMultimapNmax 50 |\n\tarriba \\\n    \t-x /dev/stdin \\\n\t    -o ${filename}.arriba.fusions.tsv \\\n\t    -O ${filename}.arriba.fusions.discarded.tsv \\\n\t\t-a ${assembly} \\\n\t\t-g ${gtf} \\\n\t\t-b ${blacklist} \\\n\t\t-k ${knownfus} \\\n\t\t-p ${proteindom}\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    \"\"\"\n\tSTAR \\\n\t\t--genomeDir ${staridx} \\\n\t\t--genomeLoad NoSharedMemory \\\n\t\t--readFilesIn ${reads} \\\n\t\t--runThreadN ${task.cpus} \\\n\t\t--readFilesCommand zcat \\\n\t\t--outStd BAM_Unsorted \\\n\t\t--outSAMtype BAM Unsorted \\\n\t\t--outSAMunmapped Within \\\n\t\t--outBAMcompression 0 \\\n\t\t--outFilterMultimapNmax 50 \\\n\t\t--peOverlapNbasesMin 10 \\\n\t\t--alignSplicedMateMapLminOverLmate 0.5 \\\n\t\t--alignSJstitchMismatchNmax 5 -1 5 5 \\\n\t\t--chimSegmentMin 10 \\\n\t\t--chimOutType WithinBAM HardClip \\\n\t\t--chimJunctionOverhangMin 10 \\\n\t\t--chimScoreDropMax 30 \\\n\t\t--chimScoreJunctionNonGTAG 0 \\\n\t\t--chimScoreSeparation 1 \\\n\t\t--chimSegmentReadGapMax 3 \\\n\t\t--chimMultimapNmax 50 |\n\tarriba \\\n    \t-x /dev/stdin \\\n\t    -o ${filename}.arriba.fusions.tsv \\\n\t    -O ${filename}.arriba.fusions.discarded.tsv \\\n\t\t-a ${assembly} \\\n\t\t-g ${gtf} \\\n\t\t-b ${blacklist} \\\n\t\t-k ${knownfus} \\\n\t\t-p ${proteindom}\n    \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "STAR",
            "Arriba"
        ],
        "tools_url": [
            "https://bio.tools/star",
            "https://bio.tools/Arriba"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            },
            {
                "name": "Arriba",
                "uri": "https://bio.tools/Arriba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3199",
                                    "term": "Split read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3199",
                                    "term": "Split-read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Arriba is a command-line tool to detect gene fusions from RNA-Seq data based on the STAR aligner. In addition to fusions, it can detect exon duplications/inversions and truncations of genes (i.e., breakpoints in introns and intergenic regions). Arriba is the winner of the DREAM SMC-RNA Challenge.",
                "homepage": "https://github.com/suhrig/arriba/"
            }
        ],
        "inputs": [
            "filename",
            "group",
            "sample",
            "reads",
            "assembly",
            "gtf",
            "blacklist",
            "knownfus",
            "proteindom",
            "staridx",
            "outdir"
        ],
        "nb_inputs": 11,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"Arriba - ${filename}\" }",
            "publishDir \"${outdir}/${group}/${filename}/Arriba\", mode: 'copy'",
            "label 'process_arriba'"
        ],
        "when": "",
        "stub": ""
    },
    "fusioncatcher_v133": {
        "name_process": "fusioncatcher_v133",
        "string_process": "process fusioncatcher_v133 {\n\n    tag { \"fusioncatcher_v133 - ${filename}\" } \n    publishDir \"${outdir}/${group}/${filename}/fusioncatcher_v133\", mode: 'copy'\n    label 'process_fusioncatcher_v133'\n\n    input:\n    tuple val(filename), val(group), val(sample), val(path), file(reads)\n    val fusioncatcher_db\n\tval outdir\n     \n    output:\n    file \"${filename}_fusioncatcher_v133.txt\"\n\n    script:\n    \"\"\"\n\tfusioncatcher \\\n        -p ${task.cpus} \\\n        -d ${fusioncatcher_db} \\\n        -i ${reads[0]},${reads[1]} \\\n        -o \\${PWD} \\\n        --skip-blat\n\t\t\t\n\tmv final-list_candidate-fusion-genes.txt ${filename}_fusioncatcher_v133.txt\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n\tfusioncatcher \\\n        -p ${task.cpus} \\\n        -d ${fusioncatcher_db} \\\n        -i ${reads[0]},${reads[1]} \\\n        -o \\${PWD} \\\n        --skip-blat\n\t\t\t\n\tmv final-list_candidate-fusion-genes.txt ${filename}_fusioncatcher_v133.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "FusionCatcher"
        ],
        "tools_url": [
            "https://bio.tools/fusioncatcher"
        ],
        "tools_dico": [
            {
                "name": "FusionCatcher",
                "uri": "https://bio.tools/fusioncatcher",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene structure"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "FusionCatcher searches for novel/known somatic fusion genes, translocations, and chimeras in RNA-seq data (paired-end or single-end reads from Illumina NGS platforms like Solexa/HiSeq/NextSeq/MiSeq) from diseased samples).",
                "homepage": "https://github.com/ndaniel/fusioncatcher"
            }
        ],
        "inputs": [
            "filename",
            "group",
            "sample",
            "reads",
            "fusioncatcher_db",
            "outdir"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"fusioncatcher_v133 - ${filename}\" }",
            "publishDir \"${outdir}/${group}/${filename}/fusioncatcher_v133\", mode: 'copy'",
            "label 'process_fusioncatcher_v133'"
        ],
        "when": "",
        "stub": ""
    },
    "RunGatkBaseRecalibration": {
        "name_process": "RunGatkBaseRecalibration",
        "string_process": "\nprocess RunGatkBaseRecalibration {\n    tag { sample_id + \" - BaseRecalibration\" }\n\n    publishDir \"${params.outdir}/BaseRecal\", mode: 'copy'\n    stageInMode 'copy'                                             \n\n    input:\n    file ref\n    file idx\n    file dict\n    file dbSNP\n    file dbIdx\n    tuple sample_id,\n        file(bam),\n        file(bai)\n\n    output:\n    tuple sample_id,\n        file(\"${sample_id}.recal.bam\"),\n        file(\"${sample_id}.recal.bam.bai\")\n\n    script:\n    \"\"\"\n    gatk BaseRecalibrator \\\n        -R ${ref} \\\n        -I ${bam} \\\n        -known-sites ${dbSNP} \\\n        -O ${sample_id}_recal.table\n\n    gatk ApplyBQSR \\\n        -R ${ref} \\\n        -I ${bam} \\\n        -bqsr-recal-file ${sample_id}_recal.table \\\n        -O ${sample_id}.recal.bam\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    \"\"\"\n    gatk BaseRecalibrator \\\n        -R ${ref} \\\n        -I ${bam} \\\n        -known-sites ${dbSNP} \\\n        -O ${sample_id}_recal.table\n\n    gatk ApplyBQSR \\\n        -R ${ref} \\\n        -I ${bam} \\\n        -bqsr-recal-file ${sample_id}_recal.table \\\n        -O ${sample_id}.recal.bam\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "ref",
            "idx",
            "dict",
            "dbSNP",
            "dbIdx",
            "bam",
            "bai",
            "sample_id"
        ],
        "nb_inputs": 8,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { sample_id + \" - BaseRecalibration\" }",
            "publishDir \"${params.outdir}/BaseRecal\", mode: 'copy'",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bcl2fastq_paired_single_index": {
        "name_process": "bcl2fastq_paired_single_index",
        "string_process": "process bcl2fastq_paired_single_index {\n\n    tag { \"Bcl2Fastq paired single index\" }\n    publishDir \"${outdir}/${sampleProject}/fastq\", mode: 'copy'\n                         \n    label 'process_medium'\n\n    input:\n    file sampleSheet\n    val sampleProject\n    val sampleProjectTF\n    val outdir\n    val path_bcl \n\n    output:\n    path \"*_R1.fastq.gz\", emit: R1\n    path \"*_R2.fastq.gz\", emit: R2\n    path \"Stats\", emit: bcl_stats\n    path \"Reports\", emit: bcl_reports\n    file \"fastq.md5\"\n\n    script:\n    \"\"\"\n    cleanSamplesheet.py ${sampleSheet}\n\n    bcl2fastq \\\n        --runfolder-dir ${path_bcl} \\\n        -p ${task.cpus} \\\n        --output-dir \\$PWD \\\n        --no-lane-splitting \\\n        --sample-sheet nf-SampleSheet.csv \\\n        --minimum-trimmed-read-length=8 \\\n        --ignore-missing-positions \\\n        --ignore-missing-controls \\\n        --ignore-missing-filter \\\n        --barcode-mismatches=1\n\n    #rm -f Undetermined*.fastq.gz\n\n    # Move FASTQ files from subdirectories into the top level\n    if [[ ${sampleProjectTF} == 'true' ]]; then\n        find . -mindepth 2 -type f -name '*.fastq.gz' -exec mv -t \\$PWD {} +\n    fi\n\n    shopt -s nullglob\n\n    # Rename FASTQ files\n    for f in *R1_001.fastq.gz; do\n        BN=\\${f%_S*}\n\n        mv \\${f} \\${BN}_R1.fastq.gz\n        mv \\${BN}*_R2_001.fastq.gz \\${BN}_R2.fastq.gz\n    done\n\n    find . -maxdepth 1 -type f -name '*.fastq.gz' -exec md5sum {} + > fastq.md5\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    \"\"\"\n    cleanSamplesheet.py ${sampleSheet}\n\n    bcl2fastq \\\n        --runfolder-dir ${path_bcl} \\\n        -p ${task.cpus} \\\n        --output-dir \\$PWD \\\n        --no-lane-splitting \\\n        --sample-sheet nf-SampleSheet.csv \\\n        --minimum-trimmed-read-length=8 \\\n        --ignore-missing-positions \\\n        --ignore-missing-controls \\\n        --ignore-missing-filter \\\n        --barcode-mismatches=1\n\n    #rm -f Undetermined*.fastq.gz\n\n    # Move FASTQ files from subdirectories into the top level\n    if [[ ${sampleProjectTF} == 'true' ]]; then\n        find . -mindepth 2 -type f -name '*.fastq.gz' -exec mv -t \\$PWD {} +\n    fi\n\n    shopt -s nullglob\n\n    # Rename FASTQ files\n    for f in *R1_001.fastq.gz; do\n        BN=\\${f%_S*}\n\n        mv \\${f} \\${BN}_R1.fastq.gz\n        mv \\${BN}*_R2_001.fastq.gz \\${BN}_R2.fastq.gz\n    done\n\n    find . -maxdepth 1 -type f -name '*.fastq.gz' -exec md5sum {} + > fastq.md5\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleSheet",
            "sampleProject",
            "sampleProjectTF",
            "outdir",
            "path_bcl"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"Bcl2Fastq paired single index\" }",
            "publishDir \"${outdir}/${sampleProject}/fastq\", mode: 'copy'",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "ADAPTERREMOVAL": {
        "name_process": "ADAPTERREMOVAL",
        "string_process": "\nprocess ADAPTERREMOVAL {\n    tag { sample_id + \" - AdapterRemoval\" }\n\n    memory '4 GB'\n\n    publishDir \"${params.outdir}/adapterremoval\", mode: 'copy'\n    stageInMode 'copy' \n                                    \n\n    input:\n    tuple sample_id, file(reads)\n\n    output:\n    tuple sample_id,\n        file(\"${sample_id}_T1.fastq.gz \"),\n        file(\"${sample_id}_T2.fastq.gz \")\n\n    script:\n    \"\"\"\n    AdapterRemoval  \\\\\n            --file1 ${reads[0]} \\\\\n            --file2 ${reads[0]} \\\\\n            --basename $sample_id \\\\\n            --threads $task.cpus \\\\\n            --settings ${sample_id}.log \\\\\n            --output1 ${sample_id}_T1.fastq.gz \\\\\n            --output2 ${sample_id}_T2.fastq.gz \\\\\n            --seed 42 \\\\\n            --gzip\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    AdapterRemoval  \\\\\n            --file1 ${reads[0]} \\\\\n            --file2 ${reads[0]} \\\\\n            --basename $sample_id \\\\\n            --threads $task.cpus \\\\\n            --settings ${sample_id}.log \\\\\n            --output1 ${sample_id}_T1.fastq.gz \\\\\n            --output2 ${sample_id}_T2.fastq.gz \\\\\n            --seed 42 \\\\\n            --gzip\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { sample_id + \" - AdapterRemoval\" }",
            "memory '4 GB'",
            "publishDir \"${params.outdir}/adapterremoval\", mode: 'copy'",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "process multiqc {\n\n    tag { \"MultiQC\" } \n    publishDir \"${outdir}/${sampleProject}/QC-results\", mode: 'copy'\n    label 'process_low'\n\n    input:\n    file fastqc_in\n    file bcl_stats\n    file bbduck_stats\n    file kraken2_stats\n    val outdir\n    val sampleProject\n                    \n\n    output:\n    path \"multiqc_report.html\", emit: multiqc_report\n    path \"multiqc_data.zip\", emit: multiqc_data\n\n    script:\n                                 \n\n    \"\"\"\n    if [[ ${bcl_stats} != 'false' ]]; then\n        cp Stats/Stats.json .\n    fi\n    \n    multiqc \\\n        --config ${projectDir}/conf/multiqc_config.yaml \\\n        .\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    if [[ ${bcl_stats} != 'false' ]]; then\n        cp Stats/Stats.json .\n    fi\n    \n    multiqc \\\n        --config ${projectDir}/conf/multiqc_config.yaml \\\n        .\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "fastqc_in",
            "bcl_stats",
            "bbduck_stats",
            "kraken2_stats",
            "outdir",
            "sampleProject"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"MultiQC\" }",
            "publishDir \"${outdir}/${sampleProject}/QC-results\", mode: 'copy'",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "R": {
        "name_process": "R",
        "string_process": "process R {\n    tag {\"R ${sample_id}\"}\n\tpublishDir \"${outdir}/R\", mode: 'copy'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple val(sample_id)\n        file(\"${sample_id}.arriba.fusions.tsv\")\n    \tval outdir\n    \t \n    output:\n    tuple val(sample_id),\n        file(\"${sample_id}.fusions.tsv\"),\n        file(\"${sample_id}.arriba.fusions.csv\")\n\n    script:\n    \"\"\"\n    library(tidyverse)\n\n    # variables\n    file_path <- \"${sample_id}.arriba.fusions.tsv\"\n\n    # read-in arriba file, calculate Junc + Span reads & select required cols\n    arriba_data <- read.delim(file_path, header = TRUE, sep = \"\\t\", \n                          colClasses = c(\"character\",\"character\",\"character\",\"character\",\n                                         \"character\",\"character\",\"character\",\"character\",\n                                         \"character\",\"character\",\"character\",\"integer\",\n                                         \"integer\",\"integer\",\"integer\",\"integer\",\n                                         \"character\",\"character\",\"character\",\"character\",\n                                         \"character\",\"character\",\"character\",\"character\")) %>% \n      # select required columns\n      dplyr::select(X.gene1,gene2,strand1.gene.fusion.,strand2.gene.fusion.,\n                    breakpoint1,breakpoint2,split_reads1,split_reads2,\n                    discordant_mates,confidence,reading_frame) %>% \n      # generate columns for Junc_reads, Span_reads and TTL_reads\n      mutate(Junc_reads = (split_reads1+split_reads2), \n             Span_reads = discordant_mates,\n             TTL_reads = (Junc_reads+Span_reads)) %>% \n      # remove now unnecessary columns\n      dplyr::select(-split_reads1,-split_reads2,-discordant_mates) %>% \n      # rename X.gene1\n      dplyr::rename(gene1 = X.gene1)\n\n    ## Edit gene names to ensure same gene name used consistently across callers\n    arriba_data$gene1 <- gsub(\"MLLT4\",\"AFDN\", arriba_data$gene1)\n    arriba_data$gene2 <- gsub(\"MLLT4\",\"AFDN\", arriba_data$gene2)\n    arriba_data$gene1 <- gsub(\"CRLF2[(].+[)],CSF2RA[(].+[)]\",\"CRLF2\",arriba_data$gene1)\n    arriba_data$gene2 <- gsub(\"CRLF2[(].+[)],CSF2RA[(].+[)]\",\"CRLF2\",arriba_data$gene2)\n\n    arriba_data$gene1 <- gsub(\"IGHV.+\",\"IGH@\", arriba_data$gene1)\n    arriba_data$gene1 <- gsub(\"IGHJ.+\",\"IGH@\", arriba_data$gene1)\n    arriba_data$gene1 <- gsub(\"IGHD\",\"IGH@\", arriba_data$gene1)\n    arriba_data$gene1 <- gsub(\"IGHM\",\"IGH@\", arriba_data$gene1)\n    arriba_data$gene1 <- gsub(\"IGH@.+\",\"IGH@\", arriba_data$gene1)\n    arriba_data$gene1 <- gsub(\".+IGH@\",\"IGH@\",arriba_data$gene1)\n    arriba_data$gene1 <- gsub(\"DUX4.+\",\"DUX4\",arriba_data$gene1)\n\n    arriba_data$gene2 <- gsub(\"IGHV.+\",\"IGH@\", arriba_data$gene2)\n    arriba_data$gene2 <- gsub(\"IGHJ.+\",\"IGH@\", arriba_data$gene2)\n    arriba_data$gene2 <- gsub(\"IGHD\",\"IGH@\", arriba_data$gene2)\n    arriba_data$gene2 <- gsub(\"IGHM\",\"IGH@\", arriba_data$gene2)\n    arriba_data$gene2 <- gsub(\"IGH@.+\",\"IGH@\", arriba_data$gene2)\n    arriba_data$gene2 <- gsub(\".+IGH@\",\"IGH@\",arriba_data$gene2)\n    arriba_data$gene2 <- gsub(\"DUX4.+\",\"DUX4\",arriba_data$gene2)\n\n    # generate the break-point information and fusion.genes column\n    arriba_data <- arriba_data %>% \n      # extract strand after fusion for gene1\n      separate(strand1.gene.fusion., c(NA,\"strand1\"), sep = \"[/]\") %>% \n      # extract strand after fusion for gene2\n      separate(strand2.gene.fusion., c(NA,\"strand2\"), sep = \"[/]\") %>% \n      # create the breakpoint sequence\n      mutate(break.point = paste(\"chr\",breakpoint1,\":\",strand1,\":chr\",breakpoint2,\":\",strand2, sep=\"\")) %>% \n      mutate(fusion.genes = paste(gene1,gene2,sep=\":\")) %>% \n      # select columns in desired order (if want to include reading_frame first need to convert from factor to character)\n      dplyr::select(fusion.genes,break.point,TTL_reads,Span_reads,Junc_reads,confidence)\n\n    ##### May wish to output format at this point before filtering fusions for those involving key genes #####\n\n    genes_of_interest <- c(\"BCR\",\"ABL1\",\"KMT2A\",\"ETV6\",\"RUNX1\",\"IGH@\",\"DUX4\",\"MLLT10\",\n                       \"PICALM\",\"CRLF2\",\"P2RY8\",\"STIL\",\"TAL1\",\"PAX5\",\"JAK2\",\"TCF3\",\n                       \"PBX1\",\"IKZF1\",\"NOTCH1\",\"AUTS2\",\"HLF\",\"NUP214\",\"JARID2\",\"SET\",\n                       \"ZNF384\",\"COBL\",\"HOOK3\",\"FGFR1\",\"BCL2\",\"CTCF\",\"NUTF2\",\n                       \"TLX1\",\"DDX3X\",\"AFDN\",\"CEBPB\",\"APC\",\"EBF1\",\"PDGFRB\",\n                       \"HOXA9\",\"TRBC2\",\"MLLT1\",\"CSF1R\",\"SSBP2\",\"NDRG1\",\"EP300\",\"EPOR\",\n                       \"ZNF521\",\"SRCIN1\",\"ARHGAP22\",\"ATF7IP\",\"TAF15\",\"CBFA2T3\",\n                       \"FLT3\",\"PAN3\",\"CEBPE\",\"CEBPA\",\"GSDMA\",\"FGFR2\",\"FGFR4\",\"FGFR3\",\n                       \"ID4\",\"BCL6\",\"NUTM1\",\"MYC\",\"SMARCA2\",\"CREBBP\",\"NTRK3\",\n                       \"ABL2\",\"KLF6\",\"STRAP\",\"MEF2D\",\"BCL9\",\"ARID1B\",\"ARID5B\",\"BCL2\")\n\n\n    ## Filter output to extract most likely break-point in cases where same fusion reported multiple times\n    filt_arriba_data <- arriba_data %>% \n      split(f = .$fusion.genes) %>% \n          lapply(function(x){x[which.max(x$TTL_reads),]}) %>% \n          bind_rows() %>% \n      # to reduce the amount of output I am also going to filter for fusions of interest\n      filter(grepl(paste(genes_of_interest,collapse=\"|\"), fusion.genes))\n\n    # write filtered output to csv file\n    output_file <- gsub(\".fusions.tsv\",\".arriba.fusions.csv\", file_path)\n    write.csv(filt_arriba_data, file = output_file, row.names = FALSE)\n    \"\"\"\n}",
        "nb_lignes_process": 102,
        "string_script": "    \"\"\"\n    library(tidyverse)\n\n    # variables\n    file_path <- \"${sample_id}.arriba.fusions.tsv\"\n\n    # read-in arriba file, calculate Junc + Span reads & select required cols\n    arriba_data <- read.delim(file_path, header = TRUE, sep = \"\\t\", \n                          colClasses = c(\"character\",\"character\",\"character\",\"character\",\n                                         \"character\",\"character\",\"character\",\"character\",\n                                         \"character\",\"character\",\"character\",\"integer\",\n                                         \"integer\",\"integer\",\"integer\",\"integer\",\n                                         \"character\",\"character\",\"character\",\"character\",\n                                         \"character\",\"character\",\"character\",\"character\")) %>% \n      # select required columns\n      dplyr::select(X.gene1,gene2,strand1.gene.fusion.,strand2.gene.fusion.,\n                    breakpoint1,breakpoint2,split_reads1,split_reads2,\n                    discordant_mates,confidence,reading_frame) %>% \n      # generate columns for Junc_reads, Span_reads and TTL_reads\n      mutate(Junc_reads = (split_reads1+split_reads2), \n             Span_reads = discordant_mates,\n             TTL_reads = (Junc_reads+Span_reads)) %>% \n      # remove now unnecessary columns\n      dplyr::select(-split_reads1,-split_reads2,-discordant_mates) %>% \n      # rename X.gene1\n      dplyr::rename(gene1 = X.gene1)\n\n    ## Edit gene names to ensure same gene name used consistently across callers\n    arriba_data$gene1 <- gsub(\"MLLT4\",\"AFDN\", arriba_data$gene1)\n    arriba_data$gene2 <- gsub(\"MLLT4\",\"AFDN\", arriba_data$gene2)\n    arriba_data$gene1 <- gsub(\"CRLF2[(].+[)],CSF2RA[(].+[)]\",\"CRLF2\",arriba_data$gene1)\n    arriba_data$gene2 <- gsub(\"CRLF2[(].+[)],CSF2RA[(].+[)]\",\"CRLF2\",arriba_data$gene2)\n\n    arriba_data$gene1 <- gsub(\"IGHV.+\",\"IGH@\", arriba_data$gene1)\n    arriba_data$gene1 <- gsub(\"IGHJ.+\",\"IGH@\", arriba_data$gene1)\n    arriba_data$gene1 <- gsub(\"IGHD\",\"IGH@\", arriba_data$gene1)\n    arriba_data$gene1 <- gsub(\"IGHM\",\"IGH@\", arriba_data$gene1)\n    arriba_data$gene1 <- gsub(\"IGH@.+\",\"IGH@\", arriba_data$gene1)\n    arriba_data$gene1 <- gsub(\".+IGH@\",\"IGH@\",arriba_data$gene1)\n    arriba_data$gene1 <- gsub(\"DUX4.+\",\"DUX4\",arriba_data$gene1)\n\n    arriba_data$gene2 <- gsub(\"IGHV.+\",\"IGH@\", arriba_data$gene2)\n    arriba_data$gene2 <- gsub(\"IGHJ.+\",\"IGH@\", arriba_data$gene2)\n    arriba_data$gene2 <- gsub(\"IGHD\",\"IGH@\", arriba_data$gene2)\n    arriba_data$gene2 <- gsub(\"IGHM\",\"IGH@\", arriba_data$gene2)\n    arriba_data$gene2 <- gsub(\"IGH@.+\",\"IGH@\", arriba_data$gene2)\n    arriba_data$gene2 <- gsub(\".+IGH@\",\"IGH@\",arriba_data$gene2)\n    arriba_data$gene2 <- gsub(\"DUX4.+\",\"DUX4\",arriba_data$gene2)\n\n    # generate the break-point information and fusion.genes column\n    arriba_data <- arriba_data %>% \n      # extract strand after fusion for gene1\n      separate(strand1.gene.fusion., c(NA,\"strand1\"), sep = \"[/]\") %>% \n      # extract strand after fusion for gene2\n      separate(strand2.gene.fusion., c(NA,\"strand2\"), sep = \"[/]\") %>% \n      # create the breakpoint sequence\n      mutate(break.point = paste(\"chr\",breakpoint1,\":\",strand1,\":chr\",breakpoint2,\":\",strand2, sep=\"\")) %>% \n      mutate(fusion.genes = paste(gene1,gene2,sep=\":\")) %>% \n      # select columns in desired order (if want to include reading_frame first need to convert from factor to character)\n      dplyr::select(fusion.genes,break.point,TTL_reads,Span_reads,Junc_reads,confidence)\n\n    ##### May wish to output format at this point before filtering fusions for those involving key genes #####\n\n    genes_of_interest <- c(\"BCR\",\"ABL1\",\"KMT2A\",\"ETV6\",\"RUNX1\",\"IGH@\",\"DUX4\",\"MLLT10\",\n                       \"PICALM\",\"CRLF2\",\"P2RY8\",\"STIL\",\"TAL1\",\"PAX5\",\"JAK2\",\"TCF3\",\n                       \"PBX1\",\"IKZF1\",\"NOTCH1\",\"AUTS2\",\"HLF\",\"NUP214\",\"JARID2\",\"SET\",\n                       \"ZNF384\",\"COBL\",\"HOOK3\",\"FGFR1\",\"BCL2\",\"CTCF\",\"NUTF2\",\n                       \"TLX1\",\"DDX3X\",\"AFDN\",\"CEBPB\",\"APC\",\"EBF1\",\"PDGFRB\",\n                       \"HOXA9\",\"TRBC2\",\"MLLT1\",\"CSF1R\",\"SSBP2\",\"NDRG1\",\"EP300\",\"EPOR\",\n                       \"ZNF521\",\"SRCIN1\",\"ARHGAP22\",\"ATF7IP\",\"TAF15\",\"CBFA2T3\",\n                       \"FLT3\",\"PAN3\",\"CEBPE\",\"CEBPA\",\"GSDMA\",\"FGFR2\",\"FGFR4\",\"FGFR3\",\n                       \"ID4\",\"BCL6\",\"NUTM1\",\"MYC\",\"SMARCA2\",\"CREBBP\",\"NTRK3\",\n                       \"ABL2\",\"KLF6\",\"STRAP\",\"MEF2D\",\"BCL9\",\"ARID1B\",\"ARID5B\",\"BCL2\")\n\n\n    ## Filter output to extract most likely break-point in cases where same fusion reported multiple times\n    filt_arriba_data <- arriba_data %>% \n      split(f = .$fusion.genes) %>% \n          lapply(function(x){x[which.max(x$TTL_reads),]}) %>% \n          bind_rows() %>% \n      # to reduce the amount of output I am also going to filter for fusions of interest\n      filter(grepl(paste(genes_of_interest,collapse=\"|\"), fusion.genes))\n\n    # write filtered output to csv file\n    output_file <- gsub(\".fusions.tsv\",\".arriba.fusions.csv\", file_path)\n    write.csv(filt_arriba_data, file = output_file, row.names = FALSE)\n    \"\"\"",
        "nb_lignes_script": 86,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "outdir"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag {\"R ${sample_id}\"}",
            "publishDir \"${outdir}/R\", mode: 'copy' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "starAlign": {
        "name_process": "starAlign",
        "string_process": "process starAlign {\n    tag { \"STAR align - ${sample_id}\"  }\n    publishDir \"${outdir}/STAR\", mode: 'copy'\n                                                                      \n    label 'process_high'\n\n    input:\n    tuple val(sample_id), file(reads)\n    path star_idx\n    val outdir\n    val opt_args\n\n    output:\n    tuple val(sample_id),\n        file(\"${sample_id}.Aligned.sortedByCoord.out.bam\"),\n        file(\"${sample_id}.Aligned.sortedByCoord.out.bam.bai\")\n\n    script:\n    def usr_args = opt_args ?: ''\n\n    \"\"\"\n    STAR \\\n    ${usr_args} \\\n    --genomeDir ${star_idx} \\\n    --readFilesIn ${reads} \\\n    --readFilesCommand zcat \\\n    --runThreadN ${task.cpus} \\\n    --outSAMtype BAM SortedByCoordinate \\\n    --outSAMattributes NH HI NM MD AS \\\n    --outFileNamePrefix ${sample_id}\".\" \\\n    --outSAMattrRGline ID:${sample_id} LB:Lib1 PL:illumina PU:machine SM:${sample_id}_SM \\\n    --chimOutType WithinBAM \\\n    --chimSegmentMin 20 \\\n    --twopassMode Basic \\\n    --outReadsUnmapped Fastx\n\n    samtools index -@ ${task.cpus} ${sample_id}.Aligned.sortedByCoord.out.bam\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def usr_args = opt_args ?: ''\n\n    \"\"\"\n    STAR \\\n    ${usr_args} \\\n    --genomeDir ${star_idx} \\\n    --readFilesIn ${reads} \\\n    --readFilesCommand zcat \\\n    --runThreadN ${task.cpus} \\\n    --outSAMtype BAM SortedByCoordinate \\\n    --outSAMattributes NH HI NM MD AS \\\n    --outFileNamePrefix ${sample_id}\".\" \\\n    --outSAMattrRGline ID:${sample_id} LB:Lib1 PL:illumina PU:machine SM:${sample_id}_SM \\\n    --chimOutType WithinBAM \\\n    --chimSegmentMin 20 \\\n    --twopassMode Basic \\\n    --outReadsUnmapped Fastx\n\n    samtools index -@ ${task.cpus} ${sample_id}.Aligned.sortedByCoord.out.bam\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "STAR",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/star",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "star_idx",
            "outdir",
            "opt_args"
        ],
        "nb_inputs": 5,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"STAR align - ${sample_id}\" }",
            "publishDir \"${outdir}/STAR\", mode: 'copy'",
            "label 'process_high'"
        ],
        "when": "",
        "stub": ""
    },
    "bcl2fastq_single_multiplex": {
        "name_process": "bcl2fastq_single_multiplex",
        "string_process": "process bcl2fastq_single_multiplex {\n\n    tag { \"Bcl2Fastq - single - multiplex\" }\n    publishDir \"${outdir}/fastq\", mode: 'copy'\n    stageInMode 'copy'\n    label 'process_medium'\n\n    input:\n    file sampleSheet\n    val outdir\n    val path_bcl \n\n    output:\n    path \"*_R1*.fastq.gz\", emit: R1\n    path \"*_R2*.fastq.gz\", emit: R2\n\n    script:\n    \"\"\"\n    bcl2fastq \\\n        --runfolder-dir ${path_bcl} \\\n        -p ${task.cpus} \\\n        --output-dir \\$PWD \\\n        --use-bases-mask ... \\\n        --mask-short-adapter-reads=8 \\\n        --no-lane-splitting \\\n        --sample-sheet ${sampleSheet} \\\n        --minimum-trimmed-read-length=8 \\\n        --ignore-missing-positions \\\n        --ignore-missing-controls \\\n        --ignore-missing-filter \\\n        --barcode-mismatches=1\n\n    rm -f Undetermined*.fastq.gz\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    bcl2fastq \\\n        --runfolder-dir ${path_bcl} \\\n        -p ${task.cpus} \\\n        --output-dir \\$PWD \\\n        --use-bases-mask ... \\\n        --mask-short-adapter-reads=8 \\\n        --no-lane-splitting \\\n        --sample-sheet ${sampleSheet} \\\n        --minimum-trimmed-read-length=8 \\\n        --ignore-missing-positions \\\n        --ignore-missing-controls \\\n        --ignore-missing-filter \\\n        --barcode-mismatches=1\n\n    rm -f Undetermined*.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleSheet",
            "outdir",
            "path_bcl"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"Bcl2Fastq - single - multiplex\" }",
            "publishDir \"${outdir}/fastq\", mode: 'copy'",
            "stageInMode 'copy'",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "starFusion": {
        "name_process": "starFusion",
        "string_process": "process starFusion {\n\n    tag { \"STAR_Fusion - ${filename}\" } \n    publishDir \"${outdir}/${group}/${filename}/STAR_fusion\", mode: 'copy'\n    label 'process_starfusion'\n\n    input:\n    tuple val(filename), val(group), val(sample), val(path), file(reads)\n    val ctat_dir\n    val outdir\n     \n    output:\n    file \"${filename}_star-fusion.tsv\"\n    file \"${filename}_star-fusion.abridged.tsv\"\n\n    script:\n    \"\"\"\n\tSTAR-Fusion \\\\\n\t    --genome_lib_dir ${ctat_dir} \\\\\n        --left_fq ${reads[0]} \\\\\n        --right_fq ${reads[1]} \\\\\n        --CPU ${task.cpus} \\\\\n    \t--FusionInspector inspect \\\\\n    \t--examine_coding_effect \\\\\n        --denovo_reconstruct \\\\\n        --output_dir \\${PWD}\n\n\tmv star-fusion.fusion_predictions.tsv ${filename}_star-fusion.tsv\n    mv star-fusion.fusion_predictions.abridged.tsv ${filename}_star-fusion.abridged.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n\tSTAR-Fusion \\\\\n\t    --genome_lib_dir ${ctat_dir} \\\\\n        --left_fq ${reads[0]} \\\\\n        --right_fq ${reads[1]} \\\\\n        --CPU ${task.cpus} \\\\\n    \t--FusionInspector inspect \\\\\n    \t--examine_coding_effect \\\\\n        --denovo_reconstruct \\\\\n        --output_dir \\${PWD}\n\n\tmv star-fusion.fusion_predictions.tsv ${filename}_star-fusion.tsv\n    mv star-fusion.fusion_predictions.abridged.tsv ${filename}_star-fusion.abridged.tsv\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "filename",
            "group",
            "sample",
            "reads",
            "ctat_dir",
            "outdir"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"STAR_Fusion - ${filename}\" }",
            "publishDir \"${outdir}/${group}/${filename}/STAR_fusion\", mode: 'copy'",
            "label 'process_starfusion'"
        ],
        "when": "",
        "stub": ""
    },
    "bbduk": {
        "name_process": "bbduk",
        "string_process": "process bbduk {\n\n    tag { \"BBDuk - ${sample_id}\" } \n    publishDir \"${outdir}/${sampleProject}/QC-results/bbduk\", mode: 'copy'\n    label 'process_low'\n\n    input:\n    tuple val(sample_id), file(reads)\n    val library_type\n    val outdir\n    val sampleProject\n\n    output:\n    path \"${sample_id}.stats\", emit: stats\n\n    script:\n    if (library_type == 'paired') {\n        \"\"\"\n        bbduk.sh \\\n            in1=${reads[0]} \\\n            in2=${reads[1]} \\\n\t    \tout1=${sample_id}_clean_1.gz \\\n            out2=${sample_id}_clean_2.gz \\\n\t    \tref=/data/bioinformatics/bcbio_genomes/others/rRNA_contamination/rRNA-db-contam.fasta.gz k=31 mm=f \\\n\t    \tstats=${sample_id}.stats\n\n        rm *clean*.gz\n        \"\"\"\n    } else if (library_type == 'single') {\n        \"\"\"\n        bbduk.sh \\\n            in1=${reads[0]} \\\n\t    \tout1=${sample_id}_clean.gz \\\n\t    \tref=/data/bioinformatics/bcbio_genomes/others/rRNA_contamination/rRNA-db-contam.fasta.gz \\\n            k=31 \\\n            mm=f \\\n\t    \tstats=${sample_id}.stats\n        \n        rm *clean.gz\n        \"\"\"\n    } \n}",
        "nb_lignes_process": 40,
        "string_script": "    if (library_type == 'paired') {\n        \"\"\"\n        bbduk.sh \\\n            in1=${reads[0]} \\\n            in2=${reads[1]} \\\n\t    \tout1=${sample_id}_clean_1.gz \\\n            out2=${sample_id}_clean_2.gz \\\n\t    \tref=/data/bioinformatics/bcbio_genomes/others/rRNA_contamination/rRNA-db-contam.fasta.gz k=31 mm=f \\\n\t    \tstats=${sample_id}.stats\n\n        rm *clean*.gz\n        \"\"\"\n    } else if (library_type == 'single') {\n        \"\"\"\n        bbduk.sh \\\n            in1=${reads[0]} \\\n\t    \tout1=${sample_id}_clean.gz \\\n\t    \tref=/data/bioinformatics/bcbio_genomes/others/rRNA_contamination/rRNA-db-contam.fasta.gz \\\n            k=31 \\\n            mm=f \\\n\t    \tstats=${sample_id}.stats\n        \n        rm *clean.gz\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads",
            "library_type",
            "outdir",
            "sampleProject"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"BBDuk - ${sample_id}\" }",
            "publishDir \"${outdir}/${sampleProject}/QC-results/bbduk\", mode: 'copy'",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "BwaMapSortedBam": {
        "name_process": "BwaMapSortedBam",
        "string_process": "\nprocess BwaMapSortedBam {\n    tag { sample_id + \" - BWA align\" }\n\n    memory '4 GB'\n\n    publishDir \"${params.outdir}/BWA\", mode: 'copy'\n    stageInMode 'copy'                                             \n                                    \n\n    input:\n    file bwa_idx\n    tuple sample_id, file(reads)\n\n    output:\n    tuple sample_id,\n        file(\"${sample_id}.bwamem.bam\"),\n        file(\"${sample_id}.bwamem.bam.bai\")\n\n    script:\n    \"\"\"\n    # bwa alignment\n    bwa mem -t ${task.cpus} \\\n        -R \"\\\"@RG\\\\tID:${sample_id}\\\\tSM:${sample_id}\\\\tPL:ILLUMINA\\\\tLB:${sample_id}\\\\tPU:LIB1\\\"\" \\\n        ${bwa_idx} ${reads} | \\\n            samtools sort --threads ${task.cpus} -m 2G - > ${sample_id}.bwamem.bam\n    \n    # index with sambamba\n    sambamba index -t ${task.cpus} ${sample_id}.bwamem.bam\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    # bwa alignment\n    bwa mem -t ${task.cpus} \\\n        -R \"\\\"@RG\\\\tID:${sample_id}\\\\tSM:${sample_id}\\\\tPL:ILLUMINA\\\\tLB:${sample_id}\\\\tPU:LIB1\\\"\" \\\n        ${bwa_idx} ${reads} | \\\n            samtools sort --threads ${task.cpus} -m 2G - > ${sample_id}.bwamem.bam\n    \n    # index with sambamba\n    sambamba index -t ${task.cpus} ${sample_id}.bwamem.bam\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools",
            "Sambamba"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools",
            "https://bio.tools/sambamba"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "Sambamba",
                "uri": "https://bio.tools/sambamba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a high performance modern robust and fast tool (and library), written in the D programming language, for working with SAM, BAM and CRAM formats.",
                "homepage": "http://www.open-bio.org/wiki/Sambamba"
            }
        ],
        "inputs": [
            "bwa_idx",
            "reads",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { sample_id + \" - BWA align\" }",
            "memory '4 GB'",
            "publishDir \"${params.outdir}/BWA\", mode: 'copy'",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "kraken2": {
        "name_process": "kraken2",
        "string_process": "process kraken2 {\n\n    tag { \"Kraken2 - ${sample_id}\" } \n    publishDir \"${outdir}/${sampleProject}/QC-results/kraken2\", mode: 'copy'\n    label 'process_kraken'\n\n    input:\n    tuple val(sample_id), file(reads)\n    val outdir\n    val sampleProject\n\n    output:\n    path \"${sample_id}.kraken2\", emit: stats\n\n    script:\n    \"\"\"\n    kraken2 \\\n        --db /data/bioinformatics/bcbio_genomes/others/kraken2_standard_20200919\\\n        --quick \\\n        --threads ${task.cpus} \\\n        --gzip-compressed \\\n        --memory-mapping \\\n        --report ${sample_id}.kraken2 \\\n        ${reads}\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    kraken2 \\\n        --db /data/bioinformatics/bcbio_genomes/others/kraken2_standard_20200919\\\n        --quick \\\n        --threads ${task.cpus} \\\n        --gzip-compressed \\\n        --memory-mapping \\\n        --report ${sample_id}.kraken2 \\\n        ${reads}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "outdir",
            "sampleProject"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"Kraken2 - ${sample_id}\" }",
            "publishDir \"${outdir}/${sampleProject}/QC-results/kraken2\", mode: 'copy'",
            "label 'process_kraken'"
        ],
        "when": "",
        "stub": ""
    },
    "featureCounts": {
        "name_process": "featureCounts",
        "string_process": "process featureCounts {\n\n    tag { \"FeatureCounts\" }\n    publishDir \"${outdir}/featureCounts\", mode: 'copy'\n    label 'process_low'\n\n    input:\n    file gtf\n    file bams\n    file bais\n    val outdir\n    val opt_args\n\n    output:\n    file \"*\"\n\n    script:\n    def usr_args = opt_args ?: ''\n\n    \"\"\"\n    featureCounts \\\n        ${usr_args} \\\n        -T ${task.cpus} \\\n        -a ${gtf} \\\n        -o counts.txt \\\n        ${bams}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def usr_args = opt_args ?: ''\n\n    \"\"\"\n    featureCounts \\\n        ${usr_args} \\\n        -T ${task.cpus} \\\n        -a ${gtf} \\\n        -o counts.txt \\\n        ${bams}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "gtf",
            "bams",
            "bais",
            "outdir",
            "opt_args"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"FeatureCounts\" }",
            "publishDir \"${outdir}/featureCounts\", mode: 'copy'",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "rclone": {
        "name_process": "rclone",
        "string_process": "process rclone {\n\n    tag { \"rclone\" } \n    publishDir \"${outdir}\", enabled: false\n    label 'process_threads'\n\n    input:\n    file multiqc\n    val outdir\n    val sampleProject\n\n    script:\n    \"\"\"\n    rclone copy \\\n        --progress \\\n        --transfers ${task.cpus} \\\n        ${outdir}/${sampleProject} CloudStor:/Shared/SAGC/${sampleProject}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    rclone copy \\\n        --progress \\\n        --transfers ${task.cpus} \\\n        ${outdir}/${sampleProject} CloudStor:/Shared/SAGC/${sampleProject}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "multiqc",
            "outdir",
            "sampleProject"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"rclone\" }",
            "publishDir \"${outdir}\", enabled: false",
            "label 'process_threads'"
        ],
        "when": "",
        "stub": ""
    },
    "bcl2fastq_single_dual_index": {
        "name_process": "bcl2fastq_single_dual_index",
        "string_process": "process bcl2fastq_single_dual_index {\n\n    tag { \"Bcl2Fastq single dual index\" }\n    publishDir \"${outdir}/${sampleProject}/fastq\", mode: 'copy'\n                         \n    label 'process_medium'\n\n    input:\n    file sampleSheet\n    val sampleProject\n    val sampleProjectTF\n    val outdir\n    path path_bcl \n\n    output:\n    path \"*_R1.fastq.gz\", emit: R1\n    path \"Stats\", emit: bcl_stats\n    path \"Reports\", emit: bcl_reports\n    file \"fastq.md5\"\n\n    script:\n    \"\"\"\n    cleanSamplesheet.py ${sampleSheet}\n\n    bcl2fastq \\\n        --runfolder-dir ${path_bcl} \\\n        -p ${task.cpus} \\\n        --output-dir \\$PWD \\\n        --no-lane-splitting \\\n        --sample-sheet nf-SampleSheet.csv \\\n        --minimum-trimmed-read-length=8 \\\n        --ignore-missing-positions \\\n        --ignore-missing-controls \\\n        --ignore-missing-filter \\\n        --barcode-mismatches=1\n\n    #rm -f Undetermined*.fastq.gz\n    \n    # Move FASTQ files from subdirectories into the top level\n    if [[ ${sampleProjectTF} == 'true' ]]; then\n        find . -mindepth 2 -type f -name '*.fastq.gz' -exec mv -t \\$PWD {} +\n    fi\n\n    shopt -s nullglob\n\n    # Rename FASTQ files\n    for f in *R1_001.fastq.gz; do\n        BN=\\${f%_S*}\n\n        mv \\${f} \\${BN}_R1.fastq.gz\n    done\n\n    find . -maxdepth 1 -type f -name '*.fastq.gz' -exec md5sum {} + > fastq.md5\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    \"\"\"\n    cleanSamplesheet.py ${sampleSheet}\n\n    bcl2fastq \\\n        --runfolder-dir ${path_bcl} \\\n        -p ${task.cpus} \\\n        --output-dir \\$PWD \\\n        --no-lane-splitting \\\n        --sample-sheet nf-SampleSheet.csv \\\n        --minimum-trimmed-read-length=8 \\\n        --ignore-missing-positions \\\n        --ignore-missing-controls \\\n        --ignore-missing-filter \\\n        --barcode-mismatches=1\n\n    #rm -f Undetermined*.fastq.gz\n    \n    # Move FASTQ files from subdirectories into the top level\n    if [[ ${sampleProjectTF} == 'true' ]]; then\n        find . -mindepth 2 -type f -name '*.fastq.gz' -exec mv -t \\$PWD {} +\n    fi\n\n    shopt -s nullglob\n\n    # Rename FASTQ files\n    for f in *R1_001.fastq.gz; do\n        BN=\\${f%_S*}\n\n        mv \\${f} \\${BN}_R1.fastq.gz\n    done\n\n    find . -maxdepth 1 -type f -name '*.fastq.gz' -exec md5sum {} + > fastq.md5\n    \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleSheet",
            "sampleProject",
            "sampleProjectTF",
            "outdir",
            "path_bcl"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"Bcl2Fastq single dual index\" }",
            "publishDir \"${outdir}/${sampleProject}/fastq\", mode: 'copy'",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "process fastqc {\n\n    tag { \"FastQC - ${sample_id}\" } \n    publishDir \"${outdir}/${sampleProject}/QC-results/fastqc\", mode: 'copy'\n    label 'process_low'\n\n    input:\n    tuple val(sample_id), file(reads)\n    val outdir\n    val opt_args\n    val sampleProject\n\n    output:\n    tuple val(sample_id), path(\"*.{zip,html}\"), emit: fastqc_output\n\n    script:\n    def usr_args = opt_args ?: ''\n\n    \"\"\"\n    fastqc ${usr_args} -t ${task.cpus} -q ${reads[0]}\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    def usr_args = opt_args ?: ''\n\n    \"\"\"\n    fastqc ${usr_args} -t ${task.cpus} -q ${reads[0]}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "outdir",
            "opt_args",
            "sampleProject"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"FastQC - ${sample_id}\" }",
            "publishDir \"${outdir}/${sampleProject}/QC-results/fastqc\", mode: 'copy'",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "bcl2fastq_paired_umi": {
        "name_process": "bcl2fastq_paired_umi",
        "string_process": "process bcl2fastq_paired_umi {\n\n    tag { \"Bcl2Fastq paired umi\" }\n    publishDir \"${outdir}/${sampleProject}/fastq\", mode: 'copy'\n                         \n    label 'process_medium'\n\n    input:\n    file sampleSheet\n    val sampleProject\n    val sampleProjectTF\n    val outdir\n    val path_bcl \n\n    output:\n    path \"*_R1.fastq.gz\", emit: R1\n    path \"*_R2.fastq.gz\", emit: R2\n    path \"*_UMI.fastq.gz\", emit: UMI\n    path \"Stats\", emit: bcl_stats\n    path \"Reports\", emit: bcl_reports\n    file \"fastq.md5\"\n\n    script:\n    \"\"\"\n    cleanSamplesheet.py ${sampleSheet}\n\n    bcl2fastq \\\n        --runfolder-dir ${path_bcl} \\\n        -p ${task.cpus} \\\n        --output-dir \\$PWD \\\n        --use-bases-mask Y*,I8Y8,Y* \\\n        --mask-short-adapter-reads=8 \\\n        --create-fastq-for-index-reads \\\n        --no-lane-splitting \\\n        --sample-sheet nf-SampleSheet.csv \\\n        --minimum-trimmed-read-length=8 \\\n        --ignore-missing-positions \\\n        --ignore-missing-controls \\\n        --ignore-missing-filter \\\n        --barcode-mismatches=1\n\n    #rm -f Undetermined*.fastq.gz\n\n    # Move FASTQ files from subdirectories into the top level\n    if [[ ${sampleProjectTF} == 'true' ]]; then\n        find . -mindepth 2 -type f -name '*.fastq.gz' -exec mv -t \\$PWD {} +\n    fi\n\n    shopt -s nullglob\n\n    # Rename FASTQ files\n    for f in *R1_001.fastq.gz; do\n        BN=\\${f%_S*}\n\n        mv \\${f} \\${BN}_R1.fastq.gz\n        mv \\${BN}*_R2_001.fastq.gz \\${BN}_UMI.fastq.gz\n        mv \\${BN}*_R3_001.fastq.gz \\${BN}_R2.fastq.gz\n    done\n\n    find . -maxdepth 1 -type f -name '*.fastq.gz' -exec md5sum {} + > fastq.md5\n    \"\"\"\n}",
        "nb_lignes_process": 60,
        "string_script": "    \"\"\"\n    cleanSamplesheet.py ${sampleSheet}\n\n    bcl2fastq \\\n        --runfolder-dir ${path_bcl} \\\n        -p ${task.cpus} \\\n        --output-dir \\$PWD \\\n        --use-bases-mask Y*,I8Y8,Y* \\\n        --mask-short-adapter-reads=8 \\\n        --create-fastq-for-index-reads \\\n        --no-lane-splitting \\\n        --sample-sheet nf-SampleSheet.csv \\\n        --minimum-trimmed-read-length=8 \\\n        --ignore-missing-positions \\\n        --ignore-missing-controls \\\n        --ignore-missing-filter \\\n        --barcode-mismatches=1\n\n    #rm -f Undetermined*.fastq.gz\n\n    # Move FASTQ files from subdirectories into the top level\n    if [[ ${sampleProjectTF} == 'true' ]]; then\n        find . -mindepth 2 -type f -name '*.fastq.gz' -exec mv -t \\$PWD {} +\n    fi\n\n    shopt -s nullglob\n\n    # Rename FASTQ files\n    for f in *R1_001.fastq.gz; do\n        BN=\\${f%_S*}\n\n        mv \\${f} \\${BN}_R1.fastq.gz\n        mv \\${BN}*_R2_001.fastq.gz \\${BN}_UMI.fastq.gz\n        mv \\${BN}*_R3_001.fastq.gz \\${BN}_R2.fastq.gz\n    done\n\n    find . -maxdepth 1 -type f -name '*.fastq.gz' -exec md5sum {} + > fastq.md5\n    \"\"\"",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleSheet",
            "sampleProject",
            "sampleProjectTF",
            "outdir",
            "path_bcl"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"Bcl2Fastq paired umi\" }",
            "publishDir \"${outdir}/${sampleProject}/fastq\", mode: 'copy'",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "RunGatkHC": {
        "name_process": "RunGatkHC",
        "string_process": "\nprocess RunGatkHC {\n    tag { sample_id + \" - GATK\" }\n\n    publishDir \"${params.outdir}/GATK\", mode: 'copy'\n    stageInMode 'copy'                                             \n\n\n    input:\n    file ref\n    file idx\n    file dict\n    tuple sample_id,\n        file(bam),\n        file(bai)\n\n    output:\n    tuple sample_id,\n        file(\"${sample_id}.raw.vcf.gz\"),\n        file(\"${sample_id}.raw.vcf.gz.tbi\")\n\n    script:\n    \"\"\"\n    gatk HaplotypeCaller \\\n        -R ${ref} \\\n        -I ${bam} \\\n        -O ${sample_id}.raw.vcf.gz \\\n        --native-pair-hmm-threads ${task.cpus} \\\n        --dont-use-soft-clipped-bases true \\\n        -stand-call-conf 20 \\\n        --tmp-dir \\${PWD}\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    gatk HaplotypeCaller \\\n        -R ${ref} \\\n        -I ${bam} \\\n        -O ${sample_id}.raw.vcf.gz \\\n        --native-pair-hmm-threads ${task.cpus} \\\n        --dont-use-soft-clipped-bases true \\\n        -stand-call-conf 20 \\\n        --tmp-dir \\${PWD}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "ref",
            "idx",
            "dict",
            "bam",
            "bai",
            "sample_id"
        ],
        "nb_inputs": 6,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { sample_id + \" - GATK\" }",
            "publishDir \"${params.outdir}/GATK\", mode: 'copy'",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "markDupSambamba": {
        "name_process": "markDupSambamba",
        "string_process": "process markDupSambamba {\n    tag { \"Sambamba MarkDups - ${sample_id}\" }\n    publishDir \"${params.outdir}/markDuplicates\", mode: 'copy'\n    label 'process_medium'\n\n    input:\n    tuple val(sample_id),\n        file(bam),\n        file(bai)\n\n    output:\n    path \"${sample_id}.markdup.bam\", emit: bam\n    path \"${sample_id}.markdup.bam.bai\", emit: bai\n\n    script:\n    \"\"\"\n    sambamba markdup \\\n        --tmpdir=\\${PWD} \\\n        -t ${task.cpus} \\\n        ${bam} ${sample_id}.markdup.bam\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    sambamba markdup \\\n        --tmpdir=\\${PWD} \\\n        -t ${task.cpus} \\\n        ${bam} ${sample_id}.markdup.bam\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Sambamba"
        ],
        "tools_url": [
            "https://bio.tools/sambamba"
        ],
        "tools_dico": [
            {
                "name": "Sambamba",
                "uri": "https://bio.tools/sambamba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a high performance modern robust and fast tool (and library), written in the D programming language, for working with SAM, BAM and CRAM formats.",
                "homepage": "http://www.open-bio.org/wiki/Sambamba"
            }
        ],
        "inputs": [
            "sample_id",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"Sambamba MarkDups - ${sample_id}\" }",
            "publishDir \"${params.outdir}/markDuplicates\", mode: 'copy'",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "sabre": {
        "name_process": "sabre",
        "string_process": "process sabre {\n\n    tag { \"Sabre\" }\n    publishDir \"${outdir}/sabre\", mode: 'copy'\n    label 'process_low'\n\n    input:\n    tuple val(sample_id), file(reads)\n    val barcodes\n    val outdir\n    val opt_args\n\n    output:\n    file \"${sample_id}_R1.fastq.gz\", emit: R1\n    file \"${sample_id}_R2.fastq.gz\", emit: R2\n    file \"*unmatched-barcodes*\"\n\n    script:\n    def usr_args = opt_args ?: ''\n\n    \"\"\"\n    sabre pe \\\n        -f ${reads[0]} \\\n        -r ${reads[1]} \\\n        -b ${barcodes} \\\n        -u unmatched-barcodes_1.fastq \\\n        -w unmatched-barcodes_2.fastq\n\n    gzip *.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def usr_args = opt_args ?: ''\n\n    \"\"\"\n    sabre pe \\\n        -f ${reads[0]} \\\n        -r ${reads[1]} \\\n        -b ${barcodes} \\\n        -u unmatched-barcodes_1.fastq \\\n        -w unmatched-barcodes_2.fastq\n\n    gzip *.fastq\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "sabre"
        ],
        "tools_url": [
            "https://bio.tools/sabre"
        ],
        "tools_dico": [
            {
                "name": "sabre",
                "uri": "https://bio.tools/sabre",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool that will demultiplex barcoded reads into separate files. It will work on both single-end and paired-end data in fastq format. It simply compares the provided barcodes with each read and separates the read into its appropriate barcode file, after stripping the barcode from the read (and also stripping the quality values of the barcode bases). If a read does not have a recognized barcode, then it is put into the unknown file.",
                "homepage": "https://github.com/najoshi/sabre"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "barcodes",
            "outdir",
            "opt_args"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"Sabre\" }",
            "publishDir \"${outdir}/sabre\", mode: 'copy'",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    },
    "fusioncatcher_v099": {
        "name_process": "fusioncatcher_v099",
        "string_process": "\nprocess fusioncatcher_v099 {\n\n    tag { \"fusioncatcher - ${sample_id}\" } \n    publishDir \"${outdir}/${sampleProject}/fusioncatcher_v099\", mode: 'copy'\n    label 'process_fusioncatcher'\n\n    input:\n    tuple val(sample_id), file(reads)\n\tpath data_dir\n     \n    output:\n    tuple val(sample_id), val(outdir)\n    file(\"${sample_id}_fusioncatcher.txt\")\n\n    script:\n    \"\"\"\n\tfusioncatcher \\\\\n        -d ${data_dir} \\\\\n        --threads ${task.cpus} \\\\\n        --i \"${reads[0]},${reads[1]}\" \\\\\n        -o ${outdir} \\\\\n        --skip-blat \n\t\t\t\n\tmv final-list_candidate-fusion-genes.txt ${sample_id}_fusioncatcherv099.txt\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n\tfusioncatcher \\\\\n        -d ${data_dir} \\\\\n        --threads ${task.cpus} \\\\\n        --i \"${reads[0]},${reads[1]}\" \\\\\n        -o ${outdir} \\\\\n        --skip-blat \n\t\t\t\n\tmv final-list_candidate-fusion-genes.txt ${sample_id}_fusioncatcherv099.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "FusionCatcher"
        ],
        "tools_url": [
            "https://bio.tools/fusioncatcher"
        ],
        "tools_dico": [
            {
                "name": "FusionCatcher",
                "uri": "https://bio.tools/fusioncatcher",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene structure"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "FusionCatcher searches for novel/known somatic fusion genes, translocations, and chimeras in RNA-seq data (paired-end or single-end reads from Illumina NGS platforms like Solexa/HiSeq/NextSeq/MiSeq) from diseased samples).",
                "homepage": "https://github.com/ndaniel/fusioncatcher"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "data_dir"
        ],
        "nb_inputs": 3,
        "outputs": [
            "outdir"
        ],
        "nb_outputs": 1,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"fusioncatcher - ${sample_id}\" }",
            "publishDir \"${outdir}/${sampleProject}/fusioncatcher_v099\", mode: 'copy'",
            "label 'process_fusioncatcher'"
        ],
        "when": "",
        "stub": ""
    },
    "HISAT2": {
        "name_process": "HISAT2",
        "string_process": "\nprocess HISAT2 {\n    tag { sample_id + \" - Hisat2 align\" }\n\n    memory '20 GB'\n\n    publishDir \"${params.outdir}/Hisat2\", mode: 'copy'\n    stageInMode 'copy'                                               \n                                    \n\n    input:\n    path hisat2_idx_dir\n    tuple sample_id, file(read1), file(read2)\n\n    output:\n    tuple sample_id,\n        file(\"${sample_id}.hisat2.bam\"),\n        file(\"${sample_id}.hisat2.bam.bai\")\n\n    script:\n    \"\"\"\n    INDEX=`find -L ${hisat2_idx_dir} -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n\n    # hisat2 alignment\n    hisat2 -p ${task.cpus} \\\\\n         --rg-id \"\\\"@RG\\\\tID:${sample_id}\\\\tSM:${sample_id}\\\\tPL:ILLUMINA\\\\tLB:${sample_id}\\\\tPU:LIB1\\\"\" \\\\\n         -x \\${INDEX} -1 ${read1} -2 ${read2} | \\\\\n            samtools sort --threads ${task.cpus} -m 2G - > ${sample_id}.hisat2.bam\n    \n    # index with sambamba\n    samtools index -@ ${task.cpus} ${sample_id}.hisat2.bam\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    INDEX=`find -L ${hisat2_idx_dir} -name \"*.1.ht2\" | sed 's/.1.ht2//'`\n\n    # hisat2 alignment\n    hisat2 -p ${task.cpus} \\\\\n         --rg-id \"\\\"@RG\\\\tID:${sample_id}\\\\tSM:${sample_id}\\\\tPL:ILLUMINA\\\\tLB:${sample_id}\\\\tPU:LIB1\\\"\" \\\\\n         -x \\${INDEX} -1 ${read1} -2 ${read2} | \\\\\n            samtools sort --threads ${task.cpus} -m 2G - > ${sample_id}.hisat2.bam\n    \n    # index with sambamba\n    samtools index -@ ${task.cpus} ${sample_id}.hisat2.bam\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "hisat2_idx_dir",
            "read1",
            "read2",
            "sample_id"
        ],
        "nb_inputs": 4,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { sample_id + \" - Hisat2 align\" }",
            "memory '20 GB'",
            "publishDir \"${params.outdir}/Hisat2\", mode: 'copy'",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bcl2fastq_paired_dual_index": {
        "name_process": "bcl2fastq_paired_dual_index",
        "string_process": "process bcl2fastq_paired_dual_index {\n\n    tag { \"Bcl2Fastq paired dual index\" }\n    publishDir \"${outdir}/${sampleProject}/fastq\", mode: 'copy'\n                         \n    label 'process_medium'\n\n    input:\n    file sampleSheet\n    val sampleProject\n    val sampleProjectTF\n    val outdir\n    path path_bcl \n\n    output:\n    path \"*_R1.fastq.gz\", emit: R1\n    path \"*_R2.fastq.gz\", emit: R2\n    path \"Stats\", emit: bcl_stats\n    path \"Reports\", emit: bcl_reports\n    file \"fastq.md5\"\n\n    script:\n    \"\"\"\n    cleanSamplesheet.py ${sampleSheet}\n\n    bcl2fastq \\\n        --runfolder-dir ${path_bcl} \\\n        -p ${task.cpus} \\\n        --output-dir \\$PWD \\\n        --no-lane-splitting \\\n        --sample-sheet nf-SampleSheet.csv \\\n        --minimum-trimmed-read-length=8 \\\n        --ignore-missing-positions \\\n        --ignore-missing-controls \\\n        --ignore-missing-filter \\\n        --barcode-mismatches=1\n\n    #rm -f Undetermined*.fastq.gz\n    \n    # Move FASTQ files from subdirectories into the top level\n    if [[ ${sampleProjectTF} == 'true' ]]; then\n        find . -mindepth 2 -type f -name '*.fastq.gz' -exec mv -t \\$PWD {} +\n    fi\n\n    shopt -s nullglob\n\n    # Rename FASTQ files\n    for f in *R1_001.fastq.gz; do\n        BN=\\${f%_S*}\n\n        mv \\${f} \\${BN}_R1.fastq.gz\n        mv \\${BN}*_R2_001.fastq.gz \\${BN}_R2.fastq.gz\n    done\n\n    find . -maxdepth 1 -type f -name '*.fastq.gz' -exec md5sum {} + > fastq.md5\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    \"\"\"\n    cleanSamplesheet.py ${sampleSheet}\n\n    bcl2fastq \\\n        --runfolder-dir ${path_bcl} \\\n        -p ${task.cpus} \\\n        --output-dir \\$PWD \\\n        --no-lane-splitting \\\n        --sample-sheet nf-SampleSheet.csv \\\n        --minimum-trimmed-read-length=8 \\\n        --ignore-missing-positions \\\n        --ignore-missing-controls \\\n        --ignore-missing-filter \\\n        --barcode-mismatches=1\n\n    #rm -f Undetermined*.fastq.gz\n    \n    # Move FASTQ files from subdirectories into the top level\n    if [[ ${sampleProjectTF} == 'true' ]]; then\n        find . -mindepth 2 -type f -name '*.fastq.gz' -exec mv -t \\$PWD {} +\n    fi\n\n    shopt -s nullglob\n\n    # Rename FASTQ files\n    for f in *R1_001.fastq.gz; do\n        BN=\\${f%_S*}\n\n        mv \\${f} \\${BN}_R1.fastq.gz\n        mv \\${BN}*_R2_001.fastq.gz \\${BN}_R2.fastq.gz\n    done\n\n    find . -maxdepth 1 -type f -name '*.fastq.gz' -exec md5sum {} + > fastq.md5\n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleSheet",
            "sampleProject",
            "sampleProjectTF",
            "outdir",
            "path_bcl"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"Bcl2Fastq paired dual index\" }",
            "publishDir \"${outdir}/${sampleProject}/fastq\", mode: 'copy'",
            "label 'process_medium'"
        ],
        "when": "",
        "stub": ""
    },
    "umiadd": {
        "name_process": "umiadd",
        "string_process": "process umiadd {\n\n    tag { \"Fastp UMI-ADD - ${sample_id}\" }\n    publishDir \"${outdir}/${sampleProject}/umi_add\", mode: 'copy'\n    label 'process_low'\n\n    input:\n    tuple val(sample_id), file(reads), file(UMI)\n    val outdir\n    val sampleProject\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_U{1,2}.fastq.gz\"), emit: reads\n    file(\"${sample_id}.{html,json}\")\n\n    script:\n    \"\"\"\n    fastp \\\n        ${usr_args} \\\n        -i ${reads[0]}  \\\n        -I ${UMI}  \\\n        -o ${sample_id}_U1.fastq.gz \\\n        -O ${sample_id}_umi1.fastq.gz \\\n        --json ${sample_id}_U1.json \\\n        --html ${sample_id}_U1.html \\\n        --umi --umi_loc=read2 --umi_len=8 \\\n        -G -Q -A -L -w 1 -u 100 -n 8 -Y 100\n\n    fastp \\\n        ${usr_args} \\\n        -i ${reads[1]}  \\\n        -I ${UMI}  \\\n        -o ${sample_id}_U2.fastq.gz \\\n        -O ${sample_id}_umi2.fastq.gz \\\n        --json ${sample_id}_U2.json \\\n        --html ${sample_id}_U2.html \\\n        --umi --umi_loc=read2 --umi_len=8 \\\n        -G -Q -A -L -w 1 -u 100 -n 8 -Y 100\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    \"\"\"\n    fastp \\\n        ${usr_args} \\\n        -i ${reads[0]}  \\\n        -I ${UMI}  \\\n        -o ${sample_id}_U1.fastq.gz \\\n        -O ${sample_id}_umi1.fastq.gz \\\n        --json ${sample_id}_U1.json \\\n        --html ${sample_id}_U1.html \\\n        --umi --umi_loc=read2 --umi_len=8 \\\n        -G -Q -A -L -w 1 -u 100 -n 8 -Y 100\n\n    fastp \\\n        ${usr_args} \\\n        -i ${reads[1]}  \\\n        -I ${UMI}  \\\n        -o ${sample_id}_U2.fastq.gz \\\n        -O ${sample_id}_umi2.fastq.gz \\\n        --json ${sample_id}_U2.json \\\n        --html ${sample_id}_U2.html \\\n        --umi --umi_loc=read2 --umi_len=8 \\\n        -G -Q -A -L -w 1 -u 100 -n 8 -Y 100\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "UMI",
            "outdir",
            "sampleProject"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sagc-bioinformatics__modules",
        "directive": [
            "tag { \"Fastp UMI-ADD - ${sample_id}\" }",
            "publishDir \"${outdir}/${sampleProject}/umi_add\", mode: 'copy'",
            "label 'process_low'"
        ],
        "when": "",
        "stub": ""
    }
}
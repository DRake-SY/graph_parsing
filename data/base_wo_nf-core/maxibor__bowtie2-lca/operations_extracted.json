{
    "OPERATION_1": {
        "string": "ch_multiqc_custom_config = Channel.fromPath(params.multiqc_config, checkIfExists: true)",
        "origin": [
            [
                "params.multiqc_config, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_multiqc_custom_config = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n            .from(params.input_paths)\n            .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, \"params.input_paths was empty - no input files supplied\" }\n            .into { ch_read_files_fastqc; ch_read_files_trimming }",
        "origin": [
            [
                "params.input_paths",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "ch_read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n            .from(params.input_paths)\n            .map { row -> [ row[0], [ file(row[1][0], checkIfExists: true), file(row[1][1], checkIfExists: true) ] ] }\n            .ifEmpty { exit 1, \"params.input_paths was empty - no input files supplied\" }\n            .into { ch_read_files_fastqc; ch_read_files_trimming }",
        "origin": [
            [
                "params.input_paths",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "ch_read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n        .fromFilePairs(params.input, size: params.single_end ? 1 : 2)\n        .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.input}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --single_end on the command line.\" }\n        .into { ch_read_files_fastqc; ch_read_files_trimming }",
        "origin": [
            [
                "params.input, size: params.single_end ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_read_files_fastqc",
                "P"
            ],
            [
                "ch_read_files_trimming",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.from(summary.collect{ [it.key, it.value] })\n    .map { k,v -> \"<dt>$k</dt><dd><samp>${v ?: '<span style=\\\"color:#999999;\\\">N/A</a>'}</samp></dd>\" }\n    .reduce { a, b -> return [a, b].join(\"\\n            \") }\n    .map { x -> \"\"\"\n    id: 'nf-core-btlca-summary'\n    description: \" - this information is collected when the pipeline is started.\"\n    section_name: 'nf-core/btlca Workflow Summary'\n    section_href: 'https://github.com/nf-core/btlca'\n    plot_type: 'html'\n    data: |\n        <dl class=\\\"dl-horizontal\\\">\n            $x\n        </dl>\n    \"\"\".stripIndent() }\n    .set { ch_workflow_summary }",
        "origin": [
            [
                "summary.collect{ [it.key, it.value] }",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_workflow_summary",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "fasta_ref = Channel.fromPath(params.fasta)",
        "origin": [
            [
                "params.fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "fasta_ref",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel.fromPath(params.bt_db)\n    .set {bowtie_db}",
        "origin": [
            [
                "params.bt_db",
                "A"
            ]
        ],
        "gives": [
            [
                "bowtie_db",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel.fromPath(params.bt_db)\n    .map{it -> file(it).simpleName}\n    .first()\n    .set{ bt_db_name }",
        "origin": [
            [
                "params.bt_db",
                "A"
            ]
        ],
        "gives": [
            [
                "bt_db_name",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel.fromPath(params.lca_tree)\n    .first()\n    .set {lca_tree_ch}",
        "origin": [
            [
                "params.lca_tree",
                "A"
            ]
        ],
        "gives": [
            [
                "lca_tree_ch",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel.fromPath(params.dummy1)\n    .first()\n    .set {lca_tree_ch}",
        "origin": [
            [
                "params.dummy1",
                "A"
            ]
        ],
        "gives": [
            [
                "lca_tree_ch",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel.fromPath(params.dummy2)\n    .first()\n    .set {ete_taxo_db}",
        "origin": [
            [
                "params.dummy2",
                "A"
            ]
        ],
        "gives": [
            [
                "ete_taxo_db",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "configFiles.join(', ')",
        "origin": [
            [
                "configFiles",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_14": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_15": {
        "string": "aligned_bam.merge(lca_tree_ch, ete_taxo_db, ete_checked).view().set {sam2lca_ch}",
        "origin": [
            [
                "aligned_bam",
                "P"
            ],
            [
                "lca_tree_ch",
                "P"
            ],
            [
                "ete_taxo_db",
                "P"
            ],
            [
                "ete_checked",
                "P"
            ]
        ],
        "gives": [
            [
                "sam2lca_ch",
                "P"
            ]
        ]
    }
}
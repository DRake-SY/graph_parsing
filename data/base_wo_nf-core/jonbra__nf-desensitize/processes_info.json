{
    "pe_Fastqscreen": {
        "name_process": "pe_Fastqscreen",
        "string_process": "process pe_Fastqscreen {\n\n  input:\n  tuple val(sampleName), path(read1), path(read2)\n\n  output:\n  tuple val(sampleName), path (\"${read1.getSimpleName()}.tagged_filter.fastq.gz\"), path (\"${read2.getSimpleName()}.tagged_filter.fastq.gz\"), emit: pe_Fastqscreen_reads\n  path \"*.{txt,html}\"\n  path \"*.{sh,out}\"\n\n  publishDir \"${params.outdir}/fastqscreen\", mode: 'copy', pattern: '*.{txt,html,tagged_filter.fastq.gz}'\n  publishDir \"${params.outdir}/fastqscreen/log\", mode: 'copy', pattern: '*.{out,sh}'\n\n  script:\n  \"\"\"\n  fastq_screen --aligner bowtie2 \\\n    --nohits ${read1} ${read2} \\\n    --conf /resources/fastq_screen.conf\n\n  cp .command.sh ${sampleName}.fastqscreen.sh\n  cp .command.out ${sampleName}.fastqscreen.out\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  fastq_screen --aligner bowtie2 \\\n    --nohits ${read1} ${read2} \\\n    --conf /resources/fastq_screen.conf\n\n  cp .command.sh ${sampleName}.fastqscreen.sh\n  cp .command.out ${sampleName}.fastqscreen.out\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleName",
            "read1",
            "read2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jonbra__nf-desensitize",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "pe_Repair": {
        "name_process": "pe_Repair",
        "string_process": "process pe_Repair {\n\n  input:\n  tuple val(sampleName), path(read1), path(read2)\n\n  output:\n  tuple val(sampleName), path (\"${sampleName}_R1_001.desensitized.fastq.gz\"), path (\"${sampleName}_R2_001.desensitized.fastq.gz\")\n  path \"*.{sh,out}\"\n\n  publishDir \"${params.outdir}/repair_filtered\", mode: 'copy', pattern: '*.{gz}'\n  publishDir \"${params.outdir}/repair_filtered/log\", mode: 'copy', pattern: '*.{out,sh}'\n\n  script:\n  \"\"\"\n  repair.sh in=${read1} in2=${read2} out1=${sampleName}_R1.desensitized.fastq.gz  out2=${sampleName}_R2.desensitized.fastq.gz\n\n  cp .command.sh ${sampleName}.repair.sh\n  cp .command.out ${sampleName}.repair.out\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  repair.sh in=${read1} in2=${read2} out1=${sampleName}_R1.desensitized.fastq.gz  out2=${sampleName}_R2.desensitized.fastq.gz\n\n  cp .command.sh ${sampleName}.repair.sh\n  cp .command.out ${sampleName}.repair.out\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleName",
            "read1",
            "read2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sampleName"
        ],
        "nb_outputs": 1,
        "name_workflow": "jonbra__nf-desensitize",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
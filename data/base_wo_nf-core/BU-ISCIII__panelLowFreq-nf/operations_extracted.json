{
    "OPERATION_1": {
        "string": "Channel\n    .fromFilePairs( params.reads, size: params.singleEnd ? 1 : 2 )\n    .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n    .into { raw_reads_fastqc; raw_reads_trimming; raw_reads_bwa }",
        "origin": [
            [
                "params.reads, size: params.singleEnd ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "raw_reads_fastqc",
                "P"
            ],
            [
                "raw_reads_trimming",
                "P"
            ],
            [
                "raw_reads_bwa",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n        .fromPath(params.multiqc_config, checkIfExists: true)\n        .set { ch_config_for_multiqc }",
        "origin": [
            [
                "params.multiqc_config, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_config_for_multiqc",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n        .fromPath(\"${params.fasta}.*\")\n        .into { bwa_index; bwa_index_pileup }",
        "origin": [
            [
                "\"${params.fasta}.*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "bwa_index",
                "P"
            ],
            [
                "bwa_index_pileup",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "trimmomatic_results = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "trimmomatic_results",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "trimmomatic_fastqc_reports = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "trimmomatic_fastqc_reports",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "summary.collect { k,v -> \"${k.padRight(21)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_7": {
        "string": "raw_reads_bwa = trimmed_paired_reads_bwa",
        "origin": [
            [
                "trimmed_paired_reads_bwa",
                "P"
            ]
        ],
        "gives": [
            [
                "raw_reads_bwa",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "bam_samtools = bam_dedup_mpileup",
        "origin": [
            [
                "bam_dedup_mpileup",
                "P"
            ]
        ],
        "gives": [
            [
                "bam_samtools",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "bai_samtools = bai_dedup_mpileup",
        "origin": [
            [
                "bai_dedup_mpileup",
                "P"
            ]
        ],
        "gives": [
            [
                "bai_samtools",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "bam_stats = dedup_bam_stats",
        "origin": [
            [
                "dedup_bam_stats",
                "P"
            ]
        ],
        "gives": [
            [
                "bam_stats",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "bai_bamstats = bai_dedup_stats",
        "origin": [
            [
                "bai_dedup_stats",
                "P"
            ]
        ],
        "gives": [
            [
                "bai_bamstats",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "bedtools_coverage = dedup_bedtools_coverage",
        "origin": [
            [
                "dedup_bedtools_coverage",
                "P"
            ]
        ],
        "gives": [
            [
                "bedtools_coverage",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "bai_bedtools_coverage = bai_dedup_bedtools_coverage",
        "origin": [
            [
                "bai_dedup_bedtools_coverage",
                "P"
            ]
        ],
        "gives": [
            [
                "bai_bedtools_coverage",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "picard_stats = dedup_picard_stats",
        "origin": [
            [
                "dedup_picard_stats",
                "P"
            ]
        ],
        "gives": [
            [
                "picard_stats",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "bai_picard_stats = bai_dedup_picard_stats",
        "origin": [
            [
                "bai_dedup_picard_stats",
                "P"
            ]
        ],
        "gives": [
            [
                "bai_picard_stats",
                "P"
            ]
        ]
    }
}
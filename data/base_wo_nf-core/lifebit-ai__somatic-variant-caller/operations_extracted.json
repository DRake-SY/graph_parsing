{
    "OPERATION_1": {
        "string": "Channel.fromPath(params.samples)\n    .ifEmpty { exit 1, \"samples file not found: ${params.samples}\" }\n    .splitCsv(sep: '\\t')\n    .map{ patientId, sampleId, status, fastq1, fastq2 -> [patientId, sampleId, status, file(fastq1).baseName, [file(fastq1), file(fastq2)]] }\n    .into { samples; reads; reads_kraken }",
        "origin": [
            [
                "params.samples",
                "A"
            ]
        ],
        "gives": [
            [
                "samples",
                "P"
            ],
            [
                "reads",
                "P"
            ],
            [
                "reads_kraken",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.fromPath(params.fasta)\n           .ifEmpty { exit 1, \"fasta annotation file not found: ${params.fasta}\" }\n           .into { fasta_bwa; fasta_baserecalibrator; fasta_haplotypecaller; fasta_mutect; fasta_variant_eval }",
        "origin": [
            [
                "params.fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "fasta_bwa",
                "P"
            ],
            [
                "fasta_baserecalibrator",
                "P"
            ],
            [
                "fasta_haplotypecaller",
                "P"
            ],
            [
                "fasta_mutect",
                "P"
            ],
            [
                "fasta_variant_eval",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(params.fai)\n           .ifEmpty { exit 1, \"fasta index file not found: ${params.fai}\" }\n           .into { fai_mutect; fai_baserecalibrator; fai_haplotypecaller; fai_variant_eval }",
        "origin": [
            [
                "params.fai",
                "A"
            ]
        ],
        "gives": [
            [
                "fai_mutect",
                "P"
            ],
            [
                "fai_baserecalibrator",
                "P"
            ],
            [
                "fai_haplotypecaller",
                "P"
            ],
            [
                "fai_variant_eval",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath(params.dict)\n           .ifEmpty { exit 1, \"dict annotation file not found: ${params.dict}\" }\n           .into { dict_interval; dict_mutect; dict_baserecalibrator; dict_haplotypecaller; dict_variant_eval }",
        "origin": [
            [
                "params.dict",
                "A"
            ]
        ],
        "gives": [
            [
                "dict_interval",
                "P"
            ],
            [
                "dict_mutect",
                "P"
            ],
            [
                "dict_baserecalibrator",
                "P"
            ],
            [
                "dict_haplotypecaller",
                "P"
            ],
            [
                "dict_variant_eval",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath(params.dbsnp_gz)\n           .ifEmpty { exit 1, \"dbsnp annotation file not found: ${params.dbsnp_gz}\" }\n           .set { dbsnp_gz}",
        "origin": [
            [
                "params.dbsnp_gz",
                "A"
            ]
        ],
        "gives": [
            [
                "dbsnp_gz",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.fromPath(params.dbsnp_idx_gz)\n           .ifEmpty { exit 1, \"dbsnp_idx_gz annotation file not found: ${params.dbsnp_idx_gz}\" }\n           .set { dbsnp_idx_gz}",
        "origin": [
            [
                "params.dbsnp_idx_gz",
                "A"
            ]
        ],
        "gives": [
            [
                "dbsnp_idx_gz",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel.fromPath(params.golden_indel_gz)\n           .ifEmpty { exit 1, \"golden_indel_gz annotation file not found: ${params.golden_indel_gz}\" }\n           .set { golden_indel_gz }",
        "origin": [
            [
                "params.golden_indel_gz",
                "A"
            ]
        ],
        "gives": [
            [
                "golden_indel_gz",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel.fromPath(params.golden_indel_idx_gz)\n           .ifEmpty { exit 1, \"golden_indel_idx_gz annotation file not found: ${params.golden_indel_idx_gz}\" }\n           .set { golden_indel_idx_gz }",
        "origin": [
            [
                "params.golden_indel_idx_gz",
                "A"
            ]
        ],
        "gives": [
            [
                "golden_indel_idx_gz",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel.fromPath(params.bwa_index_amb)\n           .ifEmpty { exit 1, \"bwa_index_amb annotation file not found: ${params.bwa_index_amb}\" }\n           .set { bwa_index_amb }",
        "origin": [
            [
                "params.bwa_index_amb",
                "A"
            ]
        ],
        "gives": [
            [
                "bwa_index_amb",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel.fromPath(params.bwa_index_ann)\n           .ifEmpty { exit 1, \"bwa_index_ann annotation file not found: ${params.bwa_index_ann}\" }\n           .set { bwa_index_ann }",
        "origin": [
            [
                "params.bwa_index_ann",
                "A"
            ]
        ],
        "gives": [
            [
                "bwa_index_ann",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel.fromPath(params.bwa_index_bwt)\n           .ifEmpty { exit 1, \"bwa_index_bwt annotation file not found: ${params.bwa_index_bwt}\" }\n           .set { bwa_index_bwt }",
        "origin": [
            [
                "params.bwa_index_bwt",
                "A"
            ]
        ],
        "gives": [
            [
                "bwa_index_bwt",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel.fromPath(params.bwa_index_pac)\n           .ifEmpty { exit 1, \"bwa_index_pac annotation file not found: ${params.bwa_index_pac}\" }\n           .set { bwa_index_pac }",
        "origin": [
            [
                "params.bwa_index_pac",
                "A"
            ]
        ],
        "gives": [
            [
                "bwa_index_pac",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "Channel.fromPath(params.bwa_index_sa)\n           .ifEmpty { exit 1, \"bwa_index_sa annotation file not found: ${params.bwa_index_sa}\" }\n           .set { bwa_index_sa }",
        "origin": [
            [
                "params.bwa_index_sa",
                "A"
            ]
        ],
        "gives": [
            [
                "bwa_index_sa",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel.fromPath(params.bed)\n           .ifEmpty { exit 1, \"BED file for to define regions not found: ${params.bed}\" }\n           .into { bed; bed_basename }",
        "origin": [
            [
                "params.bed",
                "A"
            ]
        ],
        "gives": [
            [
                "bed",
                "P"
            ],
            [
                "bed_basename",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "bamsNormal = Channel.create()",
        "origin": [],
        "gives": [
            [
                "bamsNormal",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "bamsTumour = Channel.create()",
        "origin": [],
        "gives": [
            [
                "bamsTumour",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "bed_basename.map { file -> tuple(file.baseName, file) }.set{ bed_interval }",
        "origin": [
            [
                "bed_basename",
                "P"
            ]
        ],
        "gives": [
            [
                "bed_interval",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "bwa_index = fasta_bwa.merge(bwa_index_amb, bwa_index_ann, bwa_index_bwt, bwa_index_pac, bwa_index_sa)",
        "origin": [
            [
                "fasta_bwa",
                "P"
            ],
            [
                "bwa_index_amb",
                "P"
            ],
            [
                "bwa_index_ann",
                "P"
            ],
            [
                "bwa_index_bwt",
                "P"
            ],
            [
                "bwa_index_pac",
                "P"
            ],
            [
                "bwa_index_sa",
                "P"
            ]
        ],
        "gives": [
            [
                "bwa_index",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "bwa = samples.combine(bwa_index)",
        "origin": [
            [
                "samples",
                "P"
            ],
            [
                "bwa_index",
                "P"
            ]
        ],
        "gives": [
            [
                "bwa",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "baserecalibrator_index = fasta_baserecalibrator.merge(fai_baserecalibrator, dict_baserecalibrator, dbsnp, dbsnp_idx, golden_indel, golden_indel_idx)",
        "origin": [
            [
                "fasta_baserecalibrator",
                "P"
            ],
            [
                "fai_baserecalibrator",
                "P"
            ],
            [
                "dict_baserecalibrator",
                "P"
            ],
            [
                "dbsnp",
                "P"
            ],
            [
                "dbsnp_idx",
                "P"
            ],
            [
                "golden_indel",
                "P"
            ],
            [
                "golden_indel_idx",
                "P"
            ]
        ],
        "gives": [
            [
                "baserecalibrator_index",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "baserecalibrator = bam_markdup_baserecalibrator.combine(baserecalibrator_index)",
        "origin": [
            [
                "bam_markdup_baserecalibrator",
                "P"
            ],
            [
                "baserecalibrator_index",
                "P"
            ]
        ],
        "gives": [
            [
                "baserecalibrator",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "applybqsr = baserecalibrator_table.join(bam_markdup_applybqsr)",
        "origin": [
            [
                "baserecalibrator_table",
                "P"
            ],
            [
                "bam_markdup_applybqsr",
                "P"
            ]
        ],
        "gives": [
            [
                "applybqsr",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "interval_list\n    .splitText()\n    .map { it -> it.trim() }\n    .set { intervals }",
        "origin": [
            [
                "interval_list",
                "P"
            ]
        ],
        "gives": [
            [
                "intervals",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "haplotypecaller_index = fasta_haplotypecaller.merge(fai_haplotypecaller, dict_haplotypecaller, bam_haplotypecaller)",
        "origin": [
            [
                "fasta_haplotypecaller",
                "P"
            ],
            [
                "fai_haplotypecaller",
                "P"
            ],
            [
                "dict_haplotypecaller",
                "P"
            ],
            [
                "bam_haplotypecaller",
                "P"
            ]
        ],
        "gives": [
            [
                "haplotypecaller_index",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "haplotypecaller = intervals.combine(haplotypecaller_index)",
        "origin": [
            [
                "intervals",
                "P"
            ],
            [
                "haplotypecaller_index",
                "P"
            ]
        ],
        "gives": [
            [
                "haplotypecaller",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "bam_mutect.choice( bamsTumour, bamsNormal ) { it[2]  = 0\n } else { \nbam_mutect.choice( bamsTumour, bamsNormal ) { it[2]  = 1 }\n }",
        "origin": [
            [
                "bam_mutect",
                "P"
            ]
        ],
        "gives": [
            [
                "bamsTumour",
                "P"
            ],
            [
                "bamsNormal",
                "P"
            ],
            [
                "bamsTumour",
                "P"
            ],
            [
                "bamsNormal",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "combined_bam = bamsNormal.combine(bamsTumour, by: 0)",
        "origin": [
            [
                "bamsNormal",
                "P"
            ]
        ],
        "gives": [
            [
                "combined_bam",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "ref_mutect = fasta_mutect.merge(fai_mutect, dict_mutect)",
        "origin": [
            [
                "fasta_mutect",
                "P"
            ],
            [
                "fai_mutect",
                "P"
            ],
            [
                "dict_mutect",
                "P"
            ]
        ],
        "gives": [
            [
                "ref_mutect",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "variant_calling = combined_bam.combine(ref_mutect)",
        "origin": [
            [
                "combined_bam",
                "P"
            ],
            [
                "ref_mutect",
                "P"
            ]
        ],
        "gives": [
            [
                "variant_calling",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "variant_calling.into{ mutect; manta_no_bed}",
        "origin": [
            [
                "variant_calling",
                "P"
            ]
        ],
        "gives": [
            [
                "mutect",
                "P"
            ],
            [
                "manta_no_bed",
                "P"
            ]
        ]
    },
    "OPERATION_31": {
        "string": "manta = manta_no_bed.merge(bed)",
        "origin": [
            [
                "manta_no_bed",
                "P"
            ],
            [
                "bed",
                "P"
            ]
        ],
        "gives": [
            [
                "manta",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "variant_eval = vcf_variant_eval.merge(fasta_variant_eval, fai_variant_eval, dict_variant_eval)",
        "origin": [
            [
                "vcf_variant_eval",
                "P"
            ],
            [
                "fasta_variant_eval",
                "P"
            ],
            [
                "fai_variant_eval",
                "P"
            ],
            [
                "dict_variant_eval",
                "P"
            ]
        ],
        "gives": [
            [
                "variant_eval",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "manta = manta_no_bed",
        "origin": [
            [
                "manta_no_bed",
                "P"
            ]
        ],
        "gives": [
            [
                "manta",
                "P"
            ]
        ]
    }
}
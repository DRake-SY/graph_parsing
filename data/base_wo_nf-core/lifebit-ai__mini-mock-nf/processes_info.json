{
    "inputCheckers": {
        "name_process": "inputCheckers",
        "string_process": "\nprocess inputCheckers {\n\n\tinput:\n\tset sampleId, file(fastqPair) from readsChannel\n\tfile reference  from referenceChannel\n\tfile adaptersDir from adaptersDirChannel\n\tval maxNumberOfLines from maxLinesChannel\n\t\n\t\n\t\"\"\"\n\tgunzip -c ${fastqPair[0]} | head -n $maxNumberOfLines >> out.txt\n\tgunzip -c ${fastqPair[1]} | head -n $maxNumberOfLines >> out.txt\n\n\t# Check if provided adapterDir parameter is an actual directory\n\tif [ ! -d \"$adaptersDir\" ]; then\n\t\techo 'param.adaptersDir did not provide a directory';\n\t\texit 1;\n\tfi\n\n\t# Checked if the retrieved lines from the FastQ files match the\n\t# the expected number.\n\tlinesRetrieved=\\$(grep -c ^ out.txt)\n\texpectedLines=\\$(($maxNumberOfLines * 2))\n\tif [ \"\\$linesRetrieved\" -ne \"\\$expectedLines\" ]; then\n\t\techo 'Unexpected number of lines retrieve from input files';\n\t\texit 1;\n\tfi\n\t\"\"\"\n\n}",
        "nb_lignes_process": 29,
        "string_script": "\"\"\"\n\tgunzip -c ${fastqPair[0]} | head -n $maxNumberOfLines >> out.txt\n\tgunzip -c ${fastqPair[1]} | head -n $maxNumberOfLines >> out.txt\n\n\t# Check if provided adapterDir parameter is an actual directory\n\tif [ ! -d \"$adaptersDir\" ]; then\n\t\techo 'param.adaptersDir did not provide a directory';\n\t\texit 1;\n\tfi\n\n\t# Checked if the retrieved lines from the FastQ files match the\n\t# the expected number.\n\tlinesRetrieved=\\$(grep -c ^ out.txt)\n\texpectedLines=\\$(($maxNumberOfLines * 2))\n\tif [ \"\\$linesRetrieved\" -ne \"\\$expectedLines\" ]; then\n\t\techo 'Unexpected number of lines retrieve from input files';\n\t\texit 1;\n\tfi\n\t\"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "readsChannel",
            "referenceChannel",
            "adaptersDirChannel",
            "maxLinesChannel"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__mini-mock-nf",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
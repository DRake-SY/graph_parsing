{
    "mips_trim_dedup": {
        "name_process": "mips_trim_dedup",
        "string_process": "\nprocess mips_trim_dedup {\n    tag \"${sample}_mips_trim_dedup\"\n    publishDir \"$params.outdir/$sample/mapping\", mode: 'copy'\n    cpus 1\n    penv 'threaded'\n    memory '1 GB'\n    time '1h'\n\n    input:\n    set val(sample), file(r1_fastqs: \"*\"), file(r2_fastqs: \"*\")\n\n    output:\n    set val(sample), file('*_LMergedTrimmedDedup_R1_*.fastq.gz'), file('*_LMergedTrimmedDedup_R2_*.fastq.gz')\n\n    script:\n    def r1_args = r1_fastqs.collect{ \"$it\" }.join(\" \")\n    def r2_args = r2_fastqs.collect{ \"$it\" }.join(\" \")\n\n    \"\"\"\n    python $params.mips_trim_dedup -d $params.design_file -r1 $r1_args -r2 $r2_args -l $params.uuid_length -ur $params.uuid_read > output.log 2> output.err\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    def r1_args = r1_fastqs.collect{ \"$it\" }.join(\" \")\n    def r2_args = r2_fastqs.collect{ \"$it\" }.join(\" \")\n\n    \"\"\"\n    python $params.mips_trim_dedup -d $params.design_file -r1 $r1_args -r2 $r2_args -l $params.uuid_length -ur $params.uuid_read > output.log 2> output.err\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "r1_fastqs",
            "r2_fastqs"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "UMCUGenetics__fingerprint_workflow",
        "directive": [
            "tag \"${sample}_mips_trim_dedup\"",
            "publishDir \"$params.outdir/$sample/mapping\", mode: 'copy'",
            "cpus 1",
            "penv 'threaded'",
            "memory '1 GB'",
            "time '1h'"
        ],
        "when": "",
        "stub": ""
    },
    "UnifiedGenotyper": {
        "name_process": "UnifiedGenotyper",
        "string_process": "\nprocess UnifiedGenotyper {\n    tag \"${sample}_gatk_UG\"\n    publishDir \"$params.outdir/$params.process_outdir\", mode: 'copy'\n    cpus 2\n    penv 'threaded'\n    memory '5 GB'\n    time '1h'\n\n    input:\n    set val(sample), file(input_bam), file(input_bai)\n\n    output:\n    set val(sample), file(\"${sample}.vcf\")\n\n    script:\n    def intervals = params.intervals ? \"--intervals $params.intervals\" : ''\n    def dbsnp = params.dbsnp ? \"--dbsnp $params.dbsnp\" : ''\n    \"\"\"\n    module load Java/1.8.0_60\n    java -jar $params.gatk -T UnifiedGenotyper --reference_sequence $params.genome --input_file $input_bam --out ${sample}.vcf --output_mode $params.output_mode $intervals $dbsnp\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    def intervals = params.intervals ? \"--intervals $params.intervals\" : ''\n    def dbsnp = params.dbsnp ? \"--dbsnp $params.dbsnp\" : ''\n    \"\"\"\n    module load Java/1.8.0_60\n    java -jar $params.gatk -T UnifiedGenotyper --reference_sequence $params.genome --input_file $input_bam --out ${sample}.vcf --output_mode $params.output_mode $intervals $dbsnp\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "input_bam",
            "input_bai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "UMCUGenetics__fingerprint_workflow",
        "directive": [
            "tag \"${sample}_gatk_UG\"",
            "publishDir \"$params.outdir/$params.process_outdir\", mode: 'copy'",
            "cpus 2",
            "penv 'threaded'",
            "memory '5 GB'",
            "time '1h'"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    tag \"${sample}_fastqc\"\n    publishDir \"$params.outdir/$sample/fastQC\", mode: 'copy'\n    cpus 1\n    penv 'threaded'\n    memory '1 GB'\n    time '1h'\n\n    input:\n    set val(sample), file(fastq: \"*\")\n\n    output:\n    file '*_fastqc.*'\n\n    script:\n    \"\"\"\n    $params.fastqc --noextract -t ${task.cpus} $fastq\n    \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    $params.fastqc --noextract -t ${task.cpus} $fastq\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "fastq"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__fingerprint_workflow",
        "directive": [
            "tag \"${sample}_fastqc\"",
            "publishDir \"$params.outdir/$sample/fastQC\", mode: 'copy'",
            "cpus 1",
            "penv 'threaded'",
            "memory '1 GB'",
            "time '1h'"
        ],
        "when": "",
        "stub": ""
    },
    "mem": {
        "name_process": "mem",
        "string_process": "\nprocess mem {\n    tag \"${sample}_bwa_mem\"\n    publishDir \"$params.outdir/$sample/mapping\", mode: 'copy'\n    cpus 1\n    penv 'threaded'\n    memory '10 GB'\n    time '1h'\n\n    input:\n    set val(sample), file(r1_fastq), file(r2_fastq)\n\n    output:\n    set val(sample), file(\"${sample}.bam\"), file(\"${sample}.bai\")\n\n    script:\n    def barcode = r1_fastq.getName().split('_')[1]\n    def bwa_readgroup = \"\\\"@RG\\\\tID:${sample}_${barcode}\\\\tSM:${sample}\\\\tPL:ILLUMINA\\\\tLB:${sample}\\\\tPU:${barcode}\\\"\"\n\n    \"\"\"\n    $params.bwa mem -t ${task.cpus} -c 100 -M -R $bwa_readgroup $params.genome $r1_fastq $r2_fastq | $params.samtools view -b | $params.samtools sort > ${sample}.bam\n    $params.samtools index ${sample}.bam ${sample}.bai\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    def barcode = r1_fastq.getName().split('_')[1]\n    def bwa_readgroup = \"\\\"@RG\\\\tID:${sample}_${barcode}\\\\tSM:${sample}\\\\tPL:ILLUMINA\\\\tLB:${sample}\\\\tPU:${barcode}\\\"\"\n\n    \"\"\"\n    $params.bwa mem -t ${task.cpus} -c 100 -M -R $bwa_readgroup $params.genome $r1_fastq $r2_fastq | $params.samtools view -b | $params.samtools sort > ${sample}.bam\n    $params.samtools index ${sample}.bam ${sample}.bai\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "r1_fastq",
            "r2_fastq"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "UMCUGenetics__fingerprint_workflow",
        "directive": [
            "tag \"${sample}_bwa_mem\"",
            "publishDir \"$params.outdir/$sample/mapping\", mode: 'copy'",
            "cpus 1",
            "penv 'threaded'",
            "memory '10 GB'",
            "time '1h'"
        ],
        "when": "",
        "stub": ""
    }
}
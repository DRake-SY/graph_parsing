{
    "orthofinder": {
        "name_process": "orthofinder",
        "string_process": "\nprocess orthofinder {\n                                          \n    publishDir \"${params.output}/OrthoFinder\", mode: 'copy'\n\n    input:\n                                                        \n    path(species)\n\n    output:\n                                               \n    path \"${params.dataset}OrthoFinder/Results_$params.orthofinder_output_dir/*\" optional true\n    path \"${params.dataset}OrthoFinder/Results_$params.orthofinder_output_dir/Orthogroup_Sequences/*\", emit: 'ogs'\n    path \"${params.dataset}OrthoFinder/Results_$params.orthofinder_output_dir/OrthoFinder_command.txt\", emit: command\n\n    script:\n                                                  \n\n    flagsOrthoFinder = \"-f $species -M msa -A mafft -os -n $params.orthofinder_output_dir -t $task.cpus -a $params.a\"\n    if ( params.d )\n        flagsOrthoFinder += \" -d\"\n    if ( params.I )\n        flagsOrthoFinder += \" -I $params.I\"\n    if ( params.S )\n        flagsOrthoFinder += \" -S $params.S\"\n    commandOrthoFinder = \"orthofinder $flagsOrthoFinder\"\n\n    \"\"\"\n    $commandOrthoFinder\n    echo \"$commandOrthoFinder\" > '${params.dataset}OrthoFinder/Results_$params.orthofinder_output_dir/OrthoFinder_command.txt'\n    \"\"\"\n\n}",
        "nb_lignes_process": 31,
        "string_script": "    flagsOrthoFinder = \"-f $species -M msa -A mafft -os -n $params.orthofinder_output_dir -t $task.cpus -a $params.a\"\n    if ( params.d )\n        flagsOrthoFinder += \" -d\"\n    if ( params.I )\n        flagsOrthoFinder += \" -I $params.I\"\n    if ( params.S )\n        flagsOrthoFinder += \" -S $params.S\"\n    commandOrthoFinder = \"orthofinder $flagsOrthoFinder\"\n\n    \"\"\"\n    $commandOrthoFinder\n    echo \"$commandOrthoFinder\" > '${params.dataset}OrthoFinder/Results_$params.orthofinder_output_dir/OrthoFinder_command.txt'\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "species"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ThiloSchulze__orthology-inference",
        "directive": [
            "publishDir \"${params.output}/OrthoFinder\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "filtering": {
        "name_process": "filtering",
        "string_process": "\nprocess filtering {\n    publishDir \"${params.output}/filtering\", mode: 'copy'\n\n    beforeScript 'ulimit -s unlimited'\n\n    input:\n                                                                  \n    path(orthogroups)\n\n    output:\n                                                \n    path \"filtered_orthogroups/*\", emit: filtered_ogs\n    path \"*.txt\"\n    path \"*_command.txt\", emit: command\n\n    script:\n                                                                                                                     \n\n\n\n    \"\"\"\n    filter_ogs.sh --species $params.filter_species --max_sequence $params.max_sequence --rerun\n    echo \"filter_ogs.sh --species $params.filter_species --max_sequence $params.max_sequence --rerun\" > filter_ogs_command.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    filter_ogs.sh --species $params.filter_species --max_sequence $params.max_sequence --rerun\n    echo \"filter_ogs.sh --species $params.filter_species --max_sequence $params.max_sequence --rerun\" > filter_ogs_command.txt\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "orthogroups"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ThiloSchulze__orthology-inference",
        "directive": [
            "publishDir \"${params.output}/filtering\", mode: 'copy'",
            "beforeScript 'ulimit -s unlimited'"
        ],
        "when": "",
        "stub": ""
    },
    "mafft": {
        "name_process": "mafft",
        "string_process": "\nprocess mafft {\n    publishDir \"${params.output}/mafft\", mode: 'copy'\n\n    input:\n                               \n    path(filtered_orthogroups)\n\n    output:\n                                                                            \n    path \"*_mafft.fa\", emit: ogs_aligned\n    path \"*.txt\"\n    path \"*_command.txt\", emit: command\n    path \"list_of_species.txt\", emit: species_list\n\n    script:\n                                                               \n  flagsmafft = \"--thread $task.cpus\"\n  if ( params.globalpair )\n    flagsmafft += \" --globalpair\"\n  if ( params.localpair )\n    flagsmafft += \" --localpair\"\n  if ( params.genafpair )\n    flagsmafft += \" --genafpair\"\n  if ( params.fastapair )\n    flagsmafft += \" --fastapair\"\n  if ( params.memsave )\n    flagsmafft += \" --memsave\"\n  if ( params.weighti  )\n    flagsmafft += \" --weighti $params.weighti\"\n  if ( params.retree )\n    flagsmafft += \" --retree $params.retree\"\n  if ( params.maxiterate )\n    flagsmafft += \" --maxiterate $params.maxiterate\"\n  if ( params.nofft )\n    flagsmafft += \" --nofft\"\n  if ( params.parttree )\n    flagsmafft += \" --parttree\"\n  if ( params.dpparttree )\n    flagsmafft += \" --dpparttree\"\n  if ( params.fastaparttree )\n    flagsmafft += \" --fastaparttree\"\n  if ( params.quiet_mafft )\n    flagsmafft += \" --quiet\"\n  if ( params.op )\n    flagsmafft += \" --op $params.op\"\n  if ( params.ep )\n    flagsmafft += \" --ep $params.ep\"\n  commandmafft = \"$params.mafft $flagsmafft\"\n\n    \"\"\"\n    $commandmafft $filtered_orthogroups > ${filtered_orthogroups.simpleName}_mafft.fa \n    echo \"$commandmafft\" > 'mafft_command.txt'\n    grep --no-filename '^>' *.fa | tr -d '>' | sed 's/@.*//g' | sort | uniq > list_of_species.txt\n    \"\"\"\n}",
        "nb_lignes_process": 54,
        "string_script": "  flagsmafft = \"--thread $task.cpus\"\n  if ( params.globalpair )\n    flagsmafft += \" --globalpair\"\n  if ( params.localpair )\n    flagsmafft += \" --localpair\"\n  if ( params.genafpair )\n    flagsmafft += \" --genafpair\"\n  if ( params.fastapair )\n    flagsmafft += \" --fastapair\"\n  if ( params.memsave )\n    flagsmafft += \" --memsave\"\n  if ( params.weighti  )\n    flagsmafft += \" --weighti $params.weighti\"\n  if ( params.retree )\n    flagsmafft += \" --retree $params.retree\"\n  if ( params.maxiterate )\n    flagsmafft += \" --maxiterate $params.maxiterate\"\n  if ( params.nofft )\n    flagsmafft += \" --nofft\"\n  if ( params.parttree )\n    flagsmafft += \" --parttree\"\n  if ( params.dpparttree )\n    flagsmafft += \" --dpparttree\"\n  if ( params.fastaparttree )\n    flagsmafft += \" --fastaparttree\"\n  if ( params.quiet_mafft )\n    flagsmafft += \" --quiet\"\n  if ( params.op )\n    flagsmafft += \" --op $params.op\"\n  if ( params.ep )\n    flagsmafft += \" --ep $params.ep\"\n  commandmafft = \"$params.mafft $flagsmafft\"\n\n    \"\"\"\n    $commandmafft $filtered_orthogroups > ${filtered_orthogroups.simpleName}_mafft.fa \n    echo \"$commandmafft\" > 'mafft_command.txt'\n    grep --no-filename '^>' *.fa | tr -d '>' | sed 's/@.*//g' | sort | uniq > list_of_species.txt\n    \"\"\"",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "filtered_orthogroups"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ThiloSchulze__orthology-inference",
        "directive": [
            "publishDir \"${params.output}/mafft\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "iqtree": {
        "name_process": "iqtree",
        "string_process": "\nprocess iqtree {\n    publishDir \"${params.output}/iqtree\", mode: 'copy'\n\n    input:\n                                                           \n    path(og_alignment)\n\n    output:\n                                                 \n    path \"*\"\n    path \"*.treefile\", emit: gene_tree_files\n    path \"*_command.txt\", emit: command\n\n    script:\n                                                           \n  flagsiqtree = \"-T $task.cpus\"\n  if ( params.quiet_iqtree )\n    flagsiqtree += \" --quiet\"\n  if ( params.epsilon )\n    flagsiqtree += \" --epsilon $params.epsilon\"\n  if ( params.ninit )\n    flagsiqtree += \" --ninit $params.ninit\"\n  if ( params.ntop )\n    flagsiqtree += \" --ntop $params.ntop\"\n  if ( params.nbest )\n    flagsiqtree += \" --nbest $params.nbest\"\n  if ( params.ufboot )\n    flagsiqtree += \" --ufboot $params.ufboot\"           \n  if ( params.ufjack )\n    flagsiqtree += \" --ufjack $params.ufjack\"           \n  if ( params.jackprop )\n    flagsiqtree += \" --jack-prop $params.jackprop\"       \n  if ( params.nmax )\n    flagsiqtree += \" --nmax $params.nmax\"         \n  if ( params.nstep )\n    flagsiqtree += \" --nstep $params.nstep\"       \n  if ( params.bcor )\n    flagsiqtree += \" --bcor $params.bcor\"         \n  if ( params.beps )\n    flagsiqtree += \" --beps $params.beps\"        \n  if ( params.bnni )\n    flagsiqtree += \" --bnni\"\n  if ( params.boot )\n    flagsiqtree += \" --boot $params.boot\"           \n  if ( params.jack )\n    flagsiqtree += \" --jack $params.jack\"           \n  if ( params.alrt )\n    flagsiqtree += \" --alrt $params.alrt\"           \n  if ( params.alrt0 )\n    flagsiqtree += \" --alrt 0\"\n  if ( params.abayes )\n    flagsiqtree += \" --abayes\"\n  if ( params.lbp )\n    flagsiqtree += \" --lbp $params.lbp\"\n  if ( params.m )\n    flagsiqtree += \" -m $params.m\"\n  commandiqtree = \"iqtree $flagsiqtree\"\n\n    \"\"\"\n    $commandiqtree -s $og_alignment\n    echo \"$commandiqtree\" > iqtree_command.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 63,
        "string_script": "  flagsiqtree = \"-T $task.cpus\"\n  if ( params.quiet_iqtree )\n    flagsiqtree += \" --quiet\"\n  if ( params.epsilon )\n    flagsiqtree += \" --epsilon $params.epsilon\"\n  if ( params.ninit )\n    flagsiqtree += \" --ninit $params.ninit\"\n  if ( params.ntop )\n    flagsiqtree += \" --ntop $params.ntop\"\n  if ( params.nbest )\n    flagsiqtree += \" --nbest $params.nbest\"\n  if ( params.ufboot )\n    flagsiqtree += \" --ufboot $params.ufboot\"           \n  if ( params.ufjack )\n    flagsiqtree += \" --ufjack $params.ufjack\"           \n  if ( params.jackprop )\n    flagsiqtree += \" --jack-prop $params.jackprop\"       \n  if ( params.nmax )\n    flagsiqtree += \" --nmax $params.nmax\"         \n  if ( params.nstep )\n    flagsiqtree += \" --nstep $params.nstep\"       \n  if ( params.bcor )\n    flagsiqtree += \" --bcor $params.bcor\"         \n  if ( params.beps )\n    flagsiqtree += \" --beps $params.beps\"        \n  if ( params.bnni )\n    flagsiqtree += \" --bnni\"\n  if ( params.boot )\n    flagsiqtree += \" --boot $params.boot\"           \n  if ( params.jack )\n    flagsiqtree += \" --jack $params.jack\"           \n  if ( params.alrt )\n    flagsiqtree += \" --alrt $params.alrt\"           \n  if ( params.alrt0 )\n    flagsiqtree += \" --alrt 0\"\n  if ( params.abayes )\n    flagsiqtree += \" --abayes\"\n  if ( params.lbp )\n    flagsiqtree += \" --lbp $params.lbp\"\n  if ( params.m )\n    flagsiqtree += \" -m $params.m\"\n  commandiqtree = \"iqtree $flagsiqtree\"\n\n    \"\"\"\n    $commandiqtree -s $og_alignment\n    echo \"$commandiqtree\" > iqtree_command.txt\n    \"\"\"",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "og_alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ThiloSchulze__orthology-inference",
        "directive": [
            "publishDir \"${params.output}/iqtree\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "iq_to_ppp": {
        "name_process": "iq_to_ppp",
        "string_process": "\nprocess iq_to_ppp {\n    publishDir \"${params.output}/iq_to_ppp\", mode: 'copy'\n\ninput:\n                                                                  \n    path(species_list)\n    path(tre)\n    path(mafft_alignments)\n\n    output:\n                                                              \n    path \"phylopypruner_prep\", type: 'dir', emit: phylo_prep\n    path \"*\"\n\n\n    script:\n                                                          \n\n    \"\"\"\n    mkdir -p phylopypruner_prep\n    for filename in $tre\n    do\n      while read -r otu\n      do\n        sed -i \"s/\\${otu}_/\\${otu}@/g\" \"\\${filename}\"\n      done < \"$species_list\"\n      mv \"\\$filename\" \"phylopypruner_prep/\\${filename/_mafft.fa.treefile/.tre}\"\n    done\n\n    for mafft_fa in $mafft_alignments\n    do mv \"\\$mafft_fa\" \"phylopypruner_prep/\\${mafft_fa/_mafft.fa/.fa}\"\n    done\n\n    \"\"\"\n                                            \n}",
        "nb_lignes_process": 35,
        "string_script": "    \"\"\"\n    mkdir -p phylopypruner_prep\n    for filename in $tre\n    do\n      while read -r otu\n      do\n        sed -i \"s/\\${otu}_/\\${otu}@/g\" \"\\${filename}\"\n      done < \"$species_list\"\n      mv \"\\$filename\" \"phylopypruner_prep/\\${filename/_mafft.fa.treefile/.tre}\"\n    done\n\n    for mafft_fa in $mafft_alignments\n    do mv \"\\$mafft_fa\" \"phylopypruner_prep/\\${mafft_fa/_mafft.fa/.fa}\"\n    done\n\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "species_list",
            "tre",
            "mafft_alignments"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ThiloSchulze__orthology-inference",
        "directive": [
            "publishDir \"${params.output}/iq_to_ppp\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fasttree": {
        "name_process": "fasttree",
        "string_process": "\nprocess fasttree {\n    publishDir \"${params.output}/FastTree\", mode: 'copy'\n\n    input:\n                                                           \n    path(og_alignment)\n\n    output:\n                                                 \n    path \"*.tre\", emit: tre_files\n    path \"*_command.txt\", emit: command\n\n    script:\n\n\n    \"\"\"\n    input=$og_alignment\n    fasttree < \"$og_alignment\" > \"\\${input%_mafft.fa}.tre\"\n    echo \"fasttree < $og_alignment > ${og_alignment.simpleName}.tre\" > FastTree_command.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    input=$og_alignment\n    fasttree < \"$og_alignment\" > \"\\${input%_mafft.fa}.tre\"\n    echo \"fasttree < $og_alignment > ${og_alignment.simpleName}.tre\" > FastTree_command.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "FastTree"
        ],
        "tools_url": [
            "https://bio.tools/fasttree"
        ],
        "tools_dico": [
            {
                "name": "FastTree",
                "uri": "https://bio.tools/fasttree",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic inference (from molecular sequences)"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree construction (from molecular sequences)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree generation (from molecular sequences)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Infers approximately-maximum-likelihood phylogenetic trees from alignments of nucleotide or protein sequences.",
                "homepage": "http://www.microbesonline.org/fasttree/"
            }
        ],
        "inputs": [
            "og_alignment"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ThiloSchulze__orthology-inference",
        "directive": [
            "publishDir \"${params.output}/FastTree\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fast_to_ppp": {
        "name_process": "fast_to_ppp",
        "string_process": "\nprocess fast_to_ppp {\n    publishDir \"${params.output}/fast_to_ppp\", mode: 'copy'\n\n    input:\n                                                                  \n    path(tre_file)\n    path(alignments)\n\n    output:\n                                                \n    path \"phylopypruner_prep\", type: 'dir', emit: phylo_prep\n    path \"*\"\n\n\n    script:\n                                                                                                                     \n\n    \"\"\"\n    mkdir -p phylopypruner_prep\n    for tre in $tre_file\n    do\n      mv \"\\$tre\" \"phylopypruner_prep/\\$tre\"\n    done\n\n    for alignment in $alignments\n    do \n      mv \"\\$alignment\" \"phylopypruner_prep/\\${alignment/%_mafft.fa}.fa\"\n    done\n    \n    \"\"\"\n                                               \n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    mkdir -p phylopypruner_prep\n    for tre in $tre_file\n    do\n      mv \"\\$tre\" \"phylopypruner_prep/\\$tre\"\n    done\n\n    for alignment in $alignments\n    do \n      mv \"\\$alignment\" \"phylopypruner_prep/\\${alignment/%_mafft.fa}.fa\"\n    done\n    \n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tre_file",
            "alignments"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ThiloSchulze__orthology-inference",
        "directive": [
            "publishDir \"${params.output}/fast_to_ppp\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "ppp": {
        "name_process": "ppp",
        "string_process": "\nprocess ppp {\n    publishDir \"${params.output}/phylopypruner\", mode: 'copy'\n\n    input:\n                                                                  \n    path(pruner_prep)\n\n    output:\n    path \"phylopypruner_output\", type: 'dir'\n    path \"*_command.txt\", emit: command\n\n\n    script:\n                                                           \n  flagsphylopypruner = \"--dir $pruner_prep --threads $params.threads --output phylopypruner_output\"\n  if ( params.no_plot )\n    flagsphylopypruner += \" --no-plot\"\n  if ( params.no_supermatrix )\n    flagsphylopypruner += \" --no-supermatrix\"\n  if ( params.min_len )\n    flagsphylopypruner += \" --min-len $params.min_len\"\n  if ( params.trim_lb )\n    flagsphylopypruner += \" --trim-lb $params.trim_lb\"\n  if ( params.min_pdist )\n    flagsphylopypruner += \" --min-pdist $params.min_pdist\"\n  if ( params.min_support )\n    flagsphylopypruner += \" --min-support $params.min_support\"\n  if ( params.trim_divergent )\n    flagsphylopypruner += \" --trim-divergent $params.trim_divergent\"\n  if ( params.trim_freq_paralogs )\n    flagsphylopypruner += \" --trim-freq-paralogs $params.trim_freq_paralogs\"\n  if ( params.include )\n    flagsphylopypruner += \" --include $params.include\"\n  if ( params.outgroup )\n    flagsphylopypruner += \" --outgroup $params.outgroup\"\n  if ( params.root )  \n    flagsphylopypruner += \" --root $params.root\"\n  if ( params.prune )\n    flagsphylopypruner += \" --prune $params.prune\"     \n  if ( params.force_inclusion )\n    flagsphylopypruner += \" --force-inclusion $params.force_inclusion\"\n  if ( params.min_taxa )\n    flagsphylopypruner += \" --min-taxa $params.min_taxa\"\n  if ( params.min_otu_occupancy )\n    flagsphylopypruner += \" --min-otu-occupancy $params.min_otu_occupancy\"\n  if ( params.min_gene_occupancy )\n    flagsphylopypruner += \" --min-gene-occupancy $params.min_gene_occupancy\"\n  if ( params.subclades )\n    flagsphylopypruner += \" --subclades $params.min_otu_occupancy\"\n  if ( params.jackknife )\n    flagsphylopypruner += \" --jackknife $params.jackknife\"\n  commandphylopypruner = \"phylopypruner $flagsphylopypruner\"\n\n    \"\"\"\n    $commandphylopypruner\n    echo \"$commandphylopypruner\" > phylopypruner_command.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 58,
        "string_script": "  flagsphylopypruner = \"--dir $pruner_prep --threads $params.threads --output phylopypruner_output\"\n  if ( params.no_plot )\n    flagsphylopypruner += \" --no-plot\"\n  if ( params.no_supermatrix )\n    flagsphylopypruner += \" --no-supermatrix\"\n  if ( params.min_len )\n    flagsphylopypruner += \" --min-len $params.min_len\"\n  if ( params.trim_lb )\n    flagsphylopypruner += \" --trim-lb $params.trim_lb\"\n  if ( params.min_pdist )\n    flagsphylopypruner += \" --min-pdist $params.min_pdist\"\n  if ( params.min_support )\n    flagsphylopypruner += \" --min-support $params.min_support\"\n  if ( params.trim_divergent )\n    flagsphylopypruner += \" --trim-divergent $params.trim_divergent\"\n  if ( params.trim_freq_paralogs )\n    flagsphylopypruner += \" --trim-freq-paralogs $params.trim_freq_paralogs\"\n  if ( params.include )\n    flagsphylopypruner += \" --include $params.include\"\n  if ( params.outgroup )\n    flagsphylopypruner += \" --outgroup $params.outgroup\"\n  if ( params.root )  \n    flagsphylopypruner += \" --root $params.root\"\n  if ( params.prune )\n    flagsphylopypruner += \" --prune $params.prune\"     \n  if ( params.force_inclusion )\n    flagsphylopypruner += \" --force-inclusion $params.force_inclusion\"\n  if ( params.min_taxa )\n    flagsphylopypruner += \" --min-taxa $params.min_taxa\"\n  if ( params.min_otu_occupancy )\n    flagsphylopypruner += \" --min-otu-occupancy $params.min_otu_occupancy\"\n  if ( params.min_gene_occupancy )\n    flagsphylopypruner += \" --min-gene-occupancy $params.min_gene_occupancy\"\n  if ( params.subclades )\n    flagsphylopypruner += \" --subclades $params.min_otu_occupancy\"\n  if ( params.jackknife )\n    flagsphylopypruner += \" --jackknife $params.jackknife\"\n  commandphylopypruner = \"phylopypruner $flagsphylopypruner\"\n\n    \"\"\"\n    $commandphylopypruner\n    echo \"$commandphylopypruner\" > phylopypruner_command.txt\n    \"\"\"",
        "nb_lignes_script": 42,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pruner_prep"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ThiloSchulze__orthology-inference",
        "directive": [
            "publishDir \"${params.output}/phylopypruner\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "settings": {
        "name_process": "settings",
        "string_process": "\nprocess settings {\n    publishDir \"${params.output}/commands\", mode: 'copy'\n\n    input:\n    path(command1)\n    path(command2)\n    path(command3)\n    path(command4)\n    path(command5)\n\n    output:\n                                         \n    path \"*.txt\"\n\n    script:\n    \"\"\"\n    command_list=\\$( cat $command1 $command2 $command3 $command4 $command5 )\n    echo \"Input\n    =====\n\n    \\$command_list\" > command_list.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    command_list=\\$( cat $command1 $command2 $command3 $command4 $command5 )\n    echo \"Input\n    =====\n\n    \\$command_list\" > command_list.txt\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "command1",
            "command2",
            "command3",
            "command4",
            "command5"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ThiloSchulze__orthology-inference",
        "directive": [
            "publishDir \"${params.output}/commands\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
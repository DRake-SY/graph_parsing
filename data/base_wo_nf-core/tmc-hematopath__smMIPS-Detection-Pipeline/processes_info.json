{
    "trimming_fastq_mcf": {
        "name_process": "trimming_fastq_mcf",
        "string_process": "\nprocess trimming_fastq_mcf {\n\tmaxForks 15\n\tpublishDir \"${PWD}/${Sample}/processed_reads/\", mode: 'copy'\n\tinput:\n\t\tval (Sample)\n\toutput:\n\t tuple val (Sample), file (\"*.fastq\")\n\tscript:\n\t\"\"\"\n\t${params.ea_utils_path}/fastq-mcf -o ${Sample}.R1.trimmed.fastq -o ${Sample}.R2.trimmed.fastq -l 53 -k 0 -q 0 ${params.adaptors} ${params.sequences}/${Sample}*_R1_*.fastq.gz ${params.sequences}/${Sample}*_R2_*.fastq.gz\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\t${params.ea_utils_path}/fastq-mcf -o ${Sample}.R1.trimmed.fastq -o ${Sample}.R2.trimmed.fastq -l 53 -k 0 -q 0 ${params.adaptors} ${params.sequences}/${Sample}*_R1_*.fastq.gz ${params.sequences}/${Sample}*_R2_*.fastq.gz\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "maxForks 15",
            "publishDir \"${PWD}/${Sample}/processed_reads/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "gzip": {
        "name_process": "gzip",
        "string_process": "\nprocess gzip{\n\tpublishDir \"${PWD}/${Sample}/processed_reads/\", mode: 'copy'\n\tinput:\n\t\ttuple val (Sample), file(trimmedFiles)\n\toutput:\n\t\tval Sample\n\tscript:\n\t\"\"\"\n\tmkdir \"$PWD/${Sample}/Annovar_Modified/\" \n\tgzip -f ${PWD}/${Sample}/processed_reads/${trimmedFiles[0]}\n\tgzip -f ${PWD}/${Sample}/processed_reads/${trimmedFiles[1]}\n\t\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\t\"\"\"\n\tmkdir \"$PWD/${Sample}/Annovar_Modified/\" \n\tgzip -f ${PWD}/${Sample}/processed_reads/${trimmedFiles[0]}\n\tgzip -f ${PWD}/${Sample}/processed_reads/${trimmedFiles[1]}\n\t\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "trimmedFiles"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"${PWD}/${Sample}/processed_reads/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pair_assembly_pear": {
        "name_process": "pair_assembly_pear",
        "string_process": "\nprocess pair_assembly_pear {\n\tmemory '7.0 GB'\n\tpublishDir \"${PWD}/${Sample}/assembled_reads/\", mode: 'copy'\n\tinput:\n\t\tval Sample\n\toutput:\n\t\ttuple val (Sample), file(\"*\") \n\tscript:\n\t\"\"\"\n\t${params.pear_path} -f ${PWD}/${Sample}/processed_reads/${Sample}.R1.trimmed.fastq.gz -r ${PWD}/${Sample}/processed_reads/${Sample}.R2.trimmed.fastq.gz -o ${Sample} -n 53 -j 15\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\t${params.pear_path} -f ${PWD}/${Sample}/processed_reads/${Sample}.R1.trimmed.fastq.gz -r ${PWD}/${Sample}/processed_reads/${Sample}.R2.trimmed.fastq.gz -o ${Sample} -n 53 -j 15\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "memory '7.0 GB'",
            "publishDir \"${PWD}/${Sample}/assembled_reads/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mapping_reads": {
        "name_process": "mapping_reads",
        "string_process": "\nprocess mapping_reads{\n\tmaxForks 15\n\tpublishDir \"${PWD}/${Sample}/mapped_reads/\", mode: 'copy'\n\tinput:\n\t\ttuple val (Sample), file (pairAssembled)\n\toutput:\n\t\ttuple val (Sample), file (\"*.sam\")\n\tscript:\n\t\"\"\"\n\tbwa mem -R \"@RG\\\\tID:AML\\\\tPL:ILLUMINA\\\\tLB:LIB-MIPS\\\\tSM:${Sample}\\\\tPI:200\" -M -t 20 ${params.genome} ${pairAssembled[0]} > ${Sample}.sam\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tbwa mem -R \"@RG\\\\tID:AML\\\\tPL:ILLUMINA\\\\tLB:LIB-MIPS\\\\tSM:${Sample}\\\\tPI:200\" -M -t 20 ${params.genome} ${pairAssembled[0]} > ${Sample}.sam\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "Sample",
            "pairAssembled"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "maxForks 15",
            "publishDir \"${PWD}/${Sample}/mapped_reads/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "sam_conversion": {
        "name_process": "sam_conversion",
        "string_process": "\nprocess sam_conversion{\n\tmaxForks 15\n\tpublishDir \"$PWD/${Sample}/mapped_reads/\", mode: 'copy', pattern: '*.fxd_sorted.bam'\n\tpublishDir \"$PWD/${Sample}/mapped_reads/\", mode: 'copy', pattern: '*.fxd_sorted.bam.bai'\n\n\tinput:\n\t\ttuple val (Sample), file(samFile)\n\toutput:\n\t\ttuple val(Sample), file (\"*.fxd_sorted.bam\"), file (\"*.fxd_sorted.bam.bai\")\n\t\n\tscript:\n\t\"\"\"\n\tjava -Xmx8G -jar ${params.picard_path} FixMateInformation I= ${samFile} O= ${Sample}.fxd.sam VALIDATION_STRINGENCY=SILENT\n\t${params.samtools} view -bT ${params.genome} ${Sample}.fxd.sam > ${Sample}.fxd.bam\n\t${params.samtools} sort ${Sample}.fxd.bam > ${Sample}.fxd_sorted.bam\n\t${params.samtools} index ${Sample}.fxd_sorted.bam > ${Sample}.fxd_sorted.bam.bai\n\t\"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\t\"\"\"\n\tjava -Xmx8G -jar ${params.picard_path} FixMateInformation I= ${samFile} O= ${Sample}.fxd.sam VALIDATION_STRINGENCY=SILENT\n\t${params.samtools} view -bT ${params.genome} ${Sample}.fxd.sam > ${Sample}.fxd.bam\n\t${params.samtools} sort ${Sample}.fxd.bam > ${Sample}.fxd_sorted.bam\n\t${params.samtools} index ${Sample}.fxd_sorted.bam > ${Sample}.fxd_sorted.bam.bai\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "samFile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "maxForks 15",
            "publishDir \"$PWD/${Sample}/mapped_reads/\", mode: 'copy', pattern: '*.fxd_sorted.bam'",
            "publishDir \"$PWD/${Sample}/mapped_reads/\", mode: 'copy', pattern: '*.fxd_sorted.bam.bai'"
        ],
        "when": "",
        "stub": ""
    },
    "RealignerTargetCreator": {
        "name_process": "RealignerTargetCreator",
        "string_process": "\nprocess RealignerTargetCreator {\n\tpublishDir \"${PWD}/${Sample}/gatk38_processing/\", mode: 'copy', pattern: '*.intervals'\n\t\n\tinput:\n\t\ttuple val (Sample), file (bamFile), file(bamBai)\n\toutput:\n\t\ttuple val(Sample), file (\"*.intervals\")\n\tscript:\n\t\"\"\"\n\tjava -Xmx8G -jar ${params.GATK38_path} -T RealignerTargetCreator -R ${params.genome} -nt 10 -I ${bamFile} --known ${params.site1} -o ${Sample}.intervals\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tjava -Xmx8G -jar ${params.GATK38_path} -T RealignerTargetCreator -R ${params.genome} -nt 10 -I ${bamFile} --known ${params.site1} -o ${Sample}.intervals\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "bamFile",
            "bamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"${PWD}/${Sample}/gatk38_processing/\", mode: 'copy', pattern: '*.intervals'"
        ],
        "when": "",
        "stub": ""
    },
    "IndelRealigner": {
        "name_process": "IndelRealigner",
        "string_process": "\nprocess IndelRealigner{\n\tpublishDir \"${PWD}/${Sample}/gatk38_processing/\", mode: 'copy', pattern: '*.realigned.bam'\n\tinput:\n\t\ttuple val(Sample), file (targetIntervals), file(bamFile), file(bamBai)\n\toutput:\n\t\ttuple val(Sample), file (\"*.realigned.bam\")\n\tscript:\n\t\"\"\"\n\techo ${Sample} ${targetIntervals} ${bamFile}\n\tjava -Xmx8G -jar ${params.GATK38_path} -T IndelRealigner -R ${params.genome} -I ${bamFile} -known ${params.site1} --targetIntervals ${targetIntervals} -o ${Sample}.realigned.bam\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\techo ${Sample} ${targetIntervals} ${bamFile}\n\tjava -Xmx8G -jar ${params.GATK38_path} -T IndelRealigner -R ${params.genome} -I ${bamFile} -known ${params.site1} --targetIntervals ${targetIntervals} -o ${Sample}.realigned.bam\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "targetIntervals",
            "bamFile",
            "bamBai"
        ],
        "nb_inputs": 4,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"${PWD}/${Sample}/gatk38_processing/\", mode: 'copy', pattern: '*.realigned.bam'"
        ],
        "when": "",
        "stub": ""
    },
    "BaseRecalibrator": {
        "name_process": "BaseRecalibrator",
        "string_process": "\nprocess BaseRecalibrator{\n\tpublishDir \"${PWD}/${Sample}/gatk38_processing/\", mode: 'copy', pattern: '*.recal_data.table'\n\tinput:\n\t\ttuple val (Sample), file (realignedBam)\n\toutput:\n\t\ttuple val(Sample), file (\"*.recal_data.table\")\n\tscript:\n\t\"\"\"\n\tjava -Xmx8G -jar ${params.GATK38_path} -T BaseRecalibrator -R ${params.genome} -I ${realignedBam} -knownSites ${params.site2} -knownSites ${params.site3} -o ${Sample}.recal_data.table\n\t\"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\t\"\"\"\n\tjava -Xmx8G -jar ${params.GATK38_path} -T BaseRecalibrator -R ${params.genome} -I ${realignedBam} -knownSites ${params.site2} -knownSites ${params.site3} -o ${Sample}.recal_data.table\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "realignedBam"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"${PWD}/${Sample}/gatk38_processing/\", mode: 'copy', pattern: '*.recal_data.table'"
        ],
        "when": "",
        "stub": ""
    },
    "PrintReads": {
        "name_process": "PrintReads",
        "string_process": "\nprocess PrintReads{\n\tpublishDir \"${PWD}/${Sample}/gatk38_processing/\", mode: 'copy', pattern: '*.aligned.recalibrated.bam'\n\tinput:\n\t\ttuple val (Sample), file (realignedBam), file (recal_dataTable)\n\toutput:\n\t\ttuple val (Sample), file (\"*.aligned.recalibrated.bam\")\n\tscript:\n\t\"\"\"\n\tjava -Xmx8G -jar ${params.GATK38_path} -T PrintReads -R ${params.genome} -I ${realignedBam} --BQSR ${recal_dataTable} -o ${Sample}.aligned.recalibrated.bam\n\t\"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\t\"\"\"\n\tjava -Xmx8G -jar ${params.GATK38_path} -T PrintReads -R ${params.genome} -I ${realignedBam} --BQSR ${recal_dataTable} -o ${Sample}.aligned.recalibrated.bam\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "realignedBam",
            "recal_dataTable"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"${PWD}/${Sample}/gatk38_processing/\", mode: 'copy', pattern: '*.aligned.recalibrated.bam'"
        ],
        "when": "",
        "stub": ""
    },
    "generatefinalbam": {
        "name_process": "generatefinalbam",
        "string_process": "\nprocess generatefinalbam{\n\tpublishDir \"$PWD/${Sample}/gatk38_processing/\", mode: 'copy', pattern: '*.final.bam'\n\tpublishDir \"$PWD/Final_Output/${Sample}/\", mode: 'copy', pattern: '*.final.bam'\n\tpublishDir \"$PWD/${Sample}/gatk38_processing/\", mode: 'copy', pattern: '*.final.bam.bai'\n\tpublishDir \"$PWD/Final_Output/${Sample}/\", mode: 'copy', pattern: '*.final.bam.bai'\n\t\n\tinput:\n\t\ttuple val (Sample), file(alignedRecalibratedBam)\n\toutput:\n\t\ttuple val(Sample), file (\"*.final.bam\"),  file (\"*.final.bam.bai\")\n\t\t\n\tscript:\n\t\"\"\"\n\t${params.samtools} sort ${alignedRecalibratedBam} > ${Sample}.final.bam\n\t${params.samtools} index ${Sample}.final.bam > ${Sample}.final.bam.bai\n\t\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\t\"\"\"\n\t${params.samtools} sort ${alignedRecalibratedBam} > ${Sample}.final.bam\n\t${params.samtools} index ${Sample}.final.bam > ${Sample}.final.bam.bai\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "alignedRecalibratedBam"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/gatk38_processing/\", mode: 'copy', pattern: '*.final.bam'",
            "publishDir \"$PWD/Final_Output/${Sample}/\", mode: 'copy', pattern: '*.final.bam'",
            "publishDir \"$PWD/${Sample}/gatk38_processing/\", mode: 'copy', pattern: '*.final.bam.bai'",
            "publishDir \"$PWD/Final_Output/${Sample}/\", mode: 'copy', pattern: '*.final.bam.bai'"
        ],
        "when": "",
        "stub": ""
    },
    "mutect2_run": {
        "name_process": "mutect2_run",
        "string_process": "\nprocess mutect2_run{\n\tmaxForks 10\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.mutect2.vcf'\n\t\n\tinput:\n\t\ttuple val(Sample), file(finalBam), file (finalBamBai)\n\toutput:\n\t\ttuple val (Sample), file (\"*.mutect2.vcf\")\n\n\tscript:\n\t\"\"\"\n\tjava -Xmx10G -jar ${params.GATK38_path} -T MuTect2 -R ${params.genome} -I:tumor ${finalBam} -o ${Sample}.mutect2.vcf --dbsnp ${params.site2} -L ${params.bedfile}.bed -nct 30 -contamination 0.02 -mbq 30\n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\t\"\"\"\n\tjava -Xmx10G -jar ${params.GATK38_path} -T MuTect2 -R ${params.genome} -I:tumor ${finalBam} -o ${Sample}.mutect2.vcf --dbsnp ${params.site2} -L ${params.bedfile}.bed -nct 30 -contamination 0.02 -mbq 30\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "finalBam",
            "finalBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "maxForks 10",
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.mutect2.vcf'"
        ],
        "when": "",
        "stub": ""
    },
    "freebayes_run": {
        "name_process": "freebayes_run",
        "string_process": "\nprocess freebayes_run{\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.freebayes.vcf'\n\t\n\tinput:\n\t\ttuple val (Sample), file(finalBam), file (finalBamBai)\n\toutput:\n\t\ttuple val (Sample), file (\"*.freebayes.vcf\")\n\n\tscript:\n\t\"\"\"\n\t${params.freebayes_path} -f ${params.genome} -b ${finalBam} -t ${params.bedfile}.bed > ${Sample}.freebayes.vcf \t\n\t\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\t\"\"\"\n\t${params.freebayes_path} -f ${params.genome} -b ${finalBam} -t ${params.bedfile}.bed > ${Sample}.freebayes.vcf \t\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "finalBam",
            "finalBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.freebayes.vcf'"
        ],
        "when": "",
        "stub": ""
    },
    "vardict_run": {
        "name_process": "vardict_run",
        "string_process": "\nprocess vardict_run{\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.vardict.vcf'\n\t\n\tinput:\n\t\ttuple val (Sample), file(finalBam), file (finalBamBai)\n\toutput:\n\t\ttuple val (Sample), file (\"*.vardict.vcf\")\n\tscript:\n\t\"\"\"\n\tVarDict -G ${params.genome} -f 0.03 -N ${Sample} -b ${finalBam} -c 1 -S 2 -E 3 -g 4 ${params.bedfile}.bed | sed '1d' | teststrandbias.R | var2vcf_valid.pl -N ${Sample} -E -f 0.03 > ${Sample}.vardict.vcf\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tVarDict -G ${params.genome} -f 0.03 -N ${Sample} -b ${finalBam} -c 1 -S 2 -E 3 -g 4 ${params.bedfile}.bed | sed '1d' | teststrandbias.R | var2vcf_valid.pl -N ${Sample} -E -f 0.03 > ${Sample}.vardict.vcf\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "finalBam",
            "finalBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.vardict.vcf'"
        ],
        "when": "",
        "stub": ""
    },
    "varscan_run": {
        "name_process": "varscan_run",
        "string_process": "\nprocess varscan_run{\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.varscan_snp.vcf'\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.varscan_indel.vcf'\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.varscan_snp.vcf.gz'\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.varscan_indel.vcf.gz'\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.varscan.vcf'\n\t\n\tinput:\n\t\ttuple val (Sample), file(finalBam), file (finalBamBai)\n\toutput:\n\t\ttuple val(Sample), file (\"*.varscan_snp.vcf\"),  file (\"*.varscan_indel.vcf\"), file(\"*.varscan.vcf\")\n\t\t\n\tscript:\n\t\"\"\"\n\t${params.samtools} mpileup -f ${params.genome} ${finalBam} > ${Sample}.mpileup\n\tjava -jar ${params.varscan_path} mpileup2snp ${Sample}.mpileup --min-coverage 10 --min-reads2 5 --min-avg-qual 15 --min-var-freq 0.003 --p-value 1e-4 --output-vcf 1 > ${Sample}.varscan_snp.vcf\n\tjava -jar ${params.varscan_path} mpileup2indel ${Sample}.mpileup --min-coverage 10 --min-reads2 5 --min-avg-qual 15 --min-var-freq 0.003 --p-value 1e-4 --output-vcf 1 > ${Sample}.varscan_indel.vcf\n\tbgzip -c ${Sample}.varscan_snp.vcf > ${Sample}.varscan_snp.vcf.gz\n\tbgzip -c ${Sample}.varscan_indel.vcf > ${Sample}.varscan_indel.vcf.gz\n\t${params.bcftools_path} index -t ${Sample}.varscan_snp.vcf.gz\n\t${params.bcftools_path} index -t ${Sample}.varscan_indel.vcf.gz\n\t${params.bcftools_path} concat -a ${Sample}.varscan_snp.vcf.gz ${Sample}.varscan_indel.vcf.gz -o ${Sample}.varscan.vcf\n\t\"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\t\"\"\"\n\t${params.samtools} mpileup -f ${params.genome} ${finalBam} > ${Sample}.mpileup\n\tjava -jar ${params.varscan_path} mpileup2snp ${Sample}.mpileup --min-coverage 10 --min-reads2 5 --min-avg-qual 15 --min-var-freq 0.003 --p-value 1e-4 --output-vcf 1 > ${Sample}.varscan_snp.vcf\n\tjava -jar ${params.varscan_path} mpileup2indel ${Sample}.mpileup --min-coverage 10 --min-reads2 5 --min-avg-qual 15 --min-var-freq 0.003 --p-value 1e-4 --output-vcf 1 > ${Sample}.varscan_indel.vcf\n\tbgzip -c ${Sample}.varscan_snp.vcf > ${Sample}.varscan_snp.vcf.gz\n\tbgzip -c ${Sample}.varscan_indel.vcf > ${Sample}.varscan_indel.vcf.gz\n\t${params.bcftools_path} index -t ${Sample}.varscan_snp.vcf.gz\n\t${params.bcftools_path} index -t ${Sample}.varscan_indel.vcf.gz\n\t${params.bcftools_path} concat -a ${Sample}.varscan_snp.vcf.gz ${Sample}.varscan_indel.vcf.gz -o ${Sample}.varscan.vcf\n\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "finalBam",
            "finalBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.varscan_snp.vcf'",
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.varscan_indel.vcf'",
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.varscan_snp.vcf.gz'",
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.varscan_indel.vcf.gz'",
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.varscan.vcf'"
        ],
        "when": "",
        "stub": ""
    },
    "lofreq_run": {
        "name_process": "lofreq_run",
        "string_process": "\nprocess lofreq_run{\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.lofreq.filtered.vcf'\n\t\n\tinput:\n\t\ttuple val (Sample), file(finalBam), file (finalBamBai)\n\toutput:\n\t\ttuple val(Sample), file (\"*.lofreq.filtered.vcf\")\n\tscript:\n\t\"\"\"\n\t${params.lofreq_path} viterbi -f ${params.genome} -o ${Sample}.lofreq.pre.bam ${finalBam}\n\t${params.samtools} sort ${Sample}.lofreq.pre.bam > ${Sample}.lofreq.bam\n\t${params.lofreq_path} call -b dynamic -C 50 -a 0.00005 -q 30 -Q 30 -m 50 -f ${params.genome} -l ${params.bedfile}.bed -o ${Sample}.lofreq.vcf ${Sample}.lofreq.bam\n\t${params.lofreq_path} filter -a 0.01 -i ${Sample}.lofreq.vcf -o ${Sample}.lofreq.filtered.vcf\n\t\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\t\"\"\"\n\t${params.lofreq_path} viterbi -f ${params.genome} -o ${Sample}.lofreq.pre.bam ${finalBam}\n\t${params.samtools} sort ${Sample}.lofreq.pre.bam > ${Sample}.lofreq.bam\n\t${params.lofreq_path} call -b dynamic -C 50 -a 0.00005 -q 30 -Q 30 -m 50 -f ${params.genome} -l ${params.bedfile}.bed -o ${Sample}.lofreq.vcf ${Sample}.lofreq.bam\n\t${params.lofreq_path} filter -a 0.01 -i ${Sample}.lofreq.vcf -o ${Sample}.lofreq.filtered.vcf\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "finalBam",
            "finalBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.lofreq.filtered.vcf'"
        ],
        "when": "",
        "stub": ""
    },
    "strelka_run": {
        "name_process": "strelka_run",
        "string_process": "\nprocess strelka_run{\n\tpublishDir \"$PWD/${Sample}/variants/strelka\", mode: 'copy', pattern: '*.strelka.vcf'\n\t\n\tinput:\n\t\ttuple val (Sample), file(finalBam), file (finalBamBai)\n\toutput:\n\t\tval (Sample)\n\tscript:\n\t\"\"\"\n\t${params.strelka_path}/configureStrelkaGermlineWorkflow.py --bam ${finalBam} --referenceFasta ${params.genome} --callRegions  ${params.bedfile}.bed.gz --targeted --runDir ${PWD}/${Sample}/variants/strelka/\n\t${PWD}/${Sample}/variants/strelka/runWorkflow.py -m local -j 20\n\tgunzip -f ${PWD}/${Sample}/variants/strelka/results/variants/variants.vcf.gz\n\tmv ${PWD}/${Sample}/variants/strelka/results/variants/variants.vcf $PWD/${Sample}/variants/${Sample}.strelka.vcf\n\t\n\t${params.strelka_path}/configureStrelkaSomaticWorkflow.py --normalBam ${params.NA12878_bam}  --tumorBam ${finalBam} --referenceFasta ${params.genome} --callRegions ${params.bedfile}.bed.gz --targeted --runDir ${PWD}/${Sample}/variants/strelka-somatic/\n\t${PWD}/${Sample}/variants/strelka-somatic/runWorkflow.py -m local -j 20\n\t\n\t${params.bcftools_path} concat -a ${PWD}/${Sample}/variants/strelka-somatic/results/variants/somatic.indels.vcf.gz ${PWD}/${Sample}/variants/strelka-somatic/results/variants/somatic.snvs.vcf.gz -o ${PWD}/${Sample}/variants/${Sample}.strelka-somatic.vcf\n\t\"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\t\"\"\"\n\t${params.strelka_path}/configureStrelkaGermlineWorkflow.py --bam ${finalBam} --referenceFasta ${params.genome} --callRegions  ${params.bedfile}.bed.gz --targeted --runDir ${PWD}/${Sample}/variants/strelka/\n\t${PWD}/${Sample}/variants/strelka/runWorkflow.py -m local -j 20\n\tgunzip -f ${PWD}/${Sample}/variants/strelka/results/variants/variants.vcf.gz\n\tmv ${PWD}/${Sample}/variants/strelka/results/variants/variants.vcf $PWD/${Sample}/variants/${Sample}.strelka.vcf\n\t\n\t${params.strelka_path}/configureStrelkaSomaticWorkflow.py --normalBam ${params.NA12878_bam}  --tumorBam ${finalBam} --referenceFasta ${params.genome} --callRegions ${params.bedfile}.bed.gz --targeted --runDir ${PWD}/${Sample}/variants/strelka-somatic/\n\t${PWD}/${Sample}/variants/strelka-somatic/runWorkflow.py -m local -j 20\n\t\n\t${params.bcftools_path} concat -a ${PWD}/${Sample}/variants/strelka-somatic/results/variants/somatic.indels.vcf.gz ${PWD}/${Sample}/variants/strelka-somatic/results/variants/somatic.snvs.vcf.gz -o ${PWD}/${Sample}/variants/${Sample}.strelka-somatic.vcf\n\t\"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "finalBam",
            "finalBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/variants/strelka\", mode: 'copy', pattern: '*.strelka.vcf'"
        ],
        "when": "",
        "stub": ""
    },
    "somaticSeq_run": {
        "name_process": "somaticSeq_run",
        "string_process": "\nprocess somaticSeq_run {\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.somaticseq.vcf'\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.avinput'\n\tpublishDir \"$PWD/${Sample}/ANNOVAR/\", mode: 'copy', pattern: '*.hg19_multianno.csv'\n\tinput:\n\t\ttuple val (Sample), file(mutectVcf), file(vardictVcf), file(varscanVcf), file(lofreqVcf)\n\toutput:\n\t\ttuple val (Sample), file (\"*.somaticseq.vcf\"), file(\"*.hg19_multianno.csv\")\n\tscript:\n\t\"\"\"\n\tpython3 ${params.somaticseq_path} --output-directory ${PWD}/${Sample}/variants/${Sample}.somaticseq --genome-reference ${params.genome} --inclusion-region ${params.bedfile}.bed --threads 25 --algorithm xgboost  --dbsnp-vcf  ~/reference_genomes/dbSNPGATK/dbsnp_138.hg19.somatic.vcf single --bam-file ${PWD}/${Sample}/gatk38_processing/${Sample}.final.bam --mutect2-vcf ${PWD}/${Sample}/variants/${Sample}.mutect2.vcf --vardict-vcf ${PWD}/${Sample}/variants/${Sample}.vardict.vcf --varscan-vcf ${PWD}/${Sample}/variants/${Sample}.varscan.vcf --lofreq-vcf ${PWD}/${Sample}/variants/${Sample}.lofreq.vcf\t--strelka-vcf ${PWD}/${Sample}/variants/${Sample}.strelka.vcf  --sample-name ${Sample}\n\t\n\tgrep \"^#\" ${PWD}/${Sample}/variants/${Sample}.somaticseq/Consensus.sSNV.vcf > ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_snv.vcf\n\tgrep -v \"^#\" ${PWD}/${Sample}/variants/${Sample}.somaticseq/Consensus.sSNV.vcf | sort -k1,1V -k2,2g >> ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_snv.vcf\n\tbgzip -c ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_snv.vcf > ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_snv.vcf.gz\n\t${params.bcftools_path} index -t ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_snv.vcf.gz\n\t\n\tgrep \"^#\" ${PWD}/${Sample}/variants/${Sample}.somaticseq/Consensus.sINDEL.vcf > ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_indel.vcf\n\tgrep -v \"^#\" ${PWD}/${Sample}/variants/${Sample}.somaticseq/Consensus.sINDEL.vcf | sort -k1,1V -k2,2g >> ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_indel.vcf\n\tbgzip -c ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_indel.vcf > ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_indel.vcf.gz\n\t${params.bcftools_path} index -t ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_indel.vcf.gz\n\t\n\t${params.bcftools_path} concat -a ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_snv.vcf.gz ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_indel.vcf.gz -o ${Sample}.somaticseq.vcf\n\t\n\tperl ${params.annovarLatest_path}/convert2annovar.pl -format vcf4 ${Sample}.somaticseq.vcf  --outfile ${Sample}.somaticseq.avinput --withzyg --includeinfo\n\t\n\tperl ${params.annovarLatest_path}/table_annovar.pl ${Sample}.somaticseq.avinput --out ${Sample}.somaticseq --remove --protocol refGene,cytoBand,cosmic84,popfreq_all_20150413,avsnp150,intervar_20180118,1000g2015aug_all --operation g,r,f,f,f,f,f --buildver hg19 --nastring '-1' --otherinfo --csvout --thread 10 ${params.annovarLatest_path}/humandb/ --xreffile ${params.annovarLatest_path}/example/gene_fullxref.txt\n\t\"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\t\"\"\"\n\tpython3 ${params.somaticseq_path} --output-directory ${PWD}/${Sample}/variants/${Sample}.somaticseq --genome-reference ${params.genome} --inclusion-region ${params.bedfile}.bed --threads 25 --algorithm xgboost  --dbsnp-vcf  ~/reference_genomes/dbSNPGATK/dbsnp_138.hg19.somatic.vcf single --bam-file ${PWD}/${Sample}/gatk38_processing/${Sample}.final.bam --mutect2-vcf ${PWD}/${Sample}/variants/${Sample}.mutect2.vcf --vardict-vcf ${PWD}/${Sample}/variants/${Sample}.vardict.vcf --varscan-vcf ${PWD}/${Sample}/variants/${Sample}.varscan.vcf --lofreq-vcf ${PWD}/${Sample}/variants/${Sample}.lofreq.vcf\t--strelka-vcf ${PWD}/${Sample}/variants/${Sample}.strelka.vcf  --sample-name ${Sample}\n\t\n\tgrep \"^#\" ${PWD}/${Sample}/variants/${Sample}.somaticseq/Consensus.sSNV.vcf > ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_snv.vcf\n\tgrep -v \"^#\" ${PWD}/${Sample}/variants/${Sample}.somaticseq/Consensus.sSNV.vcf | sort -k1,1V -k2,2g >> ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_snv.vcf\n\tbgzip -c ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_snv.vcf > ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_snv.vcf.gz\n\t${params.bcftools_path} index -t ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_snv.vcf.gz\n\t\n\tgrep \"^#\" ${PWD}/${Sample}/variants/${Sample}.somaticseq/Consensus.sINDEL.vcf > ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_indel.vcf\n\tgrep -v \"^#\" ${PWD}/${Sample}/variants/${Sample}.somaticseq/Consensus.sINDEL.vcf | sort -k1,1V -k2,2g >> ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_indel.vcf\n\tbgzip -c ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_indel.vcf > ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_indel.vcf.gz\n\t${params.bcftools_path} index -t ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_indel.vcf.gz\n\t\n\t${params.bcftools_path} concat -a ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_snv.vcf.gz ${PWD}/${Sample}/variants/${Sample}.somaticseq/somaticseq_indel.vcf.gz -o ${Sample}.somaticseq.vcf\n\t\n\tperl ${params.annovarLatest_path}/convert2annovar.pl -format vcf4 ${Sample}.somaticseq.vcf  --outfile ${Sample}.somaticseq.avinput --withzyg --includeinfo\n\t\n\tperl ${params.annovarLatest_path}/table_annovar.pl ${Sample}.somaticseq.avinput --out ${Sample}.somaticseq --remove --protocol refGene,cytoBand,cosmic84,popfreq_all_20150413,avsnp150,intervar_20180118,1000g2015aug_all --operation g,r,f,f,f,f,f --buildver hg19 --nastring '-1' --otherinfo --csvout --thread 10 ${params.annovarLatest_path}/humandb/ --xreffile ${params.annovarLatest_path}/example/gene_fullxref.txt\n\t\"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "mutectVcf",
            "vardictVcf",
            "varscanVcf",
            "lofreqVcf"
        ],
        "nb_inputs": 5,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.somaticseq.vcf'",
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.avinput'",
            "publishDir \"$PWD/${Sample}/ANNOVAR/\", mode: 'copy', pattern: '*.hg19_multianno.csv'"
        ],
        "when": "",
        "stub": ""
    },
    "platypus_run": {
        "name_process": "platypus_run",
        "string_process": "\nprocess platypus_run{\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.platypus.vcf'\n\tinput:\n\t\ttuple val (Sample), file(finalBams), file(finalBamBai)\n\toutput:\n\t\ttuple val(Sample), file (\"*.platypus.vcf\")\n\tscript:\n\t\"\"\"\n\tpython2.7 ${params.platypus_path} callVariants --bamFiles=${finalBams[0]} --refFile=${params.genome} --output=${Sample}.platypus.vcf --nCPU=15 --minFlank=0 --filterDuplicates=0 --maxVariants=6 --minReads=6 --regions=${params.bedfile}_regions.txt\n\t\"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\t\"\"\"\n\tpython2.7 ${params.platypus_path} callVariants --bamFiles=${finalBams[0]} --refFile=${params.genome} --output=${Sample}.platypus.vcf --nCPU=15 --minFlank=0 --filterDuplicates=0 --maxVariants=6 --minReads=6 --regions=${params.bedfile}_regions.txt\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "finalBams",
            "finalBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.platypus.vcf'"
        ],
        "when": "",
        "stub": ""
    },
    "coverage": {
        "name_process": "coverage",
        "string_process": "\nprocess coverage {\n\tpublishDir \"$PWD/${Sample}/coverage/\", mode: 'copy'\n\tinput:\n\t\ttuple val (Sample), file(finalBams), file(finalBamBai)\n\toutput:\n\t\ttuple val (Sample), file (\"*\")\n\tscript:\n\t\"\"\"\n\t${params.bedtools} bamtobed -i ${finalBams[0]} > ${Sample}.bed\n\t${params.bedtools} coverage -counts -a ${params.bedfile}.bed -b ${Sample}.bed > ${Sample}.counts.bed\n\t\n\t\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\t\"\"\"\n\t${params.bedtools} bamtobed -i ${finalBams[0]} > ${Sample}.bed\n\t${params.bedtools} coverage -counts -a ${params.bedfile}.bed -b ${Sample}.bed > ${Sample}.counts.bed\n\t\n\t\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "finalBams",
            "finalBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/coverage/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "getITD_run": {
        "name_process": "getITD_run",
        "string_process": "\nprocess getITD_run{\n\tpublishDir \"$PWD/${Sample}/getITD/\", mode: 'copy'\n\tinput:\n\t\ttuple val (Sample), file(finalBam), file(finalBamBai)\n\toutput:\n\t\ttuple val (Sample), file (\"*\")\n\tscript:\n\t\"\"\"\n\tgunzip -c ${params.sequences}/${Sample}*_R1_*.fastq.gz > ${Sample}_R1_.fastq\n\tgunzip -c ${params.sequences}/${Sample}*_R2_*.fastq.gz > ${Sample}_R2_.fastq\n\t\n\tpython3 ${params.getitd_path}/getitd.py ${Sample} ${Sample}_R1_.fastq ${Sample}_R2_.fastq -require_indel_free_primers False -anno ${params.getitd_path}/anno/amplicon_kayser.tsv -reference ${params.getitd_path}/anno/amplicon.txt -forward_primer ${params.forward_primer} -reverse_primer ${params.reverse_primer} -forward_adapter  ATACGAGATCCGTAATCGGGAAGCTGAAG -reverse_adapter ACACGCACGATCCGACGGTAGTGT -nkern 25\n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\t\"\"\"\n\tgunzip -c ${params.sequences}/${Sample}*_R1_*.fastq.gz > ${Sample}_R1_.fastq\n\tgunzip -c ${params.sequences}/${Sample}*_R2_*.fastq.gz > ${Sample}_R2_.fastq\n\t\n\tpython3 ${params.getitd_path}/getitd.py ${Sample} ${Sample}_R1_.fastq ${Sample}_R2_.fastq -require_indel_free_primers False -anno ${params.getitd_path}/anno/amplicon_kayser.tsv -reference ${params.getitd_path}/anno/amplicon.txt -forward_primer ${params.forward_primer} -reverse_primer ${params.reverse_primer} -forward_adapter  ATACGAGATCCGTAATCGGGAAGCTGAAG -reverse_adapter ACACGCACGATCCGACGGTAGTGT -nkern 25\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "finalBam",
            "finalBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/getITD/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "getITD_done": {
        "name_process": "getITD_done",
        "string_process": "\nprocess getITD_done{\n\tinput:\n\t\ttuple val (Sample), file (\"*\")\n\toutput:\n\t\tval Sample\n\tscript:\n\t\"\"\"\n\tcp -r ${PWD}/${Sample}/getITD/${Sample}_getitd/ ${PWD}/Final_Output/${Sample}/\n\t\"\"\"\n\n\n\n}",
        "nb_lignes_process": 12,
        "string_script": "\t\"\"\"\n\tcp -r ${PWD}/${Sample}/getITD/${Sample}_getitd/ ${PWD}/Final_Output/${Sample}/\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "coverview_run": {
        "name_process": "coverview_run",
        "string_process": "\nprocess coverview_run {\n\texecutor=\"local\"\n\tpublishDir \"$PWD/${Sample}/Coverview/\", mode: 'copy'\n\tinput:\n\t\ttuple val (Sample), file(finalBam), file(finalBamBai)\n\toutput:\n\t\tval (Sample)\n\tscript:\n\t\"\"\"\n\tmkdir $PWD/${Sample}/Coverview/\n\t${params.coverview_path}/coverview -i ${finalBam} -b ${params.bedfile}.bed -c ${params.coverview_path}/config/config.txt -o ${PWD}/${Sample}/Coverview/${Sample}.coverview\n\tpython3 ${params.coverview_script_path} ${PWD}/${Sample}/Coverview/${Sample}.coverview_regions.txt ${PWD}/${Sample}/Coverview/${Sample}.coverview_regions.csv\n\tcp ${PWD}/${Sample}/Coverview/${Sample}.coverview_regions.csv ${PWD}/Coverview/${Sample}.coverview_regions.csv\n\t\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\t\"\"\"\n\tmkdir $PWD/${Sample}/Coverview/\n\t${params.coverview_path}/coverview -i ${finalBam} -b ${params.bedfile}.bed -c ${params.coverview_path}/config/config.txt -o ${PWD}/${Sample}/Coverview/${Sample}.coverview\n\tpython3 ${params.coverview_script_path} ${PWD}/${Sample}/Coverview/${Sample}.coverview_regions.txt ${PWD}/${Sample}/Coverview/${Sample}.coverview_regions.csv\n\tcp ${PWD}/${Sample}/Coverview/${Sample}.coverview_regions.csv ${PWD}/Coverview/${Sample}.coverview_regions.csv\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "finalBam",
            "finalBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "executor=\"local\"",
            "publishDir \"$PWD/${Sample}/Coverview/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "coverview_report": {
        "name_process": "coverview_report",
        "string_process": "\nprocess coverview_report {\n\terrorStrategy 'ignore'\n\texecutor=\"local\"\n\tinput:\n\t\tval (Sample)\n\toutput:\n\t\tval Sample\n\tscript:\n\t\"\"\"\n\tpython3.6 ${params.coverview_report_path} ${PWD}/Coverview/ ${PWD}/Final_Output/\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tpython3.6 ${params.coverview_report_path} ${PWD}/Coverview/ ${PWD}/Final_Output/\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "errorStrategy 'ignore'",
            "executor=\"local\""
        ],
        "when": "",
        "stub": ""
    },
    "combine_variants": {
        "name_process": "combine_variants",
        "string_process": "\nprocess combine_variants{\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy'\n\tpublishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.avinput'\n\tpublishDir \"$PWD/${Sample}/ANNOVAR/\", mode: 'copy', pattern: '*.hg19_multianno.csv'\n\t\n\tinput:\n\t\ttuple val (Sample), file(freebayesVcf), file(platypusVcf)\n\toutput:\n\t\ttuple val(Sample), file (\"*.combined.vcf\"),  file (\"*.hg19_multianno.csv\")\n\tscript:\n\t\"\"\"\n\tgrep \"^#\" ${PWD}/${Sample}/variants/${Sample}.freebayes.vcf > ${Sample}.freebayes.sorted.vcf\n\tgrep -v \"^#\" ${PWD}/${Sample}/variants/${Sample}.freebayes.vcf | sort -k1,1V -k2,2g >> ${Sample}.freebayes.sorted.vcf\n\t\n\tgrep \"^#\" ${PWD}/${Sample}/variants/${Sample}.platypus.vcf > ${Sample}.platypus.sorted.vcf\n\tgrep -v \"^#\" ${PWD}/${Sample}/variants/${Sample}.platypus.vcf | sort -k1,1V -k2,2g >> ${Sample}.platypus.sorted.vcf\n\t\n\tjava -jar ${params.GATK38_path} -T CombineVariants -R ${params.genome} --variant ${Sample}.freebayes.sorted.vcf --variant ${Sample}.platypus.sorted.vcf -o ${Sample}.combined.vcf -genotypeMergeOptions UNIQUIFY\n\t\n\tperl ${params.annovarLatest_path}/convert2annovar.pl -format vcf4 ${Sample}.combined.vcf  --outfile ${Sample}.combined.avinput --withzyg --includeinfo\n\t\n\tperl ${params.annovarLatest_path}/table_annovar.pl ${Sample}.combined.avinput --out ${Sample}.combined --remove --protocol refGene,cytoBand,cosmic84,popfreq_all_20150413,avsnp150,intervar_20180118,1000g2015aug_all --operation g,r,f,f,f,f,f --buildver hg19 --nastring '-1' --otherinfo --csvout --thread 10 ${params.annovarLatest_path}/humandb/ --xreffile ${params.annovarLatest_path}/example/gene_fullxref.txt\n\t\"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\t\"\"\"\n\tgrep \"^#\" ${PWD}/${Sample}/variants/${Sample}.freebayes.vcf > ${Sample}.freebayes.sorted.vcf\n\tgrep -v \"^#\" ${PWD}/${Sample}/variants/${Sample}.freebayes.vcf | sort -k1,1V -k2,2g >> ${Sample}.freebayes.sorted.vcf\n\t\n\tgrep \"^#\" ${PWD}/${Sample}/variants/${Sample}.platypus.vcf > ${Sample}.platypus.sorted.vcf\n\tgrep -v \"^#\" ${PWD}/${Sample}/variants/${Sample}.platypus.vcf | sort -k1,1V -k2,2g >> ${Sample}.platypus.sorted.vcf\n\t\n\tjava -jar ${params.GATK38_path} -T CombineVariants -R ${params.genome} --variant ${Sample}.freebayes.sorted.vcf --variant ${Sample}.platypus.sorted.vcf -o ${Sample}.combined.vcf -genotypeMergeOptions UNIQUIFY\n\t\n\tperl ${params.annovarLatest_path}/convert2annovar.pl -format vcf4 ${Sample}.combined.vcf  --outfile ${Sample}.combined.avinput --withzyg --includeinfo\n\t\n\tperl ${params.annovarLatest_path}/table_annovar.pl ${Sample}.combined.avinput --out ${Sample}.combined --remove --protocol refGene,cytoBand,cosmic84,popfreq_all_20150413,avsnp150,intervar_20180118,1000g2015aug_all --operation g,r,f,f,f,f,f --buildver hg19 --nastring '-1' --otherinfo --csvout --thread 10 ${params.annovarLatest_path}/humandb/ --xreffile ${params.annovarLatest_path}/example/gene_fullxref.txt\n\t\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "freebayesVcf",
            "platypusVcf"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy'",
            "publishDir \"$PWD/${Sample}/variants/\", mode: 'copy', pattern: '*.avinput'",
            "publishDir \"$PWD/${Sample}/ANNOVAR/\", mode: 'copy', pattern: '*.hg19_multianno.csv'"
        ],
        "when": "",
        "stub": ""
    },
    "cava": {
        "name_process": "cava",
        "string_process": "\nprocess cava {\n\tpublishDir \"$PWD/${Sample}/CAVA/\", mode: 'copy'\n\t\n\tinput:\n\t\ttuple val(Sample), file (somaticVcf), file (somaticseqMultianno), file(combinedVcf)\n\t\n\toutput:\n\t\ttuple val(Sample), file (\"*.cava.csv\")\n\tscript:\n\t\"\"\"\n\t${params.cava_path}/cava -c ${params.cava_path}/config.txt -t 10 -i $PWD/${Sample}/variants/${Sample}.somaticseq.vcf -o ${Sample}.somaticseq\n\t${params.cava_path}/cava -c ${params.cava_path}/config.txt -t 10 -i $PWD/${Sample}/variants/${Sample}.combined.vcf -o ${Sample}.combined\n\tpython3.6 ${params.cava_script_path} ${Sample}.somaticseq.txt ${Sample}.combined.txt ${Sample}.cava.csv\n\t\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\t\"\"\"\n\t${params.cava_path}/cava -c ${params.cava_path}/config.txt -t 10 -i $PWD/${Sample}/variants/${Sample}.somaticseq.vcf -o ${Sample}.somaticseq\n\t${params.cava_path}/cava -c ${params.cava_path}/config.txt -t 10 -i $PWD/${Sample}/variants/${Sample}.combined.vcf -o ${Sample}.combined\n\tpython3.6 ${params.cava_script_path} ${Sample}.somaticseq.txt ${Sample}.combined.txt ${Sample}.cava.csv\n\t\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "XCAVATOR"
        ],
        "tools_url": [
            "https://bio.tools/xcavator"
        ],
        "tools_dico": [
            {
                "name": "XCAVATOR",
                "uri": "https://bio.tools/xcavator",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Accurate detection and genotyping of copy number variants from second and third generation whole-genome sequencing experiments.",
                "homepage": "https://sourceforge.net/projects/xcavator/"
            }
        ],
        "inputs": [
            "Sample",
            "somaticVcf",
            "somaticseqMultianno",
            "combinedVcf"
        ],
        "nb_inputs": 4,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/CAVA/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "format_somaticseq": {
        "name_process": "format_somaticseq",
        "string_process": "\nprocess format_somaticseq {\n\tinput:\n\t\ttuple val (Sample), file(somaticseqVcf), file (multianno)\n\toutput:\n\t\tval Sample\n\tscript:\n\t\"\"\"\n\tpython3.6 ${params.format_somaticseq_script} ${PWD}/${Sample}/ANNOVAR/${Sample}.somaticseq.hg19_multianno.csv ${PWD}/${Sample}/Annovar_Modified/${Sample}.somaticseq.csv\n\t\"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "\t\"\"\"\n\tpython3.6 ${params.format_somaticseq_script} ${PWD}/${Sample}/ANNOVAR/${Sample}.somaticseq.hg19_multianno.csv ${PWD}/${Sample}/Annovar_Modified/${Sample}.somaticseq.csv\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "somaticseqVcf",
            "multianno"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "format_combined": {
        "name_process": "format_combined",
        "string_process": "\nprocess format_combined {\n\tinput:\n\t\ttuple val(Sample), file (combinedVcf),  file (hg19_multianno)\n\toutput:\n\t\tval Sample\n\tscript:\n\t\"\"\"\n\tpython3.6 ${params.format_combined_script} ${PWD}/${Sample}/ANNOVAR/${hg19_multianno} ${PWD}/${Sample}/Annovar_Modified/${Sample}.combined.csv\n\t\"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "\t\"\"\"\n\tpython3.6 ${params.format_combined_script} ${PWD}/${Sample}/ANNOVAR/${hg19_multianno} ${PWD}/${Sample}/Annovar_Modified/${Sample}.combined.csv\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "combinedVcf",
            "hg19_multianno"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "merge_csv": {
        "name_process": "merge_csv",
        "string_process": "\nprocess merge_csv {\n\tinput:\n\t\ttuple val (Sample), file (cava_csv)\n\toutput:\n\t\tval Sample\n\tscript:\n\t\"\"\"\n\n\tpython3.6 ${params.merge_csvs_script} ${Sample} ${PWD}/${Sample}/Annovar_Modified/ ${PWD}/Final_Output/${Sample}/${Sample}.xlsx ${PWD}/${Sample}/CAVA/ ${PWD}/${Sample}/Coverview/${Sample}.coverview_regions.csv\n\t\"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\t\"\"\"\n\n\tpython3.6 ${params.merge_csvs_script} ${Sample} ${PWD}/${Sample}/Annovar_Modified/ ${PWD}/Final_Output/${Sample}/${Sample}.xlsx ${PWD}/${Sample}/CAVA/ ${PWD}/${Sample}/Coverview/${Sample}.coverview_regions.csv\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "cava_csv"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Final_Output": {
        "name_process": "Final_Output",
        "string_process": "\nprocess Final_Output {\n\tinput:\n\t\ttuple val (Sample), file (\"*\")\n\toutput:\n\t\tval Sample\n\tscript:\n\t\"\"\"\n\tpython3.6 ${params.coveragePlot_script} ${Sample} $PWD/${Sample}/coverage/${Sample}.counts.bed $PWD/${Sample}/coverage/\n\tcp ${PWD}/${Sample}/coverage/${Sample}.Low_Coverage.png ${PWD}/Final_Output/${Sample}/\n\t\"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\t\"\"\"\n\tpython3.6 ${params.coveragePlot_script} ${Sample} $PWD/${Sample}/coverage/${Sample}.counts.bed $PWD/${Sample}/coverage/\n\tcp ${PWD}/${Sample}/coverage/${Sample}.Low_Coverage.png ${PWD}/Final_Output/${Sample}/\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "remove_files": {
        "name_process": "remove_files",
        "string_process": "\nprocess remove_files{\n\tinput:\n\t\tval (Sample)\n\tscript:\n\t\"\"\"\n\trm -rf ${PWD}/${Sample}/\n\trm -rf ${PWD}/Coverview/\n\t\"\"\"\n}",
        "nb_lignes_process": 8,
        "string_script": "\t\"\"\"\n\trm -rf ${PWD}/${Sample}/\n\trm -rf ${PWD}/Coverview/\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "trimming_trimmomatic": {
        "name_process": "trimming_trimmomatic",
        "string_process": "\nprocess trimming_trimmomatic {\n\tmaxForks 10\n\tpublishDir \"$PWD/${Sample}/trimmed\", mode: 'copy'\n\tinput:\n\t\tval Sample\n\toutput:\n\t\ttuple val (Sample), file(\"*.fq.gz\")\n\tscript:\n\t\"\"\"\n\ttrimmomatic PE \\\n\t${params.sequences}/${Sample}*_R1_*.fastq.gz ${params.sequences}/${Sample}*_R2_*.fastq.gz \\\n\t-baseout ${Sample}.fq.gz \\\n\tILLUMINACLIP:${params.adapters}:2:30:10:2:keepBothReads \\\n\tLEADING:3 SLIDINGWINDOW:4:15 MINLEN:40\n\t\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\t\"\"\"\n\ttrimmomatic PE \\\n\t${params.sequences}/${Sample}*_R1_*.fastq.gz ${params.sequences}/${Sample}*_R2_*.fastq.gz \\\n\t-baseout ${Sample}.fq.gz \\\n\tILLUMINACLIP:${params.adapters}:2:30:10:2:keepBothReads \\\n\tLEADING:3 SLIDINGWINDOW:4:15 MINLEN:40\n\t\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Trimmomatic"
        ],
        "tools_url": [
            "https://bio.tools/trimmomatic"
        ],
        "tools_dico": [
            {
                "name": "Trimmomatic",
                "uri": "https://bio.tools/trimmomatic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A flexible read trimming tool for Illumina NGS data",
                "homepage": "http://www.usadellab.org/cms/index.php?page=trimmomatic"
            }
        ],
        "inputs": [
            "Sample"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "maxForks 10",
            "publishDir \"$PWD/${Sample}/trimmed\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pair_assembly_flash": {
        "name_process": "pair_assembly_flash",
        "string_process": "\nprocess pair_assembly_flash {\n\tmaxForks 20\n\tpublishDir \"$PWD/${Sample}/flash\", mode: 'copy'\n\tinput:\n\t\ttuple val (Sample), file(trimmedFiles)\n\toutput:\n\t\ttuple val (Sample), file('*')\n\tscript:\n\t\"\"\"\n\t${params.flash_path} ${trimmedFiles[0]} ${trimmedFiles[2]} --cap-mismatch-quals -O -M 250 -o ${Sample} \n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\t${params.flash_path} ${trimmedFiles[0]} ${trimmedFiles[2]} --cap-mismatch-quals -O -M 250 -o ${Sample} \n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "trimmedFiles"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "maxForks 20",
            "publishDir \"$PWD/${Sample}/flash\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "samtools_sort": {
        "name_process": "samtools_sort",
        "string_process": "\nprocess samtools_sort{\n\tmaxForks 20\n\tpublishDir \"$PWD/${Sample}/Alignment\", mode: 'copy', pattern: '*.sorted.bam'\n\tpublishDir \"$PWD/${Sample}/Alignment\", mode: 'copy', pattern: '*.bam.bai'\n\tpublishDir \"$PWD/${Sample}/Alignment\", mode: 'copy', pattern: '*.bed'\n\tpublishDir \"$PWD/Final_Output/${Sample}/\", mode: 'copy', pattern: '*.sorted.bam'\n\tpublishDir \"$PWD/Final_Output/${Sample}\", mode: 'copy', pattern: '*.bam.bai'\n\n\tinput:\n\t\ttuple val (Sample), file(samFile)\n\toutput:\n\t\ttuple val (Sample), file (\"*.sorted.bam\"), file (\"*.sorted.bam.bai\")\n\t\n\tscript:\n\t\"\"\"\n\t${params.samtools} view -b ${samFile} > ${Sample}.bam\n\t${params.samtools} sort ${Sample}.bam > ${Sample}.sorted.bam\n\t${params.samtools} index ${Sample}.sorted.bam > ${Sample}.sorted.bam.bai\n\t${params.bedtools} bamtobed -i ${Sample}.sorted.bam > ${Sample}.bed\n\t\"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\t\"\"\"\n\t${params.samtools} view -b ${samFile} > ${Sample}.bam\n\t${params.samtools} sort ${Sample}.bam > ${Sample}.sorted.bam\n\t${params.samtools} index ${Sample}.sorted.bam > ${Sample}.sorted.bam.bai\n\t${params.bedtools} bamtobed -i ${Sample}.sorted.bam > ${Sample}.bed\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "samFile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "maxForks 20",
            "publishDir \"$PWD/${Sample}/Alignment\", mode: 'copy', pattern: '*.sorted.bam'",
            "publishDir \"$PWD/${Sample}/Alignment\", mode: 'copy', pattern: '*.bam.bai'",
            "publishDir \"$PWD/${Sample}/Alignment\", mode: 'copy', pattern: '*.bed'",
            "publishDir \"$PWD/Final_Output/${Sample}/\", mode: 'copy', pattern: '*.sorted.bam'",
            "publishDir \"$PWD/Final_Output/${Sample}\", mode: 'copy', pattern: '*.bam.bai'"
        ],
        "when": "",
        "stub": ""
    },
    "vardict_run_amplicon": {
        "name_process": "vardict_run_amplicon",
        "string_process": "\nprocess vardict_run_amplicon{\n\tmaxForks 15\n\tpublishDir \"$PWD/${Sample}/VariantCalling/Vardict/\", mode: 'copy'\n\tinput:\n\t\ttuple val (Sample), file (sortedBam), file (sortedBamBai)\n\toutput:\n\t\ttuple val (Sample), file (\"*.hg19_multianno.csv\")\n\tscript:\n\t\"\"\"\n\tVarDict -G ${params.genome} -f 0.01 -N ${Sample} -b ${sortedBam} -c 1 -S 2 -E 3 -g 4 ${params.bedfile}.bed | sed '1d' | ${params.vardict_path}/teststrandbias.R | ${params.vardict_path}/var2vcf_valid.pl -N ${Sample} -E -f 0.01 > ${Sample}_vardict.vcf\n\tperl ${params.annovar2_path}/convert2annovar.pl -format vcf4 ${Sample}_vardict.vcf --outfile ${Sample}.avinput --withzyg --includeinfo\n\tperl ${params.annovar2_path}/table_annovar.pl ${Sample}.avinput --out ${Sample}_final --remove --protocol refGene,cosmic84,exac03 --operation g,f,f --buildver hg19 --nastring '-1' --otherinfo --csvout ${params.annovar2_path}/humandb/\n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\t\"\"\"\n\tVarDict -G ${params.genome} -f 0.01 -N ${Sample} -b ${sortedBam} -c 1 -S 2 -E 3 -g 4 ${params.bedfile}.bed | sed '1d' | ${params.vardict_path}/teststrandbias.R | ${params.vardict_path}/var2vcf_valid.pl -N ${Sample} -E -f 0.01 > ${Sample}_vardict.vcf\n\tperl ${params.annovar2_path}/convert2annovar.pl -format vcf4 ${Sample}_vardict.vcf --outfile ${Sample}.avinput --withzyg --includeinfo\n\tperl ${params.annovar2_path}/table_annovar.pl ${Sample}.avinput --out ${Sample}_final --remove --protocol refGene,cosmic84,exac03 --operation g,f,f --buildver hg19 --nastring '-1' --otherinfo --csvout ${params.annovar2_path}/humandb/\n\t\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "sortedBam",
            "sortedBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "maxForks 15",
            "publishDir \"$PWD/${Sample}/VariantCalling/Vardict/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "lofreq_run_amplicon": {
        "name_process": "lofreq_run_amplicon",
        "string_process": "\nprocess lofreq_run_amplicon{\n\tmaxForks 15\n\tpublishDir \"$PWD/${Sample}/VariantCalling/Lofreq/\", mode: 'copy'\n\tinput:\n\t\ttuple val (Sample), file (sortedBam), file (sortedBamBai)\n\toutput:\n\t\ttuple val (Sample), file (\"*.hg19_multianno.csv\")\n\t\n\tscript:\n\t\"\"\"\n\t${params.lofreq_path} viterbi -f ${params.genome} -o ${Sample}.lofreq.pre.bam ${sortedBam}\n\tsamtools sort ${Sample}.lofreq.pre.bam > ${Sample}.lofreq.bam\n\t${params.lofreq_path} call -b dynamic -C 50 -a 0.00005 -q 30 -Q 30 -m 50 -f ${params.genome} -l ${params.bedfile}.bed -o ${Sample}.lofreq.vcf ${Sample}.lofreq.bam\n\t${params.lofreq_path} filter -a 0.01 -i ${Sample}.lofreq.vcf -o ${Sample}.lofreq.filtered.vcf\n\tperl ${params.annovar2_path}/convert2annovar.pl -format vcf4 ${Sample}.lofreq.filtered.vcf --outfile ${Sample}.avinput --withzyg --includeinfo\n\tperl ${params.annovar2_path}/table_annovar.pl ${Sample}.avinput --out ${Sample}_final --remove --protocol refGene,cosmic84,exac03 --operation g,f,f --buildver hg19 --nastring '-1' --otherinfo --csvout ${params.annovar2_path}/humandb/\n\t\"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\t\"\"\"\n\t${params.lofreq_path} viterbi -f ${params.genome} -o ${Sample}.lofreq.pre.bam ${sortedBam}\n\tsamtools sort ${Sample}.lofreq.pre.bam > ${Sample}.lofreq.bam\n\t${params.lofreq_path} call -b dynamic -C 50 -a 0.00005 -q 30 -Q 30 -m 50 -f ${params.genome} -l ${params.bedfile}.bed -o ${Sample}.lofreq.vcf ${Sample}.lofreq.bam\n\t${params.lofreq_path} filter -a 0.01 -i ${Sample}.lofreq.vcf -o ${Sample}.lofreq.filtered.vcf\n\tperl ${params.annovar2_path}/convert2annovar.pl -format vcf4 ${Sample}.lofreq.filtered.vcf --outfile ${Sample}.avinput --withzyg --includeinfo\n\tperl ${params.annovar2_path}/table_annovar.pl ${Sample}.avinput --out ${Sample}_final --remove --protocol refGene,cosmic84,exac03 --operation g,f,f --buildver hg19 --nastring '-1' --otherinfo --csvout ${params.annovar2_path}/humandb/\n\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "Sample",
            "sortedBam",
            "sortedBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "maxForks 15",
            "publishDir \"$PWD/${Sample}/VariantCalling/Lofreq/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mutect_run_amplicon": {
        "name_process": "mutect_run_amplicon",
        "string_process": "\nprocess mutect_run_amplicon{\n\tmaxForks 15\n\tpublishDir \"$PWD/${Sample}/VariantCalling/Mutect2/\", mode: 'copy'\n\tinput:\n\t\ttuple val (Sample), file (sortedBam), file (sortedBamBai)\n\toutput:\n\t\ttuple val (Sample), file (\"*.hg19_multianno.csv\")\n\t\t\n\tscript:\n\t\"\"\"\n\tjava -Xmx10G -jar ${params.GATK38_path} -T MuTect2 -R ${params.genome} -I:tumor ${PWD}/${Sample}/Alignment/${sortedBam} -o ${Sample}_mutect.vcf -L ${params.bedfile}.bed\n\tperl ${params.annovar2_path}/convert2annovar.pl -format vcf4 ${Sample}_mutect.vcf --outfile ${Sample}.avinput --withzyg --includeinfo\n\tperl ${params.annovar2_path}/table_annovar.pl ${Sample}.avinput --out ${Sample}_final --remove --protocol refGene,cosmic84,exac03 --operation g,f,f --buildver hg19 --nastring '-1' --otherinfo --csvout ${params.annovar2_path}/humandb/\n\t\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\t\"\"\"\n\tjava -Xmx10G -jar ${params.GATK38_path} -T MuTect2 -R ${params.genome} -I:tumor ${PWD}/${Sample}/Alignment/${sortedBam} -o ${Sample}_mutect.vcf -L ${params.bedfile}.bed\n\tperl ${params.annovar2_path}/convert2annovar.pl -format vcf4 ${Sample}_mutect.vcf --outfile ${Sample}.avinput --withzyg --includeinfo\n\tperl ${params.annovar2_path}/table_annovar.pl ${Sample}.avinput --out ${Sample}_final --remove --protocol refGene,cosmic84,exac03 --operation g,f,f --buildver hg19 --nastring '-1' --otherinfo --csvout ${params.annovar2_path}/humandb/\n\t\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "sortedBam",
            "sortedBamBai"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "maxForks 15",
            "publishDir \"$PWD/${Sample}/VariantCalling/Mutect2/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "format_VardictOutput_amplicon": {
        "name_process": "format_VardictOutput_amplicon",
        "string_process": "\nprocess format_VardictOutput_amplicon{\n\tpublishDir \"$PWD/${Sample}/VariantCalling/\", mode: 'copy'\n\tinput:\n\t\ttuple val (Sample), file (multiannoFile)\n\toutput:\n\t\tval (Sample)\n\tscript:\n\t\"\"\"\n\tpython3 ${params.formatVardict_script_path} ${multiannoFile} ${Sample} ${PWD}/${Sample}/VariantCalling/\n\t\"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\t\"\"\"\n\tpython3 ${params.formatVardict_script_path} ${multiannoFile} ${Sample} ${PWD}/${Sample}/VariantCalling/\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "multiannoFile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/VariantCalling/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "format_MutectOutput_amplicon": {
        "name_process": "format_MutectOutput_amplicon",
        "string_process": "\nprocess format_MutectOutput_amplicon{\n\tpublishDir \"$PWD/${Sample}/VariantCalling/\", mode: 'copy'\n\tinput:\n\t\ttuple val (Sample), file (multiannoFile)\n\toutput:\n\t\tval (Sample)\n\tscript:\n\t\"\"\"\n\tpython3 ${params.formatMutect_script_path} ${multiannoFile} ${Sample} ${PWD}/${Sample}/VariantCalling/\n\t\"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\t\"\"\"\n\tpython3 ${params.formatMutect_script_path} ${multiannoFile} ${Sample} ${PWD}/${Sample}/VariantCalling/\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "multiannoFile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "publishDir \"$PWD/${Sample}/VariantCalling/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "format_LofreqOutput_amplicon": {
        "name_process": "format_LofreqOutput_amplicon",
        "string_process": "\nprocess format_LofreqOutput_amplicon{\n\tmaxForks 20\n\tpublishDir \"$PWD/${Sample}/VariantCalling/\", mode: 'copy'\n\tinput:\n\t\ttuple val (Sample), file (multiannoFile)\n\toutput:\n\t\tval (Sample)\n\tscript:\n\t\"\"\"\n\tpython3 ${params.formatLofreq_script_path} ${multiannoFile} ${Sample} ${PWD}/${Sample}/VariantCalling/\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tpython3 ${params.formatLofreq_script_path} ${multiannoFile} ${Sample} ${PWD}/${Sample}/VariantCalling/\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample",
            "multiannoFile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "maxForks 20",
            "publishDir \"$PWD/${Sample}/VariantCalling/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "combine_output_amplicon": {
        "name_process": "combine_output_amplicon",
        "string_process": "\nprocess combine_output_amplicon{\n\tmaxForks 20\n\tinput:\n\t\tval (Sample)\n\toutput:\n\t\tval (Sample)\n\tscript:\n\t\"\"\"\n\tpython3 ${params.combinedCsvFormat_script_path} ${PWD}/${Sample}/VariantCalling/${Sample}_vardict.csv ${PWD}/${Sample}/VariantCalling/${Sample}_mutect.csv ${PWD}/${Sample}/VariantCalling/${Sample}_lofreq.csv ${PWD}/${Sample}/VariantCalling/ ${Sample}\n\t\n\tpython3 ${params.KDMdb_script_path} ${PWD}/${Sample}/VariantCalling/${Sample}_combined.csv ${PWD}/${Sample}/VariantCalling/ ${Sample}\n\t\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\t\"\"\"\n\tpython3 ${params.combinedCsvFormat_script_path} ${PWD}/${Sample}/VariantCalling/${Sample}_vardict.csv ${PWD}/${Sample}/VariantCalling/${Sample}_mutect.csv ${PWD}/${Sample}/VariantCalling/${Sample}_lofreq.csv ${PWD}/${Sample}/VariantCalling/ ${Sample}\n\t\n\tpython3 ${params.KDMdb_script_path} ${PWD}/${Sample}/VariantCalling/${Sample}_combined.csv ${PWD}/${Sample}/VariantCalling/ ${Sample}\n\t\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "maxForks 20"
        ],
        "when": "",
        "stub": ""
    },
    "merge_csvs_amplicon": {
        "name_process": "merge_csvs_amplicon",
        "string_process": "\nprocess merge_csvs_amplicon{\n\terrorStrategy 'ignore'\n\tmaxForks 20\n\tinput:\n\t\tval Sample\n\toutput:\n\t\tval Sample\n\tscript:\n\t\"\"\"\n\tpython3 ${params.mergeAmpliconCsv_path} ${Sample} ${PWD}\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tpython3 ${params.mergeAmpliconCsv_path} ${Sample} ${PWD}\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Sample"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "tmc-hematopath__smMIPS-Detection-Pipeline",
        "directive": [
            "errorStrategy 'ignore'",
            "maxForks 20"
        ],
        "when": "",
        "stub": ""
    }
}
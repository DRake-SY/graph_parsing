{
    "kraken2": {
        "name_process": "kraken2",
        "string_process": "\nprocess kraken2 {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/kraken2/\" , mode: 'copy'\n\n    input:\n    tuple val(id), path(reads)\n    path kraken2_db\n    \n    output:\n    tuple val(id), path(\"${id}.kraken2.report\"), emit: report\n    tuple val(id), path(\"${id}.kraken2.mpa\"), emit: mpa\n\n    script:\n    input = params.single_end ? \"\\\"$reads\\\"\" :  \"--paired \\\"${reads[0]}\\\" \\\"${reads[1]}\\\"\"\n    report_zero_counts = params.report_zero_counts ? \"--report-zero-counts\" : \"\"\n    \"\"\"\n    kraken2 \\\n        --db $kraken2_db \\\n        --threads ${task.cpus} \\\n        $report_zero_counts \\\n        --report ${id}.kraken2.report \\\n        $input > /dev/null\n\n    kreport2mpa.py \\\n        -r ${id}.kraken2.report \\\n        -o ${id}.kraken2.mpa \\\n        --display-header\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    input = params.single_end ? \"\\\"$reads\\\"\" :  \"--paired \\\"${reads[0]}\\\" \\\"${reads[1]}\\\"\"\n    report_zero_counts = params.report_zero_counts ? \"--report-zero-counts\" : \"\"\n    \"\"\"\n    kraken2 \\\n        --db $kraken2_db \\\n        --threads ${task.cpus} \\\n        $report_zero_counts \\\n        --report ${id}.kraken2.report \\\n        $input > /dev/null\n\n    kreport2mpa.py \\\n        -r ${id}.kraken2.report \\\n        -o ${id}.kraken2.mpa \\\n        --display-header\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "wossinput",
            "kraken2",
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/wossinput",
            "https://bio.tools/kraken2",
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            },
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "id",
            "reads",
            "kraken2_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__kraken2",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/kraken2/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bracken": {
        "name_process": "bracken",
        "string_process": "\nprocess bracken {\n    tag \"${level}-${id}\"\n\n    publishDir \"${params.outdir}/bracken/${id}\" , mode: 'copy'\n\n    input:\n    tuple val(level), val(id), path(kraken2_report)\n    path kraken2_db\n\n    output:\n    tuple val(level), path(\"${id}.${level}.bracken\"), emit: bracken\n    tuple val(level), path(\"${id}.${level}.bracken.report\"), emit: report\n    tuple val(level), path(\"${id}.${level}.bracken.mpa\"), emit: mpa\n    \n    script:\n    \"\"\"\n    bracken \\\n        -d $kraken2_db \\\n        -r ${params.read_len} \\\n        -l $level \\\n        -i $kraken2_report \\\n        -o ${id}.${level}.bracken \\\n        -w ${id}.${level}.bracken.report\n\n    kreport2mpa.py \\\n        -r ${id}.${level}.bracken.report \\\n        -o ${id}.${level}.bracken.mpa \\\n        --display-header\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    bracken \\\n        -d $kraken2_db \\\n        -r ${params.read_len} \\\n        -l $level \\\n        -i $kraken2_report \\\n        -o ${id}.${level}.bracken \\\n        -w ${id}.${level}.bracken.report\n\n    kreport2mpa.py \\\n        -r ${id}.${level}.bracken.report \\\n        -o ${id}.${level}.bracken.mpa \\\n        --display-header\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "Bracken"
        ],
        "tools_url": [
            "https://bio.tools/bracken"
        ],
        "tools_dico": [
            {
                "name": "Bracken",
                "uri": "https://bio.tools/bracken",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
                "homepage": "https://ccb.jhu.edu/software/bracken/"
            }
        ],
        "inputs": [
            "level",
            "id",
            "kraken2_report",
            "kraken2_db"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__kraken2",
        "directive": [
            "tag \"${level}-${id}\"",
            "publishDir \"${params.outdir}/bracken/${id}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "combine_kraken2_reports": {
        "name_process": "combine_kraken2_reports",
        "string_process": "\nprocess combine_kraken2_reports {\n\n    publishDir \"${params.outdir}\" , mode: 'copy'\n\n    input:\n    path(kraken2_reports)\n\n    output:\n    path \"combined.kraken2.report\"\n    \n    script:\n    \"\"\"\n    combine_kreports.py \\\n        -r ${kraken2_reports} \\\n        -o combined.kraken2.report\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    combine_kreports.py \\\n        -r ${kraken2_reports} \\\n        -o combined.kraken2.report\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kraken2_reports"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__kraken2",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "combine_kraken2_mpa": {
        "name_process": "combine_kraken2_mpa",
        "string_process": "\nprocess combine_kraken2_mpa {\n\n    publishDir \"${params.outdir}\" , mode: 'copy'\n\n    input:\n    path(kraken2_mpa)\n\n    output:\n    path \"combined.kraken2.mpa\"\n    \n    script:\n    \"\"\"\n    combine_mpa.py \\\n        -i ${kraken2_mpa} \\\n        -o combined.kraken2.mpa\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    combine_mpa.py \\\n        -i ${kraken2_mpa} \\\n        -o combined.kraken2.mpa\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kraken2_mpa"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__kraken2",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "combine_bracken": {
        "name_process": "combine_bracken",
        "string_process": "\nprocess combine_bracken {\n    tag \"${level}\"\n\n    publishDir \"${params.outdir}/combined_bracken\" , mode: 'copy'\n\n    input:\n    tuple val(level), path(bracken)\n\n    output:\n    path \"combined.${level}.bracken\"\n    \n    script:\n    \"\"\"\n    python /usr/local/bracken/analysis_scripts/combine_bracken_outputs.py \\\n        --files $bracken \\\n        --output combined.${level}.bracken\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    python /usr/local/bracken/analysis_scripts/combine_bracken_outputs.py \\\n        --files $bracken \\\n        --output combined.${level}.bracken\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "level",
            "bracken"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__kraken2",
        "directive": [
            "tag \"${level}\"",
            "publishDir \"${params.outdir}/combined_bracken\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "combine_bracken_reports": {
        "name_process": "combine_bracken_reports",
        "string_process": "\nprocess combine_bracken_reports {\n    tag \"${level}\"\n\n    publishDir \"${params.outdir}/combined_bracken_report\" , mode: 'copy'\n\n    input:\n    tuple val(level), path(bracken_reports)\n\n    output:\n    path \"combined.${level}.bracken.report\"\n    \n    script:\n    \"\"\"\n    combine_kreports.py \\\n        -r ${bracken_reports} \\\n        -o combined.${level}.bracken.report\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    combine_kreports.py \\\n        -r ${bracken_reports} \\\n        -o combined.${level}.bracken.report\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "level",
            "bracken_reports"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__kraken2",
        "directive": [
            "tag \"${level}\"",
            "publishDir \"${params.outdir}/combined_bracken_report\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "combine_bracken_mpa": {
        "name_process": "combine_bracken_mpa",
        "string_process": "\nprocess combine_bracken_mpa {\n    tag \"${level}\"\n\n    publishDir \"${params.outdir}/combined_bracken_mpa\" , mode: 'copy'\n\n    input:\n    tuple val(level), path(bracken_mpa)\n\n    output:\n    path \"combined.${level}.bracken.mpa\"\n    \n    script:\n    \"\"\"\n    combine_mpa.py \\\n        -i ${bracken_mpa} \\\n        -o combined.${level}.bracken.mpa\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    combine_mpa.py \\\n        -i ${bracken_mpa} \\\n        -o combined.${level}.bracken.mpa\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "level",
            "bracken_mpa"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__kraken2",
        "directive": [
            "tag \"${level}\"",
            "publishDir \"${params.outdir}/combined_bracken_mpa\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "deinterleave": {
        "name_process": "deinterleave",
        "string_process": "\nprocess deinterleave {      \n    tag \"${id}\"\n\n    input:\n    tuple val(id), path(reads)\n\n    output:\n    tuple val(id), path(\"deint*.fastq.gz\"), emit: reads\n\n    script:\n    task_memory_GB = task.memory.toGiga()\n    \"\"\"\n    reformat.sh \\\n        -Xmx${task_memory_GB}g \\\n        in=$reads \\\n        out1=deint_1.fastq.gz \\\n        out2=deint_2.fastq.gz \\\n        t=1\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    task_memory_GB = task.memory.toGiga()\n    \"\"\"\n    reformat.sh \\\n        -Xmx${task_memory_GB}g \\\n        in=$reads \\\n        out1=deint_1.fastq.gz \\\n        out2=deint_2.fastq.gz \\\n        t=1\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__kraken2",
        "directive": [
            "tag \"${id}\""
        ],
        "when": "",
        "stub": ""
    },
    "raw_reads_stats": {
        "name_process": "raw_reads_stats",
        "string_process": "\nprocess raw_reads_stats {   \n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/raw_reads_stats/${id}\" , mode: 'copy'\n\n    input:\n    tuple val(id), path(reads)\n\n    output:\n    path \"*hist.txt\"\n\n    script:\n    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    \"\"\"\n    bbduk.sh \\\n        -Xmx${task_memory_GB}g \\\n        $input \\\n        bhist=bhist.txt \\\n        qhist=qhist.txt \\\n        gchist=gchist.txt \\\n        aqhist=aqhist.txt \\\n        lhist=lhist.txt \\\n        gcbins=auto \\\n        threads=${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    \"\"\"\n    bbduk.sh \\\n        -Xmx${task_memory_GB}g \\\n        $input \\\n        bhist=bhist.txt \\\n        qhist=qhist.txt \\\n        gchist=gchist.txt \\\n        aqhist=aqhist.txt \\\n        lhist=lhist.txt \\\n        gcbins=auto \\\n        threads=${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "wossinput"
        ],
        "tools_url": [
            "https://bio.tools/wossinput"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            }
        ],
        "inputs": [
            "id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__kraken2",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/raw_reads_stats/${id}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
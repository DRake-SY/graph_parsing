{
    "splitLetters": {
        "name_process": "splitLetters",
        "string_process": "process splitLetters {\n\n    output:\n    file 'chunk_*' into letters\n\n    '''\n    printf 'Hola' | split -b 1 - chunk_\n    '''\n}",
        "nb_lignes_process": 7,
        "string_script": "'''\n    printf 'Hola' | split -b 1 - chunk_\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "letters"
        ],
        "nb_outputs": 1,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "convertLetters": {
        "name_process": "convertLetters",
        "string_process": "\nprocess convertLetters{\n    input:\n    file y from letters.flatten()\n\n    output:\n    stdout into result\n\n    \"\"\"\n    cat $y | tr '[a-z]' '[A-Z]'\n    \"\"\"\n\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\n    cat $y | tr '[a-z]' '[A-Z]'\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "letters"
        ],
        "nb_inputs": 1,
        "outputs": [
            "result"
        ],
        "nb_outputs": 1,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "index": {
        "name_process": "index",
        "string_process": "\nprocess index {\n             \n\n    input:\n    path transcriptome from params.transcriptome\n\n    output:\n    path 'index' into index_ch\n\n    script:\n    \"\"\"\n    salmon index --threads $task.cpus -t $transcriptome -i index\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    salmon index --threads $task.cpus -t $transcriptome -i index\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "params"
        ],
        "nb_inputs": 1,
        "outputs": [
            "index_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "quant": {
        "name_process": "quant",
        "string_process": "\nprocess quant {\n    tag \"$pair_id\"\n     \n    input:\n    file index from index_ch\n    set pair_id, file(reads) from read_pairs_ch\n \n    output:\n    file(pair_id) into quant_ch\n \n    script:\n    \"\"\"\n    salmon quant --threads $task.cpus --libType=U -i index -1 ${reads[0]} -2 ${reads[1]} -o $pair_id\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    salmon quant --threads $task.cpus --libType=U -i index -1 ${reads[0]} -2 ${reads[1]} -o $pair_id\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "index_ch",
            "read_pairs_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "quant_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "tag \"$pair_id\""
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n\n    tag \"$sample_id\"\n    publishDir \"${params.outdir}/fastqc_out\"\n    \n    input:\n    tuple val(sample_id), file(reads_file) from reads_ch\n\n    output:\n    file(\"fastqc_${sample_id}_logs\") into fastqc_ch\n\n    script:\n    \"\"\"\n    mkdir fastqc_${sample_id}_logs\n    fastqc -o fastqc_${sample_id}_logs -f fastq -q ${reads_file}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    mkdir fastqc_${sample_id}_logs\n    fastqc -o fastqc_${sample_id}_logs -f fastq -q ${reads_file}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "reads_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/fastqc_out\""
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir params.outdir, mode:'copy'\n       \n    input:\n    path '*' from quant_ch.mix(fastqc_ch).collect() \n\n    output:\n    'multiqc_report.html'\n     \n    script:\n    \"\"\"\n\n    multiqc . \n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n\n    multiqc . \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "quant_ch",
            "fastqc_ch"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "publishDir params.outdir, mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bbduk": {
        "name_process": "bbduk",
        "string_process": "\nprocess bbduk{\n\n    tag \"$sample_id\"\n    publishDir \"${params.outdir}/bbduk_out\", mode:'copy'\n\n    input:\n    tuple val(sample_id), file(reads_file) from reads_ch2\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_clean_{1,2}.fastq\") into skesa_input\n    file \"${sample_id}.stats.txt\"\n\n    script:\n    \"\"\"\n    bbduk.sh -Xmx1g in=${reads_file[0]} in2=${reads_file[1]} out=${sample_id}_clean_1.fastq out2=${sample_id}_clean_2.fastq qtrim=rl trimq=30 minlength=100\\\n    stats=${sample_id}.stats.txt\n    \n    \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    bbduk.sh -Xmx1g in=${reads_file[0]} in2=${reads_file[1]} out=${sample_id}_clean_1.fastq out2=${sample_id}_clean_2.fastq qtrim=rl trimq=30 minlength=100\\\n    stats=${sample_id}.stats.txt\n    \n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads_ch2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "skesa_input"
        ],
        "nb_outputs": 1,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/bbduk_out\", mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "spades": {
        "name_process": "spades",
        "string_process": "\nprocess spades{\n    container 'pegi3s/spades'\n\n    tag \"$sampe_id\"\n    publishDir \"${params.outdir}/spades_out\", mode:'copy'\n                            \n    errorStrategy 'retry'\n\n    input:\n    tuple val(sample_id),file(reads_file) from skesa_input\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_scaffolds.fasta\") into spade_output,spade_output_for_prod\n     \n    script:\n    \"\"\"\n    spades.py -k 21,33,55,77,99 --careful --pe1-1 ${reads_file[0]} --pe1-2 ${reads_file[1]}  -o ${sample_id} \n    cp ${sample_id}/scaffolds.fasta ${sample_id}_scaffolds.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    spades.py -k 21,33,55,77,99 --careful --pe1-1 ${reads_file[0]} --pe1-2 ${reads_file[1]}  -o ${sample_id} \n    cp ${sample_id}/scaffolds.fasta ${sample_id}_scaffolds.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "skesa_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "spade_output",
            "spade_output_for_prod"
        ],
        "nb_outputs": 2,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "container 'pegi3s/spades'",
            "tag \"$sampe_id\"",
            "publishDir \"${params.outdir}/spades_out\", mode:'copy'",
            "errorStrategy 'retry'"
        ],
        "when": "",
        "stub": ""
    },
    "makeblastdb": {
        "name_process": "makeblastdb",
        "string_process": "\nprocess makeblastdb{\n    container 'my-image-spades'\n\n    tag \"$sample_id\"\n    publishDir \"${params.outdir}/blast_db\",mode:'copy'\n\n    input:\n                                                       \n    set val(sample_id), file(assembly) from spade_output_for_prod\n\n    output:\n    val \"${sample_id}_db\" into blastdb_name\n    path \"${sample_id}_dir\" into blastdb_dir\n\n    when:\n    assembly.size() > 0\n    \n    script:\n    \"\"\"\n    mkdir ${sample_id}_dir\n    makeblastdb -in ${assembly} -dbtype nucl -out ${sample_id}_dir/${sample_id}_db\n    \"\"\"\n\n\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    mkdir ${sample_id}_dir\n    makeblastdb -in ${assembly} -dbtype nucl -out ${sample_id}_dir/${sample_id}_db\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "spade_output_for_prod"
        ],
        "nb_inputs": 1,
        "outputs": [
            "blastdb_name",
            "blastdb_dir"
        ],
        "nb_outputs": 2,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "container 'my-image-spades'",
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/blast_db\",mode:'copy'"
        ],
        "when": "assembly.size() > 0",
        "stub": ""
    },
    "blastrun": {
        "name_process": "blastrun",
        "string_process": "\nprocess blastrun{\n    container 'my-image-spades'\n\n    tag \"$sample_id\"\n    publishDir \"${params.outdir}/blast_out_files\",mode:'copy'\n    \n    input:\n    path cpmp from params.references1\n    val sample_id_db from blastdb_name \n    path dbdir from blastdb_dir\n\n    output:\n    file (\"${sample_id_db}.blast\") into blastout_ch\n    file(\"${sample_id_db}.fasta\") into sequences\n    val \"${sample_id_db}\" into seq_name\n    file(\"${sample_id_db}.fasta\") into cpmp_all\n    \n    script:\n\n\n    \"\"\"\n    blastn -query $cpmp -db $dbdir/$sample_id_db  -outfmt \"6 qseqid sseqid pident qlen qstart qend sstart send sseq\" -out ${sample_id_db}.blast\n    cat ${sample_id_db}.blast | awk '\\$8-\\$7 > 250 {print \">\" \\$2 \"_${sample_id_db}_\" \"\\\\n\" \\$9}' > ${sample_id_db}.fasta\n    \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    blastn -query $cpmp -db $dbdir/$sample_id_db  -outfmt \"6 qseqid sseqid pident qlen qstart qend sstart send sseq\" -out ${sample_id_db}.blast\n    cat ${sample_id_db}.blast | awk '\\$8-\\$7 > 250 {print \">\" \\$2 \"_${sample_id_db}_\" \"\\\\n\" \\$9}' > ${sample_id_db}.fasta\n    \n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "params",
            "blastdb_name",
            "blastdb_dir"
        ],
        "nb_inputs": 3,
        "outputs": [
            "blastout_ch",
            "sequences",
            "seq_name",
            "cpmp_all"
        ],
        "nb_outputs": 4,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "container 'my-image-spades'",
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/blast_out_files\",mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "alginment": {
        "name_process": "alginment",
        "string_process": "\nprocess alginment{\n    container 'my-image-spades'\n\n    tag \"$sample_id\"\n    publishDir \"${params.outdir}/muscle_output\",mode:'copy'\n\n    input:\n    file('*') from sequences.collect()\n    val sample_id_db from seq_name\n\n    output:\n    file(\"cpmp.align.fasta\") into (alignments_ch, call_genotype_ch)\n\n    script:\n    \"\"\"\n    cat * > cpmp_all.fasta\n    muscle -in cpmp_all.fasta -out cpmp.align.fasta\n    \"\"\"\n\n }",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    cat * > cpmp_all.fasta\n    muscle -in cpmp_all.fasta -out cpmp.align.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MUSCLE"
        ],
        "tools_url": [
            "https://bio.tools/muscle"
        ],
        "tools_dico": [
            {
                "name": "MUSCLE",
                "uri": "https://bio.tools/muscle",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "This tool performs multiple sequence alignments of nucleotide or amino acid sequences.",
                "homepage": "https://www.drive5.com/muscle/"
            }
        ],
        "inputs": [
            "sequences",
            "seq_name"
        ],
        "nb_inputs": 2,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "container 'my-image-spades'",
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/muscle_output\",mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "unique_allele": {
        "name_process": "unique_allele",
        "string_process": "\nprocess unique_allele{\n    container='biopython/biopython'\n    publishDir \"${params.outdir}/allele_subtype\",mode:'copy'\n    input:\n    file(alignments) from alignments_ch\n    output:\n    file(\"${alignments}_uniq.fasta\") into (unique_allele_ch1,unique_allele_ch2,unique_allele_ch3)\n    file(\"${alignments}_uniq.fasta\") into unique_allele_ch4\n    stdout into corename_ch\n\n    script:\n    \"\"\"\n    #!/usr/bin/python3\n\n    from Bio import AlignIO\n    import os\n    import sys\n\n    corename=\"$alignments\".split(\".\")[0]\n    print(corename.rstrip())\n    count=1\n    alignment=AlignIO.read(\"$alignments\",\"fasta\")\n    dic1={}\n    for record in alignment :\n        dic1[str(record.seq)]=1\n    for key1 in dic1:\n        with open(\"$alignments\"+\"_\"+\"uniq.fasta\",'a') as ofile:\n            ofile.write(\">\"+corename+\"_\"+str(count)+\"\\\\n\"+key1+\"\\\\n\")\n        count=count+1\n\n    \"\"\"\n\n }",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    #!/usr/bin/python3\n\n    from Bio import AlignIO\n    import os\n    import sys\n\n    corename=\"$alignments\".split(\".\")[0]\n    print(corename.rstrip())\n    count=1\n    alignment=AlignIO.read(\"$alignments\",\"fasta\")\n    dic1={}\n    for record in alignment :\n        dic1[str(record.seq)]=1\n    for key1 in dic1:\n        with open(\"$alignments\"+\"_\"+\"uniq.fasta\",'a') as ofile:\n            ofile.write(\">\"+corename+\"_\"+str(count)+\"\\\\n\"+key1+\"\\\\n\")\n        count=count+1\n\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignments_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "unique_allele_ch4",
            "corename_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "container='biopython/biopython'",
            "publishDir \"${params.outdir}/allele_subtype\",mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "assign_allele": {
        "name_process": "assign_allele",
        "string_process": "\nprocess assign_allele{\n    container='biopython/biopython'\n    publishDir \"${params.outdir}/Genomeprofile\",mode:'copy'\n\n    input:\n    file(allele_subtype) from unique_allele_ch2\n    file(alignment) from call_genotype_ch\n\n    output:\n    file(\"Genome_profile.csv\") into alignment_match_genotype_ch\n    \n    script:\n\"\"\"\n#!/usr/bin/python3\nfrom Bio import AlignIO\nimport os\nimport sys\ndic1={}\ndic2={}\ndic3={}\ndef Parse(filename,seqs):\n    file = open(filename)\n    seqs={}\n    name = ''\n    for line in file:\n        line = line.rstrip()  \n        if line.startswith('>'):     \n            name=line.replace('>',\"\") \n            seqs[name] = ''          \n        else:\n            seqs[name] = seqs[name] + line\n    return seqs   \ndic1=dict(dic1,**Parse(\"$allele_subtype\",dic1))\n\ncorename=\"$alignment\".split(\"_\")[0]\nalignment=AlignIO.read(\"$alignment\",\"fasta\")\n\nfor record in alignment :    \n    #record.id1=record.id.split(\"_\")[::-1][0]\n    dic2.setdefault(str(record.id),[]).append(str(record.seq))\nfor key1 in dic1:\n    for key2 in dic2:\n        if dic1.get(key1) in dic2.get(key2):\n            dic3.setdefault(str(key2),[]).append(str(key1))\n\nfor key3 in dic3:\n    with open('Genome_profile.csv','a') as ofile:\n        ofile.write(str(key3)+\"\\\\t\"+str(dic3.get(key3)[0])+\"\\\\n\")\n        ofile.close()\n\"\"\"\n\n}",
        "nb_lignes_process": 51,
        "string_script": "\"\"\"\n#!/usr/bin/python3\nfrom Bio import AlignIO\nimport os\nimport sys\ndic1={}\ndic2={}\ndic3={}\ndef Parse(filename,seqs):\n    file = open(filename)\n    seqs={}\n    name = ''\n    for line in file:\n        line = line.rstrip()  \n        if line.startswith('>'):     \n            name=line.replace('>',\"\") \n            seqs[name] = ''          \n        else:\n            seqs[name] = seqs[name] + line\n    return seqs   \ndic1=dict(dic1,**Parse(\"$allele_subtype\",dic1))\n\ncorename=\"$alignment\".split(\"_\")[0]\nalignment=AlignIO.read(\"$alignment\",\"fasta\")\n\nfor record in alignment :    \n    #record.id1=record.id.split(\"_\")[::-1][0]\n    dic2.setdefault(str(record.id),[]).append(str(record.seq))\nfor key1 in dic1:\n    for key2 in dic2:\n        if dic1.get(key1) in dic2.get(key2):\n            dic3.setdefault(str(key2),[]).append(str(key1))\n\nfor key3 in dic3:\n    with open('Genome_profile.csv','a') as ofile:\n        ofile.write(str(key3)+\"\\\\t\"+str(dic3.get(key3)[0])+\"\\\\n\")\n        ofile.close()\n\"\"\"",
        "nb_lignes_script": 37,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "unique_allele_ch2",
            "call_genotype_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "alignment_match_genotype_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "container='biopython/biopython'",
            "publishDir \"${params.outdir}/Genomeprofile\",mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "macse_alignment": {
        "name_process": "macse_alignment",
        "string_process": "\nprocess macse_alignment{\n    container 'ranwez/omm_macse:v10.02'\n    publishDir \"${params.outdir}/macse_output\",mode:'copy'\n\n     input: \n     file(unique_allele_subtype) from unique_allele_ch4\n     val(core_name) from corename_ch\n\n     output:\n                                    \n     path ('*') into macse_path\n\n     script:\n     \"\"\"\n     /OMM_MACSE/S_OMM_MACSE_V10.02.sh --out_dir macse_out  --in_seq_file \"$unique_allele_subtype\"  --alignAA_soft MAFFT  --out_file_prefix ${core_name}\n     \"\"\"\n\n }",
        "nb_lignes_process": 17,
        "string_script": "     \"\"\"\n     /OMM_MACSE/S_OMM_MACSE_V10.02.sh --out_dir macse_out  --in_seq_file \"$unique_allele_subtype\"  --alignAA_soft MAFFT  --out_file_prefix ${core_name}\n     \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "unique_allele_ch4",
            "corename_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "macse_path"
        ],
        "nb_outputs": 1,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "container 'ranwez/omm_macse:v10.02'",
            "publishDir \"${params.outdir}/macse_output\",mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "call_genotype": {
        "name_process": "call_genotype",
        "string_process": "\nprocess call_genotype{\n    container='thibautjombart/adegenet_testing:latest'\n    publishDir \"${params.outdir}/genotype\",mode:'copy'\n    input:\n    file(alignments) from unique_allele_ch1\n    output:\n    file(\"cpmp_genotype_profile.csv\") into genotype_profile_ch\n    file(\"cpmp_snp_density.png\")\n    script:\n    \"\"\"\n    #!/usr/bin/Rscript --vanilla\n    library(ape)\n    library(adegenet)\n    library(poppr)\n    cpmp<-fasta2DNAbin(\"$alignments\")\n    cpmp_snp<-as.matrix(cpmp)\n    png(\"cpmp_snp_density.png\")\n    snpposi.plot(cpmp_snp,codon=TRUE)\n    dev.off()\n    obj_cpmp = DNAbin2genind(cpmp_snp, polyThres=0.05)\n    mlg(obj_cpmp)\n    genind2genalex(obj_cpmp, filename = \"cpmp_genotype_profile.csv\", quiet = FALSE,\n    pop = NULL, allstrata = TRUE, geo = FALSE, geodf = \"xy\",overwrite = TRUE,\n    sep = \",\") \n    df_cpmp=genind2df(obj_cpmp)\n\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    #!/usr/bin/Rscript --vanilla\n    library(ape)\n    library(adegenet)\n    library(poppr)\n    cpmp<-fasta2DNAbin(\"$alignments\")\n    cpmp_snp<-as.matrix(cpmp)\n    png(\"cpmp_snp_density.png\")\n    snpposi.plot(cpmp_snp,codon=TRUE)\n    dev.off()\n    obj_cpmp = DNAbin2genind(cpmp_snp, polyThres=0.05)\n    mlg(obj_cpmp)\n    genind2genalex(obj_cpmp, filename = \"cpmp_genotype_profile.csv\", quiet = FALSE,\n    pop = NULL, allstrata = TRUE, geo = FALSE, geodf = \"xy\",overwrite = TRUE,\n    sep = \",\") \n    df_cpmp=genind2df(obj_cpmp)\n\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "--vanilla",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "unique_allele_ch1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genotype_profile_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "container='thibautjombart/adegenet_testing:latest'",
            "publishDir \"${params.outdir}/genotype\",mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "alignment_match_genotype": {
        "name_process": "alignment_match_genotype",
        "string_process": "\nprocess alignment_match_genotype {\n    container='biopython/biopython'\n    publishDir \"${params.outdir}/allele_assigne_new_name\",mode:'copy'\n    input:\n    file(genotype_profile) from alignment_match_genotype_ch\n    file(allele_profile) from genotype_profile_ch\n    output:\n    file(\"new_name_allele_call.csv\")\n    file(\"new_name_allele.csv\")\n                                \n    script:\n\n \"\"\"\n#!/usr/bin/python3\nimport os\nimport pandas as pd\nimport numpy as np\n\ndef f(row):\n    if row['D0_new_name'] == row['DF_new_name']:\n        val = 0\n    else:\n        val = -1\n    return val\n\nD0_DF=pd.read_csv(\"$genotype_profile\",header=None,sep=\"\\t\")\nD0_DF['sample']=D0_DF[0].apply(lambda x:x.split(\"_\")[::-1][4])\nD0=D0_DF[D0_DF['sample'].apply(lambda x:x[6:8])==\"00\"]\nDF=D0_DF[D0_DF['sample'].apply(lambda x:x[6:8]!=\"00\")]\nD0['sample_id']=D0['sample'].apply(lambda x:x[4:6])+\"_\"+D0['sample'].apply(lambda x:x[8:13])\nDF['sample_id']=DF['sample'].apply(lambda x:x[4:6])+\"_\"+DF['sample'].apply(lambda x:x[8:13])\nD0.columns=['all_name','D0_allele','sample','sample_id']\nDF.columns=['all_name','DF_allele','sample','sample_id']\n\ncombine=pd.merge(D0,DF,on='sample_id',how='outer')\ncombine=pd.merge(D0,DF,on='sample_id',how='outer')\ncombine.columns=['D0_sample_id','D0_allele','D0_sample','sample_id','DF_sample_id','DF_allele','DF_sample']\ncombine['DayF']=combine.DF_sample.str[6:8]\ncombine_sub=combine[['sample_id','D0_sample','D0_allele','DayF','DF_allele']]\ndf=combine_sub[combine_sub.DayF!=\"xx\"].sort_values(by='sample_id')\n\nallele_profile=pd.read_csv(\"$allele_profile\")\nallele_profile.columns=allele_profile.iloc[1]\nallele_profile=allele_profile.drop(0,axis=0).drop(1,axis=0)\nallele_profile=allele_profile.drop(\"Pop\",axis=1)\nallele_profile['id']= allele_profile[allele_profile.columns[1:]].apply(\n    lambda x: ','.join(x.dropna().astype(str)),\n    axis=1\n)\n\n\nallele_profile_table=pd.DataFrame(allele_profile.groupby('id')['Ind'].agg(lambda x:' '.join(x.unique())))\nallele_profile_table=allele_profile_table.reset_index()\nallele_profile_table=allele_profile_table.reset_index()\nallele_profile_table.columns=['unique_id','id','Ind']\nallele_profile_table['new_name']=allele_profile_table.apply(lambda row: \"cpmp_\" + str(row['unique_id']), axis=1)\nallele_profile_table.to_csv(\"new_name_allele.csv\")\n\nname_allele_map=pd.merge(allele_profile,allele_profile_table,on='id',how='left')[['Ind_x','new_name']]\nname_allele_map2=name_allele_map\nname_allele_map.columns=['D0_allele','D0_new_name']\nmerge1=pd.merge(df,name_allele_map,on='D0_allele',how='left')\nname_allele_map2.columns=['DF_allele','DF_new_name']\nmerge2=pd.merge(merge1,name_allele_map2,on='DF_allele',how='left')\nmerge2=merge2[['sample_id','D0_new_name','DayF','DF_new_name']]\n\nmerge2['recrudescence'] = merge2.apply(f, axis=1)\nmerge2.to_csv(\"new_name_allele_call.csv\")\n\n \"\"\"\n\n }",
        "nb_lignes_process": 71,
        "string_script": " \"\"\"\n#!/usr/bin/python3\nimport os\nimport pandas as pd\nimport numpy as np\n\ndef f(row):\n    if row['D0_new_name'] == row['DF_new_name']:\n        val = 0\n    else:\n        val = -1\n    return val\n\nD0_DF=pd.read_csv(\"$genotype_profile\",header=None,sep=\"\\t\")\nD0_DF['sample']=D0_DF[0].apply(lambda x:x.split(\"_\")[::-1][4])\nD0=D0_DF[D0_DF['sample'].apply(lambda x:x[6:8])==\"00\"]\nDF=D0_DF[D0_DF['sample'].apply(lambda x:x[6:8]!=\"00\")]\nD0['sample_id']=D0['sample'].apply(lambda x:x[4:6])+\"_\"+D0['sample'].apply(lambda x:x[8:13])\nDF['sample_id']=DF['sample'].apply(lambda x:x[4:6])+\"_\"+DF['sample'].apply(lambda x:x[8:13])\nD0.columns=['all_name','D0_allele','sample','sample_id']\nDF.columns=['all_name','DF_allele','sample','sample_id']\n\ncombine=pd.merge(D0,DF,on='sample_id',how='outer')\ncombine=pd.merge(D0,DF,on='sample_id',how='outer')\ncombine.columns=['D0_sample_id','D0_allele','D0_sample','sample_id','DF_sample_id','DF_allele','DF_sample']\ncombine['DayF']=combine.DF_sample.str[6:8]\ncombine_sub=combine[['sample_id','D0_sample','D0_allele','DayF','DF_allele']]\ndf=combine_sub[combine_sub.DayF!=\"xx\"].sort_values(by='sample_id')\n\nallele_profile=pd.read_csv(\"$allele_profile\")\nallele_profile.columns=allele_profile.iloc[1]\nallele_profile=allele_profile.drop(0,axis=0).drop(1,axis=0)\nallele_profile=allele_profile.drop(\"Pop\",axis=1)\nallele_profile['id']= allele_profile[allele_profile.columns[1:]].apply(\n    lambda x: ','.join(x.dropna().astype(str)),\n    axis=1\n)\n\n\nallele_profile_table=pd.DataFrame(allele_profile.groupby('id')['Ind'].agg(lambda x:' '.join(x.unique())))\nallele_profile_table=allele_profile_table.reset_index()\nallele_profile_table=allele_profile_table.reset_index()\nallele_profile_table.columns=['unique_id','id','Ind']\nallele_profile_table['new_name']=allele_profile_table.apply(lambda row: \"cpmp_\" + str(row['unique_id']), axis=1)\nallele_profile_table.to_csv(\"new_name_allele.csv\")\n\nname_allele_map=pd.merge(allele_profile,allele_profile_table,on='id',how='left')[['Ind_x','new_name']]\nname_allele_map2=name_allele_map\nname_allele_map.columns=['D0_allele','D0_new_name']\nmerge1=pd.merge(df,name_allele_map,on='D0_allele',how='left')\nname_allele_map2.columns=['DF_allele','DF_new_name']\nmerge2=pd.merge(merge1,name_allele_map2,on='DF_allele',how='left')\nmerge2=merge2[['sample_id','D0_new_name','DayF','DF_new_name']]\n\nmerge2['recrudescence'] = merge2.apply(f, axis=1)\nmerge2.to_csv(\"new_name_allele_call.csv\")\n\n \"\"\"",
        "nb_lignes_script": 57,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment_match_genotype_ch",
            "genotype_profile_ch"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "container='biopython/biopython'",
            "publishDir \"${params.outdir}/allele_assigne_new_name\",mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "foo": {
        "name_process": "foo",
        "string_process": "\nprocess foo {\n  script:\n  if( params.aligner == 'kallisto' )\n    \"\"\"\n    kallisto --reads /some/data.fastq\n    \"\"\"\n  else if( params.aligner == 'salmon' )\n    \"\"\"\n    salmon --reads /some/data.fastq\n    \"\"\"\n  else\n    throw new IllegalArgumentException(\"Unknown aligner $params.aligner\")\n}",
        "nb_lignes_process": 12,
        "string_script": "  if( params.aligner == 'kallisto' )\n    \"\"\"\n    kallisto --reads /some/data.fastq\n    \"\"\"\n  else if( params.aligner == 'salmon' )\n    \"\"\"\n    salmon --reads /some/data.fastq\n    \"\"\"\n  else\n    throw new IllegalArgumentException(\"Unknown aligner $params.aligner\")",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "kallisto",
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/kallisto",
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "kallisto",
                "uri": "https://bio.tools/kallisto",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profiling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Functional profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Feature expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene transcription profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A program for quantifying abundances of transcripts from RNA-Seq data, or more generally of target sequences using high-throughput sequencing reads. It is based on the novel idea of pseudoalignment for rapidly determining the compatibility of reads with targets, without the need for alignment.",
                "homepage": "https://pachterlab.github.io/kallisto/about.html"
            },
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "baz": {
        "name_process": "baz",
        "string_process": "\nprocess baz {\n  shell:\n  '''\n  X='Bonjour'\n  echo $X !{params.data}\n  '''\n}",
        "nb_lignes_process": 6,
        "string_script": "  '''\n  X='Bonjour'\n  echo $X !{params.data}\n  '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "find": {
        "name_process": "find",
        "string_process": "\nprocess find {\n  input:\n  file fasta from proteins\n  val type from params.dbtype\n\n  when:\n  fasta.name =~ /^BB11.*/ && type == 'nr'\n\n  script:\n  \"\"\"\n  blastp -query $fasta -db nr\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "  \"\"\"\n  blastp -query $fasta -db nr\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BLASTP-ACC"
        ],
        "tools_url": [
            "https://bio.tools/BLASTP-ACC"
        ],
        "tools_dico": [
            {
                "name": "BLASTP-ACC",
                "uri": "https://bio.tools/BLASTP-ACC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3297",
                            "term": "Biotechnology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3802",
                                    "term": "Sorting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Parallel Architecture and Hardware Accelerator Design for BLAST-based Protein Sequence Alignment.\n\nIn this study, we design a hardware accelerator for a widely used sequence alignment algorithm, the basic local alignment search tool for proteins (BLASTP). The architecture of the proposed accelerator consists of five stages: a new systolic-array-based one-hit finding stage, a novel RAM-REG-based two-hit finding stage, a refined ungapped extension stage, a faster gapped extension stage, and a highly efficient parallel sorter. The system is implemented on an Altera Stratix V FPGA with a processing speed of more than 500 giga cell updates per second (GCUPS). It can receive a query sequence, compare it with the sequences in the database, and generate a list sorted in descending order of the similarity scores between the query sequence and the subject sequences.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'accelerator', 'Altera', 'Stratix', 'RAM-REG-based'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31581096"
            }
        ],
        "inputs": [
            "proteins",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [],
        "when": "fasta.name =~ /^BB11.*/ && type == 'nr'",
        "stub": ""
    },
    "bar": {
        "name_process": "bar",
        "string_process": "\nprocess bar{\n                    \n    label 'big'\n    echo true\n    \"\"\"\n    echo using $task.cpus cpus and $task.memory memory\n    \"\"\"\n   \n}",
        "nb_lignes_process": 8,
        "string_script": "\"\"\"\n    echo using $task.cpus cpus and $task.memory memory\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "label 'big'",
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "run_prodigal": {
        "name_process": "run_prodigal",
        "string_process": "\nprocess run_prodigal{\n    tag \"$sample_id\"\n    publishDir \"${params.outdir}/prod_fasta\",mode:'copy'\n\n    input:\n    set val(sample_id), file(assembly) from spade_output_for_prod\n\n    output:\n    set val(sample_id), file(\"${assembly}_prod.fasta\") into prod_fasta\n\n    when:\n    assembly.size() > 0\n\n    script:\n    \"\"\"\n    prodigal -i ${assembly} -p meta -d ${assembly}_prod.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    prodigal -i ${assembly} -p meta -d ${assembly}_prod.fasta\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "spade_output_for_prod"
        ],
        "nb_inputs": 1,
        "outputs": [
            "prod_fasta"
        ],
        "nb_outputs": 1,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/prod_fasta\",mode:'copy'"
        ],
        "when": "assembly.size() > 0",
        "stub": ""
    },
    "fastq": {
        "name_process": "fastq",
        "string_process": "\nprocess fastq {\n    \n    tag \"$sample_id\"\n    publishDir \"results/fastqc\", mode: 'copy'    \n   \n    input:\n    tuple val(sample_id), file(reads_file) from reads_ch\n\n    output:\n    file(\"fastqc_${sample_id}_logs\") into fastqc_ch\n\n    script:\n    \"\"\"\n    echo mkdir fastqc_${sample_id}_logs\n    echo fastqc -o fastqc_${sample_id}_logs -f fastq -q ${reads_file}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    echo mkdir fastqc_${sample_id}_logs\n    echo fastqc -o fastqc_${sample_id}_logs -f fastq -q ${reads_file}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"results/fastqc\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "velvet": {
        "name_process": "velvet",
        "string_process": "\nprocess velvet{\n\n    tag \"$sampe_id\"\n    publishDir \"${params.outdir}/velvet_out\", mode:'copy'\n                            \n    errorStrategy 'retry'\n\n    input:\n    tuple val(sample_id),file(reads_file) from velvet_input\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_contigs.fasta\") into velvet_output,velvet_output_for_prod\n     \n    script:\n    \"\"\"\n    velveth ${sample_id} 77 -shortPaired -fastq ${reads_file[0]} ${reads_file[1]}\n    velvetg ${sample_id} -cov_cutoff 1 -exp_cov 1\n    cp ${sample_id}/contigs.fa ${sample_id}_contigs.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    velveth ${sample_id} 77 -shortPaired -fastq ${reads_file[0]} ${reads_file[1]}\n    velvetg ${sample_id} -cov_cutoff 1 -exp_cov 1\n    cp ${sample_id}/contigs.fa ${sample_id}_contigs.fasta\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "velvet_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "velvet_output",
            "velvet_output_for_prod"
        ],
        "nb_outputs": 2,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "tag \"$sampe_id\"",
            "publishDir \"${params.outdir}/velvet_out\", mode:'copy'",
            "errorStrategy 'retry'"
        ],
        "when": "",
        "stub": ""
    },
    "greeting": {
        "name_process": "greeting",
        "string_process": "\nprocess greeting{\n    echo true\n\n    input tuple val(word), val(word_size) from words_ch\n\n    script:\n    \"\"\"\n    echo Word is $word and Size is $word_size\n    \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "    \"\"\"\n    echo Word is $word and Size is $word_size\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "echo true input tuple val(word), val(word_size) from words_ch"
        ],
        "when": "",
        "stub": ""
    },
    "skesa": {
        "name_process": "skesa",
        "string_process": "\nprocess skesa{\n\n    tag \"$sampe_id\"\n    publishDir \"${params.outdir}/skesa_out\", mode:'copy'\n\n    input:\n    tuple val(sample_id),file(reads_file) from skesa_input\n\n    output:\n    tuple val(sample_id), file(\"${sample_id}_skesa.fasta\") into skesa_output,skesa_output_for_prod\n     \n    script:\n    \"\"\"\n    skesa --reads ${reads_file[0]},${reads_file[1]} --use_paired_ends --kmer 31  --contigs_out ${sample_id}_skesa.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    skesa --reads ${reads_file[0]},${reads_file[1]} --use_paired_ends --kmer 31  --contigs_out ${sample_id}_skesa.fasta\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "skesa_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "skesa_output",
            "skesa_output_for_prod"
        ],
        "nb_outputs": 2,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [
            "tag \"$sampe_id\"",
            "publishDir \"${params.outdir}/skesa_out\", mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "alignSequences": {
        "name_process": "alignSequences",
        "string_process": "\nprocess alignSequences {\n    input:\n    path seq from sequences\n    each mode from methods\n                      \n\n    \"\"\"\n    echo t_coffee -in $seq -mode $mode \n}",
        "nb_lignes_process": 8,
        "string_script": "\"\"\"\n    echo t_coffee -in $seq -mode $mode",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sequences",
            "methods"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "supark87__prac_nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
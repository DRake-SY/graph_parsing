{
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n\n    output:\n    file 'software_versions_mqc.yaml' into software_versions_yaml\n\n    script:\n                                                                     \n    \"\"\"\n    echo 'test get software versions' > v_pipeline.txt\n    echo 'test get software versions' > v_nextflow.txt\n    echo 'test get software versions' > v_fastqc.txt\n    echo 'test get software versions' > v_multiqc.txt\n\n    #echo $workflow.manifest.version > v_pipeline.txt\n    #echo $workflow.nextflow.version > v_nextflow.txt\n    #fastqc --version > v_fastqc.txt\n    #multiqc --version > v_multiqc.txt\n    scrape_software_versions.py > software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    echo 'test get software versions' > v_pipeline.txt\n    echo 'test get software versions' > v_nextflow.txt\n    echo 'test get software versions' > v_fastqc.txt\n    echo 'test get software versions' > v_multiqc.txt\n\n    #echo $workflow.manifest.version > v_pipeline.txt\n    #echo $workflow.nextflow.version > v_nextflow.txt\n    #fastqc --version > v_fastqc.txt\n    #multiqc --version > v_multiqc.txt\n    scrape_software_versions.py > software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "h3abionet__h3arefgraph",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    tag \"$name\"\n    publishDir \"${params.outdir}/fastqc\", mode: 'copy',\n        saveAs: {filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\"}\n\n    input:\n    set val(name), file(reads) from read_files_fastqc\n\n    output:\n    file \"*_fastqc.{zip,html}\" into fastqc_results\n\n    script:\n    \"\"\"\n    #fastqc -q $reads\n    echo 'done some qc' > look_qc_fastqc.html\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    #fastqc -q $reads\n    echo 'done some qc' > look_qc_fastqc.html\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_files_fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "h3abionet__h3arefgraph",
        "directive": [
            "tag \"$name\"",
            "publishDir \"${params.outdir}/fastqc\", mode: 'copy' , saveAs: {filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\"}"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir \"${params.outdir}/MultiQC\", mode: 'copy'\n\n    input:\n    file multiqc_config from ch_multiqc_config\n                                                                                  \n    file ('fastqc/*') from fastqc_results.collect().ifEmpty([])\n    file ('software_versions/*') from software_versions_yaml\n    file workflow_summary from create_workflow_summary(summary)\n\n    output:\n    file \"*multiqc_report.html\" into multiqc_report\n    file \"*_data\"\n\n    script:\n    rtitle = custom_runName ? \"--title \\\"$custom_runName\\\"\" : ''\n    rfilename = custom_runName ? \"--filename \" + custom_runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n                                                                                       \n    \"\"\"\n    multiqc -f $rtitle $rfilename --config $multiqc_config .\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    rtitle = custom_runName ? \"--title \\\"$custom_runName\\\"\" : ''\n    rfilename = custom_runName ? \"--filename \" + custom_runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\" : ''\n                                                                                       \n    \"\"\"\n    multiqc -f $rtitle $rfilename --config $multiqc_config .\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "ch_multiqc_config",
            "fastqc_results",
            "software_versions_yaml",
            "summary"
        ],
        "nb_inputs": 4,
        "outputs": [
            "multiqc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "h3abionet__h3arefgraph",
        "directive": [
            "publishDir \"${params.outdir}/MultiQC\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "createGraphReference_vg": {
        "name_process": "createGraphReference_vg",
        "string_process": " process createGraphReference_vg {\n        label 'high_memory'\n\n        input:\n          set sample_name, file(path) from newFastaChannel\n\n        output:\n          file \"mergedGenomes.txt\" into referenceGenome\n\n        script:\n\n        \"\"\"\n        head $path > mergedGenomes.txt\n        \"\"\"\n\n\n    }",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        head $path > mergedGenomes.txt\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "newFastaChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "referenceGenome"
        ],
        "nb_outputs": 1,
        "name_workflow": "h3abionet__h3arefgraph",
        "directive": [
            "label 'high_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "createGraphReference_GenGraph": {
        "name_process": "createGraphReference_GenGraph",
        "string_process": " process createGraphReference_GenGraph {\n        label 'high_memory'\n\n        input:\n          set sample_name, file(path) from newFastaChannel\n\n        output:\n          file \"mergedGenomes.txt\" into referenceGenome\n\n        script:\n\n        \"\"\"\n\n        python3 /GenGraph/gengraphTool.py -h > mergedGenomes.txt\n        \"\"\"\n\n\n    }",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n\n        python3 /GenGraph/gengraphTool.py -h > mergedGenomes.txt\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "newFastaChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "referenceGenome"
        ],
        "nb_outputs": 1,
        "name_workflow": "h3abionet__h3arefgraph",
        "directive": [
            "label 'high_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "convertingToVGforMapping": {
        "name_process": "convertingToVGforMapping",
        "string_process": " process convertingToVGforMapping {\n        label 'high_memory'\n\n        input:\n          file referenceGenome\n\n        output:\n          file \"convertedRefGenomeFormat.graph\" into convertedReferenceGenome\n\n        script:\n\n        \"\"\"\n        head $referenceGenome > convertedRefGenomeFormat.graph\n        \"\"\"\n\n\n    }",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        head $referenceGenome > convertedRefGenomeFormat.graph\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "referenceGenome"
        ],
        "nb_inputs": 1,
        "outputs": [
            "convertedReferenceGenome"
        ],
        "nb_outputs": 1,
        "name_workflow": "h3abionet__h3arefgraph",
        "directive": [
            "label 'high_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "mappingReads": {
        "name_process": "mappingReads",
        "string_process": " process mappingReads {\n        label 'high_memory'\n\n        input:\n          file convertedReferenceGenome\n          file reads\n\n        output:\n          file \"readMappingResult.txt\" into mappedReads\n\n        script:\n\n        \"\"\"\n        head $convertedReferenceGenome > readMappingResult.txt\n        \"\"\"\n\n\n    }",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        head $convertedReferenceGenome > readMappingResult.txt\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "convertedReferenceGenome",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "mappedReads"
        ],
        "nb_outputs": 1,
        "name_workflow": "h3abionet__h3arefgraph",
        "directive": [
            "label 'high_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "variantCalling": {
        "name_process": "variantCalling",
        "string_process": " process variantCalling {\n        label 'high_memory'\n\n        input:\n          file mappedReads\n\n        output:\n          file \"variantGraph.var\" into variantGraph\n\n        script:\n\n        \"\"\"\n        head $mappedReads > variantGraph.var\n        \"\"\"\n\n\n    }",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        head $mappedReads > variantGraph.var\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mappedReads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "variantGraph"
        ],
        "nb_outputs": 1,
        "name_workflow": "h3abionet__h3arefgraph",
        "directive": [
            "label 'high_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "convertingToGenGraphInput": {
        "name_process": "convertingToGenGraphInput",
        "string_process": " process convertingToGenGraphInput {\n        label 'high_memory'\n\n        input:\n          file variantGraph\n\n        output:\n          file \"gg_format.gml\" into formattedVariantGraph\n\n        script:\n\n        \"\"\"\n        head $variantGraph > gg_format.gml\n        \"\"\"\n\n\n    }",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        head $variantGraph > gg_format.gml\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "variantGraph"
        ],
        "nb_inputs": 1,
        "outputs": [
            "formattedVariantGraph"
        ],
        "nb_outputs": 1,
        "name_workflow": "h3abionet__h3arefgraph",
        "directive": [
            "label 'high_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "generatingReport": {
        "name_process": "generatingReport",
        "string_process": " process generatingReport {\n        label 'high_memory'\n\n        input:\n          file formattedVariantGraph\n\n        output:\n          file \"report.txt\" into finalReportOutput\n\n        script:\n\n        \"\"\"\n        head $formattedVariantGraph > report.txt\n        \"\"\"\n\n\n    }",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        head $formattedVariantGraph > report.txt\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "formattedVariantGraph"
        ],
        "nb_inputs": 1,
        "outputs": [
            "finalReportOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "h3abionet__h3arefgraph",
        "directive": [
            "label 'high_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "output_documentation": {
        "name_process": "output_documentation",
        "string_process": "\nprocess output_documentation {\n    publishDir \"${params.outdir}/Documentation\", mode: 'copy'\n\n    input:\n    file output_docs from ch_output_docs\n\n    output:\n    file \"results_description.html\"\n\n    script:\n    \"\"\"\n    #markdown_to_html.r $output_docs results_description.html\n\n    echo 'some output from output_documentation' > results_description.html\n\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    #markdown_to_html.r $output_docs results_description.html\n\n    echo 'some output from output_documentation' > results_description.html\n\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_output_docs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "h3abionet__h3arefgraph",
        "directive": [
            "publishDir \"${params.outdir}/Documentation\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
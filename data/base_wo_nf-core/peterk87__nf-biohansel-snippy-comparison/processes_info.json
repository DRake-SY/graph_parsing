{
    "FASTERQ_DUMP": {
        "name_process": "FASTERQ_DUMP",
        "string_process": "\nprocess FASTERQ_DUMP {\n  tag \"$accession\"\n  publishDir \"$outdir/fastqs/$scheme/$accession\", mode: 'symlink', pattern: \"*.fastq.gz\"\n\n  input:\n    tuple val(scheme),\n          path(scheme_fasta),\n          val(accession),\n          path(ref_genbank)\n  output:\n    tuple val(scheme),\n          path(scheme_fasta),\n          val(accession),\n          path(reads1),\n          path(reads2),\n          path(ref_genbank)\n\n  script:\n  fq_1 = \"${accession}_1.fastq\"\n  fq_2 = \"${accession}_2.fastq\"\n  reads1 = \"${fq_1}.gz\"\n  reads2 = \"${fq_2}.gz\"\n  \"\"\"\n  fasterq-dump $accession -e ${task.cpus} -o $accession -S\n  clumpify.sh -Xmx16g in=$fq_1 in2=$fq_2 out=$reads1 out2=$reads2 deleteinput=t\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  fq_1 = \"${accession}_1.fastq\"\n  fq_2 = \"${accession}_2.fastq\"\n  reads1 = \"${fq_1}.gz\"\n  reads2 = \"${fq_2}.gz\"\n  \"\"\"\n  fasterq-dump $accession -e ${task.cpus} -o $accession -S\n  clumpify.sh -Xmx16g in=$fq_1 in2=$fq_2 out=$reads1 out2=$reads2 deleteinput=t\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Reads2Type"
        ],
        "tools_url": [
            "https://bio.tools/reads2type"
        ],
        "tools_dico": [
            {
                "name": "Reads2Type",
                "uri": "https://bio.tools/reads2type",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This is a web-based tool for taxonomy identification based on whole bacterial genome sequence data.",
                "homepage": "http://www.cbs.dtu.dk/~dhany/reads2type.html"
            }
        ],
        "inputs": [
            "scheme",
            "accession",
            "scheme_fasta",
            "ref_genbank"
        ],
        "nb_inputs": 4,
        "outputs": [
            "accession"
        ],
        "nb_outputs": 1,
        "name_workflow": "peterk87__nf-biohansel-snippy-comparison",
        "directive": [
            "tag \"$accession\"",
            "publishDir \"$outdir/fastqs/$scheme/$accession\", mode: 'symlink', pattern: \"*.fastq.gz\""
        ],
        "when": "",
        "stub": ""
    },
    "BIOHANSEL": {
        "name_process": "BIOHANSEL",
        "string_process": "\nprocess BIOHANSEL {\n  tag \"$scheme|$accession\"\n  publishDir \"$outdir/biohansel/$accession\", mode: 'copy', pattern: \"*.tsv\"\n\n  input:\n    val mincov\n    tuple val(scheme),\n          path(scheme_fasta),\n          val(accession),\n          path(reads1),\n          path(reads2),\n          path(ref_genbank)\n  output:\n    tuple val(scheme),\n          val(accession),\n          path(scheme_fasta),\n          path(detailed_report),\n          path(summary_report), emit: 'results'\n    tuple val(scheme),\n          val(1),\n          val(1),\n          val('biohansel_single'),\n          path('.command.trace'),\n          path(reads1),\n          path(reads2), emit: 'trace'\n  script:\n  detailed_report = \"biohansel-detailed_report-${accession}.tsv\"\n  summary_report = \"biohansel-summary_report-${accession}.tsv\"\n  \"\"\"\n  mkdir -p reads\n  ln -s `realpath *.fastq.gz` reads/\n  hansel \\\\\n    -v \\\\\n    -t ${task.cpus} \\\\\n    --min-kmer-freq $mincov \\\\\n    -s $scheme_fasta \\\\\n    -D reads/ \\\\\n    -o $summary_report \\\\\n    -O $detailed_report\n  \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "  detailed_report = \"biohansel-detailed_report-${accession}.tsv\"\n  summary_report = \"biohansel-summary_report-${accession}.tsv\"\n  \"\"\"\n  mkdir -p reads\n  ln -s `realpath *.fastq.gz` reads/\n  hansel \\\\\n    -v \\\\\n    -t ${task.cpus} \\\\\n    --min-kmer-freq $mincov \\\\\n    -s $scheme_fasta \\\\\n    -D reads/ \\\\\n    -o $summary_report \\\\\n    -O $detailed_report\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mincov",
            "scheme",
            "accession",
            "scheme_fasta",
            "reads1",
            "reads2",
            "ref_genbank"
        ],
        "nb_inputs": 7,
        "outputs": [
            "accession",
            ""
        ],
        "nb_outputs": 2,
        "name_workflow": "peterk87__nf-biohansel-snippy-comparison",
        "directive": [
            "tag \"$scheme|$accession\"",
            "publishDir \"$outdir/biohansel/$accession\", mode: 'copy', pattern: \"*.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "SNIPPY": {
        "name_process": "SNIPPY",
        "string_process": "\nprocess SNIPPY {\n  tag \"$accession\"\n  publishDir \"$outdir/snippy\", mode: 'symlink'\n\n  input:\n    val mincov\n    tuple val(scheme),\n          path(scheme_fasta),\n          val(accession),\n          path(reads1),\n          path(reads2),\n          path(ref_genbank)\n  output:\n    tuple val(scheme),\n          val(accession),\n          path(\"$accession\"), emit: 'results'\n    tuple val(scheme),\n          val(1),\n          val(task.cpus),\n          val('snippy'),\n          path('.command.trace'),\n          path(reads1),\n          path(reads2), emit: 'trace'\n\n  script:\n  \"\"\"\n  snippy --prefix $accession \\\\\n    --outdir $accession \\\\\n    --cpus ${task.cpus} \\\\\n    --ram ${task.memory.toGiga()} \\\\\n    --mincov $mincov \\\\\n    --R1 $reads1 \\\\\n    --R2 $reads2 \\\\\n    --ref $ref_genbank \\\\\n    --tmpdir ./\n  \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "  \"\"\"\n  snippy --prefix $accession \\\\\n    --outdir $accession \\\\\n    --cpus ${task.cpus} \\\\\n    --ram ${task.memory.toGiga()} \\\\\n    --mincov $mincov \\\\\n    --R1 $reads1 \\\\\n    --R2 $reads2 \\\\\n    --ref $ref_genbank \\\\\n    --tmpdir ./\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "snippy"
        ],
        "tools_url": [
            "https://bio.tools/snippy"
        ],
        "tools_dico": [
            {
                "name": "snippy",
                "uri": "https://bio.tools/snippy",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Rapid haploid variant calling and core SNP phylogeny generation.",
                "homepage": "https://github.com/tseemann/snippy"
            }
        ],
        "inputs": [
            "mincov",
            "scheme",
            "accession",
            "scheme_fasta",
            "reads1",
            "reads2",
            "ref_genbank"
        ],
        "nb_inputs": 7,
        "outputs": [
            "accession",
            "task"
        ],
        "nb_outputs": 2,
        "name_workflow": "peterk87__nf-biohansel-snippy-comparison",
        "directive": [
            "tag \"$accession\"",
            "publishDir \"$outdir/snippy\", mode: 'symlink'"
        ],
        "when": "",
        "stub": ""
    },
    "COMPARE": {
        "name_process": "COMPARE",
        "string_process": "\nprocess COMPARE {\n  tag \"$accession\"\n  publishDir \"$outdir/compare\", pattern: \"*.csv\", mode: 'copy'\n\n  input:\n    tuple val(scheme), \n          val(accession), \n          path(scheme_fasta),\n          path(bh_results), \n          path(bh_summary),\n          path('snippy')\n  output:\n    path(csv)\n\n  script:\n  csv = \"${accession}-${scheme}.csv\"\n  \"\"\"\n  compare_snippy_biohansel.py \\\\\n    --bam-file snippy/${accession}.bam \\\\\n    --biohansel-results $bh_results \\\\\n    --snippy-consensus-subs-fa snippy/${accession}.consensus.subs.fa \\\\\n    --scheme-fasta $scheme_fasta \\\\\n    --output-csv $csv\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  csv = \"${accession}-${scheme}.csv\"\n  \"\"\"\n  compare_snippy_biohansel.py \\\\\n    --bam-file snippy/${accession}.bam \\\\\n    --biohansel-results $bh_results \\\\\n    --snippy-consensus-subs-fa snippy/${accession}.consensus.subs.fa \\\\\n    --scheme-fasta $scheme_fasta \\\\\n    --output-csv $csv\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "OCSVM"
        ],
        "tools_url": [
            "https://bio.tools/OCSVM"
        ],
        "tools_dico": [
            {
                "name": "OCSVM",
                "uri": "https://bio.tools/OCSVM",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3336",
                            "term": "Drug discovery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0315",
                                    "term": "Expression profile comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A novel one-class classification approach to accurately predict disease-gene association in acute myeloid leukemia cancer.\n\nDisease causing gene identification is considered as an important step towards drug design and drug discovery. In disease gene identification and classification, the main aim is to identify disease genes while identifying non-disease genes are of less or no significant. Hence, this task can be defined as a one-class classification problem. Existing machine learning methods typically take into consideration known disease genes as positive training set and unknown genes as negative samples to build a binary-class classification model. Here we propose a new One-class Classification Support Vector Machines (OCSVM) method to precisely classify candidate disease genes.",
                "homepage": "https://github.com/imandehzangi/OCSVM"
            }
        ],
        "inputs": [
            "scheme",
            "accession",
            "scheme_fasta",
            "bh_results",
            "bh_summary"
        ],
        "nb_inputs": 5,
        "outputs": [
            "csv"
        ],
        "nb_outputs": 1,
        "name_workflow": "peterk87__nf-biohansel-snippy-comparison",
        "directive": [
            "tag \"$accession\"",
            "publishDir \"$outdir/compare\", pattern: \"*.csv\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "TRACE_TABLE": {
        "name_process": "TRACE_TABLE",
        "string_process": "\nprocess TRACE_TABLE {\n  publishDir \"$outdir/trace\", pattern: \"*.csv\", mode: 'copy'\n  input:\n    file trace\n  output:\n    file trace_table_csv\n\n  script:\n  trace_table_csv = \"trace.csv\"\n  \"\"\"\n  make_trace_table.py -t $trace -o $trace_table_csv \n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "  trace_table_csv = \"trace.csv\"\n  \"\"\"\n  make_trace_table.py -t $trace -o $trace_table_csv \n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trace"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trace_table_csv"
        ],
        "nb_outputs": 1,
        "name_workflow": "peterk87__nf-biohansel-snippy-comparison",
        "directive": [
            "publishDir \"$outdir/trace\", pattern: \"*.csv\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "MAFFT": {
        "name_process": "MAFFT",
        "string_process": "\nprocess MAFFT {\n\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::mafft=7.480' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n      container 'https://depot.galaxyproject.org/singularity/mafft:7.480--h779adbc_0'\n    } else {\n      container 'quay.io/biocontainers/mafft:7.480--h779adbc_0'\n    }\n\n\n    input:\n    path(sequences)\n    path(reference_fasta)\n\n    output:\n    path \"sequences.mafft.fasta\", emit: fasta\n    path \"*.version.txt\"        , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    mafft \\\\\n        $options.args \\\\\n        --thread ${task.cpus} \\\\\n        --addfragments ${sequences}\\\\\n        $reference_fasta > sequences.mafft.fasta\n    (mafft --version 2>&1) | sed -E 's/^v(\\\\S+).*/\\\\1/' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    mafft \\\\\n        $options.args \\\\\n        --thread ${task.cpus} \\\\\n        --addfragments ${sequences}\\\\\n        $reference_fasta > sequences.mafft.fasta\n    (mafft --version 2>&1) | sed -E 's/^v(\\\\S+).*/\\\\1/' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MAFFT"
        ],
        "tools_url": [
            "https://bio.tools/MAFFT"
        ],
        "tools_dico": [
            {
                "name": "MAFFT",
                "uri": "https://bio.tools/MAFFT",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.",
                "homepage": "http://mafft.cbrc.jp/alignment/server/index.html"
            }
        ],
        "inputs": [
            "sequences",
            "reference_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::mafft=7.480' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/mafft:7.480--h779adbc_0' } else { container 'quay.io/biocontainers/mafft:7.480--h779adbc_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "PANGOLIN": {
        "name_process": "PANGOLIN",
        "string_process": "\nprocess PANGOLIN {\n  label 'process_low'\n  publishDir \"${params.outdir}\",\n      mode: params.publish_dir_mode,\n      saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n  conda (params.enable_conda ? 'bioconda::pangolin=3.1.5' : null)\n  if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n    container 'https://depot.galaxyproject.org/singularity/pangolin:3.1.5--pyhdfd78af_0'\n  } else {\n    container 'quay.io/biocontainers/pangolin:3.1.5--pyhdfd78af_0'\n  }\n\n  input:\n  path(fasta)\n\n  output:\n  path 'pangolin.csv' , emit: report\n  path '*.version.txt', emit: version\n\n  script:\n  def software = getSoftwareName(task.process)\n  \"\"\"\n  pangolin \\\\\n      $fasta \\\\\n      --outfile pangolin.csv \\\\\n      --threads $task.cpus\n\n  pangolin --version | sed \"s/pangolin //g\" > ${software}.version.txt\n  \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "  def software = getSoftwareName(task.process)\n  \"\"\"\n  pangolin \\\\\n      $fasta \\\\\n      --outfile pangolin.csv \\\\\n      --threads $task.cpus\n\n  pangolin --version | sed \"s/pangolin //g\" > ${software}.version.txt\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? 'bioconda::pangolin=3.1.5' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/pangolin:3.1.5--pyhdfd78af_0' } else { container 'quay.io/biocontainers/pangolin:3.1.5--pyhdfd78af_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "ALIGN2ALLELES": {
        "name_process": "ALIGN2ALLELES",
        "string_process": "\nprocess ALIGN2ALLELES {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3 bioconda::pysam\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/mulled-v2-480c331443a1d7f4cb82aa41315ac8ea4c9c0b45:3e0fc1ebdf2007459f18c33c65d38d2b031b0052-0\"\n    } else {\n        container \"quay.io/biocontainers/mulled-v2-480c331443a1d7f4cb82aa41315ac8ea4c9c0b45:3e0fc1ebdf2007459f18c33c65d38d2b031b0052-0\"\n    }\n\n    input:\n    path (fasta)\n\n    output:\n    path \"alleles.tsv\"\n\n    script:                                                             \n    \"\"\"\n    align2alleles.py \\\\\n        --reference-name ${params.reference_name} \\\\\n        ${fasta} > alleles.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    align2alleles.py \\\\\n        --reference-name ${params.reference_name} \\\\\n        ${fasta} > alleles.tsv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3 bioconda::pysam\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/mulled-v2-480c331443a1d7f4cb82aa41315ac8ea4c9c0b45:3e0fc1ebdf2007459f18c33c65d38d2b031b0052-0\" } else { container \"quay.io/biocontainers/mulled-v2-480c331443a1d7f4cb82aa41315ac8ea4c9c0b45:3e0fc1ebdf2007459f18c33c65d38d2b031b0052-0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SEQUENCES_NEXTCLADE": {
        "name_process": "SEQUENCES_NEXTCLADE",
        "string_process": "\nprocess SEQUENCES_NEXTCLADE {\n  publishDir \"${params.outdir}\",\n      mode: params.publish_dir_mode,\n      saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n  conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null)\n  if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n    container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0'\n  } else {\n    container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0'\n  }\n\n  input:\n  path(metadata)\n  path(sequences)\n  path(pangolin_report)\n\n  output:\n  path \"sequences.nextclade.fasta\"\n\n  script:                                                             \n  \"\"\"\n  sequences_nextclade.py \\\\\n    $sequences \\\\\n    $metadata \\\\\n    $pangolin_report \\\\\n    --output-sequences sequences.nextclade.fasta \\\\\n    --ref-name ${params.reference_name}\n  \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "  \"\"\"\n  sequences_nextclade.py \\\\\n    $sequences \\\\\n    $metadata \\\\\n    $pangolin_report \\\\\n    --output-sequences sequences.nextclade.fasta \\\\\n    --ref-name ${params.reference_name}\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "metadata",
            "sequences",
            "pangolin_report"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0' } else { container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "SHIPTV": {
        "name_process": "SHIPTV",
        "string_process": "\nprocess SHIPTV {\n  publishDir \"${params.outdir}\",\n      mode: params.publish_dir_mode,\n      saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n  conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null)\n  if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n    container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0'\n  } else {\n    container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0'\n  }\n\n  input:\n  path(newick_tree)\n  path(leaflist)\n  path(metadata)\n\n  output:\n  path 'shiptv.html'        , emit: html\n  path 'metadata.shiptv.tsv', emit: metadata\n  path '*.version.txt'      , emit: version\n\n  script:\n  \"\"\"\n  shiptv \\\\\n    --newick ${newick_tree} \\\\\n    --leaflist $leaflist \\\\\n    --metadata $metadata \\\\\n    --outgroup ${params.reference_name} \\\\\n    --output-html shiptv.html \\\\\n    --output-metadata-table metadata.shiptv.tsv\n\n  shiptv --version | sed 's/shiptv version //' > shiptv.version.txt\n  \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "  \"\"\"\n  shiptv \\\\\n    --newick ${newick_tree} \\\\\n    --leaflist $leaflist \\\\\n    --metadata $metadata \\\\\n    --outgroup ${params.reference_name} \\\\\n    --output-html shiptv.html \\\\\n    --output-metadata-table metadata.shiptv.tsv\n\n  shiptv --version | sed 's/shiptv version //' > shiptv.version.txt\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "newick_tree",
            "leaflist",
            "metadata"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0' } else { container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    cache false\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.tsv\"\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "AA_MUTATION_MATRIX": {
        "name_process": "AA_MUTATION_MATRIX",
        "string_process": "\nprocess AA_MUTATION_MATRIX {\n  label 'process_low'\n  publishDir \"${params.outdir}\",\n      mode: params.publish_dir_mode,\n      saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n  conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null)\n  if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n    container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0'\n  } else {\n    container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0'\n  }\n\n  input:\n  path (metadata)\n\n  output:\n  path \"aa_mutation_matrix.tsv\"\n\n  script:                                                             \n  \"\"\"\n  aa_mutation_matrix.py $metadata aa_mutation_matrix.tsv\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  \"\"\"\n  aa_mutation_matrix.py $metadata aa_mutation_matrix.tsv\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "metadata"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0' } else { container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "FILTER_GISAID": {
        "name_process": "FILTER_GISAID",
        "string_process": "\nprocess FILTER_GISAID {\n  label 'process_filter_scripts'\n  publishDir \"${params.outdir}\",\n      mode: params.publish_dir_mode,\n      saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n  conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null)\n  if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n    container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0'\n  } else {\n    container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0'\n  }\n\n  input:\n  path(sequences)\n  path(gisaid_sequences)\n  path(gisaid_metadata)\n  path(lineage_report)\n\n  output:\n  path 'gisaid_sequences.filtered.fasta', emit: fasta\n  path 'gisaid_metadata.filtered.tsv'   , emit: metadata\n  path 'gisaid_metadata.nextstrain.tsv' , emit: nextstrain_metadata\n  path 'gisaid_filtering_stats.json'    , emit: stats\n\n  script:                                                             \n  def region_args = (params.gisaid_region) ? \"--region ${params.gisaid_region}\" : \"\"\n  def country_args = (params.gisaid_country) ? \"--country ${params.gisaid_country}\" : \"\"\n  \"\"\"\n  filter_gisaid.py \\\\\n    $sequences \\\\\n    $gisaid_sequences \\\\\n    $gisaid_metadata \\\\\n    $lineage_report \\\\\n    --min-length ${params.gisaid_min_length} \\\\\n    --max-length ${params.gisaid_max_length} \\\\\n    --max-ambig ${params.gisaid_max_ambig} \\\\\n    --max-gisaid-seqs ${params.max_gisaid_filtered_seqs} \\\\\n    $region_args $country_args \\\\\n    --fasta-output gisaid_sequences.filtered.fasta \\\\\n    --filtered-metadata gisaid_metadata.filtered.tsv \\\\\n    --nextstrain-metadata gisaid_metadata.nextstrain.tsv \\\\\n    --statistics-output gisaid_filtering_stats.json\n  \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "  def region_args = (params.gisaid_region) ? \"--region ${params.gisaid_region}\" : \"\"\n  def country_args = (params.gisaid_country) ? \"--country ${params.gisaid_country}\" : \"\"\n  \"\"\"\n  filter_gisaid.py \\\\\n    $sequences \\\\\n    $gisaid_sequences \\\\\n    $gisaid_metadata \\\\\n    $lineage_report \\\\\n    --min-length ${params.gisaid_min_length} \\\\\n    --max-length ${params.gisaid_max_length} \\\\\n    --max-ambig ${params.gisaid_max_ambig} \\\\\n    --max-gisaid-seqs ${params.max_gisaid_filtered_seqs} \\\\\n    $region_args $country_args \\\\\n    --fasta-output gisaid_sequences.filtered.fasta \\\\\n    --filtered-metadata gisaid_metadata.filtered.tsv \\\\\n    --nextstrain-metadata gisaid_metadata.nextstrain.tsv \\\\\n    --statistics-output gisaid_filtering_stats.json\n  \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sequences",
            "gisaid_sequences",
            "gisaid_metadata",
            "lineage_report"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "label 'process_filter_scripts'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0' } else { container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "NEXTALIGN": {
        "name_process": "NEXTALIGN",
        "string_process": "\nprocess NEXTALIGN {\n  label 'process_high_cpu_low_mem'\n  publishDir \"${params.outdir}\",\n      mode: params.publish_dir_mode,\n      saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n  conda (params.enable_conda ? 'bioconda::nextalign=0.2.0' : null)\n  if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n    container 'https://depot.galaxyproject.org/singularity/nextalign:0.2.0--h9ee0642_1'\n  } else {\n    container 'quay.io/biocontainers/nextalign:0.2.0--h9ee0642_1'\n  }\n\n  input:\n  path(sequences)\n  path(reference)\n\n  output:\n  path \"sequences.nextalign.fasta\" , emit: fasta\n  path \"nextalign.insertions.csv\", emit: insertions\n  path \"*.version.txt\"           , emit: version\n\n  script:\n  def software = getSoftwareName(task.process)\n  \"\"\"\n  nextalign \\\\\n    --sequences=${sequences} \\\\\n    --reference=${reference} \\\\\n    --jobs ${task.cpus} \\\\\n    --output-fasta=sequences.nextalign.fasta \\\\\n    --include-reference \\\\\n    --output-insertions nextalign.insertions.csv\n\n  nextalign --version > ${software}.version.txt\n  \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "  def software = getSoftwareName(task.process)\n  \"\"\"\n  nextalign \\\\\n    --sequences=${sequences} \\\\\n    --reference=${reference} \\\\\n    --jobs ${task.cpus} \\\\\n    --output-fasta=sequences.nextalign.fasta \\\\\n    --include-reference \\\\\n    --output-insertions nextalign.insertions.csv\n\n  nextalign --version > ${software}.version.txt\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sequences",
            "reference"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "label 'process_high_cpu_low_mem'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? 'bioconda::nextalign=0.2.0' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/nextalign:0.2.0--h9ee0642_1' } else { container 'quay.io/biocontainers/nextalign:0.2.0--h9ee0642_1' }"
        ],
        "when": "",
        "stub": ""
    },
    "FILTER_MSA": {
        "name_process": "FILTER_MSA",
        "string_process": "\nprocess FILTER_MSA {\n  label 'process_filter_scripts'\n  publishDir \"${params.outdir}\",\n      mode: params.publish_dir_mode,\n      saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n                                                                               \n  conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null)\n  if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n    container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0'\n  } else {\n    container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0'\n  }\n\n  input:\n  path(msa)\n  path(lineage_report)\n  path(metadata)\n\n  output:\n  path \"msa.filtered.fasta\", emit: fasta\n  path \"metadata.msa.tsv\"  , emit: metadata\n\n  script:                                                             \n  \"\"\"\n  filter_msa.py \\\\\n    --input-fasta $msa \\\\\n    --input-metadata $metadata \\\\\n    --lineage-report $lineage_report \\\\\n    --ref-name ${params.reference_name} \\\\\n    --country ${params.gisaid_focus_country} \\\\\n    --max-seqs ${params.max_msa_seqs} \\\\\n    --output-fasta msa.filtered.fasta \\\\\n    --output-metadata metadata.msa.tsv\n  \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "  \"\"\"\n  filter_msa.py \\\\\n    --input-fasta $msa \\\\\n    --input-metadata $metadata \\\\\n    --lineage-report $lineage_report \\\\\n    --ref-name ${params.reference_name} \\\\\n    --country ${params.gisaid_focus_country} \\\\\n    --max-seqs ${params.max_msa_seqs} \\\\\n    --output-fasta msa.filtered.fasta \\\\\n    --output-metadata metadata.msa.tsv\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "msa",
            "lineage_report",
            "metadata"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "label 'process_filter_scripts'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0' } else { container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "NEXTCLADE": {
        "name_process": "NEXTCLADE",
        "string_process": "\nprocess NEXTCLADE {\n    label 'process_high_cpu_medium_mem'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::nextclade_js=0.14.4\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n      container 'https://depot.galaxyproject.org/singularity/nextclade_js:0.14.4--h9ee0642_0'\n    } else {\n      container 'quay.io/biocontainers/nextclade_js:0.14.4--h9ee0642_0'\n    }\n\n\n    input:\n    path(fasta)\n    val output_format\n\n    output:\n    path(\"nextclade.csv\")      , optional:true, emit: csv\n    path(\"nextclade.json\")      , optional:true, emit: json\n    path(\"nextclade.tree.json\") , optional:true, emit: json_tree\n    path(\"nextclade.tsv\")       , optional:true, emit: tsv\n    path(\"nextclade.clades.tsv\"), optional:true, emit: tsv_clades\n    path \"*.version.txt\"                         , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def format   = output_format\n    if (!(format in ['json', 'csv', 'tsv', 'tree', 'tsv-clades-only'])) {\n        format = 'json'\n    }\n    def extension = format\n    if (format in ['tsv-clades-only']) {\n        extension = '.clades.tsv'\n    } else if (format in ['tree']) {\n        extension = 'tree.json'\n    }\n    \"\"\"\n    nextclade \\\\\n        $options.args \\\\\n        --jobs $task.cpus \\\\\n        --input-fasta $fasta \\\\\n        --output-${format} nextclade.${extension}\n\n    echo \\$(nextclade --version 2>&1) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    def software = getSoftwareName(task.process)\n    def format   = output_format\n    if (!(format in ['json', 'csv', 'tsv', 'tree', 'tsv-clades-only'])) {\n        format = 'json'\n    }\n    def extension = format\n    if (format in ['tsv-clades-only']) {\n        extension = '.clades.tsv'\n    } else if (format in ['tree']) {\n        extension = 'tree.json'\n    }\n    \"\"\"\n    nextclade \\\\\n        $options.args \\\\\n        --jobs $task.cpus \\\\\n        --input-fasta $fasta \\\\\n        --output-${format} nextclade.${extension}\n\n    echo \\$(nextclade --version 2>&1) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "DEFormats"
        ],
        "tools_url": [
            "https://bio.tools/deformats"
        ],
        "tools_dico": [
            {
                "name": "DEFormats",
                "uri": "https://bio.tools/deformats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Covert between different data formats used by differential gene expression analysis tools.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/DEFormats.html"
            }
        ],
        "inputs": [
            "fasta",
            "output_format"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "label 'process_high_cpu_medium_mem'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::nextclade_js=0.14.4\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/nextclade_js:0.14.4--h9ee0642_0' } else { container 'quay.io/biocontainers/nextclade_js:0.14.4--h9ee0642_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_METADATA": {
        "name_process": "MERGE_METADATA",
        "string_process": "\nprocess MERGE_METADATA{\n  publishDir \"${params.outdir}\",\n      mode: params.publish_dir_mode,\n      saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n  conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null)\n  if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n    container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0'\n  } else {\n    container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0'\n  }\n\n  input:\n  path(gisaid_metadata)\n  path(aa_mutation_matrix)\n  path(pangolin_report)\n\n  output:\n  path \"metadata.merged.tsv\"\n\n  script:                                                             \n  def aa_mutation_matrix_opt = (aa_mutation_matrix) ? \"--aa-mutation-matrix $aa_mutation_matrix\" : \"\"\n  def select_metadata_fields = (params.select_gisaid_metadata) ? \"--select-metadata-fields \\\"${params.select_gisaid_metadata}\\\"\" : \"\"\n  \"\"\"\n  merge_metadata.py \\\\\n    $gisaid_metadata \\\\\n    $pangolin_report \\\\\n    $aa_mutation_matrix_opt $select_metadata_fields \\\\\n    --metadata-output metadata.merged.tsv\n  \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "  def aa_mutation_matrix_opt = (aa_mutation_matrix) ? \"--aa-mutation-matrix $aa_mutation_matrix\" : \"\"\n  def select_metadata_fields = (params.select_gisaid_metadata) ? \"--select-metadata-fields \\\"${params.select_gisaid_metadata}\\\"\" : \"\"\n  \"\"\"\n  merge_metadata.py \\\\\n    $gisaid_metadata \\\\\n    $pangolin_report \\\\\n    $aa_mutation_matrix_opt $select_metadata_fields \\\\\n    --metadata-output metadata.merged.tsv\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gisaid_metadata",
            "aa_mutation_matrix",
            "pangolin_report"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0' } else { container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "PREPARE_INPUT_SEQUENCES": {
        "name_process": "PREPARE_INPUT_SEQUENCES",
        "string_process": "\nprocess PREPARE_INPUT_SEQUENCES {\n  label 'process_low'\n  publishDir \"${params.outdir}\",\n      mode: params.publish_dir_mode,\n      saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n  conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null)\n  if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n    container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0'\n  } else {\n    container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0'\n  }\n\n\n  input:\n  path(fasta)\n\n  output:\n  path 'input_sequences.correctedID.fasta' , emit: fasta\n\n  script:\n  \"\"\"\n  prepare_input_sequences.py \\\\\n      $fasta \\\\\n      --fasta-output input_sequences.correctedID.fasta\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  prepare_input_sequences.py \\\\\n      $fasta \\\\\n      --fasta-output input_sequences.correctedID.fasta\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0' } else { container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "IQTREE": {
        "name_process": "IQTREE",
        "string_process": "\nprocess IQTREE {\n  label 'process_iqtree'\n  publishDir \"${params.outdir}\",\n      mode: params.publish_dir_mode,\n      saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n  conda (params.enable_conda ? 'bioconda::iqtree=2.1.4_beta' : null)\n  if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n    container 'https://depot.galaxyproject.org/singularity/iqtree:2.1.4_beta--hdcc8f71_0'\n  } else {\n    container 'quay.io/biocontainers/iqtree:2.1.4_beta--hdcc8f71_0'\n  }\n\n  input:\n  path(msa)\n\n  output:\n  path 'iqtree-*.iqtree'  , emit: report\n  path 'iqtree-*.treefile', emit: treefile\n  path 'iqtree-*.mldist'  , emit: distance\n  path 'iqtree-*.log'     , emit: log\n  path '*.version.txt'    , emit: version\n\n  script:\n  def software = getSoftwareName(task.process)\n  \"\"\"\n  iqtree \\\\\n      $options.args \\\\\n      -s ${msa} \\\\\n      -o ${params.reference_name} \\\\\n      -T ${task.cpus} \\\\\n      -m ${params.substitution_model} \\\\\n      --prefix iqtree-${params.reference_name}-${params.substitution_model}\n\n  (iqtree --version 2>&1) | head -n1 | sed -E 's/^IQ-TREE multicore version (\\\\S+) .*/\\\\1/' > ${software}.version.txt\n  \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "  def software = getSoftwareName(task.process)\n  \"\"\"\n  iqtree \\\\\n      $options.args \\\\\n      -s ${msa} \\\\\n      -o ${params.reference_name} \\\\\n      -T ${task.cpus} \\\\\n      -m ${params.substitution_model} \\\\\n      --prefix iqtree-${params.reference_name}-${params.substitution_model}\n\n  (iqtree --version 2>&1) | head -n1 | sed -E 's/^IQ-TREE multicore version (\\\\S+) .*/\\\\1/' > ${software}.version.txt\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "msa"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "label 'process_iqtree'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? 'bioconda::iqtree=2.1.4_beta' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/iqtree:2.1.4_beta--hdcc8f71_0' } else { container 'quay.io/biocontainers/iqtree:2.1.4_beta--hdcc8f71_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "SHIPTV_METADATA": {
        "name_process": "SHIPTV_METADATA",
        "string_process": "\nprocess SHIPTV_METADATA {\n  publishDir \"${params.outdir}\",\n      mode: params.publish_dir_mode,\n      saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n  conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null)\n  if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n    container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0'\n  } else {\n    container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0'\n  }\n\n  input:\n  path(newick)\n  path(aa_mutation_matrix)\n  path(lineage_report)\n\n  output:\n  path \"leaflist\"           , emit: leaflist\n  path \"metadata.merged.tsv\", emit: metadata\n\n  script:                                                             \n  def aa_mutation_matrix_opt = (aa_mutation_matrix) ? \"--aa-mutation-matrix $aa_mutation_matrix\" : \"\"\n  \"\"\"\n  shiptv_metadata.py \\\\\n    $newick \\\\\n    $lineage_report \\\\\n    $aa_mutation_matrix_opt \\\\\n    --leaflist leaflist \\\\\n    --metadata-output metadata.merged.tsv\n  \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "  def aa_mutation_matrix_opt = (aa_mutation_matrix) ? \"--aa-mutation-matrix $aa_mutation_matrix\" : \"\"\n  \"\"\"\n  shiptv_metadata.py \\\\\n    $newick \\\\\n    $lineage_report \\\\\n    $aa_mutation_matrix_opt \\\\\n    --leaflist leaflist \\\\\n    --metadata-output metadata.merged.tsv\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "newick",
            "aa_mutation_matrix",
            "lineage_report"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0' } else { container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "PRUNE_TREE": {
        "name_process": "PRUNE_TREE",
        "string_process": "\nprocess PRUNE_TREE {\n                                    \n  publishDir \"${params.outdir}\",\n      mode: params.publish_dir_mode,\n      saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n                                                                               \n  conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null)\n  if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n    container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0'\n  } else {\n    container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0'\n  }\n\n  input:\n  path (newick)\n  path (lineage_report)\n  path (metadata)\n\n  output:\n  path \"leaflist\"             , emit: leaflist\n  path \"metadata.leaflist.tsv\", emit: metadata\n\n  script:                                                             \n  \"\"\"\n  prune_tree.py \\\\\n    $newick \\\\\n    $metadata \\\\\n    --lineage-report $lineage_report \\\\\n    --ref-name ${params.reference_name} \\\\\n    --leaflist leaflist \\\\\n    --metadata-output metadata.leaflist.tsv \\\\\n    --max-taxa ${params.max_taxa}\n  \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "  \"\"\"\n  prune_tree.py \\\\\n    $newick \\\\\n    $metadata \\\\\n    --lineage-report $lineage_report \\\\\n    --ref-name ${params.reference_name} \\\\\n    --leaflist leaflist \\\\\n    --metadata-output metadata.leaflist.tsv \\\\\n    --max-taxa ${params.max_taxa}\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "newick",
            "lineage_report",
            "metadata"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::shiptv=0.4.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/shiptv:0.4.1--pyh5e36f6f_0' } else { container 'quay.io/biocontainers/shiptv:0.4.1--pyh5e36f6f_0' }"
        ],
        "when": "",
        "stub": ""
    },
    "PHYLOGENETICTREE_SNPS": {
        "name_process": "PHYLOGENETICTREE_SNPS",
        "string_process": "\nprocess PHYLOGENETICTREE_SNPS {\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::bioconductor-ggtree=3.0.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n      container 'https://depot.galaxyproject.org/singularity/bioconductor-ggtree:3.0.1--r41hdfd78af_0'\n    } else {\n      container 'quay.io/biocontainers/bioconductor-ggtree:3.0.1--r41hdfd78af_0'\n    }\n\n\n    input:\n    path (newick)\n    path (alleles)\n    path (lineage_report)\n\n    output:\n    path \"phylogentic_tree_snps.pdf\"\n\n    script:                                                             \n    \"\"\"\n    phylogenetic_tree_snps.r phylogentic_tree_snps.pdf ${newick} ${alleles} ${lineage_report}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    phylogenetic_tree_snps.r phylogentic_tree_snps.pdf ${newick} ${alleles} ${lineage_report}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "newick",
            "alleles",
            "lineage_report"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nhhaidee__scovtree",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::bioconductor-ggtree=3.0.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/bioconductor-ggtree:3.0.1--r41hdfd78af_0' } else { container 'quay.io/biocontainers/bioconductor-ggtree:3.0.1--r41hdfd78af_0' }"
        ],
        "when": "",
        "stub": ""
    }
}
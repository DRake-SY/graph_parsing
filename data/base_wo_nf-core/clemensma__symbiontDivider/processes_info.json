{
    "RAWQC": {
        "name_process": "RAWQC",
        "string_process": "\nprocess RAWQC {\n\n       \n                            \n                                                \n      \n\n                                          \n    publishDir \"${params.output}/${params.job_name}/quality_control\", mode: 'copy'\n\n                    \n    label 'fast'\n\n                                                                \n    errorStrategy 'finish'\n\n                         \n    tag \"${params.job_name}\"\n\n    input:\n                                                                               \n    tuple val(name), path(reads)\n\n    output:\n                                                                    \n    path '*.html'\n\n    when:\n                                                        \n    ! skip_qc\n\n    script:\n                                                                                                         \n    \"\"\"\n    fastqc --threads ${task.cpus} --quiet ${reads[0]} ${reads[1]}\n    \"\"\"\n\n}",
        "nb_lignes_process": 37,
        "string_script": "    \"\"\"\n    fastqc --threads ${task.cpus} --quiet ${reads[0]} ${reads[1]}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "name",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "clemensma__symbiontDivider",
        "directive": [
            "publishDir \"${params.output}/${params.job_name}/quality_control\", mode: 'copy'",
            "label 'fast'",
            "errorStrategy 'finish'",
            "tag \"${params.job_name}\""
        ],
        "when": "! skip_qc",
        "stub": ""
    },
    "TRIMMING": {
        "name_process": "TRIMMING",
        "string_process": "\nprocess TRIMMING {\n\n       \n                            \n                                                \n      \n    \n                    \n    label 'normal'\n\n                         \n    tag \"${params.job_name}\"\n\n    input:\n                                                                               \n    tuple val(name), path(reads)\n\n    output:\n                                                                                                                       \n    tuple val(\"${reads[0].baseName}\"), path('*.fq*'), emit: trimmed_reads\n\n    when:\n                                                                 \n    ! params.skip_trimming\n\n    script:\n                                                                                              \n\n    flagsTrimming = \"--quality $params.trim_quality \\\n--length $params.trim_length --cores ${task.cpus}\"\n    if ( params.trim_phred64 )\n      flagsTrimming += \" --phred64\"\n    if ( params.trim_clip_R1 )\n      flagsTrimming += \" --clip_R1 $params.trim_clip_R1\"\n    if ( params.trim_three_prime_clip_R1 )\n      flagsTrimming += \" --three_prime_clip_R1 $params.trim_three_prime_clip_R1\"\n    if ( params.trim_clip_R2 )\n      flagsTrimming += \" --clip_R2 $params.trim_clip_R2\"\n    if ( params.trim_three_prime_clip_R2 )\n      flagsTrimming += \" --three_prime_clip_R2 $params.trim_three_prime_clip_R2\"\n    flagsTrimming += \" --paired\"\n    commandTrimming = \"trim_galore $flagsTrimming ${reads[0]} ${reads[1]}\"\n\n    \"\"\"\n    $commandTrimming\n    \"\"\"\n\n}",
        "nb_lignes_process": 47,
        "string_script": "    flagsTrimming = \"--quality $params.trim_quality \\\n--length $params.trim_length --cores ${task.cpus}\"\n    if ( params.trim_phred64 )\n      flagsTrimming += \" --phred64\"\n    if ( params.trim_clip_R1 )\n      flagsTrimming += \" --clip_R1 $params.trim_clip_R1\"\n    if ( params.trim_three_prime_clip_R1 )\n      flagsTrimming += \" --three_prime_clip_R1 $params.trim_three_prime_clip_R1\"\n    if ( params.trim_clip_R2 )\n      flagsTrimming += \" --clip_R2 $params.trim_clip_R2\"\n    if ( params.trim_three_prime_clip_R2 )\n      flagsTrimming += \" --three_prime_clip_R2 $params.trim_three_prime_clip_R2\"\n    flagsTrimming += \" --paired\"\n    commandTrimming = \"trim_galore $flagsTrimming ${reads[0]} ${reads[1]}\"\n\n    \"\"\"\n    $commandTrimming\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "clemensma__symbiontDivider",
        "directive": [
            "label 'normal'",
            "tag \"${params.job_name}\""
        ],
        "when": "! params.skip_trimming",
        "stub": ""
    },
    "TRIMMEDQC": {
        "name_process": "TRIMMEDQC",
        "string_process": "\nprocess TRIMMEDQC {\n\n       \n                            \n                                                    \n      \n\n                                          \n    publishDir \"${params.output}/$params.job_name/quality_control\", mode: 'copy'\n\n                    \n    label 'fast'\n\n                                                                \n    errorStrategy 'finish'\n\n                         \n    tag \"$params.job_name\"\n\n    input:\n                                                                                   \n    tuple val(name), path(reads)\n\n    output:\n                                                                    \n    path '*.html'\n\n    when:\n                                                                       \n    ! skip_qc && ! params.skip_trimming\n\n    script:\n                                                                                                         \n    \"\"\"\n    fastqc --threads ${task.cpus} --quiet ${reads[0]} ${reads[1]}\n    \"\"\"\n\n}",
        "nb_lignes_process": 37,
        "string_script": "    \"\"\"\n    fastqc --threads ${task.cpus} --quiet ${reads[0]} ${reads[1]}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "name",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "clemensma__symbiontDivider",
        "directive": [
            "publishDir \"${params.output}/$params.job_name/quality_control\", mode: 'copy'",
            "label 'fast'",
            "errorStrategy 'finish'",
            "tag \"$params.job_name\""
        ],
        "when": "! skip_qc && ! params.skip_trimming",
        "stub": ""
    },
    "DENOVOASSEMBLY": {
        "name_process": "DENOVOASSEMBLY",
        "string_process": "\nprocess DENOVOASSEMBLY {\n\n       \n                            \n                                              \n      \n\n                    \n    label 'big_mem'\n\n                         \n    tag \"${params.job_name}\"\n\n    input:\n                                                                                       \n    tuple val(name), path(reads)\n    val kmers\n\n    output:\n                                                                                                             \n    tuple val(\"${reads[0].baseName}\"), path('scaffolds.fasta')\n\n    script:\n                                                                  \n    kmersFormatted = kmers.toString().replaceAll(\"[ \\\\[\\\\]]\", \"\")\n    additionalSpadesFlags = \"\"\n    if ( params.meta )\n        additionalSpadesFlags += \"--meta \\\\\\n\"\n\n                                                                                           \n    \"\"\"\n    spades.py -o . -1 ${reads[0]} -2 ${reads[1]} --threads ${task.cpus} --memory ${task.memory.toGiga()} -k \"${kmersFormatted}\" ${additionalSpadesFlags} --disable-gzip-output\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    kmersFormatted = kmers.toString().replaceAll(\"[ \\\\[\\\\]]\", \"\")\n    additionalSpadesFlags = \"\"\n    if ( params.meta )\n        additionalSpadesFlags += \"--meta \\\\\\n\"\n\n                                                                                           \n    \"\"\"\n    spades.py -o . -1 ${reads[0]} -2 ${reads[1]} --threads ${task.cpus} --memory ${task.memory.toGiga()} -k \"${kmersFormatted}\" ${additionalSpadesFlags} --disable-gzip-output\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "reads",
            "kmers"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "clemensma__symbiontDivider",
        "directive": [
            "label 'big_mem'",
            "tag \"${params.job_name}\""
        ],
        "when": "",
        "stub": ""
    },
    "ENDOSYMBIONTCONTIGFILTERING": {
        "name_process": "ENDOSYMBIONTCONTIGFILTERING",
        "string_process": "\nprocess ENDOSYMBIONTCONTIGFILTERING {\n\n       \n                            \n                                                                                 \n      \n\n                                          \n    publishDir \"${params.output}/$params.job_name/endosymbiont_assembly\", mode: 'copy'\n    \n                    \n    label 'normal'\n\n                         \n    tag \"$params.job_name\"\n\n    input:\n                                                                                                 \n    tuple val(name), path(contigs)\n                                                                \n                                  \n\n    output:\n                                                                                                                                     \n    tuple val(name), path('endosymbiont_genome.fa'), emit: endosym_mapped\n\n    script:\n      \n                       \n                                                            \n                                                                                                               \n                                                                                                \n      \n    \"\"\"\n    cat $contigs | bfg \"cov_([1-9][3-9][0-9]*|[1-9][0-9][0-9]{1,}|[2-9][0-9])\\\\.[0-9]+\" > contigs.fa\n    makeblastdb -in ${params.endosymbiont_reference} -title endosymbiont -parse_seqids -dbtype nucl -hash_index -out db\n    blastn -query contigs.fa -db db -outfmt \"10 qseqid\" > seqid.txt\n    cat contigs.fa | bfg -F -f seqid.txt > endosymbiont_genome.fa\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    \"\"\"\n    cat $contigs | bfg \"cov_([1-9][3-9][0-9]*|[1-9][0-9][0-9]{1,}|[2-9][0-9])\\\\.[0-9]+\" > contigs.fa\n    makeblastdb -in ${params.endosymbiont_reference} -title endosymbiont -parse_seqids -dbtype nucl -hash_index -out db\n    blastn -query contigs.fa -db db -outfmt \"10 qseqid\" > seqid.txt\n    cat contigs.fa | bfg -F -f seqid.txt > endosymbiont_genome.fa\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "name",
            "contigs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "clemensma__symbiontDivider",
        "directive": [
            "publishDir \"${params.output}/$params.job_name/endosymbiont_assembly\", mode: 'copy'",
            "label 'normal'",
            "tag \"$params.job_name\""
        ],
        "when": "",
        "stub": ""
    },
    "HOSTMITOGENOMEFILTERING": {
        "name_process": "HOSTMITOGENOMEFILTERING",
        "string_process": "\nprocess HOSTMITOGENOMEFILTERING {\n\n       \n                            \n                                                                                     \n      \n\n                                          \n    publishDir \"${params.output}/$params.job_name/host_assembly\", mode: 'copy'\n    \n                    \n    label 'normal'\n\n                                                                \n    errorStrategy 'finish'\n\n                         \n    tag \"$params.job_name\"\n\n    input:\n                                                                                                 \n    tuple val(name), path(host_assembled)\n\n    output:\n                                                                                                                                 \n    tuple val(name), path('mitogenome.fa'), emit: host_filtered\n    tuple val(name), path('mitogenome_candidates*')\n\n    when:\n                                                                                 \n    ! params.endosymbiont_only \n\n\n    script:\n      \n                       \n                                                  \n                                                                                            \n                            \n                                                                   \n                                                                                                                \n                                                                            \n                                                                                                                        \n                                                                                                       \n      \n    \"\"\"\n    touch mitogenome.fa\n    touch prev_seqid.txt\n    touch unique_seqid.txt\n    touch possible_mitogenomes.fa\n    cat $host_assembled | bfg \"cov_[1-9][0-9][0-9]{1,}\\\\.[0-9]+\" > possible_mitogenomes.fa\n    makeblastdb -in ${params.mitogenome_bait} -title cox1 -parse_seqids -dbtype nucl -hash_index -out db\n    echo \"blastdb created\"\n    for i in {${params.min_blast_wordsize}..${params.max_blast_wordsize}..1}\n      do\n        echo \"starting iteration with word size \\$i\"\n        cat unique_seqid.txt > prev_seqid.txt\n        blastn -query possible_mitogenomes.fa -db db -outfmt \"10 qseqid\" -word_size \\$i > seqid.txt\n        echo \"blastn complete\"\n        cat -n seqid.txt | sort -uk2 | sort -nk1 | cut -f2- | cat > unique_seqid.txt\n        echo \"made seqids unique\"\n        cat possible_mitogenomes.fa | bfg -f unique_seqid.txt > \"mitogenome_candidates_wordsize_\\$i.fa\"\n        if [[ \\$(wc -l unique_seqid.txt) = \"0 unique_seqid.txt\" ]];\n        then\n          cat possible_mitogenomes.fa | bfg -f prev_seqid.txt > mitogenome.fa\n          echo \"multiple possible mitogenomes found\"\n          break\n        fi\n        if [[ \\$(wc -l unique_seqid.txt) = \"1 unique_seqid.txt\" ]];\n        then\n          cat possible_mitogenomes.fa | bfg -f unique_seqid.txt > mitogenome.fa\n          echo \"mitogenome found\"\n          break\n        fi\n      done\n    echo \"process successful\"\n    \"\"\"\n}",
        "nb_lignes_process": 77,
        "string_script": "    \"\"\"\n    touch mitogenome.fa\n    touch prev_seqid.txt\n    touch unique_seqid.txt\n    touch possible_mitogenomes.fa\n    cat $host_assembled | bfg \"cov_[1-9][0-9][0-9]{1,}\\\\.[0-9]+\" > possible_mitogenomes.fa\n    makeblastdb -in ${params.mitogenome_bait} -title cox1 -parse_seqids -dbtype nucl -hash_index -out db\n    echo \"blastdb created\"\n    for i in {${params.min_blast_wordsize}..${params.max_blast_wordsize}..1}\n      do\n        echo \"starting iteration with word size \\$i\"\n        cat unique_seqid.txt > prev_seqid.txt\n        blastn -query possible_mitogenomes.fa -db db -outfmt \"10 qseqid\" -word_size \\$i > seqid.txt\n        echo \"blastn complete\"\n        cat -n seqid.txt | sort -uk2 | sort -nk1 | cut -f2- | cat > unique_seqid.txt\n        echo \"made seqids unique\"\n        cat possible_mitogenomes.fa | bfg -f unique_seqid.txt > \"mitogenome_candidates_wordsize_\\$i.fa\"\n        if [[ \\$(wc -l unique_seqid.txt) = \"0 unique_seqid.txt\" ]];\n        then\n          cat possible_mitogenomes.fa | bfg -f prev_seqid.txt > mitogenome.fa\n          echo \"multiple possible mitogenomes found\"\n          break\n        fi\n        if [[ \\$(wc -l unique_seqid.txt) = \"1 unique_seqid.txt\" ]];\n        then\n          cat possible_mitogenomes.fa | bfg -f unique_seqid.txt > mitogenome.fa\n          echo \"mitogenome found\"\n          break\n        fi\n      done\n    echo \"process successful\"\n    \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "G-BLASTN",
            "BreakSeq"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn",
            "https://bio.tools/breakseq"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            },
            {
                "name": "BreakSeq",
                "uri": "https://bio.tools/breakseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database of known human breakpoint junctions and software to search short reads against them.",
                "homepage": "http://sv.gersteinlab.org/breakseq/"
            }
        ],
        "inputs": [
            "name",
            "host_assembled"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "clemensma__symbiontDivider",
        "directive": [
            "publishDir \"${params.output}/$params.job_name/host_assembly\", mode: 'copy'",
            "label 'normal'",
            "errorStrategy 'finish'",
            "tag \"$params.job_name\""
        ],
        "when": "! params.endosymbiont_only",
        "stub": ""
    },
    "ENDOSYMBIONTGENOMEQUALITY": {
        "name_process": "ENDOSYMBIONTGENOMEQUALITY",
        "string_process": "\nprocess ENDOSYMBIONTGENOMEQUALITY {\n\n       \n                            \n                                                                   \n      \n\n                                          \n    publishDir \"${params.output}/$params.job_name/endosymbiont_assembly\", mode: 'copy'\n\n                    \n    label 'normal'\n\n                                                                \n    errorStrategy 'finish'\n\n                         \n    tag \"$params.job_name\"\n\n    input:\n                                                                                                                     \n    tuple val(name), path(endosym)\n\n    output:\n                                            \n    path 'qc/*'\n\n    when:\n                                                                                  \n    ! params.skip_assembly_quality\n\n    script:\n                                                          \n    \"\"\"\n    busco -i $endosym -m genome -o qc -l rickettsiales_odb10 --offline --download_path $project_dir/seqs/busco_data\n    \"\"\"\n\n}",
        "nb_lignes_process": 37,
        "string_script": "    \"\"\"\n    busco -i $endosym -m genome -o qc -l rickettsiales_odb10 --offline --download_path $project_dir/seqs/busco_data\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BUSCO"
        ],
        "tools_url": [
            "https://bio.tools/busco"
        ],
        "tools_dico": [
            {
                "name": "BUSCO",
                "uri": "https://bio.tools/busco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Provides measures for quantitative assessment of genome assembly, gene set, and transcriptome completeness based on evolutionarily informed expectations of gene content from near-universal single-copy orthologs.",
                "homepage": "http://busco.ezlab.org/"
            }
        ],
        "inputs": [
            "name",
            "endosym"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "clemensma__symbiontDivider",
        "directive": [
            "publishDir \"${params.output}/$params.job_name/endosymbiont_assembly\", mode: 'copy'",
            "label 'normal'",
            "errorStrategy 'finish'",
            "tag \"$params.job_name\""
        ],
        "when": "! params.skip_assembly_quality",
        "stub": ""
    },
    "HOSTMITOGENOMEQUALITY": {
        "name_process": "HOSTMITOGENOMEQUALITY",
        "string_process": "\nprocess HOSTMITOGENOMEQUALITY {\n\n       \n                            \n                                                               \n      \n\n                                          \n    publishDir \"${params.output}/$params.job_name/host_assembly\", mode: 'copy'\n\n                    \n    label 'normal'\n\n                                                                \n    errorStrategy 'finish'\n\n                         \n    tag \"$params.job_name\"\n\n    input:\n                                                                                                                 \n    tuple val(name), path(host)\n\n    output:\n                                            \n    file '*'\n\n    when:\n                                                                                                                                  \n    ! params.skip_assembly_quality && ! params.endosymbiont_only\n\n    script:\n                                                          \n    \"\"\"\n    quast.py $host\n    \"\"\"\n\n}",
        "nb_lignes_process": 37,
        "string_script": "    \"\"\"\n    quast.py $host\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "host"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "clemensma__symbiontDivider",
        "directive": [
            "publishDir \"${params.output}/$params.job_name/host_assembly\", mode: 'copy'",
            "label 'normal'",
            "errorStrategy 'finish'",
            "tag \"$params.job_name\""
        ],
        "when": "! params.skip_assembly_quality && ! params.endosymbiont_only",
        "stub": ""
    },
    "READMAPPINGFORCOVERAGE": {
        "name_process": "READMAPPINGFORCOVERAGE",
        "string_process": "\nprocess READMAPPINGFORCOVERAGE{\n\n       \n                            \n                                                                                     \n      \n\n                    \n    label 'big_mem'\n\n                                                                \n    errorStrategy 'finish'\n\n                         \n    tag \"$params.job_name\"\n\n    input:\n                                                                                       \n    tuple val(name), path(reads)\n                                                                                                                     \n    tuple val(name), path(assembled_endosymbiont)\n\n    output:\n                                                \n    path 'log.txt', emit: alignment_stats\n\n    script:\n      \n                       \n                                                         \n                                                                                        \n                                               \n      \n    \"\"\"\n    bowtie2-build ${assembled_endosymbiont} endosymbiont\n    bowtie2 -x endosymbiont -p ${task.cpus} -1 ${reads[0]} -2 ${reads[1]} -S ${name}_endosym.sam --very-sensitive\n    cat .command.log > log.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 39,
        "string_script": "    \"\"\"\n    bowtie2-build ${assembled_endosymbiont} endosymbiont\n    bowtie2 -x endosymbiont -p ${task.cpus} -1 ${reads[0]} -2 ${reads[1]} -S ${name}_endosym.sam --very-sensitive\n    cat .command.log > log.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Rbowtie2"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            }
        ],
        "inputs": [
            "name",
            "reads",
            "name",
            "assembled_endosymbiont"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "clemensma__symbiontDivider",
        "directive": [
            "label 'big_mem'",
            "errorStrategy 'finish'",
            "tag \"$params.job_name\""
        ],
        "when": "",
        "stub": ""
    },
    "COVERAGEESTIMATE": {
        "name_process": "COVERAGEESTIMATE",
        "string_process": "\nprocess COVERAGEESTIMATE {\n\n       \n                            \n                                                                                                                                                \n      \n\n                                          \n    publishDir \"${params.output}/$params.job_name\", mode: 'copy'\n\n                    \n    label 'normal'\n\n                                                                \n    errorStrategy 'finish'\n\n                         \n    tag \"$params.job_name\"\n\n    input:\n                                         \n    path stats\n                                                                                       \n    tuple val(name_dump), path(reads)\n                                                              \n    tuple val(name), path(assembled_endosymbiont)\n\n    output:\n                                                                         \n    path 'coverage.txt'\n\n    script:\n      \n                       \n                                                                 \n                                                    \n                                                        \n                                                       \n      \n    \"\"\"\n    grep -v \">\" $assembled_endosymbiont | tr -d \"\\n\" | wc -c > host_count.txt\n    cat $stats > alignment_rate.txt\n    cat ${reads[0]} | paste - - - - | cut -f 2 | tr -d '\\n' | wc -c > base_count.txt\n    python3 $project_dir/bin/coverage_estimate.py\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    \"\"\"\n    grep -v \">\" $assembled_endosymbiont | tr -d \"\\n\" | wc -c > host_count.txt\n    cat $stats > alignment_rate.txt\n    cat ${reads[0]} | paste - - - - | cut -f 2 | tr -d '\\n' | wc -c > base_count.txt\n    python3 $project_dir/bin/coverage_estimate.py\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "stats",
            "name_dump",
            "reads",
            "name",
            "assembled_endosymbiont"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "clemensma__symbiontDivider",
        "directive": [
            "publishDir \"${params.output}/$params.job_name\", mode: 'copy'",
            "label 'normal'",
            "errorStrategy 'finish'",
            "tag \"$params.job_name\""
        ],
        "when": "",
        "stub": ""
    },
    "CHECKENDOSYMBIONT": {
        "name_process": "CHECKENDOSYMBIONT",
        "string_process": "\nprocess CHECKENDOSYMBIONT {\n\n       \n                            \n                                                            \n      \n\n                                          \n    publishDir \"${params.output}/$params.job_name/endosymbiont_assembly\", mode: 'copy'\n\n                    \n    label 'big_mem'\n\n                                                                \n    errorStrategy 'finish'\n\n                         \n    tag \"$params.job_name\"\n\n    input:\n                                                    \n    tuple val(name), path(endosymbiont_genome)\n\n    output:\n    path '*'\n\n    script:\n    \"\"\"\n    checkm lineage_wf . checkm_output -t ${task.cpus} -x fa\n    \"\"\"\n\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    checkm lineage_wf . checkm_output -t ${task.cpus} -x fa\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "endosymbiont_genome"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "clemensma__symbiontDivider",
        "directive": [
            "publishDir \"${params.output}/$params.job_name/endosymbiont_assembly\", mode: 'copy'",
            "label 'big_mem'",
            "errorStrategy 'finish'",
            "tag \"$params.job_name\""
        ],
        "when": "",
        "stub": ""
    }
}
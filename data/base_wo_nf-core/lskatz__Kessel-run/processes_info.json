{
    "assembly": {
        "name_process": "assembly",
        "string_process": "\nprocess assembly {\n\n  input:\n  set val(samplename), file(fastqs) from fastqChannel\n\n  output:\n  file(\"${samplename}.fa\") into asmChannel\n\n  shell:\n  '''\n  gbMemory=$(echo \"!{task.memory}\" | sed 's/[A-Za-z]//')\n  depth=100 # can change for debugging purposes. Default:100\n  # ensure R1 and R2 are correct\n  R1=\"!{fastqs[0]}\"\n  R2=\"!{fastqs[1]}\"\n  export TMPDIR=$PWD/tmp\n  if [ -e /scratch ]; then\n      export TMPDIR=/scratch/$USER/scratch\n  fi\n  mkdir -pv $TMPDIR\n\n  shovilltemp=$TMPDIR/!{samplename}.shovill.tmp\n  outdir=$TMPDIR/!{samplename}.shovill.out\n\n  echo \"TMPDIR is $TMPDIR\"\n\n  shovill --check\n  echo =====\n  shovill --depth $depth --tmpdir $shovilltemp --outdir $outdir --R1 $R1 --R2 $R2 --assembler spades --ram $gbMemory --cpus !{task.cpus} --force --gsize !{params.genomesize}\n  cp -v $outdir/contigs.fa ./!{samplename}.fa\n  '''\n}",
        "nb_lignes_process": 31,
        "string_script": "  '''\n  gbMemory=$(echo \"!{task.memory}\" | sed 's/[A-Za-z]//')\n  depth=100 # can change for debugging purposes. Default:100\n  # ensure R1 and R2 are correct\n  R1=\"!{fastqs[0]}\"\n  R2=\"!{fastqs[1]}\"\n  export TMPDIR=$PWD/tmp\n  if [ -e /scratch ]; then\n      export TMPDIR=/scratch/$USER/scratch\n  fi\n  mkdir -pv $TMPDIR\n\n  shovilltemp=$TMPDIR/!{samplename}.shovill.tmp\n  outdir=$TMPDIR/!{samplename}.shovill.out\n\n  echo \"TMPDIR is $TMPDIR\"\n\n  shovill --check\n  echo =====\n  shovill --depth $depth --tmpdir $shovilltemp --outdir $outdir --R1 $R1 --R2 $R2 --assembler spades --ram $gbMemory --cpus !{task.cpus} --force --gsize !{params.genomesize}\n  cp -v $outdir/contigs.fa ./!{samplename}.fa\n  '''",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "shovill"
        ],
        "tools_url": [
            "https://bio.tools/shovill"
        ],
        "tools_dico": [
            {
                "name": "shovill",
                "uri": "https://bio.tools/shovill",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Shovill is a pipeline for assembly of bacterial isolate genomes from Illumina paired-end reads.  Shovill uses SPAdes at its core, but alters the steps before and after the primary assembly step to get similar results in less time. Shovill also supports other assemblers like SKESA, Velvet and Megahit, so you can take advantage of the pre- and post-processing the Shovill provides with those too.",
                "homepage": "https://github.com/tseemann/shovill"
            }
        ],
        "inputs": [
            "fastqChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "asmChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "lskatz__Kessel-run",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "prepDatabase": {
        "name_process": "prepDatabase",
        "string_process": "\nprocess prepDatabase {\n\n  input:\n  path(in_db)\n\n  output:\n  path(\"mlst.db\") into dbChannel\n\n  shell:\n  '''\n  # Get a fresh copy of the database\n  cd !{in_db}\n  git status\n  git tag -l | grep v1\n  cd -\n  # Clone into a temporary target\n  git clone --branch v1 !{in_db} mlst.db.tmp\n  # ... and then when it is 100% complete, rename it\n  mv mlst.db.tmp mlst.db\n  '''\n}",
        "nb_lignes_process": 20,
        "string_script": "  '''\n  # Get a fresh copy of the database\n  cd !{in_db}\n  git status\n  git tag -l | grep v1\n  cd -\n  # Clone into a temporary target\n  git clone --branch v1 !{in_db} mlst.db.tmp\n  # ... and then when it is 100% complete, rename it\n  mv mlst.db.tmp mlst.db\n  '''",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_db"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dbChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "lskatz__Kessel-run",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "callAlleles": {
        "name_process": "callAlleles",
        "string_process": "\nprocess callAlleles {\n\n  input:\n  file(fasta) from asmChannel                             \n  path(\"mlst.db\") from dbChannel\n\n  output:\n  file(\"chewie.out/*/results_alleles.tsv\") into alleleCalls\n  path(\"mlst.modified.db\") into modifiedDbChannel\n\n  shell:\n  println \"Calling alleles on \"\n  println \"     $fasta\"\n  '''\n  # Copy all the assemblies over to an input folder\n  mkdir -v chewie.in\n  cp -nvL !{fasta} chewie.in\n  # Check env\n  which blastn\n  which chewBBACA.py\n  python3 --version\n  which python3\n\n  # Grab the database into a tmp folder\n  cp -rL mlst.db mlst.modified.db.tmp\n  # Allele calling on the tmp folder\n  chewBBACA.py AlleleCall -i chewie.in --schema-directory mlst.modified.db.tmp -o chewie.out --cpu !{task.cpus} --force-reset\n  # When the directory is all good and allele calling is all right, name it properly.\n  # Only name it properly when we are complete in this process.\n  mv mlst.modified.db.tmp mlst.modified.db\n  '''\n}",
        "nb_lignes_process": 31,
        "string_script": "  println \"Calling alleles on \"\n  println \"     $fasta\"\n  '''\n  # Copy all the assemblies over to an input folder\n  mkdir -v chewie.in\n  cp -nvL !{fasta} chewie.in\n  # Check env\n  which blastn\n  which chewBBACA.py\n  python3 --version\n  which python3\n\n  # Grab the database into a tmp folder\n  cp -rL mlst.db mlst.modified.db.tmp\n  # Allele calling on the tmp folder\n  chewBBACA.py AlleleCall -i chewie.in --schema-directory mlst.modified.db.tmp -o chewie.out --cpu !{task.cpus} --force-reset\n  # When the directory is all good and allele calling is all right, name it properly.\n  # Only name it properly when we are complete in this process.\n  mv mlst.modified.db.tmp mlst.modified.db\n  '''",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "whichdb"
        ],
        "tools_url": [
            "https://bio.tools/whichdb"
        ],
        "tools_dico": [
            {
                "name": "whichdb",
                "uri": "https://bio.tools/whichdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data acquisition"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3077",
                            "term": "Data collection"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Search all sequence databases for an entry and retrieve it.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/whichdb.html"
            }
        ],
        "inputs": [
            "asmChannel",
            "dbChannel"
        ],
        "nb_inputs": 2,
        "outputs": [
            "alleleCalls",
            "modifiedDbChannel"
        ],
        "nb_outputs": 2,
        "name_workflow": "lskatz__Kessel-run",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "markNewAlleles": {
        "name_process": "markNewAlleles",
        "string_process": "\nprocess markNewAlleles {\n  input:\n  path(\"mlst.modified.db\") from modifiedDbChannel\n\n  output:\n  stdout into newAllelesChannel\n\n  shell:\n  '''\n  (cd mlst.modified.db && git diff)\n  '''\n}",
        "nb_lignes_process": 11,
        "string_script": "  '''\n  (cd mlst.modified.db && git diff)\n  '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "modifiedDbChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "newAllelesChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "lskatz__Kessel-run",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "saveCalls": {
        "name_process": "saveCalls",
        "string_process": "\nprocess saveCalls {\n\n  publishDir \"${outdir}\", mode:'copy'\n\n  input:\n  file(alleles) from alleleCalls.collectFile(name:\"results_alleles.tsv\", newLine:true)\n\n  output:\n  file(\"results_alleles.tsv\") into results_alleles\n\n  shell:\n  '''\n  pwd\n  '''\n}",
        "nb_lignes_process": 14,
        "string_script": "  '''\n  pwd\n  '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alleleCalls"
        ],
        "nb_inputs": 1,
        "outputs": [
            "results_alleles"
        ],
        "nb_outputs": 1,
        "name_workflow": "lskatz__Kessel-run",
        "directive": [
            "publishDir \"${outdir}\", mode:'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "sum": {
        "name_process": "sum",
        "string_process": "\nprocess sum {\n    input:\n    val path from data_ch\n\n    output:\n    stdout into result\n\n    script:\n    \"\"\"\n    docker run sum-py \\$(cat $path)\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "    \"\"\"\n    docker run sum-py \\$(cat $path)\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "AUDocker"
        ],
        "tools_url": [
            "https://bio.tools/audocker"
        ],
        "tools_dico": [
            {
                "name": "AUDocker",
                "uri": "https://bio.tools/audocker",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0482",
                                    "term": "Protein-ligand docking"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0482",
                                    "term": "Ligand-binding simulation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A GUI for AutoDock Vina, it helps in virtual screening of huge number of ligands continuously. Helps in resumption of work in accidental shutdowns. This program can help you in docking several ligands automatically in to a prescribed protein receptor site.",
                "homepage": "http://sdisau.blogspot.kr/2011/04/audocker-10-easy-tool-for-virtual.html"
            }
        ],
        "inputs": [
            "data_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "result"
        ],
        "nb_outputs": 1,
        "name_workflow": "axshen__nextflow_examples",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "generate_filename": {
        "name_process": "generate_filename",
        "string_process": "\nprocess generate_filename {\n    input:\n        val names\n\n    output:\n        stdout emit: files\n\n    script:\n        \"\"\"\n        #!/usr/bin/env python3\n        print(\"${names}.txt\", end=\"\")\n        \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        #!/usr/bin/env python3\n        print(\"${names}.txt\", end=\"\")\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "names"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "axshen__nextflow_examples",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "whats_happening": {
        "name_process": "whats_happening",
        "string_process": "\nprocess whats_happening {\n    input:\n        val files\n\n    output:\n        stdout emit: stdout\n\n    script:\n        \"\"\"\n        #!/usr/bin/env python3\n        print(\"${files}\")\n        \"\"\" \n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        #!/usr/bin/env python3\n        print(\"${files}\")\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "axshen__nextflow_examples",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "generate": {
        "name_process": "generate",
        "string_process": "\nprocess generate {\n    output:\n        val \"${params.path}/${params.filename}\", emit: file\n    \n    script:\n        \"\"\"\n        #!/bin/bash\n        ls\n        \"\"\"    \n}",
        "nb_lignes_process": 9,
        "string_script": "        \"\"\"\n        #!/bin/bash\n        ls\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "axshen__nextflow_examples",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "printFiles": {
        "name_process": "printFiles",
        "string_process": "\nprocess printFiles {\n    input:\n        val files\n\n    output:\n        stdout emit: filesString\n    \n    script:\n        \"\"\"\n        #!/usr/bin/env python3\n\n        print('$files'.replace('[', '').replace(']', '').replace(',', ''))\n        \"\"\"    \n}",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        #!/usr/bin/env python3\n\n        print('$files'.replace('[', '').replace(']', '').replace(',', ''))\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "axshen__nextflow_examples",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "first_p": {
        "name_process": "first_p",
        "string_process": "\nprocess first_p {\n  echo true\n\n  input:\n    val constant\n    val input1\n    val input2\n\n  output:\n    val 1, emit: output1\n\n  script:\n  \"\"\"\n    rm -f /tmp/*.txt\n    echo first $input1 $input2 $constant\n    touch /tmp/1.txt\n    touch /tmp/2.txt\n    touch /tmp/3.txt\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n    rm -f /tmp/*.txt\n    echo first $input1 $input2 $constant\n    touch /tmp/1.txt\n    touch /tmp/2.txt\n    touch /tmp/3.txt\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "constant",
            "input1",
            "input2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "axshen__nextflow_examples",
        "directive": [
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "second_p": {
        "name_process": "second_p",
        "string_process": "\nprocess second_p {\n\n  input:\n    val input1\n\n  output:\n    val test, emit: output1\n\n  exec:\n    test = file(\"/tmp/*.txt\")\n}",
        "nb_lignes_process": 10,
        "string_script": "    test = file(\"/tmp/*.txt\")",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "PTest"
        ],
        "tools_url": [
            "https://bio.tools/ptest"
        ],
        "tools_dico": [
            {
                "name": "PTest",
                "uri": "https://bio.tools/ptest",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software for case-control genetic association studies in human gene mapping. The software is based on single-SNP p-values resulting from an association test, for example, the chi-square test comparing genotype or allele frequencies in cases and controls.",
                "homepage": "http://www.jurgott.org/linkage/PTest.html"
            }
        ],
        "inputs": [
            "input1"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "axshen__nextflow_examples",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "third_p": {
        "name_process": "third_p",
        "string_process": "\nprocess third_p {\n  echo true\n\n  input:\n    val input1\n\n  output:\n\n  script:\n  \"\"\"\n    echo third $input1\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "  \"\"\"\n    echo third $input1\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input1"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "axshen__nextflow_examples",
        "directive": [
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "what": {
        "name_process": "what",
        "string_process": "\nprocess what {\n    output:\n        stdout emit: stdout\n\n    script:\n        \"\"\"\n        #!/usr/bin/env python3\n        print(${params})\n        \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "        \"\"\"\n        #!/usr/bin/env python3\n        print(${params})\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "axshen__nextflow_examples",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "someMaths": {
        "name_process": "someMaths",
        "string_process": "\nprocess someMaths {\n    input:\n    val x from data_ch\n\n    output:\n    stdout into result\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python3\n    \n    x = int($x)\n    y = 3 * x ** 3 + 2 * x / x ** 2\n\n    print(y)\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python3\n    \n    x = int($x)\n    y = 3 * x ** 3 + 2 * x / x ** 2\n\n    print(y)\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "data_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "result"
        ],
        "nb_outputs": 1,
        "name_workflow": "axshen__nextflow_examples",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "otherMath": {
        "name_process": "otherMath",
        "string_process": "\nprocess otherMath {\n    input:\n    val path from file_ch\n\n    output:\n    stdout into pythonOutput\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python3\n\n    f = open(\"$path\", 'r')\n    print(f.read())\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python3\n\n    f = open(\"$path\", 'r')\n    print(f.read())\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pythonOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "axshen__nextflow_examples",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
{
    "check_single_paired": {
        "name_process": "check_single_paired",
        "string_process": "\nprocess check_single_paired { \n    \n    input: \n    file manifest from ch_single_pair\n\n    output: \n    file 'manifest_format.txt' into manifest_type\n    file 'data_type.txt' into dataType\n    \n    script:\n    \"\"\"\n    #!/usr/bin/env python3\n\n    import pandas as pd\n    import os \n\n    read_manifest = pd.read_table('${manifest}', index_col=0, sep='\\t+', engine='python')\n\n    if read_manifest.columns[0] == 'absolute-filepath':\n        print(\"single end analysis\")\n        format = \"SingleEndFastqManifestPhred33V2\"\n        data = \"SampleData[SequencesWithQuality]\"\n\n        with open(\"manifest_format.txt\", \"w\") as file:\n            file.write(format)\n\n        with open(\"data_type.txt\", \"w\") as d_file:\n            d_file.write(data)\n        print(format + \" \" + data)\n\n        \n    elif read_manifest.columns[0] == 'forward-absolute-filepath':\n        print(\"paired end analysis\")\n        format = \"PairedEndFastqManifestPhred33V2\"\n        data = \"SampleData[PairedEndSequencesWithQuality]\"\n        with open(\"manifest_format.txt\", \"w\") as file:\n            file.write(format)\n\n        with open(\"data_type.txt\", \"w\") as d_file:\n            d_file.write(data)\n        print(format + \" \" + data)\n    else:\n        print(\n            \"cannot determine if paired or single end, check manifest file\")\n        exit(1)\n\n    \n    \"\"\"\n    \n}",
        "nb_lignes_process": 49,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python3\n\n    import pandas as pd\n    import os \n\n    read_manifest = pd.read_table('${manifest}', index_col=0, sep='\\t+', engine='python')\n\n    if read_manifest.columns[0] == 'absolute-filepath':\n        print(\"single end analysis\")\n        format = \"SingleEndFastqManifestPhred33V2\"\n        data = \"SampleData[SequencesWithQuality]\"\n\n        with open(\"manifest_format.txt\", \"w\") as file:\n            file.write(format)\n\n        with open(\"data_type.txt\", \"w\") as d_file:\n            d_file.write(data)\n        print(format + \" \" + data)\n\n        \n    elif read_manifest.columns[0] == 'forward-absolute-filepath':\n        print(\"paired end analysis\")\n        format = \"PairedEndFastqManifestPhred33V2\"\n        data = \"SampleData[PairedEndSequencesWithQuality]\"\n        with open(\"manifest_format.txt\", \"w\") as file:\n            file.write(format)\n\n        with open(\"data_type.txt\", \"w\") as d_file:\n            d_file.write(data)\n        print(format + \" \" + data)\n    else:\n        print(\n            \"cannot determine if paired or single end, check manifest file\")\n        exit(1)\n\n    \n    \"\"\"",
        "nb_lignes_script": 37,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_single_pair"
        ],
        "nb_inputs": 1,
        "outputs": [
            "manifest_type",
            "dataType"
        ],
        "nb_outputs": 2,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "generate_seq_object": {
        "name_process": "generate_seq_object",
        "string_process": "\nprocess generate_seq_object{\n\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n\n    input: \n    file manifest from ch_make_qiime\n    file manifest_format from manifest_type\n    file data_type from dataType\n    path seqs from ch_make_qiime_seq\n\n    output: \n    file 'demux.qza' into qiime_obj\n\n    shell:\n    '''\n    DAT=$(head !{data_type})\n    MANI=$(head !{manifest_format})\n    module load  QIIME2/2020.11\n    qiime tools import \\\n    --type $DAT\\\n    --input-path !{manifest} \\\n    --output-path demux.qza \\\n    --input-format $MANI\n    '''\n}",
        "nb_lignes_process": 24,
        "string_script": "    '''\n    DAT=$(head !{data_type})\n    MANI=$(head !{manifest_format})\n    module load  QIIME2/2020.11\n    qiime tools import \\\n    --type $DAT\\\n    --input-path !{manifest} \\\n    --output-path demux.qza \\\n    --input-format $MANI\n    '''",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "ch_make_qiime",
            "manifest_type",
            "dataType",
            "ch_make_qiime_seq"
        ],
        "nb_inputs": 4,
        "outputs": [
            "qiime_obj"
        ],
        "nb_outputs": 1,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "SetupRPackages": {
        "name_process": "SetupRPackages",
        "string_process": "\nprocess SetupRPackages{\n                                     \n                       \n               \n    container \"docker://lorentzb/r_latest\"\n\n    output:\n    file \"set.txt\" into ch_r_wait\n\n    script:\n    \"\"\"\n    #!/usr/bin/env Rscript --vanilla\n    #Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS=\"true\")\n    if(!require(rmarkdown)) {install.packages(\"rmarkdown\", repos=\"http://cran.us.r-project.org\")}\n    if(!require(renv)) {install.packages(\"renv\",repos=\"http://cran.us.r-project.org\")}\n    renv::init()\n    if(!require(remotes)){install.packages(\"remotes\",repos=\"http://cran.us.r-project.org\")}\n    if(!require(devtools)){install.packages(\"devtools\",repos=\"http://cran.us.r-project.org\")}\n    if(!require(jamba)){remotes::install_github(\"jmw86069/jamba@0.0.6.900\")}\n    remotes::install_github(\"tidyverse/ggplot2@v3.3.2\")\n    remotes::install_github(\"vegandevs/vegan@v2.5-7\")\n    if(!require(ampvis2)){remotes::install_github(\"MadsAlbertsen/ampvis2@2.6.8\")}\n    if(!require(ggvegan)){remotes::install_github(\"gavinsimpson/ggvegan@4bc6ee9945dd9229ed486409c0acab9413b8c9af\")}\n    if(!require(ggConvexHull)){remotes::install_github(\"cmartin/ggConvexHull@660f4094da44dd500c3c0684b9c5c20c21ee823a\")}\n    \n    cat('done',file='set.txt', sep='\\n')\n    \"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    #!/usr/bin/env Rscript --vanilla\n    #Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS=\"true\")\n    if(!require(rmarkdown)) {install.packages(\"rmarkdown\", repos=\"http://cran.us.r-project.org\")}\n    if(!require(renv)) {install.packages(\"renv\",repos=\"http://cran.us.r-project.org\")}\n    renv::init()\n    if(!require(remotes)){install.packages(\"remotes\",repos=\"http://cran.us.r-project.org\")}\n    if(!require(devtools)){install.packages(\"devtools\",repos=\"http://cran.us.r-project.org\")}\n    if(!require(jamba)){remotes::install_github(\"jmw86069/jamba@0.0.6.900\")}\n    remotes::install_github(\"tidyverse/ggplot2@v3.3.2\")\n    remotes::install_github(\"vegandevs/vegan@v2.5-7\")\n    if(!require(ampvis2)){remotes::install_github(\"MadsAlbertsen/ampvis2@2.6.8\")}\n    if(!require(ggvegan)){remotes::install_github(\"gavinsimpson/ggvegan@4bc6ee9945dd9229ed486409c0acab9413b8c9af\")}\n    if(!require(ggConvexHull)){remotes::install_github(\"cmartin/ggConvexHull@660f4094da44dd500c3c0684b9c5c20c21ee823a\")}\n    \n    cat('done',file='set.txt', sep='\\n')\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "--vanilla",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ch_r_wait"
        ],
        "nb_outputs": 1,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "container \"docker://lorentzb/r_latest\""
        ],
        "when": "",
        "stub": ""
    },
    "VerifyManifest": {
        "name_process": "VerifyManifest",
        "string_process": "\nprocess VerifyManifest{\n    publishDir \"${params.outdir}\", mode: 'copy'\n    input:\n    file manifest from ch_mani_veri\n    path seqs_dir from ch_seqs_veri\n    file metadata from ch_meta_veri\n    val ioi from ch_ioi_veri\n\n    output:\n\n    file \"order_item_of_interest.csv\" into ch_format_ioi_order\n\n                                                                                                           \n                                                                                \n      \n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python3\n    import os \n    from pathlib import Path\n    from pathlib import PurePath\n    import pandas as pd \n    import csv \n\n    try:\n        read_metadata = pd.read_table('${metadata}', index_col=0, sep='\\t')\n    except FileNotFoundError:\n        exit(1)\n\n    try:\n        read_order = pd.read_table('${baseDir}/order_item_of_interest.csv', index_col=0, sep=',')\n    except FileNotFoundError:\n        iois = list(pd.Series.unique(read_metadata['${ioi}']))\n        ioisdf = pd.DataFrame(iois[1:])\n        ioisdf.columns = ['${ioi}']\n        pd.DataFrame.to_csv(ioisdf, 'order_item_of_interest.csv', index=False)\n\n    seq_dir = '${seqs_dir}'\n    try:\n        read_manifest = pd.read_table('${manifest}', index_col=0, sep='\\t')\n    except FileNotFoundError:\n        exit(1)\n\n    # sets current dir and finds the fastq and fastq.gz files in the current directory\n    p = Path.cwd()\n    list_of_fastq = list(p.glob(seq_dir + '/*.fastq'))\n    list_of_gz = list(p.glob(seq_dir+'/*.fastq.gz'))\n\n    fastq_files = []\n    gz_files = []\n    found = []\n    missing = []\n\n    # pulls only the filename and saves to a list\n    for item in list_of_fastq:\n        filename = os.path.split(item)[1]\n        fastq_files.append(filename)\n\n    for item in list_of_gz:\n        filename = os.path.split(item)[1]\n        gz_files.append(filename)\n    if read_manifest.columns[0] == 'forward-absolute-filepath':\n        # iterates over the forward reads and then the reverse reads to check to make sure they are all accounted for\n        try:\n            for item in read_manifest['forward-absolute-filepath']:\n                filename = os.path.split(item)[1]\n                if filename in fastq_files:\n                    \n                    found.append(filename)\n                else:\n                    if filename in gz_files:\n                        \n                        found.append(filename)\n                    else:\n                        \n                        missing.append(filename)\n        except KeyError:\n            print('single read project')\n\n        # try except in the case that the user only has single end reads.\n        try:\n            for item in read_manifest['reverse-absolute-filepath']:\n                filename = os.path.split(item)[1]\n                if filename in fastq_files:\n                    \n                    found.append(filename)\n                else:\n                    if filename in gz_files:\n                        \n                        found.append(filename)\n                    else:\n                        \n                        missing.append(filename)\n\n        except KeyError:\n            print(\"looking for forward only reads\")\n    else:\n        # this case is if there are only single reads and after which we can figure that the manifest file is wrong\n        try:\n            for item in read_manifest['absolute-filepath']:\n                filename = os.path.split(item)[1]\n                if filename in fastq_files:\n                    \n                    found.append(filename)\n                else:\n                    if filename in gz_files:\n                        \n                        found.append(filename)\n                    else:\n                        \n                        missing.append(filename)\n        except KeyError:\n            print(\"headings in the manifest appear to be incorrect\")\n            exit(1)\n\n    # if missing is not an empty list, i.e. a file listed in the manifest is not detected, it raises an error and\n    # creates a list for the user\n    if missing != []:\n\n        print(\"files are missing, please see missing.csv to correct\")\n\n        with open('missing.csv', 'w', newline='') as csvfile:\n            fieldnames = ['filename']\n            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n            writer.writeheader()\n\n            for filename in missing:\n                writer.writerow({'filename': filename})\n\n        exit(0)\n\n\n    print(\"the manifest called: \" + '${manifest}' +\n                 \" is valid and ready to go\")\n    \"\"\"\n\n}",
        "nb_lignes_process": 141,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python3\n    import os \n    from pathlib import Path\n    from pathlib import PurePath\n    import pandas as pd \n    import csv \n\n    try:\n        read_metadata = pd.read_table('${metadata}', index_col=0, sep='\\t')\n    except FileNotFoundError:\n        exit(1)\n\n    try:\n        read_order = pd.read_table('${baseDir}/order_item_of_interest.csv', index_col=0, sep=',')\n    except FileNotFoundError:\n        iois = list(pd.Series.unique(read_metadata['${ioi}']))\n        ioisdf = pd.DataFrame(iois[1:])\n        ioisdf.columns = ['${ioi}']\n        pd.DataFrame.to_csv(ioisdf, 'order_item_of_interest.csv', index=False)\n\n    seq_dir = '${seqs_dir}'\n    try:\n        read_manifest = pd.read_table('${manifest}', index_col=0, sep='\\t')\n    except FileNotFoundError:\n        exit(1)\n\n    # sets current dir and finds the fastq and fastq.gz files in the current directory\n    p = Path.cwd()\n    list_of_fastq = list(p.glob(seq_dir + '/*.fastq'))\n    list_of_gz = list(p.glob(seq_dir+'/*.fastq.gz'))\n\n    fastq_files = []\n    gz_files = []\n    found = []\n    missing = []\n\n    # pulls only the filename and saves to a list\n    for item in list_of_fastq:\n        filename = os.path.split(item)[1]\n        fastq_files.append(filename)\n\n    for item in list_of_gz:\n        filename = os.path.split(item)[1]\n        gz_files.append(filename)\n    if read_manifest.columns[0] == 'forward-absolute-filepath':\n        # iterates over the forward reads and then the reverse reads to check to make sure they are all accounted for\n        try:\n            for item in read_manifest['forward-absolute-filepath']:\n                filename = os.path.split(item)[1]\n                if filename in fastq_files:\n                    \n                    found.append(filename)\n                else:\n                    if filename in gz_files:\n                        \n                        found.append(filename)\n                    else:\n                        \n                        missing.append(filename)\n        except KeyError:\n            print('single read project')\n\n        # try except in the case that the user only has single end reads.\n        try:\n            for item in read_manifest['reverse-absolute-filepath']:\n                filename = os.path.split(item)[1]\n                if filename in fastq_files:\n                    \n                    found.append(filename)\n                else:\n                    if filename in gz_files:\n                        \n                        found.append(filename)\n                    else:\n                        \n                        missing.append(filename)\n\n        except KeyError:\n            print(\"looking for forward only reads\")\n    else:\n        # this case is if there are only single reads and after which we can figure that the manifest file is wrong\n        try:\n            for item in read_manifest['absolute-filepath']:\n                filename = os.path.split(item)[1]\n                if filename in fastq_files:\n                    \n                    found.append(filename)\n                else:\n                    if filename in gz_files:\n                        \n                        found.append(filename)\n                    else:\n                        \n                        missing.append(filename)\n        except KeyError:\n            print(\"headings in the manifest appear to be incorrect\")\n            exit(1)\n\n    # if missing is not an empty list, i.e. a file listed in the manifest is not detected, it raises an error and\n    # creates a list for the user\n    if missing != []:\n\n        print(\"files are missing, please see missing.csv to correct\")\n\n        with open('missing.csv', 'w', newline='') as csvfile:\n            fieldnames = ['filename']\n            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n            writer.writeheader()\n\n            for filename in missing:\n                writer.writerow({'filename': filename})\n\n        exit(0)\n\n\n    print(\"the manifest called: \" + '${manifest}' +\n                 \" is valid and ready to go\")\n    \"\"\"",
        "nb_lignes_script": 119,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_mani_veri",
            "ch_seqs_veri",
            "ch_meta_veri",
            "ch_ioi_veri"
        ],
        "nb_inputs": 4,
        "outputs": [
            "ch_format_ioi_order"
        ],
        "nb_outputs": 1,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "CheckSinglePaired": {
        "name_process": "CheckSinglePaired",
        "string_process": "\nprocess CheckSinglePaired { \n\n    publishDir \"${params.outdir}\", mode: 'copy'\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n    \n    input: \n    file manifest from ch_single_pair\n    val ioi from ch_ioi_denoise_to_file\n\n    output: \n    file 'manifest_format.txt' into manifest_type\n    file 'data_type.txt' into dataType\n    file \"item_of_interest.csv\" into ch_ioi_file_out\n\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python3\n\n    import pandas as pd\n    import os \n    import csv\n\n    \n    with open('item_of_interest.csv', 'w', newline='') as csvfile:\n        fieldnames = ['item name']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        writer.writeheader()\n        writer.writerow({'item name': '${ioi}'})\n\n    read_manifest = pd.read_table('${manifest}', index_col=0, sep='\\t+', engine='python')\n\n    if read_manifest.columns[0] == 'absolute-filepath':\n        print(\"single end analysis\")\n        format = \"SingleEndFastqManifestPhred33V2\"\n        data = \"SampleData[SequencesWithQuality]\"\n\n        with open(\"manifest_format.txt\", \"w\") as file:\n            file.write(format)\n\n        with open(\"data_type.txt\", \"w\") as d_file:\n            d_file.write(data)\n        print(format + \" \" + data)\n\n        \n    elif read_manifest.columns[0] == 'forward-absolute-filepath':\n        print(\"paired end analysis\")\n        format = \"PairedEndFastqManifestPhred33V2\"\n        data = \"SampleData[PairedEndSequencesWithQuality]\"\n        with open(\"manifest_format.txt\", \"w\") as file:\n            file.write(format)\n\n        with open(\"data_type.txt\", \"w\") as d_file:\n            d_file.write(data)\n        print(format + \" \" + data)\n    else:\n        print(\n            \"cannot determine if paired or single end, check manifest file\")\n        exit(1)\n\n    \n    \"\"\"\n    \n}",
        "nb_lignes_process": 66,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python3\n\n    import pandas as pd\n    import os \n    import csv\n\n    \n    with open('item_of_interest.csv', 'w', newline='') as csvfile:\n        fieldnames = ['item name']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        writer.writeheader()\n        writer.writerow({'item name': '${ioi}'})\n\n    read_manifest = pd.read_table('${manifest}', index_col=0, sep='\\t+', engine='python')\n\n    if read_manifest.columns[0] == 'absolute-filepath':\n        print(\"single end analysis\")\n        format = \"SingleEndFastqManifestPhred33V2\"\n        data = \"SampleData[SequencesWithQuality]\"\n\n        with open(\"manifest_format.txt\", \"w\") as file:\n            file.write(format)\n\n        with open(\"data_type.txt\", \"w\") as d_file:\n            d_file.write(data)\n        print(format + \" \" + data)\n\n        \n    elif read_manifest.columns[0] == 'forward-absolute-filepath':\n        print(\"paired end analysis\")\n        format = \"PairedEndFastqManifestPhred33V2\"\n        data = \"SampleData[PairedEndSequencesWithQuality]\"\n        with open(\"manifest_format.txt\", \"w\") as file:\n            file.write(format)\n\n        with open(\"data_type.txt\", \"w\") as d_file:\n            d_file.write(data)\n        print(format + \" \" + data)\n    else:\n        print(\n            \"cannot determine if paired or single end, check manifest file\")\n        exit(1)\n\n    \n    \"\"\"",
        "nb_lignes_script": 46,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_single_pair",
            "ch_ioi_denoise_to_file"
        ],
        "nb_inputs": 2,
        "outputs": [
            "manifest_type",
            "dataType",
            "ch_ioi_file_out"
        ],
        "nb_outputs": 3,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "GenerateSeqObject": {
        "name_process": "GenerateSeqObject",
        "string_process": "\nprocess GenerateSeqObject{\n\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    input: \n    file manifest from ch_make_qiime\n    file manifest_format from manifest_type\n    file data_type from dataType\n    path seqs from ch_make_qiime_seq\n\n    output: \n    file 'demux.qza' into ch_qiime_obj\n    file manifest_format into ch_manifest_type\n    \n\n    shell:\n    '''\n    DAT=$(head !{data_type})\n    MANI=$(head !{manifest_format})\n    #module load  QIIME2/2020.11\n    qiime tools import \\\n    --type $DAT\\\n    --input-path !{manifest} \\\n    --output-path demux.qza \\\n    --input-format $MANI\n    '''\n}",
        "nb_lignes_process": 29,
        "string_script": "    '''\n    DAT=$(head !{data_type})\n    MANI=$(head !{manifest_format})\n    #module load  QIIME2/2020.11\n    qiime tools import \\\n    --type $DAT\\\n    --input-path !{manifest} \\\n    --output-path demux.qza \\\n    --input-format $MANI\n    '''",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "ch_make_qiime",
            "manifest_type",
            "dataType",
            "ch_make_qiime_seq"
        ],
        "nb_inputs": 4,
        "outputs": [
            "ch_qiime_obj",
            "ch_manifest_type"
        ],
        "nb_outputs": 2,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "QualControl": {
        "name_process": "QualControl",
        "string_process": "\nprocess QualControl{\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n\n    input:\n    file seq_obj from ch_qiime_obj\n    \n    output: \n    file('demux_summary/*') into ch_qiime_qual\n    file seq_obj into ch_qiime_denoise\n    file 'demux_summary.qzv' into ch_demux_export\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    script:\n    \"\"\"\n    #!/usr/bin/env bash\n\n    qiime demux summarize \\\n    --i-data ${seq_obj} \\\n    --o-visualization demux_summary.qzv\n\n    qiime tools export \\\n    --input-path demux_summary.qzv \\\n    --output-path demux_summary/\n    \"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    #!/usr/bin/env bash\n\n    qiime demux summarize \\\n    --i-data ${seq_obj} \\\n    --o-visualization demux_summary.qzv\n\n    qiime tools export \\\n    --input-path demux_summary.qzv \\\n    --output-path demux_summary/\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "denvax",
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/denvax",
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            },
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "ch_qiime_obj"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_qiime_qual",
            "ch_qiime_denoise",
            "ch_demux_export"
        ],
        "nb_outputs": 3,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "FindCutoffs": {
        "name_process": "FindCutoffs",
        "string_process": "\nprocess FindCutoffs{\n                                           \n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n\n    input:\n    file 'manifest_format.txt' from ch_manifest_type\n    file('demux_summary/*') from ch_qiime_qual\n    \n    output: \n    file(\"cutoffs.csv\") into ch_cutoff_vals\n    file(\"manifest_format.txt\") into ch_manifest_type_denoise\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python3\n    import pandas as pd \n    from pathlib import Path\n    import numpy as np \n    import csv \n\n    wd = Path.cwd()\n\n    seq_file = pd.read_table(\"manifest_format.txt\")\n    if seq_file.columns[0] == \"SingleEndFastqManifestPhred33V2\":\n        seq_format = \"single\"\n    else:\n        seq_format = \"paired\"\n\n    def find_cutoffs(dataframe):\n        mean_qual = dataframe[4:5]\n        mean_count = dataframe[0:1]\n\n        average_qual = np.round(mean_qual.mean(axis=1), 0)\n        average_count = np.round(mean_count.mean(axis=1), 0)\n\n        mean_qual_vals = np.array(mean_qual)[0]\n        mean_count_vals = np.array(mean_count)[0]\n\n        if int(average_qual) < 30:\n            print(\n                \"The Average Quality of these sequences may be a concern would you like to continue?\")\n            exit(0)\n\n        for i in range(0, len(mean_qual_vals)):\n            if mean_qual_vals[i] >= int(average_qual):\n                if mean_count_vals[i] >= int(average_count):\n                    left_cutoff = i+1\n                    break\n        for i in range(0, len(mean_qual_vals)):\n            if mean_qual_vals[len(mean_qual_vals)-1-i] >= int(average_qual):\n                if mean_count_vals[len(mean_count_vals)-1-i] >= int(average_count):\n                    right_cutoff = len(mean_qual_vals)-i\n                    break\n        return(left_cutoff, right_cutoff)\n\n    def find_rev_cutoffs(dataframe):\n        mean_qual = dataframe[4:5]\n        mean_count = dataframe[0:1]\n\n        average_qual = np.round(mean_qual.mean(axis=1), 0)+2\n        average_count = np.round(mean_count.mean(axis=1), 0)\n\n        mean_qual_vals = np.array(mean_qual)[0]\n        mean_count_vals = np.array(mean_count)[0]\n\n        if int(average_qual) < 30:\n            print(\n                \"The Average Quality of these sequences may be a concern would you like to continue?\")\n            exit(0)\n\n        left_cutoff = 0\n        right_cutoff = len(mean_qual_vals)-1\n\n        for i in range(0, len(mean_qual_vals)):\n            if mean_qual_vals[i] >= int(average_qual):\n                if mean_count_vals[i] >= int(average_count):\n                    left_cutoff = i+1\n                    break\n\n        for i in range(0, len(mean_qual_vals)):\n            if mean_qual_vals[len(mean_qual_vals)-1-i] >= int(average_qual):\n                if mean_count_vals[len(mean_count_vals)-1-i] >= int(average_count):\n                    right_cutoff = len(mean_qual_vals)-i\n                    break\n\n        return(left_cutoff, right_cutoff)\n\n    if seq_format == \"single\":\n        print(\"determining left and right cutoffs based on qual score\")\n\n        input_file = str(wd)+\"/demux_summary/forward-seven-number-summaries.tsv\"\n\n        summary = pd.read_table(input_file, index_col=0, sep='\\t')\n        left_cutoff, right_cutoff = find_cutoffs(summary)\n\n        print(\"right cutoff: \"+str(right_cutoff))\n        print(\"left cutoff: \" + str(left_cutoff))\n\n        with open('cutoffs.csv', 'w', newline='') as csvfile:\n            fieldnames = ['cutoff', 'value']\n            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n            writer.writeheader()\n            writer.writerow({'cutoff': 'left', 'value': left_cutoff})\n            writer.writerow({'cutoff': 'right', 'value': right_cutoff})\n            writer.writerow({'cutoff': 'filename', 'value': input_file})\n\n        print(left_cutoff, right_cutoff)\n\n    elif seq_format == \"paired\":\n        print(\"determining forward and revese, left and right cutoffs based on qual score\")\n        forward_file = str(wd)+\"/demux_summary/forward-seven-number-summaries.tsv\"\n        fr_summary = pd.read_table(forward_file, index_col=0, sep='\\t')\n\n        forward = find_cutoffs(fr_summary)\n\n        reverse_file = str(wd)+\"/demux_summary/reverse-seven-number-summaries.tsv\"\n        rev_summary = pd.read_table(reverse_file, index_col=0, sep='\\t')\n\n        reverse = find_rev_cutoffs(rev_summary)\n\n        print(\"forward cutoffs: \"+str(forward))\n        print(\"reverse cutoffs: \" + str(reverse))\n\n        with open('cutoffs.csv', 'w', newline='') as csvfile:\n            fieldnames = ['cutoff', 'value']\n            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n            writer.writeheader()\n            writer.writerow({'cutoff': 'forward left', 'value': forward[0]})\n            writer.writerow({'cutoff': 'forward right', 'value': forward[1]})\n            writer.writerow({'cutoff': 'reverse left', 'value': reverse[0]})\n            writer.writerow({'cutoff': 'reverse right', 'value': reverse[1]})\n            writer.writerow({'cutoff': 'filename', 'value': forward_file})\n            writer.writerow({'cutoff': 'filename', 'value': reverse_file})\n\n    \"\"\"\n}",
        "nb_lignes_process": 141,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python3\n    import pandas as pd \n    from pathlib import Path\n    import numpy as np \n    import csv \n\n    wd = Path.cwd()\n\n    seq_file = pd.read_table(\"manifest_format.txt\")\n    if seq_file.columns[0] == \"SingleEndFastqManifestPhred33V2\":\n        seq_format = \"single\"\n    else:\n        seq_format = \"paired\"\n\n    def find_cutoffs(dataframe):\n        mean_qual = dataframe[4:5]\n        mean_count = dataframe[0:1]\n\n        average_qual = np.round(mean_qual.mean(axis=1), 0)\n        average_count = np.round(mean_count.mean(axis=1), 0)\n\n        mean_qual_vals = np.array(mean_qual)[0]\n        mean_count_vals = np.array(mean_count)[0]\n\n        if int(average_qual) < 30:\n            print(\n                \"The Average Quality of these sequences may be a concern would you like to continue?\")\n            exit(0)\n\n        for i in range(0, len(mean_qual_vals)):\n            if mean_qual_vals[i] >= int(average_qual):\n                if mean_count_vals[i] >= int(average_count):\n                    left_cutoff = i+1\n                    break\n        for i in range(0, len(mean_qual_vals)):\n            if mean_qual_vals[len(mean_qual_vals)-1-i] >= int(average_qual):\n                if mean_count_vals[len(mean_count_vals)-1-i] >= int(average_count):\n                    right_cutoff = len(mean_qual_vals)-i\n                    break\n        return(left_cutoff, right_cutoff)\n\n    def find_rev_cutoffs(dataframe):\n        mean_qual = dataframe[4:5]\n        mean_count = dataframe[0:1]\n\n        average_qual = np.round(mean_qual.mean(axis=1), 0)+2\n        average_count = np.round(mean_count.mean(axis=1), 0)\n\n        mean_qual_vals = np.array(mean_qual)[0]\n        mean_count_vals = np.array(mean_count)[0]\n\n        if int(average_qual) < 30:\n            print(\n                \"The Average Quality of these sequences may be a concern would you like to continue?\")\n            exit(0)\n\n        left_cutoff = 0\n        right_cutoff = len(mean_qual_vals)-1\n\n        for i in range(0, len(mean_qual_vals)):\n            if mean_qual_vals[i] >= int(average_qual):\n                if mean_count_vals[i] >= int(average_count):\n                    left_cutoff = i+1\n                    break\n\n        for i in range(0, len(mean_qual_vals)):\n            if mean_qual_vals[len(mean_qual_vals)-1-i] >= int(average_qual):\n                if mean_count_vals[len(mean_count_vals)-1-i] >= int(average_count):\n                    right_cutoff = len(mean_qual_vals)-i\n                    break\n\n        return(left_cutoff, right_cutoff)\n\n    if seq_format == \"single\":\n        print(\"determining left and right cutoffs based on qual score\")\n\n        input_file = str(wd)+\"/demux_summary/forward-seven-number-summaries.tsv\"\n\n        summary = pd.read_table(input_file, index_col=0, sep='\\t')\n        left_cutoff, right_cutoff = find_cutoffs(summary)\n\n        print(\"right cutoff: \"+str(right_cutoff))\n        print(\"left cutoff: \" + str(left_cutoff))\n\n        with open('cutoffs.csv', 'w', newline='') as csvfile:\n            fieldnames = ['cutoff', 'value']\n            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n            writer.writeheader()\n            writer.writerow({'cutoff': 'left', 'value': left_cutoff})\n            writer.writerow({'cutoff': 'right', 'value': right_cutoff})\n            writer.writerow({'cutoff': 'filename', 'value': input_file})\n\n        print(left_cutoff, right_cutoff)\n\n    elif seq_format == \"paired\":\n        print(\"determining forward and revese, left and right cutoffs based on qual score\")\n        forward_file = str(wd)+\"/demux_summary/forward-seven-number-summaries.tsv\"\n        fr_summary = pd.read_table(forward_file, index_col=0, sep='\\t')\n\n        forward = find_cutoffs(fr_summary)\n\n        reverse_file = str(wd)+\"/demux_summary/reverse-seven-number-summaries.tsv\"\n        rev_summary = pd.read_table(reverse_file, index_col=0, sep='\\t')\n\n        reverse = find_rev_cutoffs(rev_summary)\n\n        print(\"forward cutoffs: \"+str(forward))\n        print(\"reverse cutoffs: \" + str(reverse))\n\n        with open('cutoffs.csv', 'w', newline='') as csvfile:\n            fieldnames = ['cutoff', 'value']\n            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n            writer.writeheader()\n            writer.writerow({'cutoff': 'forward left', 'value': forward[0]})\n            writer.writerow({'cutoff': 'forward right', 'value': forward[1]})\n            writer.writerow({'cutoff': 'reverse left', 'value': reverse[0]})\n            writer.writerow({'cutoff': 'reverse right', 'value': reverse[1]})\n            writer.writerow({'cutoff': 'filename', 'value': forward_file})\n            writer.writerow({'cutoff': 'filename', 'value': reverse_file})\n\n    \"\"\"",
        "nb_lignes_script": 123,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_manifest_type",
            "ch_qiime_qual"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_cutoff_vals",
            "ch_manifest_type_denoise"
        ],
        "nb_outputs": 2,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "Denoise": {
        "name_process": "Denoise",
        "string_process": "\nprocess Denoise {\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n    input:\n    file seq_object from ch_qiime_denoise\n    file(\"cutoffs.csv\") from ch_cutoff_vals\n    file(\"manifest_format.txt\") from ch_manifest_type_denoise\n    \n    \n    output:\n    file \"rep-seqs-dada2.qza\" into ch_rep_seqs\n    file \"table-dada2.qza\" into ch_table\n    file \"stats-dada2.qza\" into ch_dada2_stats\n    \n    \n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python3\n    import pandas as pd \n    from pathlib import Path\n    import numpy as np \n    import csv \n    import subprocess\n\n    wd = Path.cwd()\n\n\n    seq_file = pd.read_table(\"manifest_format.txt\")\n    if seq_file.columns[0] == \"SingleEndFastqManifestPhred33V2\":\n        seq_format = \"single\"\n    else:\n        seq_format = \"paired\"\n    cutoff = pd.read_table(\"cutoffs.csv\", sep=\",\")    \n    if seq_format == 'single':\n        left = cutoff['value'][0]\n        right = cutoff['value'][1]\n        command = \"qiime dada2 denoise-single \\\n            --i-demultiplexed-seqs demux.qza \\\n            --p-trim-left \" + str(left)+\" \\\n            --p-trunc-len \" + str(right) + \" \\\n            --o-representative-sequences rep-seqs-dada2.qza \\\n            --o-table table-dada2.qza \\\n            --o-denoising-stats stats-dada2.qza\"\n    elif seq_format == 'paired':\n        forward_left = cutoff['value'][0]\n        forward_right = cutoff['value'][1]\n        rev_left = cutoff['value'][2]\n        rev_right = cutoff['value'][3]\n        command = \"qiime dada2 denoise-paired \\\n            --i-demultiplexed-seqs demux.qza \\\n            --p-trunc-len-f \" + str(forward_right)+\" \\\n            --p-trunc-len-r \" + str(rev_right) + \" \\\n            --p-trim-left-f \" + str(forward_left)+\" \\\n            --p-trim-left-r \" + str(rev_left) + \" \\\n            --o-representative-sequences rep-seqs-dada2.qza \\\n            --o-table table-dada2.qza \\\n            --o-denoising-stats stats-dada2.qza\"\n\n    subprocess.run([command], shell=True)\n    \n    \"\"\"\n}",
        "nb_lignes_process": 65,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python3\n    import pandas as pd \n    from pathlib import Path\n    import numpy as np \n    import csv \n    import subprocess\n\n    wd = Path.cwd()\n\n\n    seq_file = pd.read_table(\"manifest_format.txt\")\n    if seq_file.columns[0] == \"SingleEndFastqManifestPhred33V2\":\n        seq_format = \"single\"\n    else:\n        seq_format = \"paired\"\n    cutoff = pd.read_table(\"cutoffs.csv\", sep=\",\")    \n    if seq_format == 'single':\n        left = cutoff['value'][0]\n        right = cutoff['value'][1]\n        command = \"qiime dada2 denoise-single \\\n            --i-demultiplexed-seqs demux.qza \\\n            --p-trim-left \" + str(left)+\" \\\n            --p-trunc-len \" + str(right) + \" \\\n            --o-representative-sequences rep-seqs-dada2.qza \\\n            --o-table table-dada2.qza \\\n            --o-denoising-stats stats-dada2.qza\"\n    elif seq_format == 'paired':\n        forward_left = cutoff['value'][0]\n        forward_right = cutoff['value'][1]\n        rev_left = cutoff['value'][2]\n        rev_right = cutoff['value'][3]\n        command = \"qiime dada2 denoise-paired \\\n            --i-demultiplexed-seqs demux.qza \\\n            --p-trunc-len-f \" + str(forward_right)+\" \\\n            --p-trunc-len-r \" + str(rev_right) + \" \\\n            --p-trim-left-f \" + str(forward_left)+\" \\\n            --p-trim-left-r \" + str(rev_left) + \" \\\n            --o-representative-sequences rep-seqs-dada2.qza \\\n            --o-table table-dada2.qza \\\n            --o-denoising-stats stats-dada2.qza\"\n\n    subprocess.run([command], shell=True)\n    \n    \"\"\"",
        "nb_lignes_script": 44,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_qiime_denoise",
            "ch_cutoff_vals",
            "ch_manifest_type_denoise"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ch_rep_seqs",
            "ch_table",
            "ch_dada2_stats"
        ],
        "nb_outputs": 3,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "FeatureVisualization": {
        "name_process": "FeatureVisualization",
        "string_process": "\nprocess FeatureVisualization{\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n    input:\n    file \"stats-dada2.qza\" from ch_dada2_stats\n    file \"table-dada2.qza\" from ch_table\n    file metadata_file from ch_meta_feature_viz\n    file \"rep-seqs-dada2.qza\" from ch_rep_seqs\n\n    output:\n    file \"stats-dada2.qzv\" into ch_dada_stats_export\n    file \"table.qzv\" into ch_table_viz_obj\n    file \"table.qzv\" into ch_table_viz_export\n    file \"rep-seqs.qzv\" into ch_req_seq_vis_obj\n    file \"rep-seqs-dada2.qza\" into ch_rep_seq_tree_gen\n    file \"table-dada2.qza\" into ch_alpha_div_table\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    script:\n    \"\"\"\n    #!/usr/bin/env bash\n\n    qiime metadata tabulate \\\n    --m-input-file stats-dada2.qza \\\n    --o-visualization stats-dada2.qzv\n\n    qiime feature-table summarize \\\n    --i-table table-dada2.qza \\\n    --o-visualization table.qzv \\\n    --m-sample-metadata-file ${metadata_file}\n\n    qiime feature-table tabulate-seqs \\\n    --i-data rep-seqs-dada2.qza \\\n    --o-visualization rep-seqs.qzv\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    \"\"\"\n    #!/usr/bin/env bash\n\n    qiime metadata tabulate \\\n    --m-input-file stats-dada2.qza \\\n    --o-visualization stats-dada2.qzv\n\n    qiime feature-table summarize \\\n    --i-table table-dada2.qza \\\n    --o-visualization table.qzv \\\n    --m-sample-metadata-file ${metadata_file}\n\n    qiime feature-table tabulate-seqs \\\n    --i-data rep-seqs-dada2.qza \\\n    --o-visualization rep-seqs.qzv\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "denvax",
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/denvax",
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            },
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "ch_dada2_stats",
            "ch_table",
            "ch_meta_feature_viz",
            "ch_rep_seqs"
        ],
        "nb_inputs": 4,
        "outputs": [
            "ch_dada_stats_export",
            "ch_table_viz_obj",
            "ch_table_viz_export",
            "ch_req_seq_vis_obj",
            "ch_rep_seq_tree_gen",
            "ch_alpha_div_table"
        ],
        "nb_outputs": 6,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "TreeConstruction": {
        "name_process": "TreeConstruction",
        "string_process": "\nprocess TreeConstruction{\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n    \n    input:\n    file \"rep-seqs-dada2.qza\" from ch_rep_seq_tree_gen\n\n    output:\n    file \"aligned-rep-seqs.qza\" into ch_aligned_rep_seqs\n    file \"masked-aligned-rep-seqs.qza\" into ch_mask_align_rep_seq\n    file \"unrooted-tree.qza\" into ch_unrooted_tree\n    file \"rooted-tree.qza\" into ch_rooted_tree\n    file \"rep-seqs-dada2.qza\" into ch_rep_seq_classify\n\n    script:\n    \"\"\"\n    #!/usr/bin/env bash \n\n    qiime phylogeny align-to-tree-mafft-fasttree \\\n    --i-sequences rep-seqs-dada2.qza \\\n    --o-alignment aligned-rep-seqs.qza \\\n    --o-masked-alignment masked-aligned-rep-seqs.qza \\\n    --o-tree unrooted-tree.qza \\\n    --o-rooted-tree rooted-tree.qza \n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    #!/usr/bin/env bash \n\n    qiime phylogeny align-to-tree-mafft-fasttree \\\n    --i-sequences rep-seqs-dada2.qza \\\n    --o-alignment aligned-rep-seqs.qza \\\n    --o-masked-alignment masked-aligned-rep-seqs.qza \\\n    --o-tree unrooted-tree.qza \\\n    --o-rooted-tree rooted-tree.qza \n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "denvax",
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/denvax",
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            },
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "ch_rep_seq_tree_gen"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_aligned_rep_seqs",
            "ch_mask_align_rep_seq",
            "ch_unrooted_tree",
            "ch_rooted_tree",
            "ch_rep_seq_classify"
        ],
        "nb_outputs": 5,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "ExportTable": {
        "name_process": "ExportTable",
        "string_process": "\nprocess ExportTable{\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n    \n    input:\n    file \"table.qzv\" from ch_table_viz_obj\n\n    output:\n    path \"table_viz/*\" into ch_table_viz_dir\n    path \"table_viz/*\" into ch_table_viz_dir_rare\n\n    script:\n    \"\"\"\n    #!/usr/bin/env bash\n\n    qiime tools export \\\n    --input-path table.qzv \\\n    --output-path table_viz\n    \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    #!/usr/bin/env bash\n\n    qiime tools export \\\n    --input-path table.qzv \\\n    --output-path table_viz\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "denvax",
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/denvax",
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            },
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "ch_table_viz_obj"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_table_viz_dir",
            "ch_table_viz_dir_rare"
        ],
        "nb_outputs": 2,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "DetermineDepth": {
        "name_process": "DetermineDepth",
        "string_process": "\nprocess DetermineDepth{\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    input:\n    path \"table_viz/*\" from ch_table_viz_dir\n\n    output:\n    file \"sampling_depth.csv\" into ch_sampling_depth_csv\n    file \"samp_depth_simple.txt\" into ch_depth\n\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python3\n    import pandas as pd\n    import numpy as np \n    import csv\n\n    input_file = \"table_viz/sample-frequency-detail.csv\"\n\n    features = pd.read_csv(input_file, index_col=0, header=None)\n\n    total_count = sum(features[1])\n    sampling_depth = 0\n    perc_features_retain = 0.0\n\n    print(\"total count: \" + str(total_count))\n\n    feature_array = np.array(features)\n\n    for i in range(len(feature_array)-1, -1, -1):\n        sampling_depth = feature_array[i][0]\n        perc_features_retain = ((sampling_depth * (i+1))/total_count)\n        if perc_features_retain > .22:\n            sampling_depth = feature_array[i][0]\n            print(\"sampling depth: \" + str(sampling_depth) + \" % features retained: \" +\n                  str(round(perc_features_retain, 3)) + \" samples retained: \" + str(i))\n            break\n    print(\"writing dept out to file\")\n    with open('sampling_depth.csv', 'w', newline='') as csvfile:\n        fieldnames = ['stat', 'value']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        writer.writeheader()\n        writer.writerow({'stat': 'sampling_depth', 'value': sampling_depth})\n        writer.writerow({'stat': '%_features_retained',\n                         'value': perc_features_retain})\n        writer.writerow({'stat': 'filename', 'value': input_file})\n\n    print(\"sampling_depth: \"+str(sampling_depth))\n    print(\"%_features_retained: \" + str(perc_features_retain))\n    \n    with open('samp_depth_simple.txt', 'w') as file:\n        file.write(str(int(sampling_depth)))\n    \"\"\"\n\n}",
        "nb_lignes_process": 60,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python3\n    import pandas as pd\n    import numpy as np \n    import csv\n\n    input_file = \"table_viz/sample-frequency-detail.csv\"\n\n    features = pd.read_csv(input_file, index_col=0, header=None)\n\n    total_count = sum(features[1])\n    sampling_depth = 0\n    perc_features_retain = 0.0\n\n    print(\"total count: \" + str(total_count))\n\n    feature_array = np.array(features)\n\n    for i in range(len(feature_array)-1, -1, -1):\n        sampling_depth = feature_array[i][0]\n        perc_features_retain = ((sampling_depth * (i+1))/total_count)\n        if perc_features_retain > .22:\n            sampling_depth = feature_array[i][0]\n            print(\"sampling depth: \" + str(sampling_depth) + \" % features retained: \" +\n                  str(round(perc_features_retain, 3)) + \" samples retained: \" + str(i))\n            break\n    print(\"writing dept out to file\")\n    with open('sampling_depth.csv', 'w', newline='') as csvfile:\n        fieldnames = ['stat', 'value']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n\n        writer.writeheader()\n        writer.writerow({'stat': 'sampling_depth', 'value': sampling_depth})\n        writer.writerow({'stat': '%_features_retained',\n                         'value': perc_features_retain})\n        writer.writerow({'stat': 'filename', 'value': input_file})\n\n    print(\"sampling_depth: \"+str(sampling_depth))\n    print(\"%_features_retained: \" + str(perc_features_retain))\n    \n    with open('samp_depth_simple.txt', 'w') as file:\n        file.write(str(int(sampling_depth)))\n    \"\"\"",
        "nb_lignes_script": 42,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_table_viz_dir"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_sampling_depth_csv",
            "ch_depth"
        ],
        "nb_outputs": 2,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "AlphaDiversityMeasure": {
        "name_process": "AlphaDiversityMeasure",
        "string_process": "\nprocess AlphaDiversityMeasure{\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    input:\n    file metadata from ch_alpha_metadata\n    file \"table-dada2.qza\" from ch_alpha_div_table\n    file \"rooted-tree.qza\" from ch_rooted_tree\n    file \"samp_depth_simple.txt\" from ch_depth\n    val user_depth from ch_user_sample_depth\n\n    output:\n    path \"core-metric-results/*\" into ch_core_beta_significance \n    path \"core-metric-results/*\" into ch_core_report\n    file \"shannon.qza\" into ch_shannon_qza\n    file \"simpson.qza\" into ch_simpson_qza \n    file \"chao1.qza\" into ch_chao_qza\n    file \"ace.qza\" into ch_ace_qza\n    file \"obs.qza\" into ch_obs_qza\n    file \"faith_pd.qza\" into ch_faith_qza\n    file \"table-dada2.qza\" into ch_table_rare_curve\n    file \"rooted-tree.qza\" into ch_tree_rare_curve\n    \n\n    \n\n    shell:\n    '''\n    #!/usr/bin/env bash\n\n    if [ !{user_depth} == 0 ];then\n        SAMP_DEPTH=$(head samp_depth_simple.txt)\n    fi\n    \n    if [ !{user_depth} != 0 ];then\n        SAMP_DEPTH=!{user_depth}\n    fi\n  \n    qiime diversity core-metrics-phylogenetic \\\n    --i-phylogeny rooted-tree.qza \\\n    --i-table table-dada2.qza \\\n    --p-sampling-depth $SAMP_DEPTH \\\n    --m-metadata-file !{metadata} \\\n    --output-dir core-metric-results \n\n    qiime diversity alpha \\\n    --i-table table-dada2.qza \\\n    --p-metric shannon \\\n    --o-alpha-diversity shannon.qza\n\n    qiime diversity alpha \\\n    --i-table table-dada2.qza \\\n    --p-metric simpson \\\n    --o-alpha-diversity simpson.qza \n\n    qiime diversity alpha \\\n    --i-table table-dada2.qza \\\n    --p-metric chao1 \\\n    --o-alpha-diversity chao1.qza\n\n    qiime diversity alpha \\\n    --i-table table-dada2.qza \\\n    --p-metric ace \\\n    --o-alpha-diversity ace.qza\n\n    qiime diversity alpha \\\n    --i-table table-dada2.qza \\\n    --p-metric observed_features \\\n    --o-alpha-diversity obs.qza \n\n    qiime diversity alpha-phylogenetic \\\n    --i-table table-dada2.qza \\\n    --i-phylogeny rooted-tree.qza \\\n    --p-metric faith_pd \\\n    --o-alpha-diversity faith_pd.qza \n    '''\n}",
        "nb_lignes_process": 79,
        "string_script": "    '''\n    #!/usr/bin/env bash\n\n    if [ !{user_depth} == 0 ];then\n        SAMP_DEPTH=$(head samp_depth_simple.txt)\n    fi\n    \n    if [ !{user_depth} != 0 ];then\n        SAMP_DEPTH=!{user_depth}\n    fi\n  \n    qiime diversity core-metrics-phylogenetic \\\n    --i-phylogeny rooted-tree.qza \\\n    --i-table table-dada2.qza \\\n    --p-sampling-depth $SAMP_DEPTH \\\n    --m-metadata-file !{metadata} \\\n    --output-dir core-metric-results \n\n    qiime diversity alpha \\\n    --i-table table-dada2.qza \\\n    --p-metric shannon \\\n    --o-alpha-diversity shannon.qza\n\n    qiime diversity alpha \\\n    --i-table table-dada2.qza \\\n    --p-metric simpson \\\n    --o-alpha-diversity simpson.qza \n\n    qiime diversity alpha \\\n    --i-table table-dada2.qza \\\n    --p-metric chao1 \\\n    --o-alpha-diversity chao1.qza\n\n    qiime diversity alpha \\\n    --i-table table-dada2.qza \\\n    --p-metric ace \\\n    --o-alpha-diversity ace.qza\n\n    qiime diversity alpha \\\n    --i-table table-dada2.qza \\\n    --p-metric observed_features \\\n    --o-alpha-diversity obs.qza \n\n    qiime diversity alpha-phylogenetic \\\n    --i-table table-dada2.qza \\\n    --i-phylogeny rooted-tree.qza \\\n    --p-metric faith_pd \\\n    --o-alpha-diversity faith_pd.qza \n    '''",
        "nb_lignes_script": 48,
        "language_script": "bash",
        "tools": [
            "denvax",
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/denvax",
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            },
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "ch_alpha_metadata",
            "ch_alpha_div_table",
            "ch_rooted_tree",
            "ch_depth",
            "ch_user_sample_depth"
        ],
        "nb_inputs": 5,
        "outputs": [
            "ch_core_beta_significance",
            "ch_core_report",
            "ch_shannon_qza",
            "ch_simpson_qza",
            "ch_chao_qza",
            "ch_ace_qza",
            "ch_obs_qza",
            "ch_faith_qza",
            "ch_table_rare_curve",
            "ch_tree_rare_curve"
        ],
        "nb_outputs": 10,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "AssignTaxonomy": {
        "name_process": "AssignTaxonomy",
        "string_process": "\nprocess AssignTaxonomy{\n                                                          \n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    input:\n    file \"rep-seqs-dada2.qza\" from ch_rep_seq_classify\n    file \"16s-whole-seq-classifier.qza\" from ch_whole_classifier\n    file \"515-806-classifier.qza\" from ch_515_classifier\n\n    output:\n    file \"taxonomy.qza\" into ch_taxonomy_phylo_tree\n    file \"taxonomy.qzv\" into ch_classified_qzv\n    \n\n    script:\n    \"\"\"\n    #!/usr/bin/env bash\n\n    if [ ! -f \"16s-whole-seq-classifier.qza\" ]; then \n    echo \"Error, download the classifier from readme\"\n    exit 1\n    fi\n    if [ ! -f \"515-806-classifier.qza\" ]; then \n    echo \"Error, download the classifier from readme\"\n    exit 1\n    fi\n\n    qiime feature-classifier classify-sklearn \\\n    --i-classifier 16s-whole-seq-classifier.qza \\\n    --i-reads rep-seqs-dada2.qza \\\n    --p-confidence 0.6 \\\n    --o-classification taxonomy.qza\n\n    qiime metadata tabulate \\\n    --m-input-file taxonomy.qza \\\n    --o-visualization taxonomy.qzv\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    \"\"\"\n    #!/usr/bin/env bash\n\n    if [ ! -f \"16s-whole-seq-classifier.qza\" ]; then \n    echo \"Error, download the classifier from readme\"\n    exit 1\n    fi\n    if [ ! -f \"515-806-classifier.qza\" ]; then \n    echo \"Error, download the classifier from readme\"\n    exit 1\n    fi\n\n    qiime feature-classifier classify-sklearn \\\n    --i-classifier 16s-whole-seq-classifier.qza \\\n    --i-reads rep-seqs-dada2.qza \\\n    --p-confidence 0.6 \\\n    --o-classification taxonomy.qza\n\n    qiime metadata tabulate \\\n    --m-input-file taxonomy.qza \\\n    --o-visualization taxonomy.qzv\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "denvax",
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/denvax",
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            },
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "ch_rep_seq_classify",
            "ch_whole_classifier",
            "ch_515_classifier"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ch_taxonomy_phylo_tree",
            "ch_classified_qzv"
        ],
        "nb_outputs": 2,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "CalcRareDepth": {
        "name_process": "CalcRareDepth",
        "string_process": "\nprocess CalcRareDepth{\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    input:\n    path \"table_viz/*\" from ch_table_viz_dir_rare\n\n    output:\n    file \"rare_depth.txt\" into ch_rare_curve_depth\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python3\n    import pandas as pd\n    import numpy as np \n\n    sample_freq = pd.read_csv(\"table_viz/sample-frequency-detail.csv\")\n    depth = sample_freq.median()[0]\n\n    with open(\"rare_depth.txt\",'w') as file:\n        file.write(str(int(depth)))\n    \n    \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python3\n    import pandas as pd\n    import numpy as np \n\n    sample_freq = pd.read_csv(\"table_viz/sample-frequency-detail.csv\")\n    depth = sample_freq.median()[0]\n\n    with open(\"rare_depth.txt\",'w') as file:\n        file.write(str(int(depth)))\n    \n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_table_viz_dir_rare"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_rare_curve_depth"
        ],
        "nb_outputs": 1,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "RareCurveCalc": {
        "name_process": "RareCurveCalc",
        "string_process": "\nprocess RareCurveCalc{\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    input:\n    file \"rare_depth.txt\" from ch_rare_curve_depth\n    file metadata from ch_metadata_rare_curve\n    file \"table-dada2.qza\" from ch_table_rare_curve\n    file \"rooted-tree.qza\" from ch_tree_rare_curve\n    val user_rare_depth from ch_user_rarefaction_depth\n\n\n    output:\n    file \"alpha-rarefaction.qzv\" into ch_alpha_rare_obj\n    path \"alpha-rareplot/*\" into ch_alpha_rare_viz\n    file \"table-dada2.qza\" into ch_table_phylo_tree\n    file \"rooted-tree.qza\" into ch_tree_lefse\n    \n\n    shell:\n    '''\n    #!/usr/bin/env bash\n\n    if [ !{user_rare_depth} == 0 ];then\n        DEPTH=$(head rare_depth.txt)\n    fi\n    \n    if [ !{user_rare_depth} != 0 ];then\n        DEPTH=!{user_rare_depth}\n    fi\n\n    \n    \n    qiime diversity alpha-rarefaction \\\n    --i-table table-dada2.qza \\\n    --i-phylogeny rooted-tree.qza \\\n    --p-max-depth $DEPTH \\\n    --m-metadata-file !{metadata} \\\n    --o-visualization alpha-rarefaction.qzv \n\n    qiime tools export \\\n    --input-path alpha-rarefaction.qzv \\\n    --output-path alpha-rareplot\n\n    '''\n}",
        "nb_lignes_process": 48,
        "string_script": "    '''\n    #!/usr/bin/env bash\n\n    if [ !{user_rare_depth} == 0 ];then\n        DEPTH=$(head rare_depth.txt)\n    fi\n    \n    if [ !{user_rare_depth} != 0 ];then\n        DEPTH=!{user_rare_depth}\n    fi\n\n    \n    \n    qiime diversity alpha-rarefaction \\\n    --i-table table-dada2.qza \\\n    --i-phylogeny rooted-tree.qza \\\n    --p-max-depth $DEPTH \\\n    --m-metadata-file !{metadata} \\\n    --o-visualization alpha-rarefaction.qzv \n\n    qiime tools export \\\n    --input-path alpha-rarefaction.qzv \\\n    --output-path alpha-rareplot\n\n    '''",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "denvax",
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/denvax",
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            },
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "ch_rare_curve_depth",
            "ch_metadata_rare_curve",
            "ch_table_rare_curve",
            "ch_tree_rare_curve",
            "ch_user_rarefaction_depth"
        ],
        "nb_inputs": 5,
        "outputs": [
            "ch_alpha_rare_obj",
            "ch_alpha_rare_viz",
            "ch_table_phylo_tree",
            "ch_tree_lefse"
        ],
        "nb_outputs": 4,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "AlphaDiversitySignificance": {
        "name_process": "AlphaDiversitySignificance",
        "string_process": "\nprocess AlphaDiversitySignificance{\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    input:\n    file metadata from ch_metadata_alpha_sig\n    file \"shannon.qza\" from ch_shannon_qza\n    file \"simpson.qza\" from ch_simpson_qza\n    file \"chao1.qza\" from ch_chao_qza\n    file \"ace.qza\" from ch_ace_qza\n    file \"obs.qza\" from ch_obs_qza\n    file \"faith_pd.qza\" from ch_faith_qza\n\n    output:\n    path \"shannon/*\" into ch_shannon_path\n    path \"simpson/*\" into ch_simpson_path\n    path \"chao1/*\" into ch_chao_path\n    path \"ace/*\" into ch_ace_path\n    path \"obs/*\" into ch_obs_path\n    path \"faith_pd/*\" into ch_faith_path\n\n    script:\n    \"\"\"\n    #!/usr/bin/env bash\n\n    qiime diversity alpha-group-significance \\\n    --i-alpha-diversity shannon.qza \\\n    --m-metadata-file ${metadata} \\\n    --o-visualization shannon.qzv \n\n    qiime diversity alpha-group-significance \\\n    --i-alpha-diversity simpson.qza \\\n    --m-metadata-file ${metadata} \\\n    --o-visualization simpson.qzv\n\n    qiime diversity alpha-group-significance \\\n    --i-alpha-diversity chao1.qza \\\n    --m-metadata-file ${metadata} \\\n    --o-visualization chao1.qzv \n\n    qiime diversity alpha-group-significance \\\n    --i-alpha-diversity ace.qza \\\n    --m-metadata-file ${metadata} \\\n    --o-visualization ace.qzv \n\n    qiime diversity alpha-group-significance \\\n    --i-alpha-diversity obs.qza \\\n    --m-metadata-file ${metadata} \\\n    --o-visualization obs.qzv \n\n    qiime diversity alpha-group-significance \\\n    --i-alpha-diversity faith_pd.qza \\\n    --m-metadata-file ${metadata} \\\n    --o-visualization faith_pd.qzv \n\n    qiime tools export \\\n    --input-path shannon.qzv \\\n    --output-path shannon\n\n    qiime tools export \\\n    --input-path simpson.qzv \\\n    --output-path simpson\n\n    qiime tools export \\\n    --input-path chao1.qzv \\\n    --output-path chao1\n\n    qiime tools export \\\n    --input-path ace.qzv \\\n    --output-path ace \n\n    qiime tools export \\\n    --input-path obs.qzv \\\n    --output-path obs\n\n    qiime tools export \\\n    --input-path faith_pd.qzv \\\n    --output-path faith_pd\n    \"\"\"\n}",
        "nb_lignes_process": 82,
        "string_script": "    \"\"\"\n    #!/usr/bin/env bash\n\n    qiime diversity alpha-group-significance \\\n    --i-alpha-diversity shannon.qza \\\n    --m-metadata-file ${metadata} \\\n    --o-visualization shannon.qzv \n\n    qiime diversity alpha-group-significance \\\n    --i-alpha-diversity simpson.qza \\\n    --m-metadata-file ${metadata} \\\n    --o-visualization simpson.qzv\n\n    qiime diversity alpha-group-significance \\\n    --i-alpha-diversity chao1.qza \\\n    --m-metadata-file ${metadata} \\\n    --o-visualization chao1.qzv \n\n    qiime diversity alpha-group-significance \\\n    --i-alpha-diversity ace.qza \\\n    --m-metadata-file ${metadata} \\\n    --o-visualization ace.qzv \n\n    qiime diversity alpha-group-significance \\\n    --i-alpha-diversity obs.qza \\\n    --m-metadata-file ${metadata} \\\n    --o-visualization obs.qzv \n\n    qiime diversity alpha-group-significance \\\n    --i-alpha-diversity faith_pd.qza \\\n    --m-metadata-file ${metadata} \\\n    --o-visualization faith_pd.qzv \n\n    qiime tools export \\\n    --input-path shannon.qzv \\\n    --output-path shannon\n\n    qiime tools export \\\n    --input-path simpson.qzv \\\n    --output-path simpson\n\n    qiime tools export \\\n    --input-path chao1.qzv \\\n    --output-path chao1\n\n    qiime tools export \\\n    --input-path ace.qzv \\\n    --output-path ace \n\n    qiime tools export \\\n    --input-path obs.qzv \\\n    --output-path obs\n\n    qiime tools export \\\n    --input-path faith_pd.qzv \\\n    --output-path faith_pd\n    \"\"\"",
        "nb_lignes_script": 56,
        "language_script": "bash",
        "tools": [
            "denvax",
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/denvax",
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            },
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "ch_metadata_alpha_sig",
            "ch_shannon_qza",
            "ch_simpson_qza",
            "ch_chao_qza",
            "ch_ace_qza",
            "ch_obs_qza",
            "ch_faith_qza"
        ],
        "nb_inputs": 7,
        "outputs": [
            "ch_shannon_path",
            "ch_simpson_path",
            "ch_chao_path",
            "ch_ace_path",
            "ch_obs_path",
            "ch_faith_path"
        ],
        "nb_outputs": 6,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "BetaDiversitySignificance": {
        "name_process": "BetaDiversitySignificance",
        "string_process": "\nprocess BetaDiversitySignificance{\n    publishDir \"${params.outdir}/qiime\", mode: 'copy'\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    input:\n    val ioi from ch_ioi_beta_sig\n    file metadata from ch_metadata_beta_sig\n    path \"core-metric-results/*\" from ch_core_beta_significance \n\n    output:\n    path \"unweighted-sig/*\" into ch_u_unifrac_beta_path\n    path \"weighted-sig/*\" into ch_w_unifrac_beta_path\n\n    script:\n    \"\"\"\n    #!/usr/bin/env bash\n\n    qiime diversity beta-group-significance \\\n    --i-distance-matrix core-metric-results/unweighted_unifrac_distance_matrix.qza \\\n    --m-metadata-file ${metadata} \\\n    --m-metadata-column ${ioi} \\\n    --o-visualization unweighted-unifrac-${ioi}-significance.qzv \\\n    --p-pairwise\n\n    qiime tools export \\\n    --input-path unweighted-unifrac-${ioi}-significance.qzv \\\n    --output-path unweighted-sig/\n\n    qiime diversity beta-group-significance \\\n    --i-distance-matrix core-metric-results/weighted_unifrac_distance_matrix.qza \\\n    --m-metadata-file ${metadata} \\\n    --m-metadata-column ${ioi} \\\n    --o-visualization  weighted-unifrac-${ioi}-significance.qzv \\\n    --p-pairwise\n\n    qiime tools export \\\n    --input-path weighted-unifrac-${ioi}-significance.qzv \\\n    --output-path weighted-sig/\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    \"\"\"\n    #!/usr/bin/env bash\n\n    qiime diversity beta-group-significance \\\n    --i-distance-matrix core-metric-results/unweighted_unifrac_distance_matrix.qza \\\n    --m-metadata-file ${metadata} \\\n    --m-metadata-column ${ioi} \\\n    --o-visualization unweighted-unifrac-${ioi}-significance.qzv \\\n    --p-pairwise\n\n    qiime tools export \\\n    --input-path unweighted-unifrac-${ioi}-significance.qzv \\\n    --output-path unweighted-sig/\n\n    qiime diversity beta-group-significance \\\n    --i-distance-matrix core-metric-results/weighted_unifrac_distance_matrix.qza \\\n    --m-metadata-file ${metadata} \\\n    --m-metadata-column ${ioi} \\\n    --o-visualization  weighted-unifrac-${ioi}-significance.qzv \\\n    --p-pairwise\n\n    qiime tools export \\\n    --input-path weighted-unifrac-${ioi}-significance.qzv \\\n    --output-path weighted-sig/\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "denvax",
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/denvax",
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            },
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "ch_ioi_beta_sig",
            "ch_metadata_beta_sig",
            "ch_core_beta_significance"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ch_u_unifrac_beta_path",
            "ch_w_unifrac_beta_path"
        ],
        "nb_outputs": 2,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/qiime\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "GeneratePhylogeneticTrees": {
        "name_process": "GeneratePhylogeneticTrees",
        "string_process": "\nprocess GeneratePhylogeneticTrees{\n    publishDir \"${params.outdir}/graphlan\", mode: 'copy'\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    input:\n    file metadata from ch_metadata_phylo_tree\n    val ioi from ch_ioi_phylo_tree\n    file \"table-dada2.qza\" from ch_table_phylo_tree\n    file \"taxonomy.qza\" from ch_taxonomy_phylo_tree\n    file \"graph.sh\" from ch_graph_script\n    file \"filter_samples.py\" from ch_filter_script\n\n    output:\n    path \"phylo_trees/*\" into ch_png_phylo_tree\n    file \"table-dada2.qza\" into ch_table_lefse\n    file \"taxonomy.qza\" into ch_tax_lefse\n    \n\n    script:\n    \"\"\"\n    #!/usr/bin/env python3\n    import subprocess\n    import pandas as pd\n    import numpy as np \n    import time\n\n    metadata_table= pd.read_table(\\\"${metadata}\\\", sep='\\t')\n    metadata_table = metadata_table.drop([0,1])\n\n    ioi_set = set(metadata_table[\\\"${ioi}\\\"])\n    ioi = '${ioi}'\n\n    subprocess.run(['mkdir phylo_trees'], shell=True)\n\n    # iterates over the items of interest to produce a circular phylogenetic tree per category e.g. CONTROL TREATMENT\n    for item in ioi_set:\n\n        # filters/splits the feature table based on the current ioi\n        \n        filter_command = \"python3 filter_samples.py -m ${metadata} -i ${ioi} -c \"+item\n        result = subprocess.run([filter_command], shell=True)\n\n        time.sleep(2)\n\n        # adds taxonomic info needed for plotting\n        collapse_command = 'qiime taxa collapse \\\n        --i-table '+item+'-filtered-table.qza \\\n        --o-collapsed-table collapse-'+item+'-table.qza \\\n        --p-level 7 \\\n        --i-taxonomy taxonomy.qza'\n\n        result = subprocess.run([collapse_command], shell=True)\n\n        # exports artifact so that the next step can collect it\n        export_command='qiime tools export \\\n        --input-path collapse-'+item+'-table.qza \\\n        --output-path collapse-'+item+'-frequency/'\n        \n        result = subprocess.run([export_command], shell=True)\n\n        # turns feature table into a human-reable format\n        biom_command = 'biom convert -i collapse-'+item+\\\n        '-frequency/feature-table.biom -o otu-'+item+\\\n        '-table.tsv --to-tsv --header-key taxonomy'\n\n        result = subprocess.run([biom_command], shell=True)\n\n        # formatting the table so that it is in the correct order\n        table = pd.read_table(\\\"otu-\"+str(item)+\"-table.tsv\\\", sep='\\t', header=1)\n        table = table.drop(columns=['taxonomy'])\n        table = table.rename(columns={'#OTU ID':'taxonomy'})\n        tax = table.pop('taxonomy')\n        insertion_site = len(table.columns)\n        table.insert(insertion_site, 'taxonomy', tax)\n        table.insert(0, 'OTU_ID', np.arange(len(table)))\n        table.to_csv('otu-'+str(item)+'-mod-table.tsv', sep='\\t', index=False)\n\n        # human readable table into compressed computer-readble format\n        biom_format_command='biom convert -i otu-'+str(item)+ \\\n        '-mod-table.tsv -o otu-table-mod.biom --to-hdf5 --table-type=\\\"OTU table\\\" --process-obs-metadata taxonomy'\n\n        result = subprocess.run([biom_format_command], shell=True)\n\n        # Outputs the current ioi so that it can be annotatted in the graphlan image\n        with open('current.txt', 'w') as file:\n            file.write(item)\n\n        # bash script call to handle the steps within a conda python 2.7.17 envionment\n        generate_image_command = 'bash graph.sh'\n\n        result = subprocess.run([generate_image_command], shell=True)\n\n        # renaming otu tables so they have meaning\n        rename_table = 'cp otu-table-mod.biom phylo_trees/otu-table-'+item+'-mod.biom'\n        \n        result = subprocess.run([rename_table],shell=True)\n\n        # renaming the output of the graping bash script so that it has meaning\n        rename_image = 'cp image_graph.png phylo_trees/image_'+item+'_graph.png'\n\n        result = subprocess.run([rename_image], shell=True)\n\n        # rename pdf quality image so that it has meaning\n        rename_pdf_image = 'cp image_pdf_graph.png phylo_trees/image_'+item+'_pdf_g.png'\n\n        result = subprocess.run([rename_pdf_image], shell=True)\n        \n    \"\"\"\n\n}",
        "nb_lignes_process": 112,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python3\n    import subprocess\n    import pandas as pd\n    import numpy as np \n    import time\n\n    metadata_table= pd.read_table(\\\"${metadata}\\\", sep='\\t')\n    metadata_table = metadata_table.drop([0,1])\n\n    ioi_set = set(metadata_table[\\\"${ioi}\\\"])\n    ioi = '${ioi}'\n\n    subprocess.run(['mkdir phylo_trees'], shell=True)\n\n    # iterates over the items of interest to produce a circular phylogenetic tree per category e.g. CONTROL TREATMENT\n    for item in ioi_set:\n\n        # filters/splits the feature table based on the current ioi\n        \n        filter_command = \"python3 filter_samples.py -m ${metadata} -i ${ioi} -c \"+item\n        result = subprocess.run([filter_command], shell=True)\n\n        time.sleep(2)\n\n        # adds taxonomic info needed for plotting\n        collapse_command = 'qiime taxa collapse \\\n        --i-table '+item+'-filtered-table.qza \\\n        --o-collapsed-table collapse-'+item+'-table.qza \\\n        --p-level 7 \\\n        --i-taxonomy taxonomy.qza'\n\n        result = subprocess.run([collapse_command], shell=True)\n\n        # exports artifact so that the next step can collect it\n        export_command='qiime tools export \\\n        --input-path collapse-'+item+'-table.qza \\\n        --output-path collapse-'+item+'-frequency/'\n        \n        result = subprocess.run([export_command], shell=True)\n\n        # turns feature table into a human-reable format\n        biom_command = 'biom convert -i collapse-'+item+\\\n        '-frequency/feature-table.biom -o otu-'+item+\\\n        '-table.tsv --to-tsv --header-key taxonomy'\n\n        result = subprocess.run([biom_command], shell=True)\n\n        # formatting the table so that it is in the correct order\n        table = pd.read_table(\\\"otu-\"+str(item)+\"-table.tsv\\\", sep='\\t', header=1)\n        table = table.drop(columns=['taxonomy'])\n        table = table.rename(columns={'#OTU ID':'taxonomy'})\n        tax = table.pop('taxonomy')\n        insertion_site = len(table.columns)\n        table.insert(insertion_site, 'taxonomy', tax)\n        table.insert(0, 'OTU_ID', np.arange(len(table)))\n        table.to_csv('otu-'+str(item)+'-mod-table.tsv', sep='\\t', index=False)\n\n        # human readable table into compressed computer-readble format\n        biom_format_command='biom convert -i otu-'+str(item)+ \\\n        '-mod-table.tsv -o otu-table-mod.biom --to-hdf5 --table-type=\\\"OTU table\\\" --process-obs-metadata taxonomy'\n\n        result = subprocess.run([biom_format_command], shell=True)\n\n        # Outputs the current ioi so that it can be annotatted in the graphlan image\n        with open('current.txt', 'w') as file:\n            file.write(item)\n\n        # bash script call to handle the steps within a conda python 2.7.17 envionment\n        generate_image_command = 'bash graph.sh'\n\n        result = subprocess.run([generate_image_command], shell=True)\n\n        # renaming otu tables so they have meaning\n        rename_table = 'cp otu-table-mod.biom phylo_trees/otu-table-'+item+'-mod.biom'\n        \n        result = subprocess.run([rename_table],shell=True)\n\n        # renaming the output of the graping bash script so that it has meaning\n        rename_image = 'cp image_graph.png phylo_trees/image_'+item+'_graph.png'\n\n        result = subprocess.run([rename_image], shell=True)\n\n        # rename pdf quality image so that it has meaning\n        rename_pdf_image = 'cp image_pdf_graph.png phylo_trees/image_'+item+'_pdf_g.png'\n\n        result = subprocess.run([rename_pdf_image], shell=True)\n        \n    \"\"\"",
        "nb_lignes_script": 88,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_metadata_phylo_tree",
            "ch_ioi_phylo_tree",
            "ch_table_phylo_tree",
            "ch_taxonomy_phylo_tree",
            "ch_graph_script",
            "ch_filter_script"
        ],
        "nb_inputs": 6,
        "outputs": [
            "ch_png_phylo_tree",
            "ch_table_lefse",
            "ch_tax_lefse"
        ],
        "nb_outputs": 3,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/graphlan\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "LefseFormat": {
        "name_process": "LefseFormat",
        "string_process": "\nprocess LefseFormat {\n    publishDir \"${params.outdir}/lefse\", mode: 'copy'\n\n                                     \n                       \n    container \"docker://lorentzb/r_latest\"\n\n    input:\n    val ioi from ch_ioi_lefse\n    file \"table-dada2.qza\" from ch_table_lefse\n    file \"rooted-tree.qza\" from ch_tree_lefse\n    file \"taxonomy.qza\" from ch_tax_lefse\n    file metadata from ch_metadata_lefse\n    file \"qiime_to_lefse.R\" from ch_lefse_format_script\n    file \"set.txt\" from ch_r_wait\n    file \"init_and_refresh.R\" from ch_r_init\n    file \"renv.lock\" from ch_r_lock\n    \n\n    output:\n    path \"combos/*\" into ch_paired_lefse_format\n    file \"table-dada2.qza\" into ch_table_report\n    file \"rooted-tree.qza\" into ch_tree_report\n    file \"taxonomy.qza\" into ch_tax_report\n    file \"metadata.tsv\" into ch_metadata_report\n\n\n    script:\n    \"\"\"\n    #!/usr/bin/env bash\n    mkdir combos\n    Rscript init_and_refresh.R\n    cp ${metadata} \"metadata.tsv\"\n    Rscript qiime_to_lefse.R ${ioi}\n    mv lefse_formatted.txt combos/\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    \"\"\"\n    #!/usr/bin/env bash\n    mkdir combos\n    Rscript init_and_refresh.R\n    cp ${metadata} \"metadata.tsv\"\n    Rscript qiime_to_lefse.R ${ioi}\n    mv lefse_formatted.txt combos/\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "ch_ioi_lefse",
            "ch_table_lefse",
            "ch_tree_lefse",
            "ch_tax_lefse",
            "ch_metadata_lefse",
            "ch_lefse_format_script",
            "ch_r_wait",
            "ch_r_init",
            "ch_r_lock"
        ],
        "nb_inputs": 9,
        "outputs": [
            "ch_paired_lefse_format",
            "ch_table_report",
            "ch_tree_report",
            "ch_tax_report",
            "ch_metadata_report"
        ],
        "nb_outputs": 5,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/lefse\", mode: 'copy'",
            "container \"docker://lorentzb/r_latest\""
        ],
        "when": "",
        "stub": ""
    },
    "LefseAnalysis": {
        "name_process": "LefseAnalysis",
        "string_process": "\nprocess LefseAnalysis{\n    publishDir \"${params.outdir}/lefse\", mode: 'copy'\n\n                                           \n                             \n    container \"docker://lorentzb/py2_env\"\n\n    input:\n    path \"combos/*\" from ch_paired_lefse_format\n    file \"lefse_analysis.sh\" from ch_lefse_analysis_script\n    file plot_clado from ch_clado_file\n    file plot_res from ch_plot_res\n\n    output:\n    path \"result/*\" into ch_lefse_results\n\n    script:\n    \"\"\"\n    #!/usr/bin/env bash\n    mkdir result\n    bash lefse_analysis.sh\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    #!/usr/bin/env bash\n    mkdir result\n    bash lefse_analysis.sh\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "ch_paired_lefse_format",
            "ch_lefse_analysis_script",
            "ch_clado_file",
            "ch_plot_res"
        ],
        "nb_inputs": 4,
        "outputs": [
            "ch_lefse_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}/lefse\", mode: 'copy'",
            "container \"docker://lorentzb/py2_env\""
        ],
        "when": "",
        "stub": ""
    },
    "ExportSetup": {
        "name_process": "ExportSetup",
        "string_process": "\nprocess ExportSetup{\n    publishDir \"${params.outdir}\", mode: 'copy'\n\n                                           \n                             \n    container \"docker://lorentzb/automate_16_nf\"\n\n    input:\n    file \"stats-dada2.qzv\" from ch_dada_stats_export\n    file metadata from ch_metadata_finalize \n\n    output:\n    file \"dada2_stats.tsv\" into ch_dada_stats_file\n    file \"metadata.tsv\" into ch_metadata_renamed\n\n    script:\n    \"\"\"\n    #!/usr/bin/env bash\n\n    qiime tools export \\\n    --input-path stats-dada2.qzv \\\n    --output-path stats-dada2\n\n    cp stats-dada2/metadata.tsv ./dada2_stats.tsv\n\n    cp ${metadata} ./metadata.tsv  \n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    #!/usr/bin/env bash\n\n    qiime tools export \\\n    --input-path stats-dada2.qzv \\\n    --output-path stats-dada2\n\n    cp stats-dada2/metadata.tsv ./dada2_stats.tsv\n\n    cp ${metadata} ./metadata.tsv  \n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "denvax",
            "QIIME"
        ],
        "tools_url": [
            "https://bio.tools/denvax",
            "https://bio.tools/qiime"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            },
            {
                "name": "QIIME",
                "uri": "https://bio.tools/qiime",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3070",
                            "term": "Biological science"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Open-source bioinformatics pipeline for performing microbiome analysis from raw DNA sequencing data. The pipeline is designed to take users from raw sequencing data generated on the Illumina or other platforms through publication quality graphics and statistics. This includes demultiplexing and quality filtering, OTU picking, taxonomic assignment, and phylogenetic reconstruction, and diversity analyses and visualizations.",
                "homepage": "http://qiime.org/"
            }
        ],
        "inputs": [
            "ch_dada_stats_export",
            "ch_metadata_finalize"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_dada_stats_file",
            "ch_metadata_renamed"
        ],
        "nb_outputs": 2,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${params.outdir}\", mode: 'copy'",
            "container \"docker://lorentzb/automate_16_nf\""
        ],
        "when": "",
        "stub": ""
    },
    "GenerateReport": {
        "name_process": "GenerateReport",
        "string_process": "\nprocess GenerateReport{\n     publishDir \"${baseDir}\", mode: 'move'\n\n                                     \n                       \n    container \"docker://lorentzb/r_latest\"\n    label 'r'\n\n    input:\n    file \"item_of_interest.csv\" from ch_ioi_file_out\n    file \"table-dada2.qza\" from ch_table_report\n    file \"rooted-tree.qza\" from ch_tree_report\n    file \"taxonomy.qza\" from ch_tax_report\n    file metadata from ch_metadata_report\n    path \"phylo_trees/*\" from ch_png_phylo_tree\n    path \"shannon/*\" from ch_shannon_path\n    path \"simpson/*\" from ch_simpson_path\n    path \"chao1/*\" from ch_chao_path\n    path \"ace/*\"  from ch_ace_path\n    path \"obs/*\" from ch_obs_path\n    path \"faith_pd/*\" from ch_faith_path\n    path \"core-metric-results/*\" from ch_core_report\n    path \"alpha-rareplot/*\" from ch_alpha_rare_viz\n    path \"unweighted-sig/*\" from ch_u_unifrac_beta_path\n    path \"weighted-sig/*\" from ch_w_unifrac_beta_path\n    path \"result/*\" from ch_lefse_results\n    file \"report.Rmd\" from ch_report_outline\n    file \"make_report.sh\" from ch_report_bash_script\n    file \"order_item_of_interest.csv\" from ch_format_ioi_order\n    file \"table.qzv\" from ch_table_viz_export\n    file 'demux_summary.qzv' from ch_demux_export\n\n\n\n    output:\n    file \"done.txt\" into ch_done\n       \n    shell:\n    '''\n    #!/usr/bin/env bash\n    echo \"all files copied!\"\n    echo \":)\" > done.txt\n    cd !{baseDir}\n    echo $PWD\n    echo ' !{baseDir}/!{params.outdir} ' > out.txt\n    '''\n}",
        "nb_lignes_process": 46,
        "string_script": "    '''\n    #!/usr/bin/env bash\n    echo \"all files copied!\"\n    echo \":)\" > done.txt\n    cd !{baseDir}\n    echo $PWD\n    echo ' !{baseDir}/!{params.outdir} ' > out.txt\n    '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "denvax"
        ],
        "tools_url": [
            "https://bio.tools/denvax"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            }
        ],
        "inputs": [
            "ch_ioi_file_out",
            "ch_table_report",
            "ch_tree_report",
            "ch_tax_report",
            "ch_metadata_report",
            "ch_png_phylo_tree",
            "ch_shannon_path",
            "ch_simpson_path",
            "ch_chao_path",
            "ch_ace_path",
            "ch_obs_path",
            "ch_faith_path",
            "ch_core_report",
            "ch_alpha_rare_viz",
            "ch_u_unifrac_beta_path",
            "ch_w_unifrac_beta_path",
            "ch_lefse_results",
            "ch_report_outline",
            "ch_report_bash_script",
            "ch_format_ioi_order",
            "ch_table_viz_export",
            "ch_demux_export"
        ],
        "nb_inputs": 22,
        "outputs": [
            "ch_done"
        ],
        "nb_outputs": 1,
        "name_workflow": "lorentzben__automate_16_nf",
        "directive": [
            "publishDir \"${baseDir}\", mode: 'move'",
            "container \"docker://lorentzb/r_latest\"",
            "label 'r'"
        ],
        "when": "",
        "stub": ""
    }
}
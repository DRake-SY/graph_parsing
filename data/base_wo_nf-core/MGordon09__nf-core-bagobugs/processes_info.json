{
    "MERGE_METAPHLAN_PROFILES": {
        "name_process": "MERGE_METAPHLAN_PROFILES",
        "string_process": "\nprocess MERGE_METAPHLAN_PROFILES {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }\n\n    conda (params.enable_conda ? \"bioconda::metaphlan=3.0.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/metaphlan:3.0.9--pyhb7b1952_0\"\n    } else {\n        container \"quay.io/biocontainers/metaphlan:3.0.9--pyhb7b1952_0\"\n    }\n\n    input:\n    path profiles\n\n    output:\n    path '*.tsv', emit: txt\n\n\n    script:                                                    \n    \"\"\"\n    merge_metaphlan_tables.py  $profiles > merged_metaphlan_profiles.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    merge_metaphlan_tables.py  $profiles > merged_metaphlan_profiles.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "profiles"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }",
            "conda (params.enable_conda ? \"bioconda::metaphlan=3.0.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/metaphlan:3.0.9--pyhb7b1952_0\" } else { container \"quay.io/biocontainers/metaphlan:3.0.9--pyhb7b1952_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CAT_FASTQ": {
        "name_process": "CAT_FASTQ",
        "string_process": "\nprocess CAT_FASTQ {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'merged_fastq', meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n    } else {\n        container \"biocontainers/biocontainers:v1.2.0_cv1\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.merged.fastq.gz\"), emit: reads\n\n    script:\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.sort().join(' ')} > ${prefix}.merged.fastq.gz\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.sort().join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.sort().join(' ')} > ${prefix}_2.merged.fastq.gz\n            \"\"\"\n        }\n    }\n}",
        "nb_lignes_process": 40,
        "string_script": "    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def readList = reads.collect{ it.toString() }\n    if (meta.single_end) {\n        if (readList.size > 1) {\n            \"\"\"\n            cat ${readList.sort().join(' ')} > ${prefix}.merged.fastq.gz\n            \"\"\"\n        }\n    } else {\n        if (readList.size > 2) {\n            def read1 = []\n            def read2 = []\n            readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n            \"\"\"\n            cat ${read1.sort().join(' ')} > ${prefix}_1.merged.fastq.gz\n            cat ${read2.sort().join(' ')} > ${prefix}_2.merged.fastq.gz\n            \"\"\"\n        }\n    }",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'merged_fastq', meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTQSCREEN": {
        "name_process": "FASTQSCREEN",
        "string_process": "\nprocess FASTQSCREEN {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::fastq-screen=0.14.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/fastq-screen:0.14.0--pl5262hdfd78af_1\"\n    } else {\n        container \"quay.io/biocontainers/fastq-screen:0.14.0--pl5262hdfd78af_1\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path config_file\n\n    output:\n    tuple val(meta), path(\"*png\")                   ,  optional:true, emit:  png\n    tuple val(meta), path(\"*html\")                  , emit: html\n    tuple val(meta), path(\"*screen.txt\")            , emit: report\n    path(\"*.version.txt\")          , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input    =  !meta.single_end ? \"${reads[0]}\" : \"${reads}\"                                                                             \n    def version  = '0.14'                                                                   \n    if (meta.single_end) {\n    \"\"\"\n    fastq_screen \\\\\n        $options.args \\\\\n        --conf $config_file \\\\\n        --threads $task.cpus \\\\\n        $reads\n\n    echo $version > ${software}.version.txt\n    \"\"\"\n    } else {\n    \"\"\"\n    fastq_screen \\\\\n        $options.args \\\\\n        --conf $config_file \\\\\n        --threads $task.cpus \\\\\n        ${reads[0]}\n\n    fastq_screen \\\\\n        $options.args \\\\\n        --conf $config_file \\\\\n        --threads $task.cpus \\\\\n        ${reads[1]}\n\n    echo $version > ${software}.version.txt\n    \"\"\"\n    }\n\n}",
        "nb_lignes_process": 57,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def input    =  !meta.single_end ? \"${reads[0]}\" : \"${reads}\"                                                                             \n    def version  = '0.14'                                                                   \n    if (meta.single_end) {\n    \"\"\"\n    fastq_screen \\\\\n        $options.args \\\\\n        --conf $config_file \\\\\n        --threads $task.cpus \\\\\n        $reads\n\n    echo $version > ${software}.version.txt\n    \"\"\"\n    } else {\n    \"\"\"\n    fastq_screen \\\\\n        $options.args \\\\\n        --conf $config_file \\\\\n        --threads $task.cpus \\\\\n        ${reads[0]}\n\n    fastq_screen \\\\\n        $options.args \\\\\n        --conf $config_file \\\\\n        --threads $task.cpus \\\\\n        ${reads[1]}\n\n    echo $version > ${software}.version.txt\n    \"\"\"\n    }",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "config_file"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::fastq-screen=0.14.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/fastq-screen:0.14.0--pl5262hdfd78af_1\" } else { container \"quay.io/biocontainers/fastq-screen:0.14.0--pl5262hdfd78af_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "METAPHLAN3_RUN": {
        "name_process": "METAPHLAN3_RUN",
        "string_process": "\nprocess METAPHLAN3_RUN {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::metaphlan=3.0.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/metaphlan:3.0.9--pyhb7b1952_0\"\n    } else {\n        container \"quay.io/biocontainers/metaphlan:3.0.9--pyhb7b1952_0\"\n    }\n\n    input:\n                                                                                                                                                                          \n    tuple val(meta), path(input)\n    path metaphlan_db                                                                                                                \n\n    output:\n    tuple val(meta), path(\"*_profile.tsv\")           ,        emit: profile\n    tuple val(meta), path(\"*.biom\")          ,                emit: biom\n    tuple val(meta), path('*.bowtie2out.txt'), optional:true, emit: bt2out\n    path \"*.version.txt\"                     ,                emit: version\n\n    script:\n    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                                                                                         \n    def input_type = (\"$input\".contains(\".fastq\")) ? \"--input_type fastq\" :  (\"$input\".contains(\".fasta\")) ? \"--input_type fasta\" : (\"$input\".endsWith(\".fna\")) ? \"--input_type fasta\" : (\"$input\".endsWith(\".bowtie2out.txt\")) ? \"--input_type bowtie2out\" : \"--input_type sam\"                                                                                                     \n    def input_data = (\"$input_type\".contains(\"fastq\")) && !meta.single_end ? \"${input[0]},${input[1]}\" : \"$input\"\n    def bowtie2_out= \"$input_type\" == \"--input_type bowtie2out\" || \"$input_type\" == \"--input_type sam\" ? '' : \"--bowtie2out ${prefix}.bowtie2out.txt\"\n    \"\"\"\n    metaphlan \\\\\n        --nproc $task.cpus \\\\\n        $input_type \\\\\n        $input_data \\\\\n        $options.args \\\\\n        $bowtie2_out \\\\\n        --bowtie2db ${metaphlan_db} \\\\\n        --biom ${prefix}.biom \\\\\n        --output_file ${prefix}_profile.tsv\n\n    echo \\$(metaphlan --version 2>&1) | awk '{print \\$3}' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    def software   = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n                                                                                                                         \n    def input_type = (\"$input\".contains(\".fastq\")) ? \"--input_type fastq\" :  (\"$input\".contains(\".fasta\")) ? \"--input_type fasta\" : (\"$input\".endsWith(\".fna\")) ? \"--input_type fasta\" : (\"$input\".endsWith(\".bowtie2out.txt\")) ? \"--input_type bowtie2out\" : \"--input_type sam\"                                                                                                     \n    def input_data = (\"$input_type\".contains(\"fastq\")) && !meta.single_end ? \"${input[0]},${input[1]}\" : \"$input\"\n    def bowtie2_out= \"$input_type\" == \"--input_type bowtie2out\" || \"$input_type\" == \"--input_type sam\" ? '' : \"--bowtie2out ${prefix}.bowtie2out.txt\"\n    \"\"\"\n    metaphlan \\\\\n        --nproc $task.cpus \\\\\n        $input_type \\\\\n        $input_data \\\\\n        $options.args \\\\\n        $bowtie2_out \\\\\n        --bowtie2db ${metaphlan_db} \\\\\n        --biom ${prefix}.biom \\\\\n        --output_file ${prefix}_profile.tsv\n\n    echo \\$(metaphlan --version 2>&1) | awk '{print \\$3}' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "MetaPhlAn"
        ],
        "tools_url": [
            "https://bio.tools/metaphlan"
        ],
        "tools_dico": [
            {
                "name": "MetaPhlAn",
                "uri": "https://bio.tools/metaphlan",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0324",
                                    "term": "Phylogenetic tree analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Computational tool for profiling the composition of microbial communities from metagenomic shotgun sequencing data.",
                "homepage": "http://huttenhower.sph.harvard.edu/metaphlan"
            }
        ],
        "inputs": [
            "meta",
            "input",
            "metaphlan_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::metaphlan=3.0.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/metaphlan:3.0.9--pyhb7b1952_0\" } else { container \"quay.io/biocontainers/metaphlan:3.0.9--pyhb7b1952_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_HUMANN_PATHABUNDANCE": {
        "name_process": "MERGE_HUMANN_PATHABUNDANCE",
        "string_process": "\nprocess MERGE_HUMANN_PATHABUNDANCE {\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"biobakery::humann=3.0.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\"\n    } else {\n        container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\"\n    }\n\n    input:\n    path pathabundance\n                       \n\n    output:\n    path '*.tsv', emit: tsv\n                                     \n                                    \n\n    script:                                                 \n    \"\"\"\n    humann_join_tables \\\\\n    -i  . \\\\\n    --output merged_gene_families.tsv \\\\\n    --file_name pathabundance\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    humann_join_tables \\\\\n    -i  . \\\\\n    --output merged_gene_families.tsv \\\\\n    --file_name pathabundance\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pathabundance"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"biobakery::humann=3.0.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\" } else { container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CONCATENATE_FASTA": {
        "name_process": "CONCATENATE_FASTA",
        "string_process": "\nprocess CONCATENATE_FASTA {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path('*_joined.fastq.gz'), emit: joined_reads\n\n           \n\t                                                                                                                                   \n                                                                   \n\n\n    script:\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    cat $reads >  ${prefix}_joined.fastq.gz\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    cat $reads >  ${prefix}_joined.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    cache false\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.csv\"     , emit: csv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "\nprocess SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }\n\n    conda     (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    container \"quay.io/biocontainers/python:3.8.3\"\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.csv'\n\n\n    script:                                                                      \n    \"\"\"\n    python3 ${projectDir}/bin/check_samplesheet.py $samplesheet samplesheet.valid.csv\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    python3 ${projectDir}/bin/check_samplesheet.py $samplesheet samplesheet.valid.csv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "tag \"$samplesheet\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)",
            "container \"quay.io/biocontainers/python:3.8.3\""
        ],
        "when": "",
        "stub": ""
    },
    "SEQTK_SAMPLE": {
        "name_process": "SEQTK_SAMPLE",
        "string_process": "\nprocess SEQTK_SAMPLE {\n    tag \"$meta.id\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3\"\n    } else {\n        container \"quay.io/biocontainers/seqtk:1.3--h5bf99c6_3\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    val sample_size\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    path \"*.version.txt\"               , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        seqtk \\\\\n            sample \\\\\n            $options.args \\\\\n            $reads \\\\\n            $sample_size \\\\\n            | gzip > ${prefix}.fastq.gz \\\\\n\n        echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//' > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        seqtk \\\\\n            sample \\\\\n            $options.args \\\\\n            ${reads[0]} \\\\\n            $sample_size \\\\\n            | gzip > ${prefix}_1.fastq.gz \\\\\n\n        seqtk \\\\\n            sample \\\\\n            $options.args \\\\\n            ${reads[1]} \\\\\n            $sample_size \\\\\n            | gzip > ${prefix}_2.fastq.gz \\\\\n\n        echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//' > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 55,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        seqtk \\\\\n            sample \\\\\n            $options.args \\\\\n            $reads \\\\\n            $sample_size \\\\\n            | gzip > ${prefix}.fastq.gz \\\\\n\n        echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//' > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        seqtk \\\\\n            sample \\\\\n            $options.args \\\\\n            ${reads[0]} \\\\\n            $sample_size \\\\\n            | gzip > ${prefix}_1.fastq.gz \\\\\n\n        seqtk \\\\\n            sample \\\\\n            $options.args \\\\\n            ${reads[1]} \\\\\n            $sample_size \\\\\n            | gzip > ${prefix}_2.fastq.gz \\\\\n\n        echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//' > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "seqtk",
            "SAMPLE"
        ],
        "tools_url": [
            "https://bio.tools/seqtk",
            "https://bio.tools/sample"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            },
            {
                "name": "SAMPLE",
                "uri": "https://bio.tools/sample",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Linkage mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Functional mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The tool is designed to identify regions that are linked to a recessive disease by analysing genotype data from the parents and unaffected sibs of affected individuals. Since this analysis does not use data from affected patients, it is suited to the identification of lethal recessive genes, when the patients may have died before DNA samples could be obtained.",
                "homepage": "http://dna.leeds.ac.uk/sample/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "sample_size"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3\" } else { container \"quay.io/biocontainers/seqtk:1.3--h5bf99c6_3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_HUMANN_GENEFAMILIES": {
        "name_process": "MERGE_HUMANN_GENEFAMILIES",
        "string_process": "\nprocess MERGE_HUMANN_GENEFAMILIES {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"biobakery::humann=3.0.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\"\n    } else {\n        container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\"\n    }\n\n    input:\n                                                                             \n    path genefamilies\n                        \n                       \n\n    output:\n    path '*.tsv', emit: tsv\n                                     \n                                    \n                              \n\n    script:                                                 \n    \"\"\"\n    humann_join_tables \\\\\n    -i  . \\\\\n    --output merged_gfamilies.tsv \\\\\n    --file_name genefamilies\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    humann_join_tables \\\\\n    -i  . \\\\\n    --output merged_gfamilies.tsv \\\\\n    --file_name genefamilies\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genefamilies"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"biobakery::humann=3.0.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\" } else { container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "\nprocess MULTIQC {\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\"\n    } else {\n        container \"quay.io/biocontainers/multiqc:1.10.1--py_0\"\n    }\n\n    input:\n    path multiqc_files\n    path 'fastqc_raw/*'\n    path 'fastqc_trimmed/*'\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"*.version.txt\"       , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    multiqc -f $options.args .\n    multiqc --version | sed -e \"s/multiqc, version //g\" > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.10.1\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/multiqc:1.10.1--py_0\" } else { container \"quay.io/biocontainers/multiqc:1.10.1--py_0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "KRAKEN2_KRAKEN2": {
        "name_process": "KRAKEN2_KRAKEN2",
        "string_process": "\nprocess KRAKEN2_KRAKEN2 {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? 'bioconda::kraken2=2.1.1 conda-forge::pigz=2.6' : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0'\n    } else {\n        container 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0'\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path  db\n\n    output:\n    tuple val(meta), path('*classified*')  , emit: classified\n    tuple val(meta), path('*unclassified*'), emit: unclassified\n    tuple val(meta), path('*report.txt')   , emit: txt\n    path '*.version.txt'                   , emit: version\n\n    script:\n    def software     = getSoftwareName(task.process)\n    def prefix       = options.suffix  ? \"${meta.id}${options.suffix}\"  : \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        $paired \\\\\n        $options.args \\\\\n        $reads\n\n    pigz -p $task.cpus *.fastq\n\n    echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def software     = getSoftwareName(task.process)\n    def prefix       = options.suffix  ? \"${meta.id}${options.suffix}\"  : \"${meta.id}\"\n    def paired       = meta.single_end ? \"\" : \"--paired\"\n    def classified   = meta.single_end ? \"${prefix}.classified.fastq\"   : \"${prefix}.classified#.fastq\"\n    def unclassified = meta.single_end ? \"${prefix}.unclassified.fastq\" : \"${prefix}.unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${prefix}.kraken2.report.txt \\\\\n        --gzip-compressed \\\\\n        $paired \\\\\n        $options.args \\\\\n        $reads\n\n    pigz -p $task.cpus *.fastq\n\n    echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? 'bioconda::kraken2=2.1.1 conda-forge::pigz=2.6' : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0' } else { container 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:941789bd7fe00db16531c26de8bf3c5c985242a5-0' }"
        ],
        "when": "",
        "stub": ""
    },
    "BBMAP_BBDUK": {
        "name_process": "BBMAP_BBDUK",
        "string_process": "\nprocess BBMAP_BBDUK {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::bbmap=38.90\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bbmap:38.90--he522d1c_1\"\n    } else {\n        container \"quay.io/biocontainers/bbmap:38.90--he522d1c_1\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n    path contaminants\n\n    output:\n    tuple val(meta), path('*.fastq.gz') , emit: reads\n    tuple val(meta), path('*.log')      , emit: log\n    tuple val(meta), path('*.stats.txt'), optional: true,  emit: stats                                                     \n    path '*.version.txt'                , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def raw      = meta.single_end ? \"in=${reads[0]}\" : \"in1=${reads[0]} in2=${reads[1]}\"\n    def trimmed  = meta.single_end ? \"out=${prefix}.fastq.gz\" : \"out1=${prefix}_1.fastq.gz out2=${prefix}_2.fastq.gz\"\n    def contaminants_fa = contaminants ? \"ref=$contaminants\" : ''\n    \"\"\"\n    maxmem=\\$(echo \\\"$task.memory\\\"| sed 's/ GB/g/g')\n    bbduk.sh \\\\\n        -Xmx\\$maxmem \\\\\n        $raw \\\\\n        $trimmed \\\\\n        threads=$task.cpus \\\\\n        $options.args \\\\\n        $contaminants_fa \\\\\n        stats=${prefix}.bbduk.stats.txt \\\\\n        &> ${prefix}.bbduk.log\n    echo \\$(bbversion.sh) > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def raw      = meta.single_end ? \"in=${reads[0]}\" : \"in1=${reads[0]} in2=${reads[1]}\"\n    def trimmed  = meta.single_end ? \"out=${prefix}.fastq.gz\" : \"out1=${prefix}_1.fastq.gz out2=${prefix}_2.fastq.gz\"\n    def contaminants_fa = contaminants ? \"ref=$contaminants\" : ''\n    \"\"\"\n    maxmem=\\$(echo \\\"$task.memory\\\"| sed 's/ GB/g/g')\n    bbduk.sh \\\\\n        -Xmx\\$maxmem \\\\\n        $raw \\\\\n        $trimmed \\\\\n        threads=$task.cpus \\\\\n        $options.args \\\\\n        $contaminants_fa \\\\\n        stats=${prefix}.bbduk.stats.txt \\\\\n        &> ${prefix}.bbduk.log\n    echo \\$(bbversion.sh) > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "contaminants"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::bbmap=38.90\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bbmap:38.90--he522d1c_1\" } else { container \"quay.io/biocontainers/bbmap:38.90--he522d1c_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "NORMALISE_HUMANN_OUTPUT": {
        "name_process": "NORMALISE_HUMANN_OUTPUT",
        "string_process": "\nprocess NORMALISE_HUMANN_OUTPUT {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"biobakery::humann=3.0.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\"\n    } else {\n        container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\"\n    }\n\n    input:\n    path merged_humann_profiles\n\n    output:\n    path '*.tsv', emit: tsv\n\n    script:\n    if (\"$merged_humann_profiles\".endsWith(\"genefamilies.tsv\")) {\n        \"\"\"\n        humann_renorm_table \\\\\n        -i $merged_humann_profiles \\\\\n        --output merged_genefamilies-cpm.tsv \\\\\n        \"\"\"\n\n    } else if (\"$merged_humann_profiles\".endsWith(\"pathabundance.tsv\")) {\n        \"\"\"\n        humann_renorm_table \\\\\n        -i $merged_humann_profiles \\\\\n        --output merged_pathabundance-cpm.tsv \\\\\n        \"\"\"\n\n    } else {\n        \"\"\"\n        humann_renorm_table \\\\\n        -i $merged_humann_profiles \\\\\n        --output merged_pathcoverage-cpm.tsv \\\\\n        \"\"\"\n    }\n\n}",
        "nb_lignes_process": 41,
        "string_script": "    if (\"$merged_humann_profiles\".endsWith(\"genefamilies.tsv\")) {\n        \"\"\"\n        humann_renorm_table \\\\\n        -i $merged_humann_profiles \\\\\n        --output merged_genefamilies-cpm.tsv \\\\\n        \"\"\"\n\n    } else if (\"$merged_humann_profiles\".endsWith(\"pathabundance.tsv\")) {\n        \"\"\"\n        humann_renorm_table \\\\\n        -i $merged_humann_profiles \\\\\n        --output merged_pathabundance-cpm.tsv \\\\\n        \"\"\"\n\n    } else {\n        \"\"\"\n        humann_renorm_table \\\\\n        -i $merged_humann_profiles \\\\\n        --output merged_pathcoverage-cpm.tsv \\\\\n        \"\"\"\n    }",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "merged_humann_profiles"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"biobakery::humann=3.0.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\" } else { container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "HUMANN": {
        "name_process": "HUMANN",
        "string_process": "\nprocess HUMANN {\n    tag \"$meta.id\"\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"biobakery::humann=3.0.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\"\n    } else {\n        container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\"\n    }\n\n    input:\n    tuple val(meta), path(input)\n    path chocophlan_db\n    path uniref_db\n    tuple val(meta), path(metaphlan_tb)                                                                                                                       \n\n    output:\n    tuple val(meta), path(\"*_HUMAnN.log\")       ,                 emit: log\n    tuple val(meta), path(\"*_genefamilies.tsv\") , optional:true,  emit: genefamilies                                                                                                \n    tuple val(meta), path(\"*_pathabundance.tsv\"),                 emit: abundance\n    tuple val(meta), path(\"*_pathcoverage.tsv\") ,                 emit: coverage\n    path \"*.version.txt\"                        ,                 emit: version\n\n    script:\n    def software        = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def metaphlan_table = metaphlan_tb ? \"--taxonomic-profile $metaphlan_tb\" : ''                                                                                                                             \n    def input_format    = (\"$input\".endsWith(\".fastq.gz\")) ? \"--input-format fastq.gz\" :  (\"$input\".endsWith(\".fasta\")) ? \"--input-format fasta.gz\" : (\"$input\".endsWith(\".tsv\")) ? \"--input-format genetable\" : (\"$input\".endsWith(\".biom\")) ? \"--input-format biom\" : (\"$input\".contains(\".sam\")) ? \"--input-format sam\" : (\"$input\".contains(\".bam\")) ? \"--input-format bam\" : ''\n\n\n    \"\"\"\n    humann \\\\\n        --input $input \\\\\n        $input_format \\\\\n        $metaphlan_table \\\\\n        --output . \\\\\n        --output-basename ${prefix} \\\\\n        $options.args \\\\\n        --threads ${task.cpus} \\\\\n        --nucleotide-database $chocophlan_db \\\\\n        --protein-database $uniref_db \\\\\n        --o-log ${prefix}_HUMAnN.log\n\n    echo \\$(humann --version 2>&1) | sed 's/^.*humann //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    def software        = getSoftwareName(task.process)\n    def prefix     = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    def metaphlan_table = metaphlan_tb ? \"--taxonomic-profile $metaphlan_tb\" : ''                                                                                                                             \n    def input_format    = (\"$input\".endsWith(\".fastq.gz\")) ? \"--input-format fastq.gz\" :  (\"$input\".endsWith(\".fasta\")) ? \"--input-format fasta.gz\" : (\"$input\".endsWith(\".tsv\")) ? \"--input-format genetable\" : (\"$input\".endsWith(\".biom\")) ? \"--input-format biom\" : (\"$input\".contains(\".sam\")) ? \"--input-format sam\" : (\"$input\".contains(\".bam\")) ? \"--input-format bam\" : ''\n\n\n    \"\"\"\n    humann \\\\\n        --input $input \\\\\n        $input_format \\\\\n        $metaphlan_table \\\\\n        --output . \\\\\n        --output-basename ${prefix} \\\\\n        $options.args \\\\\n        --threads ${task.cpus} \\\\\n        --nucleotide-database $chocophlan_db \\\\\n        --protein-database $uniref_db \\\\\n        --o-log ${prefix}_HUMAnN.log\n\n    echo \\$(humann --version 2>&1) | sed 's/^.*humann //; s/Using.*\\$//' > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "input",
            "chocophlan_db",
            "uniref_db",
            "meta",
            "metaphlan_tb"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"biobakery::humann=3.0.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\" } else { container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_HUMANN_PATHCOVERAGE": {
        "name_process": "MERGE_HUMANN_PATHCOVERAGE",
        "string_process": "\nprocess MERGE_HUMANN_PATHCOVERAGE {\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"biobakery::humann=3.0.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\"\n    } else {\n        container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\"\n    }\n\n    input:\n    path pathcoverage\n\n    output:\n    path '*.tsv', emit: tsv\n\n    script:                                                 \n    \"\"\"\n    humann_join_tables \\\\\n    -i  . \\\\\n    --output merged_gene_families.tsv \\\\\n    --file_name pathcoverage\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    humann_join_tables \\\\\n    -i  . \\\\\n    --output merged_gene_families.tsv \\\\\n    --file_name pathcoverage\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pathcoverage"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"biobakery::humann=3.0.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\" } else { container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "\nprocess FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\"\n    } else {\n        container \"quay.io/biocontainers/fastqc:0.11.9--0\"\n    }\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"*.version.txt\"          , emit: version\n\n    script:\n                                                                          \n    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 40,
        "string_script": "    def software = getSoftwareName(task.process)\n    def prefix   = options.suffix ? \"${meta.id}.${options.suffix}\" : \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $options.args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n        fastqc --version | sed -e \"s/FastQC v//g\" > ${software}.version.txt\n        \"\"\"\n    }",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\" } else { container \"quay.io/biocontainers/fastqc:0.11.9--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_HUMANN_OUTPUT": {
        "name_process": "MERGE_HUMANN_OUTPUT",
        "string_process": "\nprocess MERGE_HUMANN_OUTPUT {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }\n\n    conda (params.enable_conda ? \"biobakery::humann=3.0.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\"\n    } else {\n        container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\"\n    }\n\n    input:\n    path humann_profiles\n\n    output:\n    path '*.tsv', emit: tsv\n\n    script:\n    if (\"$humann_profiles\".endsWith(\"genefamilies.tsv\")) {\n        \"\"\"\n        humann_join_tables \\\\\n        -i  . \\\\\n        --output merged_genefamilies.tsv \\\\\n        --file_name genefamilies\n        \"\"\"\n\n    } else if (\"$humann_profiles\".endsWith(\"pathabundance.tsv\")) {\n        \"\"\"\n        humann_join_tables \\\\\n        -i  . \\\\\n        --output merged_pathabundance.tsv \\\\\n        --file_name pathabundance\n        \"\"\"\n\n    } else {\n        \"\"\"\n        humann_join_tables \\\\\n        -i  . \\\\\n        --output merged_pathcoverage.tsv \\\\\n        --file_name pathcoverage\n        \"\"\"\n    }\n\n}",
        "nb_lignes_process": 44,
        "string_script": "    if (\"$humann_profiles\".endsWith(\"genefamilies.tsv\")) {\n        \"\"\"\n        humann_join_tables \\\\\n        -i  . \\\\\n        --output merged_genefamilies.tsv \\\\\n        --file_name genefamilies\n        \"\"\"\n\n    } else if (\"$humann_profiles\".endsWith(\"pathabundance.tsv\")) {\n        \"\"\"\n        humann_join_tables \\\\\n        -i  . \\\\\n        --output merged_pathabundance.tsv \\\\\n        --file_name pathabundance\n        \"\"\"\n\n    } else {\n        \"\"\"\n        humann_join_tables \\\\\n        -i  . \\\\\n        --output merged_pathcoverage.tsv \\\\\n        --file_name pathcoverage\n        \"\"\"\n    }",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "humann_profiles"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MGordon09__nf-core-bagobugs",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), meta:meta, publish_by_meta:['id']) }",
            "conda (params.enable_conda ? \"biobakery::humann=3.0.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/humann:3.0.0--pyh5e36f6f_1\" } else { container \"quay.io/biocontainers/humann:3.0.0--pyh5e36f6f_1\" }"
        ],
        "when": "",
        "stub": ""
    }
}
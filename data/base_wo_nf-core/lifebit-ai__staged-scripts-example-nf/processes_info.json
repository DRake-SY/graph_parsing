{
    "processA": {
        "name_process": "processA",
        "string_process": "\nprocess processA {\n\tpublishDir \"${params.output}/${task.hash}\", mode: 'copy'\n\ttag \"cpus: ${task.cpus}, cloud storage: ${cloud_storage_file}\"\n\t                                                                                                                                                           \n\tbeforeScript \"aws s3 cp ${params.s3_file_beforescript} .\"\n\t\n\tinput:\n\tval x from processAInput\n\tfile(a_file) from processAInputFiles\n\teach file(\"*\") from ch_utils\n\teach file(\"*\") from ch_src\n\n\toutput:\n\tval x into processAOutput\n\tfile \"*.txt\"\n\n\tscript:\n\t\"\"\"\n\t# Simulate the time the processes takes to finish\n\tpwd=`basename \\${PWD} | cut -c1-6`\n\techo \\$pwd\n\ttimeToWait=\\$(shuf -i ${params.processATimeRange} -n 1)\n\tfor i in {1..${numberFilesForProcessA}};\n\tdo echo test > \"\\${pwd}\"_file_\\${i}.txt\n\tsleep ${params.processATimeBetweenFileCreationInSecs}\n\tdone;\n\tsleep \\$timeToWait\n\techo \"task cpus: ${task.cpus}\"\n\tls -l\n\t\"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "\t\"\"\"\n\t# Simulate the time the processes takes to finish\n\tpwd=`basename \\${PWD} | cut -c1-6`\n\techo \\$pwd\n\ttimeToWait=\\$(shuf -i ${params.processATimeRange} -n 1)\n\tfor i in {1..${numberFilesForProcessA}};\n\tdo echo test > \"\\${pwd}\"_file_\\${i}.txt\n\tsleep ${params.processATimeBetweenFileCreationInSecs}\n\tdone;\n\tsleep \\$timeToWait\n\techo \"task cpus: ${task.cpus}\"\n\tls -l\n\t\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "processAInput",
            "processAInputFiles",
            "ch_utils",
            "ch_src"
        ],
        "nb_inputs": 4,
        "outputs": [
            "processAOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__staged-scripts-example-nf",
        "directive": [
            "publishDir \"${params.output}/${task.hash}\", mode: 'copy'",
            "tag \"cpus: ${task.cpus}, cloud storage: ${cloud_storage_file}\"",
            "beforeScript \"aws s3 cp ${params.s3_file_beforescript} .\""
        ],
        "when": "",
        "stub": ""
    }
}
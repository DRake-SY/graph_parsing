{
    "GtfToGenePred": {
        "name_process": "GtfToGenePred",
        "string_process": "process GtfToGenePred {\n    tag {\"ucsc GtfToGenePred ${genome_gtf.baseName}\"}\n    label 'ucsc_377'\n    label 'ucsc_377_GtfToGenePred'\n    container = 'quay.io/biocontainers/ucsc-gtftogenepred:377--h35c10e6_2'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        path(genome_gtf)\n\n    output:\n        path(\"${genome_gtf.baseName}.genePred\", emit: genome_genepred)\n\n\n    script:\n        \"\"\"\n        gtfToGenePred ${genome_gtf} ${genome_gtf.baseName}.genePred\n        \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        gtfToGenePred ${genome_gtf} ${genome_gtf.baseName}.genePred\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"ucsc GtfToGenePred ${genome_gtf.baseName}\"}",
            "label 'ucsc_377'",
            "label 'ucsc_377_GtfToGenePred'",
            "container = 'quay.io/biocontainers/ucsc-gtftogenepred:377--h35c10e6_2' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MergeBams": {
        "name_process": "MergeBams",
        "string_process": "process MergeBams {\n  tag {\"Sambamba MergeBams ${sample_id}\"}\n  label 'Sambamba_0_6_8_MergeBams'\n  clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n  container = 'library://sawibo/default/bioinf-tools:sambamba-0.6.8'\n  shell = ['/bin/bash', '-euo', 'pipefail']\n  input:\n    tuple (sample_id, path(bams), path(bais))\n\n  output:\n    tuple (sample_id, path(\"${sample_id}_${ext}\"), path(\"${sample_id}_${ext}.bai\"), emit: merged_bams)\n\n  script:\n    ext = bams[0].toRealPath().toString().split(\"_\")[-1]\n\n    \"\"\"\n    sambamba merge -t ${task.cpus} ${sample_id}_${ext} ${bams}\n    sambamba index -t ${task.cpus} ${sample_id}_${ext} ${sample_id}_${ext}.bai\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    ext = bams[0].toRealPath().toString().split(\"_\")[-1]\n\n    \"\"\"\n    sambamba merge -t ${task.cpus} ${sample_id}_${ext} ${bams}\n    sambamba index -t ${task.cpus} ${sample_id}_${ext} ${sample_id}_${ext}.bai\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "drtext",
            "Sambamba"
        ],
        "tools_url": [
            "https://bio.tools/drtext",
            "https://bio.tools/sambamba"
        ],
        "tools_dico": [
            {
                "name": "drtext",
                "uri": "https://bio.tools/drtext",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Get data resource entries complete text.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/drtext.html"
            },
            {
                "name": "Sambamba",
                "uri": "https://bio.tools/sambamba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a high performance modern robust and fast tool (and library), written in the D programming language, for working with SAM, BAM and CRAM formats.",
                "homepage": "http://www.open-bio.org/wiki/Sambamba"
            }
        ],
        "inputs": [
            "bams",
            "bais",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Sambamba MergeBams ${sample_id}\"}",
            "label 'Sambamba_0_6_8_MergeBams'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:sambamba-0.6.8' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MakeUMIBam": {
        "name_process": "MakeUMIBam",
        "string_process": "process MakeUMIBam {\n    tag {\"python MakeUMIBam ${sample_id} \"}\n    label 'python_2_7_10'\n    label 'python_2_7_10_MakeUMIBam'\n    container = 'library://sawibo/default/bioinf-tools:idt-umi-dependencies'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple (sample_id, flowcell, machine, run_nr, path(fastq))\n\n    output:\n        tuple (sample_id, flowcell, machine, run_nr, path(\"${sample_id}.u.grouped.bam\"), emit: umi_bams)\n\n\n    script:\n        \"\"\"\n        #!/gnu/store/vbvjlhhx6y64fvbxh2604sqw9shn02wq-python2-2.7.16R/bin/python\n\n        import sys\n        import pysam\n        import re\n\n        fastqs = \"${fastq}\".split()\n        flowcell = \"${flowcell}\"\n        id = \"${sample_id}_\"+flowcell\n        sample_name = \"${sample_id}\"\n        out_bam = \"${sample_id}.u.grouped.bam\"\n\n\n        header = {\n            'HD': {'VN': '1.6', 'SO':'unsorted', 'GO':'query'},\n            'RG': [{\n                'ID':id,\n                'SM':sample_name,\n                'LB':sample_name,\n                'PL':'ILLUMINA',\n                'PU':flowcell\n            }]\n        }\n        umis = {}\n        # Create groups\n        r1,r2,umi_reads = (None,None,None)\n        out = pysam.AlignmentFile(out_bam, 'wb', header=header)\n\n        if len(fastqs) == 2:\n            r1 = pysam.FastxFile(fastqs[0])\n            umi_reads = pysam.FastxFile(fastqs[1])\n        elif len(fastqs) == 3:\n            r1 = pysam.FastxFile(fastqs[0])\n            umi_reads = pysam.FastxFile(fastqs[1])\n            r2 = pysam.FastxFile(fastqs[2])\n\n        group_id = 0\n        for r1_read in r1:\n            r1_read.sequence[0:9]\n            umi_read = umi_reads.next()\n            umi_seq = r1_read.sequence[0:9]+umi_read.sequence\n\n            if umi_seq not in umis:\n                umis[umi_seq] = group_id\n                group_id+=1\n\n            tags = (\n                (\"MI\", str(umis[umi_seq])),\n                (\"RX\", str(umi_seq))\n            )\n\n            a1 = pysam.AlignedSegment()\n            a1.query_name = r1_read.name\n            a1.query_sequence = r1_read.sequence\n            a1.flag = 77\n            a1.query_qualities = pysam.qualitystring_to_array(r1_read.quality)\n            a1.tags = tags\n            out.write(a1)\n\n            if r2:\n                r2_read = r2.next()\n                a2 = pysam.AlignedSegment()\n                a2.query_name = r2_read.name\n                a2.query_sequence = r2_read.sequence\n                a2.flag = 141\n                a2.query_qualities = pysam.qualitystring_to_array(r2_read.quality)\n                a2.tags = tags\n                out.write(a2)\n\n        r1.close()\n        if r2: r2.close()\n        umi_reads.close()\n        out.close()\n\n        \"\"\"\n\n}",
        "nb_lignes_process": 91,
        "string_script": "        \"\"\"\n        #!/gnu/store/vbvjlhhx6y64fvbxh2604sqw9shn02wq-python2-2.7.16R/bin/python\n\n        import sys\n        import pysam\n        import re\n\n        fastqs = \"${fastq}\".split()\n        flowcell = \"${flowcell}\"\n        id = \"${sample_id}_\"+flowcell\n        sample_name = \"${sample_id}\"\n        out_bam = \"${sample_id}.u.grouped.bam\"\n\n\n        header = {\n            'HD': {'VN': '1.6', 'SO':'unsorted', 'GO':'query'},\n            'RG': [{\n                'ID':id,\n                'SM':sample_name,\n                'LB':sample_name,\n                'PL':'ILLUMINA',\n                'PU':flowcell\n            }]\n        }\n        umis = {}\n        # Create groups\n        r1,r2,umi_reads = (None,None,None)\n        out = pysam.AlignmentFile(out_bam, 'wb', header=header)\n\n        if len(fastqs) == 2:\n            r1 = pysam.FastxFile(fastqs[0])\n            umi_reads = pysam.FastxFile(fastqs[1])\n        elif len(fastqs) == 3:\n            r1 = pysam.FastxFile(fastqs[0])\n            umi_reads = pysam.FastxFile(fastqs[1])\n            r2 = pysam.FastxFile(fastqs[2])\n\n        group_id = 0\n        for r1_read in r1:\n            r1_read.sequence[0:9]\n            umi_read = umi_reads.next()\n            umi_seq = r1_read.sequence[0:9]+umi_read.sequence\n\n            if umi_seq not in umis:\n                umis[umi_seq] = group_id\n                group_id+=1\n\n            tags = (\n                (\"MI\", str(umis[umi_seq])),\n                (\"RX\", str(umi_seq))\n            )\n\n            a1 = pysam.AlignedSegment()\n            a1.query_name = r1_read.name\n            a1.query_sequence = r1_read.sequence\n            a1.flag = 77\n            a1.query_qualities = pysam.qualitystring_to_array(r1_read.quality)\n            a1.tags = tags\n            out.write(a1)\n\n            if r2:\n                r2_read = r2.next()\n                a2 = pysam.AlignedSegment()\n                a2.query_name = r2_read.name\n                a2.query_sequence = r2_read.sequence\n                a2.flag = 141\n                a2.query_qualities = pysam.qualitystring_to_array(r2_read.quality)\n                a2.tags = tags\n                out.write(a2)\n\n        r1.close()\n        if r2: r2.close()\n        umi_reads.close()\n        out.close()\n\n        \"\"\"",
        "nb_lignes_script": 75,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"python MakeUMIBam ${sample_id} \"}",
            "label 'python_2_7_10'",
            "label 'python_2_7_10_MakeUMIBam'",
            "container = 'library://sawibo/default/bioinf-tools:idt-umi-dependencies' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CatVariantsGVCF": {
        "name_process": "CatVariantsGVCF",
        "string_process": "process CatVariantsGVCF {\n    tag {\"GATK CatVariantsGVCF ${sample_id}\"}\n    label 'GATK_3_8_1_0_gf15c1c3ef'\n    label 'GATK_3_8_1_0_gf15c1c3ef_CatVariantsGVCF'\n    container = 'quay.io/biocontainers/gatk:3.8--py27_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(gvcf_files), path(gvcf_idx_files))\n\n    output:\n        tuple(sample_id, path(\"${sample_id}.g.vcf.gz\"), path(\"${sample_id}.g.vcf.gz.tbi\"), emit:vcf_file)\n\n    script:\n        def input_files = gvcf_files.collect{\"$it\"}.join(\" -V \")\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -cp ${params.gatk_path} org.broadinstitute.gatk.tools.CatVariants --reference ${params.genome} -V ${input_files} --outputFile ${sample_id}.g.vcf.gz ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        def input_files = gvcf_files.collect{\"$it\"}.join(\" -V \")\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -cp ${params.gatk_path} org.broadinstitute.gatk.tools.CatVariants --reference ${params.genome} -V ${input_files} --outputFile ${sample_id}.g.vcf.gz ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gvcf_files",
            "gvcf_idx_files",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK CatVariantsGVCF ${sample_id}\"}",
            "label 'GATK_3_8_1_0_gf15c1c3ef'",
            "label 'GATK_3_8_1_0_gf15c1c3ef_CatVariantsGVCF'",
            "container = 'quay.io/biocontainers/gatk:3.8--py27_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "HaplotypeCaller": {
        "name_process": "HaplotypeCaller",
        "string_process": "process HaplotypeCaller {\n    tag {\"GATK HaplotypeCaller ${sample_id}.${int_tag}\"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_HaplotypeCaller'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (sample_id, path(bam), path(bai), path(interval_file))\n\n    output:\n        tuple (sample_id, int_tag ,path(\"${sample_id}.${int_tag}${ext}\"), path(\"${sample_id}.${int_tag}${ext}.idx\"), path(interval_file), emit: htcaller_vcfs)\n\n    script:\n        int_tag = interval_file.toRealPath().toString().split(\"/\")[-2]\n        ext = params.optional =~ /GVCF/ ? '.g.vcf' : '.vcf'\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        HaplotypeCaller \\\n        ${params.optional} \\\n        -I $bam \\\n        --output ${sample_id}.${int_tag}${ext} \\\n        -R $params.genome_fasta \\\n        -L $interval_file\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "        int_tag = interval_file.toRealPath().toString().split(\"/\")[-2]\n        ext = params.optional =~ /GVCF/ ? '.g.vcf' : '.vcf'\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        HaplotypeCaller \\\n        ${params.optional} \\\n        -I $bam \\\n        --output ${sample_id}.${int_tag}${ext} \\\n        -R $params.genome_fasta \\\n        -L $interval_file\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "drtext",
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/drtext",
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "drtext",
                "uri": "https://bio.tools/drtext",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Get data resource entries complete text.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/drtext.html"
            },
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "bam",
            "bai",
            "interval_file",
            "sample_id"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK HaplotypeCaller ${sample_id}.${int_tag}\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_HaplotypeCaller'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "HaplotypeCallerGVCF": {
        "name_process": "HaplotypeCallerGVCF",
        "string_process": "\nprocess HaplotypeCallerGVCF {\n    tag {\"GATK HaplotypeCallerGVCF ${sample_id} - ${interval_file.baseName}\"}\n    label 'GATK_3_8_1_0_gf15c1c3ef'\n    label 'GATK_3_8_1_0_gf15c1c3ef_HaplotypeCallerGVCF'\n    container = 'quay.io/biocontainers/gatk:3.8--py27_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file), path(interval_file))\n\n    output:\n        tuple(val(sample_id), path(\"${sample_id}_${interval_file.baseName}.g.vcf\"), path(\"${sample_id}_${interval_file.baseName}.g.vcf.idx\"), path(interval_file), emit: vcf_file)\n\n    script:\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T HaplotypeCaller \\\n        --reference_sequence ${params.genome} \\\n        --input_file ${bam_file} \\\n        --intervals ${interval_file} \\\n        --out ${sample_id}_${interval_file.baseName}.g.vcf \\\n        --emitRefConfidence GVCF \\\n        ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T HaplotypeCaller \\\n        --reference_sequence ${params.genome} \\\n        --input_file ${bam_file} \\\n        --intervals ${interval_file} \\\n        --out ${sample_id}_${interval_file.baseName}.g.vcf \\\n        --emitRefConfidence GVCF \\\n        ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_file",
            "bai_file",
            "interval_file",
            "sample_id"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK HaplotypeCallerGVCF ${sample_id} - ${interval_file.baseName}\"}",
            "label 'GATK_3_8_1_0_gf15c1c3ef'",
            "label 'GATK_3_8_1_0_gf15c1c3ef_HaplotypeCallerGVCF'",
            "container = 'quay.io/biocontainers/gatk:3.8--py27_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "SamToFastq": {
        "name_process": "SamToFastq",
        "string_process": "\nprocess SamToFastq {\n    tag {\"GATK SamToFastq ${sample_id} \"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_SamToFastq'\n\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple (sample_id, flowcell, machine, run_nr, path(bam))\n\n    output:\n        tuple (sample_id, flowcell, machine, run_nr, path(\"*.fastq.gz\"), emit: converted_fastqs)\n\n    script:\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        SamToFastq  \\\n        ${params.optional} \\\n        --INPUT $bam \\\n        --FASTQ ${sample_id}_${flowcell}_R1_001.fastq.gz \\\n        --SECOND_END_FASTQ ${sample_id}_${flowcell}_R2_001.fastq.gz \\\n        --INCLUDE_NON_PF_READS true \\\n        \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        SamToFastq  \\\n        ${params.optional} \\\n        --INPUT $bam \\\n        --FASTQ ${sample_id}_${flowcell}_R1_001.fastq.gz \\\n        --SECOND_END_FASTQ ${sample_id}_${flowcell}_R2_001.fastq.gz \\\n        --INCLUDE_NON_PF_READS true \\\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "bam",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK SamToFastq ${sample_id} \"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_SamToFastq'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "Index": {
        "name_process": "Index",
        "string_process": "process Index {\n  tag {\"Sambamba Index ${sample_id}\"}\n  label 'Sambamba_0_7_0'\n  label 'Sambamba_0_7_0_Index'\n  container = 'quay.io/biocontainers/sambamba:0.7.0--h89e63da_1'\n  shell = ['/bin/bash', '-euo', 'pipefail']\n\n  input:\n      tuple(sample_id, path(bam_file))\n\n  output:\n      tuple(sample_id, path(\"${bam_file}.bai\"), emit: bai_file)\n\n  script:\n      \"\"\"\n      sambamba index -t ${task.cpus} ${bam_file} ${bam_file}.bai\n      \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "      \"\"\"\n      sambamba index -t ${task.cpus} ${bam_file} ${bam_file}.bai\n      \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Sambamba"
        ],
        "tools_url": [
            "https://bio.tools/sambamba"
        ],
        "tools_dico": [
            {
                "name": "Sambamba",
                "uri": "https://bio.tools/sambamba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a high performance modern robust and fast tool (and library), written in the D programming language, for working with SAM, BAM and CRAM formats.",
                "homepage": "http://www.open-bio.org/wiki/Sambamba"
            }
        ],
        "inputs": [
            "bam_file",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Sambamba Index ${sample_id}\"}",
            "label 'Sambamba_0_7_0'",
            "label 'Sambamba_0_7_0_Index'",
            "container = 'quay.io/biocontainers/sambamba:0.7.0--h89e63da_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "VerifyBamID2": {
        "name_process": "VerifyBamID2",
        "string_process": "process VerifyBamID2 {\n    tag {\"VerifyBamID2 ${sample_id}\"}\n    label 'VERIFYBAMID_2_0_1_h32f71e1_2'\n    label 'VERIFYBAMID_2_0_1_h32f71e1_2_VerifyBamID2'\n    container = 'quay.io/biocontainers/verifybamid2:2.0.1--h32f71e1_2'\n    shell = ['/bin/bash', '-eo', 'pipefail']\n\n    input:\n        tuple (sample_id, path(bam), path(bai))\n\n    output:\n        tuple (sample_id, path(\"${output_prefix}.selfSM\"))\n\n    script:\n        output_prefix = \"${sample_id}.contamination\"\n\n        \"\"\"\n        # creates a ${output_prefix}.selfSM file, a TSV file with 2 rows, 19 columns.\n        # First row are the keys (e.g., SEQ_SM, RG, FREEMIX), second row are the associated values\n        verifybamid2 \\\n        --Reference ${params.genome} \\\n        --BamFile ${bam} \\\n        --SVDPrefix ${params.contamination_path_prefix} \\\n        --UDPath ${params.contamination_sites_ud} \\\n        --MeanPath ${params.contamination_sites_mu} \\\n        --BedPath ${params.contamination_sites_bed} \\\n        --Verbose \\\n        --NumPC 4 \\\n        --NumThread ${task.cpus} \\\n        --Output  ${output_prefix}\n        \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "        output_prefix = \"${sample_id}.contamination\"\n\n        \"\"\"\n        # creates a ${output_prefix}.selfSM file, a TSV file with 2 rows, 19 columns.\n        # First row are the keys (e.g., SEQ_SM, RG, FREEMIX), second row are the associated values\n        verifybamid2 \\\n        --Reference ${params.genome} \\\n        --BamFile ${bam} \\\n        --SVDPrefix ${params.contamination_path_prefix} \\\n        --UDPath ${params.contamination_sites_ud} \\\n        --MeanPath ${params.contamination_sites_mu} \\\n        --BedPath ${params.contamination_sites_bed} \\\n        --Verbose \\\n        --NumPC 4 \\\n        --NumThread ${task.cpus} \\\n        --Output  ${output_prefix}\n        \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam",
            "bai",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"VerifyBamID2 ${sample_id}\"}",
            "label 'VERIFYBAMID_2_0_1_h32f71e1_2'",
            "label 'VERIFYBAMID_2_0_1_h32f71e1_2_VerifyBamID2'",
            "container = 'quay.io/biocontainers/verifybamid2:2.0.1--h32f71e1_2' shell = ['/bin/bash', '-eo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "QuantMerge": {
        "name_process": "QuantMerge",
        "string_process": "process QuantMerge {\n    tag {\"Salmon QuantMerge ${run_name}\"}\n    label 'Salmon_1_2_1'\n    label 'Salmon_1_2_1_QuantMerge'\n    container = 'quay.io/biocontainers/salmon:1.2.1--hf69c8f4_0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    \n    input:\n        val(run_name)\n        path(quant_dirs)\n   \n    output:\n        path(\"*.txt\", emit: quant_tables_merged)\n\n    script:\n        def quants = quant_dirs.collect{ \"$it\" }.join(\",\")\n        \"\"\"  \n        salmon quantmerge --column numreads --quants {${quants}} -o ${run_name}_transcripts_quantmerge_numReads.txt \n        salmon quantmerge --column tpm --quants {${quants}} -o ${run_name}_transcripts_quantmerge_TPM.txt  \n        salmon quantmerge --column len --quants {${quants}} -o ${run_name}_transcripts_quantmerge_Length.txt\n        salmon quantmerge --column elen --quants {${quants}} -o ${run_name}_transcripts_quantmerge_EffectiveLength.txt\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        def quants = quant_dirs.collect{ \"$it\" }.join(\",\")\n        \"\"\"  \n        salmon quantmerge --column numreads --quants {${quants}} -o ${run_name}_transcripts_quantmerge_numReads.txt \n        salmon quantmerge --column tpm --quants {${quants}} -o ${run_name}_transcripts_quantmerge_TPM.txt  \n        salmon quantmerge --column len --quants {${quants}} -o ${run_name}_transcripts_quantmerge_Length.txt\n        salmon quantmerge --column elen --quants {${quants}} -o ${run_name}_transcripts_quantmerge_EffectiveLength.txt\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "run_name",
            "quant_dirs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Salmon QuantMerge ${run_name}\"}",
            "label 'Salmon_1_2_1'",
            "label 'Salmon_1_2_1_QuantMerge'",
            "container = 'quay.io/biocontainers/salmon:1.2.1--hf69c8f4_0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "ViewUnmapped": {
        "name_process": "ViewUnmapped",
        "string_process": "process ViewUnmapped {\n    tag {\"Sambamba ViewUnmapped ${sample_id}\"}\n    label 'Sambamba_0_7_0'\n    label 'Sambamba_0_7_0_ViewUnmapped'\n    container = 'quay.io/biocontainers/sambamba:0.7.0--h89e63da_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n\n    output:\n        tuple(sample_id, path(\"${bam_file.baseName}.unmapped.bam\"), path(\"${bam_file.baseName}.unmapped.bam.bai\"), emit: bam_file)\n\n    script:\n        \"\"\"\n        sambamba view -t ${task.cpus} -f bam -F 'unmapped and mate_is_unmapped' ${bam_file} > ${bam_file.baseName}.unmapped.bam\n        sambamba index -t ${task.cpus} ${bam_file.baseName}.unmapped.bam\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        sambamba view -t ${task.cpus} -f bam -F 'unmapped and mate_is_unmapped' ${bam_file} > ${bam_file.baseName}.unmapped.bam\n        sambamba index -t ${task.cpus} ${bam_file.baseName}.unmapped.bam\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Sambamba"
        ],
        "tools_url": [
            "https://bio.tools/sambamba"
        ],
        "tools_dico": [
            {
                "name": "Sambamba",
                "uri": "https://bio.tools/sambamba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a high performance modern robust and fast tool (and library), written in the D programming language, for working with SAM, BAM and CRAM formats.",
                "homepage": "http://www.open-bio.org/wiki/Sambamba"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Sambamba ViewUnmapped ${sample_id}\"}",
            "label 'Sambamba_0_7_0'",
            "label 'Sambamba_0_7_0_ViewUnmapped'",
            "container = 'quay.io/biocontainers/sambamba:0.7.0--h89e63da_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "IntervalListTools": {
        "name_process": "IntervalListTools",
        "string_process": "process IntervalListTools {\n    tag {\"PICARD IntervalListTools\"}\n    label 'PICARD_2_22_0'\n    label 'PICARD_2_22_0_IntervalListTools'\n    container = 'quay.io/biocontainers/picard:2.22.0--0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        path(interval_list)\n\n    output:\n        path(\"temp_*/*.interval_list\", emit: interval_list)\n\n    script:\n        \"\"\"\n        picard -Xmx${task.memory.toGiga()-4}G IntervalListTools TMP_DIR=\\$TMPDIR \\\n        INPUT=${interval_list} OUTPUT=. \\\n        SUBDIVISION_MODE=BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW \\\n        SCATTER_COUNT=${params.scatter_count} \\\n        UNIQUE=true \\\n        ${params.optional}\n        \n        for folder in temp*; do mv \\$folder/scattered.interval_list \\$folder/\\$folder\\\\.interval_list; done\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n        picard -Xmx${task.memory.toGiga()-4}G IntervalListTools TMP_DIR=\\$TMPDIR \\\n        INPUT=${interval_list} OUTPUT=. \\\n        SUBDIVISION_MODE=BALANCING_WITHOUT_INTERVAL_SUBDIVISION_WITH_OVERFLOW \\\n        SCATTER_COUNT=${params.scatter_count} \\\n        UNIQUE=true \\\n        ${params.optional}\n        \n        for folder in temp*; do mv \\$folder/scattered.interval_list \\$folder/\\$folder\\\\.interval_list; done\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "interval_list"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"PICARD IntervalListTools\"}",
            "label 'PICARD_2_22_0'",
            "label 'PICARD_2_22_0_IntervalListTools'",
            "container = 'quay.io/biocontainers/picard:2.22.0--0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "Freec": {
        "name_process": "Freec",
        "string_process": "process Freec {\n    tag {\"Control Freec ${sample_id}\"}\n    label 'ControlFreec_11_5'\n    label 'ControlFreec_11_5_Freec'\n                                         \n    container = 'library://sawibo/default/bioinf-tools:freec11.5'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n\n    output:\n        tuple(sample_id, path(\"${bam_file.name}_ratio.txt\"), path(\"${bam_file.name}_CNVs\"), emit: cnv)\n        tuple(sample_id, path(\"${bam_file.name}_sample.cpn\"), path(\"${bam_file.name}_ratio.BedGraph\"), path(\"${bam_file.name}_info.txt\"), emit: other)\n\n    script:\n        def config = \"${sample_id}.config\"\n        \"\"\"\n        touch ${config}\n        echo \"[general]\" >> ${config}\n        echo \"chrLenFile = ${params.chr_len_file}\" >> ${config}\n        echo \"chrFiles = ${params.chr_files}\" >> ${config}\n        echo \"gemMappabilityFile = ${params.gem_mappability_file}\" >> ${config}\n        echo \"ploidy = ${params.ploidy}\" >> ${config}\n        echo \"window = ${params.window}\" >> ${config}\n        echo \"telocentromeric = ${params.telocentromeric}\" >> ${config}\n        echo \"BedGraphOutput=TRUE\" >> ${config}\n        echo \"maxThreads=${task.cpus}\" >> ${config}\n\n        echo \"[sample]\" >> ${config}\n        echo \"inputFormat = BAM\" >> ${config}\n        echo \"mateFile = ${bam_file}\" >> ${config}\n\n        freec -conf ${config}\n        \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "        def config = \"${sample_id}.config\"\n        \"\"\"\n        touch ${config}\n        echo \"[general]\" >> ${config}\n        echo \"chrLenFile = ${params.chr_len_file}\" >> ${config}\n        echo \"chrFiles = ${params.chr_files}\" >> ${config}\n        echo \"gemMappabilityFile = ${params.gem_mappability_file}\" >> ${config}\n        echo \"ploidy = ${params.ploidy}\" >> ${config}\n        echo \"window = ${params.window}\" >> ${config}\n        echo \"telocentromeric = ${params.telocentromeric}\" >> ${config}\n        echo \"BedGraphOutput=TRUE\" >> ${config}\n        echo \"maxThreads=${task.cpus}\" >> ${config}\n\n        echo \"[sample]\" >> ${config}\n        echo \"inputFormat = BAM\" >> ${config}\n        echo \"mateFile = ${bam_file}\" >> ${config}\n\n        freec -conf ${config}\n        \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "FREEC"
        ],
        "tools_url": [
            "https://bio.tools/freec"
        ],
        "tools_dico": [
            {
                "name": "FREEC",
                "uri": "https://bio.tools/freec",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3473",
                            "term": "Data mining"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3574",
                            "term": "Human genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3182",
                                    "term": "Genome alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Copy number estimation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3182",
                                    "term": "Genome alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3182",
                                    "term": "Whole genome alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3233",
                                    "term": "Transcript copy number estimation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for control-free copy number alteration (CNA) and allelic imbalances (LOH) detection using deep-sequencing data, particularly useful for cancer studies.",
                "homepage": "http://boevalab.com/FREEC/"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Control Freec ${sample_id}\"}",
            "label 'ControlFreec_11_5'",
            "label 'ControlFreec_11_5_Freec'",
            "container = 'library://sawibo/default/bioinf-tools:freec11.5' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "ViewSort": {
        "name_process": "ViewSort",
        "string_process": "process ViewSort {\n    tag {\"Sambamba ViewSort ${sample_id} - ${rg_id}\"}\n    label 'Sambamba_0_7_0'\n    label 'Sambamba_0_7_0_ViewSort'\n    container = 'quay.io/biocontainers/sambamba:0.7.0--h89e63da_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, rg_id, path(sam_file))\n\n    output:\n        tuple(sample_id, rg_id, path(\"${sam_file.baseName}.sort.bam\"), path(\"${sam_file.baseName}.sort.bam.bai\"), emit: bam_file)\n\n    script:\n        \"\"\"\n        sambamba view -t ${task.cpus} -S -f bam ${sam_file} | sambamba sort -t ${task.cpus} -m ${task.memory.toGiga()}G -o ${sam_file.baseName}.sort.bam /dev/stdin\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        sambamba view -t ${task.cpus} -S -f bam ${sam_file} | sambamba sort -t ${task.cpus} -m ${task.memory.toGiga()}G -o ${sam_file.baseName}.sort.bam /dev/stdin\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Sambamba"
        ],
        "tools_url": [
            "https://bio.tools/sambamba"
        ],
        "tools_dico": [
            {
                "name": "Sambamba",
                "uri": "https://bio.tools/sambamba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a high performance modern robust and fast tool (and library), written in the D programming language, for working with SAM, BAM and CRAM formats.",
                "homepage": "http://www.open-bio.org/wiki/Sambamba"
            }
        ],
        "inputs": [
            "sam_file",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Sambamba ViewSort ${sample_id} - ${rg_id}\"}",
            "label 'Sambamba_0_7_0'",
            "label 'Sambamba_0_7_0_ViewSort'",
            "container = 'quay.io/biocontainers/sambamba:0.7.0--h89e63da_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MultiQC": {
        "name_process": "MultiQC",
        "string_process": "process MultiQC {\n    tag {\"MultiQC\"}\n    label 'MultiQC_1_10'\n    container = 'quay.io/biocontainers/multiqc:1.10--py_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        val(analysis_id)\n        path(qc_files)\n\n    output:\n        tuple(path(\"${analysis_id}_multiqc_report.html\"), path(\"${analysis_id}_multiqc_report_data\"), emit: report)\n\n    script:\n        \"\"\"\n        multiqc ${params.optional} --title ${analysis_id} .\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        multiqc ${params.optional} --title ${analysis_id} .\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "analysis_id",
            "qc_files"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"MultiQC\"}",
            "label 'MultiQC_1_10'",
            "container = 'quay.io/biocontainers/multiqc:1.10--py_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MakeGraph": {
        "name_process": "MakeGraph",
        "string_process": "process MakeGraph {\n    tag {\"Control Freec MakeGraph ${sample_id}\"}\n    label 'ControlFreec_11_5'\n    label 'ControlFreec_11_5_MakeGraph'\n    container = 'library://sawibo/default/bioinf-tools:freec11.5'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(ratio_file), path(cnv_file))\n\n    output:\n        tuple(sample_id, path(\"${ratio_file.name}.png\"), path(\"${ratio_file.name}.log2.png\"), emit: ratio_png)\n\n    script:\n        \"\"\"\n        cat /bin/makeGraph.R | R --slave --args ${params.ploidy} ${ratio_file}\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        cat /bin/makeGraph.R | R --slave --args ${params.ploidy} ${ratio_file}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ratio_file",
            "cnv_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Control Freec MakeGraph ${sample_id}\"}",
            "label 'ControlFreec_11_5'",
            "label 'ControlFreec_11_5_MakeGraph'",
            "container = 'library://sawibo/default/bioinf-tools:freec11.5' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CollectHsMetrics": {
        "name_process": "CollectHsMetrics",
        "string_process": "process CollectHsMetrics {\n    tag {\"PICARD CollectHsMetrics ${sample_id}\"}\n    label 'PICARD_2_22_0'\n    label 'PICARD_2_22_0_CollectHsMetrics'\n    container = 'quay.io/biocontainers/picard:2.22.0--0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n\n    output:\n        path(\"${sample_id}.HsMetrics.txt\", emit: txt_file)\n\n    script:\n        \"\"\"\n        picard -Xmx${task.memory.toGiga()-4}G CollectHsMetrics TMP_DIR=\\$TMPDIR R=${params.genome} INPUT=${bam_file} OUTPUT=${sample_id}.HsMetrics.txt BAIT_INTERVALS=${params.bait} TARGET_INTERVALS=${params.target} ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        picard -Xmx${task.memory.toGiga()-4}G CollectHsMetrics TMP_DIR=\\$TMPDIR R=${params.genome} INPUT=${bam_file} OUTPUT=${sample_id}.HsMetrics.txt BAIT_INTERVALS=${params.bait} TARGET_INTERVALS=${params.target} ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"PICARD CollectHsMetrics ${sample_id}\"}",
            "label 'PICARD_2_22_0'",
            "label 'PICARD_2_22_0_CollectHsMetrics'",
            "container = 'quay.io/biocontainers/picard:2.22.0--0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "SortMeRNA": {
        "name_process": "SortMeRNA",
        "string_process": "process SortMeRNA {\n    tag {\"SortMeRNA ${sample_id} - ${rg_id}\"}\n    label 'SortMeRNA_4_3_3'\n    container = 'quay.io/biocontainers/sortmerna:4.3.3--h9ee0642_0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    \n    input:\n        tuple(sample_id, rg_id, path(fastq_files))\n        path(db_fasta) \n    \n    output:\n        tuple(sample_id, rg_id, path(\"*_non_rRNA.fastq.gz\"), emit: non_rRNA_fastqs)\n        path(\"*_filtered_rRNA.fastq.gz\", emit: rRNA_fastqs)\n        path(\"*_rRNA_report.txt\", emit: qc_report)\n    \n    script:\n        def refs =  db_fasta.collect{ \"$it\" }.join(\" -ref \")\n        def report_title = fastq_files[0].simpleName.split(\"_R1_\")[0]  \n        if (params.single_end) {\n            \"\"\"\n            sortmerna -ref ${refs} \\\n                -reads ${fastq_files} \\\n                --num_alignments 1 \\\n                --threads ${task.cpus} \\\n                --fastx \\\n                -workdir \\${PWD} \\\n                --aligned rRNA-reads \\\n                --other non-rRNA-reads  \\\n                --zip-out\n \n            mv non-rRNA-reads.fq.gz ${fastq_files[0].simpleName}_non_rRNA.fastq.gz\n            mv rRNA-reads.fq.gz ${fastq_files[0].simpleName}_filtered_rRNA.fastq.gz\n            mv rRNA-reads.log ${report_title}_rRNA_report.txt\n            \"\"\"\n        } else {\n            \"\"\"\n            sortmerna -ref ${refs} \\\n                -reads ${fastq_files[0]} -reads ${fastq_files[1]} \\\n                --num_alignments 1 \\\n                --threads ${task.cpus} \\\n                -workdir \\${PWD} \\\n                --fastx -paired_in \\\n                --aligned rRNA-reads \\\n                --other non-rRNA-reads \\\n                -out2 \\\n                --zip-out\n\n            mv non-rRNA-reads_fwd.fq.gz  ${fastq_files[0].simpleName}_non_rRNA.fastq.gz\n            mv non-rRNA-reads_rev.fq.gz  ${fastq_files[1].simpleName}_non_rRNA.fastq.gz\n            mv rRNA-reads_fwd.fq.gz  ${fastq_files[0].simpleName}_filtered_rRNA.fastq.gz\n            mv rRNA-reads_rev.fq.gz  ${fastq_files[1].simpleName}_filtered_rRNA.fastq.gz            \n            mv rRNA-reads.log ${report_title}_rRNA_report.txt\n            \"\"\"\n        }\n}",
        "nb_lignes_process": 53,
        "string_script": "        def refs =  db_fasta.collect{ \"$it\" }.join(\" -ref \")\n        def report_title = fastq_files[0].simpleName.split(\"_R1_\")[0]  \n        if (params.single_end) {\n            \"\"\"\n            sortmerna -ref ${refs} \\\n                -reads ${fastq_files} \\\n                --num_alignments 1 \\\n                --threads ${task.cpus} \\\n                --fastx \\\n                -workdir \\${PWD} \\\n                --aligned rRNA-reads \\\n                --other non-rRNA-reads  \\\n                --zip-out\n \n            mv non-rRNA-reads.fq.gz ${fastq_files[0].simpleName}_non_rRNA.fastq.gz\n            mv rRNA-reads.fq.gz ${fastq_files[0].simpleName}_filtered_rRNA.fastq.gz\n            mv rRNA-reads.log ${report_title}_rRNA_report.txt\n            \"\"\"\n        } else {\n            \"\"\"\n            sortmerna -ref ${refs} \\\n                -reads ${fastq_files[0]} -reads ${fastq_files[1]} \\\n                --num_alignments 1 \\\n                --threads ${task.cpus} \\\n                -workdir \\${PWD} \\\n                --fastx -paired_in \\\n                --aligned rRNA-reads \\\n                --other non-rRNA-reads \\\n                -out2 \\\n                --zip-out\n\n            mv non-rRNA-reads_fwd.fq.gz  ${fastq_files[0].simpleName}_non_rRNA.fastq.gz\n            mv non-rRNA-reads_rev.fq.gz  ${fastq_files[1].simpleName}_non_rRNA.fastq.gz\n            mv rRNA-reads_fwd.fq.gz  ${fastq_files[0].simpleName}_filtered_rRNA.fastq.gz\n            mv rRNA-reads_rev.fq.gz  ${fastq_files[1].simpleName}_filtered_rRNA.fastq.gz            \n            mv rRNA-reads.log ${report_title}_rRNA_report.txt\n            \"\"\"\n        }",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [
            "SortMeRna"
        ],
        "tools_url": [
            "https://bio.tools/sortmerna"
        ],
        "tools_dico": [
            {
                "name": "SortMeRna",
                "uri": "https://bio.tools/sortmerna",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence analysis tool for filtering, mapping and OTU-picking NGS reads.",
                "homepage": "http://bioinfo.lifl.fr/RNA/sortmerna/"
            }
        ],
        "inputs": [
            "fastq_files",
            "sample_id",
            "db_fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"SortMeRNA ${sample_id} - ${rg_id}\"}",
            "label 'SortMeRNA_4_3_3'",
            "container = 'quay.io/biocontainers/sortmerna:4.3.3--h9ee0642_0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MergeFastqs": {
        "name_process": "MergeFastqs",
        "string_process": "\nprocess MergeFastqs {\n    tag {\"bash MergeFastqs ${sample_id} - ${read_nr}\"}\n    label 'bash_4_2_46'\n    label 'bash_4_2_46_MergeFastqs'\n    container = 'library://sawibo/default/bioinf-tools:idt-umi-dependencies'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple (sample_id, flowcell, path(fastq))\n\n    output:\n        tuple (sample_id, flowcell, read_nr ,path(\"${sample_id}_${flowcell}_${read_nr}.fastq.gz\"), emit : merged_fastqs)\n\n\n    script:\n        switch(fastq[0]){\n          case ~/.*_R1_.*/:\n            read_nr = 'R1';\n            break;\n          case ~/.*_R2_.*/:\n            read_nr = 'R2';\n            break;\n          case ~/.*_R3_.*/:\n            read_nr = 'R3';\n            break;\n          case ~/.*_I1_.*/:\n            read_nr = 'I1';\n            break;\n          case ~/.*_I2_.*/:\n            read_nr = 'I2';\n            break;\n        }\n\n        \"\"\"\n        cat $fastq > \"${sample_id}_${flowcell}_${read_nr}.fastq.gz\"\n        \"\"\"\n\n}",
        "nb_lignes_process": 37,
        "string_script": "        switch(fastq[0]){\n          case ~/.*_R1_.*/:\n            read_nr = 'R1';\n            break;\n          case ~/.*_R2_.*/:\n            read_nr = 'R2';\n            break;\n          case ~/.*_R3_.*/:\n            read_nr = 'R3';\n            break;\n          case ~/.*_I1_.*/:\n            read_nr = 'I1';\n            break;\n          case ~/.*_I2_.*/:\n            read_nr = 'I2';\n            break;\n        }\n\n        \"\"\"\n        cat $fastq > \"${sample_id}_${flowcell}_${read_nr}.fastq.gz\"\n        \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "CASE",
            "BreakSeq"
        ],
        "tools_url": [
            "https://bio.tools/CASE",
            "https://bio.tools/breakseq"
        ],
        "tools_dico": [
            {
                "name": "CASE",
                "uri": "https://bio.tools/CASE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology browsing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Advancing Coordinated Cyber-investigations and Tool Interoperability using a Community Developed Specification Language.\n\nSource files for the CASE website.\n\nAPI used for instantiating CASE objects (includes ontological verification and type checking).\n\nCyber-investigation Analysis Standard Expression (CASE).\n\nRead the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO.\n\n\"@vocab\": \"http://case.example.org/core#\",.\n\nDET ER DINE PENGER DET DREIER SEG OM...\n\nVi er ikke st\ufffdrst, men garanterer effektiv behandling.\n\nLast ned v\ufffdr brosjyre i PDF format.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/pymzml (GITHUB.COM).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'UCO', 'cyber-investigation', 'cyber-investigations', 'plaso'",
                "homepage": "http://CASE.as"
            },
            {
                "name": "BreakSeq",
                "uri": "https://bio.tools/breakseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database of known human breakpoint junctions and software to search short reads against them.",
                "homepage": "http://sv.gersteinlab.org/breakseq/"
            }
        ],
        "inputs": [
            "fastq",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"bash MergeFastqs ${sample_id} - ${read_nr}\"}",
            "label 'bash_4_2_46'",
            "label 'bash_4_2_46_MergeFastqs'",
            "container = 'library://sawibo/default/bioinf-tools:idt-umi-dependencies' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "Fastp": {
        "name_process": "Fastp",
        "string_process": "process Fastp {\n    tag {\"Fastp ${sample_id} - ${rg_id}\"}\n    label 'Fastp_0_20_1'\n    container = 'quay.io/biocontainers/fastp:0.20.1--h8b12597_0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, rg_id, path(fastq_files))\n\n    output:\n        tuple(sample_id, rg_id, path(\"*.fastq.gz\"), emit: fastqs_cleaned)\n        path(\"${sample_id}_fastp.json\", emit: qc_report)\n\n    script:\n                                                                                                                                                                   \n        if (params.single_end) {\n            \"\"\"\n            fastp --in1 ${fastq_files[0]} --out1 \"${fastq_files[0].simpleName}_trim.fastq.gz\" -j ${sample_id}_fastp.json ${params.optional}\n            \"\"\"\n        } else {\n            \"\"\"\n            fastp --in1 ${fastq_files[0]} --in2 ${fastq_files[1]} --out1 \"${fastq_files[0].simpleName}_trim.fastq.gz\" --out2 \"${fastq_files[1].simpleName}_trim.fastq.gz\" -j ${sample_id}_fastp.json ${params.optional}\n            \"\"\"\n        }\n}",
        "nb_lignes_process": 23,
        "string_script": "        if (params.single_end) {\n            \"\"\"\n            fastp --in1 ${fastq_files[0]} --out1 \"${fastq_files[0].simpleName}_trim.fastq.gz\" -j ${sample_id}_fastp.json ${params.optional}\n            \"\"\"\n        } else {\n            \"\"\"\n            fastp --in1 ${fastq_files[0]} --in2 ${fastq_files[1]} --out1 \"${fastq_files[0].simpleName}_trim.fastq.gz\" --out2 \"${fastq_files[1].simpleName}_trim.fastq.gz\" -j ${sample_id}_fastp.json ${params.optional}\n            \"\"\"\n        }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "fastq_files",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Fastp ${sample_id} - ${rg_id}\"}",
            "label 'Fastp_0_20_1'",
            "container = 'quay.io/biocontainers/fastp:0.20.1--h8b12597_0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "Command": {
        "name_process": "Command",
        "string_process": "process Command {\n    tag {\"Tool Command ${sample_id}\"}\n    label 'Tool_version'\n    label 'Tool_verion_Command'\n    container = 'container_url'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        val(analysis_id)\n        tuple(sample_id, path(input_file))\n     \n    output:\n        tuple(sample_id, path(output_file), emit: output_file)\n        path(\"log.txt\", emit: log)\n\n    script:\n        \"\"\"\n        tool command ${params.optional} ${analysis_id} ${params.resource_file} ${input_file} \n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        tool command ${params.optional} ${analysis_id} ${params.resource_file} ${input_file} \n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "GTOOL"
        ],
        "tools_url": [
            "https://bio.tools/gtool"
        ],
        "tools_dico": [
            {
                "name": "GTOOL",
                "uri": "https://bio.tools/gtool",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Program for transforming sets of genotype data for use with the programs SNPTEST and IMPUTE.",
                "homepage": "http://www.well.ox.ac.uk/~cfreeman/software/gwas/gtool.html"
            }
        ],
        "inputs": [
            "analysis_id",
            "input_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Tool Command ${sample_id}\"}",
            "label 'Tool_version'",
            "label 'Tool_verion_Command'",
            "container = 'container_url' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CreateIntervalList": {
        "name_process": "CreateIntervalList",
        "string_process": "process CreateIntervalList {\n    tag {\"CreateIntervalList ${genome_dict.baseName}\"}\n    label 'CreateIntervalList'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        path(genome_index) \n        path(genome_dict)\n\n    output:\n        path (\"${genome_dict.baseName}.interval_list\", emit: genome_interval_list)\n\n\n    script:\n        \"\"\"\n        awk '{ print \\$1\"\\\\t1\\\\t\"\\$2\"\\\\t+\\\\t.\"}' ${genome_index} | cat ${genome_dict} - > ${genome_dict.baseName}.interval_list\n        \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        awk '{ print \\$1\"\\\\t1\\\\t\"\\$2\"\\\\t+\\\\t.\"}' ${genome_index} | cat ${genome_dict} - > ${genome_dict.baseName}.interval_list\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_index",
            "genome_dict"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"CreateIntervalList ${genome_dict.baseName}\"}",
            "label 'CreateIntervalList' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "STARFusion": {
        "name_process": "STARFusion",
        "string_process": "process STARFusion {\n    tag {\"STARFusion ${sample_id}\"}\n    label 'STARFusion_1_8_1'\n    container = 'quay.io/biocontainers/star-fusion:1.8.1--2'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(fastq_files)) \n        path(star_index)\n        path(genome_lib)\n\n    output:\n        tuple(sample_id, path(\"${sample_id}_star-fusion.tsv\"), emit: fusion_predictions) \n        path(\"*.{tsv,txt}\", emit: fusion_abridged)\n\n\n    script:\n                                                                                                            \n        def avail_mem = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n        def read_args = params.single_end ? \"--left_fq ${fastq_files[0]}\" : \"--left_fq ${fastq_files[0]} --right_fq ${fastq_files[1]}\"\n        \"\"\"\n        STAR \\\n            --genomeDir ${star_index} \\\n            --readFilesIn ${fastq_files} \\\n            --twopassMode Basic \\\n            --outReadsUnmapped None \\\n            --chimSegmentMin 12 \\\n            --chimJunctionOverhangMin 12 \\\n            --alignSJDBoverhangMin 10 \\\n            --alignMatesGapMax 100000 \\\n            --alignIntronMax 100000 \\\n            --chimSegmentReadGapMax 3 \\\n            --alignSJstitchMismatchNmax 5 -1 5 5 \\\n            --runThreadN ${task.cpus} \\\n            --outSAMstrandField intronMotif ${avail_mem} \\\n            --outSAMunmapped Within \\\n            --outSAMtype BAM Unsorted \\\n            --outSAMattrRGline ID:GRPundef \\\n            --chimMultimapScoreRange 10 \\\n            --chimMultimapNmax 10 \\\n            --chimNonchimScoreDropMin 10 \\\n            --peOverlapNbasesMin 12 \\\n            --peOverlapMMp 0.1 \\\n            --readFilesCommand zcat \\\n            --sjdbOverhang 100 \\\n            --chimOutJunctionFormat 1\n\n        STAR-Fusion \\\n            --genome_lib_dir ${genome_lib} \\\n            -J Chimeric.out.junction \\\n            ${read_args} \\\n            --CPU ${task.cpus} \\\n            ${params.optional} \\\n            --output_dir .\n        mv star-fusion.fusion_predictions.tsv ${sample_id}_star-fusion.tsv\n        mv star-fusion.fusion_predictions.abridged.tsv ${sample_id}_abridged.tsv\n        mv star-fusion.fusion_predictions.abridged.coding_effect.tsv ${sample_id}_abridged.coding_effect.tsv\n        \"\"\"\n}",
        "nb_lignes_process": 57,
        "string_script": "        def avail_mem = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n        def read_args = params.single_end ? \"--left_fq ${fastq_files[0]}\" : \"--left_fq ${fastq_files[0]} --right_fq ${fastq_files[1]}\"\n        \"\"\"\n        STAR \\\n            --genomeDir ${star_index} \\\n            --readFilesIn ${fastq_files} \\\n            --twopassMode Basic \\\n            --outReadsUnmapped None \\\n            --chimSegmentMin 12 \\\n            --chimJunctionOverhangMin 12 \\\n            --alignSJDBoverhangMin 10 \\\n            --alignMatesGapMax 100000 \\\n            --alignIntronMax 100000 \\\n            --chimSegmentReadGapMax 3 \\\n            --alignSJstitchMismatchNmax 5 -1 5 5 \\\n            --runThreadN ${task.cpus} \\\n            --outSAMstrandField intronMotif ${avail_mem} \\\n            --outSAMunmapped Within \\\n            --outSAMtype BAM Unsorted \\\n            --outSAMattrRGline ID:GRPundef \\\n            --chimMultimapScoreRange 10 \\\n            --chimMultimapNmax 10 \\\n            --chimNonchimScoreDropMin 10 \\\n            --peOverlapNbasesMin 12 \\\n            --peOverlapMMp 0.1 \\\n            --readFilesCommand zcat \\\n            --sjdbOverhang 100 \\\n            --chimOutJunctionFormat 1\n\n        STAR-Fusion \\\n            --genome_lib_dir ${genome_lib} \\\n            -J Chimeric.out.junction \\\n            ${read_args} \\\n            --CPU ${task.cpus} \\\n            ${params.optional} \\\n            --output_dir .\n        mv star-fusion.fusion_predictions.tsv ${sample_id}_star-fusion.tsv\n        mv star-fusion.fusion_predictions.abridged.tsv ${sample_id}_abridged.tsv\n        mv star-fusion.fusion_predictions.abridged.coding_effect.tsv ${sample_id}_abridged.coding_effect.tsv\n        \"\"\"",
        "nb_lignes_script": 39,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "fastq_files",
            "sample_id",
            "star_index",
            "genome_lib"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"STARFusion ${sample_id}\"}",
            "label 'STARFusion_1_8_1'",
            "container = 'quay.io/biocontainers/star-fusion:1.8.1--2' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "BWAMapping": {
        "name_process": "BWAMapping",
        "string_process": "process BWAMapping {\n    tag {\"BWA Mem ${sample_id} - ${rg_id}\"}\n    label 'BWA_0_7_17'\n    label 'BWA_0_7_17_Mem'\n    container = 'library://sawibo/default/bioinf-tools:bwa-0.7.17_samtools-1.9'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    \n    input:\n        tuple (sample_id, rg_id, path(fastq))\n\n    output:\n        tuple (sample_id, rg_id, path(\"${rg_id}_sorted.bam\"), path(\"${rg_id}_sorted.bai\"), emit: mapped_bams)\n\n    script:\n        def barcode = rg_id.split('_')[1]\n        def bwa_readgroup = \"\\\"@RG\\\\tID:${rg_id}\\\\tSM:${sample_id}\\\\tPL:ILLUMINA\\\\tLB:${sample_id}\\\\tPU:${barcode}\\\"\"\n\n        \"\"\"\n        bwa mem $params.optional -t ${task.cpus} -R $bwa_readgroup $params.genome_fasta $fastq | \\\n        samtools sort > ${rg_id}_sorted.bam\n        samtools index ${rg_id}_sorted.bam ${rg_id}_sorted.bai\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        def barcode = rg_id.split('_')[1]\n        def bwa_readgroup = \"\\\"@RG\\\\tID:${rg_id}\\\\tSM:${sample_id}\\\\tPL:ILLUMINA\\\\tLB:${sample_id}\\\\tPU:${barcode}\\\"\"\n\n        \"\"\"\n        bwa mem $params.optional -t ${task.cpus} -R $bwa_readgroup $params.genome_fasta $fastq | \\\n        samtools sort > ${rg_id}_sorted.bam\n        samtools index ${rg_id}_sorted.bam ${rg_id}_sorted.bai\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fastq",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"BWA Mem ${sample_id} - ${rg_id}\"}",
            "label 'BWA_0_7_17'",
            "label 'BWA_0_7_17_Mem'",
            "container = 'library://sawibo/default/bioinf-tools:bwa-0.7.17_samtools-1.9' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "GenePredToBed": {
        "name_process": "GenePredToBed",
        "string_process": "process GenePredToBed {\n    tag {\"ucsc GenePredToBed ${genome_genepred.baseName}\"}\n    label 'ucsc_377'\n    label 'ucsc_377_GenePredToBed'\n    container = 'quay.io/biocontainers/ucsc-genepredtobed:377--h35c10e6_2'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        path(genome_genepred)\n\n    output:\n        path(\"${genome_genepred.baseName}.sorted.bed12\", emit: genome_bed12)\n  \n\n    script:\n        \"\"\"\n        genePredToBed ${genome_genepred} ${genome_genepred.baseName}.bed12\n        sort -k1,1 -k2,2n ${genome_genepred.baseName}.bed12 > ${genome_genepred.baseName}.sorted.bed12\n        \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        genePredToBed ${genome_genepred} ${genome_genepred.baseName}.bed12\n        sort -k1,1 -k2,2n ${genome_genepred.baseName}.bed12 > ${genome_genepred.baseName}.sorted.bed12\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_genepred"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"ucsc GenePredToBed ${genome_genepred.baseName}\"}",
            "label 'ucsc_377'",
            "label 'ucsc_377_GenePredToBed'",
            "container = 'quay.io/biocontainers/ucsc-genepredtobed:377--h35c10e6_2' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "LCExtrap": {
        "name_process": "LCExtrap",
        "string_process": " process LCExtrap {\n      tag {\"Preseq LCExtrap ${sample_id} \"}\n      label 'Preseq_2_0_3'\n      label 'Preseq_2_0_3_LCExtrap'\n      container = \"quay.io/biocontainers/preseq:2.0.3--hf53bd2b_3\"\n      shell = ['/bin/bash', '-euo', 'pipefail']\n\n      input:\n          tuple(sample_id, path(bam_file), path(bai_file))\n\n      output:\n          tuple(sample_id, path(\"${bam_file.baseName}.ccurve.txt\") , emit: ccurve_table)\n\n      script:\n                                                                                                                           \n          \"\"\"\n          preseq lc_extrap ${params.optional} ${bam_file} -o ${bam_file.baseName}.ccurve.txt\n          \"\"\"\n  }",
        "nb_lignes_process": 17,
        "string_script": "          \"\"\"\n          preseq lc_extrap ${params.optional} ${bam_file} -o ${bam_file.baseName}.ccurve.txt\n          \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "preseq"
        ],
        "tools_url": [
            "https://bio.tools/preseq"
        ],
        "tools_dico": [
            {
                "name": "preseq",
                "uri": "https://bio.tools/preseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package is aimed at predicting and number of distinct reads and how many will be expected from additional sequencing using an initial sequencing experiment. The estimates can then be used to examine the utility of further sequencing, optimize the sequencing depth, or to screen multiple libraries to avoid low complexity samples.",
                "homepage": "http://smithlabresearch.org/software/preseq/"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Preseq LCExtrap ${sample_id} \"}",
            "label 'Preseq_2_0_3'",
            "label 'Preseq_2_0_3_LCExtrap'",
            "container = \"quay.io/biocontainers/preseq:2.0.3--hf53bd2b_3\" shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "VariantFiltration": {
        "name_process": "VariantFiltration",
        "string_process": "\nprocess VariantFiltration {\n    tag {\"GATK VariantFiltration ${run_id}.${interval}.${type}\"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_VariantFiltration'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (run_id, interval, type, path(vcf), path(vcfidx))\n\n    output:\n        tuple (run_id, interval, type, path(\"${run_id}.${interval}.${type}.filtered_variants.vcf\"), path(\"${run_id}.${interval}.${type}.filtered_variants.vcf.idx\"), emit: filtered_vcfs)\n\n    script:\n        if (type == 'SNP'){\n          filter_criteria = \"--filter-expression 'QD < 2.0' --filter-expression 'MQ < 40.0' --filter-expression 'FS > 60.0' --filter-expression 'HaplotypeScore > 13.0' --filter-expression 'MQRankSum < -12.5' --filter-expression 'ReadPosRankSum < -8.0' --filter-expression 'MQ0 >= 4 && ((MQ0 / (1.0 * DP)) > 0.1)' --filter-expression 'DP < 5' --filter-expression 'QUAL < 30' --filter-expression 'QUAL >= 30.0 && QUAL < 50.0' --filter-expression 'SOR > 4.0' --filter-name 'SNP_LowQualityDepth' --filter-name 'SNP_MappingQuality' --filter-name 'SNP_StrandBias' --filter-name 'SNP_HaplotypeScoreHigh' --filter-name 'SNP_MQRankSumLow' --filter-name 'SNP_ReadPosRankSumLow' --filter-name 'SNP_HardToValidate' --filter-name 'SNP_LowCoverage' --filter-name 'SNP_VeryLowQual' --filter-name 'SNP_LowQual' --filter-name 'SNP_SOR' -cluster 3 -window 10\"\n        } else if (type == 'RNA') {\n           filter_criteria = \"--filter-name 'FS' --filter-expression 'FS > 30.0' --filter-name 'QD' --filter-expression 'QD < 2.0'\"\n        } else {\n           filter_criteria = \"--filter-expression 'QD < 2.0' --filter-expression 'ReadPosRankSum < -20.0' --filter-expression 'FS > 200.0' --filter-name 'INDEL_LowQualityDepth' --filter-name 'INDEL_ReadPosRankSumLow' --filter-name 'INDEL_StrandBias'\"\n        }\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        VariantFiltration \\\n        ${params.optional} \\\n        -R $params.genome_fasta \\\n        -V $vcf \\\n        -O ${run_id}.${interval}.${type}.filtered_variants.vcf \\\n        $filter_criteria\n        \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "        if (type == 'SNP'){\n          filter_criteria = \"--filter-expression 'QD < 2.0' --filter-expression 'MQ < 40.0' --filter-expression 'FS > 60.0' --filter-expression 'HaplotypeScore > 13.0' --filter-expression 'MQRankSum < -12.5' --filter-expression 'ReadPosRankSum < -8.0' --filter-expression 'MQ0 >= 4 && ((MQ0 / (1.0 * DP)) > 0.1)' --filter-expression 'DP < 5' --filter-expression 'QUAL < 30' --filter-expression 'QUAL >= 30.0 && QUAL < 50.0' --filter-expression 'SOR > 4.0' --filter-name 'SNP_LowQualityDepth' --filter-name 'SNP_MappingQuality' --filter-name 'SNP_StrandBias' --filter-name 'SNP_HaplotypeScoreHigh' --filter-name 'SNP_MQRankSumLow' --filter-name 'SNP_ReadPosRankSumLow' --filter-name 'SNP_HardToValidate' --filter-name 'SNP_LowCoverage' --filter-name 'SNP_VeryLowQual' --filter-name 'SNP_LowQual' --filter-name 'SNP_SOR' -cluster 3 -window 10\"\n        } else if (type == 'RNA') {\n           filter_criteria = \"--filter-name 'FS' --filter-expression 'FS > 30.0' --filter-name 'QD' --filter-expression 'QD < 2.0'\"\n        } else {\n           filter_criteria = \"--filter-expression 'QD < 2.0' --filter-expression 'ReadPosRankSum < -20.0' --filter-expression 'FS > 200.0' --filter-name 'INDEL_LowQualityDepth' --filter-name 'INDEL_ReadPosRankSumLow' --filter-name 'INDEL_StrandBias'\"\n        }\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        VariantFiltration \\\n        ${params.optional} \\\n        -R $params.genome_fasta \\\n        -V $vcf \\\n        -O ${run_id}.${interval}.${type}.filtered_variants.vcf \\\n        $filter_criteria\n        \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "vcf",
            "vcfidx",
            "run_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK VariantFiltration ${run_id}.${interval}.${type}\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_VariantFiltration'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CollectMultipleMetrics": {
        "name_process": "CollectMultipleMetrics",
        "string_process": "process CollectMultipleMetrics {\n    tag {\"PICARD CollectMultipleMetrics ${sample_id}\"}\n    label 'PICARD_2_22_0'\n    label 'PICARD_2_22_0_CollectMultipleMetrics'\n    container = 'quay.io/biocontainers/picard:2.22.0--0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n\n    output:\n        path(\"*.txt\", emit: txt_files)\n\n    script:\n        \"\"\"\n        picard -Xmx${task.memory.toGiga()-4}G CollectMultipleMetrics TMP_DIR=\\$TMPDIR R=${params.genome} INPUT=${bam_file} OUTPUT=${sample_id} EXT=.txt ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        picard -Xmx${task.memory.toGiga()-4}G CollectMultipleMetrics TMP_DIR=\\$TMPDIR R=${params.genome} INPUT=${bam_file} OUTPUT=${sample_id} EXT=.txt ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"PICARD CollectMultipleMetrics ${sample_id}\"}",
            "label 'PICARD_2_22_0'",
            "label 'PICARD_2_22_0_CollectMultipleMetrics'",
            "container = 'quay.io/biocontainers/picard:2.22.0--0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "UnifiedGenotyper": {
        "name_process": "UnifiedGenotyper",
        "string_process": "process UnifiedGenotyper {\n    tag {\"GATK UnifiedGenotyper ${sample_id}\"}\n    label 'GATK_3_8_1_0_gf15c1c3ef'\n    label 'GATK_3_8_1_0_gf15c1c3ef_UnifiedGenotyper'\n    container = 'quay.io/biocontainers/gatk:3.8--py27_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n\n    output:\n        tuple(sample_id, path(\"${sample_id}.vcf\"), emit: vcf_file)\n\n    script:\n\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T UnifiedGenotyper --reference_sequence ${params.genome} --input_file ${bam_file} --out ${sample_id}.vcf ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T UnifiedGenotyper --reference_sequence ${params.genome} --input_file ${bam_file} --out ${sample_id}.vcf ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK UnifiedGenotyper ${sample_id}\"}",
            "label 'GATK_3_8_1_0_gf15c1c3ef'",
            "label 'GATK_3_8_1_0_gf15c1c3ef_UnifiedGenotyper'",
            "container = 'quay.io/biocontainers/gatk:3.8--py27_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "IndelRealigner": {
        "name_process": "IndelRealigner",
        "string_process": "process IndelRealigner {\n    tag {\"GATK IndelRealigner ${sample_id} - ${chr}\"}\n    label 'GATK_3_8_1_0_gf15c1c3ef'\n    label 'GATK_3_8_1_0_gf15c1c3ef_IndelRealigner'\n    container = 'quay.io/biocontainers/gatk:3.8--py27_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file), chr, path(target_intervals))\n\n    output:\n        tuple(sample_id, path(\"${bam_file.baseName}.realigned.${chr}.bam\"), path(\"${bam_file.baseName}.realigned.${chr}.bai\"), emit: bam_file)\n\n    script:\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T IndelRealigner \\\n        --reference_sequence ${params.genome} \\\n        --input_file ${bam_file} \\\n        --intervals ${chr} \\\n        --targetIntervals ${bam_file.baseName}.target_intervals.${chr}.list \\\n        --out ${bam_file.baseName}.realigned.${chr}.bam \\\n        ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T IndelRealigner \\\n        --reference_sequence ${params.genome} \\\n        --input_file ${bam_file} \\\n        --intervals ${chr} \\\n        --targetIntervals ${bam_file.baseName}.target_intervals.${chr}.list \\\n        --out ${bam_file.baseName}.realigned.${chr}.bam \\\n        ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_file",
            "bai_file",
            "target_intervals",
            "sample_id"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK IndelRealigner ${sample_id} - ${chr}\"}",
            "label 'GATK_3_8_1_0_gf15c1c3ef'",
            "label 'GATK_3_8_1_0_gf15c1c3ef_IndelRealigner'",
            "container = 'quay.io/biocontainers/gatk:3.8--py27_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "Count": {
        "name_process": "Count",
        "string_process": "process Count {\n    tag {\"HTSeq Count ${sample_id}\"}\n    label 'HTSeq_0_11_3'\n    label 'HTSeq_0_11_3_Count'\n    container = 'quay.io/biocontainers/htseq:0.11.3--py37hb3f55d8_0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n        path(genome_gtf)   \n  \n    output:\n        tuple(sample_id, path(\"${sample_id}_readCounts_raw.txt\"), emit: count_table) \n\n    script:\n        def s_val = 'no'\n        if (params.stranded && !params.unstranded) {\n            s_val = 'yes'\n        } else if (params.revstranded && !params.unstranded) {\n            s_val = 'reverse'   \n        } \n        \"\"\"\n        htseq-count ${params.optional} -s ${s_val} -t ${params.hts_count_type} -i ${params.hts_group_features} -f bam ${bam_file} ${genome_gtf}  > ${sample_id}_readCounts_raw.txt\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        def s_val = 'no'\n        if (params.stranded && !params.unstranded) {\n            s_val = 'yes'\n        } else if (params.revstranded && !params.unstranded) {\n            s_val = 'reverse'   \n        } \n        \"\"\"\n        htseq-count ${params.optional} -s ${s_val} -t ${params.hts_count_type} -i ${params.hts_group_features} -f bam ${bam_file} ${genome_gtf}  > ${sample_id}_readCounts_raw.txt\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "htseqcount"
        ],
        "tools_url": [
            "https://bio.tools/htseqcount"
        ],
        "tools_dico": [
            {
                "name": "htseqcount",
                "uri": "https://bio.tools/htseqcount",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "This script takes an alignment file in SAM format and a feature file in GFF format and calculates for each feature the number of reads mapping to it.",
                "homepage": "https://htseq.readthedocs.io/en/release_0.9.1/"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id",
            "genome_gtf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"HTSeq Count ${sample_id}\"}",
            "label 'HTSeq_0_11_3'",
            "label 'HTSeq_0_11_3_Count'",
            "container = 'quay.io/biocontainers/htseq:0.11.3--py37hb3f55d8_0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "SNPEffFilter": {
        "name_process": "SNPEffFilter",
        "string_process": "\nprocess SNPEffFilter {\n    tag {\"SNPEff SNPEffFilter ${run_id}\"}\n    label 'SNPEff_4_3t'\n    label 'SNPEff_4_3t_SNPEffFilter'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:snpeff-4.3t'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (run_id, path(vcf), path(vcfidx))\n\n    output:\n        tuple (run_id, path(\"${vcf.baseName}.filtered_variants.vcf\"), path(\"${vcf.baseName}.filtered_variants.vcf.idx\"), emit: snpeff_filtered_vcfs)\n\n    script:\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR -jar /bin/snpEff.jar \\\n        -c snpEff.config ${params.optional} \\\n        -v $vcf \\\n        > ${vcf.baseName}.filtered_variants.vcf\n\n        java -Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR -jar /bin/igvtools.jar index ${vcf.baseName}.filtered_variants.vcf\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR -jar /bin/snpEff.jar \\\n        -c snpEff.config ${params.optional} \\\n        -v $vcf \\\n        > ${vcf.baseName}.filtered_variants.vcf\n\n        java -Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR -jar /bin/igvtools.jar index ${vcf.baseName}.filtered_variants.vcf\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf",
            "vcfidx",
            "run_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"SNPEff SNPEffFilter ${run_id}\"}",
            "label 'SNPEff_4_3t'",
            "label 'SNPEff_4_3t_SNPEffFilter'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:snpeff-4.3t' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "BWASW": {
        "name_process": "BWASW",
        "string_process": "process BWASW {\n    tag {\"BWA BWASW ${sample_id} - ${rg_id}\"}\n    label 'BWA_0_7_17'\n    label 'BWA_0_7_17_BWASW'\n    container = 'quay.io/biocontainers/bwa:0.7.17--hed695b0_6'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, rg_id, path(fastq))\n\n    output:\n        tuple(sample_id, rg_id, path(\"${fastq[0].simpleName}.sam\"), emit: sam_file)\n\n    script:\n        \"\"\"\n        bwa bwasw -t ${task.cpus} ${params.optional} ${params.genome} ${fastq} > ${fastq[0].simpleName}.sam\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        bwa bwasw -t ${task.cpus} ${params.optional} ${params.genome} ${fastq} > ${fastq[0].simpleName}.sam\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "fastq",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"BWA BWASW ${sample_id} - ${rg_id}\"}",
            "label 'BWA_0_7_17'",
            "label 'BWA_0_7_17_BWASW'",
            "container = 'quay.io/biocontainers/bwa:0.7.17--hed695b0_6' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "FilterConsensusReads": {
        "name_process": "FilterConsensusReads",
        "string_process": "process FilterConsensusReads {\n    tag {\"FGBIO FilterConsensusReads ${sample_id}\"}\n    label 'FGBIO_1_1_0'\n    label 'FGBIO_1_1_0_FilterConsensusReads'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:idt-umi-dependencies'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (sample_id, flowcell, machine, run_nr, path(bam))\n\n    output:\n        tuple (sample_id, flowcell, machine, run_nr, path(\"${sample_id}.u.consensus.filtered.bam\"), emit: filtered_bams)\n\n    script:\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}g -jar /bin/fgbio-1.1.0.jar --tmp-dir \\$PWD FilterConsensusReads \\\n        --input $bam \\\n        --output ${sample_id}.u.consensus.filtered.bam \\\n        --ref $params.genome_fasta \\\n        ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}g -jar /bin/fgbio-1.1.0.jar --tmp-dir \\$PWD FilterConsensusReads \\\n        --input $bam \\\n        --output ${sample_id}.u.consensus.filtered.bam \\\n        --ref $params.genome_fasta \\\n        ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"FGBIO FilterConsensusReads ${sample_id}\"}",
            "label 'FGBIO_1_1_0'",
            "label 'FGBIO_1_1_0_FilterConsensusReads'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:idt-umi-dependencies' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "FastQC": {
        "name_process": "FastQC",
        "string_process": "process FastQC {\n    tag {\"FastQC ${sample_id} - ${rg_id}\"}\n    label 'FastQC_0_11_5'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:fastqc-0.11.5'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple (sample_id, rg_id, path(fastq) )\n\n    output:\n        path(\"*_fastqc.{zip,html}\", emit: fastqc_reports)\n\n    script:\n        \"\"\"\n        fastqc ${params.optional} -t ${task.cpus} $fastq\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        fastqc ${params.optional} -t ${task.cpus} $fastq\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "fastq",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"FastQC ${sample_id} - ${rg_id}\"}",
            "label 'FastQC_0_11_5'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:fastqc-0.11.5' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CombineGVCFs": {
        "name_process": "CombineGVCFs",
        "string_process": "process CombineGVCFs {\n    tag {\"GATK CombineGVCFs ${run_id}.${interval}\"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_CombineGVCFs'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n      tuple (run_id, interval, path(gvcf_chunks), path(gvcf_chunk_idxs), path(interval_file))\n    output:\n      tuple (run_id, interval, path(\"${run_id}.${interval}.g.vcf\"), path(\"${run_id}.${interval}.g.vcf.idx\"), path(interval_file), emit: combined_gvcfs)\n\n    script:\n        vcfs = gvcf_chunks.join(' -V ')\n\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        CombineGVCFs \\\n        -R ${params.genome_fasta} \\\n        -V $vcfs \\\n        -O ${run_id}.${interval}.g.vcf \\\n        -L $interval_file\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        vcfs = gvcf_chunks.join(' -V ')\n\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        CombineGVCFs \\\n        -R ${params.genome_fasta} \\\n        -V $vcfs \\\n        -O ${run_id}.${interval}.g.vcf \\\n        -L $interval_file\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "gvcf_chunks",
            "gvcf_chunk_idxs",
            "interval_file",
            "run_id"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK CombineGVCFs ${run_id}.${interval}\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_CombineGVCFs'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "SNPSiftAnnotate": {
        "name_process": "SNPSiftAnnotate",
        "string_process": "\nprocess SNPSiftAnnotate {\n    tag {\"SNPEff SNPSiftAnnotate ${run_id}\"}\n    label 'SNPEff_4_3t'\n    label 'SNPEff_4_3t_SNPSiftAnnotate'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:snpeff-4.3t'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (run_id, path(vcf), path(vcfidx))\n\n    output:\n        tuple (run_id, path(\"${vcf.baseName}_${db_name}.vcf\"), path(\"${vcf.baseName}_${db_name}.vcf.idx\"), emit: snpsift_annoted_vcfs)\n\n    script:\n        db_file = file(params.genome_snpsift_annotate_db).getBaseName()\n        db_name = db_file.replaceFirst(~/\\.[^\\.]+$/, '')\n\n        \"\"\"\n        set -o pipefail\n\n        java -Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR -jar /bin/SnpSift.jar annotate \\\n        ${params.optional} ${params.genome_snpsift_annotate_db} \\\n        $vcf > ${vcf.baseName}_${db_name}.vcf\n\n        java -Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR -jar /bin/igvtools.jar index ${vcf.baseName}_${db_name}.vcf\n\n        \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "        db_file = file(params.genome_snpsift_annotate_db).getBaseName()\n        db_name = db_file.replaceFirst(~/\\.[^\\.]+$/, '')\n\n        \"\"\"\n        set -o pipefail\n\n        java -Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR -jar /bin/SnpSift.jar annotate \\\n        ${params.optional} ${params.genome_snpsift_annotate_db} \\\n        $vcf > ${vcf.baseName}_${db_name}.vcf\n\n        java -Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR -jar /bin/igvtools.jar index ${vcf.baseName}_${db_name}.vcf\n\n        \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf",
            "vcfidx",
            "run_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"SNPEff SNPSiftAnnotate ${run_id}\"}",
            "label 'SNPEff_4_3t'",
            "label 'SNPEff_4_3t_SNPSiftAnnotate'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:snpeff-4.3t' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "TrimGalore": {
        "name_process": "TrimGalore",
        "string_process": "process TrimGalore {\n    tag {\"TrimGalore ${sample_id} - ${rg_id}\"}\n    label 'TrimGalore_0_6_5'\n    container = 'quay.io/biocontainers/trim-galore:0.6.5--0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, rg_id, path(fastq_files)) \n\n    output:\n        tuple(sample_id, rg_id, path(\"*fastq.gz\"), emit: fastqs_trimmed) \n        path(\"*trimming_report.txt\", emit: trimming_report)\n        path(\"*_fastqc.{zip,html}\", optional: true, emit: fastqc_report) \n\n    script:\n        if (params.single_end) {\n            \"\"\"\n            trim_galore ${fastq_files} --gzip ${params.optional}\n            mv ${fastq_files[0].simpleName}_trimmed.fq.gz ${fastq_files[0].simpleName}_trimmed.fastq.gz \n            \"\"\"\n        } else {\n            \"\"\"\n            trim_galore ${fastq_files} --paired --gzip ${params.optional}\n            mv ${fastq_files[0].simpleName}_val_1.fq.gz ${fastq_files[0].simpleName}_trimmed.fastq.gz \n            mv ${fastq_files[1].simpleName}_val_2.fq.gz ${fastq_files[1].simpleName}_trimmed.fastq.gz \n            \"\"\"\n        }\n}",
        "nb_lignes_process": 26,
        "string_script": "        if (params.single_end) {\n            \"\"\"\n            trim_galore ${fastq_files} --gzip ${params.optional}\n            mv ${fastq_files[0].simpleName}_trimmed.fq.gz ${fastq_files[0].simpleName}_trimmed.fastq.gz \n            \"\"\"\n        } else {\n            \"\"\"\n            trim_galore ${fastq_files} --paired --gzip ${params.optional}\n            mv ${fastq_files[0].simpleName}_val_1.fq.gz ${fastq_files[0].simpleName}_trimmed.fastq.gz \n            mv ${fastq_files[1].simpleName}_val_2.fq.gz ${fastq_files[1].simpleName}_trimmed.fastq.gz \n            \"\"\"\n        }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq_files",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"TrimGalore ${sample_id} - ${rg_id}\"}",
            "label 'TrimGalore_0_6_5'",
            "container = 'quay.io/biocontainers/trim-galore:0.6.5--0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "GenotypeGVCFs": {
        "name_process": "GenotypeGVCFs",
        "string_process": "process GenotypeGVCFs {\n    tag {\"GATK GenotypeGVCFs ${run_id}.${interval}\"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_GenotypeGVCFs'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (run_id, interval, path(gvcf), path(gvcfidx), path(interval_file))\n\n    output:\n        tuple (run_id, interval, path(\"${run_id}.${interval}.vcf\"),path(\"${run_id}.${interval}.vcf.idx\"),path(interval_file), emit : genotyped_vcfs)\n\n    script:\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        GenotypeGVCFs \\\n        -V $gvcf \\\n        -O ${run_id}.${interval}.vcf \\\n        -R ${params.genome_fasta} \\\n        -D ${params.genome_dbsnp} \\\n        -L $interval_file\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        GenotypeGVCFs \\\n        -V $gvcf \\\n        -O ${run_id}.${interval}.vcf \\\n        -R ${params.genome_fasta} \\\n        -D ${params.genome_dbsnp} \\\n        -L $interval_file\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "gvcf",
            "gvcfidx",
            "interval_file",
            "run_id"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK GenotypeGVCFs ${run_id}.${interval}\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_GenotypeGVCFs'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "VariantFiltrationSnpIndel": {
        "name_process": "VariantFiltrationSnpIndel",
        "string_process": "process VariantFiltrationSnpIndel {\n    tag {\"GATK VariantFiltrationSnpIndel ${analysis_id}\"}\n    label 'GATK_3_8_1_0_gf15c1c3ef'\n    label 'GATK_3_8_1_0_gf15c1c3ef_VariantFiltrationSnpIndel'\n    container = 'quay.io/biocontainers/gatk:3.8--py27_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(analysis_id, path(vcf_file), path(vcf_idx_file))\n\n    output:\n        tuple(analysis_id, path(\"${vcf_file.baseName}.filter.vcf\"), path(\"${vcf_file.baseName}.filter.vcf.idx\"), emit: vcf_file)\n\n    script:\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T SelectVariants --reference_sequence ${params.genome} -V $vcf_file --out ${vcf_file.baseName}.snp.vcf --selectTypeToExclude INDEL\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T SelectVariants --reference_sequence ${params.genome} -V $vcf_file --out ${vcf_file.baseName}.indel.vcf --selectTypeToInclude INDEL\n\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T VariantFiltration --reference_sequence ${params.genome} -V ${vcf_file.baseName}.snp.vcf --out ${vcf_file.baseName}.snp_filter.vcf ${params.snp_filter} ${params.snp_cluster}\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T VariantFiltration --reference_sequence ${params.genome} -V ${vcf_file.baseName}.indel.vcf --out ${vcf_file.baseName}.indel_filter.vcf ${params.indel_filter}\n\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T CombineVariants --reference_sequence ${params.genome} -V ${vcf_file.baseName}.snp_filter.vcf -V ${vcf_file.baseName}.indel_filter.vcf --out ${vcf_file.baseName}.filter.vcf --assumeIdenticalSamples\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T SelectVariants --reference_sequence ${params.genome} -V $vcf_file --out ${vcf_file.baseName}.snp.vcf --selectTypeToExclude INDEL\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T SelectVariants --reference_sequence ${params.genome} -V $vcf_file --out ${vcf_file.baseName}.indel.vcf --selectTypeToInclude INDEL\n\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T VariantFiltration --reference_sequence ${params.genome} -V ${vcf_file.baseName}.snp.vcf --out ${vcf_file.baseName}.snp_filter.vcf ${params.snp_filter} ${params.snp_cluster}\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T VariantFiltration --reference_sequence ${params.genome} -V ${vcf_file.baseName}.indel.vcf --out ${vcf_file.baseName}.indel_filter.vcf ${params.indel_filter}\n\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T CombineVariants --reference_sequence ${params.genome} -V ${vcf_file.baseName}.snp_filter.vcf -V ${vcf_file.baseName}.indel_filter.vcf --out ${vcf_file.baseName}.filter.vcf --assumeIdenticalSamples\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_file",
            "vcf_idx_file",
            "analysis_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK VariantFiltrationSnpIndel ${analysis_id}\"}",
            "label 'GATK_3_8_1_0_gf15c1c3ef'",
            "label 'GATK_3_8_1_0_gf15c1c3ef_VariantFiltrationSnpIndel'",
            "container = 'quay.io/biocontainers/gatk:3.8--py27_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MergeVCFs": {
        "name_process": "MergeVCFs",
        "string_process": "process MergeVCFs {\n    tag {\"GATK MergeVCFs ${id}\"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_MergeVCFs'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple (id, path(vcf_chunks), path(vcfidxs))\n\n    output:\n        tuple (id, path(\"${id}${ext}.gz\"), path(\"${id}${ext}.gz.tbi\"), emit: merged_vcfs)\n\n    script:\n        ext = vcf_chunks[0] =~ /\\.g\\.vcf/ ? '.g.vcf' : '.vcf'\n        vcfs = vcf_chunks.join(' -INPUT ')\n\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$PWD\" \\\n        SortVcf \\\n        --INPUT $vcfs \\\n        --OUTPUT ${id}${ext}\n\n        bgzip ${id}${ext}\n        tabix ${id}${ext}.gz\n        \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "        ext = vcf_chunks[0] =~ /\\.g\\.vcf/ ? '.g.vcf' : '.vcf'\n        vcfs = vcf_chunks.join(' -INPUT ')\n\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$PWD\" \\\n        SortVcf \\\n        --INPUT $vcfs \\\n        --OUTPUT ${id}${ext}\n\n        bgzip ${id}${ext}\n        tabix ${id}${ext}.gz\n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "drtext",
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/drtext",
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "drtext",
                "uri": "https://bio.tools/drtext",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0957",
                                "term": "Database metadata"
                            }
                        ]
                    }
                ],
                "description": "Get data resource entries complete text.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/drtext.html"
            },
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "vcf_chunks",
            "vcfidxs",
            "id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK MergeVCFs ${id}\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_MergeVCFs'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "Flagstat": {
        "name_process": "Flagstat",
        "string_process": "process Flagstat {\n    tag {\"Samtools Flagstat ${sample_id}\"}\n    label 'Samtools_1_10'\n    label 'Samtools_1_10_Flagstat'\n    container = 'quay.io/biocontainers/samtools:1.10--h9402c20_2'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n\n    output:\n        path(\"${bam_file.baseName}.flagstat\", emit: flagstat)\n\n    script:\n        \"\"\"\n        samtools flagstat ${bam_file} > ${bam_file.baseName}.flagstat\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        samtools flagstat ${bam_file} > ${bam_file.baseName}.flagstat\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Samtools Flagstat ${sample_id}\"}",
            "label 'Samtools_1_10'",
            "label 'Samtools_1_10_Flagstat'",
            "container = 'quay.io/biocontainers/samtools:1.10--h9402c20_2' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "SplitNCigarReads": {
        "name_process": "SplitNCigarReads",
        "string_process": "\nprocess SplitNCigarReads {\n    tag {\"GATK SplitNCigarReads ${sample_id}\"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_SplitNCigarReads'\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n   \n    output:  \n        tuple(sample_id, path(\"${sample_id}.split.bam\"), path(\"${sample_id}.split.bai\"), emit: bam_file)\n\n    script:\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g\" \\\n        SplitNCigarReads --tmp-dir \\$PWD \\\n        -R ${params.genome_fasta} \\\n        -I ${bam_file} \\\n        --refactor-cigar-string \\\n        -O ${sample_id}.split.bam\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g\" \\\n        SplitNCigarReads --tmp-dir \\$PWD \\\n        -R ${params.genome_fasta} \\\n        -I ${bam_file} \\\n        --refactor-cigar-string \\\n        -O ${sample_id}.split.bam\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK SplitNCigarReads ${sample_id}\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_SplitNCigarReads'",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MarkDup": {
        "name_process": "MarkDup",
        "string_process": "process MarkDup {\n  tag {\"Sambamba MarkDup ${sample_id}\"}\n  label 'Sambamba_0_6_8'\n  label 'Sambamba_0_6_8_MarkDup'\n  clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n  container = 'library://sawibo/default/bioinf-tools:sambamba-0.6.8'\n  shell = ['/bin/bash', '-euo', 'pipefail']\n  input:\n    tuple (sample_id, rg_ids, path(bams), path(bais))\n\n  output:\n    tuple (sample_id, path(\"${sample_id}_dedup.bam\"), path(\"${sample_id}_dedup.bai\"), emit: deduplicated_bams)\n\n  script:\n    \"\"\"\n    sambamba markdup ${params.optional} --tmpdir=\\$PWD/tmp -t ${task.cpus} ${bams} ${sample_id}_dedup.bam\n    sambamba index -t ${task.cpus} ${sample_id}_dedup.bam ${sample_id}_dedup.bai\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    sambamba markdup ${params.optional} --tmpdir=\\$PWD/tmp -t ${task.cpus} ${bams} ${sample_id}_dedup.bam\n    sambamba index -t ${task.cpus} ${sample_id}_dedup.bam ${sample_id}_dedup.bai\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Sambamba"
        ],
        "tools_url": [
            "https://bio.tools/sambamba"
        ],
        "tools_dico": [
            {
                "name": "Sambamba",
                "uri": "https://bio.tools/sambamba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a high performance modern robust and fast tool (and library), written in the D programming language, for working with SAM, BAM and CRAM formats.",
                "homepage": "http://www.open-bio.org/wiki/Sambamba"
            }
        ],
        "inputs": [
            "bams",
            "bais",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Sambamba MarkDup ${sample_id}\"}",
            "label 'Sambamba_0_6_8'",
            "label 'Sambamba_0_6_8_MarkDup'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:sambamba-0.6.8' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "GenomeGenerate": {
        "name_process": "GenomeGenerate",
        "string_process": "process GenomeGenerate {\n    tag {\"STAR GenomeGenerate ${genome_fasta.baseName} \"}\n    label 'STAR_2_7_3a'\n    label 'STAR_2_7_3a_GenomeGenerate'\n    container = 'quay.io/biocontainers/star:2.7.3a--0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        path(genome_fasta)\n        path(genome_gtf)\n    \n    \n    output:\n        path(\"${genome_fasta.baseName}\", emit: star_index)\n     \n   \n    script:\n                                                                                                                         \n        def avail_mem = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n        \"\"\"\n        mkdir ${genome_fasta.baseName}\n        STAR \\\n            --runMode genomeGenerate \\\n            --runThreadN ${task.cpus} \\\n            --sjdbGTFfile ${genome_gtf} \\\n            --genomeDir ${genome_fasta.baseName}/ \\\n            --genomeFastaFiles ${genome_fasta} \\\n            $avail_mem\n        \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "        def avail_mem = task.memory ? \"--limitGenomeGenerateRAM ${task.memory.toBytes() - 100000000}\" : ''\n        \"\"\"\n        mkdir ${genome_fasta.baseName}\n        STAR \\\n            --runMode genomeGenerate \\\n            --runThreadN ${task.cpus} \\\n            --sjdbGTFfile ${genome_gtf} \\\n            --genomeDir ${genome_fasta.baseName}/ \\\n            --genomeFastaFiles ${genome_fasta} \\\n            $avail_mem\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "genome_fasta",
            "genome_gtf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"STAR GenomeGenerate ${genome_fasta.baseName} \"}",
            "label 'STAR_2_7_3a'",
            "label 'STAR_2_7_3a_GenomeGenerate'",
            "container = 'quay.io/biocontainers/star:2.7.3a--0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "SplitIntervals": {
        "name_process": "SplitIntervals",
        "string_process": "process SplitIntervals {\n    tag {\"GATK SplitIntervals\"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_SplitIntervals'\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        val mode\n        path(scatter_interval_list)\n\n    output:\n        path(\"temp_*/scattered.interval_list\", emit: interval_lists)\n\n    script:\n        break_bands_at_multiples_of = mode == 'break' ? 1000000 : 0\n\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\${TMPDIR}\" \\\n        IntervalListTools \\\n            -I ${scatter_interval_list} \\\n            ${params.optional} \\\n          --BREAK_BANDS_AT_MULTIPLES_OF $break_bands_at_multiples_of \\\n            -O .\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        break_bands_at_multiples_of = mode == 'break' ? 1000000 : 0\n\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\${TMPDIR}\" \\\n        IntervalListTools \\\n            -I ${scatter_interval_list} \\\n            ${params.optional} \\\n          --BREAK_BANDS_AT_MULTIPLES_OF $break_bands_at_multiples_of \\\n            -O .\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "mode",
            "scatter_interval_list"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK SplitIntervals\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_SplitIntervals'",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "VariantAnnotator": {
        "name_process": "VariantAnnotator",
        "string_process": "\nprocess VariantAnnotator {\n    tag {\"GATK VariantAnnotator ${run_id}\"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_VariantAnnotator'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (run_id, path(vcf), path(vcfidx))\n\n    output:\n        tuple (run_id, path(\"${vcf.baseName}_${db_name}.vcf\"), path(\"${vcf.baseName}_${db_name}.vcf.idx\"), emit: annotated_vcfs)\n\n    script:\n        db_file = file(params.genome_variant_annotator_db).getBaseName()\n        db_name = db_file.replaceFirst(~/\\.[^\\.]+$/, '')\n\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        VariantAnnotator \\\n        -R ${params.genome_fasta} \\\n        -V $vcf \\\n        --output ${vcf.baseName}_${db_name}.vcf \\\n        --dbsnp ${params.genome_variant_annotator_db} \\\n        \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "        db_file = file(params.genome_variant_annotator_db).getBaseName()\n        db_name = db_file.replaceFirst(~/\\.[^\\.]+$/, '')\n\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        VariantAnnotator \\\n        -R ${params.genome_fasta} \\\n        -V $vcf \\\n        --output ${vcf.baseName}_${db_name}.vcf \\\n        --dbsnp ${params.genome_variant_annotator_db} \\\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "vcf",
            "vcfidx",
            "run_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK VariantAnnotator ${run_id}\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_VariantAnnotator'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "FeatureCounts": {
        "name_process": "FeatureCounts",
        "string_process": "process FeatureCounts {\n    tag {\"Subread FeatureCounts ${run_id}\"}\n    label 'Subread_2_0_0'\n    label 'Subread_2_0_0_FeatureCounts'\n    container = 'quay.io/biocontainers/subread:2.0.0--hed695b0_0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        val(run_id)\n        path(bam_file)\n        path(genome_gtf)   \n  \n    output:\n        path(\"${run_id}_${params.fc_count_type}_featureCounts.raw.txt\", emit: count_table)\n        path(\"${run_id}_${params.fc_count_type}_featureCounts.txt.summary\", emit: count_summary)\n        path(\"${run_id}_biotype_featureCounts.matrix.txt\", emit: biotype_count_table, optional: true)\n        path(\"${run_id}_biotype_featureCounts.txt.summary\", emit: biotype_count_summary, optional: true)\n\n    script:\n                                                                                                                         \n        def bam_list = bam_file.collect{ \"$it\" }.join(\" \")\n        def biotype = params.gencode ? \"gene_type\" : params.fc_group_features_type\n        def extraAttributes = params.fc_extra_attributes ? \"--extraAttributes ${params.fc_extra_attributes}\" : ''\n        def fragment_mode = !params.single_end ? \"-p\": ''\n                          \n        def featureCounts_direction = 0\n        if (params.stranded && !params.unstranded) {\n            featureCounts_direction = 1\n        } else if (params.revstranded && !params.unstranded) {\n            featureCounts_direction = 2\n        }  \n                             \n        def biotype_qc = params.biotypeQC ? \"featureCounts -a ${genome_gtf} -g ${biotype} -o ${run_id}_biotype_featureCounts.txt -s ${featureCounts_direction} ${fragment_mode} ${params.optional} ${bam_file}\": ''\n        def mod_biotype = params.biotypeQC ? \"cut -f 1,7 ${run_id}_biotype_featureCounts.txt | tail -n +2 | sed 's/\\\\_Aligned.sortedByCoord.out.bam\\\\>//g'  > ${run_id}_biotype_featureCounts.matrix.txt\": ''\n        \"\"\"\n        featureCounts -T ${task.cpus} -a ${genome_gtf} -t ${params.fc_count_type} -g ${params.fc_group_features} -o ${run_id}_${params.fc_count_type}_featureCounts.txt -s ${featureCounts_direction} ${fragment_mode} ${params.optional} ${extraAttributes} ${bam_list}   \n        tail -n +2 ${run_id}_${params.fc_count_type}_featureCounts.txt | sed 's/\\\\_Aligned.sortedByCoord.out.bam\\\\>//g' > \"${run_id}_${params.fc_count_type}_featureCounts.raw.txt\"\n        ${biotype_qc}\n        ${mod_biotype}\n        \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "        def bam_list = bam_file.collect{ \"$it\" }.join(\" \")\n        def biotype = params.gencode ? \"gene_type\" : params.fc_group_features_type\n        def extraAttributes = params.fc_extra_attributes ? \"--extraAttributes ${params.fc_extra_attributes}\" : ''\n        def fragment_mode = !params.single_end ? \"-p\": ''\n                          \n        def featureCounts_direction = 0\n        if (params.stranded && !params.unstranded) {\n            featureCounts_direction = 1\n        } else if (params.revstranded && !params.unstranded) {\n            featureCounts_direction = 2\n        }  \n                             \n        def biotype_qc = params.biotypeQC ? \"featureCounts -a ${genome_gtf} -g ${biotype} -o ${run_id}_biotype_featureCounts.txt -s ${featureCounts_direction} ${fragment_mode} ${params.optional} ${bam_file}\": ''\n        def mod_biotype = params.biotypeQC ? \"cut -f 1,7 ${run_id}_biotype_featureCounts.txt | tail -n +2 | sed 's/\\\\_Aligned.sortedByCoord.out.bam\\\\>//g'  > ${run_id}_biotype_featureCounts.matrix.txt\": ''\n        \"\"\"\n        featureCounts -T ${task.cpus} -a ${genome_gtf} -t ${params.fc_count_type} -g ${params.fc_group_features} -o ${run_id}_${params.fc_count_type}_featureCounts.txt -s ${featureCounts_direction} ${fragment_mode} ${params.optional} ${extraAttributes} ${bam_list}   \n        tail -n +2 ${run_id}_${params.fc_count_type}_featureCounts.txt | sed 's/\\\\_Aligned.sortedByCoord.out.bam\\\\>//g' > \"${run_id}_${params.fc_count_type}_featureCounts.raw.txt\"\n        ${biotype_qc}\n        ${mod_biotype}\n        \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "run_id",
            "bam_file",
            "genome_gtf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Subread FeatureCounts ${run_id}\"}",
            "label 'Subread_2_0_0'",
            "label 'Subread_2_0_0_FeatureCounts'",
            "container = 'quay.io/biocontainers/subread:2.0.0--hed695b0_0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "Quant": {
        "name_process": "Quant",
        "string_process": "process Quant {\n    tag {\"Salmon Quant ${sample_id}\"}\n    label 'Salmon_1_2_1'\n    label 'Salmon_1_2_1_Quant'\n    container = 'quay.io/biocontainers/salmon:1.2.1--hf69c8f4_0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    \n    input:\n        tuple(sample_id, path(fastq_files))\n        path(salmon_index)\n   \n    output:\n        tuple(sample_id, path(\"${sample_id}/\"), emit: quant_table)\n\n    script:\n                                                                                                                         \n        def rnastrandness = params.single_end ? 'U' : 'IU'\n        if (params.stranded && !params.unstranded) {\n            rnastrandness = params.single_end ? 'SF' : 'ISF'\n        } else if (params.revstranded && !params.unstranded) {\n            rnastrandness = params.single_end ? 'SR' : 'ISR'\n        }\n        def endedness = params.single_end ? \"-r ${fastq_files[0]}\" : \"-1 ${fastq_files[0]} -2 ${fastq_files[1]}\"\n        def unmapped = params.saveUnaligned ? \"--writeUnmappedNames\" : ''\n\n        \"\"\"\n        salmon quant --validateMappings \\\n                    ${params.optional} \\\n                    --threads ${task.cpus} \\\n                    --libType=${rnastrandness} \\\n                    --index ${salmon_index} \\\n                    ${endedness} ${unmapped} \\\n                    -o ${sample_id}              \n        \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "        def rnastrandness = params.single_end ? 'U' : 'IU'\n        if (params.stranded && !params.unstranded) {\n            rnastrandness = params.single_end ? 'SF' : 'ISF'\n        } else if (params.revstranded && !params.unstranded) {\n            rnastrandness = params.single_end ? 'SR' : 'ISR'\n        }\n        def endedness = params.single_end ? \"-r ${fastq_files[0]}\" : \"-1 ${fastq_files[0]} -2 ${fastq_files[1]}\"\n        def unmapped = params.saveUnaligned ? \"--writeUnmappedNames\" : ''\n\n        \"\"\"\n        salmon quant --validateMappings \\\n                    ${params.optional} \\\n                    --threads ${task.cpus} \\\n                    --libType=${rnastrandness} \\\n                    --index ${salmon_index} \\\n                    ${endedness} ${unmapped} \\\n                    -o ${sample_id}              \n        \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "fastq_files",
            "sample_id",
            "salmon_index"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Salmon Quant ${sample_id}\"}",
            "label 'Salmon_1_2_1'",
            "label 'Salmon_1_2_1_Quant'",
            "container = 'quay.io/biocontainers/salmon:1.2.1--hf69c8f4_0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "RSeQC": {
        "name_process": "RSeQC",
        "string_process": "\nprocess RSeQC {\n    tag {\"RSeQC ${sample_id}\"}\n    label 'RSeQC_3_0_1'\n    container = \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\"\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n        path(genome_bed12)\n\n    output:\n        tuple(sample_id, path(\"*.{txt,pdf,r,xls}\"), emit: qc_files)\n\n    script:\n                                                                                                                         \n        \"\"\"\n        inner_distance.py -i ${bam_file} -o ${bam_file.baseName}.rseqc -r ${genome_bed12}\n        read_distribution.py -i ${bam_file} -r ${genome_bed12} > ${bam_file.baseName}.read_distribution.txt\n        infer_experiment.py -i ${bam_file} -r ${genome_bed12} > ${bam_file.baseName}.infer_experiment.txt\n        junction_annotation.py -i ${bam_file} -o ${bam_file.baseName}.rseqc -r ${genome_bed12}\n        junction_saturation.py -i ${bam_file} -o ${bam_file.baseName}.rseqc -r ${genome_bed12} 2> ${bam_file.baseName}.junction_annotation_log.txt\n        read_duplication.py -i ${bam_file} -o ${bam_file.baseName}.read_duplication\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n        inner_distance.py -i ${bam_file} -o ${bam_file.baseName}.rseqc -r ${genome_bed12}\n        read_distribution.py -i ${bam_file} -r ${genome_bed12} > ${bam_file.baseName}.read_distribution.txt\n        infer_experiment.py -i ${bam_file} -r ${genome_bed12} > ${bam_file.baseName}.infer_experiment.txt\n        junction_annotation.py -i ${bam_file} -o ${bam_file.baseName}.rseqc -r ${genome_bed12}\n        junction_saturation.py -i ${bam_file} -o ${bam_file.baseName}.rseqc -r ${genome_bed12} 2> ${bam_file.baseName}.junction_annotation_log.txt\n        read_duplication.py -i ${bam_file} -o ${bam_file.baseName}.read_duplication\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id",
            "genome_bed12"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"RSeQC ${sample_id}\"}",
            "label 'RSeQC_3_0_1'",
            "container = \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\" shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "RSeQC_TIN": {
        "name_process": "RSeQC_TIN",
        "string_process": "\nprocess RSeQC_TIN {\n    tag {\"RSeQC ${sample_id}\"}\n    label 'RSeQC_3_0_1'\n    label 'RSeQC_3_0_1_TIN'\n    container = \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\"\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n        path(genome_bed12)\n\n    output:\n        tuple(sample_id, path(\"*.{txt,xls}\"), emit: tin_stats)\n\n    script:\n                                                                                                                         \n        \"\"\"\n        tin.py -i ${bam_file} -r ${genome_bed12}\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        tin.py -i ${bam_file} -r ${genome_bed12}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id",
            "genome_bed12"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"RSeQC ${sample_id}\"}",
            "label 'RSeQC_3_0_1'",
            "label 'RSeQC_3_0_1_TIN'",
            "container = \"quay.io/biocontainers/rseqc:3.0.1--py37h516909a_1\" shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "View_bcf_vcf": {
        "name_process": "View_bcf_vcf",
        "string_process": "process View_bcf_vcf {\n                                                                                                      \n    tag {\"BCFtools View_BCF_VCF ${sample_id}\"}\n    label 'BCFtools_1_10_2'\n    label 'BCFtools_1_10_2_View_BCF_VCF'\n    container = 'quay.io/biocontainers/bcftools:1.10.2--hd2cd319_0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n    tuple sample_id, file(bcf_file)\n\n    output:\n    tuple sample_id, file(\"${bcf_file.baseName}.vcf\")\n\n    script:\n    \"\"\"\n    bcftools view ${params.optional} ${bcf_file} > ${bcf_file.baseName}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    bcftools view ${params.optional} ${bcf_file} > ${bcf_file.baseName}.vcf\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bcf_file",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"BCFtools View_BCF_VCF ${sample_id}\"}",
            "label 'BCFtools_1_10_2'",
            "label 'BCFtools_1_10_2_View_BCF_VCF'",
            "container = 'quay.io/biocontainers/bcftools:1.10.2--hd2cd319_0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "ClipOverlap": {
        "name_process": "ClipOverlap",
        "string_process": "process ClipOverlap {\n    tag {\"BamUtil ClipOverlap ${sample_id} - ${rg_id}\"}\n    label 'BamUtil_1_0_14'\n    label 'BamUtil_1_0_14_ClipOverlap'\n    container = 'quay.io/biocontainers/bamutil:1.0.14--h635df5c_3'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n    tuple sample_id, rg_id, file(bam_file), file(bai_file)\n\n    output:\n    tuple sample_id, rg_id, file(\"${bam_file.baseName}.clipped.bam\")\n\n    script:\n    \"\"\"\n    bam clipOverlap --in ${bam_file} --out ${bam_file.baseName}.clipped.bam\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    bam clipOverlap --in ${bam_file} --out ${bam_file.baseName}.clipped.bam\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BaMM"
        ],
        "tools_url": [
            "https://bio.tools/bamm"
        ],
        "tools_dico": [
            {
                "name": "BaMM",
                "uri": "https://bio.tools/bamm",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip sequencing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0239",
                                    "term": "Sequence motif recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Sequence motif discovery"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0239",
                                    "term": "Motif scanning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0239",
                                    "term": "Sequence signature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0239",
                                    "term": "Sequence signature detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0238",
                                    "term": "Motif discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "de-novo motif discovery and regulatory sequence analysis.\nDiscovery of regulatory motifs with higher-order Bayesian Markov Models (BaMMs)",
                "homepage": "https://bammmotif.mpibpc.mpg.de"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"BamUtil ClipOverlap ${sample_id} - ${rg_id}\"}",
            "label 'BamUtil_1_0_14'",
            "label 'BamUtil_1_0_14_ClipOverlap'",
            "container = 'quay.io/biocontainers/bamutil:1.0.14--h635df5c_3' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "SelectVariantsSample": {
        "name_process": "SelectVariantsSample",
        "string_process": "process SelectVariantsSample {\n    tag {\"GATK SelectVariantsSample ${analysis_id} - ${sample_id}\"}\n    label 'GATK_3_8_1_0_gf15c1c3ef'\n    label 'GATK_3_8_1_0_gf15c1c3ef_SelectVariantsSample'\n    container = 'quay.io/biocontainers/gatk:3.8--py27_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(analysis_id, path(vcf_file), path(vcf_idx_file), sample_id)\n\n    output:\n        tuple(sample_id, path(\"${sample_id}_${vcf_file.baseName}.vcf\"), path(\"${sample_id}_${vcf_file.baseName}.vcf.idx\"), emit: vcf_file)\n\n    script:\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T SelectVariants --reference_sequence ${params.genome} -V ${vcf_file} --out ${sample_id}_${vcf_file.baseName}.vcf -sn ${sample_id}\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T SelectVariants --reference_sequence ${params.genome} -V ${vcf_file} --out ${sample_id}_${vcf_file.baseName}.vcf -sn ${sample_id}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_file",
            "vcf_idx_file",
            "analysis_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK SelectVariantsSample ${analysis_id} - ${sample_id}\"}",
            "label 'GATK_3_8_1_0_gf15c1c3ef'",
            "label 'GATK_3_8_1_0_gf15c1c3ef_SelectVariantsSample'",
            "container = 'quay.io/biocontainers/gatk:3.8--py27_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "EstimateLibraryComplexity": {
        "name_process": "EstimateLibraryComplexity",
        "string_process": "process EstimateLibraryComplexity {\n    tag {\"PICARD EstimateLibraryComplexity ${sample_id}\"}\n    label 'PICARD_2_22_0'\n    label 'PICARD_2_22_0_EstimateLibraryComplexity'\n    container = 'quay.io/biocontainers/picard:2.22.0--0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n\n    output:\n        path(\"${sample_id}.LibraryComplexity.txt\", emit: txt_file)\n\n    script:\n        \"\"\"\n        picard -Xmx${task.memory.toGiga()-4}G EstimateLibraryComplexity TMP_DIR=\\$TMPDIR INPUT=${bam_file} OUTPUT=${sample_id}.LibraryComplexity.txt ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        picard -Xmx${task.memory.toGiga()-4}G EstimateLibraryComplexity TMP_DIR=\\$TMPDIR INPUT=${bam_file} OUTPUT=${sample_id}.LibraryComplexity.txt ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"PICARD EstimateLibraryComplexity ${sample_id}\"}",
            "label 'PICARD_2_22_0'",
            "label 'PICARD_2_22_0_EstimateLibraryComplexity'",
            "container = 'quay.io/biocontainers/picard:2.22.0--0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "Markdup": {
        "name_process": "Markdup",
        "string_process": "process Markdup {\n    tag {\"Sambamba Markdup ${sample_id}\"}\n    label 'Sambamba_0_7_0'\n    label 'Sambamba_0_7_0_Markdup'\n    container = 'quay.io/biocontainers/sambamba:0.7.0--h89e63da_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, rg_id, path(bam_file), path(bai_file))\n    output:\n        tuple(sample_id, rg_id, path(\"${bam_file.baseName}.markdup.bam\"), path(\"${bam_file.baseName}.markdup.bam.bai\"), emit: bam_file)\n\n    script:\n        \"\"\"\n        sambamba markdup -t ${task.cpus} ${bam_file} ${bam_file.baseName}.markdup.bam\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        sambamba markdup -t ${task.cpus} ${bam_file} ${bam_file.baseName}.markdup.bam\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Sambamba"
        ],
        "tools_url": [
            "https://bio.tools/sambamba"
        ],
        "tools_dico": [
            {
                "name": "Sambamba",
                "uri": "https://bio.tools/sambamba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a high performance modern robust and fast tool (and library), written in the D programming language, for working with SAM, BAM and CRAM formats.",
                "homepage": "http://www.open-bio.org/wiki/Sambamba"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Sambamba Markdup ${sample_id}\"}",
            "label 'Sambamba_0_7_0'",
            "label 'Sambamba_0_7_0_Markdup'",
            "container = 'quay.io/biocontainers/sambamba:0.7.0--h89e63da_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MarkdupMerge": {
        "name_process": "MarkdupMerge",
        "string_process": "\nprocess MarkdupMerge {\n    tag {\"Sambamba MarkdupMerge ${sample_id}\"}\n    label 'Sambamba_0_7_0'\n    label 'Sambamba_0_7_0_MarkdupMerge'\n    container = 'quay.io/biocontainers/sambamba:0.7.0--h89e63da_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_files))\n\n    output:\n        tuple(sample_id, path(\"${sample_id}.markdup.bam\"), path(\"${sample_id}.markdup.bam.bai\"), emit: bam_file)\n\n    script:\n        \"\"\"\n        sambamba markdup -t ${task.cpus} ${bam_files} ${sample_id}.markdup.bam\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        sambamba markdup -t ${task.cpus} ${bam_files} ${sample_id}.markdup.bam\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Sambamba"
        ],
        "tools_url": [
            "https://bio.tools/sambamba"
        ],
        "tools_dico": [
            {
                "name": "Sambamba",
                "uri": "https://bio.tools/sambamba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a high performance modern robust and fast tool (and library), written in the D programming language, for working with SAM, BAM and CRAM formats.",
                "homepage": "http://www.open-bio.org/wiki/Sambamba"
            }
        ],
        "inputs": [
            "bam_files",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Sambamba MarkdupMerge ${sample_id}\"}",
            "label 'Sambamba_0_7_0'",
            "label 'Sambamba_0_7_0_MarkdupMerge'",
            "container = 'quay.io/biocontainers/sambamba:0.7.0--h89e63da_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MergeFastqLanes": {
        "name_process": "MergeFastqLanes",
        "string_process": "process MergeFastqLanes {\n    tag {\"MergeFastqLanes ${sample_id} - ${rg_id}\"}\n    label 'MergeFastqLanes'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, rg_id, path(fastqs))\n\n    output:\n        tuple(sample_id, rg_id, path(\"${sample_id}_${barcode}_merged_*.fastq.gz\"), emit: fastqs_merged)\n\n\n    script:\n        barcode = rg_id.split('_')[1]\n        def R1_pattern=\"${sample_id}_*_S*_L00*_R1_001*.fastq.gz\"\n        def R2_pattern=\"${sample_id}_*_S*_L00*_R2_001*.fastq.gz\"\n        if (params.single_end) {\n            \"\"\"\n            cat \\$( ls ${R1_pattern} | sort | paste \\$(printf \"%0.s- \" \\$(seq 1 \\$( ls ${R1_pattern} | wc -l)))) > ${sample_id}_${barcode}_merged_R1.fastq.gz\n            \"\"\"\n        } else { \n            \"\"\"\n            cat \\$( ls ${R1_pattern} | sort | paste \\$(printf \"%0.s- \" \\$(seq 1 \\$( ls ${R1_pattern} | wc -l)))) > ${sample_id}_${barcode}_merged_R1.fastq.gz\n            cat \\$( ls ${R2_pattern} | sort | paste \\$(printf \"%0.s- \" \\$(seq 1 \\$( ls ${R2_pattern} | wc -l)))) > ${sample_id}_${barcode}_merged_R2.fastq.gz \n            \"\"\"\n        }\n}",
        "nb_lignes_process": 25,
        "string_script": "        barcode = rg_id.split('_')[1]\n        def R1_pattern=\"${sample_id}_*_S*_L00*_R1_001*.fastq.gz\"\n        def R2_pattern=\"${sample_id}_*_S*_L00*_R2_001*.fastq.gz\"\n        if (params.single_end) {\n            \"\"\"\n            cat \\$( ls ${R1_pattern} | sort | paste \\$(printf \"%0.s- \" \\$(seq 1 \\$( ls ${R1_pattern} | wc -l)))) > ${sample_id}_${barcode}_merged_R1.fastq.gz\n            \"\"\"\n        } else { \n            \"\"\"\n            cat \\$( ls ${R1_pattern} | sort | paste \\$(printf \"%0.s- \" \\$(seq 1 \\$( ls ${R1_pattern} | wc -l)))) > ${sample_id}_${barcode}_merged_R1.fastq.gz\n            cat \\$( ls ${R2_pattern} | sort | paste \\$(printf \"%0.s- \" \\$(seq 1 \\$( ls ${R2_pattern} | wc -l)))) > ${sample_id}_${barcode}_merged_R2.fastq.gz \n            \"\"\"\n        }",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "genBaRcode"
        ],
        "tools_url": [
            "https://bio.tools/genBaRcode"
        ],
        "tools_dico": [
            {
                "name": "genBaRcode",
                "uri": "https://bio.tools/genBaRcode",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3382",
                            "term": "Imaging"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "a comprehensive R package for genetic barcode analysis.\n\nAnalysis and Visualization Tools for Genetic Barcode Data.\n\nIndex of /web/packages/genBaRcode/vignettes.\n\nProvides the necessary functions to identify and extract a selection of already available barcode constructs (Cornils, K. et al. (2014) <doi:10.1093/nar/gku081>) and freely choosable barcode designs from next generation sequence (NGS) data. Furthermore, it offers the possibility to account for sequence errors, the calculation of barcode similarities and provides a variety of visualisation tools (Thielecke, L. et al. (2017) <doi:10.1038/srep43249>)",
                "homepage": "https://cran.r-project.org/package=genBaRcode"
            }
        ],
        "inputs": [
            "fastqs",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"MergeFastqLanes ${sample_id} - ${rg_id}\"}",
            "label 'MergeFastqLanes' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "Merge": {
        "name_process": "Merge",
        "string_process": "process Merge {\n    tag {\"Sambamba Merge ${sample_id}\"}\n    label 'Sambamba_0_7_0'\n    label 'Sambamba_0_7_0_Merge'\n    container = 'quay.io/biocontainers/sambamba:0.7.0--h89e63da_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_files), path(bai_files))\n\n    output:\n        tuple(sample_id, path(\"${sample_id}.bam\"), path(\"${sample_id}.bam.bai\"), emit: bam_file)\n\n    script:\n        \"\"\"\n        sambamba merge -t ${task.cpus} ${sample_id}.bam ${bam_files}\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        sambamba merge -t ${task.cpus} ${sample_id}.bam ${bam_files}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Sambamba"
        ],
        "tools_url": [
            "https://bio.tools/sambamba"
        ],
        "tools_dico": [
            {
                "name": "Sambamba",
                "uri": "https://bio.tools/sambamba",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This tool is a high performance modern robust and fast tool (and library), written in the D programming language, for working with SAM, BAM and CRAM formats.",
                "homepage": "http://www.open-bio.org/wiki/Sambamba"
            }
        ],
        "inputs": [
            "bam_files",
            "bai_files",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Sambamba Merge ${sample_id}\"}",
            "label 'Sambamba_0_7_0'",
            "label 'Sambamba_0_7_0_Merge'",
            "container = 'quay.io/biocontainers/sambamba:0.7.0--h89e63da_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CountUMIFamilies": {
        "name_process": "CountUMIFamilies",
        "string_process": "process CountUMIFamilies {\n    tag {\"python CountUMIFamilies ${sample_id} \"}\n    label 'python_2_7_10'\n    label 'python_2_7_10_CountUMIFamilies'\n    container = 'library://sawibo/default/bioinf-tools:idt-umi-dependencies'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple (sample_id, flowcell, machine, run_nr, path(bam))\n\n    output:\n        path(\"${sample_id}_${flowcell}.family_counts\", emit:family_counts)\n\n    script:\n        \"\"\"\n        #!/gnu/store/vbvjlhhx6y64fvbxh2604sqw9shn02wq-python2-2.7.16R/bin/python\n\n        import sys\n        import pysam\n        import re\n\n        bam = \"${bam}\"\n        out = \"${sample_id}_${flowcell}.family_counts\"\n        total_read_nr = 0\n        filtered_read_nr = 0\n\n        family_counts = {}\n        with pysam.AlignmentFile(bam, \"r\", check_sq=False) as b:\n         for read in b:\n\n          if read.flag == 77:\n           if read.get_tag('cD') not in family_counts:\n            family_counts[ int(read.get_tag('cD')) ] = 0\n           family_counts[ int(read.get_tag('cD')) ]+= 1\n\n           filtered_read_nr += 1\n           total_read_nr += int(read.get_tag('cD'))\n\n        with open(out, 'w') as o:\n         o.write('Raw fragment count\\\\tHigh quality fragment count\\\\n')\n         o.write(\"{0}\\\\t{1}\\\\n\\\\n\".format(total_read_nr, filtered_read_nr))\n         o.write('UMI Family Size\\\\tOccurrence\\\\n')\n         for c in sorted(family_counts, key=family_counts.get):\n          o.write(\"{0}\\\\t{1}\\\\n\".format(c, family_counts[c]))\n        \"\"\"\n\n}",
        "nb_lignes_process": 45,
        "string_script": "        \"\"\"\n        #!/gnu/store/vbvjlhhx6y64fvbxh2604sqw9shn02wq-python2-2.7.16R/bin/python\n\n        import sys\n        import pysam\n        import re\n\n        bam = \"${bam}\"\n        out = \"${sample_id}_${flowcell}.family_counts\"\n        total_read_nr = 0\n        filtered_read_nr = 0\n\n        family_counts = {}\n        with pysam.AlignmentFile(bam, \"r\", check_sq=False) as b:\n         for read in b:\n\n          if read.flag == 77:\n           if read.get_tag('cD') not in family_counts:\n            family_counts[ int(read.get_tag('cD')) ] = 0\n           family_counts[ int(read.get_tag('cD')) ]+= 1\n\n           filtered_read_nr += 1\n           total_read_nr += int(read.get_tag('cD'))\n\n        with open(out, 'w') as o:\n         o.write('Raw fragment count\\\\tHigh quality fragment count\\\\n')\n         o.write(\"{0}\\\\t{1}\\\\n\\\\n\".format(total_read_nr, filtered_read_nr))\n         o.write('UMI Family Size\\\\tOccurrence\\\\n')\n         for c in sorted(family_counts, key=family_counts.get):\n          o.write(\"{0}\\\\t{1}\\\\n\".format(c, family_counts[c]))\n        \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"python CountUMIFamilies ${sample_id} \"}",
            "label 'python_2_7_10'",
            "label 'python_2_7_10_CountUMIFamilies'",
            "container = 'library://sawibo/default/bioinf-tools:idt-umi-dependencies' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CollectWgsMetrics": {
        "name_process": "CollectWgsMetrics",
        "string_process": "process CollectWgsMetrics {\n    tag {\"PICARD CollectWgsMetrics ${sample_id}\"}\n    label 'PICARD_2_22_0'\n    label 'PICARD_2_22_0_CollectWgsMetrics'\n    container = 'quay.io/biocontainers/picard:2.22.0--0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n\n    output:\n        path(\"${sample_id}.wgs_metrics.txt\", emit: txt_file)\n\n    script:\n        \"\"\"\n        picard -Xmx${task.memory.toGiga()-4}G CollectWgsMetrics TMP_DIR=\\$TMPDIR R=${params.genome} INPUT=${bam_file} OUTPUT=${sample_id}.wgs_metrics.txt ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        picard -Xmx${task.memory.toGiga()-4}G CollectWgsMetrics TMP_DIR=\\$TMPDIR R=${params.genome} INPUT=${bam_file} OUTPUT=${sample_id}.wgs_metrics.txt ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"PICARD CollectWgsMetrics ${sample_id}\"}",
            "label 'PICARD_2_22_0'",
            "label 'PICARD_2_22_0_CollectWgsMetrics'",
            "container = 'quay.io/biocontainers/picard:2.22.0--0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "SortBam": {
        "name_process": "SortBam",
        "string_process": "process SortBam {\n    tag {\"FGBIO SortBam ${sample_id}\"}\n    label 'FGBIO_1_1_0'\n    label 'FGBIO_1_1_0_SortBam'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:idt-umi-dependencies'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (sample_id, flowcell, machine, run_nr, path(bam))\n\n    output:\n        tuple (sample_id, flowcell, machine, run_nr, path(\"${sample_id}.u.grouped.sorted.bam\"), emit: sorted_bams)\n\n    script:\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}g -jar /bin/fgbio-1.1.0.jar --tmp-dir \\$PWD SortBam \\\n        --input ${bam} \\\n        --output ${sample_id}.u.grouped.sorted.bam \\\n        ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}g -jar /bin/fgbio-1.1.0.jar --tmp-dir \\$PWD SortBam \\\n        --input ${bam} \\\n        --output ${sample_id}.u.grouped.sorted.bam \\\n        ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"FGBIO SortBam ${sample_id}\"}",
            "label 'FGBIO_1_1_0'",
            "label 'FGBIO_1_1_0_SortBam'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:idt-umi-dependencies' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "View": {
        "name_process": "View",
        "string_process": "process View {\n    tag {\"Samtools View ${sample_id}\"}\n    label 'Samtools_1_10'\n    label 'Samtools_1_10_View'\n    container = 'quay.io/biocontainers/samtools:1.10--h9402c20_2'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n\n    output:\n        tuple(sample_id, path(\"${bam_file.baseName}.sam\"), emit: sam_file)\n\n    script:\n        \"\"\"\n        samtools view ${params.optional} ${bam_file} ${params.region} > ${bam_file.baseName}.sam\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        samtools view ${params.optional} ${bam_file} ${params.region} > ${bam_file.baseName}.sam\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Samtools View ${sample_id}\"}",
            "label 'Samtools_1_10'",
            "label 'Samtools_1_10_View'",
            "container = 'quay.io/biocontainers/samtools:1.10--h9402c20_2' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MPileup": {
        "name_process": "MPileup",
        "string_process": "process MPileup {\n                                                                                             \n    tag {\"Samtools MPileup ${sample_id}\"}\n    label 'Samtools_1_10'\n    label 'Samtools_1_10_MPileup'\n    container = 'quay.io/biocontainers/samtools:1.10--h9402c20_2'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n\n    output:\n        tuple(sample_id, path(\"${bam_file.baseName}.pileup\"), emit: pileup)\n\n    script:\n        \"\"\"\n        samtools mpileup ${params.optional} -f ${params.genome} ${bam_file} > ${bam_file.baseName}.pileup\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        samtools mpileup ${params.optional} -f ${params.genome} ${bam_file} > ${bam_file.baseName}.pileup\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Samtools MPileup ${sample_id}\"}",
            "label 'Samtools_1_10'",
            "label 'Samtools_1_10_MPileup'",
            "container = 'quay.io/biocontainers/samtools:1.10--h9402c20_2' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MPileup_bcf": {
        "name_process": "MPileup_bcf",
        "string_process": "\nprocess MPileup_bcf {\n                                                                                          \n    tag {\"Samtools MPileup_bcf ${sample_id}\"}\n    label 'Samtools_1_10'\n    label 'Samtools_1_10_MPileup_bcf'\n    container = 'quay.io/biocontainers/samtools:1.10--h9402c20_2'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n\n    output:\n        tuple(sample_id, path(\"${bam_file.baseName}.bcf\"), emit: bcf)\n\n    script:\n        \"\"\"\n        samtools mpileup ${params.optional} -u -f ${params.genome} ${bam_file} > ${bam_file.baseName}.bcf\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        samtools mpileup ${params.optional} -u -f ${params.genome} ${bam_file} > ${bam_file.baseName}.bcf\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Samtools MPileup_bcf ${sample_id}\"}",
            "label 'Samtools_1_10'",
            "label 'Samtools_1_10_MPileup_bcf'",
            "container = 'quay.io/biocontainers/samtools:1.10--h9402c20_2' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "GatherBaseRecalibrationTables": {
        "name_process": "GatherBaseRecalibrationTables",
        "string_process": "\nprocess GatherBaseRecalibrationTables {\n    tag {\"GATK GatherBaseRecalibrationTables ${sample_id}\"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_GatherBaseRecalibrationTables'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (sample_id, path(bqsr_tables))\n\n    output:\n        tuple (sample_id, path(\"${sample_id}.recal.table\"), emit : gathered_recalibration_tables)\n\n    script:\n        tables = bqsr_tables.join(' -I ')\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        GatherBQSRReports \\\n        -I $tables \\\n        --output ${sample_id}.recal.table \\\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        tables = bqsr_tables.join(' -I ')\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        GatherBQSRReports \\\n        -I $tables \\\n        --output ${sample_id}.recal.table \\\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "ObjTables",
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/objtables",
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "ObjTables",
                "uri": "https://bio.tools/objtables",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3366",
                            "term": "Data integration and warehousing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0605",
                            "term": "Informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3365",
                            "term": "Data architecture, analysis and design"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0605",
                            "term": "Knowledge management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0605",
                            "term": "Information science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0605",
                            "term": "Information management"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0336",
                                    "term": "Format validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2424",
                                    "term": "Comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3434",
                                    "term": "Conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2928",
                                    "term": "Alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0336",
                                    "term": "File format validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2928",
                                    "term": "Alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2928",
                                    "term": "Alignment generation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2526",
                                "term": "Text data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2526",
                                "term": "Text data"
                            }
                        ]
                    }
                ],
                "description": "ObjTables is a toolkit for creating re-usable datasets that are both human and machine-readable, combining the ease of spreadsheets (e.g., Excel workbooks) with the rigor of schemas (classes, their attributes, the type of each attribute, and the possible relationships between instances of classes).\n\nObjTables consists of a format for describing schemas for spreadsheets, numerous data types for science, a syntax for indicating the class and attribute represented by each table and column in a workbook, and software for using schemas to rigorously validate, merge, split, compare, and revision datasets.\n\nObjTables is ideal for supplementary materials of journal article, as well as for emerging domains which need to quickly build new formats for new types of data and associated software with minimal effort.",
                "homepage": "https://www.objtables.org"
            },
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "bqsr_tables",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK GatherBaseRecalibrationTables ${sample_id}\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_GatherBaseRecalibrationTables'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CollectWGSMetrics": {
        "name_process": "CollectWGSMetrics",
        "string_process": "\nprocess CollectWGSMetrics {\n  tag {\"GATK CollectWGSMetrics ${sample_id}\"}\n  label 'GATK_4_1_3_0'\n  label 'GATK_4_1_3_0_CollectWGSMetrics'\n  clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n  container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n  shell = ['/bin/bash', '-euo', 'pipefail']\n  input:\n    tuple (sample_id, path(bam))\n\n  output:\n    path (\"${sample_id}.wgs_metrics.txt\" , emit: wgs_metrics)\n\n  script:\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n    CollectWgsMetrics \\\n    -I $bam \\\n    -O ${sample_id}.wgs_metrics.txt \\\n    -R ${params.genome_fasta} \\\n    ${params.optional}\n    sed -i 's/picard\\\\.analysis\\\\.WgsMetrics/picard\\\\.analysis\\\\.CollectWgsMetrics\\\\\\$WgsMetrics/' ${sample_id}.wgs_metrics.txt\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n    CollectWgsMetrics \\\n    -I $bam \\\n    -O ${sample_id}.wgs_metrics.txt \\\n    -R ${params.genome_fasta} \\\n    ${params.optional}\n    sed -i 's/picard\\\\.analysis\\\\.WgsMetrics/picard\\\\.analysis\\\\.CollectWgsMetrics\\\\\\$WgsMetrics/' ${sample_id}.wgs_metrics.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "bam",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK CollectWGSMetrics ${sample_id}\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_CollectWGSMetrics'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MakeKaryotype": {
        "name_process": "MakeKaryotype",
        "string_process": "process MakeKaryotype {\n    tag {\"Control Freec MakeKaryotype ${sample_id}\"}\n    label 'ControlFreec_11_5'\n    label 'ControlFreec_11_5_MakeKaryotype'\n    container = 'library://sawibo/default/bioinf-tools:freec11.5'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(ratio_file), path(cnv_file))\n\n    output:\n        tuple(sample_id, path(\"*_karyotype.pdf\"), emit: karyotype_pdf)\n\n    script:\n        \"\"\"\n        cat /bin/makeKaryotype.R | R --slave --args ${params.ploidy} ${params.maxlevel} ${params.telocentromeric} ${ratio_file}\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        cat /bin/makeKaryotype.R | R --slave --args ${params.ploidy} ${params.maxlevel} ${params.telocentromeric} ${ratio_file}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ratio_file",
            "cnv_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Control Freec MakeKaryotype ${sample_id}\"}",
            "label 'ControlFreec_11_5'",
            "label 'ControlFreec_11_5_MakeKaryotype'",
            "container = 'library://sawibo/default/bioinf-tools:freec11.5' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "RealignerTargetCreator": {
        "name_process": "RealignerTargetCreator",
        "string_process": "process RealignerTargetCreator {\n    tag {\"GATK RealignerTargetCreator ${sample_id} - ${chr}\"}\n    label 'GATK_3_8_1_0_gf15c1c3ef'\n    label 'GATK_3_8_1_0_gf15c1c3ef_RealignerTargetCreator'\n    container = 'quay.io/biocontainers/gatk:3.8--py27_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file), chr)\n\n    output:\n        tuple(sample_id, chr, path(\"${bam_file.baseName}.target_intervals.${chr}.list\"), emit: interval_list)\n\n    script:\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar $params.gatk_path -T RealignerTargetCreator \\\n        --reference_sequence ${params.genome} \\\n        --input_file ${bam_file} \\\n        --intervals ${chr} \\\n        --out ${bam_file.baseName}.target_intervals.${chr}.list \\\n        ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar $params.gatk_path -T RealignerTargetCreator \\\n        --reference_sequence ${params.genome} \\\n        --input_file ${bam_file} \\\n        --intervals ${chr} \\\n        --out ${bam_file.baseName}.target_intervals.${chr}.list \\\n        ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK RealignerTargetCreator ${sample_id} - ${chr}\"}",
            "label 'GATK_3_8_1_0_gf15c1c3ef'",
            "label 'GATK_3_8_1_0_gf15c1c3ef_RealignerTargetCreator'",
            "container = 'quay.io/biocontainers/gatk:3.8--py27_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CreateSequenceDictionary": {
        "name_process": "CreateSequenceDictionary",
        "string_process": "process CreateSequenceDictionary  {\n    tag {\"PICARD CreateSequenceDictionary\"}\n    label 'PICARD_2_22_0'\n    label 'PICARD_2_22_0_CreateSequenceDictionary'\n    container = 'quay.io/biocontainers/picard:2.22.0--0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        path(genome_fasta)\n\n    output:\n        path(\"${genome_fasta.baseName}.dict\", emit: genome_dict)\n\n    script:\n        \"\"\"\n        picard -Xmx${task.memory.toGiga()-4}G CreateSequenceDictionary REFERENCE=${genome_fasta} OUTPUT=${genome_fasta.baseName}.dict\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        picard -Xmx${task.memory.toGiga()-4}G CreateSequenceDictionary REFERENCE=${genome_fasta} OUTPUT=${genome_fasta.baseName}.dict\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "genome_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"PICARD CreateSequenceDictionary\"}",
            "label 'PICARD_2_22_0'",
            "label 'PICARD_2_22_0_CreateSequenceDictionary'",
            "container = 'quay.io/biocontainers/picard:2.22.0--0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "SNPSiftDbnsfp": {
        "name_process": "SNPSiftDbnsfp",
        "string_process": "\nprocess SNPSiftDbnsfp {\n    tag {\"SNPEff SNPSiftDbnsfp ${run_id}\"}\n    label 'SNPEff_4_3t'\n    label 'SNPEff_4_3t_SNPSiftDbnsfp'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:snpeff-4.3t'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (run_id, path(vcf), path(vcfidx))\n\n    output:\n        tuple (run_id, path(\"${vcf.baseName}_dbnsfp.vcf\"), path(\"${vcf.baseName}_dbnsfp.vcf.idx\"), emit : snpsift_dbnsfp_vcfs)\n\n    script:\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR -jar /bin/SnpSift.jar dbnsfp -v \\\n        ${params.optional} \\\n        -db ${params.genome_dbnsfp} $vcf > ${vcf.baseName}_dbnsfp.vcf\n\n        java -Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR -jar /bin/igvtools.jar index ${vcf.baseName}_dbnsfp.vcf\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR -jar /bin/SnpSift.jar dbnsfp -v \\\n        ${params.optional} \\\n        -db ${params.genome_dbnsfp} $vcf > ${vcf.baseName}_dbnsfp.vcf\n\n        java -Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR -jar /bin/igvtools.jar index ${vcf.baseName}_dbnsfp.vcf\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf",
            "vcfidx",
            "run_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"SNPEff SNPSiftDbnsfp ${run_id}\"}",
            "label 'SNPEff_4_3t'",
            "label 'SNPEff_4_3t_SNPSiftDbnsfp'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:snpeff-4.3t' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CombineVariants": {
        "name_process": "CombineVariants",
        "string_process": "process CombineVariants {\n    tag {\"GATK CombineVariants ${analysis_id}\"}\n    label 'GATK_3_8_1_0_gf15c1c3ef'\n    label 'GATK_3_8_1_0_gf15c1c3ef_CombineVariants'\n    container = 'quay.io/biocontainers/gatk:3.8--py27_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(analysis_id, path(vcf_files), path(vcf_idx_files))\n\n    output:\n        tuple(analysis_id, path(\"${analysis_id}.vcf\"), path(\"${analysis_id}.vcf.idx\"), emit:vcf_file)\n\n    script:\n        def input_files = vcf_files.collect{\"$it\"}.join(\" -V \")\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T CombineVariants --reference_sequence ${params.genome} -V ${input_files} --out ${analysis_id}.vcf ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        def input_files = vcf_files.collect{\"$it\"}.join(\" -V \")\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T CombineVariants --reference_sequence ${params.genome} -V ${input_files} --out ${analysis_id}.vcf ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_files",
            "vcf_idx_files",
            "analysis_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK CombineVariants ${analysis_id}\"}",
            "label 'GATK_3_8_1_0_gf15c1c3ef'",
            "label 'GATK_3_8_1_0_gf15c1c3ef_CombineVariants'",
            "container = 'quay.io/biocontainers/gatk:3.8--py27_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CombineVariantsGVCF": {
        "name_process": "CombineVariantsGVCF",
        "string_process": "\nprocess CombineVariantsGVCF {\n    tag {\"GATK CombineVariantsGVCF ${sample_id}\"}\n    label 'GATK_3_8_1_0_gf15c1c3ef'\n    label 'GATK_3_8_1_0_gf15c1c3ef_CombineVariantsGVCF'\n    container = 'quay.io/biocontainers/gatk:3.8--py27_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(vcf_files), path(vcf_idx_files))\n\n    output:\n        tuple(sample_id, path(\"${sample_id}.g.vcf\"), path(\"${sample_id}.g.vcf.idx\"), emit:vcf_file)\n\n    script:\n        def input_files = vcf_files.collect{\"$it\"}.join(\" -V \")\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T CombineVariants --reference_sequence ${params.genome} -V ${input_files} --out ${sample_id}.g.vcf ${params.optional}\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        def input_files = vcf_files.collect{\"$it\"}.join(\" -V \")\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T CombineVariants --reference_sequence ${params.genome} -V ${input_files} --out ${sample_id}.g.vcf ${params.optional}\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_files",
            "vcf_idx_files",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK CombineVariantsGVCF ${sample_id}\"}",
            "label 'GATK_3_8_1_0_gf15c1c3ef'",
            "label 'GATK_3_8_1_0_gf15c1c3ef_CombineVariantsGVCF'",
            "container = 'quay.io/biocontainers/gatk:3.8--py27_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "BaseRecalibrator": {
        "name_process": "BaseRecalibrator",
        "string_process": "process BaseRecalibrator {\n    tag {\"GATK BaseRecalibrator ${sample_id} - ${chr}\"}\n    label 'GATK_3_8_1_0_gf15c1c3ef'\n    label 'GATK_3_8_1_0_gf15c1c3ef_BaseRecalibrator'\n    container = 'quay.io/biocontainers/gatk:3.8--py27_1'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file), chr)\n\n    output:\n        tuple(sample_id, path(\"${bam_file.baseName}.bqsr.${chr}.bam\"), path(\"${bam_file.baseName}.bqsr.${chr}.bai\"), emit: bam_file)\n\n    script:\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar $params.gatk_path -T BaseRecalibrator \\\n        --num_cpu_threads_per_data_thread ${task.cpus} \\\n        --reference_sequence ${params.genome} \\\n        --input_file ${bam_file} \\\n        --intervals ${chr} \\\n        --out ${bam_file.baseName}.bqsr.${chr}.table \\\n        ${params.optional_bqsr}\n\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T PrintReads \\\n        --num_cpu_threads_per_data_thread ${task.cpus} \\\n        --reference_sequence ${params.genome} \\\n        --input_file ${bam_file} \\\n        --BQSR ${bam_file.baseName}.bqsr.${chr}.table \\\n        --intervals ${chr} \\\n        --out ${bam_file.baseName}.bqsr.${chr}.bam \\\n        ${params.optional_pr}\n        \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}G -jar $params.gatk_path -T BaseRecalibrator \\\n        --num_cpu_threads_per_data_thread ${task.cpus} \\\n        --reference_sequence ${params.genome} \\\n        --input_file ${bam_file} \\\n        --intervals ${chr} \\\n        --out ${bam_file.baseName}.bqsr.${chr}.table \\\n        ${params.optional_bqsr}\n\n        java -Xmx${task.memory.toGiga()-4}G -jar ${params.gatk_path} -T PrintReads \\\n        --num_cpu_threads_per_data_thread ${task.cpus} \\\n        --reference_sequence ${params.genome} \\\n        --input_file ${bam_file} \\\n        --BQSR ${bam_file.baseName}.bqsr.${chr}.table \\\n        --intervals ${chr} \\\n        --out ${bam_file.baseName}.bqsr.${chr}.bam \\\n        ${params.optional_pr}\n        \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK BaseRecalibrator ${sample_id} - ${chr}\"}",
            "label 'GATK_3_8_1_0_gf15c1c3ef'",
            "label 'GATK_3_8_1_0_gf15c1c3ef_BaseRecalibrator'",
            "container = 'quay.io/biocontainers/gatk:3.8--py27_1' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "Manta": {
        "name_process": "Manta",
        "string_process": "process Manta {\n    tag {\"Manta ConfigAndRun ${sample_id}\"}\n    label 'Manta_1_6_0'\n    label 'Manta_1_6_0_ConfigAndRun'\n    container = 'quay.io/biocontainers/manta:1.6.0--py27_0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple (sample_id, path(bam_file), path(bai_file))\n\n    output:\n        tuple (sample_id, path(\"*.candidateSmallIndels.*\"),path(\"*.candidateSV.*\"),path(\"*.diploidSV.*\"), emit: sv )\n\n    script:\n        \"\"\"\n        configManta.py --referenceFasta ${params.genome_fasta} --runDir . --bam $bam_file\n        ./runWorkflow.py -m local -j ${task.cpus}\n\n        mv results/variants/candidateSmallIndels.vcf.gz Manta_${sample_id}.candidateSmallIndels.vcf.gz\n        mv results/variants/candidateSmallIndels.vcf.gz.tbi Manta_${sample_id}.candidateSmallIndels.vcf.gz.tbi\n        mv results/variants/candidateSV.vcf.gz Manta_${sample_id}.candidateSV.vcf.gz\n        mv results/variants/candidateSV.vcf.gz.tbi Manta_${sample_id}.candidateSV.vcf.gz.tbi\n        mv results/variants/diploidSV.vcf.gz Manta_${sample_id}.diploidSV.vcf.gz\n        mv results/variants/diploidSV.vcf.gz.tbi Manta_${sample_id}.diploidSV.vcf.gz.tbi\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"\n        configManta.py --referenceFasta ${params.genome_fasta} --runDir . --bam $bam_file\n        ./runWorkflow.py -m local -j ${task.cpus}\n\n        mv results/variants/candidateSmallIndels.vcf.gz Manta_${sample_id}.candidateSmallIndels.vcf.gz\n        mv results/variants/candidateSmallIndels.vcf.gz.tbi Manta_${sample_id}.candidateSmallIndels.vcf.gz.tbi\n        mv results/variants/candidateSV.vcf.gz Manta_${sample_id}.candidateSV.vcf.gz\n        mv results/variants/candidateSV.vcf.gz.tbi Manta_${sample_id}.candidateSV.vcf.gz.tbi\n        mv results/variants/diploidSV.vcf.gz Manta_${sample_id}.diploidSV.vcf.gz\n        mv results/variants/diploidSV.vcf.gz.tbi Manta_${sample_id}.diploidSV.vcf.gz.tbi\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Manta ConfigAndRun ${sample_id}\"}",
            "label 'Manta_1_6_0'",
            "label 'Manta_1_6_0_ConfigAndRun'",
            "container = 'quay.io/biocontainers/manta:1.6.0--py27_0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "AssessSignificance": {
        "name_process": "AssessSignificance",
        "string_process": "process AssessSignificance {\n    tag {\"Control Freec AssessSignificance ${sample_id}\"}\n    label 'ControlFreec_11_5'\n    label 'ControlFreec_11_5_AssessSignificance'\n    container = 'library://sawibo/default/bioinf-tools:freec11.5'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(ratio_file), path(cnv_file))\n\n    output:\n        tuple(sample_id, path(\"${cnv_file.name}.p.value.txt\"), emit: cnv_pvalue)\n\n    script:\n        \"\"\"\n        cat /bin/assess_significance.R | R --slave --args ${cnv_file} ${ratio_file}\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        cat /bin/assess_significance.R | R --slave --args ${cnv_file} ${ratio_file}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ratio_file",
            "cnv_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Control Freec AssessSignificance ${sample_id}\"}",
            "label 'ControlFreec_11_5'",
            "label 'ControlFreec_11_5_AssessSignificance'",
            "container = 'library://sawibo/default/bioinf-tools:freec11.5' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MarkdownToPdf": {
        "name_process": "MarkdownToPdf",
        "string_process": "process MarkdownToPdf {\n    tag {\"Pandocker MarkdownToPdf\"}\n    label 'Pandocker_21_02'\n    label 'Pandocker_21_02_MarkdownToPdf'\n\n    container = 'library://dalibo/pandocker:v21.02'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:        \n        path(md_file)\n     \n    output:        \n        path(\"${md_file.baseName}.pdf\")\n   \n    script:\n        \"\"\"\n        pandoc ${md_file} \\\n            --variable urlcolor=blue \\\n            -s \\\n            --toc \\\n            -f markdown \\\n            -o ${md_file.baseName}.pdf\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        pandoc ${md_file} \\\n            --variable urlcolor=blue \\\n            -s \\\n            --toc \\\n            -f markdown \\\n            -o ${md_file.baseName}.pdf\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "md_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Pandocker MarkdownToPdf\"}",
            "label 'Pandocker_21_02'",
            "label 'Pandocker_21_02_MarkdownToPdf'",
            "container = 'library://dalibo/pandocker:v21.02' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "ExportParams": {
        "name_process": "ExportParams",
        "string_process": "process ExportParams {\n    tag {\"Workflow Export Params\"}\n    label 'Workflow_Export_Params'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    cache = false                                                                     \n\n    output:\n        path(\"workflow_params.txt\")\n\n    script:\n        def workflow_params = params.collect{param -> \"$param.key\\t$param.value\"}.sort().join(\"\\n\")\n        \"\"\"\n        echo -e \"param\\tvalue\" > workflow_params.txt\n        echo -e \"${workflow_params}\" >> workflow_params.txt\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        def workflow_params = params.collect{param -> \"$param.key\\t$param.value\"}.sort().join(\"\\n\")\n        \"\"\"\n        echo -e \"param\\tvalue\" > workflow_params.txt\n        echo -e \"${workflow_params}\" >> workflow_params.txt\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"Workflow Export Params\"}",
            "label 'Workflow_Export_Params' shell = ['/bin/bash', '-euo', 'pipefail']",
            "cache = false"
        ],
        "when": "",
        "stub": ""
    },
    "SelectVariants": {
        "name_process": "SelectVariants",
        "string_process": "process SelectVariants {\n    tag {\"GATK SelectVariants ${run_id}.${interval}.${type}\"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_SelectVariants'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (run_id, interval, path(vcf), path(vcfidx), type)\n\n    output:\n        tuple (run_id, interval, type, path(\"${run_id}.${interval}.${type}.tmp.vcf\"), path(\"${run_id}.${interval}.${type}.tmp.vcf.idx\"), emit: selected_vcfs)\n\n    script:\n        select_type = type == 'SNP' ? '--select-type SNP --select-type NO_VARIATION' : '--select-type INDEL --select-type MIXED'\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        SelectVariants \\\n        -R ${params.genome_fasta} \\\n        -V $vcf \\\n        -O ${run_id}.${interval}.${type}.tmp.vcf \\\n        $select_type\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        select_type = type == 'SNP' ? '--select-type SNP --select-type NO_VARIATION' : '--select-type INDEL --select-type MIXED'\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        SelectVariants \\\n        -R ${params.genome_fasta} \\\n        -V $vcf \\\n        -O ${run_id}.${interval}.${type}.tmp.vcf \\\n        $select_type\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "vcf",
            "vcfidx",
            "run_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK SelectVariants ${run_id}.${interval}.${type}\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_SelectVariants'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "BaseRecalibration": {
        "name_process": "BaseRecalibration",
        "string_process": "\nprocess BaseRecalibration {\n    tag {\"GATK BaseRecalibration ${sample_id}.${int_tag}\"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_BaseRecalibration'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (sample_id, file(bam), path(bai),path(recal_table), path(interval_file))\n\n    output:\n        tuple (sample_id, int_tag, path(\"${sample_id}.${int_tag}_recalibrated.bam\"), path(\"${sample_id}.${int_tag}_recalibrated.bai\"), path(interval_file), emit: recalibrated_bams)\n\n    script:\n        int_tag = interval_file.toRealPath().toString().split(\"/\")[-2]\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\"\\\n        ApplyBQSR \\\n        --input $bam \\\n        --output ${sample_id}.${int_tag}_recalibrated.bam \\\n        -R ${params.genome_fasta} \\\n        --create-output-bam-index true \\\n        --bqsr-recal-file ${recal_table} \\\n        -L $interval_file\n        \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "        int_tag = interval_file.toRealPath().toString().split(\"/\")[-2]\n        \"\"\"\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\"\\\n        ApplyBQSR \\\n        --input $bam \\\n        --output ${sample_id}.${int_tag}_recalibrated.bam \\\n        -R ${params.genome_fasta} \\\n        --create-output-bam-index true \\\n        --bqsr-recal-file ${recal_table} \\\n        -L $interval_file\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "bam",
            "bai",
            "recal_table",
            "interval_file",
            "sample_id"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK BaseRecalibration ${sample_id}.${int_tag}\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_BaseRecalibration'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "BaseRecalibrationTable": {
        "name_process": "BaseRecalibrationTable",
        "string_process": "\nprocess BaseRecalibrationTable {\n    tag {\"GATK BaseRecalibrationTable ${sample_id}.${int_tag}\"}\n    label 'GATK_4_1_3_0'\n    label 'GATK_4_1_3_0_BaseRecalibrationTable'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (sample_id, path(bam), path(bai), path(interval_file))\n\n    output:\n        tuple (sample_id, path(\"${sample_id}.${int_tag}.recal.table\"), emit: recalibration_tables)\n\n    script:\n        known = params.genome_known_sites ? '--known-sites ' + params.genome_known_sites.join(' --known-sites ') : ''\n        int_tag = interval_file.toRealPath().toString().split(\"/\")[-2]\n        \"\"\"\n\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        BaseRecalibrator \\\n        --input $bam \\\n        --output ${sample_id}.${int_tag}.recal.table \\\n        -R ${params.genome_fasta} \\\n        $known \\\n        -L $interval_file\n        \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "        known = params.genome_known_sites ? '--known-sites ' + params.genome_known_sites.join(' --known-sites ') : ''\n        int_tag = interval_file.toRealPath().toString().split(\"/\")[-2]\n        \"\"\"\n\n        gatk --java-options \"-Xmx${task.memory.toGiga()-4}g -Djava.io.tmpdir=\\$TMPDIR\" \\\n        BaseRecalibrator \\\n        --input $bam \\\n        --output ${sample_id}.${int_tag}.recal.table \\\n        -R ${params.genome_fasta} \\\n        $known \\\n        -L $interval_file\n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "bam",
            "bai",
            "interval_file",
            "sample_id"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"GATK BaseRecalibrationTable ${sample_id}.${int_tag}\"}",
            "label 'GATK_4_1_3_0'",
            "label 'GATK_4_1_3_0_BaseRecalibrationTable'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:gatk4.1.3.0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "AlignReads": {
        "name_process": "AlignReads",
        "string_process": "process AlignReads {\n    tag {\"STAR AlignReads ${sample_id} \"}\n    label 'STAR_2_7_3a'\n    label 'STAR_2_7_3a_AlignReads'\n    container = 'quay.io/biocontainers/star:2.7.3a--0'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, rg_id, path(fastqs))\n        path(star_genome_index)\n        path(genome_gtf)\n     \n\n    output:\n        tuple(sample_id, rg_id, path(\"${sample_id}_Aligned.sortedByCoord.out.bam\"), emit: bam_file)\n        path(\"*Log.final.out\", emit: final_log)\n        path(\"*Log.out\", emit: log)\n        path(\"*SJ.out.tab\", emit: sj_table)\n        path(\"*Unmapped*\", optional: true, emit: fastqs_unaligned) \n\n\n   \n    script:\n        def barcode = rg_id.split('_')[1]\n        def avail_mem = task.memory ? \"--limitBAMsortRAM ${task.memory.toBytes() - 100000000}\" : ''   \n        \"\"\"\n        STAR --genomeDir ${star_genome_index} \\\n            ${params.optional} \\\n            --readFilesIn ${fastqs} \\\n            --outFileNamePrefix ${sample_id}_ \\\n            --sjdbGTFfile ${genome_gtf} \\\n            --runDirPerm All_RWX ${avail_mem} \\\n            --readFilesCommand zcat \\\n            --outSAMtype BAM SortedByCoordinate \\\n            --runThreadN ${task.cpus} \\\n            --outSAMattrRGline ID:${sample_id} LB:${sample_id} PL:IllUMINA PU:${barcode} SM:${sample_id}  \n        \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "        def barcode = rg_id.split('_')[1]\n        def avail_mem = task.memory ? \"--limitBAMsortRAM ${task.memory.toBytes() - 100000000}\" : ''   \n        \"\"\"\n        STAR --genomeDir ${star_genome_index} \\\n            ${params.optional} \\\n            --readFilesIn ${fastqs} \\\n            --outFileNamePrefix ${sample_id}_ \\\n            --sjdbGTFfile ${genome_gtf} \\\n            --runDirPerm All_RWX ${avail_mem} \\\n            --readFilesCommand zcat \\\n            --outSAMtype BAM SortedByCoordinate \\\n            --runThreadN ${task.cpus} \\\n            --outSAMattrRGline ID:${sample_id} LB:${sample_id} PL:IllUMINA PU:${barcode} SM:${sample_id}  \n        \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "fastqs",
            "sample_id",
            "star_genome_index",
            "genome_gtf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"STAR AlignReads ${sample_id} \"}",
            "label 'STAR_2_7_3a'",
            "label 'STAR_2_7_3a_AlignReads'",
            "container = 'quay.io/biocontainers/star:2.7.3a--0' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "CallMolecularConsensusReads": {
        "name_process": "CallMolecularConsensusReads",
        "string_process": "process CallMolecularConsensusReads {\n    tag {\"FGBIO CallMolecularConsensusReads ${sample_id}\"}\n    label 'FGBIO_1_1_0'\n    label 'FGBIO_1_1_0_CallMolecularConsensusReads'\n    clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"\n    container = 'library://sawibo/default/bioinf-tools:idt-umi-dependencies'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n    input:\n        tuple (sample_id, flowcell, machine, run_nr, path(bam))\n\n    output:\n        tuple (sample_id, flowcell, machine, run_nr, path(\"${sample_id}.u.consensus.bam\"), emit : consensus_bams)\n\n    script:\n        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}g -jar /bin/fgbio-1.1.0.jar --tmp-dir \\$PWD CallMolecularConsensusReads \\\n        --input $bam \\\n        --output ${sample_id}.u.consensus.bam \\\n        ${params.optional} \\\n        --read-group-id \"${sample_id}_${flowcell}\" \\\n        --read-name-prefix \"${machine}:${run_nr}:${flowcell}:0:0:0:0\"\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        java -Xmx${task.memory.toGiga()-4}g -jar /bin/fgbio-1.1.0.jar --tmp-dir \\$PWD CallMolecularConsensusReads \\\n        --input $bam \\\n        --output ${sample_id}.u.consensus.bam \\\n        ${params.optional} \\\n        --read-group-id \"${sample_id}_${flowcell}\" \\\n        --read-name-prefix \"${machine}:${run_nr}:${flowcell}:0:0:0:0\"\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"FGBIO CallMolecularConsensusReads ${sample_id}\"}",
            "label 'FGBIO_1_1_0'",
            "label 'FGBIO_1_1_0_CallMolecularConsensusReads'",
            "clusterOptions = workflow.profile == \"sge\" ? \"-l h_vmem=${params.mem}\" : \"\"",
            "container = 'library://sawibo/default/bioinf-tools:idt-umi-dependencies' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "MEM": {
        "name_process": "MEM",
        "string_process": "process MEM {\n    tag {\"BWA MEM ${sample_id} - ${rg_id}\"}\n    label 'BWA_0_7_17'\n    label 'BWA_0_7_17_MEM'\n    container = 'quay.io/biocontainers/bwa:0.7.17--hed695b0_6'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, rg_id, path(fastq))\n\n    output:\n        tuple(sample_id, rg_id, path(\"${fastq[0].simpleName}.sam\"), emit: sam_file)\n\n    script:\n        def barcode = rg_id.split('_')[1]\n        def readgroup = \"\\\"@RG\\\\tID:${rg_id}\\\\tSM:${sample_id}\\\\tPL:ILLUMINA\\\\tLB:${sample_id}\\\\tPU:${barcode}\\\"\"\n\n        \"\"\"\n        bwa mem -t ${task.cpus} -R ${readgroup} ${params.optional} ${params.genome} ${fastq} > ${fastq[0].simpleName}.sam\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        def barcode = rg_id.split('_')[1]\n        def readgroup = \"\\\"@RG\\\\tID:${rg_id}\\\\tSM:${sample_id}\\\\tPL:ILLUMINA\\\\tLB:${sample_id}\\\\tPU:${barcode}\\\"\"\n\n        \"\"\"\n        bwa mem -t ${task.cpus} -R ${readgroup} ${params.optional} ${params.genome} ${fastq} > ${fastq[0].simpleName}.sam\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "fastq",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__NextflowModules",
        "directive": [
            "tag {\"BWA MEM ${sample_id} - ${rg_id}\"}",
            "label 'BWA_0_7_17'",
            "label 'BWA_0_7_17_MEM'",
            "container = 'quay.io/biocontainers/bwa:0.7.17--hed695b0_6' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    }
}
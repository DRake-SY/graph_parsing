{
    "QC_FILTER": {
        "name_process": "QC_FILTER",
        "string_process": "process QC_FILTER {\n\n  label 'process_plink2'\n\n  input:\n    tuple val(genotyped_plink_filename), path(genotyped_plink_bim_file), path(genotyped_plink_bed_file), path(genotyped_plink_fam_file)\n\n  output:\n    path \"${genotyped_plink_filename}.qc.*\", emit: genotyped_filtered\n\n  \"\"\"\n  plink2 \\\n    --bfile ${genotyped_plink_filename} \\\n    --maf ${params.qc_maf} \\\n    --mac ${params.qc_mac} \\\n    --geno ${params.qc_geno} \\\n    --hwe ${params.qc_hwe} \\\n    --mind ${params.qc_mind} \\\n    --write-snplist --write-samples --no-id-header \\\n    --out ${genotyped_plink_filename}.qc \\\n    --threads ${task.cpus} \\\n    --memory ${task.memory.toMega()}\n  \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n  plink2 \\\n    --bfile ${genotyped_plink_filename} \\\n    --maf ${params.qc_maf} \\\n    --mac ${params.qc_mac} \\\n    --geno ${params.qc_geno} \\\n    --hwe ${params.qc_hwe} \\\n    --mind ${params.qc_mind} \\\n    --write-snplist --write-samples --no-id-header \\\n    --out ${genotyped_plink_filename}.qc \\\n    --threads ${task.cpus} \\\n    --memory ${task.memory.toMega()}\n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genotyped_plink_filename",
            "genotyped_plink_bim_file",
            "genotyped_plink_bed_file",
            "genotyped_plink_fam_file"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "label 'process_plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "REGENIE_STEP1": {
        "name_process": "REGENIE_STEP1",
        "string_process": "process REGENIE_STEP1 {\n\n  publishDir \"${params.outdir}/logs\", mode: 'copy', pattern: 'regenie_step1_out.log'\n\n  input:\n    tuple val(genotyped_plink_filename), path(genotyped_plink_bim_file), path(genotyped_plink_bed_file), path(genotyped_plink_fam_file)\n    path snplist\n    path id\n    path phenotypes_file\n    path covariates_file\n\n  output:\n    path \"regenie_step1_out*\", emit: regenie_step1_out\n    path \"regenie_step1_out.log\", emit: regenie_step1_out_log\n\n  script:\n  def covariants = covariates_file.name != 'NO_COV_FILE' ? \"--covarFile $covariates_file --covarColList ${params.covariates_columns}\" : ''\n  def deleteMissings = params.phenotypes_delete_missings  ? \"--strict\" : ''\n  def forceStep1 = params.regenie_force_step1  ? \"--force-step1\" : ''\n  def refFirst = params.regenie_ref_first  ? \"--ref-first\" : ''\n  \"\"\"\n  # qcfiles path required for keep and extract (but not actually set below)\n  regenie \\\n    --step 1 \\\n    --bed ${genotyped_plink_filename} \\\n    --extract ${snplist} \\\n    --keep ${id} \\\n    --phenoFile ${phenotypes_file} \\\n    --phenoColList  ${params.phenotypes_columns} \\\n    $covariants \\\n    $deleteMissings \\\n    $forceStep1 \\\n    $refFirst \\\n    --bsize ${params.regenie_bsize_step1} \\\n    ${params.phenotypes_binary_trait == true ? '--bt' : ''} \\\n    --lowmem \\\n    --gz \\\n    --lowmem-prefix tmp_rg \\\n    --threads ${task.cpus} \\\n    --out regenie_step1_out\n  \"\"\"\n\n}",
        "nb_lignes_process": 41,
        "string_script": "  def covariants = covariates_file.name != 'NO_COV_FILE' ? \"--covarFile $covariates_file --covarColList ${params.covariates_columns}\" : ''\n  def deleteMissings = params.phenotypes_delete_missings  ? \"--strict\" : ''\n  def forceStep1 = params.regenie_force_step1  ? \"--force-step1\" : ''\n  def refFirst = params.regenie_ref_first  ? \"--ref-first\" : ''\n  \"\"\"\n  # qcfiles path required for keep and extract (but not actually set below)\n  regenie \\\n    --step 1 \\\n    --bed ${genotyped_plink_filename} \\\n    --extract ${snplist} \\\n    --keep ${id} \\\n    --phenoFile ${phenotypes_file} \\\n    --phenoColList  ${params.phenotypes_columns} \\\n    $covariants \\\n    $deleteMissings \\\n    $forceStep1 \\\n    $refFirst \\\n    --bsize ${params.regenie_bsize_step1} \\\n    ${params.phenotypes_binary_trait == true ? '--bt' : ''} \\\n    --lowmem \\\n    --gz \\\n    --lowmem-prefix tmp_rg \\\n    --threads ${task.cpus} \\\n    --out regenie_step1_out\n  \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genotyped_plink_filename",
            "genotyped_plink_bim_file",
            "genotyped_plink_bed_file",
            "genotyped_plink_fam_file",
            "snplist",
            "id",
            "phenotypes_file",
            "covariates_file"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "publishDir \"${params.outdir}/logs\", mode: 'copy', pattern: 'regenie_step1_out.log'"
        ],
        "when": "",
        "stub": ""
    },
    "CACHE_JBANG_SCRIPTS": {
        "name_process": "CACHE_JBANG_SCRIPTS",
        "string_process": "process CACHE_JBANG_SCRIPTS {\n\n  input:\n    path regenie_log_parser_java\n    path regenie_filter_java\n    path regenie_validate_input_java\n\n  output:\n    path \"RegenieLogParser.jar\", emit: regenie_log_parser_jar\n    path \"RegenieFilter.jar\", emit: regenie_filter_jar\n    path \"RegenieValidateInput.jar\", emit: regenie_validate_input_jar\n\n  \"\"\"\n  jbang export portable -O=RegenieLogParser.jar ${regenie_log_parser_java}\n  jbang export portable -O=RegenieFilter.jar ${regenie_filter_java}\n  jbang export portable -O=RegenieValidateInput.jar ${regenie_validate_input_java}\n  \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n  jbang export portable -O=RegenieLogParser.jar ${regenie_log_parser_java}\n  jbang export portable -O=RegenieFilter.jar ${regenie_filter_java}\n  jbang export portable -O=RegenieValidateInput.jar ${regenie_validate_input_java}\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "regenie_log_parser_java",
            "regenie_filter_java",
            "regenie_validate_input_java"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "VALIDATE_COVARIATS": {
        "name_process": "VALIDATE_COVARIATS",
        "string_process": "process VALIDATE_COVARIATS {\n\n  publishDir \"${params.outdir}/logs\", mode: 'copy', pattern: '*log'\n  publishDir \"${params.outdir}/validated_input/\", mode: 'copy', pattern: '*validated.txt'\n\n  input:\n    path covariates_file\n  path regenie_validate_input_jar\n\n  output:\n    path \"${covariates_file.baseName}.validated.txt\", emit: covariates_file_validated\n    path \"${covariates_file.baseName}.validated.log\", emit: covariates_file_validated_log\n\n  \"\"\"\n  java -jar ${regenie_validate_input_jar} --input ${covariates_file} --output  ${covariates_file.baseName}.validated.txt --type covariate\n  \"\"\"\n  }",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n  java -jar ${regenie_validate_input_jar} --input ${covariates_file} --output  ${covariates_file.baseName}.validated.txt --type covariate\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "covariates_file",
            "regenie_validate_input_jar"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "publishDir \"${params.outdir}/logs\", mode: 'copy', pattern: '*log'",
            "publishDir \"${params.outdir}/validated_input/\", mode: 'copy', pattern: '*validated.txt'"
        ],
        "when": "",
        "stub": ""
    },
    "VALIDATE_PHENOTYPES": {
        "name_process": "VALIDATE_PHENOTYPES",
        "string_process": "process VALIDATE_PHENOTYPES {\n\n  publishDir \"${params.outdir}/logs\", mode: 'copy', pattern: '*log'\n  publishDir \"${params.outdir}/validated_input/\", mode: 'copy', pattern: '*validated.txt'\n\n  input:\n    path phenotypes_file\n    path regenie_validate_input_jar\n\n  output:\n    path \"${phenotypes_file.baseName}.validated.txt\", emit: phenotypes_file_validated\n    path \"${phenotypes_file.baseName}.validated.log\", emit: phenotypes_file_validated_log\n\n  \"\"\"\n  java -jar ${regenie_validate_input_jar}  --input ${phenotypes_file} --output  ${phenotypes_file.baseName}.validated.txt --type phenotype\n  \"\"\"\n  }",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n  java -jar ${regenie_validate_input_jar}  --input ${phenotypes_file} --output  ${phenotypes_file.baseName}.validated.txt --type phenotype\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotypes_file",
            "regenie_validate_input_jar"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "publishDir \"${params.outdir}/logs\", mode: 'copy', pattern: '*log'",
            "publishDir \"${params.outdir}/validated_input/\", mode: 'copy', pattern: '*validated.txt'"
        ],
        "when": "",
        "stub": ""
    },
    "MERGE_RESULTS_FILTERED": {
        "name_process": "MERGE_RESULTS_FILTERED",
        "string_process": "process MERGE_RESULTS_FILTERED {\n\n  tag \"${phenotype}\"\n\n  input:\n    tuple val(phenotype), path(regenie_chromosomes)\n\n  output:\n    tuple val(phenotype), path(\"${phenotype}.regenie.filtered.gz\"), emit: results_filtered_merged\n\n\n  \"\"\"\n  # static header due to split\n  ls -1v ${regenie_chromosomes} | head -n 1 | xargs cat | zgrep -hE 'CHROM' | gzip > header.gz\n  ls *_${phenotype}.regenie.filtered.gz | xargs cat | zgrep -hE '^[0-9]' | gzip > ${phenotype}.regenie.tmp.gz\n  cat header.gz ${phenotype}.regenie.tmp.gz > ${phenotype}.regenie.filtered.gz\n  rm ${phenotype}.regenie.tmp.gz\n  \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n  # static header due to split\n  ls -1v ${regenie_chromosomes} | head -n 1 | xargs cat | zgrep -hE 'CHROM' | gzip > header.gz\n  ls *_${phenotype}.regenie.filtered.gz | xargs cat | zgrep -hE '^[0-9]' | gzip > ${phenotype}.regenie.tmp.gz\n  cat header.gz ${phenotype}.regenie.tmp.gz > ${phenotype}.regenie.filtered.gz\n  rm ${phenotype}.regenie.tmp.gz\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype",
            "regenie_chromosomes"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "tag \"${phenotype}\""
        ],
        "when": "",
        "stub": ""
    },
    "ANNOTATE_FILTERED": {
        "name_process": "ANNOTATE_FILTERED",
        "string_process": "process ANNOTATE_FILTERED {\n\n  publishDir \"${params.outdir}/results/tophits\", mode: 'copy'\n\n  input:\n    tuple val(phenotype), path(regenie_merged)\n    path genes_hg19\n    path genes_hg38\n\n  output:\n    tuple val(phenotype), path(\"${regenie_merged.baseName}.annotated.txt.gz\"), emit: annotated_ch\n\n  script:\n  def genes = params.genotypes_build == 'hg19' ? \"${genes_hg19}\" : \"${genes_hg38}\"\n\n  \"\"\"\n  #!/bin/bash\n  set -e\n  (zcat ${regenie_merged} | head -n 1 && zcat ${regenie_merged} | tail -n +2 | sort -T $PWD/work -k12 --general-numeric-sort --reverse) | gzip > ${regenie_merged.baseName}.sorted.gz\n  # sort lexicographically (required by bedtools)\n  zcat ${regenie_merged.baseName}.sorted.gz | awk 'NR == 1; NR > 1 {print \\$0 | \"sort -k1,1 -k2,2n\"}' > ${regenie_merged.baseName}.sorted.txt\n  # duplicate 2nd column (to write valid bed)\n  awk 'BEGIN{} {\\$2 = \\$2 OFS \\$2} 1' OFS='\\t' ${regenie_merged.baseName}.sorted.txt > ${regenie_merged.baseName}.sorted.bed\n  rm ${regenie_merged.baseName}.sorted.txt\n  # run bedtools\n  bedtools closest -a ${regenie_merged.baseName}.sorted.bed -b ${genes} -d -header > ${regenie_merged.baseName}.annotated.bed\n  rm ${regenie_merged.baseName}.sorted.bed\n  # remove duplication of 2nd column\n  cut -f1,3- ${regenie_merged.baseName}.annotated.bed > ${regenie_merged.baseName}.annotated.fixed.bed\n  rm ${regenie_merged.baseName}.annotated.bed\n  # write extended header\n  cat ${regenie_merged.baseName}.annotated.fixed.bed | head -n 1 | sed ' 1 s/.*/&\\tGENE_CHROMOSOME\\tGENE_START\\tGENE_END\\tGENE_NAME\\tDISTANCE/' > ${regenie_merged.baseName}.annotated.header.bed\n  sed 1,1d ${regenie_merged.baseName}.annotated.fixed.bed  > ${regenie_merged.baseName}.annotated.noheader.txt\n  rm ${regenie_merged.baseName}.annotated.fixed.bed\n  # combine files\n  cat ${regenie_merged.baseName}.annotated.header.bed ${regenie_merged.baseName}.annotated.noheader.txt > ${regenie_merged.baseName}.annotated.merged.bed\n  rm ${regenie_merged.baseName}.annotated.header.bed\n  # sort by p-value again\n  (cat  ${regenie_merged.baseName}.annotated.merged.bed | head -n 1 && cat ${regenie_merged.baseName}.annotated.merged.bed | tail -n +2 | sort -k12 --general-numeric-sort --reverse) | gzip > ${regenie_merged.baseName}.annotated.txt.gz\n  \"\"\"\n\n}",
        "nb_lignes_process": 40,
        "string_script": "  def genes = params.genotypes_build == 'hg19' ? \"${genes_hg19}\" : \"${genes_hg38}\"\n\n  \"\"\"\n  #!/bin/bash\n  set -e\n  (zcat ${regenie_merged} | head -n 1 && zcat ${regenie_merged} | tail -n +2 | sort -T $PWD/work -k12 --general-numeric-sort --reverse) | gzip > ${regenie_merged.baseName}.sorted.gz\n  # sort lexicographically (required by bedtools)\n  zcat ${regenie_merged.baseName}.sorted.gz | awk 'NR == 1; NR > 1 {print \\$0 | \"sort -k1,1 -k2,2n\"}' > ${regenie_merged.baseName}.sorted.txt\n  # duplicate 2nd column (to write valid bed)\n  awk 'BEGIN{} {\\$2 = \\$2 OFS \\$2} 1' OFS='\\t' ${regenie_merged.baseName}.sorted.txt > ${regenie_merged.baseName}.sorted.bed\n  rm ${regenie_merged.baseName}.sorted.txt\n  # run bedtools\n  bedtools closest -a ${regenie_merged.baseName}.sorted.bed -b ${genes} -d -header > ${regenie_merged.baseName}.annotated.bed\n  rm ${regenie_merged.baseName}.sorted.bed\n  # remove duplication of 2nd column\n  cut -f1,3- ${regenie_merged.baseName}.annotated.bed > ${regenie_merged.baseName}.annotated.fixed.bed\n  rm ${regenie_merged.baseName}.annotated.bed\n  # write extended header\n  cat ${regenie_merged.baseName}.annotated.fixed.bed | head -n 1 | sed ' 1 s/.*/&\\tGENE_CHROMOSOME\\tGENE_START\\tGENE_END\\tGENE_NAME\\tDISTANCE/' > ${regenie_merged.baseName}.annotated.header.bed\n  sed 1,1d ${regenie_merged.baseName}.annotated.fixed.bed  > ${regenie_merged.baseName}.annotated.noheader.txt\n  rm ${regenie_merged.baseName}.annotated.fixed.bed\n  # combine files\n  cat ${regenie_merged.baseName}.annotated.header.bed ${regenie_merged.baseName}.annotated.noheader.txt > ${regenie_merged.baseName}.annotated.merged.bed\n  rm ${regenie_merged.baseName}.annotated.header.bed\n  # sort by p-value again\n  (cat  ${regenie_merged.baseName}.annotated.merged.bed | head -n 1 && cat ${regenie_merged.baseName}.annotated.merged.bed | tail -n +2 | sort -k12 --general-numeric-sort --reverse) | gzip > ${regenie_merged.baseName}.annotated.txt.gz\n  \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "phenotype",
            "regenie_merged",
            "genes_hg19",
            "genes_hg38"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "publishDir \"${params.outdir}/results/tophits\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "FILTER_RESULTS": {
        "name_process": "FILTER_RESULTS",
        "string_process": "process FILTER_RESULTS {\n\n  tag \"${regenie_chromosomes.simpleName}\"\n\n  input:\n    tuple val(phenotype), path(regenie_chromosomes)\n    path regenie_filter_jar\n\n  output:\n    tuple val(phenotype), path(\"${regenie_chromosomes.baseName}.filtered*\"), emit: results_filtered\n    tuple val(phenotype), path(\"${regenie_chromosomes}\"), emit: results\n\n  \"\"\"\n  java -jar ${regenie_filter_jar} --input ${regenie_chromosomes} --limit ${params.annotation_min_log10p} --output ${regenie_chromosomes.baseName}.filtered\n  #todo: CSVWriter for gzip\n  gzip ${regenie_chromosomes.baseName}.filtered\n  \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n  java -jar ${regenie_filter_jar} --input ${regenie_chromosomes} --limit ${params.annotation_min_log10p} --output ${regenie_chromosomes.baseName}.filtered\n  #todo: CSVWriter for gzip\n  gzip ${regenie_chromosomes.baseName}.filtered\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype",
            "regenie_chromosomes",
            "regenie_filter_jar"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "tag \"${regenie_chromosomes.simpleName}\""
        ],
        "when": "",
        "stub": ""
    },
    "REGENIE_LOG_PARSER_STEP1": {
        "name_process": "REGENIE_LOG_PARSER_STEP1",
        "string_process": "process REGENIE_LOG_PARSER_STEP1 {\n\n  publishDir \"${params.outdir}/logs\", mode: 'copy'\n\n  input:\n    path regenie_step1_log\n    path regenie_log_parser_jar\n\n  output:\n    path \"${params.project}.step1.log\", emit: regenie_step1_parsed_logs\n\n  \"\"\"\n  java -jar ${regenie_log_parser_jar} ${regenie_step1_log} --output ${params.project}.step1.log\n  \"\"\"\n  }",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n  java -jar ${regenie_log_parser_jar} ${regenie_step1_log} --output ${params.project}.step1.log\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "regenie_step1_log",
            "regenie_log_parser_jar"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "publishDir \"${params.outdir}/logs\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "IMPUTED_TO_PLINK2": {
        "name_process": "IMPUTED_TO_PLINK2",
        "string_process": "process IMPUTED_TO_PLINK2 {\n\n  label 'process_plink2'\n\n  input:\n    path imputed_vcf_file\n\n  output:\n    tuple val(\"${imputed_vcf_file.baseName}\"), path(\"${imputed_vcf_file.baseName}.pgen\"), path(\"${imputed_vcf_file.baseName}.psam\"),path(\"${imputed_vcf_file.baseName}.pvar\"), emit: imputed_plink2\n\n\"\"\"\nplink2 \\\n  --vcf $imputed_vcf_file dosage=DS \\\n  --make-pgen \\\n  --double-id \\\n  --out ${imputed_vcf_file.baseName} \\\n  --threads ${task.cpus} \\\n  --memory ${task.memory.toMega()}\n\"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\nplink2 \\\n  --vcf $imputed_vcf_file dosage=DS \\\n  --make-pgen \\\n  --double-id \\\n  --out ${imputed_vcf_file.baseName} \\\n  --threads ${task.cpus} \\\n  --memory ${task.memory.toMega()}\n\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "imputed_vcf_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "label 'process_plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "REGENIE_LOG_PARSER_STEP2": {
        "name_process": "REGENIE_LOG_PARSER_STEP2",
        "string_process": "process REGENIE_LOG_PARSER_STEP2 {\n\n  publishDir \"${params.outdir}/logs\", mode: 'copy'\n\n  input:\n    path regenie_step2_logs\n    path regenie_log_parser_jar\n\n  output:\n    path \"${params.project}.step2.log\", emit: regenie_step2_parsed_logs\n\n  \"\"\"\n  java -jar ${regenie_log_parser_jar} ${regenie_step2_logs} --output ${params.project}.step2.log\n  \"\"\"\n\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n  java -jar ${regenie_log_parser_jar} ${regenie_step2_logs} --output ${params.project}.step2.log\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "regenie_step2_logs",
            "regenie_log_parser_jar"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "publishDir \"${params.outdir}/logs\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "QC_FILTER_GENOTYPED": {
        "name_process": "QC_FILTER_GENOTYPED",
        "string_process": "process QC_FILTER_GENOTYPED {\n\n  publishDir \"${params.outdir}/logs\", mode: 'copy', pattern: '*.qc.log'\n  label 'process_plink2'\n\n  input:\n    tuple val(genotyped_plink_filename), path(genotyped_plink_file)\n\n  output:\n    path \"${genotyped_plink_filename}.qc.log\"\n    path \"${genotyped_plink_filename}.qc.snplist\", emit: genotyped_filtered_snplist_ch\n    path \"${genotyped_plink_filename}.qc.id\", emit: genotyped_filtered_id_ch\n    tuple val(\"${genotyped_plink_filename}.qc\"), path(\"${genotyped_plink_filename}.qc.bim\"), path(\"${genotyped_plink_filename}.qc.bed\"),path(\"${genotyped_plink_filename}.qc.fam\"), emit: genotyped_filtered_files_ch\n\n\n  \"\"\"\n  plink2 \\\n    --bfile ${genotyped_plink_filename} \\\n    --maf ${params.qc_maf} \\\n    --mac ${params.qc_mac} \\\n    --geno ${params.qc_geno} \\\n    --hwe ${params.qc_hwe} \\\n    --mind ${params.qc_mind} \\\n    --write-snplist --write-samples --no-id-header \\\n    --out ${genotyped_plink_filename}.qc \\\n    --make-bed \\\n    --threads ${task.cpus} \\\n    --memory ${task.memory.toMega()}\n  \"\"\"\n\n}",
        "nb_lignes_process": 29,
        "string_script": "\"\"\"\n  plink2 \\\n    --bfile ${genotyped_plink_filename} \\\n    --maf ${params.qc_maf} \\\n    --mac ${params.qc_mac} \\\n    --geno ${params.qc_geno} \\\n    --hwe ${params.qc_hwe} \\\n    --mind ${params.qc_mind} \\\n    --write-snplist --write-samples --no-id-header \\\n    --out ${genotyped_plink_filename}.qc \\\n    --make-bed \\\n    --threads ${task.cpus} \\\n    --memory ${task.memory.toMega()}\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genotyped_plink_filename",
            "genotyped_plink_file"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "publishDir \"${params.outdir}/logs\", mode: 'copy', pattern: '*.qc.log'",
            "label 'process_plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "REPORT": {
        "name_process": "REPORT",
        "string_process": "process REPORT {\n\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  label 'required_memory_report'\n\n  input:\n    tuple val(phenotype), path(regenie_merged), path(annotated_tophits)\n    path phenotype_file_validated\n    path gwas_report_template\n    path phenotype_log\n    path covariate_log\n    path step1_log\n    path step2_log\n\n  output:\n    path \"*.html\"\n\n  script:\n      def annotation_as_string = params.manhattan_annotation_enabled.toString().toUpperCase()\n\n  \"\"\"\n  Rscript -e \"require( 'rmarkdown' ); render('${gwas_report_template}',\n    params = list(\n      project = '${params.project}',\n      date = '${params.project_date}',\n      version = '$workflow.manifest.version',\n      regenie_merged='${regenie_merged}',\n      regenie_filename='${regenie_merged.baseName}',\n      phenotype_file='${phenotype_file_validated}',\n      phenotype='${phenotype}',\n      covariates='${params.covariates_columns}',\n      phenotype_log='${phenotype_log}',\n      covariate_log='${covariate_log}',\n      regenie_step1_log='${step1_log}',\n      regenie_step2_log='${step2_log}',\n      plot_ylimit=${params.plot_ylimit},\n      annotated_tophits_filename='${annotated_tophits}',\n      manhattan_annotation_enabled = $annotation_as_string,\n      annotation_min_log10p = ${params.annotation_min_log10p}\n    ),\n    intermediates_dir='\\$PWD',\n    knit_root_dir='\\$PWD',\n    output_file='\\$PWD/${params.project}.${regenie_merged.baseName}.html'\n  )\"\n  \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "      def annotation_as_string = params.manhattan_annotation_enabled.toString().toUpperCase()\n\n  \"\"\"\n  Rscript -e \"require( 'rmarkdown' ); render('${gwas_report_template}',\n    params = list(\n      project = '${params.project}',\n      date = '${params.project_date}',\n      version = '$workflow.manifest.version',\n      regenie_merged='${regenie_merged}',\n      regenie_filename='${regenie_merged.baseName}',\n      phenotype_file='${phenotype_file_validated}',\n      phenotype='${phenotype}',\n      covariates='${params.covariates_columns}',\n      phenotype_log='${phenotype_log}',\n      covariate_log='${covariate_log}',\n      regenie_step1_log='${step1_log}',\n      regenie_step2_log='${step2_log}',\n      plot_ylimit=${params.plot_ylimit},\n      annotated_tophits_filename='${annotated_tophits}',\n      manhattan_annotation_enabled = $annotation_as_string,\n      annotation_min_log10p = ${params.annotation_min_log10p}\n    ),\n    intermediates_dir='\\$PWD',\n    knit_root_dir='\\$PWD',\n    output_file='\\$PWD/${params.project}.${regenie_merged.baseName}.html'\n  )\"\n  \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "PDEparams",
            "project",
            "datelife",
            "inveRsion"
        ],
        "tools_url": [
            "https://bio.tools/PDEparams",
            "https://bio.tools/project",
            "https://bio.tools/datelife",
            "https://bio.tools/inversion"
        ],
        "tools_dico": [
            {
                "name": "PDEparams",
                "uri": "https://bio.tools/PDEparams",
                "topic": [
                    [],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Parameter fitting toolbox for partial differential equations in Python.",
                "homepage": "http://github.com/systemsmedicine/PDE_params"
            },
            {
                "name": "project",
                "uri": "https://bio.tools/project",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "project is a program that projects genomic features onto their sequences. Please contact Sarah Djebali (sarah dot djebali at crg dot es for any question).",
                "homepage": "http://big.crg.cat/services/project"
            },
            {
                "name": "datelife",
                "uri": "https://bio.tools/datelife",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0084",
                            "term": "Phylogeny"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3478",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3478",
                                    "term": "Phylogenetic tree reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Leveraging databases and analytical tools to reveal the dated Tree of Life.\n\nR package containing datelife's core functionality.\n\nDashboard \u22c5 phylotastic/datelife.\n\nGet a phylogenetic tree with branch lengths proportional to geologic time (aka a chronogram) of any two or more lineages of interest to you: use this R package or go to www.datelife.org to make a query of chronograms available for your lineages in the Open Tree of Life\u2019s tree store.\n\nWelcome to the DateLife project.\n\nAn R package, datelife for doing the calculations.\n\nCode coverage done right",
                "homepage": "http://www.datelife.org/"
            },
            {
                "name": "inveRsion",
                "uri": "https://bio.tools/inversion",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Package to find genetic inversions in genotype (SNP array) data.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/inveRsion.html"
            }
        ],
        "inputs": [
            "phenotype",
            "regenie_merged",
            "annotated_tophits",
            "phenotype_file_validated",
            "gwas_report_template",
            "phenotype_log",
            "covariate_log",
            "step1_log",
            "step2_log"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "publishDir \"${params.outdir}\", mode: 'copy'",
            "label 'required_memory_report'"
        ],
        "when": "",
        "stub": ""
    },
    "PRUNE_GENOTYPED": {
        "name_process": "PRUNE_GENOTYPED",
        "string_process": "process PRUNE_GENOTYPED {\n\n  publishDir \"${params.outdir}/logs\", mode: 'copy', pattern: '*.pruned.log'\n  label 'process_plink2'\n\n  input:\n    tuple val(genotyped_qc_filename), path(genotyped_qc_bim_file), path(genotyped_qc_bed_file), path(genotyped_qc_fam_file)\n  output:\n    tuple val(\"${genotyped_qc_filename}.pruned\"), path(\"${genotyped_qc_filename}.pruned.bim\"), path(\"${genotyped_qc_filename}.pruned.bed\"),path(\"${genotyped_qc_filename}.pruned.fam\"), emit: genotypes_pruned_ch\n    path \"${genotyped_qc_filename}.pruned.log\"\n  \"\"\"\n  # Prune, filter and convert to plink\n  plink2 \\\n    --bfile ${genotyped_qc_filename} \\\n    --double-id --maf ${params.prune_maf} \\\n    --indep-pairwise ${params.prune_window_kbsize} ${params.prune_step_size} ${params.prune_r2_threshold} \\\n    --out ${genotyped_qc_filename} \\\n    --threads ${task.cpus} \\\n    --memory ${task.memory.toMega()}\n  plink2 \\\n    --bfile ${genotyped_qc_filename} \\\n    --extract ${genotyped_qc_filename}.prune.in \\\n    --double-id \\\n    --make-bed \\\n    --out ${genotyped_qc_filename}.pruned \\\n    --threads ${task.cpus} \\\n    --memory ${task.memory.toMega()}\n  \"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n  # Prune, filter and convert to plink\n  plink2 \\\n    --bfile ${genotyped_qc_filename} \\\n    --double-id --maf ${params.prune_maf} \\\n    --indep-pairwise ${params.prune_window_kbsize} ${params.prune_step_size} ${params.prune_r2_threshold} \\\n    --out ${genotyped_qc_filename} \\\n    --threads ${task.cpus} \\\n    --memory ${task.memory.toMega()}\n  plink2 \\\n    --bfile ${genotyped_qc_filename} \\\n    --extract ${genotyped_qc_filename}.prune.in \\\n    --double-id \\\n    --make-bed \\\n    --out ${genotyped_qc_filename}.pruned \\\n    --threads ${task.cpus} \\\n    --memory ${task.memory.toMega()}\n  \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genotyped_qc_filename",
            "genotyped_qc_bim_file",
            "genotyped_qc_bed_file",
            "genotyped_qc_fam_file"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "publishDir \"${params.outdir}/logs\", mode: 'copy', pattern: '*.pruned.log'",
            "label 'process_plink2'"
        ],
        "when": "",
        "stub": ""
    },
    "SNP_PRUNING": {
        "name_process": "SNP_PRUNING",
        "string_process": "process SNP_PRUNING {\n\n  input:\n    tuple val(genotyped_plink_filename), path(genotyped_plink_file)\n  output:\n    tuple val(\"${genotyped_plink_filename}.pruned\"), path(\"${genotyped_plink_filename}.pruned.bim\"), path(\"${genotyped_plink_filename}.pruned.bed\"),path(\"${genotyped_plink_filename}.pruned.fam\"), emit: genotypes_pruned\n\n  \"\"\"\n  # Prune, filter and convert to plink\n  plink2 \\\n    --bfile ${genotyped_plink_filename} \\\n    --double-id --maf ${params.prune_maf} \\\n    --indep-pairwise ${params.prune_window_kbsize} ${params.prune_step_size} ${params.prune_r2_threshold} \\\n    --out ${genotyped_plink_filename} \\\n    --threads ${task.cpus} \\\n    --memory ${task.memory.toMega()}\n      \n  plink2 \\\n    --bfile ${genotyped_plink_filename} \\\n    --extract ${genotyped_plink_filename}.prune.in \\\n    --double-id \\\n    --make-bed \\\n    --out ${genotyped_plink_filename}.pruned \\\n    --threads ${task.cpus} \\\n    --memory ${task.memory.toMega()}\n  \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n  # Prune, filter and convert to plink\n  plink2 \\\n    --bfile ${genotyped_plink_filename} \\\n    --double-id --maf ${params.prune_maf} \\\n    --indep-pairwise ${params.prune_window_kbsize} ${params.prune_step_size} ${params.prune_r2_threshold} \\\n    --out ${genotyped_plink_filename} \\\n    --threads ${task.cpus} \\\n    --memory ${task.memory.toMega()}\n      \n  plink2 \\\n    --bfile ${genotyped_plink_filename} \\\n    --extract ${genotyped_plink_filename}.prune.in \\\n    --double-id \\\n    --make-bed \\\n    --out ${genotyped_plink_filename}.pruned \\\n    --threads ${task.cpus} \\\n    --memory ${task.memory.toMega()}\n  \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genotyped_plink_filename",
            "genotyped_plink_file"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "MERGE_RESULTS": {
        "name_process": "MERGE_RESULTS",
        "string_process": "process MERGE_RESULTS {\n\n  publishDir \"${params.outdir}/results\", mode: 'copy'\n  tag \"${phenotype}\"\n\n  input:\n    tuple val(phenotype), path(regenie_chromosomes)\n\n  output:\n    tuple val(phenotype), path (\"${phenotype}.regenie.gz\"), emit: results_merged\n    path \"${phenotype}.regenie.gz.tbi\"\n\n  \"\"\"\n  # static header due to split\n  ls -1v ${regenie_chromosomes} | head -n 1 | xargs cat | zgrep -hE 'CHROM' | gzip > header.gz\n  ls *_${phenotype}.regenie.gz | xargs cat | zgrep -hE '^[0-9]' | gzip > ${phenotype}.regenie.tmp.gz\n  cat header.gz ${phenotype}.regenie.tmp.gz > ${phenotype}.regenie.tmp2.gz\n  rm ${phenotype}.regenie.tmp.gz\n  zcat ${phenotype}.regenie.tmp2.gz | sed 's/ /\\t/g' | bgzip -c > ${phenotype}.regenie.gz\n  rm ${phenotype}.regenie.tmp2.gz\n  tabix -f -b 2 -e 2 -s 1 -S 1 ${phenotype}.regenie.gz\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n  # static header due to split\n  ls -1v ${regenie_chromosomes} | head -n 1 | xargs cat | zgrep -hE 'CHROM' | gzip > header.gz\n  ls *_${phenotype}.regenie.gz | xargs cat | zgrep -hE '^[0-9]' | gzip > ${phenotype}.regenie.tmp.gz\n  cat header.gz ${phenotype}.regenie.tmp.gz > ${phenotype}.regenie.tmp2.gz\n  rm ${phenotype}.regenie.tmp.gz\n  zcat ${phenotype}.regenie.tmp2.gz | sed 's/ /\\t/g' | bgzip -c > ${phenotype}.regenie.gz\n  rm ${phenotype}.regenie.tmp2.gz\n  tabix -f -b 2 -e 2 -s 1 -S 1 ${phenotype}.regenie.gz\n\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype",
            "regenie_chromosomes"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "publishDir \"${params.outdir}/results\", mode: 'copy'",
            "tag \"${phenotype}\""
        ],
        "when": "",
        "stub": ""
    },
    "REGENIE_STEP2": {
        "name_process": "REGENIE_STEP2",
        "string_process": "process REGENIE_STEP2 {\n\n  publishDir \"${params.outdir}/logs\", mode: 'copy', pattern: '*.log'\n\n  tag \"${plink2_pgen_file.simpleName}\"\n\n  input:\n\t  path step1_out\n    tuple val(filename), path(plink2_pgen_file), path(plink2_psam_file), path(plink2_pvar_file)\n    path phenotypes_file\n    path sample_file\n    path covariates_file\n\n  output:\n    tuple val(filename), path(\"*regenie.gz\"), emit: regenie_step2_out\n    path \"${filename}.log\", emit: regenie_step2_out_log\n\n  script:\n    def format = params.genotypes_imputed_format == 'bgen' ? \"--bgen\" : '--pgen'\n    def extension = params.genotypes_imputed_format == 'bgen' ? \".bgen\" : ''\n    def bgen_sample = sample_file.name != 'NO_SAMPLE_FILE' ? \"--sample $sample_file\" : ''\n    def test = \"--test $params.regenie_test\"\n    def firthApprox = params.regenie_firth_approx ? \"--approx\" : \"\"\n    def firth = params.regenie_firth ? \"--firth $firthApprox\" : \"\"\n    def binaryTrait =  params.phenotypes_binary_trait ? \"--bt $firth \" : \"\"\n    def range = params.regenie_range != '' ? \"--range $params.regenie_range\" : ''\n    def covariants = covariates_file.name != 'NO_COV_FILE' ? \"--covarFile $covariates_file --covarColList ${params.covariates_columns}\" : ''\n    def deleteMissingData = params.phenotypes_delete_missings  ? \"--strict\" : ''\n    def predictions = params.regenie_skip_predictions  ? '--ignore-pred' : \"\"\n    def refFirst = params.regenie_ref_first  ? \"--ref-first\" : ''\n\n  \"\"\"\n  regenie \\\n    --step 2 \\\n    $format ${filename}${extension} \\\n    --phenoFile ${phenotypes_file} \\\n    --phenoColList  ${params.phenotypes_columns} \\\n    --bsize ${params.regenie_bsize_step2} \\\n    --pred regenie_step1_out_pred.list \\\n    --threads ${task.cpus} \\\n    --minMAC ${params.regenie_min_mac} \\\n    --minINFO ${params.regenie_min_imputation_score} \\\n    --gz \\\n    $binaryTrait \\\n    $test \\\n    $bgen_sample \\\n    $range \\\n    $covariants \\\n    $deleteMissingData \\\n    $predictions \\\n    $refFirst \\\n    --out ${filename}\n  \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    def format = params.genotypes_imputed_format == 'bgen' ? \"--bgen\" : '--pgen'\n    def extension = params.genotypes_imputed_format == 'bgen' ? \".bgen\" : ''\n    def bgen_sample = sample_file.name != 'NO_SAMPLE_FILE' ? \"--sample $sample_file\" : ''\n    def test = \"--test $params.regenie_test\"\n    def firthApprox = params.regenie_firth_approx ? \"--approx\" : \"\"\n    def firth = params.regenie_firth ? \"--firth $firthApprox\" : \"\"\n    def binaryTrait =  params.phenotypes_binary_trait ? \"--bt $firth \" : \"\"\n    def range = params.regenie_range != '' ? \"--range $params.regenie_range\" : ''\n    def covariants = covariates_file.name != 'NO_COV_FILE' ? \"--covarFile $covariates_file --covarColList ${params.covariates_columns}\" : ''\n    def deleteMissingData = params.phenotypes_delete_missings  ? \"--strict\" : ''\n    def predictions = params.regenie_skip_predictions  ? '--ignore-pred' : \"\"\n    def refFirst = params.regenie_ref_first  ? \"--ref-first\" : ''\n\n  \"\"\"\n  regenie \\\n    --step 2 \\\n    $format ${filename}${extension} \\\n    --phenoFile ${phenotypes_file} \\\n    --phenoColList  ${params.phenotypes_columns} \\\n    --bsize ${params.regenie_bsize_step2} \\\n    --pred regenie_step1_out_pred.list \\\n    --threads ${task.cpus} \\\n    --minMAC ${params.regenie_min_mac} \\\n    --minINFO ${params.regenie_min_imputation_score} \\\n    --gz \\\n    $binaryTrait \\\n    $test \\\n    $bgen_sample \\\n    $range \\\n    $covariants \\\n    $deleteMissingData \\\n    $predictions \\\n    $refFirst \\\n    --out ${filename}\n  \"\"\"",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "step1_out",
            "filename",
            "plink2_pgen_file",
            "plink2_psam_file",
            "plink2_pvar_file",
            "phenotypes_file",
            "sample_file",
            "covariates_file"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "genepi__nf-gwas",
        "directive": [
            "publishDir \"${params.outdir}/logs\", mode: 'copy', pattern: '*.log'",
            "tag \"${plink2_pgen_file.simpleName}\""
        ],
        "when": "",
        "stub": ""
    }
}
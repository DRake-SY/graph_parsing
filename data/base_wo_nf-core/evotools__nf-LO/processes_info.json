{
    "dataset_genome": {
        "name_process": "dataset_genome",
        "string_process": "\nprocess dataset_genome {\n    label \"small\"\n\n    input:\n    val genome\n    \n    output:\n    path \"${genome}.fasta\"\n\n    stub:\n    \"\"\"\n    touch ${genome}.fasta\n    \"\"\"\n\n    script:\n    \"\"\"\n    if [ ! \\$(which datasets) ]; then \n        if [[ \"\\$OSTYPE\" == \"linux-gnu\"* ]]; then\n            curl -o datasets 'https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/LATEST/linux-amd64/datasets' \n        elif [[ \"\\$OSTYPE\" == \"darwin\"* ]]; then\n                # Mac OSX\n            curl -o datasets 'https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/LATEST/mac/datasets' \n        elif [[ \"\\$OSTYPE\" == \"cygwin\" ]]; then\n            curl -o datasets 'https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/LATEST/linux-amd64/datasets' \n        fi\n        chmod a+x ./datasets\n        ./datasets download genome accession --exclude-rna --exclude-protein --exclude-protein --exclude-gff3 --exclude-genomic-cds ${genome}\n    else\n        datasets download genome accession --exclude-rna --exclude-protein --exclude-protein --exclude-gff3 --exclude-genomic-cds ${genome}\n    fi && \\\n    7za x ncbi_dataset.zip && \\\n    cat ncbi_dataset/data/${genome}/*.fna > ${genome}.fasta && rm -rf ncbi_dataset*\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    if [ ! \\$(which datasets) ]; then \n        if [[ \"\\$OSTYPE\" == \"linux-gnu\"* ]]; then\n            curl -o datasets 'https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/LATEST/linux-amd64/datasets' \n        elif [[ \"\\$OSTYPE\" == \"darwin\"* ]]; then\n                # Mac OSX\n            curl -o datasets 'https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/LATEST/mac/datasets' \n        elif [[ \"\\$OSTYPE\" == \"cygwin\" ]]; then\n            curl -o datasets 'https://ftp.ncbi.nlm.nih.gov/pub/datasets/command-line/LATEST/linux-amd64/datasets' \n        fi\n        chmod a+x ./datasets\n        ./datasets download genome accession --exclude-rna --exclude-protein --exclude-protein --exclude-gff3 --exclude-genomic-cds ${genome}\n    else\n        datasets download genome accession --exclude-rna --exclude-protein --exclude-protein --exclude-gff3 --exclude-genomic-cds ${genome}\n    fi && \\\n    7za x ncbi_dataset.zip && \\\n    cat ncbi_dataset/data/${genome}/*.fna > ${genome}.fasta && rm -rf ncbi_dataset*\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [
            "genome"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "label \"small\""
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${genome}.fasta\n    \"\"\""
    },
    "axtchain_near": {
        "name_process": "axtchain_near",
        "string_process": "\nprocess axtchain_near {\n    tag \"axtchain_n\"\n    publishDir \"${params.outdir}/singlechains\", mode: params.publish_dir_mode, overwrite: true\n    label 'small'\n\n    input:\n        tuple val(srcname), val(tgtname), file(psl) \n        file twoBitS\n        file twoBitT\n\n    output:\n        path \"${srcname}.${tgtname}.chain\", emit: chain_files_ch\n\n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.chain\n    \"\"\"\n\n    script:\n    \"\"\"\n    axtChain $chainNear -verbose=0 -psl $psl ${twoBitS} ${twoBitT} stdout | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    axtChain $chainNear -verbose=0 -psl $psl ${twoBitS} ${twoBitT} stdout | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "srcname",
            "tgtname",
            "psl",
            "twoBitS",
            "twoBitT"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"axtchain_n\"",
            "publishDir \"${params.outdir}/singlechains\", mode: params.publish_dir_mode, overwrite: true",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.chain\n    \"\"\""
    },
    "axtchain_medium": {
        "name_process": "axtchain_medium",
        "string_process": "\nprocess axtchain_medium {\n    tag \"axtchain_m\"\n    publishDir \"${params.outdir}/singlechains\", mode: params.publish_dir_mode, overwrite: true\n    label 'small'\n\n    input:\n        tuple val(srcname), val(tgtname), file(psl) \n        file twoBitS\n        file twoBitT\n\n    output:\n        path \"${srcname}.${tgtname}.chain\", emit: chain_files_ch\n\n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.chain\n    \"\"\"\n\n    script:\n    \"\"\"\n    axtChain $chainMedium -verbose=0 -psl $psl ${twoBitS} ${twoBitT} stdout | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    axtChain $chainMedium -verbose=0 -psl $psl ${twoBitS} ${twoBitT} stdout | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "srcname",
            "tgtname",
            "psl",
            "twoBitS",
            "twoBitT"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"axtchain_m\"",
            "publishDir \"${params.outdir}/singlechains\", mode: params.publish_dir_mode, overwrite: true",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.chain\n    \"\"\""
    },
    "axtchain_far": {
        "name_process": "axtchain_far",
        "string_process": "\nprocess axtchain_far {\n    tag \"axtchain_f\"\n    publishDir \"${params.outdir}/singlechains\", mode: params.publish_dir_mode, overwrite: true\n    label 'small'\n\n    input:\n        tuple val(srcname), val(tgtname), file(psl) \n        file twoBitS\n        file twoBitT\n\n    output:\n        path \"${srcname}.${tgtname}.chain\", emit: chain_files_ch\n\n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.chain\n    \"\"\"\n\n    script:\n    \"\"\"\n    axtChain $chainFar -verbose=0 -psl $psl ${twoBitS} ${twoBitT} stdout | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"        \n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    axtChain $chainFar -verbose=0 -psl $psl ${twoBitS} ${twoBitT} stdout | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "srcname",
            "tgtname",
            "psl",
            "twoBitS",
            "twoBitT"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"axtchain_f\"",
            "publishDir \"${params.outdir}/singlechains\", mode: params.publish_dir_mode, overwrite: true",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.chain\n    \"\"\""
    },
    "axtchain_custom": {
        "name_process": "axtchain_custom",
        "string_process": "\nprocess axtchain_custom {\n    tag \"axtchain_c\"\n    publishDir \"${params.outdir}/singlechains\", mode: params.publish_dir_mode, overwrite: true\n    label 'small'\n\n    input:\n        tuple val(srcname), val(tgtname), file(psl) \n        file twoBitS\n        file twoBitT\n\n    output:\n        path \"${srcname}.${tgtname}.chain\", emit: chain_files_ch\n\n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.chain\n    \"\"\"\n\n    script:\n    \"\"\"\n    axtChain ${params.chainCustom} -verbose=0 -psl $psl ${twoBitS} ${twoBitT} stdout | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    axtChain ${params.chainCustom} -verbose=0 -psl $psl ${twoBitS} ${twoBitT} stdout | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "srcname",
            "tgtname",
            "psl",
            "twoBitS",
            "twoBitT"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"axtchain_c\"",
            "publishDir \"${params.outdir}/singlechains\", mode: params.publish_dir_mode, overwrite: true",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.chain\n    \"\"\""
    },
    "chainMerge": {
        "name_process": "chainMerge",
        "string_process": "\nprocess chainMerge {\n    tag \"chainmerge\"\n    publishDir \"${params.outdir}/rawchain\", mode: 'copy', overwrite: true\n\n    cpus { 1 * task.attempt }\n    memory { 32.GB * task.attempt }\n    time { 24.hour * task.attempt }\n    clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\\sB]/,'')}\"\n \n    input: \n        file chains from chain_files_ch.collect()\n        \n    output: \n        file \"rawchain.chain\" into rawchain_ch  \n  \n    script:\n    \"\"\"\n    chainMergeSort $chains | chainSplit run stdin -lump=1 \n    mv run/000.chain ./rawchain.chain\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    chainMergeSort $chains | chainSplit run stdin -lump=1 \n    mv run/000.chain ./rawchain.chain\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chain_files_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "rawchain_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"chainmerge\"",
            "publishDir \"${params.outdir}/rawchain\", mode: 'copy', overwrite: true",
            "cpus { 1 * task.attempt }",
            "memory { 32.GB * task.attempt }",
            "time { 24.hour * task.attempt }",
            "clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[ sB]/,'')}\""
        ],
        "when": "",
        "stub": ""
    },
    "chainNet_old": {
        "name_process": "chainNet_old",
        "string_process": "\nprocess chainNet_old{\n    tag \"chainnet\"\n    publishDir \"${params.outdir}/chainnet\", mode: 'copy', overwrite: true\n    label 'medium'\n \n    input:\n        file rawchain  \n        file twoBitS\n        file twoBitT\n        file twoBitsizeS\n        file twoBitsizeT\n        \n    output: \n        path \"liftover.chain\", emit: liftover_ch  \n        path \"netfile.net\", emit: netfile_ch  \n  \n    stub:\n    \"\"\"\n    touch liftover.chain\n    touch netfile.net\n    \"\"\"\n\n    script:\n    if ( params.aligner != \"blat\" & params.aligner != \"nucmer\" & params.aligner != \"GSAlign\")\n    \"\"\"\n    chainPreNet ${rawchain} ${twoBitsizeS} ${twoBitsizeT} stdout |\n        chainNet -verbose=0 stdin ${twoBitsizeS} ${twoBitsizeT} stdout /dev/null | netSyntenic stdin netfile.net\n    netChainSubset -verbose=0 netfile.net ${rawchain} stdout | chainStitchId stdin stdout > liftover.chain\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    if ( params.aligner != \"blat\" & params.aligner != \"nucmer\" & params.aligner != \"GSAlign\")\n    \"\"\"\n    chainPreNet ${rawchain} ${twoBitsizeS} ${twoBitsizeT} stdout |\n        chainNet -verbose=0 stdin ${twoBitsizeS} ${twoBitsizeT} stdout /dev/null | netSyntenic stdin netfile.net\n    netChainSubset -verbose=0 netfile.net ${rawchain} stdout | chainStitchId stdin stdout > liftover.chain\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rawchain",
            "twoBitS",
            "twoBitT",
            "twoBitsizeS",
            "twoBitsizeT"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"chainnet\"",
            "publishDir \"${params.outdir}/chainnet\", mode: 'copy', overwrite: true",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch liftover.chain\n    touch netfile.net\n    \"\"\""
    },
    "chainNet": {
        "name_process": "chainNet",
        "string_process": "\nprocess chainNet{\n    tag \"chainnet\"\n    publishDir \"${params.outdir}/chainnet\", mode: 'copy', overwrite: true\n\n    cpus { 1 * task.attempt }\n    memory { 32.GB * task.attempt }\n    time { 24.hour * task.attempt }\n    clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\\sB]/,'')}\"\n \n    input:\n        file rawchain from rawchain_ch  \n        file twoBitS from twoBsrc_ch\n        file twoBitT from twoBtgt_ch\n        file twoBitsizeS from twoBsrcNFO_ch\n        file twoBitsizeT from twoBtgtNFO_ch\n        \n    output: \n        file \"liftover.chain\" into liftover_ch  \n        file \"netfile.net\" into netfile_ch  \n  \n    script:\n    if ( params.aligner != \"blat\" & params.aligner != \"nucmer\" )\n    \"\"\"\n    chainPreNet ${rawchain} ${twoBitsizeS} ${twoBitsizeT} stdout |\n        chainNet -verbose=0 stdin ${twoBitsizeS} ${twoBitsizeT} stdout /dev/null |\n        netSyntenic stdin netfile.net\n    netChainSubset -verbose=0 netfile.net ${rawchain} stdout | chainStitchId stdin stdout > liftover.chain\n    \"\"\"\n    else\n    \"\"\"\n    chainPreNet ${rawchain} ${twoBitsizeS} ${twoBitsizeT} stdout |\n        chainNet -verbose=0 stdin ${twoBitsizeS} ${twoBitsizeT} netfile.net /dev/null \n    netChainSubset -verbose=0 netfile.net ${rawchain} stdout | chainStitchId stdin liftover.chain\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    if ( params.aligner != \"blat\" & params.aligner != \"nucmer\" )\n    \"\"\"\n    chainPreNet ${rawchain} ${twoBitsizeS} ${twoBitsizeT} stdout |\n        chainNet -verbose=0 stdin ${twoBitsizeS} ${twoBitsizeT} stdout /dev/null |\n        netSyntenic stdin netfile.net\n    netChainSubset -verbose=0 netfile.net ${rawchain} stdout | chainStitchId stdin stdout > liftover.chain\n    \"\"\"\n    else\n    \"\"\"\n    chainPreNet ${rawchain} ${twoBitsizeS} ${twoBitsizeT} stdout |\n        chainNet -verbose=0 stdin ${twoBitsizeS} ${twoBitsizeT} netfile.net /dev/null \n    netChainSubset -verbose=0 netfile.net ${rawchain} stdout | chainStitchId stdin liftover.chain\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rawchain_ch",
            "twoBsrc_ch",
            "twoBtgt_ch",
            "twoBsrcNFO_ch",
            "twoBtgtNFO_ch"
        ],
        "nb_inputs": 5,
        "outputs": [
            "liftover_ch",
            "netfile_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"chainnet\"",
            "publishDir \"${params.outdir}/chainnet\", mode: 'copy', overwrite: true",
            "cpus { 1 * task.attempt }",
            "memory { 32.GB * task.attempt }",
            "time { 24.hour * task.attempt }",
            "clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[ sB]/,'')}\""
        ],
        "when": "",
        "stub": ""
    },
    "netSynt": {
        "name_process": "netSynt",
        "string_process": "\nprocess netSynt {\n    tag \"netSyntenic\"\n    publishDir \"${params.outdir}/chainnet\", mode: 'copy', overwrite: true\n    label 'medium'\n \n    input:\n        file netfile  \n        \n    output: \n        path \"netfile.synt.net\", emit: netfile_ch  \n  \n    stub:\n    \"\"\"\n    touch netfile.synt.net\n    \"\"\"\n\n    script:\n    \"\"\"\n    netSyntenic ${netfile} netfile.synt.net\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    netSyntenic ${netfile} netfile.synt.net\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "netfile"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"netSyntenic\"",
            "publishDir \"${params.outdir}/chainnet\", mode: 'copy', overwrite: true",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch netfile.synt.net\n    \"\"\""
    },
    "chainsubset": {
        "name_process": "chainsubset",
        "string_process": "\nprocess chainsubset{\n    tag \"chainsubs\"\n    publishDir \"${params.outdir}/chainnet\", mode: 'copy', overwrite: true\n    label 'medium'\n \n    input:\n        file netfile\n        file rawchain\n        \n    output: \n        path \"liftover.chain\", emit: liftover_ch  \n  \n    stub:\n    \"\"\"\n    touch liftover.chain\n    \"\"\"\n\n    script:\n    \"\"\"\n    netChainSubset -verbose=0 ${netfile} ${rawchain} stdout | chainStitchId stdin stdout > liftover.chain\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    netChainSubset -verbose=0 ${netfile} ${rawchain} stdout | chainStitchId stdin stdout > liftover.chain\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "netfile",
            "rawchain"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"chainsubs\"",
            "publishDir \"${params.outdir}/chainnet\", mode: 'copy', overwrite: true",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch liftover.chain\n    \"\"\""
    },
    "chain2maf": {
        "name_process": "chain2maf",
        "string_process": "\nprocess chain2maf {\n    tag \"chainmaf\"\n    publishDir \"${params.outdir}/maf\", mode: 'copy', overwrite: true\n    label 'medium'\n \n    input:\n        path chain  \n        path twoBitS\n        path twoBitT\n        path twoBitsizeS\n        path twoBitsizeT\n\n    output:\n        path \"${params.chain_name}.maf\"\n\n    stub:\n    \"\"\"\n    touch ${params.chain_name}.maf\n    \"\"\"\n\n    script:\n    \"\"\"\n    chainToAxt ${chain} ${twoBitS} ${twoBitT} /dev/stdout | \\\n        axtToMaf /dev/stdin ${twoBitsizeS} ${twoBitsizeT} ${params.chain_name}.maf\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    chainToAxt ${chain} ${twoBitS} ${twoBitT} /dev/stdout | \\\n        axtToMaf /dev/stdin ${twoBitsizeS} ${twoBitsizeT} ${params.chain_name}.maf\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chain",
            "twoBitS",
            "twoBitT",
            "twoBitsizeS",
            "twoBitsizeT"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"chainmaf\"",
            "publishDir \"${params.outdir}/maf\", mode: 'copy', overwrite: true",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${params.chain_name}.maf\n    \"\"\""
    },
    "name_maf_seq": {
        "name_process": "name_maf_seq",
        "string_process": "\nprocess name_maf_seq {\n    tag \"namemaf\"\n    publishDir \"${params.outdir}/maf\", mode: 'copy', overwrite: true\n    label 'medium'\n \n    input:\n        path maf\n\n    output:\n        path \"${maf.simpleName}.fixed.maf\"\n\n    stub:\n    \"\"\"\n    touch ${maf.simpleName}.fixed.maf\n    \"\"\"\n\n    script:\n    $/\n    #!/usr/bin/env python\n    import sys\n    \n    n=0\n    of = open(\"${maf.simpleName}.fixed.maf\", \"w\")\n    for line in open(\"$maf\"):\n        line = line.split()\n        if len(line) == 0:\n            of.write('\\t'.join(line) + \"\\n\")\n            continue\n        if \"s\" == line[0] and n == 1:\n            line[1] = 'target.' + line[1]\n            n = 0\n            of.write('\\t'.join(line) + \"\\n\")\n            continue\n        if \"s\" == line[0] and n == 0:\n            line[1] = 'source.' + line[1]\n            n = 1\n            of.write('\\t'.join(line) + \"\\n\")\n            continue\n        of.write('\\t'.join(line) + \"\\n\")\n    /$\n}",
        "nb_lignes_process": 40,
        "string_script": "    $/\n    #!/usr/bin/env python\n    import sys\n    \n    n=0\n    of = open(\"${maf.simpleName}.fixed.maf\", \"w\")\n    for line in open(\"$maf\"):\n        line = line.split()\n        if len(line) == 0:\n            of.write('\\t'.join(line) + \"\\n\")\n            continue\n        if \"s\" == line[0] and n == 1:\n            line[1] = 'target.' + line[1]\n            n = 0\n            of.write('\\t'.join(line) + \"\\n\")\n            continue\n        if \"s\" == line[0] and n == 0:\n            line[1] = 'source.' + line[1]\n            n = 1\n            of.write('\\t'.join(line) + \"\\n\")\n            continue\n        of.write('\\t'.join(line) + \"\\n\")\n    /$",
        "nb_lignes_script": 22,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "maf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"namemaf\"",
            "publishDir \"${params.outdir}/maf\", mode: 'copy', overwrite: true",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${maf.simpleName}.fixed.maf\n    \"\"\""
    },
    "mafstats": {
        "name_process": "mafstats",
        "string_process": "\nprocess mafstats {\n    tag \"mafstats\"\n    publishDir \"${params.outdir}/stats\", mode: 'copy', overwrite: true\n    label 'medium'\n \n    input:\n        path final_maf\n        val sourceName\n        val targetName\n\n    output:\n        path \"mafCoverage.*\"\n        path \"mafIdentity.*\"\n        path \"mafStats.*\"\n\n    stub:\n    \"\"\"\n    touch mafCoverage.out\n    touch mafIdentity.out\n    touch mafStats.out\n    \"\"\"\n\n    script:\n    if (workflow.containerEngine)\n    \"\"\"\n    mafCoverage -m ${final_maf} | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafCoverage.out\n    mafCoverage -m ${final_maf} --identity | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafIdentity.out\n    mafStats -m ${final_maf} | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafStats.out    \n    \"\"\"\n    else if (params.mafTools && !workflow.containerEngine)\n    \"\"\"\n    ${mafTools_ch}/bin/mafCoverage -m ${final_maf} | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafCoverage.out\n    ${mafTools_ch}/bin/mafCoverage -m ${final_maf} --identity | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafIdentity.out\n    ${mafTools_ch}/bin/mafStats -m ${final_maf} | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafStats.out\n    \"\"\" \n    else \n    \"\"\"\n    if [ `which mafCoverage` ]; then\n        mafCoverage -m ${final_maf} | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafCoverage.out\n        mafCoverage -m ${final_maf} --identity | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafIdentity.out\n    else\n        touch mafCoverage.dum\n        touch mafIdentity.dum\n    fi\n    if [ `which mafStats` ]; then\n        mafStats -m ${final_maf} | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafStats.out    \n    else\n        touch mafStats.dum\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    if (workflow.containerEngine)\n    \"\"\"\n    mafCoverage -m ${final_maf} | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafCoverage.out\n    mafCoverage -m ${final_maf} --identity | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafIdentity.out\n    mafStats -m ${final_maf} | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafStats.out    \n    \"\"\"\n    else if (params.mafTools && !workflow.containerEngine)\n    \"\"\"\n    ${mafTools_ch}/bin/mafCoverage -m ${final_maf} | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafCoverage.out\n    ${mafTools_ch}/bin/mafCoverage -m ${final_maf} --identity | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafIdentity.out\n    ${mafTools_ch}/bin/mafStats -m ${final_maf} | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafStats.out\n    \"\"\" \n    else \n    \"\"\"\n    if [ `which mafCoverage` ]; then\n        mafCoverage -m ${final_maf} | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafCoverage.out\n        mafCoverage -m ${final_maf} --identity | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafIdentity.out\n    else\n        touch mafCoverage.dum\n        touch mafIdentity.dum\n    fi\n    if [ `which mafStats` ]; then\n        mafStats -m ${final_maf} | sed 's/source/${sourceName}/g' | sed 's/target/${targetName}/g' > mafStats.out    \n    else\n        touch mafStats.dum\n    fi\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "final_maf",
            "sourceName",
            "targetName"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"mafstats\"",
            "publishDir \"${params.outdir}/stats\", mode: 'copy', overwrite: true",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch mafCoverage.out\n    touch mafIdentity.out\n    touch mafStats.out\n    \"\"\""
    },
    "liftover": {
        "name_process": "liftover",
        "string_process": "\nprocess liftover{\n    tag \"liftover\"\n    publishDir \"${params.outdir}/lifted\", mode: 'copy', overwrite: true\n\n    cpus { 1 * task.attempt }\n    memory { 32.GB * task.attempt }\n    time { 12.hour * task.attempt }\n    clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\\sB]/,'')}\"\n \n    input:\n        file liftover from liftover_ch\n\n    output:\n        file \"lifted.bed\" optional true into lifted_ch\n        file \"unmapped.bed\" optional true into unmapped_ch\n\n    script:\n    if (params.annotation != 'NO_FILE' & params.annotation != '' )\n        \"\"\"\n        liftOver ${params.annotation} ${liftover} lifted.bed unmapped.bed\n        \"\"\"\n    else\n        \"\"\"\n        echo \"Nothing to be done\"\n        \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    if (params.annotation != 'NO_FILE' & params.annotation != '' )\n        \"\"\"\n        liftOver ${params.annotation} ${liftover} lifted.bed unmapped.bed\n        \"\"\"\n    else\n        \"\"\"\n        echo \"Nothing to be done\"\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "LiftOver"
        ],
        "tools_url": [
            "https://bio.tools/liftover"
        ],
        "tools_dico": [
            {
                "name": "LiftOver",
                "uri": "https://bio.tools/liftover",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This service converts genome coordinates and genome annotation files between assemblies.",
                "homepage": "http://api.bioinfo.no/wsdl/LiftOverService.wsdl"
            }
        ],
        "inputs": [
            "liftover_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "lifted_ch",
            "unmapped_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"liftover\"",
            "publishDir \"${params.outdir}/lifted\", mode: 'copy', overwrite: true",
            "cpus { 1 * task.attempt }",
            "memory { 32.GB * task.attempt }",
            "time { 12.hour * task.attempt }",
            "clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[ sB]/,'')}\""
        ],
        "when": "",
        "stub": ""
    },
    "crossmap": {
        "name_process": "crossmap",
        "string_process": "\nprocess crossmap{\n    tag \"crossmap\"\n    publishDir \"${params.outdir}/lifted\", mode: params.publish_dir_mode, overwrite: true\n    label 'medium'\n \n    input:\n        path chain\n        path annotation\n        path tgt_ch\n\n    output:\n        path \"${params.chain_name}.${params.annotation_format}\", emit: lifted_ch\n        path \"*unmap*\",  optional: true, emit: unmapped_ch\n\n    stub:\n    \"\"\"\n    touch ${params.chain_name}.${params.annotation_format}\n    \"\"\"\n\n    script:\n    if ( params.annotation_format == 'bam' )\n        \"\"\"\n        CrossMap.py bam -a ${chain} ${annotation} ${params.chain_name}.${params.annotation_format} \n        \"\"\"\n    else if ( params.annotation_format == 'vcf' )\n        \"\"\"\n        CrossMap.py vcf -a ${chain} ${annotation} ${tgt_ch} ${params.chain_name}.${params.annotation_format} \n        \"\"\"\n    else if ( params.annotation_format == 'maf' )\n        \"\"\"\n        CrossMap.py maf -a ${chain} ${annotation} ${tgt_ch} ${params.maf_tgt_name} ${params.chain_name}.${params.annotation_format} \n        \"\"\"\n    else \n        \"\"\"\n        CrossMap.py ${params.annotation_format} ${chain} ${annotation} ${params.chain_name}.${params.annotation_format}     \n        \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    if ( params.annotation_format == 'bam' )\n        \"\"\"\n        CrossMap.py bam -a ${chain} ${annotation} ${params.chain_name}.${params.annotation_format} \n        \"\"\"\n    else if ( params.annotation_format == 'vcf' )\n        \"\"\"\n        CrossMap.py vcf -a ${chain} ${annotation} ${tgt_ch} ${params.chain_name}.${params.annotation_format} \n        \"\"\"\n    else if ( params.annotation_format == 'maf' )\n        \"\"\"\n        CrossMap.py maf -a ${chain} ${annotation} ${tgt_ch} ${params.maf_tgt_name} ${params.chain_name}.${params.annotation_format} \n        \"\"\"\n    else \n        \"\"\"\n        CrossMap.py ${params.annotation_format} ${chain} ${annotation} ${params.chain_name}.${params.annotation_format}     \n        \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chain",
            "annotation",
            "tgt_ch"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"crossmap\"",
            "publishDir \"${params.outdir}/lifted\", mode: params.publish_dir_mode, overwrite: true",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${params.chain_name}.${params.annotation_format}\n    \"\"\""
    },
    "features_stats": {
        "name_process": "features_stats",
        "string_process": "\nprocess features_stats {\n    tag \"feat_stats\"\n    publishDir \"${params.outdir}/stats\", mode: params.publish_dir_mode, overwrite: true\n    label 'medium'\n\n    input:\n        path all_feature\n        path lifted_features\n\n    output:\n        path \"features.txt\"\n\n    stub:\n    \"\"\"\n    touch features.txt\n    \"\"\"\n\n    script:\n    if ( params.annotation_format == 'gff' || params.annotation_format == \"gtf\" || params.annotation_format == \"bed\" )\n        \"\"\"\n        if file --dereference --mime-type \"$lifted_features\" | grep -q gzip\\$; then\n            liftedfeat=`gunzip -c ${lifted_features} | awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}'`\n            liftedgenes=`gunzip -c ${lifted_features} | awk 'BEGIN{n=0};\\$1!~\"#\" && \\$0~\"gene\" {n+=1}; END{print n}'`\n        else \n            liftedfeat=`awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}' ${lifted_features}`\n            liftedgenes=`awk 'BEGIN{n=0};\\$1!~\"#\" && \\$0~\"gene\" {n+=1}; END{print n}' ${lifted_features}`\n        fi\n        if file --dereference --mime-type \"$all_feature\" | grep -q gzip\\$; then\n            allfeat=`gunzip -c ${all_feature} | awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}'`\n            allgenes=`gunzip -c ${all_feature} | awk 'BEGIN{n=0};\\$1!~\"#\" && \\$0~\"gene\" {n+=1}; END{print n}'`\n        else \n            allfeat=`awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}' ${all_feature}`\n            allgenes=`awk 'BEGIN{n=0};\\$1!~\"#\" && \\$0~\"gene\" {n+=1}; END{print n}' ${all_feature}`\n        fi\n        echo nFEATURES nFEATURES_lifted nGENES nGENES_lifted > features.txt\n        echo \\$allfeat \\$liftedfeat \\$allgenes \\$liftedgenes >> features.txt\n        \"\"\"\n    else if ( params.annotation_format == 'vcf' )\n        \"\"\"\n        if file --dereference --mime-type \"$lifted_features\" | grep -q gzip\\$; then\n            liftedvars=`gunzip -c ${lifted_features} | awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}'`\n        else \n            liftedvars=`awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}' ${lifted_features}`\n        fi\n        if file --dereference --mime-type \"$all_feature\" | grep -q gzip\\$; then\n            allvars=`gunzip -c ${all_feature} | awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}'`\n        else \n            allvars=`awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}' ${all_feature}`\n        fi\n        echo nFEATURES nFEATURES_lifted nGENES nGENES_lifted > features.txt\n        echo \\$allvars \\$liftedvars NA NA>> features.txt\n        \"\"\"\n    else if ( params.annotation_format == 'maf' )\n        \"\"\"\n        if file --dereference --mime-type \"$lifted_features\" | grep -q gzip\\$; then\n            liftedfeat=`gunzip -c ${lifted_features} | awk 'BEGIN{n=0};\\$1~\"a\" && \\$1!~\"#\" {n+=1}; END{print n}'`\n        else \n            liftedfeat=`awk 'BEGIN{n=0};\\$1~\"a\" && \\$1!~\"#\" {n+=1}; END{print n}' ${lifted_features}`\n        fi\n        if file --dereference --mime-type \"$all_feature\" | grep -q gzip\\$; then\n            allfeat=`gunzip -c ${all_feature} | awk 'BEGIN{n=0};\\$1~\"a\" && \\$1!~\"#\" {n+=1}; END{print n}'`\n        else \n            allfeat=`awk 'BEGIN{n=0};\\$1~\"a\" && \\$1!~\"#\" {n+=1}; END{print n}' ${all_feature}`\n        fi\n        echo nFEATURES nFEATURES_lifted nGENES nGENES_lifted > features.txt\n        echo \\$allfeat \\$liftedfeat NA NA>> features.txt\n        \"\"\"\n    else if ( params.annotation_format == 'bam' )\n        \"\"\"\n        liftedfeat=`bedtools bamtobed -i ${lifted_features} | awk 'END{print NR}'`\n        allfeat=`bedtools bamtobed -i ${all_feature} | awk 'END{print NR}'`\n        echo nFEATURES nFEATURES_lifted nGENES nGENES_lifted > features.txt\n        echo \\$allfeat \\$liftedfeat NA NA>> features.txt\n        \"\"\"\n}",
        "nb_lignes_process": 74,
        "string_script": "    if ( params.annotation_format == 'gff' || params.annotation_format == \"gtf\" || params.annotation_format == \"bed\" )\n        \"\"\"\n        if file --dereference --mime-type \"$lifted_features\" | grep -q gzip\\$; then\n            liftedfeat=`gunzip -c ${lifted_features} | awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}'`\n            liftedgenes=`gunzip -c ${lifted_features} | awk 'BEGIN{n=0};\\$1!~\"#\" && \\$0~\"gene\" {n+=1}; END{print n}'`\n        else \n            liftedfeat=`awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}' ${lifted_features}`\n            liftedgenes=`awk 'BEGIN{n=0};\\$1!~\"#\" && \\$0~\"gene\" {n+=1}; END{print n}' ${lifted_features}`\n        fi\n        if file --dereference --mime-type \"$all_feature\" | grep -q gzip\\$; then\n            allfeat=`gunzip -c ${all_feature} | awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}'`\n            allgenes=`gunzip -c ${all_feature} | awk 'BEGIN{n=0};\\$1!~\"#\" && \\$0~\"gene\" {n+=1}; END{print n}'`\n        else \n            allfeat=`awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}' ${all_feature}`\n            allgenes=`awk 'BEGIN{n=0};\\$1!~\"#\" && \\$0~\"gene\" {n+=1}; END{print n}' ${all_feature}`\n        fi\n        echo nFEATURES nFEATURES_lifted nGENES nGENES_lifted > features.txt\n        echo \\$allfeat \\$liftedfeat \\$allgenes \\$liftedgenes >> features.txt\n        \"\"\"\n    else if ( params.annotation_format == 'vcf' )\n        \"\"\"\n        if file --dereference --mime-type \"$lifted_features\" | grep -q gzip\\$; then\n            liftedvars=`gunzip -c ${lifted_features} | awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}'`\n        else \n            liftedvars=`awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}' ${lifted_features}`\n        fi\n        if file --dereference --mime-type \"$all_feature\" | grep -q gzip\\$; then\n            allvars=`gunzip -c ${all_feature} | awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}'`\n        else \n            allvars=`awk 'BEGIN{n=0};\\$1!~\"#\"{n+=1}; END{print n}' ${all_feature}`\n        fi\n        echo nFEATURES nFEATURES_lifted nGENES nGENES_lifted > features.txt\n        echo \\$allvars \\$liftedvars NA NA>> features.txt\n        \"\"\"\n    else if ( params.annotation_format == 'maf' )\n        \"\"\"\n        if file --dereference --mime-type \"$lifted_features\" | grep -q gzip\\$; then\n            liftedfeat=`gunzip -c ${lifted_features} | awk 'BEGIN{n=0};\\$1~\"a\" && \\$1!~\"#\" {n+=1}; END{print n}'`\n        else \n            liftedfeat=`awk 'BEGIN{n=0};\\$1~\"a\" && \\$1!~\"#\" {n+=1}; END{print n}' ${lifted_features}`\n        fi\n        if file --dereference --mime-type \"$all_feature\" | grep -q gzip\\$; then\n            allfeat=`gunzip -c ${all_feature} | awk 'BEGIN{n=0};\\$1~\"a\" && \\$1!~\"#\" {n+=1}; END{print n}'`\n        else \n            allfeat=`awk 'BEGIN{n=0};\\$1~\"a\" && \\$1!~\"#\" {n+=1}; END{print n}' ${all_feature}`\n        fi\n        echo nFEATURES nFEATURES_lifted nGENES nGENES_lifted > features.txt\n        echo \\$allfeat \\$liftedfeat NA NA>> features.txt\n        \"\"\"\n    else if ( params.annotation_format == 'bam' )\n        \"\"\"\n        liftedfeat=`bedtools bamtobed -i ${lifted_features} | awk 'END{print NR}'`\n        allfeat=`bedtools bamtobed -i ${all_feature} | awk 'END{print NR}'`\n        echo nFEATURES nFEATURES_lifted nGENES nGENES_lifted > features.txt\n        echo \\$allfeat \\$liftedfeat NA NA>> features.txt\n        \"\"\"",
        "nb_lignes_script": 55,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_feature",
            "lifted_features"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"feat_stats\"",
            "publishDir \"${params.outdir}/stats\", mode: params.publish_dir_mode, overwrite: true",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch features.txt\n    \"\"\""
    },
    "make_report": {
        "name_process": "make_report",
        "string_process": "\nprocess make_report {\n    tag \"report\"\n    publishDir \"${params.outdir}/reports\", mode: params.publish_dir_mode, overwrite: true\n    label 'small'\n\n    input:\n    path mafstats\n    path mafcov\n    path mafidn\n    path feat\n\n    output:\n    path \"chainMetrics.html\"\n\n    stub:\n    \"\"\"\n    touch chainMetrics.html\n    \"\"\"\n\n    script:\n    \"\"\"\n    cp ${baseDir}/assets/gatherMetrics.Rmd ./\n    R -e \"rmarkdown::render('gatherMetrics.Rmd',output_file='chainMetrics.html')\"\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    cp ${baseDir}/assets/gatherMetrics.Rmd ./\n    R -e \"rmarkdown::render('gatherMetrics.Rmd',output_file='chainMetrics.html')\"\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mafstats",
            "mafcov",
            "mafidn",
            "feat"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"report\"",
            "publishDir \"${params.outdir}/reports\", mode: params.publish_dir_mode, overwrite: true",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch chainMetrics.html\n    \"\"\""
    },
    "blat_near": {
        "name_process": "blat_near",
        "string_process": "\nprocess blat_near{    \n    tag \"blat.${params.distance}.${srcname}.${tgtname}\"\n    label 'medium'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        file tgtlift \n        file srclift \n        file ooc11\n        file ooc12\n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    blat ${srcfile} ${tgtfile} ${blatNear} -ooc=${ooc11} -out=psl tmp.psl \n    liftUp -type=.psl stdout $srclift warn tmp.psl |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    blat ${srcfile} ${tgtfile} ${blatNear} -ooc=${ooc11} -out=psl tmp.psl \n    liftUp -type=.psl stdout $srclift warn tmp.psl |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BLAT"
        ],
        "tools_url": [
            "https://bio.tools/blat"
        ],
        "tools_dico": [
            {
                "name": "BLAT",
                "uri": "https://bio.tools/blat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast, accurate spliced alignment of DNA sequences.",
                "homepage": "http://genome.ucsc.edu/cgi-bin/hgBlat?command=start"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift",
            "ooc11",
            "ooc12"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"blat.${params.distance}.${srcname}.${tgtname}\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "blat_medium": {
        "name_process": "blat_medium",
        "string_process": "\nprocess blat_medium{    \n    tag \"blat.${params.distance}.${srcname}.${tgtname}\"\n    label 'medium'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        file tgtlift \n        file srclift \n        file ooc11\n        file ooc12\n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    blat ${srcfile} ${tgtfile} ${blatMedium} -ooc=${ooc11} -out=psl tmp.psl \n    liftUp -type=.psl stdout $srclift warn tmp.psl |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    blat ${srcfile} ${tgtfile} ${blatMedium} -ooc=${ooc11} -out=psl tmp.psl \n    liftUp -type=.psl stdout $srclift warn tmp.psl |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BLAT"
        ],
        "tools_url": [
            "https://bio.tools/blat"
        ],
        "tools_dico": [
            {
                "name": "BLAT",
                "uri": "https://bio.tools/blat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast, accurate spliced alignment of DNA sequences.",
                "homepage": "http://genome.ucsc.edu/cgi-bin/hgBlat?command=start"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift",
            "ooc11",
            "ooc12"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"blat.${params.distance}.${srcname}.${tgtname}\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "blat_far": {
        "name_process": "blat_far",
        "string_process": "\nprocess blat_far{    \n    tag \"blat.${params.distance}.${srcname}.${tgtname}\"\n    label 'medium'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        file tgtlift \n        file srclift \n        file ooc11\n        file ooc12\n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    blat ${srcfile} ${tgtfile} ${blatFar} -ooc=${ooc12} -out=psl tmp.psl \n    liftUp -type=.psl stdout $srclift warn tmp.psl |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    blat ${srcfile} ${tgtfile} ${blatFar} -ooc=${ooc12} -out=psl tmp.psl \n    liftUp -type=.psl stdout $srclift warn tmp.psl |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BLAT"
        ],
        "tools_url": [
            "https://bio.tools/blat"
        ],
        "tools_dico": [
            {
                "name": "BLAT",
                "uri": "https://bio.tools/blat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast, accurate spliced alignment of DNA sequences.",
                "homepage": "http://genome.ucsc.edu/cgi-bin/hgBlat?command=start"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift",
            "ooc11",
            "ooc12"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"blat.${params.distance}.${srcname}.${tgtname}\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "blat_balanced": {
        "name_process": "blat_balanced",
        "string_process": "\nprocess blat_balanced{    \n    tag \"blat.${params.distance}.${srcname}.${tgtname}\"\n    label 'medium'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        file tgtlift \n        file srclift \n        file ooc11\n        file ooc12\n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    blat ${srcfile} ${tgtfile} ${blatBalanced} -ooc=${ooc12} -out=psl tmp.psl \n    liftUp -type=.psl stdout $srclift warn tmp.psl |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    blat ${srcfile} ${tgtfile} ${blatBalanced} -ooc=${ooc12} -out=psl tmp.psl \n    liftUp -type=.psl stdout $srclift warn tmp.psl |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BLAT"
        ],
        "tools_url": [
            "https://bio.tools/blat"
        ],
        "tools_dico": [
            {
                "name": "BLAT",
                "uri": "https://bio.tools/blat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast, accurate spliced alignment of DNA sequences.",
                "homepage": "http://genome.ucsc.edu/cgi-bin/hgBlat?command=start"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift",
            "ooc11",
            "ooc12"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"blat.${params.distance}.${srcname}.${tgtname}\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "blat": {
        "name_process": "blat",
        "string_process": "\nprocess blat{    \n    tag \"blat.${srcname}.${tgtname}\"\n    publishDir \"${params.outdir}/alignments\"\n\n    cpus { 1 * task.attempt }\n    memory { 8.GB * task.attempt }\n    time { 24.hour * task.attempt }\n    clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\\sB]/,'')}\"\n\n    input: \n        set srcname, srcfile, tgtname, tgtfile from forblat_ch  \n        file tgtlift from tgt_lift_chB\n        file srclift from src_lift_chB\n        file ooc11 from ooc11_ch\n        file ooc12 from ooc12_ch\n\n    output: \n        tuple srcname, tgtname, \"${srcname}.${tgtname}.psl\" into al_files_chB\n\n    when:\n        params.aligner == \"blat\"\n  \n    script:\n    if( params.distance == 'balanced' )\n        \"\"\"\n        blat ${srcfile} ${tgtfile} ${blatBalanced} -ooc=${ooc12} -out=psl tmp.psl \n        liftUp -type=.psl stdout $srclift warn tmp.psl |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'near' )\n        \"\"\"\n        blat ${srcfile} ${tgtfile} ${blatNear} -ooc=${ooc11} -out=psl tmp.psl \n        liftUp -type=.psl stdout $srclift warn tmp.psl |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'medium' )\n        \"\"\"\n        blat ${srcfile} ${tgtfile} ${blatMedium} -ooc=${ooc11} -out=psl tmp.psl \n        liftUp -type=.psl stdout $srclift warn tmp.psl |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'far' )\n        \"\"\"\n        blat ${srcfile} ${tgtfile} ${blatFar} -ooc=${ooc12} -out=psl tmp.psl \n        liftUp -type=.psl stdout $srclift warn tmp.psl |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'custom' )\n        \"\"\"\n        blat ${srcfile} ${tgtfile} ${params.custom} -ooc=${ooc12} -out=psl tmp.psl \n        liftUp -type=.psl stdout $srclift warn tmp.psl |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else\n        \"\"\"\n        echo \"Distance not recognised\"\n        \"\"\"\n\n}",
        "nb_lignes_process": 58,
        "string_script": "    if( params.distance == 'balanced' )\n        \"\"\"\n        blat ${srcfile} ${tgtfile} ${blatBalanced} -ooc=${ooc12} -out=psl tmp.psl \n        liftUp -type=.psl stdout $srclift warn tmp.psl |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'near' )\n        \"\"\"\n        blat ${srcfile} ${tgtfile} ${blatNear} -ooc=${ooc11} -out=psl tmp.psl \n        liftUp -type=.psl stdout $srclift warn tmp.psl |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'medium' )\n        \"\"\"\n        blat ${srcfile} ${tgtfile} ${blatMedium} -ooc=${ooc11} -out=psl tmp.psl \n        liftUp -type=.psl stdout $srclift warn tmp.psl |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'far' )\n        \"\"\"\n        blat ${srcfile} ${tgtfile} ${blatFar} -ooc=${ooc12} -out=psl tmp.psl \n        liftUp -type=.psl stdout $srclift warn tmp.psl |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'custom' )\n        \"\"\"\n        blat ${srcfile} ${tgtfile} ${params.custom} -ooc=${ooc12} -out=psl tmp.psl \n        liftUp -type=.psl stdout $srclift warn tmp.psl |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else\n        \"\"\"\n        echo \"Distance not recognised\"\n        \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "BLAT"
        ],
        "tools_url": [
            "https://bio.tools/blat"
        ],
        "tools_dico": [
            {
                "name": "BLAT",
                "uri": "https://bio.tools/blat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast, accurate spliced alignment of DNA sequences.",
                "homepage": "http://genome.ucsc.edu/cgi-bin/hgBlat?command=start"
            }
        ],
        "inputs": [
            "forblat_ch",
            "tgt_lift_chB",
            "src_lift_chB",
            "ooc11_ch",
            "ooc12_ch"
        ],
        "nb_inputs": 5,
        "outputs": [
            "al_files_chB"
        ],
        "nb_outputs": 1,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"blat.${srcname}.${tgtname}\"",
            "publishDir \"${params.outdir}/alignments\"",
            "cpus { 1 * task.attempt }",
            "memory { 8.GB * task.attempt }",
            "time { 24.hour * task.attempt }",
            "clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[ sB]/,'')}\""
        ],
        "when": "params.aligner == \"blat\"",
        "stub": ""
    },
    "gsalign_same": {
        "name_process": "gsalign_same",
        "string_process": "\nprocess gsalign_same{    \n    tag \"gsalign_${params.distance}.${srcname}.${tgtname}\"\n    label 'gsalign'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        path tgtlift \n        path srclift \n        path index\n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    GSAlign -i ${srcname} -q ${tgtfile} -sen -t ${task.cpus} -no_vcf -o ${srcname}.${tgtname}.tmp\n    if [ -e ${srcname}.${tgtname}.tmp.maf ]; then\n        sed 's/ref.//g' ${srcname}.${tgtname}.tmp.maf | \n            sed 's/qry.//g' |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ${srcname}.${tgtname}.tmp.*\n    else\n        echo \"##maf version=1 \" | \n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    GSAlign -i ${srcname} -q ${tgtfile} -sen -t ${task.cpus} -no_vcf -o ${srcname}.${tgtname}.tmp\n    if [ -e ${srcname}.${tgtname}.tmp.maf ]; then\n        sed 's/ref.//g' ${srcname}.${tgtname}.tmp.maf | \n            sed 's/qry.//g' |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ${srcname}.${tgtname}.tmp.*\n    else\n        echo \"##maf version=1 \" | \n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    fi\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "GSAlign"
        ],
        "tools_url": [
            "https://bio.tools/gsalign"
        ],
        "tools_dico": [
            {
                "name": "GSAlign",
                "uri": "https://bio.tools/gsalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0259",
                                    "term": "Sequence alignment comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An efficient sequence alignment tool for intra-species genomes.\n\nGSAlign: an ultra-fast sequence alignment algorithm for intra-species genome comparison.\n\nDevelopers: Dr. Hsin-Nan Lin and Dr. Wen-Lian Hsu Institute of Information Science, Academia Sinica, Taiwan.\n\nPersonal genomics and comparative genomics are two fields that are more and more important in clinical practices and genome researches.",
                "homepage": "https://github.com/hsinnan75/GSAlign"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift",
            "index"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"gsalign_${params.distance}.${srcname}.${tgtname}\"",
            "label 'gsalign'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "gsalign_near": {
        "name_process": "gsalign_near",
        "string_process": "\nprocess gsalign_near{    \n    tag \"gsalign_${params.distance}.${srcname}.${tgtname}\"\n    label 'gsalign'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        path tgtlift \n        path srclift \n        path index\n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    GSAlign -i ${srcname} -q ${tgtfile} -sen -t ${task.cpus} -idy 80 -no_vcf -o ${srcname}.${tgtname}.tmp\n    if [ -e ${srcname}.${tgtname}.tmp.maf ]; then\n        sed 's/ref.//g' ${srcname}.${tgtname}.tmp.maf | \n            sed 's/qry.//g' |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ${srcname}.${tgtname}.tmp.*\n    else\n        echo \"##maf version=1 \" | \n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    GSAlign -i ${srcname} -q ${tgtfile} -sen -t ${task.cpus} -idy 80 -no_vcf -o ${srcname}.${tgtname}.tmp\n    if [ -e ${srcname}.${tgtname}.tmp.maf ]; then\n        sed 's/ref.//g' ${srcname}.${tgtname}.tmp.maf | \n            sed 's/qry.//g' |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ${srcname}.${tgtname}.tmp.*\n    else\n        echo \"##maf version=1 \" | \n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    fi\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "GSAlign"
        ],
        "tools_url": [
            "https://bio.tools/gsalign"
        ],
        "tools_dico": [
            {
                "name": "GSAlign",
                "uri": "https://bio.tools/gsalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0259",
                                    "term": "Sequence alignment comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An efficient sequence alignment tool for intra-species genomes.\n\nGSAlign: an ultra-fast sequence alignment algorithm for intra-species genome comparison.\n\nDevelopers: Dr. Hsin-Nan Lin and Dr. Wen-Lian Hsu Institute of Information Science, Academia Sinica, Taiwan.\n\nPersonal genomics and comparative genomics are two fields that are more and more important in clinical practices and genome researches.",
                "homepage": "https://github.com/hsinnan75/GSAlign"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift",
            "index"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"gsalign_${params.distance}.${srcname}.${tgtname}\"",
            "label 'gsalign'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "gsalign_medium": {
        "name_process": "gsalign_medium",
        "string_process": "\nprocess gsalign_medium{    \n    tag \"gsalign_${params.distance}.${srcname}.${tgtname}\"\n    label 'gsalign'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        path tgtlift \n        path srclift \n        path index\n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    GSAlign -i ${srcname} -q ${tgtfile} -sen -t ${task.cpus} -idy 75 -no_vcf -o ${srcname}.${tgtname}.tmp\n    if [ -e ${srcname}.${tgtname}.tmp.maf ]; then\n        sed 's/ref.//g' ${srcname}.${tgtname}.tmp.maf | \n            sed 's/qry.//g' |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ${srcname}.${tgtname}.tmp.*\n    else\n        echo \"##maf version=1 \" | \n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    GSAlign -i ${srcname} -q ${tgtfile} -sen -t ${task.cpus} -idy 75 -no_vcf -o ${srcname}.${tgtname}.tmp\n    if [ -e ${srcname}.${tgtname}.tmp.maf ]; then\n        sed 's/ref.//g' ${srcname}.${tgtname}.tmp.maf | \n            sed 's/qry.//g' |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ${srcname}.${tgtname}.tmp.*\n    else\n        echo \"##maf version=1 \" | \n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    fi\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "GSAlign"
        ],
        "tools_url": [
            "https://bio.tools/gsalign"
        ],
        "tools_dico": [
            {
                "name": "GSAlign",
                "uri": "https://bio.tools/gsalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0259",
                                    "term": "Sequence alignment comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An efficient sequence alignment tool for intra-species genomes.\n\nGSAlign: an ultra-fast sequence alignment algorithm for intra-species genome comparison.\n\nDevelopers: Dr. Hsin-Nan Lin and Dr. Wen-Lian Hsu Institute of Information Science, Academia Sinica, Taiwan.\n\nPersonal genomics and comparative genomics are two fields that are more and more important in clinical practices and genome researches.",
                "homepage": "https://github.com/hsinnan75/GSAlign"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift",
            "index"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"gsalign_${params.distance}.${srcname}.${tgtname}\"",
            "label 'gsalign'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "gsalign_far": {
        "name_process": "gsalign_far",
        "string_process": "\nprocess gsalign_far{    \n    tag \"gsalign_${params.distance}.${srcname}.${tgtname}\"\n    label 'gsalign'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        path tgtlift \n        path srclift \n        path index\n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    GSAlign -i ${srcname} -q ${tgtfile} -sen -t ${task.cpus} -idy 70 -no_vcf -o ${srcname}.${tgtname}.tmp\n    if [ -e ${srcname}.${tgtname}.tmp.maf ]; then\n        sed 's/ref.//g' ${srcname}.${tgtname}.tmp.maf | \n            sed 's/qry.//g' |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ${srcname}.${tgtname}.tmp.*\n    else\n        echo \"##maf version=1 \" | \n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    GSAlign -i ${srcname} -q ${tgtfile} -sen -t ${task.cpus} -idy 70 -no_vcf -o ${srcname}.${tgtname}.tmp\n    if [ -e ${srcname}.${tgtname}.tmp.maf ]; then\n        sed 's/ref.//g' ${srcname}.${tgtname}.tmp.maf | \n            sed 's/qry.//g' |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ${srcname}.${tgtname}.tmp.*\n    else\n        echo \"##maf version=1 \" | \n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin\n    fi\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "GSAlign"
        ],
        "tools_url": [
            "https://bio.tools/gsalign"
        ],
        "tools_dico": [
            {
                "name": "GSAlign",
                "uri": "https://bio.tools/gsalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0259",
                                    "term": "Sequence alignment comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An efficient sequence alignment tool for intra-species genomes.\n\nGSAlign: an ultra-fast sequence alignment algorithm for intra-species genome comparison.\n\nDevelopers: Dr. Hsin-Nan Lin and Dr. Wen-Lian Hsu Institute of Information Science, Academia Sinica, Taiwan.\n\nPersonal genomics and comparative genomics are two fields that are more and more important in clinical practices and genome researches.",
                "homepage": "https://github.com/hsinnan75/GSAlign"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift",
            "index"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"gsalign_${params.distance}.${srcname}.${tgtname}\"",
            "label 'gsalign'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "gsalign_custom": {
        "name_process": "gsalign_custom",
        "string_process": "\nprocess gsalign_custom{    \n    tag \"gsalign_${params.distance}.${srcname}.${tgtname}\"\n    label 'gsalign'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        path tgtlift \n        path srclift \n        path index\n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    GSAlign -i ${srcname} -q ${tgtfile} -t ${task.cpus} ${params.custom} -no_vcf -o ${srcname}.${tgtname}.tmp\n    if [ -e ${srcname}.${tgtname}.tmp.maf ]; then\n        sed 's/ref.//g' ${srcname}.${tgtname}.tmp.maf | \n            sed 's/qry.//g' |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ${srcname}.${tgtname}.tmp.*\n    else\n        echo \"##maf version=1 \" | \n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    GSAlign -i ${srcname} -q ${tgtfile} -t ${task.cpus} ${params.custom} -no_vcf -o ${srcname}.${tgtname}.tmp\n    if [ -e ${srcname}.${tgtname}.tmp.maf ]; then\n        sed 's/ref.//g' ${srcname}.${tgtname}.tmp.maf | \n            sed 's/qry.//g' |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ${srcname}.${tgtname}.tmp.*\n    else\n        echo \"##maf version=1 \" | \n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin\n    fi\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "GSAlign"
        ],
        "tools_url": [
            "https://bio.tools/gsalign"
        ],
        "tools_dico": [
            {
                "name": "GSAlign",
                "uri": "https://bio.tools/gsalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0259",
                                    "term": "Sequence alignment comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An efficient sequence alignment tool for intra-species genomes.\n\nGSAlign: an ultra-fast sequence alignment algorithm for intra-species genome comparison.\n\nDevelopers: Dr. Hsin-Nan Lin and Dr. Wen-Lian Hsu Institute of Information Science, Academia Sinica, Taiwan.\n\nPersonal genomics and comparative genomics are two fields that are more and more important in clinical practices and genome researches.",
                "homepage": "https://github.com/hsinnan75/GSAlign"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift",
            "index"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"gsalign_${params.distance}.${srcname}.${tgtname}\"",
            "label 'gsalign'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "bwt_index": {
        "name_process": "bwt_index",
        "string_process": "\nprocess bwt_index{    \n    tag \"bwt_index\"\n    label 'small'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n\n    output: \n        path \"${srcname}.*\"\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.pac\n    touch ${srcname}.sa\n    touch ${srcname}.amb\n    touch ${srcname}.ann\n    touch ${srcname}.bwt\n    \"\"\"\n\n    script:\n    \"\"\"\n    bwt_index ${srcfile} ${srcname} && chmod a+rw ${srcname}.*\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    bwt_index ${srcfile} ${srcname} && chmod a+rw ${srcname}.*\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"bwt_index\"",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.pac\n    touch ${srcname}.sa\n    touch ${srcname}.amb\n    touch ${srcname}.ann\n    touch ${srcname}.bwt\n    \"\"\""
    },
    "lastz_primates": {
        "name_process": "lastz_primates",
        "string_process": "\nprocess lastz_primates{    \n    tag \"lastz_primates.${srcname}.${tgtname}\"\n    label 'medium'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        path tgtlift \n        path srclift \n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    echo $lastzPrimate\n    echo \"A C G T\" > human_chimp.v2.q\n    echo \"90 -330 -236 -356\" >> human_chimp.v2.q\n    echo \"-330 100 -318 -236\" >> human_chimp.v2.q\n    echo \"-236 -318 100 -330\" >> human_chimp.v2.q\n    echo \"-356 -236 -330 90\" >> human_chimp.v2.q\n    lastz ${srcfile} ${tgtfile} ${lastzPrimate} \u2011\u2011allocate:traceback=2048.0M --ambiguous=iupac Q=./human_chimp.v2.q --format=lav |\n        lavToPsl stdin stdout |\n            liftUp -type=.psl stdout $srclift warn stdin |\n                liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ./human_chimp.v2.q\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    echo $lastzPrimate\n    echo \"A C G T\" > human_chimp.v2.q\n    echo \"90 -330 -236 -356\" >> human_chimp.v2.q\n    echo \"-330 100 -318 -236\" >> human_chimp.v2.q\n    echo \"-236 -318 100 -330\" >> human_chimp.v2.q\n    echo \"-356 -236 -330 90\" >> human_chimp.v2.q\n    lastz ${srcfile} ${tgtfile} ${lastzPrimate} \u2011\u2011allocate:traceback=2048.0M --ambiguous=iupac Q=./human_chimp.v2.q --format=lav |\n        lavToPsl stdin stdout |\n            liftUp -type=.psl stdout $srclift warn stdin |\n                liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ./human_chimp.v2.q\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "LASTZ"
        ],
        "tools_url": [
            "https://bio.tools/lastz"
        ],
        "tools_dico": [
            {
                "name": "LASTZ",
                "uri": "https://bio.tools/lastz",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for (1) aligning two DNA sequences, and (2) inferring appropriate scoring parameters automatically.",
                "homepage": "http://www.bx.psu.edu/~rsharris/lastz/"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"lastz_primates.${srcname}.${tgtname}\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "lastz_general": {
        "name_process": "lastz_general",
        "string_process": "\nprocess lastz_general{    \n    tag \"lastz_general.${srcname}.${tgtname}\"\n    label 'medium'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        path tgtlift \n        path srclift \n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    echo $lastzGeneral\n    echo \"A C G T\" > general.q\n    echo \"91 -114 -31 -123\" >> general.q\n    echo \"-114 100 -125 -31\" >> general.q\n    echo \"-31 -125 100 -114\" >> general.q\n    echo \"-123 -31 -114 91\" >> general.q\n    lastz ${srcfile} ${tgtfile} ${lastzGeneral} \u2011\u2011allocate:traceback=2048.0M --ambiguous=iupac Q=./general.q --format=lav |\n        lavToPsl stdin stdout |\n            liftUp -type=.psl stdout $srclift warn stdin |\n                liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ./general.q\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    echo $lastzGeneral\n    echo \"A C G T\" > general.q\n    echo \"91 -114 -31 -123\" >> general.q\n    echo \"-114 100 -125 -31\" >> general.q\n    echo \"-31 -125 100 -114\" >> general.q\n    echo \"-123 -31 -114 91\" >> general.q\n    lastz ${srcfile} ${tgtfile} ${lastzGeneral} \u2011\u2011allocate:traceback=2048.0M --ambiguous=iupac Q=./general.q --format=lav |\n        lavToPsl stdin stdout |\n            liftUp -type=.psl stdout $srclift warn stdin |\n                liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ./general.q\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "LASTZ"
        ],
        "tools_url": [
            "https://bio.tools/lastz"
        ],
        "tools_dico": [
            {
                "name": "LASTZ",
                "uri": "https://bio.tools/lastz",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for (1) aligning two DNA sequences, and (2) inferring appropriate scoring parameters automatically.",
                "homepage": "http://www.bx.psu.edu/~rsharris/lastz/"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"lastz_general.${srcname}.${tgtname}\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "lastz_near": {
        "name_process": "lastz_near",
        "string_process": "\nprocess lastz_near{    \n    tag \"lastz_near.${srcname}.${tgtname}\"\n    label 'medium'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        path tgtlift \n        path srclift \n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    echo $lastzNear\n    echo \"A C G T\" > human_chimp.v2.q\n    echo \"90 -330 -236 -356\" >> human_chimp.v2.q\n    echo \"-330 100 -318 -236\" >> human_chimp.v2.q\n    echo \"-236 -318 100 -330\" >> human_chimp.v2.q\n    echo \"-356 -236 -330 90\" >> human_chimp.v2.q\n    lastz ${srcfile} ${tgtfile} ${lastzNear} --ambiguous=iupac Q=./human_chimp.v2.q --format=lav |\n        lavToPsl stdin stdout |\n            liftUp -type=.psl stdout $srclift warn stdin |\n                liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ./human_chimp.v2.q\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    echo $lastzNear\n    echo \"A C G T\" > human_chimp.v2.q\n    echo \"90 -330 -236 -356\" >> human_chimp.v2.q\n    echo \"-330 100 -318 -236\" >> human_chimp.v2.q\n    echo \"-236 -318 100 -330\" >> human_chimp.v2.q\n    echo \"-356 -236 -330 90\" >> human_chimp.v2.q\n    lastz ${srcfile} ${tgtfile} ${lastzNear} --ambiguous=iupac Q=./human_chimp.v2.q --format=lav |\n        lavToPsl stdin stdout |\n            liftUp -type=.psl stdout $srclift warn stdin |\n                liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ./human_chimp.v2.q\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "LASTZ"
        ],
        "tools_url": [
            "https://bio.tools/lastz"
        ],
        "tools_dico": [
            {
                "name": "LASTZ",
                "uri": "https://bio.tools/lastz",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for (1) aligning two DNA sequences, and (2) inferring appropriate scoring parameters automatically.",
                "homepage": "http://www.bx.psu.edu/~rsharris/lastz/"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"lastz_near.${srcname}.${tgtname}\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "lastz_medium": {
        "name_process": "lastz_medium",
        "string_process": "\nprocess lastz_medium{    \n    tag \"lastz_med.${srcname}.${tgtname}\"\n    label 'medium'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        path tgtlift \n        path srclift \n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    echo $lastzMedium\n    lastz ${srcfile} ${tgtfile} ${lastzMedium} --ambiguous=iupac --format=lav |\n        lavToPsl stdin stdout |\n            liftUp -type=.psl stdout $srclift warn stdin |\n                liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    echo $lastzMedium\n    lastz ${srcfile} ${tgtfile} ${lastzMedium} --ambiguous=iupac --format=lav |\n        lavToPsl stdin stdout |\n            liftUp -type=.psl stdout $srclift warn stdin |\n                liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "LASTZ"
        ],
        "tools_url": [
            "https://bio.tools/lastz"
        ],
        "tools_dico": [
            {
                "name": "LASTZ",
                "uri": "https://bio.tools/lastz",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for (1) aligning two DNA sequences, and (2) inferring appropriate scoring parameters automatically.",
                "homepage": "http://www.bx.psu.edu/~rsharris/lastz/"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"lastz_med.${srcname}.${tgtname}\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "lastz_far": {
        "name_process": "lastz_far",
        "string_process": "\nprocess lastz_far{    \n    tag \"lastz_far.${srcname}.${tgtname}\"\n    label 'medium'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        path tgtlift \n        path srclift \n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    echo $lastzFar\n    echo \"A C G T\" > HoxD55.q\n    echo \"91 -90 -25 -100\" >> HoxD55.q\n    echo \"-90 100 -100 -25\" >> HoxD55.q\n    echo \"-25 -100 100 -90\" >> HoxD55.q\n    echo \"-100 -25 -90 91\" >> HoxD55.q\n    lastz ${srcfile} ${tgtfile} --ambiguous=iupac Q=./HoxD55.q ${lastzFar} --format=lav |\n        lavToPsl stdin stdout |\n            liftUp -type=.psl stdout $srclift warn stdin |\n                liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ./HoxD55.q\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    echo $lastzFar\n    echo \"A C G T\" > HoxD55.q\n    echo \"91 -90 -25 -100\" >> HoxD55.q\n    echo \"-90 100 -100 -25\" >> HoxD55.q\n    echo \"-25 -100 100 -90\" >> HoxD55.q\n    echo \"-100 -25 -90 91\" >> HoxD55.q\n    lastz ${srcfile} ${tgtfile} --ambiguous=iupac Q=./HoxD55.q ${lastzFar} --format=lav |\n        lavToPsl stdin stdout |\n            liftUp -type=.psl stdout $srclift warn stdin |\n                liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm ./HoxD55.q\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "LASTZ"
        ],
        "tools_url": [
            "https://bio.tools/lastz"
        ],
        "tools_dico": [
            {
                "name": "LASTZ",
                "uri": "https://bio.tools/lastz",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for (1) aligning two DNA sequences, and (2) inferring appropriate scoring parameters automatically.",
                "homepage": "http://www.bx.psu.edu/~rsharris/lastz/"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"lastz_far.${srcname}.${tgtname}\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "lastz_custom": {
        "name_process": "lastz_custom",
        "string_process": "\nprocess lastz_custom{    \n    tag \"lastz_cust.${srcname}.${tgtname}\"\n    label 'medium'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        path tgtlift \n        path srclift \n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n\n    \"\"\"\n    echo ${params.custom}\n    lastz ${srcfile} ${tgtfile} ${params.custom} --ambiguous=iupac --format=lav |\n        lavToPsl stdin stdout |\n            liftUp -type=.psl stdout $srclift warn stdin |\n                liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    echo ${params.custom}\n    lastz ${srcfile} ${tgtfile} ${params.custom} --ambiguous=iupac --format=lav |\n        lavToPsl stdin stdout |\n            liftUp -type=.psl stdout $srclift warn stdin |\n                liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "LASTZ"
        ],
        "tools_url": [
            "https://bio.tools/lastz"
        ],
        "tools_dico": [
            {
                "name": "LASTZ",
                "uri": "https://bio.tools/lastz",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for (1) aligning two DNA sequences, and (2) inferring appropriate scoring parameters automatically.",
                "homepage": "http://www.bx.psu.edu/~rsharris/lastz/"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"lastz_cust.${srcname}.${tgtname}\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "make2bit": {
        "name_process": "make2bit",
        "string_process": "\nprocess make2bit {\n    tag \"twoBit\"\n    publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true\n    label 'medium'\n\n    input:\n    path source\n    path target\n\n    output:\n    path \"source.2bit\", emit: twoBsrc\n    path \"target.2bit\", emit: twoBtgt\n    path \"source.sizes\", emit: twoBsrcNFO\n    path \"target.sizes\", emit: twoBtgtNFO\n\n    stub:\n    \"\"\"\n    touch source.2bit\n    touch source.sizes\n    touch target.2bit\n    touch target.sizes\n    \"\"\"\n\n    script:\n    \"\"\"\n    faToTwoBit ${source} source.2bit\n    twoBitInfo source.2bit source.sizes\n    faToTwoBit ${target} target.2bit\n    twoBitInfo target.2bit target.sizes\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    faToTwoBit ${source} source.2bit\n    twoBitInfo source.2bit source.sizes\n    faToTwoBit ${target} target.2bit\n    twoBitInfo target.2bit target.sizes\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "source",
            "target"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"twoBit\"",
            "publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch source.2bit\n    touch source.sizes\n    touch target.2bit\n    touch target.sizes\n    \"\"\""
    },
    "splitsrc": {
        "name_process": "splitsrc",
        "string_process": "\nprocess splitsrc {\n    tag \"splitsrc\"\n    label 'small'\n\n    input:\n    path source\n\n    output:\n    path \"SPLIT_src\", emit: srcsplit_ch\n    path \"source.lift\", emit: src_lift_ch\n\n    stub:\n    \"\"\"\n    touch mkdir SPLIT_src/\n    touch SPLIT_src/src0.fa\n    touch SPLIT_src/src1.fa\n    touch SPLIT_src/src2.fa\n    touch source.lift\n    \"\"\"\n\n    script:\n    if ( params.aligner == \"blat\" || params.aligner == 'gsalign' || params.aligner == 'last' || params.aligner == \"minimap2\" || params.aligner == 'GSAlign' )\n        \"\"\"\n        myvalue=`faSize -tab ${source} | awk '\\$1==\"maxSize\" {print \\$2}'`\n        if [ -z \\$myvalue ]; then\n            myvalue=`faSize -tab ${source} | awk '\\$1==\"baseCount\" {print \\$2}'`\n        fi\n        mkdir ./SPLIT_src && chmod a+rw ./SPLIT_src\n        faSplit size -oneFile -lift=source.lift ${source} \\$myvalue SPLIT_src/src\n        \"\"\"\n    else \n        \"\"\"\n        mkdir ./SPLIT_src && chmod a+rw ./SPLIT_src\n        faSplit size -lift=source.lift -extra=${srcOvlpSize} ${source} ${srcChunkSize} SPLIT_src/\n        \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    if ( params.aligner == \"blat\" || params.aligner == 'gsalign' || params.aligner == 'last' || params.aligner == \"minimap2\" || params.aligner == 'GSAlign' )\n        \"\"\"\n        myvalue=`faSize -tab ${source} | awk '\\$1==\"maxSize\" {print \\$2}'`\n        if [ -z \\$myvalue ]; then\n            myvalue=`faSize -tab ${source} | awk '\\$1==\"baseCount\" {print \\$2}'`\n        fi\n        mkdir ./SPLIT_src && chmod a+rw ./SPLIT_src\n        faSplit size -oneFile -lift=source.lift ${source} \\$myvalue SPLIT_src/src\n        \"\"\"\n    else \n        \"\"\"\n        mkdir ./SPLIT_src && chmod a+rw ./SPLIT_src\n        faSplit size -lift=source.lift -extra=${srcOvlpSize} ${source} ${srcChunkSize} SPLIT_src/\n        \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "source"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"splitsrc\"",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch mkdir SPLIT_src/\n    touch SPLIT_src/src0.fa\n    touch SPLIT_src/src1.fa\n    touch SPLIT_src/src2.fa\n    touch source.lift\n    \"\"\""
    },
    "groupsrc": {
        "name_process": "groupsrc",
        "string_process": "\nprocess groupsrc {\n    tag \"groupsrc\"\n    label 'medium'\n\n    input:\n    path src_fld\n\n    output:\n    path \"./CLUST_src\", emit: srcclst_ch\n\n    script:\n    $/\n    #!/usr/bin/env python\n\n    def faSize(infile):\n        return sum([len(line.strip()) for line in open(infile) if \">\" not in line])\n\n\n    if __name__ == \"__main__\":\n        import os\n        infld=os.path.realpath( \"${src_fld}\" )\n        outFld = \"./CLUST_src\"\n        os.mkdir(outFld)\n        if not os.path.exists(outFld): os.mkdir(outFld)\n\n        flist = os.listdir(infld)\n        sizes = [faSize(os.path.join(infld, f)) for f in flist]\n        tmpdata = list(zip(sizes,flist))\n        tmpdata.sort(reverse = True)\n        total = 0\n        n = 0\n        fname = \"{}/src{}.fa\"\n        toWrite = []\n\n        for n,(size,seq) in enumerate(tmpdata):\n            total += size\n            if total < int(${params.srcSize}):\n                toWrite.append(os.path.join(infld, seq))\n            else:\n                if len(toWrite) > 0: \n                    outf = open(fname.format(outFld, n), \"w\" )\n                    [outf.write(line) for f in toWrite for line in open(f) ]\n                    outf.close()\n                n += 1\n                toWrite = [os.path.join(infld, seq)]\n                total = size\n        outf = open(fname.format(outFld, n), \"w\" )\n        [outf.write(line) for f in toWrite for line in open(f) ]\n        outf.close()\n    /$\n\n}",
        "nb_lignes_process": 51,
        "string_script": "    $/\n    #!/usr/bin/env python\n\n    def faSize(infile):\n        return sum([len(line.strip()) for line in open(infile) if \">\" not in line])\n\n\n    if __name__ == \"__main__\":\n        import os\n        infld=os.path.realpath( \"${src_fld}\" )\n        outFld = \"./CLUST_src\"\n        os.mkdir(outFld)\n        if not os.path.exists(outFld): os.mkdir(outFld)\n\n        flist = os.listdir(infld)\n        sizes = [faSize(os.path.join(infld, f)) for f in flist]\n        tmpdata = list(zip(sizes,flist))\n        tmpdata.sort(reverse = True)\n        total = 0\n        n = 0\n        fname = \"{}/src{}.fa\"\n        toWrite = []\n\n        for n,(size,seq) in enumerate(tmpdata):\n            total += size\n            if total < int(${params.srcSize}):\n                toWrite.append(os.path.join(infld, seq))\n            else:\n                if len(toWrite) > 0: \n                    outf = open(fname.format(outFld, n), \"w\" )\n                    [outf.write(line) for f in toWrite for line in open(f) ]\n                    outf.close()\n                n += 1\n                toWrite = [os.path.join(infld, seq)]\n                total = size\n        outf = open(fname.format(outFld, n), \"w\" )\n        [outf.write(line) for f in toWrite for line in open(f) ]\n        outf.close()\n    /$",
        "nb_lignes_script": 38,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "src_fld"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"groupsrc\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": ""
    },
    "splittgt": {
        "name_process": "splittgt",
        "string_process": "\nprocess splittgt {\n    tag \"splittgt\"\n    label 'small'\n\n    input:\n    path target\n\n\n    output:\n    path \"SPLIT_tgt\", emit: tgtsplit_ch\n    path \"target.lift\", emit: tgt_lift_ch\n\n    stub:\n    \"\"\"\n    touch mkdir SPLIT_tgt/\n    touch SPLIT_tgt/tgt0.fa\n    touch SPLIT_tgt/tgt1.fa\n    touch SPLIT_tgt/tgt2.fa\n    touch target.lift\n    \"\"\"\n\n    script:\n    if( params.aligner == \"blat\" )\n        \"\"\"\n        mkdir ./SPLIT_tgt && chmod a+rw ./SPLIT_tgt\n        faSplit size -oneFile -lift=target.lift -extra=500 ${target} 4500 SPLIT_tgt/tmp\n        \"\"\"\n    else if ( params.aligner == \"gsalign\" || params.aligner == \"minimap2\" || params.aligner == 'GSAlign' )\n        \"\"\"\n        myvalue=`faSize -tab ${target} | awk '\\$1==\"maxSize\" {print \\$2}'`\n        if [ -z \\$myvalue ]; then\n            myvalue=`faSize -tab ${target} | awk '\\$1==\"baseCount\" {print \\$2}'`\n        fi\n        mkdir ./SPLIT_tgt && chmod a+rw ./SPLIT_tgt\n        faSplit size -oneFile -lift=target.lift ${target} \\$myvalue SPLIT_tgt/tgt\n        \"\"\"\n    else\n        \"\"\"\n        mkdir SPLIT_tgt && chmod a+rw SPLIT_tgt\n        faSplit size -lift=target.lift -extra=${tgtOvlpSize} ${target} ${tgtChunkSize} SPLIT_tgt/\n        \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    if( params.aligner == \"blat\" )\n        \"\"\"\n        mkdir ./SPLIT_tgt && chmod a+rw ./SPLIT_tgt\n        faSplit size -oneFile -lift=target.lift -extra=500 ${target} 4500 SPLIT_tgt/tmp\n        \"\"\"\n    else if ( params.aligner == \"gsalign\" || params.aligner == \"minimap2\" || params.aligner == 'GSAlign' )\n        \"\"\"\n        myvalue=`faSize -tab ${target} | awk '\\$1==\"maxSize\" {print \\$2}'`\n        if [ -z \\$myvalue ]; then\n            myvalue=`faSize -tab ${target} | awk '\\$1==\"baseCount\" {print \\$2}'`\n        fi\n        mkdir ./SPLIT_tgt && chmod a+rw ./SPLIT_tgt\n        faSplit size -oneFile -lift=target.lift ${target} \\$myvalue SPLIT_tgt/tgt\n        \"\"\"\n    else\n        \"\"\"\n        mkdir SPLIT_tgt && chmod a+rw SPLIT_tgt\n        faSplit size -lift=target.lift -extra=${tgtOvlpSize} ${target} ${tgtChunkSize} SPLIT_tgt/\n        \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "target"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"splittgt\"",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch mkdir SPLIT_tgt/\n    touch SPLIT_tgt/tgt0.fa\n    touch SPLIT_tgt/tgt1.fa\n    touch SPLIT_tgt/tgt2.fa\n    touch target.lift\n    \"\"\""
    },
    "grouptgt": {
        "name_process": "grouptgt",
        "string_process": "\nprocess grouptgt {\n    tag \"grouptgt\"\n    label 'medium'\n\n    input:\n    path tgt_fld\n\n    output:\n    path \"./CLUST_tgt\", emit: tgtclst_ch\n\n    script:\n    if( params.aligner != \"blat\" )\n    $/\n    #!/usr/bin/env python\n\n    def faSize(infile):\n        return sum([len(line.strip()) for line in open(infile) if \">\" not in line])\n\n\n    if __name__ == \"__main__\":\n        import os\n        infld=os.path.realpath( \"${tgt_fld}\" )\n        outFld = \"./CLUST_tgt\"\n        if not os.path.exists(outFld): os.mkdir(outFld)\n\n        flist = os.listdir(infld)\n        sizes = [faSize(os.path.join(infld, f)) for f in flist]\n        tmpdata = list(zip(sizes,flist))\n        tmpdata.sort(reverse = True)\n        total = 0\n        n = 0\n        fname = \"./{}/tgt{}.fa\"\n        toWrite = []\n        for n,(size,seq) in enumerate(tmpdata):\n            total += size\n            if total < int(${params.srcSize}):\n                toWrite.append(os.path.join(infld, seq))\n            else:\n                if len(toWrite) > 0: \n                    outf = open(fname.format(outFld, n), \"w\" )\n                    [outf.write(line) for f in toWrite for line in open(f) ]\n                    outf.close()\n                n += 1\n                toWrite = [os.path.join(infld, seq)]\n                total = size\n        outf = open(fname.format(outFld, n), \"w\" )\n        [outf.write(line) for f in toWrite for line in open(f) ]\n        outf.close()\n    /$\n    else    \n    $/\n    #!/usr/bin/env python\n\n    if __name__ == \"__main__\":\n        import os\n        infld=os.path.realpath( \"${tgt_fld}\" )\n        outFld = \"./CLUST_tgt\"\n        os.mkdir(outFld)\n        if not os.path.exists(outFld): os.mkdir(outFld)\n\n        fasta = os.listdir(infld)[0]\n        nseqs = sum([1 for i in open(os.path.join(\"${tgt_fld}\", fasta)) if \">\" in i])\n        totalL = sum([len(i.strip()) for i in open(os.path.join(\"${tgt_fld}\", fasta)) if \">\" not in i])\n        nseqXfile = nseqs / round(int(totalL / int(\"${params.tgtSize}\")))\n        n = 1\n        tot = 0\n        fname = \"{}/tgt{}.fa\"\n        toWrite = []\n        outf = open(fname.format(outFld, n), \"w\" )\n        for line in open(os.path.join(\"${tgt_fld}\", fasta)):\n            if \">\" in line:\n                tot += 1\n            if tot > nseqXfile:\n                outf.close()\n                n += 1\n                outf = open(fname.format(outFld, n), \"w\" )\n                tot = 1\n            outf.write(line)\n    /$\n\n}",
        "nb_lignes_process": 80,
        "string_script": "    if( params.aligner != \"blat\" )\n    $/\n    #!/usr/bin/env python\n\n    def faSize(infile):\n        return sum([len(line.strip()) for line in open(infile) if \">\" not in line])\n\n\n    if __name__ == \"__main__\":\n        import os\n        infld=os.path.realpath( \"${tgt_fld}\" )\n        outFld = \"./CLUST_tgt\"\n        if not os.path.exists(outFld): os.mkdir(outFld)\n\n        flist = os.listdir(infld)\n        sizes = [faSize(os.path.join(infld, f)) for f in flist]\n        tmpdata = list(zip(sizes,flist))\n        tmpdata.sort(reverse = True)\n        total = 0\n        n = 0\n        fname = \"./{}/tgt{}.fa\"\n        toWrite = []\n        for n,(size,seq) in enumerate(tmpdata):\n            total += size\n            if total < int(${params.srcSize}):\n                toWrite.append(os.path.join(infld, seq))\n            else:\n                if len(toWrite) > 0: \n                    outf = open(fname.format(outFld, n), \"w\" )\n                    [outf.write(line) for f in toWrite for line in open(f) ]\n                    outf.close()\n                n += 1\n                toWrite = [os.path.join(infld, seq)]\n                total = size\n        outf = open(fname.format(outFld, n), \"w\" )\n        [outf.write(line) for f in toWrite for line in open(f) ]\n        outf.close()\n    /$\n    else    \n    $/\n    #!/usr/bin/env python\n\n    if __name__ == \"__main__\":\n        import os\n        infld=os.path.realpath( \"${tgt_fld}\" )\n        outFld = \"./CLUST_tgt\"\n        os.mkdir(outFld)\n        if not os.path.exists(outFld): os.mkdir(outFld)\n\n        fasta = os.listdir(infld)[0]\n        nseqs = sum([1 for i in open(os.path.join(\"${tgt_fld}\", fasta)) if \">\" in i])\n        totalL = sum([len(i.strip()) for i in open(os.path.join(\"${tgt_fld}\", fasta)) if \">\" not in i])\n        nseqXfile = nseqs / round(int(totalL / int(\"${params.tgtSize}\")))\n        n = 1\n        tot = 0\n        fname = \"{}/tgt{}.fa\"\n        toWrite = []\n        outf = open(fname.format(outFld, n), \"w\" )\n        for line in open(os.path.join(\"${tgt_fld}\", fasta)):\n            if \">\" in line:\n                tot += 1\n            if tot > nseqXfile:\n                outf.close()\n                n += 1\n                outf = open(fname.format(outFld, n), \"w\" )\n                tot = 1\n            outf.write(line)\n    /$",
        "nb_lignes_script": 67,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tgt_fld"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"grouptgt\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": ""
    },
    "pairs": {
        "name_process": "pairs",
        "string_process": "\nprocess pairs {\n    tag \"mkpairs\"\n    label 'small'\n\n    input:\n    path sources\n    path targets\n\n    output:\n    path \"pairs.csv\", emit: pairspath\n\n    stub:\n    $/\n    #!/usr/bin/env python\n    import os\n    infld1 = os.path.realpath( \"${sources}\" )\n    infld2 = os.path.realpath( \"${targets}\" )\n    files1 = os.listdir(infld1)\n    files2 = os.listdir(infld2)\n    of = open(\"pairs.csv\", \"w\")\n    for f in files1:\n        fname1 = os.path.join( infld1, f)\n        bname1= '.'.join( f.split('.')[0:-1] )\n        for f2 in files2:\n            fname2 = os.path.join(infld2, f2)\n            bname2 = '.'.join( f2.split('.')[0:-1] )\n            of.write( \"{},{},{},{}\\n\".format(bname1, fname1, bname2, fname2) )\n    /$\n\n    script:\n    $/\n    #!/usr/bin/env python\n    import os\n    infld1 = os.path.realpath( \"${sources}\" )\n    infld2 = os.path.realpath( \"${targets}\" )\n    files1 = os.listdir(infld1)\n    files2 = os.listdir(infld2)\n    of = open(\"pairs.csv\", \"w\")\n    for f in files1:\n        fname1 = os.path.join( infld1, f)\n        bname1= '.'.join( f.split('.')[0:-1] )\n        for f2 in files2:\n            fname2 = os.path.join(infld2, f2)\n            bname2 = '.'.join( f2.split('.')[0:-1] )\n            of.write( \"{},{},{},{}\\n\".format(bname1, fname1, bname2, fname2) )\n    /$\n}",
        "nb_lignes_process": 46,
        "string_script": "    $/\n    #!/usr/bin/env python\n    import os\n    infld1 = os.path.realpath( \"${sources}\" )\n    infld2 = os.path.realpath( \"${targets}\" )\n    files1 = os.listdir(infld1)\n    files2 = os.listdir(infld2)\n    of = open(\"pairs.csv\", \"w\")\n    for f in files1:\n        fname1 = os.path.join( infld1, f)\n        bname1= '.'.join( f.split('.')[0:-1] )\n        for f2 in files2:\n            fname2 = os.path.join(infld2, f2)\n            bname2 = '.'.join( f2.split('.')[0:-1] )\n            of.write( \"{},{},{},{}\\n\".format(bname1, fname1, bname2, fname2) )\n    /$",
        "nb_lignes_script": 15,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sources",
            "targets"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"mkpairs\"",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    $/\n    #!/usr/bin/env python\n    import os\n    infld1 = os.path.realpath( \"${sources}\" )\n    infld2 = os.path.realpath( \"${targets}\" )\n    files1 = os.listdir(infld1)\n    files2 = os.listdir(infld2)\n    of = open(\"pairs.csv\", \"w\")\n    for f in files1:\n        fname1 = os.path.join( infld1, f)\n        bname1= '.'.join( f.split('.')[0:-1] )\n        for f2 in files2:\n            fname2 = os.path.join(infld2, f2)\n            bname2 = '.'.join( f2.split('.')[0:-1] )\n            of.write( \"{},{},{},{}\\n\".format(bname1, fname1, bname2, fname2) )\n    /$"
    },
    "lastz": {
        "name_process": "lastz",
        "string_process": "\nprocess lastz{    \n    tag \"lastz.${srcname}.${tgtname}\"\n    publishDir \"${params.outdir}/alignments\"\n\n    cpus { 1 * task.attempt }\n    memory { 8.GB * task.attempt }\n    time { 24.hour * task.attempt }\n    clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\\sB]/,'')}\"\n\n    input: \n        set srcname, srcfile, tgtname, tgtfile from forlastz_ch  \n        file tgtlift from tgt_lift_chL\n        file srclift from src_lift_chL\n\n    output: \n        tuple srcname, tgtname, \"${srcname}.${tgtname}.psl\" into al_files_chL\n\n    when:\n        params.aligner == \"lastz\"\n  \n    script:\n    if( params.distance == 'near')\n        \"\"\"\n        echo $lastzNear\n        wget -q https://github.com/ge11232002/CSC/blob/master/WholeGenomeAlignment/scripts/ucsc/human_chimp.v2.q\n        lastz ${srcfile} ${tgtfile} ${lastzNear} Q=${PWD}/human_chimp.v2.q --format=lav |\n            lavToPsl stdin stdout |\n                liftUp -type=.psl stdout $srclift warn stdin |\n                    liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'medium')\n        \"\"\"\n        echo $lastzMedium\n        lastz ${srcfile} ${tgtfile} ${lastzMedium} --format=lav |\n            lavToPsl stdin stdout |\n                liftUp -type=.psl stdout $srclift warn stdin |\n                    liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'far')\n        \"\"\"\n        echo $lastzFar\n        wget -q https://github.com/ge11232002/CSC/blob/master/WholeGenomeAlignment/scripts/ucsc/HoxD55.q\n        lastz ${srcfile} ${tgtfile} Q=${PWD}/HoxD55.q ${lastzFar} --format=lav |\n            lavToPsl stdin stdout |\n                liftUp -type=.psl stdout $srclift warn stdin |\n                    liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'custom' )\n        \"\"\"\n        echo $lastzFar\n        lastz ${srcfile} ${tgtfile} ${params.custom} --format=lav |\n            lavToPsl stdin stdout |\n                liftUp -type=.psl stdout $srclift warn stdin |\n                    liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else\n        \"\"\"\n        echo \"Distance not recognised\"\n        \"\"\"\n\n}",
        "nb_lignes_process": 60,
        "string_script": "    if( params.distance == 'near')\n        \"\"\"\n        echo $lastzNear\n        wget -q https://github.com/ge11232002/CSC/blob/master/WholeGenomeAlignment/scripts/ucsc/human_chimp.v2.q\n        lastz ${srcfile} ${tgtfile} ${lastzNear} Q=${PWD}/human_chimp.v2.q --format=lav |\n            lavToPsl stdin stdout |\n                liftUp -type=.psl stdout $srclift warn stdin |\n                    liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'medium')\n        \"\"\"\n        echo $lastzMedium\n        lastz ${srcfile} ${tgtfile} ${lastzMedium} --format=lav |\n            lavToPsl stdin stdout |\n                liftUp -type=.psl stdout $srclift warn stdin |\n                    liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'far')\n        \"\"\"\n        echo $lastzFar\n        wget -q https://github.com/ge11232002/CSC/blob/master/WholeGenomeAlignment/scripts/ucsc/HoxD55.q\n        lastz ${srcfile} ${tgtfile} Q=${PWD}/HoxD55.q ${lastzFar} --format=lav |\n            lavToPsl stdin stdout |\n                liftUp -type=.psl stdout $srclift warn stdin |\n                    liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'custom' )\n        \"\"\"\n        echo $lastzFar\n        lastz ${srcfile} ${tgtfile} ${params.custom} --format=lav |\n            lavToPsl stdin stdout |\n                liftUp -type=.psl stdout $srclift warn stdin |\n                    liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else\n        \"\"\"\n        echo \"Distance not recognised\"\n        \"\"\"",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [
            "LASTZ"
        ],
        "tools_url": [
            "https://bio.tools/lastz"
        ],
        "tools_dico": [
            {
                "name": "LASTZ",
                "uri": "https://bio.tools/lastz",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for (1) aligning two DNA sequences, and (2) inferring appropriate scoring parameters automatically.",
                "homepage": "http://www.bx.psu.edu/~rsharris/lastz/"
            }
        ],
        "inputs": [
            "forlastz_ch",
            "tgt_lift_chL",
            "src_lift_chL"
        ],
        "nb_inputs": 3,
        "outputs": [
            "al_files_chL"
        ],
        "nb_outputs": 1,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"lastz.${srcname}.${tgtname}\"",
            "publishDir \"${params.outdir}/alignments\"",
            "cpus { 1 * task.attempt }",
            "memory { 8.GB * task.attempt }",
            "time { 24.hour * task.attempt }",
            "clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[ sB]/,'')}\""
        ],
        "when": "params.aligner == \"lastz\"",
        "stub": ""
    },
    "minimap2": {
        "name_process": "minimap2",
        "string_process": "\nprocess minimap2{    \n    tag \"minimap2.${srcname}.${tgtname}\"\n    publishDir \"${params.outdir}/alignments\"\n\n    cpus { 2 * task.attempt }\n    memory { 8.GB * task.attempt }\n    time { 12.hour * task.attempt }\n    clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\\sB]/,'')}\"\n\n    input: \n        set srcname, srcfile, tgtname, tgtfile from forminimap2_ch  \n        file tgtlift from tgt_lift_chM\n        file srclift from src_lift_chM\n\n    output: \n        tuple srcname, tgtname, \"${srcname}.${tgtname}.psl\" into al_files_chM\n\n    when:\n        params.aligner == \"minimap2\"\n  \n    script:\n    if( params.distance == 'near' )\n        \"\"\"\n        minimap2 -t ${task.cpus} --cs=long ${srcfile} ${tgtfile} ${minimap2Near} | \n            paftools.js view -f maf - |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'medium' )\n        \"\"\"\n        minimap2 -t ${task.cpus} --cs=long ${srcfile} ${tgtfile} ${minimap2Medium} | \n            paftools.js view -f maf - |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'far' )\n        \"\"\"\n        minimap2 -t ${task.cpus} --cs=long ${srcfile} ${tgtfile} ${minimap2Far} | \n            paftools.js view -f maf - |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'custom' )\n        \"\"\"\n        minimap2 -t ${task.cpus} --cs=long ${srcfile} ${tgtfile} ${params.custom} | \n            paftools.js view -f maf - |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else\n        \"\"\"\n        echo \"Distance not recognised\"\n        \"\"\"\n\n}",
        "nb_lignes_process": 58,
        "string_script": "    if( params.distance == 'near' )\n        \"\"\"\n        minimap2 -t ${task.cpus} --cs=long ${srcfile} ${tgtfile} ${minimap2Near} | \n            paftools.js view -f maf - |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'medium' )\n        \"\"\"\n        minimap2 -t ${task.cpus} --cs=long ${srcfile} ${tgtfile} ${minimap2Medium} | \n            paftools.js view -f maf - |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'far' )\n        \"\"\"\n        minimap2 -t ${task.cpus} --cs=long ${srcfile} ${tgtfile} ${minimap2Far} | \n            paftools.js view -f maf - |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else if( params.distance == 'custom' )\n        \"\"\"\n        minimap2 -t ${task.cpus} --cs=long ${srcfile} ${tgtfile} ${params.custom} | \n            paftools.js view -f maf - |\n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n        \"\"\"\n    else\n        \"\"\"\n        echo \"Distance not recognised\"\n        \"\"\"",
        "nb_lignes_script": 35,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "forminimap2_ch",
            "tgt_lift_chM",
            "src_lift_chM"
        ],
        "nb_inputs": 3,
        "outputs": [
            "al_files_chM"
        ],
        "nb_outputs": 1,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"minimap2.${srcname}.${tgtname}\"",
            "publishDir \"${params.outdir}/alignments\"",
            "cpus { 2 * task.attempt }",
            "memory { 8.GB * task.attempt }",
            "time { 12.hour * task.attempt }",
            "clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[ sB]/,'')}\""
        ],
        "when": "params.aligner == \"minimap2\"",
        "stub": ""
    },
    "last": {
        "name_process": "last",
        "string_process": "\nprocess last{    \n    tag \"last.${srcname}.${tgtname}\"\n    publishDir \"${params.outdir}/alignments\"\n\n    cpus { 1 * task.attempt }\n    memory { 8.GB * task.attempt }\n    time { 24.hour * task.attempt }\n    clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\\sB]/,'')}\"\n\n    input: \n        set srcname, srcfile, tgtname, tgtfile from forlast_ch  \n        file tgtlift from tgt_lift_chM\n        file srclift from src_lift_chM\n\n    output: \n        tuple srcname, tgtname, \"${srcname}.${tgtname}.psl\" into al_files_chS\n\n    when:\n        params.aligner == \"last\"\n  \n    script:\n    if( params.distance == 'near' )\n        \"\"\"\n        lastdb -P0 -uNEAR -R01 localDB ${srcfile}\n        lastal -m50 -E0.05 -C2 localDB ${tgtfile} | \n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm localDB.*\n        \"\"\"\n    else if ( params.distance == 'medium' )\n        \"\"\"\n        lastdb -P0 -uMAM8 -R01 localDB ${srcfile}\n        lastal -m75 -E0.05 -C2 localDB ${tgtfile} | \n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm localDB.*\n        \"\"\"\n    else if ( params.distance == 'far' )\n        \"\"\"\n        lastdb -P0 -uMAM4 -R01 localDB ${srcfile}\n        lastal -m100 -E0.05 -C2 localDB ${tgtfile} | \n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm localDB.*\n        \"\"\"\n    else\n        \"\"\"\n        lastdb -P0 -uMAM8 -R01 localDB ${srcfile}\n        lastal ${params.custom} localDB ${tgtfile} | \n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm localDB.*\n        \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    if( params.distance == 'near' )\n        \"\"\"\n        lastdb -P0 -uNEAR -R01 localDB ${srcfile}\n        lastal -m50 -E0.05 -C2 localDB ${tgtfile} | \n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm localDB.*\n        \"\"\"\n    else if ( params.distance == 'medium' )\n        \"\"\"\n        lastdb -P0 -uMAM8 -R01 localDB ${srcfile}\n        lastal -m75 -E0.05 -C2 localDB ${tgtfile} | \n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm localDB.*\n        \"\"\"\n    else if ( params.distance == 'far' )\n        \"\"\"\n        lastdb -P0 -uMAM4 -R01 localDB ${srcfile}\n        lastal -m100 -E0.05 -C2 localDB ${tgtfile} | \n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm localDB.*\n        \"\"\"\n    else\n        \"\"\"\n        lastdb -P0 -uMAM8 -R01 localDB ${srcfile}\n        lastal ${params.custom} localDB ${tgtfile} | \n            maf-convert psl - |\n            liftUp -type=.psl stdout $srclift warn stdin |\n            liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin && rm localDB.*\n        \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [
            "mblastall"
        ],
        "tools_url": [
            "https://bio.tools/mblastall"
        ],
        "tools_dico": [
            {
                "name": "mblastall",
                "uri": "https://bio.tools/mblastall",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0338",
                                    "term": "Sequence database search"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "Search nucleotide database with nucleotide query sequence(s).",
                "homepage": "https://bioweb.pasteur.fr/packages/pack@ptools@0.99d"
            }
        ],
        "inputs": [
            "forlast_ch",
            "tgt_lift_chM",
            "src_lift_chM"
        ],
        "nb_inputs": 3,
        "outputs": [
            "al_files_chS"
        ],
        "nb_outputs": 1,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"last.${srcname}.${tgtname}\"",
            "publishDir \"${params.outdir}/alignments\"",
            "cpus { 1 * task.attempt }",
            "memory { 8.GB * task.attempt }",
            "time { 24.hour * task.attempt }",
            "clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[ sB]/,'')}\""
        ],
        "when": "params.aligner == \"last\"",
        "stub": ""
    },
    "axtchain": {
        "name_process": "axtchain",
        "string_process": "\nprocess axtchain {\n    tag \"axtchain\"\n    publishDir \"${params.outdir}/singlechains\"\n\n    cpus { 1 * task.attempt }\n    memory { 32.GB * task.attempt }\n    time { 12.hour * task.attempt }\n    clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[\\sB]/,'')}\"\n\n    input:\n        tuple srcname, tgtname, psl from al_files_ch\n        file twoBitS from twoBsrc_ch2\n        file twoBitT from twoBtgt_ch2\n\n    output:\n        file \"${srcname}.${tgtname}.chain\" into chain_files_ch\n\n    script:\n    if( params.distance == 'near' )\n    \"\"\"\n    axtChain $chainNear -verbose=0 -psl $psl ${twoBitS} ${twoBitT} stdout | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"\n    else if (params.distance == 'medium')\n    \"\"\"\n    axtChain $chainMedium -verbose=0 -psl $psl ${twoBitS} ${twoBitT} stdout | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"\n    else if (params.distance == 'far')\n    \"\"\"\n    axtChain $chainFar -verbose=0 -psl $psl ${twoBitS} ${twoBitT} | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    if( params.distance == 'near' )\n    \"\"\"\n    axtChain $chainNear -verbose=0 -psl $psl ${twoBitS} ${twoBitT} stdout | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"\n    else if (params.distance == 'medium')\n    \"\"\"\n    axtChain $chainMedium -verbose=0 -psl $psl ${twoBitS} ${twoBitT} stdout | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"\n    else if (params.distance == 'far')\n    \"\"\"\n    axtChain $chainFar -verbose=0 -psl $psl ${twoBitS} ${twoBitT} | chainAntiRepeat ${twoBitS} ${twoBitT} stdin stdout > ${srcname}.${tgtname}.chain\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "al_files_ch",
            "twoBsrc_ch2",
            "twoBtgt_ch2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "chain_files_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"axtchain\"",
            "publishDir \"${params.outdir}/singlechains\"",
            "cpus { 1 * task.attempt }",
            "memory { 32.GB * task.attempt }",
            "time { 12.hour * task.attempt }",
            "clusterOptions \"-P roslin_ctlgh -l h_vmem=${task.memory.toString().replaceAll(/[ sB]/,'')}\""
        ],
        "when": "",
        "stub": ""
    },
    "src2bit": {
        "name_process": "src2bit",
        "string_process": "\nprocess src2bit {\n    tag \"src2Bit\"\n    publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true\n    label 'medium'\n\n    input:\n    path source\n\n    output:\n    path \"source.2bit\", emit: twoBsrc\n    path \"source.sizes\", emit: twoBsrcNFO\n\n    stub:\n    \"\"\"\n    touch source.2bit\n    touch source.sizes\n    \"\"\"\n\n    script:\n    \"\"\"\n    if [ `faSize -tab ${source} | awk '\\$1==\"baseCount\" {print \\$2}'` -lt 4000000000 ]; then\n        faToTwoBit ${source} source.2bit\n        twoBitInfo source.2bit source.sizes\n    else\n        faToTwoBit -long ${source} source.2bit\n        twoBitInfo source.2bit source.sizes\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    if [ `faSize -tab ${source} | awk '\\$1==\"baseCount\" {print \\$2}'` -lt 4000000000 ]; then\n        faToTwoBit ${source} source.2bit\n        twoBitInfo source.2bit source.sizes\n    else\n        faToTwoBit -long ${source} source.2bit\n        twoBitInfo source.2bit source.sizes\n    fi\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "source"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"src2Bit\"",
            "publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch source.2bit\n    touch source.sizes\n    \"\"\""
    },
    "tgt2bit": {
        "name_process": "tgt2bit",
        "string_process": "\nprocess tgt2bit {\n    tag \"tgt2Bit\"\n    publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true\n    label 'small'\n\n    input:\n    path target\n\n    output:\n    path \"target.2bit\", emit: twoBtgt\n    path \"target.sizes\", emit: twoBtgtNFO\n\n    stub:\n    \"\"\"\n    touch target.2bit\n    touch target.sizes\n    \"\"\"\n\n    script:\n    \"\"\"\n    if [ `faSize -tab ${target} | awk '\\$1==\"baseCount\" {print \\$2}'` -lt 4000000000 ]; then\n        faToTwoBit ${target} target.2bit\n        twoBitInfo target.2bit target.sizes\n    else\n        faToTwoBit -long ${target} target.2bit\n        twoBitInfo target.2bit target.sizes\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    if [ `faSize -tab ${target} | awk '\\$1==\"baseCount\" {print \\$2}'` -lt 4000000000 ]; then\n        faToTwoBit ${target} target.2bit\n        twoBitInfo target.2bit target.sizes\n    else\n        faToTwoBit -long ${target} target.2bit\n        twoBitInfo target.2bit target.sizes\n    fi\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "target"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"tgt2Bit\"",
            "publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch target.2bit\n    touch target.sizes\n    \"\"\""
    },
    "makeooc": {
        "name_process": "makeooc",
        "string_process": "\nprocess makeooc {\n    tag \"ooc\"\n    publishDir \"$params.outdir/splitfa_src\"\n    label 'medium'\n\n    input:\n    path source\n\n    output:\n    path \"11.ooc\", emit: ooc11\n    path \"12.ooc\", emit: ooc12\n\n    stub:\n    \"\"\"\n    touch 11.ooc\n    touch 12.ooc\n    \"\"\"\n\n    script:\n    \"\"\"\n    blat ${source} /dev/null /dev/null -makeOoc=11.ooc -repMatch=1024\n    blat ${source} /dev/null /dev/null -makeOoc=12.ooc -repMatch=1024 -tileSize=12\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    blat ${source} /dev/null /dev/null -makeOoc=11.ooc -repMatch=1024\n    blat ${source} /dev/null /dev/null -makeOoc=12.ooc -repMatch=1024 -tileSize=12\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BLAT"
        ],
        "tools_url": [
            "https://bio.tools/blat"
        ],
        "tools_dico": [
            {
                "name": "BLAT",
                "uri": "https://bio.tools/blat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast, accurate spliced alignment of DNA sequences.",
                "homepage": "http://genome.ucsc.edu/cgi-bin/hgBlat?command=start"
            }
        ],
        "inputs": [
            "source"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"ooc\"",
            "publishDir \"$params.outdir/splitfa_src\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch 11.ooc\n    touch 12.ooc\n    \"\"\""
    },
    "make2bitS": {
        "name_process": "make2bitS",
        "string_process": "\nprocess make2bitS {\n    tag \"twoBit\"\n    publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true\n    label 'small'\n\n    input:\n    path source\n\n    output:\n    path \"source.2bit\", emit: twoBsrc\n\n    stub:\n    \"\"\"\n    touch source.2bit\n    \"\"\"\n\n    script:\n    \"\"\"\n    faToTwoBit ${source} source.2bit\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    faToTwoBit ${source} source.2bit\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "source"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"twoBit\"",
            "publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch source.2bit\n    \"\"\""
    },
    "makeSizeS": {
        "name_process": "makeSizeS",
        "string_process": "\nprocess makeSizeS {\n    tag \"twoBit\"\n    publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true\n    label 'small'\n\n    input:\n    path src\n\n    output:\n    path \"source.sizes\", emit: sizesSrc\n\n    stub:\n    \"\"\"\n    touch source.sizes\n    \"\"\"\n\n    script:\n    \"\"\"\n    twoBitInfo ${src} source.sizes\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    twoBitInfo ${src} source.sizes\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "src"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"twoBit\"",
            "publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch source.sizes\n    \"\"\""
    },
    "make2bitT": {
        "name_process": "make2bitT",
        "string_process": "\nprocess make2bitT {\n    tag \"twoBit\"\n    publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true\n    label 'small'\n\n    input:\n    path target\n\n    output:\n    path \"target.2bit\", emit: twoBtgt\n\n    stub:\n    \"\"\"\n    touch target.2bit\n    \"\"\"\n\n    script:\n    \"\"\"\n    faToTwoBit ${target} target.2bit\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    faToTwoBit ${target} target.2bit\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "target"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"twoBit\"",
            "publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch target.2bit\n    \"\"\""
    },
    "makeSizeT": {
        "name_process": "makeSizeT",
        "string_process": "\nprocess makeSizeT {\n    tag \"twoBit\"\n    publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true\n    label 'small'\n\n    input:\n    path tgt\n\n    output:\n    path \"target.sizes\", emit: sizesTgt\n\n    stub:\n    \"\"\"\n    touch target.sizes\n    \"\"\"\n\n    script:\n    \"\"\"\n    twoBitInfo ${tgt} target.sizes\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    twoBitInfo ${tgt} target.sizes\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tgt"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"twoBit\"",
            "publishDir \"$params.outdir/genome2bit\", mode: params.publish_dir_mode, overwrite: true",
            "label 'small'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch target.sizes\n    \"\"\""
    },
    "minimap2_near": {
        "name_process": "minimap2_near",
        "string_process": "\nprocess minimap2_near{    \n    tag \"minimap2.${params.distance}.${srcname}.${tgtname}\"\n    label 'gsalign'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        file tgtlift \n        file srclift \n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    minimap2 -t ${task.cpus} ${minimap2Near} --cs=long ${srcfile} ${tgtfile} | \n        paftools.js view -f maf - |\n        maf-convert psl - |\n        liftUp -type=.psl stdout $srclift warn stdin |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    minimap2 -t ${task.cpus} ${minimap2Near} --cs=long ${srcfile} ${tgtfile} | \n        paftools.js view -f maf - |\n        maf-convert psl - |\n        liftUp -type=.psl stdout $srclift warn stdin |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"minimap2.${params.distance}.${srcname}.${tgtname}\"",
            "label 'gsalign'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "minimap2_medium": {
        "name_process": "minimap2_medium",
        "string_process": "\nprocess minimap2_medium{\n    tag \"minimap2.${params.distance}.${srcname}.${tgtname}\"\n    label 'gsalign'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        file tgtlift \n        file srclift \n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    minimap2 -t ${task.cpus} --cs=long ${minimap2Medium} ${srcfile} ${tgtfile} | \n        paftools.js view -f maf - |\n        maf-convert psl - |\n        liftUp -type=.psl stdout $srclift warn stdin |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    minimap2 -t ${task.cpus} --cs=long ${minimap2Medium} ${srcfile} ${tgtfile} | \n        paftools.js view -f maf - |\n        maf-convert psl - |\n        liftUp -type=.psl stdout $srclift warn stdin |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"minimap2.${params.distance}.${srcname}.${tgtname}\"",
            "label 'gsalign'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "minimap2_far": {
        "name_process": "minimap2_far",
        "string_process": "\nprocess minimap2_far{\n    tag \"minimap2.${params.distance}.${srcname}.${tgtname}\"\n    label 'gsalign'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        file tgtlift \n        file srclift \n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    minimap2 -t ${task.cpus} --cs=long ${minimap2Far} ${srcfile} ${tgtfile} | \n        paftools.js view -f maf - |\n        maf-convert psl - |\n        liftUp -type=.psl stdout $srclift warn stdin |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    minimap2 -t ${task.cpus} --cs=long ${minimap2Far} ${srcfile} ${tgtfile} | \n        paftools.js view -f maf - |\n        maf-convert psl - |\n        liftUp -type=.psl stdout $srclift warn stdin |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"minimap2.${params.distance}.${srcname}.${tgtname}\"",
            "label 'gsalign'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    },
    "minimap2_custom": {
        "name_process": "minimap2_custom",
        "string_process": "\nprocess minimap2_custom{    \n    tag \"minimap2.${params.distance}.${srcname}.${tgtname}\"\n    label 'gsalign'\n\n    input: \n        tuple val(srcname), val(srcfile), val(tgtname), val(tgtfile) \n        file tgtlift \n        file srclift \n\n    output: \n        tuple val(srcname), val(tgtname), file(\"${srcname}.${tgtname}.psl\"), emit: al_files_ch\n  \n    stub:\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\"\n\n    script:\n    \"\"\"\n    minimap2 -t ${task.cpus} --cs=long ${params.custom} ${srcfile} ${tgtfile} | \n        paftools.js view -f maf - |\n        maf-convert psl - |\n        liftUp -type=.psl stdout $srclift warn stdin |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    minimap2 -t ${task.cpus} --cs=long ${params.custom} ${srcfile} ${tgtfile} | \n        paftools.js view -f maf - |\n        maf-convert psl - |\n        liftUp -type=.psl stdout $srclift warn stdin |\n        liftUp -type=.psl -pslQ ${srcname}.${tgtname}.psl $tgtlift warn stdin \n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "srcname",
            "srcfile",
            "tgtname",
            "tgtfile",
            "tgtlift",
            "srclift"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "evotools__nf-LO",
        "directive": [
            "tag \"minimap2.${params.distance}.${srcname}.${tgtname}\"",
            "label 'gsalign'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${srcname}.${tgtname}.psl\n    \"\"\""
    }
}
{
    "fetch_testdata": {
        "name_process": "fetch_testdata",
        "string_process": "\nprocess fetch_testdata {\n  publishDir './'\n\n  output:\n  path \"*\"\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  wget https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/FemaleLiver-Data.zip\n  unzip FemaleLiver-Data.zip\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  wget https://horvath.genetics.ucla.edu/html/CoexpressionNetwork/Rpackages/WGCNA/Tutorials/FemaleLiver-Data.zip\n  unzip FemaleLiver-Data.zip\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "j23414__wgcna_nf",
        "directive": [
            "publishDir './'"
        ],
        "when": "",
        "stub": ""
    },
    "read_xlsx": {
        "name_process": "read_xlsx",
        "string_process": "\nprocess read_xlsx {\n  tag \"$xlsx.fileName\"\n\n  input:\n  path xlsx\n\n  output:\n  path \"${xlsx.simpleName}.RData\"\n\n  script:\n  \"\"\"\n  #! /usr/bin/env Rscript\n  data <- readxl::read_excel(\"$xlsx\")\n  names(data) <- gsub(\":\",\"_\", names(data))\n  save(data, file=\"${xlsx.simpleName}.RData\")\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  #! /usr/bin/env Rscript\n  data <- readxl::read_excel(\"$xlsx\")\n  names(data) <- gsub(\":\",\"_\", names(data))\n  save(data, file=\"${xlsx.simpleName}.RData\")\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "xlsx"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "j23414__wgcna_nf",
        "directive": [
            "tag \"$xlsx.fileName\""
        ],
        "when": "",
        "stub": ""
    },
    "read_delim": {
        "name_process": "read_delim",
        "string_process": "\nprocess read_delim {\n  tag \"$infile.fileName\"\n\n  input:\n  path infile\n\n  output:\n  path \"${infile.simpleName}.RData\"\n\n  script:\n  \"\"\"\n  #! /usr/bin/env Rscript\n  data <- readr::read_delim(\"$infile\",\n                            delim=\"$params.delim\")\n  names(data) <- gsub(\":\", \"_\", names(data))\n  save(data, file=\"${infile.simpleName}.RData\")\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  #! /usr/bin/env Rscript\n  data <- readr::read_delim(\"$infile\",\n                            delim=\"$params.delim\")\n  names(data) <- gsub(\":\", \"_\", names(data))\n  save(data, file=\"${infile.simpleName}.RData\")\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "infile"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "j23414__wgcna_nf",
        "directive": [
            "tag \"$infile.fileName\""
        ],
        "when": "",
        "stub": ""
    },
    "plot_expression": {
        "name_process": "plot_expression",
        "string_process": "\nprocess plot_expression {\n  tag \"${in_RData.fileName}\"\n  input:\n  path in_RData\n                               \n                              \n\n  output:\n  path \"*\"\n\n  script:\n  \"\"\"\n  #! /usr/bin/env Rscript\n  library(magrittr)\n  library(ggplot2)\n\n  load(\\\"$in_RData\\\")\n  cdata <- data %>%\n    tidyr::pivot_longer(., cols = starts_with(\"F2\"))\n\n  p <- cdata %>% ggplot(., aes(x=name, y= value, group=substanceBXH)) +\n    geom_line(alpha=0.5) +\n    theme_bw() +\n    theme(\n      axis.text.x = element_text(angle=90, hjust=0.5)\n      )+\n    labs(\n      x=\"treatment\",\n      y=\"expression\"\n      )\n  ggsave(\"expression.png\", plot=p, height=3, width=9)\n  \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "  \"\"\"\n  #! /usr/bin/env Rscript\n  library(magrittr)\n  library(ggplot2)\n\n  load(\\\"$in_RData\\\")\n  cdata <- data %>%\n    tidyr::pivot_longer(., cols = starts_with(\"F2\"))\n\n  p <- cdata %>% ggplot(., aes(x=name, y= value, group=substanceBXH)) +\n    geom_line(alpha=0.5) +\n    theme_bw() +\n    theme(\n      axis.text.x = element_text(angle=90, hjust=0.5)\n      )+\n    labs(\n      x=\"treatment\",\n      y=\"expression\"\n      )\n  ggsave(\"expression.png\", plot=p, height=3, width=9)\n  \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_RData"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "j23414__wgcna_nf",
        "directive": [
            "tag \"${in_RData.fileName}\""
        ],
        "when": "",
        "stub": ""
    },
    "prep_data": {
        "name_process": "prep_data",
        "string_process": "\nprocess prep_data {\n  tag \"${in_RData.fileName}\"\n  input:\n  path in_RData\n\n  output:\n  path \"${in_RData.simpleName}_mat.RData\"\n\n  script:\n  \"\"\"\n  #! /usr/bin/env Rscript\n  load('$in_RData')\n  library(magrittr)\n\n  inputMatrix <- data %>%\n    dplyr::select(starts_with(\"F2\")) %>%\n    {\n      row.names(.) = data\\$substanceBXH\n      .\n    } %>%\n    t(.)\n\n  save(inputMatrix, file = '${in_RData.simpleName}_mat.RData')\n\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  \"\"\"\n  #! /usr/bin/env Rscript\n  load('$in_RData')\n  library(magrittr)\n\n  inputMatrix <- data %>%\n    dplyr::select(starts_with(\"F2\")) %>%\n    {\n      row.names(.) = data\\$substanceBXH\n      .\n    } %>%\n    t(.)\n\n  save(inputMatrix, file = '${in_RData.simpleName}_mat.RData')\n\n  \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_RData"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "j23414__wgcna_nf",
        "directive": [
            "tag \"${in_RData.fileName}\""
        ],
        "when": "",
        "stub": ""
    },
    "pick_soft_threshold": {
        "name_process": "pick_soft_threshold",
        "string_process": "\nprocess pick_soft_threshold {\n  tag \"${in_RData.fileName}\"\n  input:\n  path in_RData\n\n  output:\n  path \"*\"\n\n  script:\n  \"\"\"\n  #! /usr/bin/env Rscript\n  library(WGCNA)\n  allowWGCNAThreads()\n\n  load('$in_RData')\n\n  powers = c(c(1:10), seq(from=12, to=20, by=2))\n  sft = pickSoftThreshold(\n    inputMatrix,\n    powerVector = powers,\n    verbose = 5\n    )\n\n  # Plot the results:\n  png(\"softthreshold.png\", width=600, height=300)\n  par(mfrow = c(1,2));\n  cex1 = 0.9;\n  plot(\n    sft\\$fitIndices[, 1],\n    -sign(sft\\$fitIndices[, 3]) * sft\\$fitIndices[, 2],\n    xlab = \"Soft Threshold (power)\",\n    ylab = \"Scale Free Topology Model Fit, signed R^2\",\n    main = paste(\"Scale independence\")\n  )\n  text(\n    sft\\$fitIndices[, 1],\n    -sign(sft\\$fitIndices[, 3]) * sft\\$fitIndices[, 2],\n    labels = powers,\n    cex = cex1,\n    col = \"red\"\n  )\n  abline(h = 0.90, col = \"red\")\n  plot(\n    sft\\$fitIndices[, 1],\n    sft\\$fitIndices[, 5],\n    xlab = \"Soft Threshold (power)\",\n    ylab = \"Mean Connectivity\", type = \"n\", main = paste(\"Mean connectivity\")\n  )\n  text(\n    sft\\$fitIndices[, 1],\n    sft\\$fitIndices[, 5],\n    labels = powers,\n    cex = cex1,\n    col = \"red\"\n    )\n  dev.off()\n  \"\"\"\n}",
        "nb_lignes_process": 57,
        "string_script": "  \"\"\"\n  #! /usr/bin/env Rscript\n  library(WGCNA)\n  allowWGCNAThreads()\n\n  load('$in_RData')\n\n  powers = c(c(1:10), seq(from=12, to=20, by=2))\n  sft = pickSoftThreshold(\n    inputMatrix,\n    powerVector = powers,\n    verbose = 5\n    )\n\n  # Plot the results:\n  png(\"softthreshold.png\", width=600, height=300)\n  par(mfrow = c(1,2));\n  cex1 = 0.9;\n  plot(\n    sft\\$fitIndices[, 1],\n    -sign(sft\\$fitIndices[, 3]) * sft\\$fitIndices[, 2],\n    xlab = \"Soft Threshold (power)\",\n    ylab = \"Scale Free Topology Model Fit, signed R^2\",\n    main = paste(\"Scale independence\")\n  )\n  text(\n    sft\\$fitIndices[, 1],\n    -sign(sft\\$fitIndices[, 3]) * sft\\$fitIndices[, 2],\n    labels = powers,\n    cex = cex1,\n    col = \"red\"\n  )\n  abline(h = 0.90, col = \"red\")\n  plot(\n    sft\\$fitIndices[, 1],\n    sft\\$fitIndices[, 5],\n    xlab = \"Soft Threshold (power)\",\n    ylab = \"Mean Connectivity\", type = \"n\", main = paste(\"Mean connectivity\")\n  )\n  text(\n    sft\\$fitIndices[, 1],\n    sft\\$fitIndices[, 5],\n    labels = powers,\n    cex = cex1,\n    col = \"red\"\n    )\n  dev.off()\n  \"\"\"",
        "nb_lignes_script": 47,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_RData"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "j23414__wgcna_nf",
        "directive": [
            "tag \"${in_RData.fileName}\""
        ],
        "when": "",
        "stub": ""
    },
    "wgcna_network": {
        "name_process": "wgcna_network",
        "string_process": "\nprocess wgcna_network {\n  tag \"${in_RData.fileName}\"\n  input:\n  path in_RData\n\n  output:\n  tuple path(\"*TOM*\"), path(\"*.png\"), path(\"*clusters.RData\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env Rscript\n  load('$in_RData')\n\n  library(WGCNA)\n  allowWGCNAThreads()\n\n  netwk = blockwiseModules(\n    inputMatrix,\n    power = $params.power,\n    TOMType = \"unsigned\",\n    minModuleSize = 30,\n    reassignThreshold = 0,\n    mergeCutHeight = 0.25,\n    numericLabels = TRUE,\n    pamRespectsDendro = FALSE,\n    saveTOMs = TRUE,\n    saveTOMFileBase = \"${in_RData.simpleName}TOM\",\n    verbose = 3)\n\n  mergedColors = labels2colors(netwk\\$colors)\n  png(\"wgcna_modules.png\", width=800, height=300)\n  plotDendroAndColors(\n    netwk\\$dendrograms[[1]],\n    mergedColors[netwk\\$blockGenes[[1]]],\n    \"Module colors\",\n    dendroLabels = FALSE, hang = 0.03,\n    addGuide = TRUE, guideHang = 0.05)\n  dev.off()\n\n  save(mergedColors, file = '${in_RData.simpleName}_clusters.RData')\n  \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "  \"\"\"\n  #! /usr/bin/env Rscript\n  load('$in_RData')\n\n  library(WGCNA)\n  allowWGCNAThreads()\n\n  netwk = blockwiseModules(\n    inputMatrix,\n    power = $params.power,\n    TOMType = \"unsigned\",\n    minModuleSize = 30,\n    reassignThreshold = 0,\n    mergeCutHeight = 0.25,\n    numericLabels = TRUE,\n    pamRespectsDendro = FALSE,\n    saveTOMs = TRUE,\n    saveTOMFileBase = \"${in_RData.simpleName}TOM\",\n    verbose = 3)\n\n  mergedColors = labels2colors(netwk\\$colors)\n  png(\"wgcna_modules.png\", width=800, height=300)\n  plotDendroAndColors(\n    netwk\\$dendrograms[[1]],\n    mergedColors[netwk\\$blockGenes[[1]]],\n    \"Module colors\",\n    dendroLabels = FALSE, hang = 0.03,\n    addGuide = TRUE, guideHang = 0.05)\n  dev.off()\n\n  save(mergedColors, file = '${in_RData.simpleName}_clusters.RData')\n  \"\"\"",
        "nb_lignes_script": 31,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_RData"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "j23414__wgcna_nf",
        "directive": [
            "tag \"${in_RData.fileName}\""
        ],
        "when": "",
        "stub": ""
    },
    "append_clusters": {
        "name_process": "append_clusters",
        "string_process": "\nprocess append_clusters {\n  tag \"${mergedColors_RData.fileName}\"\n\n  input:\n  tuple path(mergedColors_RData), path(data_RData)\n\n  output:\n  path \"*\"\n\n  script:\n  \"\"\"\n  #! /usr/bin/env Rscript\n  load('$mergedColors_RData')\n  load('$data_RData')\n\n  fin_data = data\n  fin_data\\$cluster = mergedColors\n\n  save(fin_data, file = '${data_RData.simpleName}_clusters.RData')\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  #! /usr/bin/env Rscript\n  load('$mergedColors_RData')\n  load('$data_RData')\n\n  fin_data = data\n  fin_data\\$cluster = mergedColors\n\n  save(fin_data, file = '${data_RData.simpleName}_clusters.RData')\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mergedColors_RData",
            "data_RData"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "j23414__wgcna_nf",
        "directive": [
            "tag \"${mergedColors_RData.fileName}\""
        ],
        "when": "",
        "stub": ""
    },
    "toExcel": {
        "name_process": "toExcel",
        "string_process": "\nprocess toExcel {\n  tag \"${RData.fileName}\"\n\n  input:\n  path(RData)\n\n  output:\n  path(\"${RData.simpleName}.xlsx\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env Rscript\n  load('$RData')  # fin_data\n\n  writexl::write_xlsx(fin_data, path=\"${RData.simpleName}.xlsx\")\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  #! /usr/bin/env Rscript\n  load('$RData')  # fin_data\n\n  writexl::write_xlsx(fin_data, path=\"${RData.simpleName}.xlsx\")\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "RData"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "j23414__wgcna_nf",
        "directive": [
            "tag \"${RData.fileName}\""
        ],
        "when": "",
        "stub": ""
    },
    "plot_expression_clusters": {
        "name_process": "plot_expression_clusters",
        "string_process": "\nprocess plot_expression_clusters {\n  tag \"${RData.fileName}\"\n  input:\n  path(RData)\n\n  output:\n  path(\"*\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env Rscript\n  load('$RData')\n  library(ggplot2)\n  library(magrittr)\n\n  m_fin_data <- fin_data %>%\n    tidyr::pivot_longer(cols = matches('^F2', perl=TRUE))\n\n  my_palette = unique(m_fin_data\\$cluster)\n  names(my_palette) = unique(m_fin_data\\$cluster)\n\n  p <- m_fin_data %>%\n    ggplot(., aes(x=name, y=value, group=substanceBXH, color=cluster)) +\n    geom_line(alpha=0.5) +\n    theme_bw() +\n    theme(\n      axis.text.x = element_text(angle=90, hjust=1, vjust = 0.5),\n      legend.position = \"none\"\n      ) +\n    scale_color_manual(values=my_palette)+\n    labs(x=\"treatment\", y=\"expression\") +\n    facet_wrap(cluster~., ncol = 2)\n  ggsave(\"expression_clusters.png\", plot=p, width=15, height=15)\n  \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "  \"\"\"\n  #! /usr/bin/env Rscript\n  load('$RData')\n  library(ggplot2)\n  library(magrittr)\n\n  m_fin_data <- fin_data %>%\n    tidyr::pivot_longer(cols = matches('^F2', perl=TRUE))\n\n  my_palette = unique(m_fin_data\\$cluster)\n  names(my_palette) = unique(m_fin_data\\$cluster)\n\n  p <- m_fin_data %>%\n    ggplot(., aes(x=name, y=value, group=substanceBXH, color=cluster)) +\n    geom_line(alpha=0.5) +\n    theme_bw() +\n    theme(\n      axis.text.x = element_text(angle=90, hjust=1, vjust = 0.5),\n      legend.position = \"none\"\n      ) +\n    scale_color_manual(values=my_palette)+\n    labs(x=\"treatment\", y=\"expression\") +\n    facet_wrap(cluster~., ncol = 2)\n  ggsave(\"expression_clusters.png\", plot=p, width=15, height=15)\n  \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "RData"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "j23414__wgcna_nf",
        "directive": [
            "tag \"${RData.fileName}\""
        ],
        "when": "",
        "stub": ""
    }
}
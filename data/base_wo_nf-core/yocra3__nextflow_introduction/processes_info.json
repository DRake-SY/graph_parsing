{
    "splitLetters": {
        "name_process": "splitLetters",
        "string_process": "\nprocess splitLetters {\n  \n  input:\n    val x from greeting_ch\n  \n  output:\n    file '*.txt' into letters\n  \n  script:\n  \"\"\"\n  for word in $x\n  do\n    echo \\$word > \\${word}.txt\n  done\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  for word in $x\n  do\n    echo \\$word > \\${word}.txt\n  done\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "greeting_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "letters"
        ],
        "nb_outputs": 1,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "convertToUpper": {
        "name_process": "convertToUpper",
        "string_process": "\nprocess convertToUpper {\n  \n  input:\n  file y from letters.flatten()\n  \n  output:\n  stdout into result\n  \n  script:\n  \"\"\"\n  cat $y | tr '[a-z]' '[A-Z]' \n  \"\"\"\n\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  cat $y | tr '[a-z]' '[A-Z]' \n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "letters"
        ],
        "nb_inputs": 1,
        "outputs": [
            "result"
        ],
        "nb_outputs": 1,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "multi_same_length": {
        "name_process": "multi_same_length",
        "string_process": "\nprocess multi_same_length {\n  echo true\n  input:\n  val x from Channel.from(1,2,3)\n  val y from Channel.from('a','b','c')\n  \n  script:\n   \"\"\"\n   echo $x and $y\n   \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "   \"\"\"\n   echo $x and $y\n   \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "comb1": {
        "name_process": "comb1",
        "string_process": "\nprocess comb1 {\n  echo true\n  input:\n  val x from Channel.from(1,2,3)\n  val y from Channel.from('a','b','c')\n  output: val \"$x and $y\" into out\n  script:\n   \"\"\"\n   echo $x and $y\n   \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "   \"\"\"\n   echo $x and $y\n   \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "comb2": {
        "name_process": "comb2",
        "string_process": "\nprocess comb2 {\n  echo true\n  input:\n  val a from out\n  val b from Channel.from('A','B','C')\n  script:\n   \"\"\"\n   echo $a and $b\n   \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "   \"\"\"\n   echo $a and $b\n   \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "out"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "multi_diff_length": {
        "name_process": "multi_diff_length",
        "string_process": "\nprocess multi_diff_length {\n  echo true\n  input:\n  val x from Channel.from(1,2)\n  val y from Channel.from('a','b','c','d')\n  \n  script:\n   \"\"\"\n   echo $x and $y\n   \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "   \"\"\"\n   echo $x and $y\n   \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "CREATE_FASTQ": {
        "name_process": "CREATE_FASTQ",
        "string_process": "process CREATE_FASTQ {\n  \n  input:\n    val x \n  \n  output:\n    path ('*.fastq'), emit: fastq \n    val(x), emit: prefix\n  \n  script:\n    \"\"\"\n  echo $x > ${x}.fastq\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n  echo $x > ${x}.fastq\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "x"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "CREATE_BAM": {
        "name_process": "CREATE_BAM",
        "string_process": "\nprocess CREATE_BAM {\n  \n  input:\n    path(fastq)\n  \n  output:\n    path('*.bam')\n  \n  script:\n    \"\"\"\n  cat $fastq > \\$(basename $fastq .fastq).bam\n  \"\"\"\n  \n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n  cat $fastq > \\$(basename $fastq .fastq).bam\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "CREATE_VCF": {
        "name_process": "CREATE_VCF",
        "string_process": "\nprocess CREATE_VCF {\n  \n  input:\n    path(bam)\n  \n  output:\n    path('*.vcf') \n  \n  script:\n    \"\"\"\n  cat $bam > \\$(basename bam .bam).vcf\n  \"\"\"\n  \n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n  cat $bam > \\$(basename bam .bam).vcf\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "createFastq": {
        "name_process": "createFastq",
        "string_process": "\nprocess createFastq {\n  \n  input:\n    val x from file_names\n  \n  output:\n    file '*.fastq' into fastq\n  \n  script:\n  \"\"\"\n  echo $x > ${x}.fastq\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "  \"\"\"\n  echo $x > ${x}.fastq\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_names"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastq"
        ],
        "nb_outputs": 1,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "createBam": {
        "name_process": "createBam",
        "string_process": "\nprocess createBam {\n  \n  input:\n  file(fastq) from fastq\n  \n  output:\n  file('*.bam') into bam\n  \n  script:\n  \"\"\"\n  cat $fastq > \\$(basename $fastq .fastq).bam\n  \"\"\"\n\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  cat $fastq > \\$(basename $fastq .fastq).bam\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam"
        ],
        "nb_outputs": 1,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "createVCF": {
        "name_process": "createVCF",
        "string_process": "\nprocess createVCF {\n  \n  input:\n  file(bam) from bam\n  \n  output:\n  file('*.vcf') into vcf\n  \n  script:\n  \"\"\"\n  cat $bam > \\$(basename bam .bam).vcf\n  \"\"\"\n\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  cat $bam > \\$(basename bam .bam).vcf\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "value": {
        "name_process": "value",
        "string_process": "\nprocess value {\n  echo true\n  input:\n  val x from Channel.value(1)\n  val y from Channel.from('a','b','c')\n  script:\n   \"\"\"\n   echo $x and $y\n   \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "   \"\"\"\n   echo $x and $y\n   \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "repeaters": {
        "name_process": "repeaters",
        "string_process": "\nprocess repeaters {\n  echo true\n  input:\n  val x from Channel.from(1,2)\n  each y from Channel.from('a','b','c')\n  \n  script:\n   \"\"\"\n   echo $x and $y\n   \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "   \"\"\"\n   echo $x and $y\n   \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "yocra3__nextflow_introduction",
        "directive": [
            "echo true"
        ],
        "when": "",
        "stub": ""
    }
}
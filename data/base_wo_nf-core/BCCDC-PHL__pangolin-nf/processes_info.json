{
    "update_pangolin": {
        "name_process": "update_pangolin",
        "string_process": "process update_pangolin {\n\n  tag { should_update.toString() }\n  \n  executor 'local'\n\n  input:\n  val(should_update)\n\n  output:\n  val(did_update)\n\n  script:\n  did_update = should_update\n  should_update_string = should_update ? \"true\" : \"false\"\n  \"\"\"\n  should_update=${should_update_string}\n  if [ \"\\$should_update\" = true ]\n  then\n    pangolin --update\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  did_update = should_update\n  should_update_string = should_update ? \"true\" : \"false\"\n  \"\"\"\n  should_update=${should_update_string}\n  if [ \"\\$should_update\" = true ]\n  then\n    pangolin --update\n  fi\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "should_update"
        ],
        "nb_inputs": 1,
        "outputs": [
            "did_update"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__pangolin-nf",
        "directive": [
            "tag { should_update.toString() }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "update_pangolin_data": {
        "name_process": "update_pangolin_data",
        "string_process": "\nprocess update_pangolin_data {\n\n  tag { should_update.toString() }\n  \n  executor 'local'\n\n  input:\n  tuple val(should_update), val(pangolin_did_update)\n\n  output:\n  val(did_update)\n\n  script:\n  did_update = should_update\n  should_update_string = should_update ? \"true\" : \"false\"\n  \"\"\"\n  should_update=${should_update_string}\n  if [ \"\\$should_update\" = true ]\n  then\n    pangolin --update-data\n  fi\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  did_update = should_update\n  should_update_string = should_update ? \"true\" : \"false\"\n  \"\"\"\n  should_update=${should_update_string}\n  if [ \"\\$should_update\" = true ]\n  then\n    pangolin --update-data\n  fi\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "should_update",
            "pangolin_did_update"
        ],
        "nb_inputs": 2,
        "outputs": [
            "did_update"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__pangolin-nf",
        "directive": [
            "tag { should_update.toString() }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "prepare_multi_fasta": {
        "name_process": "prepare_multi_fasta",
        "string_process": "\nprocess prepare_multi_fasta {\n\n  tag { run_id }\n\n  executor 'local'\n\n  input:\n  tuple val(run_id), path(analysis_dir)\n\n  output:\n  tuple val(run_id), path(\"${run_id}.consensus.fa\"), path(\"${run_id}.qc.csv\")\n\n  script:\n                                                                                                                         \n                                                             \n                                                                                       \n  consensus_subdir = params.ivar_consensus ? 'ncovIllumina_sequenceAnalysis_makeConsensus' : 'ncovIllumina_sequenceAnalysis_callConsensusFreebayes'\n  awk_string = params.ivar_consensus ? '/^>/ { split($2, a, \".\"); print \">\"a[1] }; !/^>/ { print $0 }' : '/^>/ { print $0 }; !/^>/ { printf \"%s\", $0 }; END { print \"\"}'\n  \"\"\"\n  export LATEST_ARTIC_ANALYSIS_VERSION=\\$(ls -1 ${run_id} | grep \"ncov2019-artic-nf-.*-output\" | cut -d '-' -f 4 | tail -n 1 | tr -d \\$'\\\\n')\n  cp ${analysis_dir}/ncov2019-artic-nf-\\${LATEST_ARTIC_ANALYSIS_VERSION}-output/${run_id}.qc.csv .\n  tail -n+2 ${run_id}.qc.csv | grep -iv '^NEG' | cut -d ',' -f 1 > ${run_id}_samples.csv\n  touch ${run_id}.consensus.fa\n  while IFS=\",\" read -r sample_id; do\n    cat ${analysis_dir}/ncov2019-artic-nf-\\${LATEST_ARTIC_ANALYSIS_VERSION}-output/${consensus_subdir}/\\${sample_id}*.fa \\\n      | awk -F \"_\" '${awk_string}' \\\n      >> ${run_id}.consensus.fa;\n  done < ${run_id}_samples.csv\n  \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "  consensus_subdir = params.ivar_consensus ? 'ncovIllumina_sequenceAnalysis_makeConsensus' : 'ncovIllumina_sequenceAnalysis_callConsensusFreebayes'\n  awk_string = params.ivar_consensus ? '/^>/ { split($2, a, \".\"); print \">\"a[1] }; !/^>/ { print $0 }' : '/^>/ { print $0 }; !/^>/ { printf \"%s\", $0 }; END { print \"\"}'\n  \"\"\"\n  export LATEST_ARTIC_ANALYSIS_VERSION=\\$(ls -1 ${run_id} | grep \"ncov2019-artic-nf-.*-output\" | cut -d '-' -f 4 | tail -n 1 | tr -d \\$'\\\\n')\n  cp ${analysis_dir}/ncov2019-artic-nf-\\${LATEST_ARTIC_ANALYSIS_VERSION}-output/${run_id}.qc.csv .\n  tail -n+2 ${run_id}.qc.csv | grep -iv '^NEG' | cut -d ',' -f 1 > ${run_id}_samples.csv\n  touch ${run_id}.consensus.fa\n  while IFS=\",\" read -r sample_id; do\n    cat ${analysis_dir}/ncov2019-artic-nf-\\${LATEST_ARTIC_ANALYSIS_VERSION}-output/${consensus_subdir}/\\${sample_id}*.fa \\\n      | awk -F \"_\" '${awk_string}' \\\n      >> ${run_id}.consensus.fa;\n  done < ${run_id}_samples.csv\n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "ENdb"
        ],
        "tools_url": [
            "https://bio.tools/ENdb"
        ],
        "tools_dico": [
            {
                "name": "ENdb",
                "uri": "https://bio.tools/ENdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0440",
                                    "term": "Promoter prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A manually curated database of experimentally supported enhancers for human and mouse. Enhancers are a class of cis-regulatory elements that can increase gene transcription by forming loops in intergenic regions, introns and exons",
                "homepage": "http://www.licpathway.net/ENdb"
            }
        ],
        "inputs": [
            "run_id",
            "analysis_dir"
        ],
        "nb_inputs": 2,
        "outputs": [
            "run_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__pangolin-nf",
        "directive": [
            "tag { run_id }",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "pangolin": {
        "name_process": "pangolin",
        "string_process": "\nprocess pangolin {\n\n  tag { run_id }\n\n  input:\n  tuple val(run_id), path(consensus_multi_fasta), path(artic_qc)\n\n  output:\n  tuple val(run_id), path(\"${run_id}_lineage_report_with_genome_completeness.csv\")\n\n  script:\n  \"\"\"\n  pangolin \\\n    --threads ${task.cpus} \\\n    --analysis-mode ${params.analysis_mode} \\\n    ${consensus_multi_fasta}\n\n  awk -F \",\" 'BEGIN { OFS=FS }; /^taxon/ { print \"run_id\", \\$0 }; !/^taxon/ { print \"${run_id}\", \\$0 }' lineage_report.csv | sed 's/taxon/sample_id/' > ${run_id}_lineage_report_no_completeness_info.csv\n\n  add_genome_completeness.py \\\n    --genome-completeness-threshold ${params.genome_completeness_threshold} \\\n    --artic-qc ${artic_qc} \\\n    --pangolin-lineages ${run_id}_lineage_report_no_completeness_info.csv \\\n    > ${run_id}_lineage_report_with_genome_completeness.csv\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  \"\"\"\n  pangolin \\\n    --threads ${task.cpus} \\\n    --analysis-mode ${params.analysis_mode} \\\n    ${consensus_multi_fasta}\n\n  awk -F \",\" 'BEGIN { OFS=FS }; /^taxon/ { print \"run_id\", \\$0 }; !/^taxon/ { print \"${run_id}\", \\$0 }' lineage_report.csv | sed 's/taxon/sample_id/' > ${run_id}_lineage_report_no_completeness_info.csv\n\n  add_genome_completeness.py \\\n    --genome-completeness-threshold ${params.genome_completeness_threshold} \\\n    --artic-qc ${artic_qc} \\\n    --pangolin-lineages ${run_id}_lineage_report_no_completeness_info.csv \\\n    > ${run_id}_lineage_report_with_genome_completeness.csv\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "run_id",
            "consensus_multi_fasta",
            "artic_qc"
        ],
        "nb_inputs": 3,
        "outputs": [
            "run_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "BCCDC-PHL__pangolin-nf",
        "directive": [
            "tag { run_id }"
        ],
        "when": "",
        "stub": ""
    }
}
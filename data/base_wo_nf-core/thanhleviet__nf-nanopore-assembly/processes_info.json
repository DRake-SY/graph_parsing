{
    "remove_host": {
        "name_process": "remove_host",
        "string_process": "process remove_host {\n  publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", pattern: \"*.fastq.gz\",mode: \"copy\"\n  label 'kraken2'\n  \n  tag {sample_id}\n  \n  cpus 8\n\n  input:\n  tuple val(sample_id), path(reads), path(db)\n\n  output:\n  tuple val(sample_id), path(\"*.fq.gz\"), emit: host_fastq\n  tuple val(sample_id), path(\"*.fastq.gz\"), emit: non_host_fastq\n  path \"${sample_id}.kraken2.report\", emit: report\n  script:\n  pe = params.single_end ? \"\" : \"--paired\"\n  classified = params.single_end ? \"${sample_id}.host.fq\" : \"${sample_id}.host#.fq\"\n  unclassified = params.single_end ? \"${sample_id}.fastq\" : \"${sample_id}#.fastq\"\n  \n  \"\"\"\n    hostname > hostname\n    kraken2 \\\\\n        --db $db \\\\\n        --confidence $params.confidence \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${sample_id}.kraken2.report \\\\\n        --report-zero-counts \\\\\n        $pe \\\\\n        --gzip-compressed \\\\\n        $reads > /dev/null\n    pigz -p $task.cpus *.fastq\n    pigz -p $task.cpus *.fq\n  \"\"\"  \n}",
        "nb_lignes_process": 35,
        "string_script": "  pe = params.single_end ? \"\" : \"--paired\"\n  classified = params.single_end ? \"${sample_id}.host.fq\" : \"${sample_id}.host#.fq\"\n  unclassified = params.single_end ? \"${sample_id}.fastq\" : \"${sample_id}#.fastq\"\n  \n  \"\"\"\n    hostname > hostname\n    kraken2 \\\\\n        --db $db \\\\\n        --confidence $params.confidence \\\\\n        --threads $task.cpus \\\\\n        --unclassified-out $unclassified \\\\\n        --classified-out $classified \\\\\n        --report ${sample_id}.kraken2.report \\\\\n        --report-zero-counts \\\\\n        $pe \\\\\n        --gzip-compressed \\\\\n        $reads > /dev/null\n    pigz -p $task.cpus *.fastq\n    pigz -p $task.cpus *.fq\n  \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "PEC",
            "kraken2",
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/PEC",
            "https://bio.tools/kraken2",
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "PEC",
                "uri": "https://bio.tools/PEC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Medicine"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Experimental medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Clinical medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Biomedical research"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A novel approach to the program evaluation committee.\n\nBACKGROUND:The Accreditation Council for Graduate Medical Education requires each residency program to have a Program Evaluation Committee (PEC) but does not specify how the PEC should be designed. We sought to develop a PEC that promotes resident leadership and provides actionable feedback. METHODS:Participants were residents and faculty in the Traditional Internal Medicine residency program at Yale School of Medicine (YSM). One resident and one faculty member facilitated a 1-h structured group discussion to obtain resident feedback on each rotation. PEC co-facilitators summarized the feedback in written form, then met with faculty Firm Chiefs overseeing each rotation and with residency program leadership to discuss feedback and generate action plans. This PEC process was implemented in all inpatient and outpatient rotations over a 4-year period.\n\n||| HOMEPAGE MISSING!",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31842868"
            },
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            },
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", pattern: \"*.fastq.gz\",mode: \"copy\"",
            "label 'kraken2'",
            "tag {sample_id}",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "kraken2": {
        "name_process": "kraken2",
        "string_process": "\nprocess kraken2 {\n    publishDir \"${params.outdir}\", mode: \"copy\",\n     saveAs: {filename -> if ((filename =~ /_[1,2]\\.fastq\\.gz/) || (filename =~ /host.fastq\\.gz/) || filename.endsWith(\".report\") || filename.endsWith(\".output\"))\n                            { if (params.remove_host) {\n                              \"removed_host/${filename}\"\n                              } else {\n                                if (filename.endsWith(\".report\")) {\n                                  \"${task.process.replaceAll(\":\",\"_\")}/${filename}\"\n                                } else if (filename.endsWith(\".kraken2\")) {\n                                  \"${task.process.replaceAll(\":\",\"_\")}/${sample_id}.kraken2\"\n                                } else if (filename.endsWith(\".output\")) {\n                                  \"${task.process.replaceAll(\":\",\"_\")}/${sample_id}.uncut.kraken2\"\n                                } \n                              }\n                            }\n                          else null}\n    \n    errorStrategy 'ignore'\n                 \n\n    label 'kraken2'\n\n    tag {\"${action}-->${sample_id}\"}\n    cpus 8\n    memory '200 GB'\n\n    input:\n    tuple val(sample_id), path(reads), path(db)\n    output:\n    tuple val(sample_id), path(reads), emit: reads\n    tuple val(sample_id), path(\"*.fq.gz\"), emit: host_fastq  optional true\n    tuple val(sample_id), path(\"*.fastq.gz\"), emit: non_host_fastq optional true\n    tuple val(sample_id), path(\"${sample_id}.kraken2.report\"), emit: kraken2_report\n    tuple val(sample_id), path(\"${sample_id}.kraken2\") , emit: kraken2_output optional true\n    tuple val(sample_id), path(\"kraken2.output\"), emit: kraken2_raw_output optional true\n\n    script:\n    action = params.remove_host ? \"removing host\" : \"classifying\"\n    pe = params.single_end ? \"\" : \"--paired\"\n    classified = params.single_end ? \"${sample_id}.host.fq\" : \"${sample_id}.host#.fq\"\n    unclassified = params.single_end ? \"${sample_id}.non_host.fastq\" : \"${sample_id}#.non_host.fastq\"\n    write_fastq = params.remove_host ? \"--unclassified-out $unclassified --classified-out $classified\" : \"\"\n    compress_output = params.remove_host ? \"pigz -p $task.cpus *.fastq; pigz -p $task.cpus *.fq\" : \"\"\n    kraken2_output = (params.remove_host || params.kraken_output) ? \"/dev/null\" : \"kraken2.output\"\n    krona_output = params.remove_host ? \"\" : \"cat kraken2.output | cut -f 2,3 > ${sample_id}.kraken2\"\n    use_name = params.kraken2_use_name ? \"--use-names\" : \"\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --confidence $params.confidence \\\\\n        --threads $task.cpus \\\\\n        --memory-mapping $write_fastq \\\\\n        --report ${sample_id}.kraken2.report \\\\\n        $use_name \\\\\n        $pe \\\\\n        $reads > ${kraken2_output}\n    ${compress_output}\n    ${krona_output}\n    \"\"\"\n}",
        "nb_lignes_process": 59,
        "string_script": "    action = params.remove_host ? \"removing host\" : \"classifying\"\n    pe = params.single_end ? \"\" : \"--paired\"\n    classified = params.single_end ? \"${sample_id}.host.fq\" : \"${sample_id}.host#.fq\"\n    unclassified = params.single_end ? \"${sample_id}.non_host.fastq\" : \"${sample_id}#.non_host.fastq\"\n    write_fastq = params.remove_host ? \"--unclassified-out $unclassified --classified-out $classified\" : \"\"\n    compress_output = params.remove_host ? \"pigz -p $task.cpus *.fastq; pigz -p $task.cpus *.fq\" : \"\"\n    kraken2_output = (params.remove_host || params.kraken_output) ? \"/dev/null\" : \"kraken2.output\"\n    krona_output = params.remove_host ? \"\" : \"cat kraken2.output | cut -f 2,3 > ${sample_id}.kraken2\"\n    use_name = params.kraken2_use_name ? \"--use-names\" : \"\"\n    \"\"\"\n    kraken2 \\\\\n        --db $db \\\\\n        --confidence $params.confidence \\\\\n        --threads $task.cpus \\\\\n        --memory-mapping $write_fastq \\\\\n        --report ${sample_id}.kraken2.report \\\\\n        $use_name \\\\\n        $pe \\\\\n        $reads > ${kraken2_output}\n    ${compress_output}\n    ${krona_output}\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "ACTION",
            "PEC",
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/action",
            "https://bio.tools/PEC",
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "ACTION",
                "uri": "https://bio.tools/action",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1781",
                                    "term": "Gene regulatory network analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3439",
                                    "term": "Pathway or network prediction"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3112",
                                "term": "Gene expression matrix"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2600",
                                "term": "Pathway or network"
                            }
                        ]
                    }
                ],
                "description": "A method for inferring the functional identity of cells from their transcriptional profile, classifying them based on their dominant function, and reconstructing regulatory networks that are responsible for mediating their identity.",
                "homepage": "http://compbio.mit.edu/ACTION/"
            },
            {
                "name": "PEC",
                "uri": "https://bio.tools/PEC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Medicine"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Experimental medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Clinical medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3303",
                            "term": "Biomedical research"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A novel approach to the program evaluation committee.\n\nBACKGROUND:The Accreditation Council for Graduate Medical Education requires each residency program to have a Program Evaluation Committee (PEC) but does not specify how the PEC should be designed. We sought to develop a PEC that promotes resident leadership and provides actionable feedback. METHODS:Participants were residents and faculty in the Traditional Internal Medicine residency program at Yale School of Medicine (YSM). One resident and one faculty member facilitated a 1-h structured group discussion to obtain resident feedback on each rotation. PEC co-facilitators summarized the feedback in written form, then met with faculty Firm Chiefs overseeing each rotation and with residency program leadership to discuss feedback and generate action plans. This PEC process was implemented in all inpatient and outpatient rotations over a 4-year period.\n\n||| HOMEPAGE MISSING!",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31842868"
            },
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}\", mode: \"copy\" , saveAs: {filename -> if ((filename =~ /_[1,2] .fastq .gz/) || (filename =~ /host.fastq .gz/) || filename.endsWith(\".report\") || filename.endsWith(\".output\")) { if (params.remove_host) { \"removed_host/${filename}\" } else { if (filename.endsWith(\".report\")) { \"${task.process.replaceAll(\":\",\"_\")}/${filename}\" } else if (filename.endsWith(\".kraken2\")) { \"${task.process.replaceAll(\":\",\"_\")}/${sample_id}.kraken2\" } else if (filename.endsWith(\".output\")) { \"${task.process.replaceAll(\":\",\"_\")}/${sample_id}.uncut.kraken2\" } } } else null}",
            "errorStrategy 'ignore'",
            "label 'kraken2'",
            "tag {\"${action}-->${sample_id}\"}",
            "cpus 8",
            "memory '200 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "bracken": {
        "name_process": "bracken",
        "string_process": "\nprocess bracken {\n  publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n  \n  tag {sample_id}\n\n                    \n  \n  input:\n  tuple val(sample_id), path(\"${sample_id}_kraken2.report\"), path(bracken_db)\n  \n  output:\n  tuple val(sample_id), path(\"${sample_id}_bracken.tsv\")\n  \n  script:\n  \"\"\"\n  bracken \\\n    -d ${bracken_db} \\\n    -r ${params.bracken_read_length} \\\n    -i ${sample_id}_kraken2.report \\\n    -l ${params.taxlevel} \\\n    -o ${sample_id}_bracken.tsv \\\n    -w ${sample_id}_bracken.kraken2_report\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  \"\"\"\n  bracken \\\n    -d ${bracken_db} \\\n    -r ${params.bracken_read_length} \\\n    -i ${sample_id}_kraken2.report \\\n    -l ${params.taxlevel} \\\n    -o ${sample_id}_bracken.tsv \\\n    -w ${sample_id}_bracken.kraken2_report\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Bracken"
        ],
        "tools_url": [
            "https://bio.tools/bracken"
        ],
        "tools_dico": [
            {
                "name": "Bracken",
                "uri": "https://bio.tools/bracken",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
                "homepage": "https://ccb.jhu.edu/software/bracken/"
            }
        ],
        "inputs": [
            "sample_id",
            "bracken_db"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}"
        ],
        "when": "",
        "stub": ""
    },
    "bracken_sort": {
        "name_process": "bracken_sort",
        "string_process": "\nprocess bracken_sort {\n                  \n    \n    tag {sample_id}\n    \n    cpus 1\n\n    input:\n    tuple val(sample_id), path(\"${sample_id}_bracken.tsv\")\n    output:\n    path(\"${sample_id}_bracken_sorted.tsv\")\n\n    script:\n    \"\"\"\n    csvtk -t mutate2 -T -n sample -e \"'${sample_id}'\" \"${sample_id}_bracken.tsv\" \\\n    | csvtk -t sort -k fraction_total_reads:r \\\n    | csvtk head -n 3 > ${sample_id}_bracken_sorted.tsv\n\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    csvtk -t mutate2 -T -n sample -e \"'${sample_id}'\" \"${sample_id}_bracken.tsv\" \\\n    | csvtk -t sort -k fraction_total_reads:r \\\n    | csvtk head -n 3 > ${sample_id}_bracken_sorted.tsv\n\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "tag {sample_id}",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "bracken_collect": {
        "name_process": "bracken_collect",
        "string_process": "\nprocess bracken_collect {\n    publishDir \"${params.outdir}\", mode: \"copy\" \n    \n    tag {\"running\"}\n    \n    cpus 1\n\n    input:\n    path bracken\n\n    output:\n    path(\"bracken_all_samples.tsv\")\n\n    script:\n    \"\"\"\n    csvtk concat -t ${bracken} > bracken_all_samples.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    csvtk concat -t ${bracken} > bracken_all_samples.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bracken"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}\", mode: \"copy\"",
            "tag {\"running\"}",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "krona": {
        "name_process": "krona",
        "string_process": "\nprocess krona {\n  publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n  tag {\"running\"}\n  \n  memory {params.krona_all ? '164 GB' : ' 128 GB'}\n  \n  input:\n  path(kraken2)\n  output:\n  path(\"*.html\")\n  \n  script:\n  if (params.krona_all) {\n\n      \"\"\"\n      ktImportTaxonomy -tax $params.krona_taxonomy ${kraken2}\n      \"\"\"\n  } else {\n      \"\"\"\n      ktImportTaxonomy -tax $params.krona_taxonomy -o ${kraken2.baseName}.krona.html ${kraken2}\n      \"\"\"\n  }\n  \n}",
        "nb_lignes_process": 23,
        "string_script": "  if (params.krona_all) {\n\n      \"\"\"\n      ktImportTaxonomy -tax $params.krona_taxonomy ${kraken2}\n      \"\"\"\n  } else {\n      \"\"\"\n      ktImportTaxonomy -tax $params.krona_taxonomy -o ${kraken2.baseName}.krona.html ${kraken2}\n      \"\"\"\n  }",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kraken2"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {\"running\"}",
            "memory {params.krona_all ? '164 GB' : ' 128 GB'}"
        ],
        "when": "",
        "stub": ""
    },
    "fastp": {
        "name_process": "fastp",
        "string_process": "process fastp {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", pattern: \"*.{gz,json}\",mode: \"copy\" \n    \n    label 'high'\n    \n    container 'quay.io/biocontainers/nanoq:0.2.1--h7d875b9_0'\n\n    tag {sample_id}\n    \n    cpus 16\n    memory '64.GB'\n\n    input:\n    tuple val(sample_id), path(reads)\n    output:\n    tuple val(sample_id), path(\"${sample_id}_R1.fastq.gz\"), path(\"${sample_id}_R2.fastq.gz\"), emit: reads\n    path \"${sample_id}.fastp.json\", emit: json\n    \n    script:\n    \"\"\"\n    hostname > hostname\n    fastp -w ${task.cpus} -z 6 \\\n    -i ${reads[0]} -I ${reads[1]} \\\n    -o ${sample_id}_R1.fastq.gz -O ${sample_id}_R2.fastq.gz \\\n    -j ${sample_id}.fastp.json\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    hostname > hostname\n    fastp -w ${task.cpus} -z 6 \\\n    -i ${reads[0]} -I ${reads[1]} \\\n    -o ${sample_id}_R1.fastq.gz -O ${sample_id}_R2.fastq.gz \\\n    -j ${sample_id}.fastp.json\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", pattern: \"*.{gz,json}\",mode: \"copy\"",
            "label 'high'",
            "container 'quay.io/biocontainers/nanoq:0.2.1--h7d875b9_0'",
            "tag {sample_id}",
            "cpus 16",
            "memory '64.GB'"
        ],
        "when": "",
        "stub": ""
    },
    "filtlong": {
        "name_process": "filtlong",
        "string_process": "\nprocess filtlong {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", pattern: \"*.gz\",mode: \"copy\"\n    \n    tag {sample_id}\n    \n    input:\n    tuple val(sample_id), path(reads)\n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}_filtlong.fastq.gz\")\n    \n    script:\n    \"\"\"\n    filtlong --min_length $params.min_length --keep_percent 95 ${reads} | gzip > ${sample_id}_filtlong.fastq.gz \n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    filtlong --min_length $params.min_length --keep_percent 95 ${reads} | gzip > ${sample_id}_filtlong.fastq.gz \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Filtlong"
        ],
        "tools_url": [
            "https://bio.tools/Filtlong"
        ],
        "tools_dico": [
            {
                "name": "Filtlong",
                "uri": "https://bio.tools/Filtlong",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0798",
                            "term": "Mobile genetic elements"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Complete hybrid genome assembly of clinical multidrug-resistant Bacteroides fragilis isolates enables comprehensive identification of antimicrobial-resistance genes and plasmids.\n\nquality filtering tool for long reads.\n\nFiltlong is a tool for filtering long reads by quality. It can take a set of long reads and produce a smaller, better subset. It uses both read length (longer is better) and read identity (higher is better) when choosing which reads pass the filter.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Unicycler' (bio.tools/unicycler), 'Canu-corrected ONT', 'AMR', 'fragilis'",
                "homepage": "https://github.com/rrwick/Filtlong"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", pattern: \"*.gz\",mode: \"copy\"",
            "tag {sample_id}"
        ],
        "when": "",
        "stub": ""
    },
    "nanoq": {
        "name_process": "nanoq",
        "string_process": "\nprocess nanoq {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", pattern: \"*.gz\",mode: \"copy\"\n    \n    container 'quay.io/biocontainers/nanoq:0.2.1--h7d875b9_0'\n\n    tag {sample_id}\n    \n    input:\n    tuple val(sample_id), path(reads)\n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}_fil.fastq.gz\")\n    \n    script:\n                            \n    \"\"\"\n    zcat ${reads} | nanoq -l ${params.min_length} -q ${params.min_qscore} | gzip - > ${sample_id}_fil.fastq.gz\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    zcat ${reads} | nanoq -l ${params.min_length} -q ${params.min_qscore} | gzip - > ${sample_id}_fil.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", pattern: \"*.gz\",mode: \"copy\"",
            "container 'quay.io/biocontainers/nanoq:0.2.1--h7d875b9_0'",
            "tag {sample_id}"
        ],
        "when": "",
        "stub": ""
    },
    "porechop": {
        "name_process": "porechop",
        "string_process": "\nprocess porechop {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", pattern: \"*.gz\",mode: \"copy\"\n    \n    tag {sample_id}\n    \n    cpus 16\n\n    input:\n    tuple val(sample_id), path(reads)\n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}_porechop.fastq.gz\")\n    \n    script:\n    \"\"\"\n    porechop -t ${task.cpus} --discard_middle -i ${reads} -o ${sample_id}_porechop.fastq.gz\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    porechop -t ${task.cpus} --discard_middle -i ${reads} -o ${sample_id}_porechop.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", pattern: \"*.gz\",mode: \"copy\"",
            "tag {sample_id}",
            "cpus 16"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", pattern: \"*.html\",mode: \"copy\"\n    \n    tag \"Multiqc\"\n    \n    errorStrategy 'ignore'\n\n    input:\n    path(input)\n  \n    output:\n    path \"multiqc_report.html\" optional true\n  \n    script:\n    \"\"\"\n    multiqc --interactive .  \n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    multiqc --interactive .  \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "input"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", pattern: \"*.html\",mode: \"copy\"",
            "tag \"Multiqc\"",
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "checkm": {
        "name_process": "checkm",
        "string_process": "\nprocess checkm {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n    \n    tag {sample_id}\n    \n    cpus 16\n    memory '480 GB'\n    input:\n    path(bins)\n    \n    output:\n    path \"checkm_output\", emit: checkm\n    path \"*.tsv\"\n\n    script:\n    \"\"\"\n    checkm lineage_wf -t ${task.cpus} -x fasta --tab_table . checkm_output > checkm_output.tsv\n    grep -v -e \"\\\\[\" checkm_output.tsv | csvtk -t cut -f 1,2,3,12-14 > checkm_output_mqc.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    checkm lineage_wf -t ${task.cpus} -x fasta --tab_table . checkm_output > checkm_output.tsv\n    grep -v -e \"\\\\[\" checkm_output.tsv | csvtk -t cut -f 1,2,3,12-14 > checkm_output_mqc.tsv\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bins"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "cpus 16",
            "memory '480 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "busco": {
        "name_process": "busco",
        "string_process": "\nprocess busco {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\",\n    saveAs: {filename -> if (filename.endsWith(\".tsv\")) { \n        \"./reports/${filename}\"\n    } else { \n        \"./${filename}\"\n        }\n    }\n    \n    container 'quay.io/biocontainers/busco:5.2.2--pyhdfd78af_0'\n\n    errorStrategy 'ignore'\n\n    tag {sample_id}\n    \n    cpus 8\n    \n    memory '16.GB'\n    \n    input:\n    tuple val(sample_id), path(contigs)\n    \n    output:\n    path(\"${sample_id}\")\n    path(\"${sample_id}_busco.tsv\"), emit: report\n    script:\n    db = params.busco_db_location ? \"--download_path ${params.busco_db_location}\" : \"\"\n    \"\"\"\n    export TMPDIR=.;\n    busco \\\n    -i ${contigs} \\\n    -o ${sample_id} \\\n    --auto-lineage-prok \\\n    -m geno \\\n    -c ${task.cpus} \\\n    $db \\\n    grep -e \"C:\" ${sample_id}/short_summary.specific* > ${sample_id}_busco\n    awk '{print \\$0=\"${sample_id}\"\\$0}' ${sample_id}_busco > ${sample_id}_busco.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    db = params.busco_db_location ? \"--download_path ${params.busco_db_location}\" : \"\"\n    \"\"\"\n    export TMPDIR=.;\n    busco \\\n    -i ${contigs} \\\n    -o ${sample_id} \\\n    --auto-lineage-prok \\\n    -m geno \\\n    -c ${task.cpus} \\\n    $db \\\n    grep -e \"C:\" ${sample_id}/short_summary.specific* > ${sample_id}_busco\n    awk '{print \\$0=\"${sample_id}\"\\$0}' ${sample_id}_busco > ${sample_id}_busco.tsv\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "ODB",
            "BUSCO"
        ],
        "tools_url": [
            "https://bio.tools/odb",
            "https://bio.tools/busco"
        ],
        "tools_dico": [
            {
                "name": "ODB",
                "uri": "https://bio.tools/odb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0435",
                                    "term": "Operon prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3432",
                                    "term": "Clustering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0579",
                                    "term": "Operon drawing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer design"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0579",
                                    "term": "Operon rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "Primer design"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Contains all known and conserved operons in completely sequenced genomes.",
                "homepage": "http://operondb.jp/"
            },
            {
                "name": "BUSCO",
                "uri": "https://bio.tools/busco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Provides measures for quantitative assessment of genome assembly, gene set, and transcriptome completeness based on evolutionarily informed expectations of gene content from near-universal single-copy orthologs.",
                "homepage": "http://busco.ezlab.org/"
            }
        ],
        "inputs": [
            "sample_id",
            "contigs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\" , saveAs: {filename -> if (filename.endsWith(\".tsv\")) { \"./reports/${filename}\" } else { \"./${filename}\" } }",
            "container 'quay.io/biocontainers/busco:5.2.2--pyhdfd78af_0'",
            "errorStrategy 'ignore'",
            "tag {sample_id}",
            "cpus 8",
            "memory '16.GB'"
        ],
        "when": "",
        "stub": ""
    },
    "quast": {
        "name_process": "quast",
        "string_process": "\nprocess quast {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n    \n    tag {\"running\"}\n    \n    container 'quay.io/biocontainers/quast:5.0.2--py36pl5262h30a8e3e_4'\n    \n    cpus 8\n\n    input:\n    path(contigs)\n    output:\n    path(\"quast_output\")\n    \n    script:\n    \"\"\"\n    quast.py --min-contig 100 -t ${task.cpus} -o quast_output ${contigs}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    quast.py --min-contig 100 -t ${task.cpus} -o quast_output ${contigs}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {\"running\"}",
            "container 'quay.io/biocontainers/quast:5.0.2--py36pl5262h30a8e3e_4'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "sendsketch": {
        "name_process": "sendsketch",
        "string_process": "\nprocess sendsketch {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n    \n    tag {sample_id}\n    \n    errorStrategy 'ignore'\n    \n    cpus 8\n\n    input:\n    tuple val(sample_id), path(contigs)\n    output:\n    path(\"${sample_id}.sketch\")\n\n    script:\n    \"\"\"\n    sendsketch.sh in=${contigs} out=${sample_id}.sketch printrfname=t\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    sendsketch.sh in=${contigs} out=${sample_id}.sketch printrfname=t\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "contigs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "errorStrategy 'ignore'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "gunc": {
        "name_process": "gunc",
        "string_process": "\nprocess gunc {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n    \n    tag {sample_id}\n    \n    cpus 12\n    memory '200.GB'\n\n    input:\n    tuple val(sample_id), path(\"contigs.fa\")\n    \n    output:\n    path(\"${sample_id}\")\n    script:\n    \"\"\"\n    mkdir ${sample_id}\n    ln -sf contigs.fa ${sample_id}.fa\n    gunc run --threads ${task.cpus} \\\n    -i ${sample_id}.fa \\\n    --use_species_level \\\n    --out_dir ${sample_id} \\\n    --detailed_output \\\n    --sensitive \\\n    -r ${params.gunc_db}\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    mkdir ${sample_id}\n    ln -sf contigs.fa ${sample_id}.fa\n    gunc run --threads ${task.cpus} \\\n    -i ${sample_id}.fa \\\n    --use_species_level \\\n    --out_dir ${sample_id} \\\n    --detailed_output \\\n    --sensitive \\\n    -r ${params.gunc_db}\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "cpus 12",
            "memory '200.GB'"
        ],
        "when": "",
        "stub": ""
    },
    "metabat": {
        "name_process": "metabat",
        "string_process": "process metabat {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\",\n    saveAs: {filename -> \"${sample_id}/${filename}\"}\n    \n    label 'high'\n\n    errorStrategy 'ignore'\n    \n    tag {sample_id}\n    \n    cpus 8\n\n    input:\n    tuple val(sample_id), path(reads), path(contigs), path(bam)\n\n    output:\n    path \"${sample_id}.*.fa\" , emit: bin\n    \n    script:\n    \"\"\"\n    OMP_NUM_THREADS=${task.cpus} jgi_summarize_bam_contig_depths --outputDepth depth.txt ${bam}\n    metabat2 -t \"${task.cpus}\" -i \"${contigs}\" -a depth.txt -o \"${sample_id}\" -m ${params.metabat_min_size} --unbinned --seed ${params.metabat_rng_seed}\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    OMP_NUM_THREADS=${task.cpus} jgi_summarize_bam_contig_depths --outputDepth depth.txt ${bam}\n    metabat2 -t \"${task.cpus}\" -i \"${contigs}\" -a depth.txt -o \"${sample_id}\" -m ${params.metabat_min_size} --unbinned --seed ${params.metabat_rng_seed}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads",
            "contigs",
            "bam"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\" , saveAs: {filename -> \"${sample_id}/${filename}\"}",
            "label 'high'",
            "errorStrategy 'ignore'",
            "tag {sample_id}",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "maxbin": {
        "name_process": "maxbin",
        "string_process": "\nprocess maxbin {\n    publishDir \n    \n    tag {}\n    \n    cpus \n\n    input:\n\n    output:\n\n    script:\n    \"\"\"\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    \"\"\"",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir",
            "tag {} cpus"
        ],
        "when": "",
        "stub": ""
    },
    "conccoct": {
        "name_process": "conccoct",
        "string_process": "\nprocess conccoct {\n    publishDir \n    \n    tag {}\n    \n    cpus \n\n    input:\n\n    output:\n\n    script:\n    \"\"\"\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    \"\"\"",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir",
            "tag {} cpus"
        ],
        "when": "",
        "stub": ""
    },
    "dastool": {
        "name_process": "dastool",
        "string_process": "\nprocess dastool {\n    publishDir \n    \n    tag {}\n    \n    cpus \n\n    input:\n\n    output:\n\n    script:\n    \"\"\"\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    \"\"\"",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir",
            "tag {} cpus"
        ],
        "when": "",
        "stub": ""
    },
    "filter_campy": {
        "name_process": "filter_campy",
        "string_process": "\nprocess filter_campy {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n    \n    tag {sample_id}\n    \n    cpus 8\n\n    input:\n    tuple val(sample_id), path(reads), path(kraken2_output)\n   \n    output:\n    tuple path(\"${sample_id}_campy.tsv\"), path(\"*.{fq.gz,fastq.gz,fasta}\") optional true\n\n    shell:\n    if (params.filter_reads) {\n        '''\n        cat !{kraken2_output} | grep -i \"campy\" | cut -f 1 > campy\n        if [[ -s campy ]]; then \n            filterbyname.sh in=!{reads[0]} in2=!{reads[1]} names=campy out=\"!{sample_id}_campy_1.fq.gz\" out2=\"!{sample_id}_campy_2.fq.gz\" include=t qin=33\n            mv campy !{sample_id}_campy.tsv\n        fi\n        '''\n    } else {\n        '''\n        cat !{kraken2_output} | grep -i \"campy\" | cut -f 2 > campy\n        if [[ -s campy ]]; then \n            filterbyname.sh in=!{reads} names=campy out=\"!{sample_id}_campy.fastq.gz\" include=t qin=33\n            mv campy !{sample_id}_campy.tsv\n        fi\n        '''\n    }\n    \n}",
        "nb_lignes_process": 32,
        "string_script": "    if (params.filter_reads) {\n        '''\n        cat !{kraken2_output} | grep -i \"campy\" | cut -f 1 > campy\n        if [[ -s campy ]]; then \n            filterbyname.sh in=!{reads[0]} in2=!{reads[1]} names=campy out=\"!{sample_id}_campy_1.fq.gz\" out2=\"!{sample_id}_campy_2.fq.gz\" include=t qin=33\n            mv campy !{sample_id}_campy.tsv\n        fi\n        '''\n    } else {\n        '''\n        cat !{kraken2_output} | grep -i \"campy\" | cut -f 2 > campy\n        if [[ -s campy ]]; then \n            filterbyname.sh in=!{reads} names=campy out=\"!{sample_id}_campy.fastq.gz\" include=t qin=33\n            mv campy !{sample_id}_campy.tsv\n        fi\n        '''\n    }",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads",
            "kraken2_output"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "megahit": {
        "name_process": "megahit",
        "string_process": "\nprocess megahit {\n  publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\",\n   saveAs: {filename -> if (filename.endsWith(\".contigs.fa.gz\") || filename.endsWith(\".log\")) \"$filename\"\n                          else null}\n\n  label 'high'\n  \n  errorStrategy 'retry'\n  \n  maxRetries params.maxRetries\n  \n  tag {sample_id}\n  \n  cpus 8\n  \n  input:\n  tuple val(sample_id), path(reads)\n  output:\n  path \"${sample_id}.log\"\n  tuple val(sample_id), path(\"${sample_id}.contigs.fa.gz\"), emit: contigs\n  tuple val(sample_id), path(reads), emit: reads\n \n  script:\n\n  \"\"\"\n  megahit -t $task.cpus -o megahit --out-prefix ${sample_id} -1 ${reads[0]} -2 ${reads[1]}\n  gzip -c \"megahit/${sample_id}.contigs.fa\" > \"${sample_id}.contigs.fa.gz\"\n  mv megahit/${sample_id}.log ${sample_id}.log \n  \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "  \"\"\"\n  megahit -t $task.cpus -o megahit --out-prefix ${sample_id} -1 ${reads[0]} -2 ${reads[1]}\n  gzip -c \"megahit/${sample_id}.contigs.fa\" > \"${sample_id}.contigs.fa.gz\"\n  mv megahit/${sample_id}.log ${sample_id}.log \n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MEGAHIT"
        ],
        "tools_url": [
            "https://bio.tools/megahit"
        ],
        "tools_dico": [
            {
                "name": "MEGAHIT",
                "uri": "https://bio.tools/megahit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0610",
                            "term": "Ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Single node assembler for large and complex metagenomics NGS reads, such as soil. It makes use of succinct de Bruijn graph to achieve low memory usage, whereas its goal is not to make memory usage as low as possible.",
                "homepage": "https://github.com/voutcn/megahit"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\" , saveAs: {filename -> if (filename.endsWith(\".contigs.fa.gz\") || filename.endsWith(\".log\")) \"$filename\" else null}",
            "label 'high'",
            "errorStrategy 'retry'",
            "maxRetries params.maxRetries",
            "tag {sample_id}",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "flye": {
        "name_process": "flye",
        "string_process": "\nprocess flye {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n    \n    errorStrategy 'ignore'\n    \n    container 'quay.io/biocontainers/flye:2.9--py27h6a42192_0'\n\n    tag {sample_id}\n    \n    cpus 12\n\n    input:\n    tuple val(sample_id), path(reads), val(genome_size)\n\n    output:\n    tuple val(sample_id), path(\"${sample_id}_assembly.fasta\"), emit: contigs\n    tuple path(\"${sample_id}_assembly_graph.gfa\"), path(\"${sample_id}_assembly_info.txt\"), path(\"${sample_id}_flye.log\"), path(\"${sample_id}_assembly_stats.txt\")\n    \n    script:\n    genome_size = params.genome_size ? \"--genome-size ${params.genome_size}\" : \"\"\n    \"\"\"\n    flye -t ${task.cpus} -o flye_output ${params.flye_input} ${reads} --plasmids ${genome_size} ${params.flye_options}\n    mv flye_output/assembly.fasta ${sample_id}_assembly.fasta\n    mv flye_output/assembly_graph.gfa ${sample_id}_assembly_graph.gfa\n    mv flye_output/assembly_info.txt ${sample_id}_assembly_info.txt\n    mv flye_output/flye.log ${sample_id}_flye.log\n    tail -n 9 ${sample_id}_flye.log | head -n 8 >  ${sample_id}_assembly_stats.txt\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    genome_size = params.genome_size ? \"--genome-size ${params.genome_size}\" : \"\"\n    \"\"\"\n    flye -t ${task.cpus} -o flye_output ${params.flye_input} ${reads} --plasmids ${genome_size} ${params.flye_options}\n    mv flye_output/assembly.fasta ${sample_id}_assembly.fasta\n    mv flye_output/assembly_graph.gfa ${sample_id}_assembly_graph.gfa\n    mv flye_output/assembly_info.txt ${sample_id}_assembly_info.txt\n    mv flye_output/flye.log ${sample_id}_flye.log\n    tail -n 9 ${sample_id}_flye.log | head -n 8 >  ${sample_id}_assembly_stats.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "sample_id",
            "genome_size",
            "reads"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "errorStrategy 'ignore'",
            "container 'quay.io/biocontainers/flye:2.9--py27h6a42192_0'",
            "tag {sample_id}",
            "cpus 12"
        ],
        "when": "",
        "stub": ""
    },
    "canu": {
        "name_process": "canu",
        "string_process": "\nprocess canu {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\" \n    \n    tag {sample_id}\n    \n    errorStrategy 'ignore'\n\n    cpus 12\n\n    input:\n    tuple val(sample_id), path(reads), val(genome_size)\n    output:\n    tuple val(sample_id), path(\"${sample_id}\"), emit: canu_outdir\n    tuple val(sample_id), path(\"${sample_id}/${sample_id}.contigs.fasta\"), emit: contigs\n    \n    script:\n    \"\"\"\n    hostname > hostname\n    canu -p ${sample_id} -d ${sample_id} genomeSize=$genome_size maxThreads=${task.cpus} ${params.canu_options} -nanopore ${reads}\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    hostname > hostname\n    canu -p ${sample_id} -d ${sample_id} genomeSize=$genome_size maxThreads=${task.cpus} ${params.canu_options} -nanopore ${reads}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "CANU"
        ],
        "tools_url": [
            "https://bio.tools/canu"
        ],
        "tools_dico": [
            {
                "name": "CANU",
                "uri": "https://bio.tools/canu",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De-novo assembly tool for long read chemistry like Nanopore data and PacBio data.",
                "homepage": "https://github.com/marbl/canu"
            }
        ],
        "inputs": [
            "sample_id",
            "genome_size",
            "reads"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "errorStrategy 'ignore'",
            "cpus 12"
        ],
        "when": "",
        "stub": ""
    },
    "raven": {
        "name_process": "raven",
        "string_process": "\nprocess raven {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\" \n    \n    tag {sample_id}\n    \n    errorStrategy 'ignore'\n\n    cpus 8\n\n    input:\n    tuple val(sample_id), path(reads)\n    output:\n    tuple val(sample_id), path(\"${sample_id}_raven_contigs.fasta\")\n    \n    script:\n    \"\"\"\n    hostname > hostname\n    raven -t ${task.cpus} ${reads} > ${sample_id}_raven_contigs.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    hostname > hostname\n    raven -t ${task.cpus} ${reads} > ${sample_id}_raven_contigs.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "errorStrategy 'ignore'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "miniasm": {
        "name_process": "miniasm",
        "string_process": "\nprocess miniasm {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\" \n    \n    tag{ sample_id }\n    \n    cpus 8\n\n    input:\n    tuple val(sample_id), path(reads)\n\n    output:\n    tuple val(sample_id), path(\"${sample_id}_assembly_miniasm.fasta\"), emit: contigs\n    path(\"${sample_id}_graph_miniasm.gfa\")\n    \n    script:\n    \"\"\"\n    minimap2 -x ava-ont -t ${task.cpus} ${reads} ${reads} > ovlp.paf\n    miniasm -f ${reads} ovlp.paf > ${sample_id}_graph_miniasm.gfa\n    awk '/^S/{print \">\"\\$2\"\\\\n\"\\$3}' ${sample_id}_graph_miniasm.gfa | fold > ${sample_id}_assembly_miniasm.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    minimap2 -x ava-ont -t ${task.cpus} ${reads} ${reads} > ovlp.paf\n    miniasm -f ${reads} ovlp.paf > ${sample_id}_graph_miniasm.gfa\n    awk '/^S/{print \">\"\\$2\"\\\\n\"\\$3}' ${sample_id}_graph_miniasm.gfa | fold > ${sample_id}_assembly_miniasm.fasta\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "TFold"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/tfold"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "TFold",
                "uri": "https://bio.tools/tfold",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0082",
                            "term": "Structure prediction"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0278",
                                    "term": "RNA secondary structure prediction"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An algorithm for predicting non-coding RNA secondary structures.",
                "homepage": "https://evryrna.ibisc.univ-evry.fr/evryrna/tfold"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag{ sample_id }",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "trycycler_cluster": {
        "name_process": "trycycler_cluster",
        "string_process": "\nprocess trycycler_cluster {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\" \n    \n    tag {sample_id}\n    \n    errorStrategy 'ignore'\n\n    cpus 8\n\n    input:\n    tuple val(sample_id), path(reads), path(contigs)\n    output:\n    tuple val(sample_id), path(\"${sample_id}\")\n    \n    script:\n    \"\"\"\n    trycycler cluster --assemblies *.fasta --reads ${reads} --out_dir ${sample_id}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    trycycler cluster --assemblies *.fasta --reads ${reads} --out_dir ${sample_id}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads",
            "contigs"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "errorStrategy 'ignore'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "unicycler": {
        "name_process": "unicycler",
        "string_process": "\nprocess unicycler {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"  \n    \n    tag {sample_id}\n    \n    errorStrategy 'ignore'\n\n    cpus 12\n\n    input:\n    tuple val(sample_id), path(short_reads), path(long_reads)\n    \n    output:\n    tuple path(\"${sample_id}_unicycler.gfa\"), path(\"${sample_id}_unicycler.log\")\n    tuple val(sample_id), path(\"${sample_id}_unicycler.fasta\"), emit: contigs\n\n    script:\n    \"\"\"\n    unicycler -l ${long_reads} -1 ${short_reads[0]} -2 ${short_reads[1]} -o output -t ${task.cpus} --mode ${params.unicycler_mode}\n    mv output/assembly.fasta \"${sample_id}_unicycler.fasta\"\n    mv output/assembly.gfa \"${sample_id}_unicycler.gfa\"\n    mv output/unicycler.log \"${sample_id}_unicycler.log\"\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    unicycler -l ${long_reads} -1 ${short_reads[0]} -2 ${short_reads[1]} -o output -t ${task.cpus} --mode ${params.unicycler_mode}\n    mv output/assembly.fasta \"${sample_id}_unicycler.fasta\"\n    mv output/assembly.gfa \"${sample_id}_unicycler.gfa\"\n    mv output/unicycler.log \"${sample_id}_unicycler.log\"\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "sample_id",
            "short_reads",
            "long_reads"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "errorStrategy 'ignore'",
            "cpus 12"
        ],
        "when": "",
        "stub": ""
    },
    "shovill": {
        "name_process": "shovill",
        "string_process": "\nprocess shovill {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\",\n    saveAs: {filename -> if (filename.endsWith(\".fa\")){ \n                 null\n            }\n            else {\"${filename}\"}\n            }\n\n    tag {sample_id}\n    \n    errorStrategy 'retry'\n    \n    maxRetries 3\n\n    cpus 12\n\n    memory {64.GB + task.attempt * 8.GB}\n\n    input:\n    tuple val(sample_id), path(fastq), val(genome_size)\n    \n    output:\n    path(\"${sample_id}\")\n    tuple val(sample_id), path(\"${sample_id}/contigs.fa\"), emit: contigs\n\n    script:\n    ram = task.memory.toString().replaceAll(/ GB|G/,'')\n    \"\"\"\n    shovill --outdir ${sample_id} \\\n    --R1 ${fastq[0]} --R2 ${fastq[1]} \\\n    --cpus $task.cpus \\\n    --assembler $params.assembler \\\n    --gsize $genome_size \\\n    --tmpdir ./tmpdir \\\n    --minlen 300 \n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    ram = task.memory.toString().replaceAll(/ GB|G/,'')\n    \"\"\"\n    shovill --outdir ${sample_id} \\\n    --R1 ${fastq[0]} --R2 ${fastq[1]} \\\n    --cpus $task.cpus \\\n    --assembler $params.assembler \\\n    --gsize $genome_size \\\n    --tmpdir ./tmpdir \\\n    --minlen 300 \n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "GRAM",
            "shovill"
        ],
        "tools_url": [
            "https://bio.tools/GRAM",
            "https://bio.tools/shovill"
        ],
        "tools_dico": [
            {
                "name": "GRAM",
                "uri": "https://bio.tools/GRAM",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip sequencing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0441",
                                    "term": "cis-regulatory element prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression QTL analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0331",
                                    "term": "Variant effect prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression QTL profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "eQTL profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression quantitative trait loci profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0331",
                                    "term": "Variant functional prediction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A GeneRAlized Model to predict the molecular effect of a non-coding variant in a cell-type specific manner | GRAM: A GeneRAlized Model to predict the molecular effect of a non-coding variant in a cell type-specific manner",
                "homepage": "https://github.com/gersteinlab/GRAM"
            },
            {
                "name": "shovill",
                "uri": "https://bio.tools/shovill",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Shovill is a pipeline for assembly of bacterial isolate genomes from Illumina paired-end reads.  Shovill uses SPAdes at its core, but alters the steps before and after the primary assembly step to get similar results in less time. Shovill also supports other assemblers like SKESA, Velvet and Megahit, so you can take advantage of the pre- and post-processing the Shovill provides with those too.",
                "homepage": "https://github.com/tseemann/shovill"
            }
        ],
        "inputs": [
            "sample_id",
            "genome_size",
            "fastq"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\" , saveAs: {filename -> if (filename.endsWith(\".fa\")){ null } else {\"${filename}\"} }",
            "tag {sample_id}",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "cpus 12",
            "memory {64.GB + task.attempt * 8.GB}"
        ],
        "when": "",
        "stub": ""
    },
    "skesa": {
        "name_process": "skesa",
        "string_process": "\nprocess skesa {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"  \n    \n    tag {sample_id}\n    \n    errorStrategy 'ignore'\n\n    cpus 8\n\n    input:\n    tuple val(sample_id), path(short_reads)\n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}_skesa.fasta\"), emit: contigs\n\n    script:\n    \"\"\"\n    skesa --cores $task.cpus --use_paired_ends --contigs_out ${sample_id}_skesa.fasta --fastq ${short_reads[0]} ${short_reads[1]}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    skesa --cores $task.cpus --use_paired_ends --contigs_out ${sample_id}_skesa.fasta --fastq ${short_reads[0]} ${short_reads[1]}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "short_reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "errorStrategy 'ignore'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "bwa": {
        "name_process": "bwa",
        "string_process": "process bwa {\n    if (params.bwa_output) {\n        publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode:\"copy\"\n    }\n    \n    \n    errorStrategy 'ignore'\n\n    tag {sample_id}\n    \n    cpus 16\n\n    input:\n    tuple val(sample_id), path(reads), path(ref)\n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}.sorted.bam\"), emit: bam\n    tuple val(sample_id), path(\"${ref}\") , emit: ref\n    tuple val(sample_id), path(reads), emit: reads\n\n    script:\n    \"\"\"\n    bwa index ${ref}\n    bwa mem -t ${task.cpus} ${ref} $reads | samtools view -Sb - | samtools sort -@ ${task.cpus} -o ${sample_id}.sorted.bam - \n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    bwa index ${ref}\n    bwa mem -t ${task.cpus} ${ref} $reads | samtools view -Sb - | samtools sort -@ ${task.cpus} -o ${sample_id}.sorted.bam - \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "ref"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "errorStrategy 'ignore'",
            "tag {sample_id}",
            "cpus 16"
        ],
        "when": "",
        "stub": ""
    },
    "snippy": {
        "name_process": "snippy",
        "string_process": "\nprocess snippy {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode:\"copy\"\n    \n    errorStrategy 'ignore'\n\n    tag {sample_id}\n    \n    cpus 8\n\n    input:\n    \n    tuple val(sample_id), path(reads), path(ref)\n    \n    output:\n    path \"${sample_id}\"\n\n    script:\n    \"\"\"\n    hostname > hostname\n    snippy --R1 ${reads[0]} --R2 ${reads[1]} --outdir ${sample_id} --cpus $task.cpus --ref ${ref}\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    hostname > hostname\n    snippy --R1 ${reads[0]} --R2 ${reads[1]} --outdir ${sample_id} --cpus $task.cpus --ref ${ref}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "snippy"
        ],
        "tools_url": [
            "https://bio.tools/snippy"
        ],
        "tools_dico": [
            {
                "name": "snippy",
                "uri": "https://bio.tools/snippy",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Rapid haploid variant calling and core SNP phylogeny generation.",
                "homepage": "https://github.com/tseemann/snippy"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "ref"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode:\"copy\"",
            "errorStrategy 'ignore'",
            "tag {sample_id}",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "snippy_core": {
        "name_process": "snippy_core",
        "string_process": "\nprocess snippy_core {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode:\"copy\"\n    \n    errorStrategy 'ignore'\n    \n    cpus 16\n\n    input:\n    path(ref)\n    path(snp)\n    \n    output:\n    path \"core*\"\n\n    script:\n    \"\"\"\n    snippy-core --ref ${ref} --prefix core ${snp}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    snippy-core --ref ${ref} --prefix core ${snp}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref",
            "snp"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode:\"copy\"",
            "errorStrategy 'ignore'",
            "cpus 16"
        ],
        "when": "",
        "stub": ""
    },
    "prokka": {
        "name_process": "prokka",
        "string_process": "\nprocess prokka {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n                                                               \n                                 \n                    \n                         \n                 \n    \n    tag {sample_id}\n    \n    errorStrategy 'ignore'\n    \n    cpus 8\n\n    input:\n    tuple val(sample_id), path(contigs)\n    output:\n    path(\"${sample_id}\")\n    path \"${sample_id}/${sample_id}.gff\" , emit: roary\n    \n    script:\n    \"\"\"\n    prokka --kingdom Bacteria ${params.prokka_options} --outdir ${sample_id} --prefix ${sample_id} ${contigs}\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    prokka --kingdom Bacteria ${params.prokka_options} --outdir ${sample_id} --prefix ${sample_id} ${contigs}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "sample_id",
            "contigs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "errorStrategy 'ignore'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "roary": {
        "name_process": "roary",
        "string_process": "\nprocess roary {\n    publishDir \"${params.outdir}\", mode: \"copy\"\n    \n    tag {sample_id}\n    \n    errorStrategy 'ignore'\n    \n    cpus 16\n\n    input:\n    path(gffs)\n    output:\n    path(\"roary_results\")\n\n    script:\n    \"\"\"\n    roary -p ${task.cpus} -e --mafft -f roary_results ${gffs}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    roary -p ${task.cpus} -e --mafft -f roary_results ${gffs}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Roary"
        ],
        "tools_url": [
            "https://bio.tools/roary"
        ],
        "tools_dico": [
            {
                "name": "Roary",
                "uri": "https://bio.tools/roary",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high speed stand alone pan genome pipeline, which takes annotated assemblies in GFF3 format (produced by Prokka (Seemann, 2014)) and calculates the pan genome.",
                "homepage": "http://sanger-pathogens.github.io/Roary/"
            }
        ],
        "inputs": [
            "gffs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}\", mode: \"copy\"",
            "tag {sample_id}",
            "errorStrategy 'ignore'",
            "cpus 16"
        ],
        "when": "",
        "stub": ""
    },
    "mlst": {
        "name_process": "mlst",
        "string_process": "\nprocess mlst {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n    \n    tag {sample_id}\n    \n    errorStrategy 'ignore'\n    \n    cpus 1\n\n    input:\n    tuple val(sample_id), path(contigs)\n    output:\n    path(\"${sample_id}_mlst.tsv\")\n\n    script:\n    \"\"\"\n    mlst ${contigs} > ${sample_id}_mlst.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    mlst ${contigs} > ${sample_id}_mlst.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MLST"
        ],
        "tools_url": [
            "https://bio.tools/mlst"
        ],
        "tools_dico": [
            {
                "name": "MLST",
                "uri": "https://bio.tools/mlst",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Multi Locus Sequence Typing from an assembled genome or from a set of reads.",
                "homepage": "http://cge.cbs.dtu.dk/services/MLST/"
            }
        ],
        "inputs": [
            "sample_id",
            "contigs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "errorStrategy 'ignore'",
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "staramr": {
        "name_process": "staramr",
        "string_process": "\nprocess staramr {\n    publishDir \"${params.outdir}\", mode: \"copy\"\n    \n    tag {sample_id}\n    \n    errorStrategy 'ignore'\n    \n    cpus 8\n\n    input:\n    path(contigs)\n    output:\n    path(\"staramr_output\")\n\n    script:\n    \"\"\"\n    staramr search --output-dir staramr *.fa*\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    staramr search --output-dir staramr *.fa*\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contigs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}\", mode: \"copy\"",
            "tag {sample_id}",
            "errorStrategy 'ignore'",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "amrfinderplus": {
        "name_process": "amrfinderplus",
        "string_process": "\nprocess amrfinderplus {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n    \n    tag {sample_id}\n    \n    errorStrategy 'ignore'\n    \n    cpus 2\n\n    input:\n    tuple val(sample_id), path(contigs)\n    output:\n    path(\"${sample_id}.*\")\n\n    script:\n    \"\"\"\n    amrfinder -t ${task.cpus} \\\n    --organism ${params.amrfinderplus_species} \\\n    --nucleotide ${contigs} \\\n    --report_common \\\n    -o ${sample_id}.armfinder \\\n    --name ${sample_id} \\\n    --nucleotide_output ${sample_id}.amrgenes.fna \\\n    --plus\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    amrfinder -t ${task.cpus} \\\n    --organism ${params.amrfinderplus_species} \\\n    --nucleotide ${contigs} \\\n    --report_common \\\n    -o ${sample_id}.armfinder \\\n    --name ${sample_id} \\\n    --nucleotide_output ${sample_id}.amrgenes.fna \\\n    --plus\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "contigs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "errorStrategy 'ignore'",
            "cpus 2"
        ],
        "when": "",
        "stub": ""
    },
    "mob_recon": {
        "name_process": "mob_recon",
        "string_process": "\nprocess mob_recon {\n  publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\",\n    saveAs: { filename -> if (filename.endsWith(\".tsv\")){ \n                \"report/${filename}\"  } \n            else if (file(filename).isDirectory())\n                {\"${filename}\"} \n            else { \n                \"${filename}\"\n            }\n    }\n  \n  container 'kbessonov/mob_suite:3.0.3'\n\n  tag {sample_id}\n\n  cpus 16 \n\n  input:\n  \n  tuple val(sample_id), path(contigs)\n  \n  output:\n  path(\"${sample_id}\"), emit: outdir\n  path(\"${sample_id}/*.fasta\"), emit: contigs\n  path(\"*.tsv\"), optional: true\n  \n  script:\n  mod_db = params.mod_db ? \"-d ${params.mob_db}\" : \"\"\n  ref_db = params.ref_db ? \"-g ${params.ref_db}\" : \"\"\n  \"\"\"\n    hostname > hostname\n    mob_recon \\\n    --num_threads ${task.cpus} \\\n    --run_typer \\\n    -s ${sample_id} \\\n    ${mod_db} \\\n    ${ref_db} \\\n    --infile ${contigs} \\\n    --outdir ${sample_id}\n    cp ${sample_id}/contig_report.txt ${sample_id}_contig_report.tsv 2>/dev/null || :\n    cp ${sample_id}/mobtyper_results.txt ${sample_id}_mobtyper_results.tsv 2>/dev/null || :\n  \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "  mod_db = params.mod_db ? \"-d ${params.mob_db}\" : \"\"\n  ref_db = params.ref_db ? \"-g ${params.ref_db}\" : \"\"\n  \"\"\"\n    hostname > hostname\n    mob_recon \\\n    --num_threads ${task.cpus} \\\n    --run_typer \\\n    -s ${sample_id} \\\n    ${mod_db} \\\n    ${ref_db} \\\n    --infile ${contigs} \\\n    --outdir ${sample_id}\n    cp ${sample_id}/contig_report.txt ${sample_id}_contig_report.tsv 2>/dev/null || :\n    cp ${sample_id}/mobtyper_results.txt ${sample_id}_mobtyper_results.tsv 2>/dev/null || :\n  \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "sample_id",
            "contigs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\" , saveAs: { filename -> if (filename.endsWith(\".tsv\")){ \"report/${filename}\" } else if (file(filename).isDirectory()) {\"${filename}\"} else { \"${filename}\" } }",
            "container 'kbessonov/mob_suite:3.0.3'",
            "tag {sample_id}",
            "cpus 16"
        ],
        "when": "",
        "stub": ""
    },
    "medaka": {
        "name_process": "medaka",
        "string_process": "\nprocess medaka {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n    \n    label 'medaka'\n    \n    tag {sample_id}\n    \n    container 'quay.io/biocontainers/medaka:1.4.3--py38h130def0_0'\n\n    cpus 12\n\n    input:\n    tuple val(sample_id), path(reads), path(contigs)\n    output:\n    tuple val(sample_id), path(\"${sample_id}_medaka.fasta\")\n    \n    script:\n    \"\"\"\n    medaka_consensus -i ${reads} -d ${contigs} -o output -t ${task.cpus} -m ${params.medaka_model}\n    mv output/consensus.fasta ${sample_id}_medaka.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    medaka_consensus -i ${reads} -d ${contigs} -o output -t ${task.cpus} -m ${params.medaka_model}\n    mv output/consensus.fasta ${sample_id}_medaka.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads",
            "contigs"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "label 'medaka'",
            "tag {sample_id}",
            "container 'quay.io/biocontainers/medaka:1.4.3--py38h130def0_0'",
            "cpus 12"
        ],
        "when": "",
        "stub": ""
    },
    "pilon_raw": {
        "name_process": "pilon_raw",
        "string_process": "\nprocess pilon_raw {\n    publishDir \"${params.outdir}\", mode: \"copy\",\n    saveAs: {filename -> if (params.pilon_output) { \n                \"${task.process.replaceAll(\":\",\"_\")}/${filename}\"\n                } \n            else {\n                null\n                }\n            }\n\n    tag {sample_id}\n    \n    cpus 8\n                           \n\n    input:\n    tuple val(sample_id), path(short_reads), path(contigs) \n\n    output:\n    tuple val(sample_id), path(\"${sample_id}_pilon.fasta\"), emit: contigs\n    path(\"*.changes\")\n\n    script:\n    \"\"\"\n    export _JAVA_OPTIONS=\"-Xmx${params.memory} -Xms512m\"\n    bwa index ${contigs}\n    \n    bwa mem -M -t ${task.cpus} ${contigs} ${short_reads} | samtools view -bS -| samtools sort > alignments.bam\n   \n    samtools index alignments.bam\n\n    pilon --genome ${contigs} --frags alignments.bam --changes \\\n    --output ${sample_id}_pilon --fix all\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    export _JAVA_OPTIONS=\"-Xmx${params.memory} -Xms512m\"\n    bwa index ${contigs}\n    \n    bwa mem -M -t ${task.cpus} ${contigs} ${short_reads} | samtools view -bS -| samtools sort > alignments.bam\n   \n    samtools index alignments.bam\n\n    pilon --genome ${contigs} --frags alignments.bam --changes \\\n    --output ${sample_id}_pilon --fix all\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools",
            "pilon"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools",
            "https://bio.tools/pilon"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "pilon",
                "uri": "https://bio.tools/pilon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Read alignment analysis to diagnose, report, and automatically improve de novo genome assemblies.",
                "homepage": "http://www.broadinstitute.org/software/pilon/"
            }
        ],
        "inputs": [
            "sample_id",
            "short_reads",
            "contigs"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}\", mode: \"copy\" , saveAs: {filename -> if (params.pilon_output) { \"${task.process.replaceAll(\":\",\"_\")}/${filename}\" } else { null } }",
            "tag {sample_id}",
            "cpus 8"
        ],
        "when": "",
        "stub": ""
    },
    "pilon": {
        "name_process": "pilon",
        "string_process": "\nprocess pilon {\n    publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"\n    \n    tag {sample_id}\n    \n    cpus 12\n    \n    container 'quay.io/biocontainers/pilon:1.24--hdfd78af_0'\n\n    input:\n    tuple val(sample_id), path(reads), path(contigs)\n    output:\n    path \"${sample_id}_pilon.fasta\"\n    path \"*.changes\", optional: true\n    \n    script:\n    \"\"\"\n    pilon.py -t ${task.cpus} -n 10 ${reads[0]} ${reads[1]} ${contigs}\n    mv final.polished.fasta  ${sample_id}_pilon.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    pilon.py -t ${task.cpus} -n 10 ${reads[0]} ${reads[1]} ${contigs}\n    mv final.polished.fasta  ${sample_id}_pilon.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads",
            "contigs"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "thanhleviet__nf-nanopore-assembly",
        "directive": [
            "publishDir \"${params.outdir}/${task.process.replaceAll(\":\",\"_\")}\", mode: \"copy\"",
            "tag {sample_id}",
            "cpus 12",
            "container 'quay.io/biocontainers/pilon:1.24--hdfd78af_0'"
        ],
        "when": "",
        "stub": ""
    }
}
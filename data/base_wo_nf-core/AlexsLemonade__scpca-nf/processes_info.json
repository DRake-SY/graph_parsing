{
    "fastp": {
        "name_process": "fastp",
        "string_process": "\nprocess fastp{\n    container params.FASTP_CONTAINER\n    label 'cpus_8'\n    label 'mem_8'\n    tag \"${meta.library_id}-bulk\"\n    input: \n        tuple val(meta), path(read1), path(read2)\n    output: \n        tuple val(meta), path(trimmed_reads)\n    script: \n        trimmed_reads = \"${meta.library_id}_trimmed\"\n        fastp_report = \"${meta.library_id}_fastp.html\"\n        \"\"\"\n        mkdir -p ${trimmed_reads}\n        fastp --in1 <(gunzip -c ${read1}) --out1 ${trimmed_reads}/${meta.library_id}_R1_trimmed.fastq.gz \\\n        ${meta.technology == 'paired_end' ? \"--in2 <(gunzip -c ${read2}) --out2 ${trimmed_reads}/${meta.library_id}_R2_trimmed.fastq.gz\" : \"\"} \\\n        --length_required 20 \\\n        --thread ${task.cpus}\n        \"\"\"\n\n}",
        "nb_lignes_process": 20,
        "string_script": "        trimmed_reads = \"${meta.library_id}_trimmed\"\n        fastp_report = \"${meta.library_id}_fastp.html\"\n        \"\"\"\n        mkdir -p ${trimmed_reads}\n        fastp --in1 <(gunzip -c ${read1}) --out1 ${trimmed_reads}/${meta.library_id}_R1_trimmed.fastq.gz \\\n        ${meta.technology == 'paired_end' ? \"--in2 <(gunzip -c ${read2}) --out2 ${trimmed_reads}/${meta.library_id}_R2_trimmed.fastq.gz\" : \"\"} \\\n        --length_required 20 \\\n        --thread ${task.cpus}\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "meta",
            "read1",
            "read2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "meta"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.FASTP_CONTAINER",
            "label 'cpus_8'",
            "label 'mem_8'",
            "tag \"${meta.library_id}-bulk\""
        ],
        "when": "",
        "stub": ""
    },
    "salmon": {
        "name_process": "salmon",
        "string_process": "\nprocess salmon{\n    container params.SALMON_CONTAINER\n    label 'cpus_12'\n    label 'mem_24'\n    tag \"${meta.library_id}-bulk\"\n    publishDir \"${meta.salmon_publish_dir}\"\n    input: \n        tuple val(meta), path(read_dir)\n        path (index)\n    output: \n        tuple val(meta), path(salmon_results_dir)\n    script:\n        salmon_results_dir = \"${meta.library_id}\"\n        \"\"\"\n        salmon quant -i ${index} \\\n        -l A \\\n        ${meta.technology == 'paired_end' ? \"-1\": \"-r\"} ${read_dir}/*_R1_*.fastq.gz \\\n        ${meta.technology == 'paired_end' ? \"-2 ${read_dir}/*_R2_*.fastq.gz\" : \"\" } \\\n        -o ${salmon_results_dir} \\\n        --validateMappings \\\n        --rangeFactorizationBins 4 \\\n        --gcBias \\\n        --seqBias \\\n        --threads ${task.cpus}\n        \"\"\"\n\n}",
        "nb_lignes_process": 26,
        "string_script": "        salmon_results_dir = \"${meta.library_id}\"\n        \"\"\"\n        salmon quant -i ${index} \\\n        -l A \\\n        ${meta.technology == 'paired_end' ? \"-1\": \"-r\"} ${read_dir}/*_R1_*.fastq.gz \\\n        ${meta.technology == 'paired_end' ? \"-2 ${read_dir}/*_R2_*.fastq.gz\" : \"\" } \\\n        -o ${salmon_results_dir} \\\n        --validateMappings \\\n        --rangeFactorizationBins 4 \\\n        --gcBias \\\n        --seqBias \\\n        --threads ${task.cpus}\n        \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "meta",
            "read_dir",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [
            "meta"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.SALMON_CONTAINER",
            "label 'cpus_12'",
            "label 'mem_24'",
            "tag \"${meta.library_id}-bulk\"",
            "publishDir \"${meta.salmon_publish_dir}\""
        ],
        "when": "",
        "stub": ""
    },
    "merge_bulk_quants": {
        "name_process": "merge_bulk_quants",
        "string_process": "\nprocess merge_bulk_quants {\n    container params.SCPCATOOLS_CONTAINER\n    publishDir \"${params.output_dir}/${project_id}\"\n    input:\n        tuple val(project_id), path(salmon_directories)\n        path(tx2gene)\n        path(library_metadata)\n    output:\n        path(tximport_file), emit: bulk_counts\n        path(bulk_metadata_file), emit: bulk_metadata\n    script:\n        tximport_file = \"${project_id}_bulk_quant.tsv\"\n        bulk_metadata_file = \"${project_id}_bulk_metadata.tsv\"\n        workflow_url = workflow.repository ?: workflow.manifest.homePage\n        \"\"\"\n        ls -d ${salmon_directories} > salmon_directories.txt\n\n        merge_counts_tximport.R \\\n          --project_id ${project_id} \\\n          --salmon_dirs salmon_directories.txt \\\n          --output_file ${tximport_file} \\\n          --tx2gene ${tx2gene}\n\n        generate_bulk_metadata.R \\\n         --project_id ${project_id} \\\n         --salmon_dirs salmon_directories.txt \\\n         --library_metadata_file ${library_metadata} \\\n         --metadata_output ${bulk_metadata_file} \\\n         --genome_assembly ${params.assembly} \\\n         --workflow_url \"${workflow_url}\" \\\n         --workflow_version \"${workflow.revision}\" \\\n         --workflow_commit \"${workflow.commitId}\"\n        \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "        tximport_file = \"${project_id}_bulk_quant.tsv\"\n        bulk_metadata_file = \"${project_id}_bulk_metadata.tsv\"\n        workflow_url = workflow.repository ?: workflow.manifest.homePage\n        \"\"\"\n        ls -d ${salmon_directories} > salmon_directories.txt\n\n        merge_counts_tximport.R \\\n          --project_id ${project_id} \\\n          --salmon_dirs salmon_directories.txt \\\n          --output_file ${tximport_file} \\\n          --tx2gene ${tx2gene}\n\n        generate_bulk_metadata.R \\\n         --project_id ${project_id} \\\n         --salmon_dirs salmon_directories.txt \\\n         --library_metadata_file ${library_metadata} \\\n         --metadata_output ${bulk_metadata_file} \\\n         --genome_assembly ${params.assembly} \\\n         --workflow_url \"${workflow_url}\" \\\n         --workflow_version \"${workflow.revision}\" \\\n         --workflow_commit \"${workflow.commitId}\"\n        \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "project_id",
            "salmon_directories",
            "tx2gene",
            "library_metadata"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.SCPCATOOLS_CONTAINER",
            "publishDir \"${params.output_dir}/${project_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "alevin_rad": {
        "name_process": "alevin_rad",
        "string_process": "\nprocess alevin_rad{\n  container params.SALMON_CONTAINER\n  label 'cpus_12'\n  label 'mem_24'\n  label 'disk_dynamic'\n  tag \"${meta.run_id}-rna\"\n  publishDir \"${meta.rad_publish_dir}\"\n  input:\n    tuple val(meta), \n          path(read1), path(read2)\n    path index\n  output:\n    tuple val(meta), path(rad_dir) \n  script:\n                                                   \n    rad_dir = file(meta.rad_dir).name\n                                \n    tech_flag = ['10Xv2': '--chromium',\n                 '10Xv2_5prime': '--chromium',\n                 '10Xv3': '--chromiumV3',\n                 '10Xv3.1': '--chromiumV3']\n                                                  \n                                                                   \n    \"\"\"\n    mkdir -p ${rad_dir}\n    salmon alevin \\\n      -l ISR \\\n      ${tech_flag[meta.technology]} \\\n      -1 ${read1} \\\n      -2 ${read2} \\\n      -i ${index} \\\n      -o ${rad_dir} \\\n      -p ${task.cpus} \\\n      --dumpFeatures \\\n      --rad\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    rad_dir = file(meta.rad_dir).name\n                                \n    tech_flag = ['10Xv2': '--chromium',\n                 '10Xv2_5prime': '--chromium',\n                 '10Xv3': '--chromiumV3',\n                 '10Xv3.1': '--chromiumV3']\n                                                  \n                                                                   \n    \"\"\"\n    mkdir -p ${rad_dir}\n    salmon alevin \\\n      -l ISR \\\n      ${tech_flag[meta.technology]} \\\n      -1 ${read1} \\\n      -2 ${read2} \\\n      -i ${index} \\\n      -o ${rad_dir} \\\n      -p ${task.cpus} \\\n      --dumpFeatures \\\n      --rad\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "meta",
            "read1",
            "read2",
            "index"
        ],
        "nb_inputs": 4,
        "outputs": [
            "meta"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.SALMON_CONTAINER",
            "label 'cpus_12'",
            "label 'mem_24'",
            "label 'disk_dynamic'",
            "tag \"${meta.run_id}-rna\"",
            "publishDir \"${meta.rad_publish_dir}\""
        ],
        "when": "",
        "stub": ""
    },
    "fry_quant_rna": {
        "name_process": "fry_quant_rna",
        "string_process": "\nprocess fry_quant_rna{\n  container params.ALEVINFRY_CONTAINER\n  label 'cpus_8'\n  label 'mem_8'\n  tag \"${meta.run_id}-rna\"\n  publishDir \"${params.checkpoints_dir}/alevinfry/${meta.library_id}\", enabled: params.publish_fry_outs\n\n  input:\n    tuple val(meta), path(run_dir), path(barcode_file)\n    path tx2gene_3col\n  output:\n    tuple val(meta), path(run_dir)\n  \n  script: \n    \"\"\"\n    alevin-fry generate-permit-list \\\n      -i ${run_dir} \\\n      --expected-ori ${meta.technology == '10Xv2_5prime' ? 'rc' : 'fw'} \\\n      -o ${run_dir} \\\n      --unfiltered-pl ${barcode_file}\n\n    alevin-fry collate \\\n      --input-dir ${run_dir} \\\n      --rad-dir ${run_dir} \\\n      -t ${task.cpus}\n    \n    alevin-fry quant \\\n      --input-dir ${run_dir} \\\n      --tg-map ${tx2gene_3col} \\\n      --resolution ${params.af_resolution} \\\n      -o ${run_dir} \\\n      --use-mtx \\\n      -t ${task.cpus} \\\n\n    # remove large files\n    rm ${run_dir}/*.rad ${run_dir}/*.bin \n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    \"\"\"\n    alevin-fry generate-permit-list \\\n      -i ${run_dir} \\\n      --expected-ori ${meta.technology == '10Xv2_5prime' ? 'rc' : 'fw'} \\\n      -o ${run_dir} \\\n      --unfiltered-pl ${barcode_file}\n\n    alevin-fry collate \\\n      --input-dir ${run_dir} \\\n      --rad-dir ${run_dir} \\\n      -t ${task.cpus}\n    \n    alevin-fry quant \\\n      --input-dir ${run_dir} \\\n      --tg-map ${tx2gene_3col} \\\n      --resolution ${params.af_resolution} \\\n      -o ${run_dir} \\\n      --use-mtx \\\n      -t ${task.cpus} \\\n\n    # remove large files\n    rm ${run_dir}/*.rad ${run_dir}/*.bin \n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "run_dir",
            "barcode_file",
            "tx2gene_3col"
        ],
        "nb_inputs": 4,
        "outputs": [
            "meta"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.ALEVINFRY_CONTAINER",
            "label 'cpus_8'",
            "label 'mem_8'",
            "tag \"${meta.run_id}-rna\"",
            "publishDir \"${params.checkpoints_dir}/alevinfry/${meta.library_id}\", enabled: params.publish_fry_outs"
        ],
        "when": "",
        "stub": ""
    },
    "generate_reference": {
        "name_process": "generate_reference",
        "string_process": "\nprocess generate_reference{\n  container params.SCPCATOOLS_CONTAINER\n                                                                   \n  publishDir params.ref_dir\n  label 'mem_32'\n  maxRetries 1\n  input:\n    path fasta\n    path gtf\n    val assembly\n  output: \n    tuple path(splici_fasta), path(spliced_cdna_fasta), emit: fasta_files\n    tuple path(\"annotation/*.gtf.gz\"), path(\"annotation/*.tsv\"), path(\"annotation/*.txt\"),  emit: annotations\n  script:\n    splici_fasta=\"fasta/${assembly}.spliced_intron.txome.fa.gz\"\n    spliced_cdna_fasta=\"fasta/${assembly}.spliced_cdna.txome.fa.gz\"\n    \"\"\"\n    make_reference_fasta.R \\\n      --gtf ${gtf} \\\n      --genome ${fasta} \\\n      --fasta_output fasta \\\n      --annotation_output annotation \\\n      --assembly ${assembly}\n    \n    gzip annotation/*.gtf\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    splici_fasta=\"fasta/${assembly}.spliced_intron.txome.fa.gz\"\n    spliced_cdna_fasta=\"fasta/${assembly}.spliced_cdna.txome.fa.gz\"\n    \"\"\"\n    make_reference_fasta.R \\\n      --gtf ${gtf} \\\n      --genome ${fasta} \\\n      --fasta_output fasta \\\n      --annotation_output annotation \\\n      --assembly ${assembly}\n    \n    gzip annotation/*.gtf\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "gtf",
            "assembly"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.SCPCATOOLS_CONTAINER",
            "publishDir params.ref_dir",
            "label 'mem_32'",
            "maxRetries 1"
        ],
        "when": "",
        "stub": ""
    },
    "salmon_index": {
        "name_process": "salmon_index",
        "string_process": "\nprocess salmon_index{\n  container params.SALMON_CONTAINER\n  publishDir \"${params.ref_dir}/salmon_index\", mode: 'copy'\n  label 'cpus_8'\n  label 'mem_16'\n  input:\n    tuple path(splici_fasta), path(spliced_cdna_fasta)\n    path genome \n  output:\n    path splici_index_dir \n    path spliced_cdna_index_dir\n  script:\n    splici_index_dir = \"${splici_fasta}\".split(\"\\\\.(fasta|fa)\")[0]\n    spliced_cdna_index_dir = \"${spliced_cdna_fasta}\".split(\"\\\\.(fasta|fa)\")[0]\n    \"\"\"\n    salmon index \\\n      -t ${splici_fasta} \\\n      -i ${splici_index_dir} \\\n      -k 31 \\\n      -p ${task.cpus} \\\n\n    gunzip -c ${genome} \\\n      |grep \"^>\" | cut -d \" \" -f 1 \\\n      |sed -e 's/>//g' > decoys.txt\n    cat ${spliced_cdna_fasta} ${genome} > gentrome.fa.gz\n\n    salmon index \\\n      -t gentrome.fa.gz \\\n      -d decoys.txt \\\n      -i ${spliced_cdna_index_dir} \\\n      -k 31 \\\n      -p ${task.cpus} \\\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    splici_index_dir = \"${splici_fasta}\".split(\"\\\\.(fasta|fa)\")[0]\n    spliced_cdna_index_dir = \"${spliced_cdna_fasta}\".split(\"\\\\.(fasta|fa)\")[0]\n    \"\"\"\n    salmon index \\\n      -t ${splici_fasta} \\\n      -i ${splici_index_dir} \\\n      -k 31 \\\n      -p ${task.cpus} \\\n\n    gunzip -c ${genome} \\\n      |grep \"^>\" | cut -d \" \" -f 1 \\\n      |sed -e 's/>//g' > decoys.txt\n    cat ${spliced_cdna_fasta} ${genome} > gentrome.fa.gz\n\n    salmon index \\\n      -t gentrome.fa.gz \\\n      -d decoys.txt \\\n      -i ${spliced_cdna_index_dir} \\\n      -k 31 \\\n      -p ${task.cpus} \\\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "splici_fasta",
            "spliced_cdna_fasta",
            "genome"
        ],
        "nb_inputs": 3,
        "outputs": [
            "splici_index_dir",
            "spliced_cdna_index_dir"
        ],
        "nb_outputs": 2,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.SALMON_CONTAINER",
            "publishDir \"${params.ref_dir}/salmon_index\", mode: 'copy'",
            "label 'cpus_8'",
            "label 'mem_16'"
        ],
        "when": "",
        "stub": ""
    },
    "cellranger_index": {
        "name_process": "cellranger_index",
        "string_process": "\nprocess cellranger_index{\n  container params.CELLRANGER_CONTAINER\n  publishDir \"${params.ref_dir}/cellranger_index\", mode: 'copy'\n  label 'cpus_12'\n  label 'mem_24'\n  input:\n    path fasta\n    path gtf\n    val assembly \n  output:\n    path cellranger_index\n  script:\n    cellranger_index = \"${assembly}_cellranger_full\"\n    \"\"\"\n    gunzip -c ${fasta} > genome.fasta\n    gunzip -c ${gtf} > genome.gtf\n    \n    cellranger mkref \\\n      --genome=${cellranger_index} \\\n      --fasta=genome.fasta \\\n      --genes=genome.gtf \\\n      --nthreads=${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    cellranger_index = \"${assembly}_cellranger_full\"\n    \"\"\"\n    gunzip -c ${fasta} > genome.fasta\n    gunzip -c ${gtf} > genome.gtf\n    \n    cellranger mkref \\\n      --genome=${cellranger_index} \\\n      --fasta=genome.fasta \\\n      --genes=genome.gtf \\\n      --nthreads=${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "gtf",
            "assembly"
        ],
        "nb_inputs": 3,
        "outputs": [
            "cellranger_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.CELLRANGER_CONTAINER",
            "publishDir \"${params.ref_dir}/cellranger_index\", mode: 'copy'",
            "label 'cpus_12'",
            "label 'mem_24'"
        ],
        "when": "",
        "stub": ""
    },
    "index_star": {
        "name_process": "index_star",
        "string_process": "\nprocess index_star{\n  container params.STAR_CONTAINER\n  publishDir \"${params.ref_dir}/star_index\", mode: 'copy'\n  label 'cpus_12'\n  memory '64.GB'\n  input:\n    path fasta\n    path gtf\n    val assembly\n  output:\n    path output_dir\n  script:\n    output_dir = \"${assembly}.star_idx\"\n    \"\"\"\n    mkdir ${output_dir}\n\n    # star needs uncompressed fasta & gtf\n    gunzip -c ${fasta} > ${assembly}.fa\n    gunzip -c ${gtf} > ${assembly}.gtf\n    STAR --runMode genomeGenerate \\\n      --runThreadN ${task.cpus} \\\n      --genomeDir ${output_dir} \\\n      --genomeFastaFiles ${assembly}.fa \\\n      --genomeSAsparseD 2 \\\n      --sjdbGTFfile ${assembly}.gtf \\\n      --sjdbOverhang 100 \\\n      --limitGenomeGenerateRAM 64000000000\n    \n    # clean up\n    rm ${assembly}.fa\n    rm ${assembly}.gtf\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    output_dir = \"${assembly}.star_idx\"\n    \"\"\"\n    mkdir ${output_dir}\n\n    # star needs uncompressed fasta & gtf\n    gunzip -c ${fasta} > ${assembly}.fa\n    gunzip -c ${gtf} > ${assembly}.gtf\n    STAR --runMode genomeGenerate \\\n      --runThreadN ${task.cpus} \\\n      --genomeDir ${output_dir} \\\n      --genomeFastaFiles ${assembly}.fa \\\n      --genomeSAsparseD 2 \\\n      --sjdbGTFfile ${assembly}.gtf \\\n      --sjdbOverhang 100 \\\n      --limitGenomeGenerateRAM 64000000000\n    \n    # clean up\n    rm ${assembly}.fa\n    rm ${assembly}.gtf\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "fasta",
            "gtf",
            "assembly"
        ],
        "nb_inputs": 3,
        "outputs": [
            "output_dir"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.STAR_CONTAINER",
            "publishDir \"${params.ref_dir}/star_index\", mode: 'copy'",
            "label 'cpus_12'",
            "memory '64.GB'"
        ],
        "when": "",
        "stub": ""
    },
    "index_feature": {
        "name_process": "index_feature",
        "string_process": "\nprocess index_feature{\n  container params.SALMON_CONTAINER\n  \n  input:\n    tuple val(id), path(feature_file)\n  output:\n    tuple val(id), path(\"feature_index\")\n  script:\n    \"\"\"\n    salmon index \\\n      -t ${feature_file} \\\n      -i feature_index \\\n      --features \\\n      -k 7 \n\n    awk '{print \\$1\"\\\\t\"\\$1;}' ${feature_file} > feature_index/t2g.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    salmon index \\\n      -t ${feature_file} \\\n      -i feature_index \\\n      --features \\\n      -k 7 \n\n    awk '{print \\$1\"\\\\t\"\\$1;}' ${feature_file} > feature_index/t2g.tsv\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "id",
            "feature_file"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.SALMON_CONTAINER"
        ],
        "when": "",
        "stub": ""
    },
    "alevin_feature": {
        "name_process": "alevin_feature",
        "string_process": "\nprocess alevin_feature{\n  container params.SALMON_CONTAINER\n  label 'cpus_8'\n  label 'mem_8'\n  tag \"${meta.run_id}-features\"\n  publishDir \"${params.checkpoints_dir}/rad/${meta.library_id}\", enabled: params.publish_fry_outs\n  input:\n    tuple val(meta), \n          path(read1), path(read2), \n          path(feature_index)\n  output:\n    tuple val(meta),\n          path(run_dir)\n  script:\n                                    \n    run_dir = \"${meta.run_id}-features\"\n                                         \n    umi_geom_map = ['10Xv2': '1[17-26]',\n                    '10Xv3': '1[17-28]',\n                    '10Xv3.1': '1[17-28]']\n    tech_version = meta.technology.split('_').last()\n    umi_geom = umi_geom_map[tech_version]\n    \"\"\"\n    mkdir -p ${run_dir}\n    salmon alevin \\\n      -l ISR \\\n      -1 ${read1} \\\n      -2 ${read2} \\\n      -i ${feature_index} \\\n      --read-geometry ${meta.feature_barcode_geom} \\\n      --bc-geometry 1[1-16] \\\n      --umi-geometry ${umi_geom} \\\n      --rad \\\n      -o ${run_dir} \\\n      -p ${task.cpus}\n\n    cp ${feature_index}/t2g.tsv ${run_dir}/t2g.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    run_dir = \"${meta.run_id}-features\"\n                                         \n    umi_geom_map = ['10Xv2': '1[17-26]',\n                    '10Xv3': '1[17-28]',\n                    '10Xv3.1': '1[17-28]']\n    tech_version = meta.technology.split('_').last()\n    umi_geom = umi_geom_map[tech_version]\n    \"\"\"\n    mkdir -p ${run_dir}\n    salmon alevin \\\n      -l ISR \\\n      -1 ${read1} \\\n      -2 ${read2} \\\n      -i ${feature_index} \\\n      --read-geometry ${meta.feature_barcode_geom} \\\n      --bc-geometry 1[1-16] \\\n      --umi-geometry ${umi_geom} \\\n      --rad \\\n      -o ${run_dir} \\\n      -p ${task.cpus}\n\n    cp ${feature_index}/t2g.tsv ${run_dir}/t2g.tsv\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "Salmon"
        ],
        "tools_url": [
            "https://bio.tools/salmon"
        ],
        "tools_dico": [
            {
                "name": "Salmon",
                "uri": "https://bio.tools/salmon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3496",
                                "term": "RNA sequence (raw)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2093",
                                "term": "Data reference"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "A tool for transcript expression quantification from RNA-seq data",
                "homepage": "https://github.com/COMBINE-lab/salmon"
            }
        ],
        "inputs": [
            "meta",
            "read1",
            "read2",
            "feature_index"
        ],
        "nb_inputs": 4,
        "outputs": [
            "meta"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.SALMON_CONTAINER",
            "label 'cpus_8'",
            "label 'mem_8'",
            "tag \"${meta.run_id}-features\"",
            "publishDir \"${params.checkpoints_dir}/rad/${meta.library_id}\", enabled: params.publish_fry_outs"
        ],
        "when": "",
        "stub": ""
    },
    "fry_quant_feature": {
        "name_process": "fry_quant_feature",
        "string_process": "\nprocess fry_quant_feature{\n  container params.ALEVINFRY_CONTAINER\n  label 'cpus_8'\n  tag \"${meta.run_id}-features\"\n  publishDir \"${params.checkpoints_dir}/alevinfry/${meta.library_id}\", enabled: params.publish_fry_outs\n  input:\n    tuple val(meta),\n          path(run_dir)\n    path barcode_file\n  output:\n    tuple val(meta),\n          path(run_dir)\n  \n  script: \n    \"\"\"\n    alevin-fry generate-permit-list \\\n      -i ${run_dir} \\\n      --expected-ori fw \\\n      -o ${run_dir} \\\n      --unfiltered-pl ${barcode_file}\n\n    alevin-fry collate \\\n      --input-dir ${run_dir} \\\n      --rad-dir ${run_dir} \\\n      -t ${task.cpus}\n    \n    alevin-fry quant \\\n      --input-dir ${run_dir} \\\n      --tg-map ${run_dir}/t2g.tsv \\\n      --resolution ${params.af_resolution} \\\n      -o ${run_dir} \\\n      --use-mtx \\\n      -t ${task.cpus} \\\n\n    # remove large files\n    rm ${run_dir}/*.rad ${run_dir}/*.bin \n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    \"\"\"\n    alevin-fry generate-permit-list \\\n      -i ${run_dir} \\\n      --expected-ori fw \\\n      -o ${run_dir} \\\n      --unfiltered-pl ${barcode_file}\n\n    alevin-fry collate \\\n      --input-dir ${run_dir} \\\n      --rad-dir ${run_dir} \\\n      -t ${task.cpus}\n    \n    alevin-fry quant \\\n      --input-dir ${run_dir} \\\n      --tg-map ${run_dir}/t2g.tsv \\\n      --resolution ${params.af_resolution} \\\n      -o ${run_dir} \\\n      --use-mtx \\\n      -t ${task.cpus} \\\n\n    # remove large files\n    rm ${run_dir}/*.rad ${run_dir}/*.bin \n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "run_dir",
            "barcode_file"
        ],
        "nb_inputs": 3,
        "outputs": [
            "meta"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.ALEVINFRY_CONTAINER",
            "label 'cpus_8'",
            "tag \"${meta.run_id}-features\"",
            "publishDir \"${params.checkpoints_dir}/alevinfry/${meta.library_id}\", enabled: params.publish_fry_outs"
        ],
        "when": "",
        "stub": ""
    },
    "sce_qc_report": {
        "name_process": "sce_qc_report",
        "string_process": "\nprocess sce_qc_report{\n    container params.SCPCATOOLS_CONTAINER\n    tag \"${meta.library_id}\"\n    publishDir \"${params.results_dir}/${meta.project_id}/${meta.sample_id}\"\n    input: \n        tuple val(meta), path(unfiltered_rds), path(filtered_rds)\n    output:\n        tuple val(meta), path(qc_report), path(metadata_json)\n    script:\n        qc_report = \"${meta.library_id}_qc.html\"\n        metadata_json = \"${meta.library_id}_metadata.json\"\n        workflow_url = workflow.repository ?: workflow.manifest.homePage\n        \"\"\"\n        sce_qc_report.R \\\n          --library_id \"${meta.library_id}\" \\\n          --sample_id \"${meta.sample_id}\" \\\n          --unfiltered_sce ${unfiltered_rds} \\\n          --filtered_sce ${filtered_rds} \\\n          --qc_report_file ${qc_report} \\\n          --metadata_json ${metadata_json} \\\n          --technology \"${meta.technology}\" \\\n          --seq_unit \"${meta.seq_unit}\" \\\n          --genome_assembly \"${params.assembly}\" \\\n          --workflow_url \"${workflow_url}\" \\\n          --workflow_version \"${workflow.revision}\" \\\n          --workflow_commit \"${workflow.commitId}\"\n        \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "        qc_report = \"${meta.library_id}_qc.html\"\n        metadata_json = \"${meta.library_id}_metadata.json\"\n        workflow_url = workflow.repository ?: workflow.manifest.homePage\n        \"\"\"\n        sce_qc_report.R \\\n          --library_id \"${meta.library_id}\" \\\n          --sample_id \"${meta.sample_id}\" \\\n          --unfiltered_sce ${unfiltered_rds} \\\n          --filtered_sce ${filtered_rds} \\\n          --qc_report_file ${qc_report} \\\n          --metadata_json ${metadata_json} \\\n          --technology \"${meta.technology}\" \\\n          --seq_unit \"${meta.seq_unit}\" \\\n          --genome_assembly \"${params.assembly}\" \\\n          --workflow_url \"${workflow_url}\" \\\n          --workflow_version \"${workflow.revision}\" \\\n          --workflow_commit \"${workflow.commitId}\"\n        \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "unfiltered_rds",
            "filtered_rds"
        ],
        "nb_inputs": 3,
        "outputs": [
            "meta"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.SCPCATOOLS_CONTAINER",
            "tag \"${meta.library_id}\"",
            "publishDir \"${params.results_dir}/${meta.project_id}/${meta.sample_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "spaceranger": {
        "name_process": "spaceranger",
        "string_process": "\nprocess spaceranger{\n  container params.SPACERANGER_CONTAINER\n  publishDir \"${meta.spaceranger_publish_dir}\"\n  tag \"${meta.run_id}-spatial\" \n  label 'cpus_12'\n  label 'mem_24'\n  label 'disk_big'\n  input:\n    tuple val(meta), path(fastq_dir), file(image_file)\n    path index\n  output:\n    tuple val(meta), path(out_id)\n  script:\n    out_id = \"${meta.run_id}-spatial\"\n    meta.cellranger_index = index.fileName\n    \"\"\"\n    spaceranger count \\\n      --id=${out_id} \\\n      --transcriptome=${index} \\\n      --fastqs=${fastq_dir} \\\n      --sample=${meta.cr_samples} \\\n      --localcores=${task.cpus} \\\n      --localmem=${task.memory.toGiga()} \\\n      --image=${image_file} \\\n      --slide=${meta.slide_serial_number} \\\n      --area=${meta.slide_section} \n\n    # remove bam and bai files\n    rm ${out_id}/outs/*.bam*\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    out_id = \"${meta.run_id}-spatial\"\n    meta.cellranger_index = index.fileName\n    \"\"\"\n    spaceranger count \\\n      --id=${out_id} \\\n      --transcriptome=${index} \\\n      --fastqs=${fastq_dir} \\\n      --sample=${meta.cr_samples} \\\n      --localcores=${task.cpus} \\\n      --localmem=${task.memory.toGiga()} \\\n      --image=${image_file} \\\n      --slide=${meta.slide_serial_number} \\\n      --area=${meta.slide_section} \n\n    # remove bam and bai files\n    rm ${out_id}/outs/*.bam*\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "image_file",
            "fastq_dir",
            "index"
        ],
        "nb_inputs": 4,
        "outputs": [
            "meta"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.SPACERANGER_CONTAINER",
            "publishDir \"${meta.spaceranger_publish_dir}\"",
            "tag \"${meta.run_id}-spatial\"",
            "label 'cpus_12'",
            "label 'mem_24'",
            "label 'disk_big'"
        ],
        "when": "",
        "stub": ""
    },
    "spaceranger_publish": {
        "name_process": "spaceranger_publish",
        "string_process": "\nprocess spaceranger_publish{\n  container params.SCPCATOOLS_CONTAINER\n  publishDir \"${params.results_dir}/${meta.project_id}/${meta.sample_id}\"\n  input:\n    tuple val(meta), path(spatial_out)\n    val index\n  output:\n    tuple val(meta), path(spatial_publish_dir), path(metadata_json)\n  script:\n    spatial_publish_dir = \"${meta.library_id}_spatial\"\n    meta.cellranger_index = file(index).name\n    metadata_json = \"${spatial_publish_dir}/${meta.library_id}_metadata.json\" \n    workflow_url = workflow.repository ?: workflow.manifest.homePage\n    \"\"\"\n    # make a new directory to hold only the outs file we want to publish \n    mkdir ${spatial_publish_dir}\n\n    # move over needed files to outs directory \n    mv ${spatial_out}/outs/filtered_feature_bc_matrix ${spatial_publish_dir}\n    mv ${spatial_out}/outs/raw_feature_bc_matrix ${spatial_publish_dir}\n    mv ${spatial_out}/outs/spatial ${spatial_publish_dir}\n    mv ${spatial_out}/outs/web_summary.html ${spatial_publish_dir}/${meta.library_id}_spaceranger_summary.html\n\n    generate_spaceranger_metadata.R \\\n      --library_id ${meta.library_id} \\\n      --sample_id ${meta.sample_id} \\\n      --unfiltered_barcodes_file \"${spatial_publish_dir}/raw_feature_bc_matrix/barcodes.tsv.gz\" \\\n      --filtered_barcodes_file \"${spatial_publish_dir}/filtered_feature_bc_matrix/barcodes.tsv.gz\" \\\n      --metrics_summary_file \"${spatial_out}/outs/metrics_summary.csv\" \\\n      --spaceranger_versions_file \"${spatial_out}/_versions\" \\\n      --metadata_json ${metadata_json} \\\n      --technology ${meta.technology} \\\n      --seq_unit ${meta.seq_unit} \\\n      --genome_assembly ${params.assembly} \\\n      --index_filename ${meta.cellranger_index} \\\n      --workflow_url \"${workflow_url}\" \\\n      --workflow_version \"${workflow.revision}\" \\\n      --workflow_commit \"${workflow.commitId}\"\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    spatial_publish_dir = \"${meta.library_id}_spatial\"\n    meta.cellranger_index = file(index).name\n    metadata_json = \"${spatial_publish_dir}/${meta.library_id}_metadata.json\" \n    workflow_url = workflow.repository ?: workflow.manifest.homePage\n    \"\"\"\n    # make a new directory to hold only the outs file we want to publish \n    mkdir ${spatial_publish_dir}\n\n    # move over needed files to outs directory \n    mv ${spatial_out}/outs/filtered_feature_bc_matrix ${spatial_publish_dir}\n    mv ${spatial_out}/outs/raw_feature_bc_matrix ${spatial_publish_dir}\n    mv ${spatial_out}/outs/spatial ${spatial_publish_dir}\n    mv ${spatial_out}/outs/web_summary.html ${spatial_publish_dir}/${meta.library_id}_spaceranger_summary.html\n\n    generate_spaceranger_metadata.R \\\n      --library_id ${meta.library_id} \\\n      --sample_id ${meta.sample_id} \\\n      --unfiltered_barcodes_file \"${spatial_publish_dir}/raw_feature_bc_matrix/barcodes.tsv.gz\" \\\n      --filtered_barcodes_file \"${spatial_publish_dir}/filtered_feature_bc_matrix/barcodes.tsv.gz\" \\\n      --metrics_summary_file \"${spatial_out}/outs/metrics_summary.csv\" \\\n      --spaceranger_versions_file \"${spatial_out}/_versions\" \\\n      --metadata_json ${metadata_json} \\\n      --technology ${meta.technology} \\\n      --seq_unit ${meta.seq_unit} \\\n      --genome_assembly ${params.assembly} \\\n      --index_filename ${meta.cellranger_index} \\\n      --workflow_url \"${workflow_url}\" \\\n      --workflow_version \"${workflow.revision}\" \\\n      --workflow_commit \"${workflow.commitId}\"\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "spatial_out",
            "index"
        ],
        "nb_inputs": 3,
        "outputs": [
            "meta"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexsLemonade__scpca-nf",
        "directive": [
            "container params.SCPCATOOLS_CONTAINER",
            "publishDir \"${params.results_dir}/${meta.project_id}/${meta.sample_id}\""
        ],
        "when": "",
        "stub": ""
    }
}
{
    "gen_varset_real": {
        "name_process": "gen_varset_real",
        "string_process": "\nprocess gen_varset_real {\n\n    tag { \"${varset}:${real_or_simulated}:${var_type}\" }\n\n    conda \"bedtools=2.29.2 bcftools=1.10 bedops=2.4.39\"\n\n    label 'xs'\n\n    publishDir \"${params.output}/varsets/vcf\", mode: 'copy', pattern: \"*vcf*\"\n\n    input:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(bam)\n\n    output:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              path(\"out.tsv\"), emit: \"to_mix_varset\"\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(\"out.tsv\"), emit: \"to_resample_varset\"\n\n    \"\"\"\n            # Generate simulated variant set\n            sc sample -n ${params.n_variants*2} --types=${var_type} ${params.vcf_file} | \\\n            bcftools filter --include '%FILTER=\"PASS\"' | \\\n            bcftools sort -O z > ${varset}_${var_type}.vcf.gz\n            bcftools index ${varset}_${var_type}.vcf.gz\n            \n            # Convert to \n            if [[ \"${var_type}\" == \"snps\" ]]; then\n                bcftools view ${varset}_${var_type}.vcf.gz | \\\n                bcftools query -f \"%CHROM\\t%POS\\t%POS\\t1.0\\t%ALT{0}\\n\" > out.tsv\n            elif [[ \"${var_type}\" == \"indels\" ]]; then\n                {\n                    # Insertions ~ VCF -> BED; 0-based; But VCF starts indels at -1\n                    bcftools view ${varset}_${var_type}.vcf.gz | \\\\\n                    vcf2bed --insertions - | \\\\\n                    cut -f 1,2,7 | \\\n                    awk '{ print \\$1, \\$2 + 1, \\$2 + 2, \"1.0\", \"INS\", substr(\\$3, 2); }'; \n                    \n                    # Deletions; Similar to above but \n                    bcftools view ${varset}_${var_type}.vcf.gz | \\\\\n                    vcf2bed --deletions - | \\\\\n                    cut -f 1,2,6 | \\\\\n                    awk '{ print \\$1, \\$2 + 1, \\$2 + length(\\$3), \"1.0\", \"DEL\", substr(\\$3, 2); }';\n                } > out.tsv\n            fi;\n    \"\"\"\n\n}",
        "nb_lignes_process": 53,
        "string_script": "\"\"\"\n            # Generate simulated variant set\n            sc sample -n ${params.n_variants*2} --types=${var_type} ${params.vcf_file} | \\\n            bcftools filter --include '%FILTER=\"PASS\"' | \\\n            bcftools sort -O z > ${varset}_${var_type}.vcf.gz\n            bcftools index ${varset}_${var_type}.vcf.gz\n            \n            # Convert to \n            if [[ \"${var_type}\" == \"snps\" ]]; then\n                bcftools view ${varset}_${var_type}.vcf.gz | \\\n                bcftools query -f \"%CHROM\\t%POS\\t%POS\\t1.0\\t%ALT{0}\\n\" > out.tsv\n            elif [[ \"${var_type}\" == \"indels\" ]]; then\n                {\n                    # Insertions ~ VCF -> BED; 0-based; But VCF starts indels at -1\n                    bcftools view ${varset}_${var_type}.vcf.gz | \\\\\n                    vcf2bed --insertions - | \\\\\n                    cut -f 1,2,7 | \\\n                    awk '{ print \\$1, \\$2 + 1, \\$2 + 2, \"1.0\", \"INS\", substr(\\$3, 2); }'; \n                    \n                    # Deletions; Similar to above but \n                    bcftools view ${varset}_${var_type}.vcf.gz | \\\\\n                    vcf2bed --deletions - | \\\\\n                    cut -f 1,2,6 | \\\\\n                    awk '{ print \\$1, \\$2 + 1, \\$2 + length(\\$3), \"1.0\", \"DEL\", substr(\\$3, 2); }';\n                } > out.tsv\n            fi;\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "ASC",
            "BCFtools",
            "BED",
            "Butler",
            "similaRpeak"
        ],
        "tools_url": [
            "https://bio.tools/asc",
            "https://bio.tools/bcftools",
            "https://bio.tools/bed",
            "https://bio.tools/butler",
            "https://bio.tools/similarpeak"
        ],
        "tools_dico": [
            {
                "name": "ASC",
                "uri": "https://bio.tools/asc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3695",
                                    "term": "Filtering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Empirical Bayes method to detect differential expression based on sequencing technology.",
                "homepage": "http://www.stat.brown.edu/Zwu/research.aspx"
            },
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "BED",
                "uri": "https://bio.tools/bed",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3345",
                            "term": "Data identity and mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3282",
                                    "term": "ID mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3282",
                                    "term": "Accession mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3282",
                                    "term": "Identifier mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Biological Entity Dictionary. Get and explore mapping between identifiers of biological entities. It provides a way to connect to a BED Neo4j database in which the relationships between the identifiers from different sources are recorded.",
                "homepage": "https://github.com/patzaw/BED"
            },
            {
                "name": "Butler",
                "uri": "https://bio.tools/butler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3760",
                                    "term": "Service management"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Collection of tools whose goal is to aid researchers in carrying out scientific analyses on a multitude of cloud computing platforms. It concerns itself with providing functionality in four broad areas: Provisioning; Configuration Management; Workflow Management; Operations Management.",
                "homepage": "https://github.com/llevar/butler"
            },
            {
                "name": "similaRpeak",
                "uri": "https://bio.tools/similarpeak",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3534",
                            "term": "Protein binding sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "ChIP-sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3169",
                            "term": "Chip sequencing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0420",
                                    "term": "Nucleic acids-binding site prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0420",
                                    "term": "Protein-nucleic acid binding prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0420",
                                    "term": "Protein-nucleic acid binding site detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0420",
                                    "term": "Protein-nucleic acid binding site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0420",
                                    "term": "Protein-nucleic acid binding detection"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0865",
                                "term": "Sequence similarity score"
                            }
                        ]
                    }
                ],
                "description": "This package calculates metrics which assign a level of similarity between ChIP-Seq profiles.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/similaRpeak.html"
            }
        ],
        "inputs": [
            "real_or_simulated",
            "var_type",
            "varset",
            "bam"
        ],
        "nb_inputs": 4,
        "outputs": [
            "real_or_simulated",
            "var_type",
            "real_or_simulated",
            "var_type",
            "varset"
        ],
        "nb_outputs": 5,
        "name_workflow": "AndersenLab__variant-simulations-nf",
        "directive": [
            "tag { \"${varset}:${real_or_simulated}:${var_type}\" }",
            "conda \"bedtools=2.29.2 bcftools=1.10 bedops=2.4.39\"",
            "label 'xs'",
            "publishDir \"${params.output}/varsets/vcf\", mode: 'copy', pattern: \"*vcf*\""
        ],
        "when": "",
        "stub": ""
    },
    "gen_varset_simulated": {
        "name_process": "gen_varset_simulated",
        "string_process": "\nprocess gen_varset_simulated {\n\n    tag { \"${varset}:${real_or_simulated}:${var_type}\" }\n\n    conda \"bedtools=2.29.2 bcftools=1.10 bedops=2.4.39\"\n\n    label 'xs'\n\n    input:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(bam)\n\n    output:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              path(\"out.tsv\"), emit: \"to_mix_varset\"\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(\"out.tsv\"), emit: \"to_resample_varset\"\n\n    \"\"\"\n        if [[ \"${var_type}\" == \"snps\" ]]; then\n            # Gen 2x vars and filter for non-ref positions\n            # This is an inefficient but easy way to do it (-;\n            paste  <(sc rand -n ${params.n_variants*2} ${params.reference}) \\\\\n                   <(sc rand -n ${params.n_variants*2} ${params.reference} | cut -f 4) | \\\n            awk '\\$4 != \\$5 { print \\$1, \\$2, \\$3, \"1.0\", \\$5 }' | \\\\\n            head -n ${params.n_variants} > out.tsv\n\n        elif [[ \"${var_type}\" == \"indels\" ]]; then\n            # Insertions ~ Generate random seq from elsewhere in the genome to insert\n            {\n                paste  <(sc rand -n ${params.n_variants/2} --dist=2-30 ${params.reference} | cut -f 1,2,4) \\\\\n                       <(sc rand -n ${params.n_variants/2} --dist=2-30 ${params.reference} | cut -f 4) | \\\\\n                    awk '{ print \\$1, \\$2, \\$2+1, \"1.0\", \"INS\", \\$4 }';\n                # Deletions\n                sc rand -n ${params.n_variants/2} --dist=2-30 ${params.reference} | \\\n                awk '{ print \\$1, \\$2, \\$2 + length(\\$4), \"1.0\", \"DEL\", \\$4; }';\n            } > out.tsv\n        fi;\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "\"\"\"\n        if [[ \"${var_type}\" == \"snps\" ]]; then\n            # Gen 2x vars and filter for non-ref positions\n            # This is an inefficient but easy way to do it (-;\n            paste  <(sc rand -n ${params.n_variants*2} ${params.reference}) \\\\\n                   <(sc rand -n ${params.n_variants*2} ${params.reference} | cut -f 4) | \\\n            awk '\\$4 != \\$5 { print \\$1, \\$2, \\$3, \"1.0\", \\$5 }' | \\\\\n            head -n ${params.n_variants} > out.tsv\n\n        elif [[ \"${var_type}\" == \"indels\" ]]; then\n            # Insertions ~ Generate random seq from elsewhere in the genome to insert\n            {\n                paste  <(sc rand -n ${params.n_variants/2} --dist=2-30 ${params.reference} | cut -f 1,2,4) \\\\\n                       <(sc rand -n ${params.n_variants/2} --dist=2-30 ${params.reference} | cut -f 4) | \\\\\n                    awk '{ print \\$1, \\$2, \\$2+1, \"1.0\", \"INS\", \\$4 }';\n                # Deletions\n                sc rand -n ${params.n_variants/2} --dist=2-30 ${params.reference} | \\\n                awk '{ print \\$1, \\$2, \\$2 + length(\\$4), \"1.0\", \"DEL\", \\$4; }';\n            } > out.tsv\n        fi;\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "ASC"
        ],
        "tools_url": [
            "https://bio.tools/asc"
        ],
        "tools_dico": [
            {
                "name": "ASC",
                "uri": "https://bio.tools/asc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3695",
                                    "term": "Filtering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Empirical Bayes method to detect differential expression based on sequencing technology.",
                "homepage": "http://www.stat.brown.edu/Zwu/research.aspx"
            }
        ],
        "inputs": [
            "real_or_simulated",
            "var_type",
            "varset",
            "bam"
        ],
        "nb_inputs": 4,
        "outputs": [
            "real_or_simulated",
            "var_type",
            "real_or_simulated",
            "var_type",
            "varset"
        ],
        "nb_outputs": 5,
        "name_workflow": "AndersenLab__variant-simulations-nf",
        "directive": [
            "tag { \"${varset}:${real_or_simulated}:${var_type}\" }",
            "conda \"bedtools=2.29.2 bcftools=1.10 bedops=2.4.39\"",
            "label 'xs'"
        ],
        "when": "",
        "stub": ""
    },
    "mix_varsets": {
        "name_process": "mix_varsets",
        "string_process": "\nprocess mix_varsets {\n      \n                                                                  \n                  \n      \n\n    tag { \"${real_or_simulated}+${var_type}\"}\n\n    label 'xs'\n\n    input:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              path(\"*.tsv\")\n    \n    output:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              path(\"shuffle_set.tsv\")\n        \n    \"\"\"\n        cat *.tsv | shuf > shuffle_set.tsv\n    \"\"\"\n    \n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n        cat *.tsv | shuf > shuffle_set.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "real_or_simulated",
            "var_type"
        ],
        "nb_inputs": 2,
        "outputs": [
            "real_or_simulated",
            "var_type"
        ],
        "nb_outputs": 2,
        "name_workflow": "AndersenLab__variant-simulations-nf",
        "directive": [
            "tag { \"${real_or_simulated}+${var_type}\"}",
            "label 'xs'"
        ],
        "when": "",
        "stub": ""
    },
    "resample_varset": {
        "name_process": "resample_varset",
        "string_process": "\nprocess resample_varset {\n      \n                                                            \n                                                                     \n                                      \n      \n\n    label 'xs'\n\n    input:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(\"varset.in.tsv\"), \\\n              path(\"shuffle_set.tsv\")\n\n    output:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(\"varset.tsv\")\n\n    script:\n                                          \n        n_resample = Math.abs(new Random().nextInt() % params.n_variants) + 1\n    \"\"\"\n        {\n            head -n ${n_resample} shuffle_set.tsv;\n            shuf varset.in.tsv;\n        } | head -n ${params.n_variants} | \\\\\n            sort -u -k 1,1 -k 2,2n | tr ' ' '\\t' > varset.tsv\n    \"\"\"\n\n}",
        "nb_lignes_process": 33,
        "string_script": "        n_resample = Math.abs(new Random().nextInt() % params.n_variants) + 1\n    \"\"\"\n        {\n            head -n ${n_resample} shuffle_set.tsv;\n            shuf varset.in.tsv;\n        } | head -n ${params.n_variants} | \\\\\n            sort -u -k 1,1 -k 2,2n | tr ' ' '\\t' > varset.tsv\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "real_or_simulated",
            "var_type",
            "varset"
        ],
        "nb_inputs": 3,
        "outputs": [
            "real_or_simulated",
            "var_type",
            "varset"
        ],
        "nb_outputs": 3,
        "name_workflow": "AndersenLab__variant-simulations-nf",
        "directive": [
            "label 'xs'"
        ],
        "when": "",
        "stub": ""
    },
    "process_varset": {
        "name_process": "process_varset",
        "string_process": "\nprocess process_varset {\n\n    tag { \"${varset}:${real_or_simulated}:${var_type}\" }\n\n    publishDir \"${params.output}/varsets\", mode: 'copy', pattern: \"*.tsv\"\n\n    label 'xs'\n\n    input:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(\"varset.tsv\")\n\n    output:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(\"${varset}_${var_type}_${real_or_simulated}.tsv\"), emit: \"to_bamsurgeon\"\n        path \"varset_for_analysis.combine\", emit: \"to_combine\"\n\n    \"\"\"\n        if [[ \"${var_type}\" == \"snps\" ]]; then\n            cut -f 1-5 -d '\\t' varset.tsv > ${varset}_${var_type}_${real_or_simulated}.tsv\n        elif [[ \"${var_type}\" == \"indels\" ]]; then\n            cut -f 1-6 -d '\\t' varset.tsv > ${varset}_${var_type}_${real_or_simulated}.tsv\n        fi;\n\n        # Add a header to varset for downstream analysis\n        {\n            echo -e \"CHROM\\tPOS\\tVAR\\tstart\\tstop\\tsnp_ins_del\\tspike_sequence\\tvarset\\treal_or_simulated\\tvar_type\";\n                awk -v OFS=\"\\t\" '{ if (\"${var_type}\" == \"snps\") { vargroup=\"SNP\"; allele=\\$5 } else { vargroup=\\$5; allele=\\$6 };\n                       print \\$1, \\$2, allele, \\$2, \\$3, \\$4, vargroup, \"${varset}\", \"${real_or_simulated}\", \"${var_type}\" }' varset.tsv\n        } > varset_for_analysis.combine\n\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "\"\"\"\n        if [[ \"${var_type}\" == \"snps\" ]]; then\n            cut -f 1-5 -d '\\t' varset.tsv > ${varset}_${var_type}_${real_or_simulated}.tsv\n        elif [[ \"${var_type}\" == \"indels\" ]]; then\n            cut -f 1-6 -d '\\t' varset.tsv > ${varset}_${var_type}_${real_or_simulated}.tsv\n        fi;\n\n        # Add a header to varset for downstream analysis\n        {\n            echo -e \"CHROM\\tPOS\\tVAR\\tstart\\tstop\\tsnp_ins_del\\tspike_sequence\\tvarset\\treal_or_simulated\\tvar_type\";\n                awk -v OFS=\"\\t\" '{ if (\"${var_type}\" == \"snps\") { vargroup=\"SNP\"; allele=\\$5 } else { vargroup=\\$5; allele=\\$6 };\n                       print \\$1, \\$2, allele, \\$2, \\$3, \\$4, vargroup, \"${varset}\", \"${real_or_simulated}\", \"${var_type}\" }' varset.tsv\n        } > varset_for_analysis.combine\n\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "real_or_simulated",
            "var_type",
            "varset"
        ],
        "nb_inputs": 3,
        "outputs": [
            "real_or_simulated",
            "var_type",
            "varset"
        ],
        "nb_outputs": 3,
        "name_workflow": "AndersenLab__variant-simulations-nf",
        "directive": [
            "tag { \"${varset}:${real_or_simulated}:${var_type}\" }",
            "publishDir \"${params.output}/varsets\", mode: 'copy', pattern: \"*.tsv\"",
            "label 'xs'"
        ],
        "when": "",
        "stub": ""
    },
    "deepvariant": {
        "name_process": "deepvariant",
        "string_process": "\nprocess deepvariant {\n\n    tag { \"${fname}\" }\n    container \"google/deepvariant:0.10.0\"\n    publishDir \"callset/deepvariant\", mode: 'copy'\n    label 'xl'\n    scratch false\n    maxRetries 3\n    errorStrategy 'retry'\n\n    input:\n        tuple val(fname), path(bam), path(bai)\n\n    output:\n        tuple path(\"${fname}.deepvariant.vcf.gz\"), path(\"${fname}.deepvariant.vcf.gz.tbi\")\n        tuple path(\"${fname}.deepvariant.g.vcf.gz\"), path(\"${fname}.deepvariant.g.vcf.gz.tbi\"), emit: gvcf\n\n    \"\"\"\n    /opt/deepvariant/bin/run_deepvariant \\\\\n        --model_type=WGS \\\\\n        --ref=${params.reference} \\\\\n        --reads=${bam} \\\\\n        --output_vcf=${fname}.deepvariant.vcf.gz \\\\\n        --output_gvcf=${fname}.deepvariant.g.vcf.gz \\\\\n        --num_shards=${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n    /opt/deepvariant/bin/run_deepvariant \\\\\n        --model_type=WGS \\\\\n        --ref=${params.reference} \\\\\n        --reads=${bam} \\\\\n        --output_vcf=${fname}.deepvariant.vcf.gz \\\\\n        --output_gvcf=${fname}.deepvariant.g.vcf.gz \\\\\n        --num_shards=${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fname",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AndersenLab__variant-simulations-nf",
        "directive": [
            "tag { \"${fname}\" }",
            "container \"google/deepvariant:0.10.0\"",
            "publishDir \"callset/deepvariant\", mode: 'copy'",
            "label 'xl'",
            "scratch false",
            "maxRetries 3",
            "errorStrategy 'retry'"
        ],
        "when": "",
        "stub": ""
    },
    "bamsurgeon_spike_snps": {
        "name_process": "bamsurgeon_spike_snps",
        "string_process": "\nprocess bamsurgeon_spike_snps {\n\n    publishDir \"${params.output}/bam\", mode: 'copy', pattern: \"*bam*\"\n    publishDir \"${params.output}/truth\", mode: 'copy', pattern: \"*vcf*\"\n\n    tag { \"${varset}:${real_or_simulated}:${var_type}\" }\n\n    container \"andersenlab/bamsurgeon\"\n\n    label 'md'\n\n    input:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(\"varfile.tsv\"), \\\n              path(\"in.bam\"), \\\n              path(\"in.bam.bai\")\n\n    output:\n        tuple path(\"${varset}_${var_type}_${real_or_simulated}.bam\"), \\\n              path(\"${varset}_${var_type}_${real_or_simulated}.bam.bai\")\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(\"${varset}_${var_type}_${real_or_simulated}.truth.vcf.gz\"), \\\n              path(\"${varset}_${var_type}_${real_or_simulated}.truth.vcf.gz.csi\"), emit: 'truth_vcf'\n\n    \"\"\"\n    addsnv.py \\\\\n        --reference ${params.reference} \\\\\n        --varfile varfile.tsv \\\\\n        --tmpdir . \\\\\n        --procs ${task.cpus} \\\\\n        --maxdepth 2000 \\\\\n        --mindepth 1 \\\\\n        --tagreads \\\\\n        --force \\\\\n        -m 1.0 \\\\\n        --bamfile in.bam \\\\\n        --aligner mem \\\n        --picardjar ${params.picard_path} \\\n        --outbam out.bam\n\n    # Fix up the truth set\n    bcftools reheader --fai ${params.reference}.fai out.addsnv.varfile.vcf | \\\\\n    bcftools sort -O z > ${varset}_${var_type}_${real_or_simulated}.truth.vcf.gz\n    bcftools index ${varset}_${var_type}_${real_or_simulated}.truth.vcf.gz\n\n    samtools sort --threads ${task.cpus} -O BAM out.bam > ${varset}_${var_type}_${real_or_simulated}.bam\n    samtools index -@ ${task.cpus} ${varset}_${var_type}_${real_or_simulated}.bam\n\n    # Check that bam aligned properly\n    samtools quickcheck ${varset}_${var_type}_${real_or_simulated}.bam\n    \"\"\"\n\n}",
        "nb_lignes_process": 56,
        "string_script": "\"\"\"\n    addsnv.py \\\\\n        --reference ${params.reference} \\\\\n        --varfile varfile.tsv \\\\\n        --tmpdir . \\\\\n        --procs ${task.cpus} \\\\\n        --maxdepth 2000 \\\\\n        --mindepth 1 \\\\\n        --tagreads \\\\\n        --force \\\\\n        -m 1.0 \\\\\n        --bamfile in.bam \\\\\n        --aligner mem \\\n        --picardjar ${params.picard_path} \\\n        --outbam out.bam\n\n    # Fix up the truth set\n    bcftools reheader --fai ${params.reference}.fai out.addsnv.varfile.vcf | \\\\\n    bcftools sort -O z > ${varset}_${var_type}_${real_or_simulated}.truth.vcf.gz\n    bcftools index ${varset}_${var_type}_${real_or_simulated}.truth.vcf.gz\n\n    samtools sort --threads ${task.cpus} -O BAM out.bam > ${varset}_${var_type}_${real_or_simulated}.bam\n    samtools index -@ ${task.cpus} ${varset}_${var_type}_${real_or_simulated}.bam\n\n    # Check that bam aligned properly\n    samtools quickcheck ${varset}_${var_type}_${real_or_simulated}.bam\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "real_or_simulated",
            "var_type",
            "varset"
        ],
        "nb_inputs": 3,
        "outputs": [
            "real_or_simulated",
            "var_type",
            "varset"
        ],
        "nb_outputs": 3,
        "name_workflow": "AndersenLab__variant-simulations-nf",
        "directive": [
            "publishDir \"${params.output}/bam\", mode: 'copy', pattern: \"*bam*\"",
            "publishDir \"${params.output}/truth\", mode: 'copy', pattern: \"*vcf*\"",
            "tag { \"${varset}:${real_or_simulated}:${var_type}\" }",
            "container \"andersenlab/bamsurgeon\"",
            "label 'md'"
        ],
        "when": "",
        "stub": ""
    },
    "bamsurgeon_spike_indels": {
        "name_process": "bamsurgeon_spike_indels",
        "string_process": "\nprocess bamsurgeon_spike_indels {\n\n    publishDir \"${params.output}/bam\", mode: 'copy', pattern: \"*bam*\"\n    publishDir \"${params.output}/truth\", mode: 'copy', pattern: \"*vcf*\"\n\n    tag { \"${varset}:${real_or_simulated}:${var_type}\" }\n    \n    container \"andersenlab/bamsurgeon\"\n\n    label 'md'\n\n    input:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(\"varfile.tsv\"), \\\n              path(\"in.bam\"), \\\n              path(\"in.bam.bai\")\n\n    output:\n        tuple path(\"${varset}_${var_type}_${real_or_simulated}.bam\"), \\\n              path(\"${varset}_${var_type}_${real_or_simulated}.bam.bai\")\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(\"${varset}_${var_type}_${real_or_simulated}.truth.vcf.gz\"), \\\n              path(\"${varset}_${var_type}_${real_or_simulated}.truth.vcf.gz.csi\"), emit: 'truth_vcf'\n\n    \"\"\"\n    addindel.py \\\\\n        --varfile varfile.tsv \\\\\n        --reference ${params.reference} \\\\\n        --tmpdir . \\\\\n        --procs ${task.cpus} \\\\\n        --maxdepth 2000 \\\\\n        --mindepth 1 \\\\\n        --tagreads \\\\\n        --force \\\\\n        -m 1.0 \\\\\n        --bamfile in.bam \\\\\n        --aligner mem \\\n        --picardjar ${params.picard_path} \\\n        --outbam out.bam\n\n    # Fix up the truth set\n    bcftools reheader --fai ${params.reference}.fai out.addindel.varfile.vcf | \\\\\n    bcftools sort -O z > ${varset}_${var_type}_${real_or_simulated}.truth.vcf.gz\n    bcftools index ${varset}_${var_type}_${real_or_simulated}.truth.vcf.gz\n\n    samtools sort --threads ${task.cpus} -O BAM out.bam > ${varset}_${var_type}_${real_or_simulated}.bam\n    samtools index -@ ${task.cpus} ${varset}_${var_type}_${real_or_simulated}.bam\n    \n    # Check that bam aligned properly\n    samtools quickcheck ${varset}_${var_type}_${real_or_simulated}.bam\n    samtools index ${varset}_${var_type}_${real_or_simulated}.bam\n    \"\"\"\n\n}",
        "nb_lignes_process": 57,
        "string_script": "\"\"\"\n    addindel.py \\\\\n        --varfile varfile.tsv \\\\\n        --reference ${params.reference} \\\\\n        --tmpdir . \\\\\n        --procs ${task.cpus} \\\\\n        --maxdepth 2000 \\\\\n        --mindepth 1 \\\\\n        --tagreads \\\\\n        --force \\\\\n        -m 1.0 \\\\\n        --bamfile in.bam \\\\\n        --aligner mem \\\n        --picardjar ${params.picard_path} \\\n        --outbam out.bam\n\n    # Fix up the truth set\n    bcftools reheader --fai ${params.reference}.fai out.addindel.varfile.vcf | \\\\\n    bcftools sort -O z > ${varset}_${var_type}_${real_or_simulated}.truth.vcf.gz\n    bcftools index ${varset}_${var_type}_${real_or_simulated}.truth.vcf.gz\n\n    samtools sort --threads ${task.cpus} -O BAM out.bam > ${varset}_${var_type}_${real_or_simulated}.bam\n    samtools index -@ ${task.cpus} ${varset}_${var_type}_${real_or_simulated}.bam\n    \n    # Check that bam aligned properly\n    samtools quickcheck ${varset}_${var_type}_${real_or_simulated}.bam\n    samtools index ${varset}_${var_type}_${real_or_simulated}.bam\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "real_or_simulated",
            "var_type",
            "varset"
        ],
        "nb_inputs": 3,
        "outputs": [
            "real_or_simulated",
            "var_type",
            "varset"
        ],
        "nb_outputs": 3,
        "name_workflow": "AndersenLab__variant-simulations-nf",
        "directive": [
            "publishDir \"${params.output}/bam\", mode: 'copy', pattern: \"*bam*\"",
            "publishDir \"${params.output}/truth\", mode: 'copy', pattern: \"*vcf*\"",
            "tag { \"${varset}:${real_or_simulated}:${var_type}\" }",
            "container \"andersenlab/bamsurgeon\"",
            "label 'md'"
        ],
        "when": "",
        "stub": ""
    },
    "process_truth_sets": {
        "name_process": "process_truth_sets",
        "string_process": "\nprocess process_truth_sets {\n\n    tag { \"${varset}:${real_or_simulated}:${var_type}\" }\n\n    label 'xs'\n\n    input:\n        tuple val(real_or_simulated), \\\n              val(var_type), \\\n              val(varset), \\\n              path(\"truth.vcf.gz\"), \\\n              path(\"truth.vcf.gz.csi\")\n\n    output:\n        path(\"truth_set.tsv\")\n\n    shell:\n    '''\n        {\n            echo -e \"CHROM\\tPOS\\tREF\\tALT\\treal_or_simulated\\tvar_type\\tvarset\";\n            bcftools query -f '%CHROM\\\\t%POS\\\\t%REF\\\\t%ALT\\\\n'  truth.vcf.gz | \\\\\n            awk -v OFS=\"\\\\t\" '{ print $0, \"!{real_or_simulated}\", \"!{var_type}\", \"!{varset}\" }'\n        } > truth_set.tsv\n    '''\n\n}",
        "nb_lignes_process": 25,
        "string_script": "    '''\n        {\n            echo -e \"CHROM\\tPOS\\tREF\\tALT\\treal_or_simulated\\tvar_type\\tvarset\";\n            bcftools query -f '%CHROM\\\\t%POS\\\\t%REF\\\\t%ALT\\\\n'  truth.vcf.gz | \\\\\n            awk -v OFS=\"\\\\t\" '{ print $0, \"!{real_or_simulated}\", \"!{var_type}\", \"!{varset}\" }'\n        } > truth_set.tsv\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "real_or_simulated",
            "var_type",
            "varset"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AndersenLab__variant-simulations-nf",
        "directive": [
            "tag { \"${varset}:${real_or_simulated}:${var_type}\" }",
            "label 'xs'"
        ],
        "when": "",
        "stub": ""
    }
}
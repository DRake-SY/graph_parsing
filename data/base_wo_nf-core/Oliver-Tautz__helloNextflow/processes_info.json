{
    "generateIds": {
        "name_process": "generateIds",
        "string_process": "\nprocess generateIds {\n\n    script:\n    \"\"\"\n    /home/olli/gits/helloNextflow/generate_ids.py\n    \"\"\"\n\n}",
        "nb_lignes_process": 7,
        "string_script": "    \"\"\"\n    /home/olli/gits/helloNextflow/generate_ids.py\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Oliver-Tautz__helloNextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "generateIdsTemp": {
        "name_process": "generateIdsTemp",
        "string_process": "\nprocess generateIdsTemp {\n\n    script:\n    template 'generate_ids.py'\n\n\n}",
        "nb_lignes_process": 6,
        "string_script": "    template 'generate_ids.py'",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Oliver-Tautz__helloNextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "generateIdsDirect": {
        "name_process": "generateIdsDirect",
        "string_process": "\nprocess generateIdsDirect {\n\n    script:\n\n    \"\"\"\n\n    #!/usr/bin/env python \n    import csv\n    import numpy as np\n    from sys import argv\n    from functools import reduce\n    \n    USAGE_MSG = \"usage generate_ids.py id_no id_len\"\n    \n    \n    if len(argv) > 2:\n        try:\n            ids_no = int(argv[1])\n            ids_len = int(argv[2])\n        except:\n            print(USAGE_MSG)\n            exit(-1)\n    else:\n        print('using std parameters')\n        ids_no = 1000\n        ids_len = 100\n    \n    ids = np.random.randint(0,10,size = (ids_no,ids_len))\n    ids = np.array([int(''.join([str(y) for y in list(x)])) for x in ids])\n    np.savetxt('ids.txt',ids,fmt='%d')\n\n\n\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 36,
        "string_script": "    \"\"\"\n\n    #!/usr/bin/env python \n    import csv\n    import numpy as np\n    from sys import argv\n    from functools import reduce\n    \n    USAGE_MSG = \"usage generate_ids.py id_no id_len\"\n    \n    \n    if len(argv) > 2:\n        try:\n            ids_no = int(argv[1])\n            ids_len = int(argv[2])\n        except:\n            print(USAGE_MSG)\n            exit(-1)\n    else:\n        print('using std parameters')\n        ids_no = 1000\n        ids_len = 100\n    \n    ids = np.random.randint(0,10,size = (ids_no,ids_len))\n    ids = np.array([int(''.join([str(y) for y in list(x)])) for x in ids])\n    np.savetxt('ids.txt',ids,fmt='%d')\n\n\n\n\n    \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Oliver-Tautz__helloNextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "printSomething": {
        "name_process": "printSomething",
        "string_process": "\nprocess printSomething {\n\n    input :\n    val x\n\n    exec:\n    println \"Hello Mr. $x\"\n\n}",
        "nb_lignes_process": 8,
        "string_script": "    println \"Hello Mr. $x\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "x"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Oliver-Tautz__helloNextflow",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
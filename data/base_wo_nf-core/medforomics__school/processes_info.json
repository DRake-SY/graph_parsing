{
    "dtrim": {
        "name_process": "dtrim",
        "string_process": "\nprocess dtrim {\n  queue '32GB,super'\n  label 'trim'\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'\n  input:\n  set caseid,sampleid, file(fqs) from reads\n  set caseid,tid,nid from ids\n  output:\n  set caseid,tid,nid,sampleid,file(\"${sampleid}.trim.R1.fastq.gz\"),file(\"${sampleid}.trim.R2.fastq.gz\"),file(\"${sampleid}.trimreport.txt\") into treads\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/preproc_fastq/trimgalore.sh -f -p ${sampleid} ${fqs}\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/preproc_fastq/trimgalore.sh -f -p ${sampleid} ${fqs}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads",
            "ids"
        ],
        "nb_inputs": 2,
        "outputs": [
            "treads"
        ],
        "nb_outputs": 1,
        "name_workflow": "medforomics__school",
        "directive": [
            "queue '32GB,super'",
            "label 'trim'",
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "dalign": {
        "name_process": "dalign",
        "string_process": "\nprocess dalign {\n  queue '32GB,super'\n  label 'dnaalign'\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'\n  input:\n  set caseid,tid,nid,sampleid,file(fq1),file(fq2),file(trimout) from treads\n  output:\n  set caseid,sampleid,file(\"${sampleid}.bam\") into virusalign\n  set caseid,sampleid,file(\"${sampleid}.bam\"),file(\"${sampleid}.bam.bai\") into cnvbam\n  set caseid,sampleid, file(\"${sampleid}.bam\"),file(\"${sampleid}.bam.bai\"),file(trimout) into qcbam\n  set caseid,tid,nid,file(\"${sampleid}.bam\"), file(\"${sampleid}.bam.bai\") into oribam\n  set caseid,tid,nid,sampleid,file(\"${sampleid}.bam\"),file(\"${sampleid}.bam.bai\") into align\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/dnaseqalign.sh -r $index_path -p $sampleid -x ${fq1} -y ${fq2} $alignopts\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/dnaseqalign.sh -r $index_path -p $sampleid -x ${fq1} -y ${fq2} $alignopts\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "treads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "virusalign",
            "cnvbam",
            "qcbam",
            "oribam",
            "align"
        ],
        "nb_outputs": 5,
        "name_workflow": "medforomics__school",
        "directive": [
            "queue '32GB,super'",
            "label 'dnaalign'",
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "valign": {
        "name_process": "valign",
        "string_process": "\nprocess valign {\n  queue '32GB,super'\n  label 'dnaalign'\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'\n\n  input:\n  set caseid,sampleid, file(sbam) from virusalign\n  output:\n  file(\"${sampleid}.viral.seqstats.txt\") into viralseqstats\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/virusalign.sh -b ${sampleid}.bam -p ${sampleid} -r $virus_index_path -f\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/virusalign.sh -b ${sampleid}.bam -p ${sampleid} -r $virus_index_path -f\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "virusalign"
        ],
        "nb_inputs": 1,
        "outputs": [
            "viralseqstats"
        ],
        "nb_outputs": 1,
        "name_workflow": "medforomics__school",
        "directive": [
            "queue '32GB,super'",
            "label 'dnaalign'",
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "markdups": {
        "name_process": "markdups",
        "string_process": "\nprocess markdups {\n  errorStrategy 'ignore'\n  label 'dnaalign'\n  queue '32GB,super'\n  publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'\n\n  input:\n  set caseid,tid,nid,sampleid, file(sbam) from mdupbam\n  output:\n  set caseid,tid,nid,sampleid, file(\"${sampleid}.consensus.bam\"),file(\"${sampleid}.consensus.bam.bai\") into togatkbam\n  set caseid,tid,nid,file(\"${sampleid}.consensus.bam\"),file(\"${sampleid}.consensus.bam.bai\") into consbam\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/markdups.sh -a $params.markdups -b $sbam -p $sampleid -r $index_path\n\n  mv ${sampleid}.dedup.bam ${sampleid}.consensus.bam\n  mv ${sampleid}.dedup.bam.bai ${sampleid}.consensus.bam.bai\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/markdups.sh -a $params.markdups -b $sbam -p $sampleid -r $index_path\n\n  mv ${sampleid}.dedup.bam ${sampleid}.consensus.bam\n  mv ${sampleid}.dedup.bam.bai ${sampleid}.consensus.bam.bai\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mdupbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "togatkbam",
            "consbam"
        ],
        "nb_outputs": 2,
        "name_workflow": "medforomics__school",
        "directive": [
            "errorStrategy 'ignore'",
            "label 'dnaalign'",
            "queue '32GB,super'",
            "publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "dna_bamqc": {
        "name_process": "dna_bamqc",
        "string_process": "\nprocess dna_bamqc {\n  errorStrategy 'ignore'\n  label 'profiling_qc'\n  publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'\n  queue '128GB,256GB,256GBv1'\n  input:\n  set caseid,sampleid, file(gbam),file(idx),file(trimreport) from qcbam\n  output:\n  file(\"*fastqc*\") into fastqc\n  file(\"${sampleid}*txt\") into dalignstats\t\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/bamqc.sh -c $capturebed -n dna -r $index_path -b ${gbam} -p $sampleid -e ${params.version} \n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/bamqc.sh -c $capturebed -n dna -r $index_path -b ${gbam} -p $sampleid -e ${params.version} \n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qcbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc",
            "dalignstats"
        ],
        "nb_outputs": 2,
        "name_workflow": "medforomics__school",
        "directive": [
            "errorStrategy 'ignore'",
            "label 'profiling_qc'",
            "publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'",
            "queue '128GB,256GB,256GBv1'"
        ],
        "when": "",
        "stub": ""
    },
    "cnv": {
        "name_process": "cnv",
        "string_process": "\nprocess cnv {\n  executor 'local'\n  label 'structuralvariant'\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'\n  input:\n  set caseid,sampleid,file(sbam),file(sidx) from cnvbam\n\n  output:\n  file(\"${sampleid}.call.cns\") into cns\n  file(\"${sampleid}.cns\") into cnsori\n  file(\"${sampleid}.cnr\") into cnr\n  file(\"${sampleid}.answerplot*\") into cnvansplot\n  file(\"${sampleid}.*txt\") into cnvtxt\n  file(\"${sampleid}.cnv*pdf\") into cnvpdf\n  when:\n  skipCNV == false\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/cnvkit.sh -r $index_path -b $sbam -p $sampleid -d $capturedir\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/variants/cnvkit.sh -r $index_path -b $sbam -p $sampleid -d $capturedir\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cnvbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cns",
            "cnsori",
            "cnr",
            "cnvansplot",
            "cnvtxt",
            "cnvpdf"
        ],
        "nb_outputs": 6,
        "name_workflow": "medforomics__school",
        "directive": [
            "executor 'local'",
            "label 'structuralvariant'",
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'"
        ],
        "when": "skipCNV == false",
        "stub": ""
    },
    "itdseek": {
        "name_process": "itdseek",
        "string_process": "\nprocess itdseek {\n  executor 'local'\n  label 'structuralvariant'\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'\n  input:\n  set caseid,sampleid,file(sbam),file(sidx) from itdbam\n\n  output:\n  file(\"${sampleid}.itdseek_tandemdup.vcf.gz\") into itdseekvcf\n\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/svcalling.sh -b $sbam -r $index_path -p $sampleid -l ${index_path}/itd_genes.bed -a itdseek -g $params.snpeff_vers -f\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/variants/svcalling.sh -b $sbam -r $index_path -p $sampleid -l ${index_path}/itd_genes.bed -a itdseek -g $params.snpeff_vers -f\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "itdbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "itdseekvcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "medforomics__school",
        "directive": [
            "executor 'local'",
            "label 'structuralvariant'",
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "gatkbam": {
        "name_process": "gatkbam",
        "string_process": "\nprocess gatkbam {\n  queue '32GB,super'\n  label 'variantcalling'\n  publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'\n\n  input:\n  set caseid,tid,nid,sampleid, file(sbam),file(idx) from togatkbam\n  output:\n  set caseid,tid,nid,file(\"${sampleid}.final.bam\"),file(\"${sampleid}.final.bam.bai\") into gtxbam\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/gatkrunner.sh -a gatkbam -b $sbam -r $index_path -p $sampleid\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/variants/gatkrunner.sh -a gatkbam -b $sbam -r $index_path -p $sampleid\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "togatkbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "gtxbam"
        ],
        "nb_outputs": 1,
        "name_workflow": "medforomics__school",
        "directive": [
            "queue '32GB,super'",
            "label 'variantcalling'",
            "publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "msi": {
        "name_process": "msi",
        "string_process": "\nprocess msi {\n  executor 'local'\n  label 'profiling_qc'\n  publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'\n  errorStrategy 'ignore'\n  input:\n  set caseid,tid,nid,file(ssbam),file(ssidx) from msibam\n  output:\n  file(\"${caseid}*\") into msiout\n  script:\n  if ( somatic[caseid] == true )\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/msisensor.sh -r ${index_path} -p $caseid -b ${tid}.bam -n ${nid}.bam -c $capturebed\n  \"\"\"\n  else\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/msisensor.sh -r ${index_path} -p $caseid -b ${tid}.bam -c $capturebed\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  if ( somatic[caseid] == true )\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/msisensor.sh -r ${index_path} -p $caseid -b ${tid}.bam -n ${nid}.bam -c $capturebed\n  \"\"\"\n  else\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/msisensor.sh -r ${index_path} -p $caseid -b ${tid}.bam -c $capturebed\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "msibam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "msiout"
        ],
        "nb_outputs": 1,
        "name_workflow": "medforomics__school",
        "directive": [
            "executor 'local'",
            "label 'profiling_qc'",
            "publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'",
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "checkmates": {
        "name_process": "checkmates",
        "string_process": "\nprocess checkmates {\n   queue '32GB,super'\n  label 'profiling_qc'\n  publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'\n  errorStrategy 'ignore'\n  input:\n  set caseid,tid,nid,file(bam),file(bidx) from checkbams\n  output:\n  file(\"${caseid}*\") into checkmateout\n  when: somatic[caseid] == true\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/checkmate.sh -r ${index_path} -p ${caseid} -c ${index_path}/NGSCheckMate.bed -f\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/variants/checkmate.sh -r ${index_path} -p ${caseid} -c ${index_path}/NGSCheckMate.bed -f\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "checkbams"
        ],
        "nb_inputs": 1,
        "outputs": [
            "checkmateout"
        ],
        "nb_outputs": 1,
        "name_workflow": "medforomics__school",
        "directive": [
            "queue '32GB,super'",
            "label 'profiling_qc'",
            "publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'",
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "pindel": {
        "name_process": "pindel",
        "string_process": "\nprocess pindel {\n  errorStrategy 'ignore'\n  label 'structuralvariant'\n  queue '128GB,256GB,256GBv1'\n  publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'\n  input:\n  set caseid,tid,nid,file(ssbam),file(ssidx) from pindelbam\n  output:\n  file(\"${caseid}.pindel_tandemdup.vcf.gz\") into tdvcf\n  set caseid,file(\"${caseid}.pindel.vcf.gz\") into pindelvcf\n  file(\"${caseid}.pindel.genefusion.txt\") into pindelgf\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/svcalling.sh -r $index_path -p $caseid -l ${index_path}/itd_genes.bed -a pindel -c ${index_path}/goal_core497.bed -g $params.snpeff_vers -f\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/variants/svcalling.sh -r $index_path -p $caseid -l ${index_path}/itd_genes.bed -a pindel -c ${index_path}/goal_core497.bed -g $params.snpeff_vers -f\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pindelbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tdvcf",
            "pindelvcf",
            "pindelgf"
        ],
        "nb_outputs": 3,
        "name_workflow": "medforomics__school",
        "directive": [
            "errorStrategy 'ignore'",
            "label 'structuralvariant'",
            "queue '128GB,256GB,256GBv1'",
            "publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "sv": {
        "name_process": "sv",
        "string_process": "\nprocess sv {\n  queue '32GB,super'\n  label 'structuralvariant'\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'\n\n  input:\n  set caseid,tid,nid,file(ssbam),file(ssidx) from svbam\n  each algo from svalgo\n  output:\n  set caseid,file(\"${caseid}.${algo}.vcf.gz\") into svvcf\n  set caseid,file(\"${caseid}.${algo}.sv.vcf.gz\") optional true into svsv\n  file(\"${caseid}.${algo}.genefusion.txt\") into svgf\n\n  script:\t\t\t\t       \n  if ( somatic[caseid] == true ) \n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/svcalling.sh -r $index_path -x ${tid} -y ${nid} -b ${tid}.bam -n ${nid}.bam -p $caseid -a ${algo} -g $params.snpeff_vers -f \n  \"\"\"\n  else \n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/svcalling.sh -r $index_path -b ${tid}.bam -p $caseid -a ${algo} -g $params.snpeff_vers -f\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  if ( somatic[caseid] == true ) \n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/svcalling.sh -r $index_path -x ${tid} -y ${nid} -b ${tid}.bam -n ${nid}.bam -p $caseid -a ${algo} -g $params.snpeff_vers -f \n  \"\"\"\n  else \n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/svcalling.sh -r $index_path -b ${tid}.bam -p $caseid -a ${algo} -g $params.snpeff_vers -f\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "svbam",
            "svalgo"
        ],
        "nb_inputs": 2,
        "outputs": [
            "svvcf",
            "svsv",
            "svgf"
        ],
        "nb_outputs": 3,
        "name_workflow": "medforomics__school",
        "directive": [
            "queue '32GB,super'",
            "label 'structuralvariant'",
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mutect": {
        "name_process": "mutect",
        "string_process": "\nprocess mutect {\n  queue '128GB,256GB,256GBv1'\n  label 'variantcalling'\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'\n\n  input:\n  set caseid,tid,nid,file(ssbam),file(ssidx) from mutectbam\n  output:\n  set caseid,file(\"${caseid}.mutect.vcf.gz\") into mutectvcf\n  set caseid,file(\"${caseid}.mutect.ori.vcf.gz\") into mutectori\n  script:\n  if ( somatic[caseid] == true ) \n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/somatic_vc.sh $ponopt -r $index_path -p $caseid -x $tid -y $nid -t ${tid}.final.bam -n ${nid}.final.bam -b $capturebed -a mutect\n  bash ${repoDir}/process_scripts/variants/uni_norm_annot.sh -g $params.snpeff_vers -r $index_path -p ${caseid}.mutect -v ${caseid}.mutect.vcf.gz\n  \"\"\"\n  else\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/germline_vc.sh $ponopt -r $index_path -p $caseid -b $capturebed -a mutect\n  bash ${repoDir}/process_scripts/variants/uni_norm_annot.sh -g $params.snpeff_vers -r $index_path -p ${caseid}.mutect -v ${caseid}.mutect.vcf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  if ( somatic[caseid] == true ) \n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/somatic_vc.sh $ponopt -r $index_path -p $caseid -x $tid -y $nid -t ${tid}.final.bam -n ${nid}.final.bam -b $capturebed -a mutect\n  bash ${repoDir}/process_scripts/variants/uni_norm_annot.sh -g $params.snpeff_vers -r $index_path -p ${caseid}.mutect -v ${caseid}.mutect.vcf.gz\n  \"\"\"\n  else\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/germline_vc.sh $ponopt -r $index_path -p $caseid -b $capturebed -a mutect\n  bash ${repoDir}/process_scripts/variants/uni_norm_annot.sh -g $params.snpeff_vers -r $index_path -p ${caseid}.mutect -v ${caseid}.mutect.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mutectbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mutectvcf",
            "mutectori"
        ],
        "nb_outputs": 2,
        "name_workflow": "medforomics__school",
        "directive": [
            "queue '128GB,256GB,256GBv1'",
            "label 'variantcalling'",
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "somvc": {
        "name_process": "somvc",
        "string_process": "\nprocess somvc {\n  publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'\n  label 'variantcalling'\n  errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }\n  maxErrors 20\n  queue '32GB,super'\n\n  input:\n  set caseid,tid,nid,file(ssbam),file(ssidx) from sombam\n  each algo from ssalgo\n  output:\n  set caseid,file(\"${caseid}.${algo}.vcf.gz\") into ssvcf\n  set caseid,file(\"${caseid}.${algo}.ori.vcf.gz\") into ssori\n  when:\n  somatic[caseid] == true\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/somatic_vc.sh -r $index_path -p $caseid -x $tid -y $nid -n ${nid}.consensus.bam -t ${tid}.consensus.bam -a ${algo} -b $capturebed\n  bash ${repoDir}/process_scripts/variants/uni_norm_annot.sh -g $params.snpeff_vers -r $index_path -p ${caseid}.${algo} -v ${caseid}.${algo}.vcf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/variants/somatic_vc.sh -r $index_path -p $caseid -x $tid -y $nid -n ${nid}.consensus.bam -t ${tid}.consensus.bam -a ${algo} -b $capturebed\n  bash ${repoDir}/process_scripts/variants/uni_norm_annot.sh -g $params.snpeff_vers -r $index_path -p ${caseid}.${algo} -v ${caseid}.${algo}.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sombam",
            "ssalgo"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ssvcf",
            "ssori"
        ],
        "nb_outputs": 2,
        "name_workflow": "medforomics__school",
        "directive": [
            "publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'",
            "label 'variantcalling'",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }",
            "maxErrors 20",
            "queue '32GB,super'"
        ],
        "when": "somatic[caseid] == true",
        "stub": ""
    },
    "germvc": {
        "name_process": "germvc",
        "string_process": "\nprocess germvc {\n  queue '32GB,super'\n  label 'variantcalling'\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'\n  input:\n  set caseid,tid,nid,file(gbam),file(gidx) from germbam\n  each algo from fpalgo\n  output:\n  set caseid,file(\"${caseid}.${algo}.vcf.gz\") into germvcf\n  set caseid,file(\"${caseid}.${algo}.ori.vcf.gz\") into germori\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/germline_vc.sh -r $index_path -p $caseid -a ${algo} -b $capturebed\n  bash ${repoDir}/process_scripts/variants/uni_norm_annot.sh -g $params.snpeff_vers -r $index_path -p ${caseid}.${algo} -v ${caseid}.${algo}.vcf.gz \n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/variants/germline_vc.sh -r $index_path -p $caseid -a ${algo} -b $capturebed\n  bash ${repoDir}/process_scripts/variants/uni_norm_annot.sh -g $params.snpeff_vers -r $index_path -p ${caseid}.${algo} -v ${caseid}.${algo}.vcf.gz \n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "germbam",
            "fpalgo"
        ],
        "nb_inputs": 2,
        "outputs": [
            "germvcf",
            "germori"
        ],
        "nb_outputs": 2,
        "name_workflow": "medforomics__school",
        "directive": [
            "queue '32GB,super'",
            "label 'variantcalling'",
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "germstrelka": {
        "name_process": "germstrelka",
        "string_process": "\nprocess germstrelka {\n  queue '32GB,super'\n  label 'variantcalling'\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'\n\n  input:\n  set caseid,tid,nid,file(gbam),file(gidx) from strelkabam\n  output:\n  set caseid,file(\"${caseid}.strelka2.vcf.gz\") into strelkavcf\n  set caseid,file(\"${caseid}.strelka2.ori.vcf.gz\") into strelkaori\n  when: \n  somatic[caseid] == false\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/germline_vc.sh -r $index_path -p $caseid -a strelka2 -b $capturebed\n  bash ${repoDir}/process_scripts/variants/uni_norm_annot.sh -g $params.snpeff_vers -r $index_path -p ${caseid}.strelka2 -v ${caseid}.strelka2.vcf.gz \n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/variants/germline_vc.sh -r $index_path -p $caseid -a strelka2 -b $capturebed\n  bash ${repoDir}/process_scripts/variants/uni_norm_annot.sh -g $params.snpeff_vers -r $index_path -p ${caseid}.strelka2 -v ${caseid}.strelka2.vcf.gz \n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "strelkabam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "strelkavcf",
            "strelkaori"
        ],
        "nb_outputs": 2,
        "name_workflow": "medforomics__school",
        "directive": [
            "queue '32GB,super'",
            "label 'variantcalling'",
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$caseid/dnacallset\", mode: 'copy'"
        ],
        "when": "somatic[caseid] == false",
        "stub": ""
    },
    "integrate": {
        "name_process": "integrate",
        "string_process": "\nprocess integrate {\n  executor 'local'\n  label 'variantcalling'\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$caseid/dnavcf\", mode: 'copy'\n  input:\n  set caseid,file(vcf) from vcflist\n  output:\n  file(\"${caseid}.union.vcf.gz\") into unionvcf\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/variants/union.sh -r $index_path -p $caseid\n  #cp ${caseid}.union.vcf.gz ${caseid}.dna.vcf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/variants/union.sh -r $index_path -p $caseid\n  #cp ${caseid}.union.vcf.gz ${caseid}.dna.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcflist"
        ],
        "nb_inputs": 1,
        "outputs": [
            "unionvcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "medforomics__school",
        "directive": [
            "executor 'local'",
            "label 'variantcalling'",
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$caseid/dnavcf\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "rtrim": {
        "name_process": "rtrim",
        "string_process": "\nprocess rtrim {\n  errorStrategy 'ignore'\n  label 'trim'\n  publishDir \"$params.output/$caseid/rnaout\", mode: 'copy'\n\n  input:\n  set caseid,sampleid, file(fqs) from reads\n  output:\n  set caseid,sampleid,file(\"${sampleid}.trim.R1.fastq.gz\"),file(\"${sampleid}.trim.R2.fastq.gz\") into fusionfq\n  set caseid,sampleid,file(\"${sampleid}.trim.R*.fastq.gz\") into treads\n\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/preproc_fastq/trimgalore.sh -p ${sampleid} ${fqs}\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/preproc_fastq/trimgalore.sh -p ${sampleid} ${fqs}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fusionfq",
            "treads"
        ],
        "nb_outputs": 2,
        "name_workflow": "medforomics__school",
        "directive": [
            "errorStrategy 'ignore'",
            "label 'trim'",
            "publishDir \"$params.output/$caseid/rnaout\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "ralign": {
        "name_process": "ralign",
        "string_process": "\nprocess ralign {\n  errorStrategy 'ignore'\n  label 'ralign'\n  publishDir \"$params.output/$caseid/rnaout\", mode: 'copy'\n  input:\n  set caseid,sampleid, file(fqs) from treads\n  output:\n  set caseid,sampleid,file(\"${sampleid}.bam\") into abundbam\n  set caseid,sampleid,file(\"${sampleid}.bam\"),file(\"${sampleid}.bam.bai\") into fbbam\n  set caseid,sampleid,file(\"${sampleid}.bam\"),file(\"${sampleid}.bam.bai\") into ctbam\n  set caseid,sampleid,file(\"${sampleid}.bam\"),file(\"${sampleid}.alignerout.txt\") into qcbam\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/rnaseqalign.sh -a $params.align -p $sampleid -r $index_path $umiopt ${fqs}\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/rnaseqalign.sh -a $params.align -p $sampleid -r $index_path $umiopt ${fqs}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "treads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "abundbam",
            "fbbam",
            "ctbam",
            "qcbam"
        ],
        "nb_outputs": 4,
        "name_workflow": "medforomics__school",
        "directive": [
            "errorStrategy 'ignore'",
            "label 'ralign'",
            "publishDir \"$params.output/$caseid/rnaout\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "starfusion": {
        "name_process": "starfusion",
        "string_process": "\nprocess starfusion {\n  errorStrategy 'ignore'\n  label 'starfusion'\n  publishDir \"$params.output/$caseid/rnaout\", mode: 'copy'\n  input:\n  set caseid,sampleid,file(fq1), file(fq2) from fusionfq\n  output:\n  file(\"${sampleid}*txt\") into fusionout\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/starfusion.sh -p ${sampleid} -r ${index_path} -a ${fq1} -b ${fq2} -f\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/starfusion.sh -p ${sampleid} -r ${index_path} -a ${fq1} -b ${fq2} -f\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fusionfq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fusionout"
        ],
        "nb_outputs": 1,
        "name_workflow": "medforomics__school",
        "directive": [
            "errorStrategy 'ignore'",
            "label 'starfusion'",
            "publishDir \"$params.output/$caseid/rnaout\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bamct": {
        "name_process": "bamct",
        "string_process": "\nprocess bamct {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$caseid/rnaout\", mode: 'copy'\n  label 'profiling_qc'\n  input:\n  set caseid,sampleid,file(rbam),file(ridx) from ctbam\n  output:\n  file(\"${sampleid}.bamreadcount.txt.gz\") into ctreads\n  when:\n  params.bamct == \"detect\"\n  script:\n  \"\"\"\n  export PATH=/project/shared/bicf_workflow_ref/seqprg/bam-readcount/bin/:$PATH\n  bam-readcount -w 0 -q 0 -b 25 -f ${index_path}/genome.fa ${rbam} > ${sampleid}.bamreadcount.txt\n  pigz ${sampleid}.bamreadcount.txt\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  export PATH=/project/shared/bicf_workflow_ref/seqprg/bam-readcount/bin/:$PATH\n  bam-readcount -w 0 -q 0 -b 25 -f ${index_path}/genome.fa ${rbam} > ${sampleid}.bamreadcount.txt\n  pigz ${sampleid}.bamreadcount.txt\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ctbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ctreads"
        ],
        "nb_outputs": 1,
        "name_workflow": "medforomics__school",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$caseid/rnaout\", mode: 'copy'",
            "label 'profiling_qc'"
        ],
        "when": "params.bamct == \"detect\"",
        "stub": ""
    },
    "alignqc": {
        "name_process": "alignqc",
        "string_process": "\nprocess alignqc {\n  executor 'local'\n  errorStrategy 'ignore'\n  label 'profiling_qc'\n  publishDir \"$params.output/$caseid/rnaout\", mode: 'copy'\n\n  input:\n  set caseid,sampleid,file(bam),file(hsout) from qcbam\n  \n  output:\n  set file(\"${sampleid}_fastqc.zip\"),file(\"${sampleid}_fastqc.html\") into fastqc\n  file(\"${sampleid}.sequence.stats.txt\") into alignstats\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/bamqc.sh -p ${sampleid} -b ${bam} -n rna -e ${params.version}\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/bamqc.sh -p ${sampleid} -b ${bam} -n rna -e ${params.version}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qcbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc",
            "alignstats"
        ],
        "nb_outputs": 2,
        "name_workflow": "medforomics__school",
        "directive": [
            "executor 'local'",
            "errorStrategy 'ignore'",
            "label 'profiling_qc'",
            "publishDir \"$params.output/$caseid/rnaout\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "geneabund": {
        "name_process": "geneabund",
        "string_process": "\nprocess geneabund {\n  errorStrategy 'ignore'\n  executor 'local'\n  label 'geneabund'\n  publishDir \"$params.output/$caseid/rnaout\", mode: 'copy'\n  input:\n  set caseid,sampleid, file(sbam) from abundbam\n  output:\n  file(\"${sampleid}.cts\")  into counts\n  file(\"${sampleid}_stringtie\") into strcts\n  file(\"${sampleid}.fpkm.txt\") into fpkm\n  file(\"${sampleid}.exonskip.answer.txt\") into exonskip\n  \"\"\"\n  bash ${repoDir}/process_scripts/genect_rnaseq/geneabundance.sh -s ${params.stranded} -g ${gtf_file} -p ${sampleid} -b ${sbam} -i ${ginfo} ${glist}\n  bash ${repoDir}/process_scripts/genect_rnaseq/exonskipping.sh -g ${gtf_file} -p ${sampleid} -b ${sbam} -r ${index_path}\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n  bash ${repoDir}/process_scripts/genect_rnaseq/geneabundance.sh -s ${params.stranded} -g ${gtf_file} -p ${sampleid} -b ${sbam} -i ${ginfo} ${glist}\n  bash ${repoDir}/process_scripts/genect_rnaseq/exonskipping.sh -g ${gtf_file} -p ${sampleid} -b ${sbam} -r ${index_path}\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "abundbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "counts",
            "strcts",
            "fpkm",
            "exonskip"
        ],
        "nb_outputs": 4,
        "name_workflow": "medforomics__school",
        "directive": [
            "errorStrategy 'ignore'",
            "executor 'local'",
            "label 'geneabund'",
            "publishDir \"$params.output/$caseid/rnaout\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fb": {
        "name_process": "fb",
        "string_process": "\nprocess fb {\n  queue '32GB'\n  errorStrategy 'ignore'\n  label 'variantcalling'\n  publishDir \"$params.output/$caseid/rnavcf\", mode: 'copy'\n\n  input:\n  set caseid,$sampleid,file(gbam),file(gidx) from fbbam\n  output:\n  set caseid,file(\"${caseid}.fb*vcf.gz\") into fbvcf\n  script:\n  \"\"\"\n  export biohpc=1\n  bash ${repoDir}/process_scripts/variants/germline_vc.sh -r ${index_path} -p ${caseid} -a fb\n  bash ${repoDir}/process_scripts/variants/uni_norm_annot.sh -g ${snpeff_vers} -r ${index_path} -p ${caseid}.fb -v ${caseid}.fb.vcf.gz \n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  export biohpc=1\n  bash ${repoDir}/process_scripts/variants/germline_vc.sh -r ${index_path} -p ${caseid} -a fb\n  bash ${repoDir}/process_scripts/variants/uni_norm_annot.sh -g ${snpeff_vers} -r ${index_path} -p ${caseid}.fb -v ${caseid}.fb.vcf.gz \n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fbbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fbvcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "medforomics__school",
        "directive": [
            "queue '32GB'",
            "errorStrategy 'ignore'",
            "label 'variantcalling'",
            "publishDir \"$params.output/$caseid/rnavcf\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "abra2": {
        "name_process": "abra2",
        "string_process": "\nprocess abra2 {\n  queue '32GB,super'\n  label 'abra2'\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'\n  input:\n  set caseid,tid,nid,sampleid,file(sbam),file(bai) from align\n  output:\n  set caseid,sampleid,file(\"${sampleid}.bam\"),file(\"${sampleid}.bam.bai\") into itdbam\n  set caseid,tid,nid,file(\"${sampleid}.bam\"), file(\"${sampleid}.bam.bai\") into abrabam\n  set caseid,tid,nid,sampleid, file(\"${sampleid}.bam\"),file(\"${sampleid}.bam.bai\") into mdupbam\n  script:\n  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/abra2.sh -r $index_path -p $sampleid -b ${sbam} -c ${capturebed}\n  mv ${sbam} ${sampleid}.ori.bam\n  mv ${bai} ${sampleid}.ori.bai\n  mv ${sampleid}.abra2.bam  ${sampleid}.bam\n  mv ${sampleid}.abra2.bam.bai  ${sampleid}.bam.bai\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  bash ${repoDir}/process_scripts/alignment/abra2.sh -r $index_path -p $sampleid -b ${sbam} -c ${capturebed}\n  mv ${sbam} ${sampleid}.ori.bam\n  mv ${bai} ${sampleid}.ori.bai\n  mv ${sampleid}.abra2.bam  ${sampleid}.bam\n  mv ${sampleid}.abra2.bam.bai  ${sampleid}.bam.bai\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "align"
        ],
        "nb_inputs": 1,
        "outputs": [
            "itdbam",
            "abrabam",
            "mdupbam"
        ],
        "nb_outputs": 3,
        "name_workflow": "medforomics__school",
        "directive": [
            "queue '32GB,super'",
            "label 'abra2'",
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$caseid/dnaout\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
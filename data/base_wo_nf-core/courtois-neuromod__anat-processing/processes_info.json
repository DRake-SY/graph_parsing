{
    "smoothB1WithMask": {
        "name_process": "smoothB1WithMask",
        "string_process": "\nprocess smoothB1WithMask {\n    tag { sid }\n     \n    when:\n        params.use_bet == true\n\n    input:\n        tuple val(sid), file(b1aligned), file(mask)\n\n    output:\n        tuple val(sid), path(\"${sid}_TB1map.nii.gz\"), path(\"${sid}_TB1map.json\"), \\\n        optional: true, emit: b1_filtered\n\n    script: \n        if (params.matlab_path_exception){\n        \"\"\"\n            $params.matlab_path_exception -nodesktop -nosplash -r \"filter_map_neuromod('${sid}','$b1aligned','mask', '$mask','type','$params.b1_filter_type','order',$params.b1_filter_order,'dimension','$params.b1_filter_dimension','size',$params.b1_filter_size,'qmrlab_path','$params.qmrlab_path_exception','siemens',$params.b1_filter_siemens); exit();\" \n        \"\"\"\n        }else{\n        \"\"\"\n            $params.runcmd \"filter_map_neuromod('${sid}','$b1aligned','mask', '$mask','type','$params.b1_filter_type','order',$params.b1_filter_order,'dimension','$params.b1_filter_dimension','size',$params.b1_filter_size,'qmrlab_path','$params.qmrlab_path_exception','siemens',$params.b1_filter_siemens); exit();\" \n        \"\"\"\n\n        }\n\n}",
        "nb_lignes_process": 25,
        "string_script": "        if (params.matlab_path_exception){\n        \"\"\"\n            $params.matlab_path_exception -nodesktop -nosplash -r \"filter_map_neuromod('${sid}','$b1aligned','mask', '$mask','type','$params.b1_filter_type','order',$params.b1_filter_order,'dimension','$params.b1_filter_dimension','size',$params.b1_filter_size,'qmrlab_path','$params.qmrlab_path_exception','siemens',$params.b1_filter_siemens); exit();\" \n        \"\"\"\n        }else{\n        \"\"\"\n            $params.runcmd \"filter_map_neuromod('${sid}','$b1aligned','mask', '$mask','type','$params.b1_filter_type','order',$params.b1_filter_order,'dimension','$params.b1_filter_dimension','size',$params.b1_filter_size,'qmrlab_path','$params.qmrlab_path_exception','siemens',$params.b1_filter_siemens); exit();\" \n        \"\"\"\n\n        }",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "b1aligned",
            "mask"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [
            "tag { sid }"
        ],
        "when": "params.use_bet == true",
        "stub": ""
    },
    "smoothB1WithoutMask": {
        "name_process": "smoothB1WithoutMask",
        "string_process": "\nprocess smoothB1WithoutMask {\n    tag { sid }\n     \n    when:\n        params.use_bet == false\n\n    input:\n        tuple val(sid), file(b1aligned)\n\n    output:\n        tuple val(sid), path(\"${sid}_TB1map.nii.gz\"), path(\"${sid}_TB1map.json\"), \\\n        optional: true, emit: b1_filtered\n\n    script: \n        if (params.matlab_path_exception){\n        \"\"\"\n            $params.matlab_path_exception -nodesktop -nosplash -r \"filter_map_neuromod('${sid}','$b1aligned','type','$params.b1_filter_type','order',$params.b1_filter_order,'dimension','$params.b1_filter_dimension','size',$params.b1_filter_size,'qmrlab_path','$params.qmrlab_path_exception','siemens',$params.b1_filter_siemens); exit();\" \n        \"\"\"\n        }else{\n        \"\"\"\n            $params.runcmd \"filter_map_neuromod('${sid}','$b1aligned','type','$params.b1_filter_type','order',$params.b1_filter_order,'dimension','$params.b1_filter_dimension','size',$params.b1_filter_size,'qmrlab_path','$params.qmrlab_path_exception','siemens',$params.b1_filter_siemens); exit();\" \n        \"\"\"\n\n        }\n\n}",
        "nb_lignes_process": 25,
        "string_script": "        if (params.matlab_path_exception){\n        \"\"\"\n            $params.matlab_path_exception -nodesktop -nosplash -r \"filter_map_neuromod('${sid}','$b1aligned','type','$params.b1_filter_type','order',$params.b1_filter_order,'dimension','$params.b1_filter_dimension','size',$params.b1_filter_size,'qmrlab_path','$params.qmrlab_path_exception','siemens',$params.b1_filter_siemens); exit();\" \n        \"\"\"\n        }else{\n        \"\"\"\n            $params.runcmd \"filter_map_neuromod('${sid}','$b1aligned','type','$params.b1_filter_type','order',$params.b1_filter_order,'dimension','$params.b1_filter_dimension','size',$params.b1_filter_size,'qmrlab_path','$params.qmrlab_path_exception','siemens',$params.b1_filter_siemens); exit();\" \n        \"\"\"\n\n        }",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "b1aligned"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [
            "tag { sid }"
        ],
        "when": "params.use_bet == false",
        "stub": ""
    },
    "fitMtsatWithB1Mask": {
        "name_process": "fitMtsatWithB1Mask",
        "string_process": "\nprocess fitMtsatWithB1Mask{\n    tag { sid }\n\n    when:\n        params.use_b1cor == true && params.use_bet == true\n\n    input:\n        tuple val(sid), file(pdw_reg), file(mtw_reg), file(t1w),\\\n        file(pdwj), file(mtwj), file(t1wj), file(b1map), file(mask)\n        \n    output:\n        tuple val(sid), \\\n        path(\"${sid}_acq-MTS_T1map.nii.gz\"), \\\n        path(\"${sid}_acq-MTS_MTsat.nii.gz\"), \\\n        path(\"${sid}_acq-MTS_T1map.json\"), \\\n        path(\"${sid}_acq-MTS_MTsat.json\"), \\\n        path(\"${sid}_mt_sat.qmrlab.mat\"), \\\n        emit: publish_mtsat\n\n    script: \n        \"\"\"\n            $params.runcmd \"mt_sat_neuromod('${sid}','$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','mask','$mask','b1map','$b1map','b1factor',$params.b1cor_factor); exit();\"\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n            $params.runcmd \"mt_sat_neuromod('${sid}','$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','mask','$mask','b1map','$b1map','b1factor',$params.b1cor_factor); exit();\"\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "pdw_reg",
            "mtw_reg",
            "t1w",
            "pdwj",
            "mtwj",
            "t1wj",
            "b1map",
            "mask"
        ],
        "nb_inputs": 9,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [
            "tag { sid }"
        ],
        "when": "params.use_b1cor == true && params.use_bet == true",
        "stub": ""
    },
    "fitMtsatWithB1": {
        "name_process": "fitMtsatWithB1",
        "string_process": "\nprocess fitMtsatWithB1 {\n    tag { sid }\n\n    when:\n        params.use_b1cor == true && params.use_bet == false\n\n    input:\n        tuple val(sid), file(pdw_reg), file(mtw_reg), file(t1w),\\\n        file(pdwj), file(mtwj), file(t1wj), file(b1map)\n\n    output:\n        tuple val(sid), \\\n        path(\"${sid}_acq-MTS_T1map.nii.gz\"), \\\n        path(\"${sid}_acq-MTS_MTsat.nii.gz\"), \\\n        path(\"${sid}_acq-MTS_T1map.json\"), \\\n        path(\"${sid}_acq-MTS_MTsat.json\"), \\\n        path(\"${sid}_mt_sat.qmrlab.mat\"), \\\n        emit: publish_mtsat\n\n    script: \n        \"\"\"\n            $params.runcmd \"mt_sat_neuromod('${sid}','$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','b1map','$b1map','b1factor',$params.b1cor_factor); exit();\"\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n            $params.runcmd \"mt_sat_neuromod('${sid}','$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','b1map','$b1map','b1factor',$params.b1cor_factor); exit();\"\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "pdw_reg",
            "mtw_reg",
            "t1w",
            "pdwj",
            "mtwj",
            "t1wj",
            "b1map"
        ],
        "nb_inputs": 8,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [
            "tag { sid }"
        ],
        "when": "params.use_b1cor == true && params.use_bet == false",
        "stub": ""
    },
    "fitMtsatWithBet": {
        "name_process": "fitMtsatWithBet",
        "string_process": "\nprocess fitMtsatWithBet {\n    tag { sid }\n\n    when:\n        params.use_b1cor == false && params.use_bet == true\n\n    input:\n        tuple val(sid), file(pdw_reg), file(mtw_reg), file(t1w),\\\n        file(pdwj), file(mtwj), file(t1wj), file(mask)\n\n    output:\n        tuple val(sid), \\\n        path(\"${sid}_T1map.nii.gz\"), \\\n        path(\"${sid}_MTsat.nii.gz\"), \\\n        path(\"${sid}_T1map.json\"), \\\n        path(\"${sid}_MTsat.json\"), \\\n        path(\"${sid}_mt_sat.qmrlab.mat\"), \\\n        emit: publish_mtsat\n\n    script: \n        \"\"\"\n            git clone $params.wrapper_repo \n            cd qMRWrappers\n            sh init_qmrlab_wrapper.sh $params.wrapper_version \n            cd ..\n\n            $params.runcmd \"addpath(genpath('qMRWrappers')); mt_sat_wrapper('$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','mask','$mask','qmrlab_path','$params.qmrlab_path', 'sid','${sid}'); exit();\"\n        \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "        \"\"\"\n            git clone $params.wrapper_repo \n            cd qMRWrappers\n            sh init_qmrlab_wrapper.sh $params.wrapper_version \n            cd ..\n\n            $params.runcmd \"addpath(genpath('qMRWrappers')); mt_sat_wrapper('$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','mask','$mask','qmrlab_path','$params.qmrlab_path', 'sid','${sid}'); exit();\"\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "RASH"
        ],
        "tools_url": [
            "https://bio.tools/RASH"
        ],
        "tools_dico": [
            {
                "name": "RASH",
                "uri": "https://bio.tools/RASH",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Mathematics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Maths"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3778",
                                    "term": "Text annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Essential dynamics"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "PCA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Principal modes"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "ED"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "a Web-first format for HTML-based scholarly articles.\n\nResearch Articles in Simplified HTML (RASH) Framework includes a markup language defined as a subset of HTML+RDF for writing scientific articles, and related tools to convert it into different formats, to extract data from it, etc.\n\nHow to cite: Peroni, S., Osborne, F., Di Iorio, A., Nuzzolese, A. G., Poggi, F., Vitali, F., Motta, E. (2017). Research Articles in Simplified HTML: a Web-first format for HTML-based scholarly articles. PeerJ Computer Science 3: e132. e2513. DOI: https://doi.org/10.7717/peerj-cs.132.\n\n# rash-check.sh - fully check RASH documents.\n\nThe odt2rash.jar executable converts an ODT file into the RASH format.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Research Articles Simplified HTML', 'SAVE-SD'",
                "homepage": "https://w3id.org/people/essepuntato/papers/rash-peerj2016.html"
            }
        ],
        "inputs": [
            "sid",
            "pdw_reg",
            "mtw_reg",
            "t1w",
            "pdwj",
            "mtwj",
            "t1wj",
            "mask"
        ],
        "nb_inputs": 8,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [
            "tag { sid }"
        ],
        "when": "params.use_b1cor == false && params.use_bet == true",
        "stub": ""
    },
    "fitMtsat": {
        "name_process": "fitMtsat",
        "string_process": "\nprocess fitMtsat {\n    tag { sid }\n\n    when:\n        params.use_b1cor == false && params.use_bet == false\n\n    input:\n        tuple val(sid), file(pdw_reg), file(mtw_reg), file(t1w),\\\n        file(pdwj), file(mtwj), file(t1wj)\n\n    output:\n        tuple val(sid), \\\n        path(\"${sid}_T1map.nii.gz\"), \\\n        path(\"${sid}_MTsat.nii.gz\"), \\\n        path(\"${sid}_T1map.json\"), \\\n        path(\"${sid}_MTsat.json\"), \\\n        path(\"${sid}_mt_sat.qmrlab.mat\"), \\\n        emit: publish_mtsat\n\n    script: \n        \"\"\"\n            git clone $params.wrapper_repo \n            cd qMRWrappers\n            sh init_qmrlab_wrapper.sh $params.wrapper_version \n            cd ..\n\n            $params.runcmd \"addpath(genpath('qMRWrappers')); mt_sat_wrapper('$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','qmrlab_path','$params.qmrlab_path', 'sid','${sid}'); exit();\"\n        \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "        \"\"\"\n            git clone $params.wrapper_repo \n            cd qMRWrappers\n            sh init_qmrlab_wrapper.sh $params.wrapper_version \n            cd ..\n\n            $params.runcmd \"addpath(genpath('qMRWrappers')); mt_sat_wrapper('$mtw_reg','$pdw_reg','$t1w','$mtwj','$pdwj','$t1wj','qmrlab_path','$params.qmrlab_path', 'sid','${sid}'); exit();\"\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "RASH"
        ],
        "tools_url": [
            "https://bio.tools/RASH"
        ],
        "tools_dico": [
            {
                "name": "RASH",
                "uri": "https://bio.tools/RASH",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Mathematics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Maths"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3778",
                                    "term": "Text annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Essential dynamics"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "PCA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Principal modes"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "ED"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "a Web-first format for HTML-based scholarly articles.\n\nResearch Articles in Simplified HTML (RASH) Framework includes a markup language defined as a subset of HTML+RDF for writing scientific articles, and related tools to convert it into different formats, to extract data from it, etc.\n\nHow to cite: Peroni, S., Osborne, F., Di Iorio, A., Nuzzolese, A. G., Poggi, F., Vitali, F., Motta, E. (2017). Research Articles in Simplified HTML: a Web-first format for HTML-based scholarly articles. PeerJ Computer Science 3: e132. e2513. DOI: https://doi.org/10.7717/peerj-cs.132.\n\n# rash-check.sh - fully check RASH documents.\n\nThe odt2rash.jar executable converts an ODT file into the RASH format.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Research Articles Simplified HTML', 'SAVE-SD'",
                "homepage": "https://w3id.org/people/essepuntato/papers/rash-peerj2016.html"
            }
        ],
        "inputs": [
            "sid",
            "pdw_reg",
            "mtw_reg",
            "t1w",
            "pdwj",
            "mtwj",
            "t1wj"
        ],
        "nb_inputs": 7,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [
            "tag { sid }"
        ],
        "when": "params.use_b1cor == false && params.use_bet == false",
        "stub": ""
    },
    "extractBrain": {
        "name_process": "extractBrain",
        "string_process": "\nprocess extractBrain {\n    tag { sid }\n\n    when:\n        params.use_bet == true\n\n    input:\n        tuple val(sid), file(t1w)\n\n    output:\n        tuple val(sid), path(\"${sid}_acq-T1w_mask.nii.gz\"), optional: true, \\\n        emit: mask_from_bet\n\n    script:\n         if (params.bet_recursive){\n        \"\"\"    \n        bet $t1w ${sid}_acq-T1w.nii.gz -m -R -n -f $params.bet_threshold\n        \"\"\"}\n        else{\n        \"\"\"    \n        bet $t1w ${sid}_acq-T1w.nii.gz -m -n -f $params.bet_threshold\n        \"\"\"\n        }\n\n}",
        "nb_lignes_process": 24,
        "string_script": "         if (params.bet_recursive){\n        \"\"\"    \n        bet $t1w ${sid}_acq-T1w.nii.gz -m -R -n -f $params.bet_threshold\n        \"\"\"}\n        else{\n        \"\"\"    \n        bet $t1w ${sid}_acq-T1w.nii.gz -m -n -f $params.bet_threshold\n        \"\"\"\n        }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "DBETH"
        ],
        "tools_url": [
            "https://bio.tools/dbeth"
        ],
        "tools_dico": [
            {
                "name": "DBETH",
                "uri": "https://bio.tools/dbeth",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2840",
                            "term": "Toxicology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2815",
                            "term": "Human biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2815",
                            "term": "Humans"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Fold recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Virulence prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3439",
                                    "term": "Pathway or network prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3092",
                                    "term": "Protein feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Protein domain prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Fold prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Protein fold recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Domain prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Protein fold prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Pathogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3092",
                                    "term": "Protein feature prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3092",
                                    "term": "Protein feature recognition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database of sequences, structures, interaction networks and analytical results for 229 exotoxins, from 26 different human pathogenic bacterial genus. All toxins are classified into 24 different Toxin classes. The aim is to provide a comprehensive database for human pathogenic bacterial exotoxins.",
                "homepage": "http://www.hpppi.iicb.res.in/btox/"
            }
        ],
        "inputs": [
            "sid",
            "t1w"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [
            "tag { sid }"
        ],
        "when": "params.use_bet == true",
        "stub": ""
    },
    "publishOutputs": {
        "name_process": "publishOutputs",
        "string_process": "\nprocess publishOutputs {\n\n    exec:\n        out = getSubSesEntity(\"${sid}\")\n\n    input:\n      tuple val(sid), \\\n      path(mtw_aligned), path(pdw_aligned), \\\n      path(mtw_disp), path(pdw_disp), \\\n      path(t1map), path(mtsat), path(t1mapj), \\\n      path(mtsatj), path(qmrmodel), path(mp2raget1), \\\n      path(mp2raget1j),path(mp2rager1),path(mp2rager1j), path(mp2ragemodel), \\\n      path(mtrnii), path(mtrjson), path(mtrmodel)\n\n    publishDir \"${derivativesDir}/${out.sub}/${out.ses}anat\", mode: 'copy', overwrite: true\n\n    output:\n      tuple val(sid), \\\n      path(mtw_aligned), path(pdw_aligned), \\\n      path(mtw_disp), path(pdw_disp), \\\n      path(t1map), path(mtsat), path(t1mapj), \\\n      path(mtsatj), path(qmrmodel), path(mp2raget1), \\\n      path(mp2raget1j),path(mp2rager1),path(mp2rager1j), path(mp2ragemodel), \\\n      path(mtrnii), path(mtrjson), path(mtrmodel)\n\n    script:\n        \"\"\"\n        mkdir -p ${derivativesDir}\n        echo \"Transferring ${mtw_aligned} to ${derivativesDir}/${out.sub}/${out.ses}anat folder...\"\n        \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "        out = getSubSesEntity(\"${sid}\")\n\n    \n\n    \n\n    script:\n        \"\"\"\n        mkdir -p ${derivativesDir}\n        echo \"Transferring ${mtw_aligned} to ${derivativesDir}/${out.sub}/${out.ses}anat folder...\"\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "Ragout"
        ],
        "tools_url": [
            "https://bio.tools/ragout"
        ],
        "tools_dico": [
            {
                "name": "Ragout",
                "uri": "https://bio.tools/ragout",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for assisted assembly using multiple references. It takes a short read assembly (a set of contigs), a set of related references and a corresponding phylogenetic tree and then assembles the contigs into scaffolds.",
                "homepage": "http://fenderglass.github.io/Ragout/"
            }
        ],
        "inputs": [
            "sid",
            "mtw_aligned",
            "pdw_aligned",
            "mtw_disp",
            "pdw_disp",
            "t1map",
            "mtsat",
            "t1mapj",
            "mtsatj",
            "qmrmodel",
            "mp2raget1",
            "mp2raget1j",
            "mp2rager1",
            "mp2rager1j",
            "mp2ragemodel",
            "mtrnii",
            "mtrjson",
            "mtrmodel"
        ],
        "nb_inputs": 18,
        "outputs": [
            "sid",
            "pdw_aligned",
            "pdw_disp",
            "t1mapj",
            "mp2raget1",
            "mp2ragemodel",
            "mtrmodel"
        ],
        "nb_outputs": 7,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "publishOutputsFmap": {
        "name_process": "publishOutputsFmap",
        "string_process": "\nprocess publishOutputsFmap {\n\n    exec:\n        out = getSubSesEntity(\"${sid}\")\n\n    input:\n      tuple val(sid), \\\n      path(b1res), path(smooth)\n\n    publishDir \"${derivativesDir}/${out.sub}/${out.ses}fmap\", mode: 'copy', overwrite: true\n\n    output:\n      tuple val(sid), \\\n      path(b1res),path(smooth)\n\n    script:\n        \"\"\"\n        mkdir -p ${derivativesDir}\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        out = getSubSesEntity(\"${sid}\")\n\n    \n\n    \n\n    script:\n        \"\"\"\n        mkdir -p ${derivativesDir}\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "Ragout"
        ],
        "tools_url": [
            "https://bio.tools/ragout"
        ],
        "tools_dico": [
            {
                "name": "Ragout",
                "uri": "https://bio.tools/ragout",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for assisted assembly using multiple references. It takes a short read assembly (a set of contigs), a set of related references and a corresponding phylogenetic tree and then assembles the contigs into scaffolds.",
                "homepage": "http://fenderglass.github.io/Ragout/"
            }
        ],
        "inputs": [
            "sid",
            "b1res",
            "smooth"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sid",
            "smooth"
        ],
        "nb_outputs": 2,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "publishOutputsMasks": {
        "name_process": "publishOutputsMasks",
        "string_process": "\nprocess publishOutputsMasks {\n\n    exec:\n        out = getSubSesEntity(\"${sid}\")\n\n    input:\n      tuple val(sid), \\\n      path(mtsgm), path(mtswm), \\\n      path(mp2ragegm), path(mp2ragewm)\n\n    publishDir \"${derivativesDir}/${out.sub}/${out.ses}anat\", mode: 'copy', overwrite: true\n\n    output:\n      tuple val(sid), \\\n      path(mtsgm), path(mtswm), \\\n      path(mp2ragegm), path(mp2ragewm)\n\n    script:\n        \"\"\"\n        mkdir -p ${derivativesDir}\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        out = getSubSesEntity(\"${sid}\")\n\n    \n\n    \n\n    script:\n        \"\"\"\n        mkdir -p ${derivativesDir}\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "Ragout"
        ],
        "tools_url": [
            "https://bio.tools/ragout"
        ],
        "tools_dico": [
            {
                "name": "Ragout",
                "uri": "https://bio.tools/ragout",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for assisted assembly using multiple references. It takes a short read assembly (a set of contigs), a set of related references and a corresponding phylogenetic tree and then assembles the contigs into scaffolds.",
                "homepage": "http://fenderglass.github.io/Ragout/"
            }
        ],
        "inputs": [
            "sid",
            "mtsgm",
            "mtswm",
            "mp2ragegm",
            "mp2ragewm"
        ],
        "nb_inputs": 5,
        "outputs": [
            "sid",
            "mtswm",
            "mp2ragewm"
        ],
        "nb_outputs": 3,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "alignMtsatInputs": {
        "name_process": "alignMtsatInputs",
        "string_process": "\nprocess alignMtsatInputs {\n                                                            \n                                                                \n    tag { sid }\n\n    input:\n        tuple val(sid), file(pdw), file(mtw), file(t1w)\n    \n    output:\n        tuple val(sid),\\\n        path(\"${sid}_acq-MToff_MTS_aligned.nii.gz\"), \\\n        path(\"${sid}_acq-MTon_MTS_aligned.nii.gz\"), \\\n        path(\"${sid}_pdw_to_t1w_displacement.*.mat\"), \\\n        path(\"${sid}_mtw_to_t1w_displacement.*.mat\"), \\\n        emit: mtsat_from_alignment\n\n    script:\n        \"\"\"\n                antsRegistration -d $params.ants_dim \\\n                            --float 0 \\\n                            -o [${sid}_mtw_to_t1w_displacement.mat,${sid}_acq-MTon_MTS_aligned.nii.gz] \\\n                            --transform $params.ants_transform \\\n                            --metric $params.ants_metric[$t1w,$mtw,$params.ants_metric_weight, $params.ants_metric_bins,$params.ants_metric_sampling,$params.ants_metric_samplingprct] \\\n                            --convergence $params.ants_convergence \\\n                            --shrink-factors $params.ants_shrink \\\n                            --smoothing-sigmas $params.ants_smoothing\n\n        antsRegistration -d $params.ants_dim \\\n                            --float 0 \\\n                            -o [${sid}_pdw_to_t1w_displacement.mat,${sid}_acq-MToff_MTS_aligned.nii.gz] \\\n                            --transform $params.ants_transform \\\n                            --metric $params.ants_metric[$t1w,$pdw,$params.ants_metric_weight, $params.ants_metric_bins,$params.ants_metric_sampling,$params.ants_metric_samplingprct] \\\n                            --convergence $params.ants_convergence \\\n                            --shrink-factors $params.ants_shrink \\\n                            --smoothing-sigmas $params.ants_smoothing\n        \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "        \"\"\"\n                antsRegistration -d $params.ants_dim \\\n                            --float 0 \\\n                            -o [${sid}_mtw_to_t1w_displacement.mat,${sid}_acq-MTon_MTS_aligned.nii.gz] \\\n                            --transform $params.ants_transform \\\n                            --metric $params.ants_metric[$t1w,$mtw,$params.ants_metric_weight, $params.ants_metric_bins,$params.ants_metric_sampling,$params.ants_metric_samplingprct] \\\n                            --convergence $params.ants_convergence \\\n                            --shrink-factors $params.ants_shrink \\\n                            --smoothing-sigmas $params.ants_smoothing\n\n        antsRegistration -d $params.ants_dim \\\n                            --float 0 \\\n                            -o [${sid}_pdw_to_t1w_displacement.mat,${sid}_acq-MToff_MTS_aligned.nii.gz] \\\n                            --transform $params.ants_transform \\\n                            --metric $params.ants_metric[$t1w,$pdw,$params.ants_metric_weight, $params.ants_metric_bins,$params.ants_metric_sampling,$params.ants_metric_samplingprct] \\\n                            --convergence $params.ants_convergence \\\n                            --shrink-factors $params.ants_shrink \\\n                            --smoothing-sigmas $params.ants_smoothing\n        \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "pdw",
            "mtw",
            "t1w"
        ],
        "nb_inputs": 4,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [
            "tag { sid }"
        ],
        "when": "",
        "stub": ""
    },
    "resampleB1": {
        "name_process": "resampleB1",
        "string_process": "\nprocess resampleB1 {\n    tag { sid }\n\n    when:\n        params.use_b1cor == true\n\n    input:\n        tuple val(sid), file(t1w), file(b1raw)\n        \n    output:\n        tuple val(sid), path(\"${sid}_B1plusmap_aligned.nii.gz\"), optional: true, \\\n        emit: b1_resampled\n\n    script:\n        \"\" \n                                                 \n                                     \n                                                                \n                                       \n        \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "        \"\" \n                                                 \n                                     \n                                                                \n                                       \n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "t1w",
            "b1raw"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [
            "tag { sid }"
        ],
        "when": "params.use_b1cor == true",
        "stub": ""
    },
    "generateRegionMasks": {
        "name_process": "generateRegionMasks",
        "string_process": "\nprocess generateRegionMasks {\n    tag { sid }\n    \n    input:\n        tuple val(sid), file(t1highres), file(t1mts), file(t1mp2rage)\n        \n    output:\n        tuple val(sid), \\\n        path(\"${sid}_label-GM_MTS.nii.gz\"), \\\n        path(\"${sid}_label-WM_MTS.nii.gz\"), \\\n        path(\"${sid}_label-GM_MP2RAGE.nii.gz\"), \\\n        path(\"${sid}_label-WM_MP2RAGE.nii.gz\"), \\\n        emit: region_masks\n\n    script:\n        \"\" \n                                              \n                               \n                                                                                                            \n                                                        \n                                                                                                                                                                                        \n                                                            \n                                                          \n                                                             \n        \n                                              \n                       \n                                                                                                            \n                                                \n                                                                                                                                                                                    \n                                                    \n                                                  \n                                                     \n        \n                                                                                                                                 \n\n                                                                                                                                                                               \n                                                                                                                                                                               \n                                                                                                                                                                                           \n                                                                                                                                                                                           \n           \n\n}",
        "nb_lignes_process": 42,
        "string_script": "        \"\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "t1highres",
            "t1mts",
            "t1mp2rage"
        ],
        "nb_inputs": 4,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [
            "tag { sid }"
        ],
        "when": "",
        "stub": ""
    },
    "fitMp2rageUni": {
        "name_process": "fitMp2rageUni",
        "string_process": "\nprocess fitMp2rageUni {\n    tag { sid }\n     \n    input:\n        tuple val(sid), file(mp2rage_nii), file(mp2rage_json)\n\n    output:\n        tuple val(sid), path(\"${sid}_acq-mp2rage_T1map.nii.gz\"), path(\"${sid}_acq-mp2rage_T1map.json\"), \\\n        path(\"${sid}_acq-mp2rage_R1map.nii.gz\"), path(\"${sid}_acq-mp2rage_R1map.json\"), \\\n        path(\"${sid}_mp2rage.qmrlab.mat\"), emit: mp2rage_output\n\n    script: \n        if (params.matlab_path_exception){\n        \"\"\"\n            $params.matlab_path_exception -nodesktop -nosplash -r \"mp2rage_neuromod('${sid}','$mp2rage_nii','$mp2rage_json'); exit();\"\n        \"\"\"\n        }else{\n        \"\"\"\n            $params.runcmd \"mp2rage_neuromod('${sid}','$mp2rage_nii','$mp2rage_json'); exit();\"\n        \"\"\"\n\n        }\n}",
        "nb_lignes_process": 22,
        "string_script": "        if (params.matlab_path_exception){\n        \"\"\"\n            $params.matlab_path_exception -nodesktop -nosplash -r \"mp2rage_neuromod('${sid}','$mp2rage_nii','$mp2rage_json'); exit();\"\n        \"\"\"\n        }else{\n        \"\"\"\n            $params.runcmd \"mp2rage_neuromod('${sid}','$mp2rage_nii','$mp2rage_json'); exit();\"\n        \"\"\"\n\n        }",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "mp2rage_nii",
            "mp2rage_json"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [
            "tag { sid }"
        ],
        "when": "",
        "stub": ""
    },
    "regionStatMp2rage": {
        "name_process": "regionStatMp2rage",
        "string_process": "\nprocess regionStatMp2rage{\n    \n    input:\n        val input_masks from masks_mp2rage\n        val input_maps from maps_mp2rage\n    \n    output:\n        path(\"mp2rage.csv\")\n    \n    script:\n    \"\"\"\n    export masks=\"{\\'${input_masks.join('\\', \\'')}\\'}\"\n    export maps=\"{\\'${input_maps.join('\\', \\'')}\\'}\"\n    $params.runcmd \"regionStats($masks,$maps,'mp2rage.csv')\"\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    export masks=\"{\\'${input_masks.join('\\', \\'')}\\'}\"\n    export maps=\"{\\'${input_maps.join('\\', \\'')}\\'}\"\n    $params.runcmd \"regionStats($masks,$maps,'mp2rage.csv')\"\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "masks_mp2rage",
            "maps_mp2rage"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "regionStatMTS": {
        "name_process": "regionStatMTS",
        "string_process": "\nprocess regionStatMTS{\n    \n    input:\n        val input_masks from masks_mts\n        val input_maps from maps_mts\n    \n    output:\n        path(\"mts.csv\")\n    \n    script:\n    \"\"\"\n    export masks=\"{\\'${input_masks.join('\\', \\'')}\\'}\"\n    export maps=\"{\\'${input_maps.join('\\', \\'')}\\'}\"\n    $params.runcmd \"regionStats($masks,$maps,'mts.csv')\"\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    export masks=\"{\\'${input_masks.join('\\', \\'')}\\'}\"\n    export maps=\"{\\'${input_maps.join('\\', \\'')}\\'}\"\n    $params.runcmd \"regionStats($masks,$maps,'mts.csv')\"\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "masks_mts",
            "maps_mts"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "fitMtratio": {
        "name_process": "fitMtratio",
        "string_process": "process fitMtratio{\n    tag { sid }\n\n    input:\n        tuple val(sid), file(pdw_reg), file(mtw_reg)\n        \n    output:\n        tuple val(sid), \\\n        path(\"${sid}_MTRmap.nii.gz\"), \\\n        path(\"${sid}_MTRmap.json\"), \\\n        path(\"${sid}_mt_ratio.qmrlab.mat\"), \\\n        emit: mtratio_output\n\n    script: \n        \"\"\"\n            $params.runcmd \"mt_ratio_neuromod('${sid}','$mtw_reg','$pdw_reg'); exit();\"\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n            $params.runcmd \"mt_ratio_neuromod('${sid}','$mtw_reg','$pdw_reg'); exit();\"\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "pdw_reg",
            "mtw_reg"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "courtois-neuromod__anat-processing",
        "directive": [
            "tag { sid }"
        ],
        "when": "",
        "stub": ""
    }
}
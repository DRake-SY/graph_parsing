{
    "OPERATION_1": {
        "string": "reads = Channel.fromFilePairs(\"$input*{1,2}*.fastq*\").ifEmpty { error \"Cannot find the read files\" }",
        "origin": [
            [
                "\"$input*{1,2}*.fastq*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "reads",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "bam = Channel.create()",
        "origin": [],
        "gives": [
            [
                "bam",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "assembly = Channel.create()",
        "origin": [],
        "gives": [
            [
                "assembly",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "reads.into {\n    reads_process\n    reads_trim\n}",
        "origin": [
            [
                "reads",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_5": {
        "string": "fastp_ch.into {\n        fastp_reads1\n        fastp_reads2\n        fastp_reads3\n        fastp_reads4\n    }",
        "origin": [
            [
                "fastp_ch",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_6": {
        "string": "nodup_ch.into {\n        nodup1_ch\n        nodup2_ch\n    }",
        "origin": [
            [
                "nodup_ch",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_7": {
        "string": "filter_ch.into {\n        filter1_ch\n        filter2_ch\n    }",
        "origin": [
            [
                "filter_ch",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_8": {
        "string": "stats_ch = fastp_reads4.merge(nodup2_ch).merge(filter2_ch).view()",
        "origin": [
            [
                "fastp_reads4",
                "P"
            ],
            [
                "nodup2_ch",
                "P"
            ],
            [
                "filter2_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "stats_ch",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "assembly_ch.into {\n    assembly_ch1\n    assembly_ch2\n}",
        "origin": [
            [
                "assembly_ch",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_10": {
        "string": "bam = map_ch",
        "origin": [
            [
                "map_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "bam",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "assembly_ch = shortassembly_ch",
        "origin": [
            [
                "shortassembly_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "assembly_ch",
                "P"
            ]
        ]
    }
}
{
    "FastQCPre": {
        "name_process": "FastQCPre",
        "string_process": "\nprocess FastQCPre {\n    container 'staphb/fastqc:latest'\n    tag \"$pair_id\"\n    publishDir \"$params.outdir/$pair_id\", mode: 'symlink'\n\n    when:\n    params.fastqc\n\n    input: \n    tuple val(pair_id), path(fwd_reads), path(rev_reads) from reads_prefilter_ch\n\n    output:\n    path('fastqc/prefilter/*')\n\n    script:\n    \"\"\"\n    mkdir -p ./fastqc/prefilter\n    fastqc -o ./fastqc/prefilter $fwd_reads $rev_reads \n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    mkdir -p ./fastqc/prefilter\n    fastqc -o ./fastqc/prefilter $fwd_reads $rev_reads \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "reads_prefilter_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/fastqc:latest'",
            "tag \"$pair_id\"",
            "publishDir \"$params.outdir/$pair_id\", mode: 'symlink'"
        ],
        "when": "params.fastqc",
        "stub": ""
    },
    "runBBMapReadRepair": {
        "name_process": "runBBMapReadRepair",
        "string_process": "\nprocess runBBMapReadRepair {\n    container 'staphb/bbtools:latest'\n    tag \"$pair_id\"\n\n    input:\n    tuple val(pair_id), path(fwd_reads), path(rev_reads) from read_pairs_ch\n\n    output:\n    tuple val(pair_id), path('*_R1.repaired.fastq.gz'), path('*_R2.repaired.fastq.gz') into read_pairs_repaired_ch\n\n    script:\n    \"\"\"\n    repair.sh in=$fwd_reads in2=$rev_reads out1=${pair_id}_R1.repaired.fastq.gz out2=${pair_id}_R2.repaired.fastq.gz overwrite=t\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    repair.sh in=$fwd_reads in2=$rev_reads out1=${pair_id}_R1.repaired.fastq.gz out2=${pair_id}_R2.repaired.fastq.gz overwrite=t\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_pairs_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "read_pairs_repaired_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/bbtools:latest'",
            "tag \"$pair_id\""
        ],
        "when": "",
        "stub": ""
    },
    "runBBMapAdapterTrimming": {
        "name_process": "runBBMapAdapterTrimming",
        "string_process": "\nprocess runBBMapAdapterTrimming {\n    container 'staphb/bbtools:latest'\n    tag \"$pair_id\"\n\n    input:\n    tuple val(pair_id), path(fwd_reads), path(rev_reads) from read_pairs_repaired_ch\n\n    output:\n    tuple val(pair_id), path('*_R1.trimmed.fastq.gz'), path('*_R2.trimmed.fastq.gz') into read_pairs_trimmed_ch\n\n    script:\n    \"\"\"\n    bbduk.sh in1=$fwd_reads in2=$rev_reads out1=${pair_id}_R1.trimmed.fastq.gz out2=${pair_id}_R2.trimmed.fastq.gz  ref=adapters tpe tbo overwrite=-t unbgzip=f ktrim=r k=23 mink=1 hdist=1\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    bbduk.sh in1=$fwd_reads in2=$rev_reads out1=${pair_id}_R1.trimmed.fastq.gz out2=${pair_id}_R2.trimmed.fastq.gz  ref=adapters tpe tbo overwrite=-t unbgzip=f ktrim=r k=23 mink=1 hdist=1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_pairs_repaired_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "read_pairs_trimmed_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/bbtools:latest'",
            "tag \"$pair_id\""
        ],
        "when": "",
        "stub": ""
    },
    "runBBMapQualityFiltering": {
        "name_process": "runBBMapQualityFiltering",
        "string_process": "\nprocess runBBMapQualityFiltering {\n    container 'staphb/bbtools:latest'\n    tag \"$pair_id\"\n\n    input:\n    tuple val(pair_id), path(fwd_reads), path(rev_reads) from read_pairs_trimmed_ch\n\n    output:\n    tuple val(pair_id), path('*_R1.qfilter.fastq.gz'), path('*_R2.qfilter.fastq.gz') into read_pairs_qfilter_ch\n\n    script:\n    \"\"\"\n    bbduk.sh in1=$fwd_reads in2=$rev_reads out1=${pair_id}_R1.qfilter.fastq.gz out2=${pair_id}_R2.qfilter.fastq.gz unbgzip=f qtrim=rl trimq=10\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    bbduk.sh in1=$fwd_reads in2=$rev_reads out1=${pair_id}_R1.qfilter.fastq.gz out2=${pair_id}_R2.qfilter.fastq.gz unbgzip=f qtrim=rl trimq=10\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_pairs_trimmed_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "read_pairs_qfilter_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/bbtools:latest'",
            "tag \"$pair_id\""
        ],
        "when": "",
        "stub": ""
    },
    "runBBMapReadCorrection": {
        "name_process": "runBBMapReadCorrection",
        "string_process": "\nprocess runBBMapReadCorrection {\n    container 'staphb/bbtools:latest'\n    tag \"$pair_id\"\n    publishDir \"$params.outdir/$pair_id\", mode: 'symlink'\n\n    input:\n    tuple val(pair_id), path(fwd_reads), path(rev_reads) from read_pairs_qfilter_ch\n\n    output:\n    tuple val(pair_id), path('*_R1.corrected.fastq.gz'), path('*_R2.corrected.fastq.gz') into read_pairs_corrected_ch, reads_postqc_ch\n\n    script:\n    \"\"\"\n    tadpole.sh in1=$fwd_reads in2=$rev_reads out1=${pair_id}_R1.corrected.fastq.gz out2=${pair_id}_R2.corrected.fastq.gz mode=correct\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    tadpole.sh in1=$fwd_reads in2=$rev_reads out1=${pair_id}_R1.corrected.fastq.gz out2=${pair_id}_R2.corrected.fastq.gz mode=correct\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_pairs_qfilter_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "read_pairs_corrected_ch",
            "reads_postqc_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/bbtools:latest'",
            "tag \"$pair_id\"",
            "publishDir \"$params.outdir/$pair_id\", mode: 'symlink'"
        ],
        "when": "",
        "stub": ""
    },
    "FastQCPost": {
        "name_process": "FastQCPost",
        "string_process": "\nprocess FastQCPost {\n    container 'staphb/fastqc:latest'\n    tag \"$pair_id\"\n    publishDir \"$params.outdir/$pair_id\", mode: 'symlink'\n\n    when:\n    params.fastqc\n\n    input: \n    tuple val(pair_id), path(fwd_reads), path(rev_reads) from reads_postqc_ch\n\n    output:\n    path('fastqc/postfilter/*')\n\n    script:\n    \"\"\"\n    mkdir -p ./fastqc/postfilter\n    fastqc -o ./fastqc/postfilter $fwd_reads $rev_reads \n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    mkdir -p ./fastqc/postfilter\n    fastqc -o ./fastqc/postfilter $fwd_reads $rev_reads \n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "reads_postqc_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/fastqc:latest'",
            "tag \"$pair_id\"",
            "publishDir \"$params.outdir/$pair_id\", mode: 'symlink'"
        ],
        "when": "params.fastqc",
        "stub": ""
    },
    "runSKESA": {
        "name_process": "runSKESA",
        "string_process": "\nprocess runSKESA {\n    container 'staphb/skesa:latest'\n    tag \"$pair_id\"\n\n    input:\n    tuple val(pair_id), path(fwd_reads), path(rev_reads) from read_pairs_corrected_ch\n\n    output:\n    tuple val(pair_id), path(fwd_reads), path(rev_reads), path('*.fasta') into assembly_ch\n\n    script:\n    \"\"\"\n    skesa --use_paired_ends --fastq \"$fwd_reads,$rev_reads\" --contigs_out ${pair_id}.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    skesa --use_paired_ends --fastq \"$fwd_reads,$rev_reads\" --contigs_out ${pair_id}.fasta\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_pairs_corrected_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "assembly_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/skesa:latest'",
            "tag \"$pair_id\""
        ],
        "when": "",
        "stub": ""
    },
    "produceBAM": {
        "name_process": "produceBAM",
        "string_process": "\nprocess produceBAM {\n    container 'staphb/bbtools:latest'\n    tag \"$pair_id\"\n\n    input:\n    tuple val(pair_id), path(fwd_reads), path(rev_reads), path(assembly) from assembly_ch\n\n    output:\n    tuple val(pair_id), path(assembly), path('*.bam') into bam_ch\n\n    script:\n    \"\"\"\n    bbmap.sh in1=$fwd_reads in2=$rev_reads ref=$assembly out=${pair_id}.bam overwrite=t deterministic=t\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    bbmap.sh in1=$fwd_reads in2=$rev_reads ref=$assembly out=${pair_id}.bam overwrite=t deterministic=t\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "assembly_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/bbtools:latest'",
            "tag \"$pair_id\""
        ],
        "when": "",
        "stub": ""
    },
    "sortBAM": {
        "name_process": "sortBAM",
        "string_process": "\nprocess sortBAM {\n    container 'staphb/samtools:latest'\n    tag \"$pair_id\"\n    publishDir \"$params.outdir/$pair_id\", mode: 'symlink'\n\n    input:\n    tuple val(pair_id), path(assembly), path(bamfile) from bam_ch\n\n    output:\n    tuple val(pair_id), path(assembly), path('*.sorted.bam') into sorted_bam_ch\n\n    script:\n    \"\"\"\n    samtools sort --output-fmt BAM -o ${pair_id}.sorted.bam $bamfile\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    samtools sort --output-fmt BAM -o ${pair_id}.sorted.bam $bamfile\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sorted_bam_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/samtools:latest'",
            "tag \"$pair_id\"",
            "publishDir \"$params.outdir/$pair_id\", mode: 'symlink'"
        ],
        "when": "",
        "stub": ""
    },
    "indexBAM": {
        "name_process": "indexBAM",
        "string_process": "\nprocess indexBAM {\n    container 'staphb/samtools:latest'\n    tag \"$pair_id\"\n    publishDir \"$params.outdir/$pair_id\", mode: 'symlink'\n\n\n    input:\n    tuple val(pair_id), path(assembly), path(sorted_bamfile) from sorted_bam_ch\n\n    output:\n    tuple val(pair_id), path(assembly), path(sorted_bamfile), path('*.bai') into indexed_bam_ch, bamqc_ch\n\n    script:\n    \"\"\"\n    samtools index $sorted_bamfile\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    samtools index $sorted_bamfile\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sorted_bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "indexed_bam_ch",
            "bamqc_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/samtools:latest'",
            "tag \"$pair_id\"",
            "publishDir \"$params.outdir/$pair_id\", mode: 'symlink'"
        ],
        "when": "",
        "stub": ""
    },
    "runPilon": {
        "name_process": "runPilon",
        "string_process": "\nprocess runPilon {\n    container 'staphb/pilon:latest'\n    tag \"$pair_id\"\n    publishDir \"$params.outdir/$pair_id\", mode: 'symlink'\n\n    input:\n    tuple val(pair_id), path(assembly), path(indexed_bamfile), path(bam_indexfile) from indexed_bam_ch\n\n                                                                                        \n    output:\n    tuple val(pair_id), path(assembly) into polished_assembly_ch1,\n                polished_assembly_ch2,\n                polished_assembly_ch3,\n                polished_assembly_ch4,\n                polished_assembly_ch5,\n                polished_assembly_ch6,\n                polished_assembly_ch7\n\n    script:\n    \"\"\"\n    pilon --genome $assembly --bam $indexed_bamfile --outdir $params.outdir --output $pair_id\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    pilon --genome $assembly --bam $indexed_bamfile --outdir $params.outdir --output $pair_id\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "pilon"
        ],
        "tools_url": [
            "https://bio.tools/pilon"
        ],
        "tools_dico": [
            {
                "name": "pilon",
                "uri": "https://bio.tools/pilon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2945",
                                    "term": "Analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Read alignment analysis to diagnose, report, and automatically improve de novo genome assemblies.",
                "homepage": "http://www.broadinstitute.org/software/pilon/"
            }
        ],
        "inputs": [
            "indexed_bam_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "polished_assembly_ch1",
            "polished_assembly_ch2",
            "polished_assembly_ch3",
            "polished_assembly_ch4",
            "polished_assembly_ch5",
            "polished_assembly_ch6",
            "polished_assembly_ch7"
        ],
        "nb_outputs": 7,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/pilon:latest'",
            "tag \"$pair_id\"",
            "publishDir \"$params.outdir/$pair_id\", mode: 'symlink'"
        ],
        "when": "",
        "stub": ""
    },
    "runQuast": {
        "name_process": "runQuast",
        "string_process": "\nprocess runQuast {\n    container 'staphb/quast:latest'\n    tag \"$pair_id\"\n    publishDir \"$params.outdir/$pair_id\", mode: 'symlink'\n\n    when:\n    params.quast\n\n    input:\n    tuple val(pair_id), path(assembly) from polished_assembly_ch7\n\n    output:\n    path('quast/*')\n\n    script:\n    \"\"\"\n    mkdir -p ./quast\n    quast.py -o ./quast --labels $pair_id --glimmer --no-plots --no-icarus --no-snps $assembly\n    \"\"\"\n\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    mkdir -p ./quast\n    quast.py -o ./quast --labels $pair_id --glimmer --no-plots --no-icarus --no-snps $assembly\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "polished_assembly_ch7"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/quast:latest'",
            "tag \"$pair_id\"",
            "publishDir \"$params.outdir/$pair_id\", mode: 'symlink'"
        ],
        "when": "params.quast",
        "stub": ""
    },
    "runProkka": {
        "name_process": "runProkka",
        "string_process": "\nprocess runProkka {\n    container 'staphb/prokka:latest'\n    tag \"$pair_id\"\n    publishDir \"$params.outdir/$pair_id/\", mode: 'symlink'\n\n    when:\n    params.annotate\n\n    input:\n    tuple val(pair_id), path(assembly) from polished_assembly_ch1\n\n    output:\n    path('prokka/*')\n\n    script:\n    \"\"\"\n    mkdir -p prokka\n    prokka --centre BFSSI --compliant --prefix $pair_id --locustag $pair_id --force --outdir ./prokka $assembly\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    mkdir -p prokka\n    prokka --centre BFSSI --compliant --prefix $pair_id --locustag $pair_id --force --outdir ./prokka $assembly\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "polished_assembly_ch1"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/prokka:latest'",
            "tag \"$pair_id\"",
            "publishDir \"$params.outdir/$pair_id/\", mode: 'symlink'"
        ],
        "when": "params.annotate",
        "stub": ""
    },
    "runStarAMR": {
        "name_process": "runStarAMR",
        "string_process": "\nprocess runStarAMR {\n    container 'staphb/staramr:latest'\n    tag \"$pair_id\"\n    publishDir \"$params.outdir/$pair_id/\", mode: 'symlink'\n\n    when:\n    params.staramr\n\n    input:\n    tuple pair_id, file(assembly) from polished_assembly_ch2\n\n    output:\n    path('staramr/*')\n\n                                                                                                                              \n                                                                                                                 \n    script:\n    \"\"\"\n    rm -rf ./staramr\n\tstaramr search --genome-size-lower-bound 100 --genome-size-upper-bound 8000000 --minimum-N50-value 5000 --minimum-contig-length 250 -o ./staramr $assembly\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    rm -rf ./staramr\n\tstaramr search --genome-size-lower-bound 100 --genome-size-upper-bound 8000000 --minimum-N50-value 5000 --minimum-contig-length 250 -o ./staramr $assembly\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "polished_assembly_ch2"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/staramr:latest'",
            "tag \"$pair_id\"",
            "publishDir \"$params.outdir/$pair_id/\", mode: 'symlink'"
        ],
        "when": "params.staramr",
        "stub": ""
    },
    "runAbricate": {
        "name_process": "runAbricate",
        "string_process": "\nprocess runAbricate {\n    container 'staphb/abricate:latest'\n    tag \"$pair_id\"\n    publishDir \"$params.outdir/$pair_id/\", mode: 'symlink'\n\n    when:\n    params.abricate\n\n    input:\n    tuple pair_id, file(assembly) from polished_assembly_ch6\n    val(abricate_db) from params.abricate_db\n\n    output:\n    path('abricate/*')\n\n                                                                                                       \n    script:\n    \"\"\"\n    mkdir -p abricate\n    abricate --db $abricate_db $assembly > ./abricate/${pair_id}_${abricate_db}.tab\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    mkdir -p abricate\n    abricate --db $abricate_db $assembly > ./abricate/${pair_id}_${abricate_db}.tab\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "ABRicate"
        ],
        "tools_url": [
            "https://bio.tools/ABRicate"
        ],
        "tools_dico": [
            {
                "name": "ABRicate",
                "uri": "https://bio.tools/ABRicate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0916",
                                "term": "Gene report"
                            }
                        ]
                    }
                ],
                "description": "Mass screening of contigs for antimicrobial resistance or virulence genes.",
                "homepage": "https://github.com/tseemann/abricate"
            }
        ],
        "inputs": [
            "polished_assembly_ch6",
            "params"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/abricate:latest'",
            "tag \"$pair_id\"",
            "publishDir \"$params.outdir/$pair_id/\", mode: 'symlink'"
        ],
        "when": "params.abricate",
        "stub": ""
    },
    "runMobRecon": {
        "name_process": "runMobRecon",
        "string_process": "\nprocess runMobRecon {\n    container 'kbessonov/mob_suite:3.0.1'\n    tag \"$pair_id\"\n    publishDir \"$params.outdir/$pair_id/\", mode: 'symlink'\n\n    when:\n    params.plasmids\n\n    input:\n    tuple pair_id, file(assembly) from polished_assembly_ch3\n\n    output:\n    path('plasmids/*')\n\n    script:\n    \"\"\"\n    mkdir -p plasmids\n    mob_recon --infile $assembly -o ./plasmids --run_typer --force\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    mkdir -p plasmids\n    mob_recon --infile $assembly -o ./plasmids --run_typer --force\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "polished_assembly_ch3"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'kbessonov/mob_suite:3.0.1'",
            "tag \"$pair_id\"",
            "publishDir \"$params.outdir/$pair_id/\", mode: 'symlink'"
        ],
        "when": "params.plasmids",
        "stub": ""
    },
    "runMLST": {
        "name_process": "runMLST",
        "string_process": "\nprocess runMLST {\n    container 'staphb/mlst:latest'\n    tag \"$pair_id\"\n    publishDir \"$params.outdir/$pair_id/mlst\", mode: 'symlink'\n\n    when:\n    params.mlst\n\n    input:\n    tuple pair_id, file(assembly) from polished_assembly_ch4\n\n    output:\n    path('*_mlst.tsv')\n\n    script:\n    \"\"\"\n    mlst $assembly > ${pair_id}_mlst.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    mlst $assembly > ${pair_id}_mlst.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MLST"
        ],
        "tools_url": [
            "https://bio.tools/mlst"
        ],
        "tools_dico": [
            {
                "name": "MLST",
                "uri": "https://bio.tools/mlst",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Multi Locus Sequence Typing from an assembled genome or from a set of reads.",
                "homepage": "http://cge.cbs.dtu.dk/services/MLST/"
            }
        ],
        "inputs": [
            "polished_assembly_ch4"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BFSSI-Bioinformatics-Lab__bfssi-assembly-pipeline",
        "directive": [
            "container 'staphb/mlst:latest'",
            "tag \"$pair_id\"",
            "publishDir \"$params.outdir/$pair_id/mlst\", mode: 'symlink'"
        ],
        "when": "params.mlst",
        "stub": ""
    }
}
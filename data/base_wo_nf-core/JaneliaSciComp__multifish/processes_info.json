{
    "prepare_spots_dirs": {
        "name_process": "prepare_spots_dirs",
        "string_process": "\nprocess prepare_spots_dirs {\n    label 'small'\n\n    container { params.airlocalize_container }\n    \n    input:\n    val(spots_path)\n\n    output:\n    val(spots_path)\n\n    script:\n    \"\"\"\n    mkdir -p ${spots_path}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    mkdir -p ${spots_path}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "spots_path"
        ],
        "nb_inputs": 1,
        "outputs": [
            "spots_path"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "label 'small'",
            "container { params.airlocalize_container }"
        ],
        "when": "",
        "stub": ""
    },
    "postprocess_spots": {
        "name_process": "postprocess_spots",
        "string_process": "\nprocess postprocess_spots {\n    label 'small'\n\n    container { params.airlocalize_container }\n\n    input:\n    val(n5_path)\n    val(ch)\n    val(scale)\n    val(spots_voxels)\n    val(spots_microns)\n\n    output:\n    tuple val(n5_path), val(ch), val(scale), val(spots_microns), val(spots_voxels)\n\n    script:\n    args_list = [\n        spots_voxels,\n        spots_microns,\n        n5_path,\n        \"/$ch/$scale\"\n    ]\n    args = args_list.join(' ')\n    \"\"\"\n    echo \"python /app/airlocalize/scripts/post_rsfish.py ${args}\"\n    python /app/airlocalize/scripts/post_rsfish.py ${args}\n    \"\"\"\n\n}",
        "nb_lignes_process": 28,
        "string_script": "    args_list = [\n        spots_voxels,\n        spots_microns,\n        n5_path,\n        \"/$ch/$scale\"\n    ]\n    args = args_list.join(' ')\n    \"\"\"\n    echo \"python /app/airlocalize/scripts/post_rsfish.py ${args}\"\n    python /app/airlocalize/scripts/post_rsfish.py ${args}\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "n5_path",
            "ch",
            "scale",
            "spots_voxels",
            "spots_microns"
        ],
        "nb_inputs": 5,
        "outputs": [
            "spots_voxels"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "label 'small'",
            "container { params.airlocalize_container }"
        ],
        "when": "",
        "stub": ""
    },
    "prepare_stitching_data": {
        "name_process": "prepare_stitching_data",
        "string_process": "process prepare_stitching_data {\n    label 'small'\n    \n    container { params.stitching_container }\n\n    input:\n    val(input_dir)\n    val(output_dir)\n    val(acq_name)\n    val(stitching_output)\n\n    output:\n    tuple val(acq_name), val(stitching_dir)\n\n    script:\n    acq_output_dir = \"${output_dir}/${acq_name}\"\n    stitching_dir = stitching_output == ''\n        ? acq_output_dir\n        : \"${acq_output_dir}/${stitching_output}\"\n    mvl = \"${input_dir}/${acq_name}.mvl\"\n    mvl_link_dir = \"${stitching_dir}\"\n    czi = \"${input_dir}/${acq_name}*.czi\"\n    czi_link_dir = \"${stitching_dir}\"\n    \"\"\"\n    umask 0002\n    mkdir -p ${stitching_dir}\n    ln -s ${mvl} ${mvl_link_dir} || true\n    ln -s ${czi} ${czi_link_dir} || true\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    acq_output_dir = \"${output_dir}/${acq_name}\"\n    stitching_dir = stitching_output == ''\n        ? acq_output_dir\n        : \"${acq_output_dir}/${stitching_output}\"\n    mvl = \"${input_dir}/${acq_name}.mvl\"\n    mvl_link_dir = \"${stitching_dir}\"\n    czi = \"${input_dir}/${acq_name}*.czi\"\n    czi_link_dir = \"${stitching_dir}\"\n    \"\"\"\n    umask 0002\n    mkdir -p ${stitching_dir}\n    ln -s ${mvl} ${mvl_link_dir} || true\n    ln -s ${czi} ${czi_link_dir} || true\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_dir",
            "output_dir",
            "acq_name",
            "stitching_output"
        ],
        "nb_inputs": 4,
        "outputs": [
            "stitching_dir"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "label 'small'",
            "container { params.stitching_container }"
        ],
        "when": "",
        "stub": ""
    },
    "download": {
        "name_process": "download",
        "string_process": "\nprocess download {\n    label 'small'\n    stageInMode 'copy'\n\n    container { params.downloader_container }\n    containerOptions { create_container_options([ file(output_dir).parent ]) }\n\n    input:\n    tuple file(manifest_file), val(output_dir)\n\n    output:\n    val(output_dir)\n\n    script:\n    \"\"\"\n    download_dataset.sh \"${manifest_file}\" \"${output_dir}\" \"${params.verify_md5}\"\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    download_dataset.sh \"${manifest_file}\" \"${output_dir}\" \"${params.verify_md5}\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "output_dir",
            "manifest_file"
        ],
        "nb_inputs": 2,
        "outputs": [
            "output_dir"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "label 'small'",
            "stageInMode 'copy'",
            "container { params.downloader_container }",
            "containerOptions { create_container_options([ file(output_dir).parent ]) }"
        ],
        "when": "",
        "stub": ""
    },
    "publish": {
        "name_process": "publish",
        "string_process": "\nprocess publish {\n    label 'small'\n\n    container { params.downloader_container }\n    containerOptions { create_container_options([ file(publish_dir).parent ]) }\n\n    input:\n    tuple val(output_dir), val(publish_dir)\n\n    output:\n    val(output_dir)\n\n    script:\n    \"\"\"\n    mkdir -p \"${publish_dir}\"\n    rsync -a --include=\"*/stitching/export.n5/\" --exclude stitching/* \"${output_dir}/\" \"${publish_dir}/\"\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    mkdir -p \"${publish_dir}\"\n    rsync -a --include=\"*/stitching/export.n5/\" --exclude stitching/* \"${output_dir}/\" \"${publish_dir}/\"\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "output_dir",
            "publish_dir"
        ],
        "nb_inputs": 2,
        "outputs": [
            "output_dir"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "label 'small'",
            "container { params.downloader_container }",
            "containerOptions { create_container_options([ file(publish_dir).parent ]) }"
        ],
        "when": "",
        "stub": ""
    },
    "assign_spots": {
        "name_process": "assign_spots",
        "string_process": "process assign_spots {\n    container { params.spots_assignment_container }\n    cpus { params.assign_spots_cpus }\n    memory { params.assign_spots_memory }\n\n    input:\n    val(labels_path)\n    val(spots_path)\n    val(output_path)\n    val(n5_path)\n    val(subpath)\n\n    output:\n    tuple val(labels_path), val(spots_path), val(output_path)\n\n    script:\n    args_list = [\n        labels_path,\n        \"\\\"${spots_path}/spots_*.txt\\\"\",\n        output_path,\n        n5_path,\n        subpath\n    ]\n    args = args_list.join(' ')\n    \"\"\"\n    umask 0002\n    mkdir -p ${output_path}\n    echo \"python /app/scripts/assign_spots.py ${args}\"\n    python /app/scripts/assign_spots.py ${args}\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    args_list = [\n        labels_path,\n        \"\\\"${spots_path}/spots_*.txt\\\"\",\n        output_path,\n        n5_path,\n        subpath\n    ]\n    args = args_list.join(' ')\n    \"\"\"\n    umask 0002\n    mkdir -p ${output_path}\n    echo \"python /app/scripts/assign_spots.py ${args}\"\n    python /app/scripts/assign_spots.py ${args}\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "psSubpathway",
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/psSubpathway",
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "psSubpathway",
                "uri": "https://bio.tools/psSubpathway",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3360",
                            "term": "Biomarkers"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3360",
                            "term": "Diagnostic markers"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3083",
                                    "term": "Pathway or network visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0571",
                                    "term": "Expression data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2943",
                                    "term": "Box-Whisker plot plotting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0571",
                                    "term": "Expression data rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2943",
                                    "term": "Box plot plotting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "a software package for flexible identification of phenotype-specific subpathways in cancer progression.\n\nFlexible Identification of Phenotype-Specific Subpathways.\n\nA network-based systems biology tool for flexible identification of phenotype-specific subpathways in the cancer gene expression data with multiple categories (such as multiple subtype or developmental stages of cancer)",
                "homepage": "https://cran.r-project.org/web/packages/psSubpathway/"
            },
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "labels_path",
            "spots_path",
            "output_path",
            "n5_path",
            "subpath"
        ],
        "nb_inputs": 5,
        "outputs": [
            "output_path"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "container { params.spots_assignment_container }",
            "cpus { params.assign_spots_cpus }",
            "memory { params.assign_spots_memory }"
        ],
        "when": "",
        "stub": ""
    },
    "measure_intensities": {
        "name_process": "measure_intensities",
        "string_process": "process measure_intensities {\n    container { params.spots_assignment_container }\n    cpus { params.measure_intensities_cpus }\n    memory { params.measure_intensities_memory }\n\n    input:\n    val(labels_path)\n    val(registered_image_path)\n    val(result_name)\n    val(ch)\n    val(scale)\n    val(output_path)\n    val(dapi_channel)\n    val(bleed_channel)\n    val(cpus)\n\n    output:\n    tuple val(labels_path), val(registered_image_path), val(ch), val(output_path)\n\n    script:\n    def args_list = [\n        labels_path,\n        registered_image_path,\n        output_path,\n        result_name,\n        ch,\n        scale,\n        dapi_channel,\n        bleed_channel\n\n    ]\n    def args = args_list.join(' ')\n    \"\"\"\n    umask 0002\n    mkdir -p ${output_path}\n    echo \"python /app/scripts/intensity_measurements.py ${args}\"\n    python /app/scripts/intensity_measurements.py ${args}\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    def args_list = [\n        labels_path,\n        registered_image_path,\n        output_path,\n        result_name,\n        ch,\n        scale,\n        dapi_channel,\n        bleed_channel\n\n    ]\n    def args = args_list.join(' ')\n    \"\"\"\n    umask 0002\n    mkdir -p ${output_path}\n    echo \"python /app/scripts/intensity_measurements.py ${args}\"\n    python /app/scripts/intensity_measurements.py ${args}\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "labels_path",
            "registered_image_path",
            "result_name",
            "ch",
            "scale",
            "output_path",
            "dapi_channel",
            "bleed_channel",
            "cpus"
        ],
        "nb_inputs": 9,
        "outputs": [
            "output_path"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "container { params.spots_assignment_container }",
            "cpus { params.measure_intensities_cpus }",
            "memory { params.measure_intensities_memory }"
        ],
        "when": "",
        "stub": ""
    },
    "predict": {
        "name_process": "predict",
        "string_process": "process predict {\n    label 'withGPU'\n\n    container { params.segmentation_container }\n    cpus { params.segmentation_cpus }\n    memory { params.segmentation_memory }\n\n    input:\n    val(image_path)\n    val(ch)\n    val(scale)\n    val(model_path)\n    val(output_path)\n\n    output:\n    tuple val(image_path), val(output_path)\n\n    script:\n    def output_file = file(output_path)\n    args_list = [\n        '-i', image_path,\n        '-m', model_path,\n        '-c', ch,\n        '-s', scale,\n        '-o', output_path\n    ]\n    args = args_list.join(' ')\n    \"\"\"\n    mkdir -p ${output_file.parent}\n    echo \"python /app/segmentation/scripts/starfinity_prediction.py ${args}\"\n    python /app/segmentation/scripts/starfinity_prediction.py ${args}\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def output_file = file(output_path)\n    args_list = [\n        '-i', image_path,\n        '-m', model_path,\n        '-c', ch,\n        '-s', scale,\n        '-o', output_path\n    ]\n    args = args_list.join(' ')\n    \"\"\"\n    mkdir -p ${output_file.parent}\n    echo \"python /app/segmentation/scripts/starfinity_prediction.py ${args}\"\n    python /app/segmentation/scripts/starfinity_prediction.py ${args}\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "image_path",
            "ch",
            "scale",
            "model_path",
            "output_path"
        ],
        "nb_inputs": 5,
        "outputs": [
            "output_path"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "label 'withGPU'",
            "container { params.segmentation_container }",
            "cpus { params.segmentation_cpus }",
            "memory { params.segmentation_memory }"
        ],
        "when": "",
        "stub": ""
    },
    "collect_merged_points_files": {
        "name_process": "collect_merged_points_files",
        "string_process": "process collect_merged_points_files {\n    label \"small\"\n    \n    container { params.registration_container }\n \n    input:\n    val(merged_points_dir)\n\n    output:\n    tuple val(merged_points_dir), env(merged_points_files_res)\n\n    script:\n    \"\"\"\n    merged_points_files=`ls ${merged_points_dir}/spots_c*.txt || true`\n    if [[ -z \\${merged_points_files} ]]; then\n        merged_points_files_res=${merged_points_dir}\n    else\n        merged_points_files_res=\\${merged_points_files}\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    merged_points_files=`ls ${merged_points_dir}/spots_c*.txt || true`\n    if [[ -z \\${merged_points_files} ]]; then\n        merged_points_files_res=${merged_points_dir}\n    else\n        merged_points_files_res=\\${merged_points_files}\n    fi\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "merged_points_dir"
        ],
        "nb_inputs": 1,
        "outputs": [
            "merged_points_dir"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "label \"small\"",
            "container { params.registration_container }"
        ],
        "when": "",
        "stub": ""
    },
    "cut_tiles": {
        "name_process": "cut_tiles",
        "string_process": "process cut_tiles {\n    label 'small'\n\n    container { params.airlocalize_container }\n\n    input:\n    val(image_path)\n    val(ch)\n    val(scale)\n    val(tiles_dir)\n    val(xy_stride)\n    val(xy_overlap)\n    val(z_stride)\n    val(z_overlap)\n\n    output:\n    tuple val(image_path), env(CUT_TILES_RES)\n\n    script:\n    args_list = [\n        \"${image_path}\",\n        \"/${ch}/${scale}\",\n        tiles_dir,\n        xy_stride,\n        xy_overlap,\n        z_stride,\n        z_overlap\n    ]\n    args = args_list.join(' ')\n    \"\"\"\n    umask 0002\n    mkdir -p ${tiles_dir}\n    echo \"python /app/airlocalize/scripts/cut_tiles.py ${args}\"\n    python /app/airlocalize/scripts/cut_tiles.py ${args}\n    CUT_TILES_RES=`ls -d ${tiles_dir}/*[0-9]`\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    args_list = [\n        \"${image_path}\",\n        \"/${ch}/${scale}\",\n        tiles_dir,\n        xy_stride,\n        xy_overlap,\n        z_stride,\n        z_overlap\n    ]\n    args = args_list.join(' ')\n    \"\"\"\n    umask 0002\n    mkdir -p ${tiles_dir}\n    echo \"python /app/airlocalize/scripts/cut_tiles.py ${args}\"\n    python /app/airlocalize/scripts/cut_tiles.py ${args}\n    CUT_TILES_RES=`ls -d ${tiles_dir}/*[0-9]`\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "image_path",
            "ch",
            "scale",
            "tiles_dir",
            "xy_stride",
            "xy_overlap",
            "z_stride",
            "z_overlap"
        ],
        "nb_inputs": 8,
        "outputs": [
            "image_path"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "label 'small'",
            "container { params.airlocalize_container }"
        ],
        "when": "",
        "stub": ""
    },
    "ransac": {
        "name_process": "ransac",
        "string_process": "\nprocess ransac {\n    container { params.registration_container }\n    cpus { params.ransac_cpus }\n    memory { params.ransac_memory }\n\n    input:\n    val(fixed_spots_file)                   \n    val(moving_spots_file)                    \n    val(output_dir)\n    val(output_filename)\n    val(cutoff)\n    val(threshold)\n\n    output:\n    tuple val(output_dir), val(output_path)\n\n    script:\n    output_path = \"${output_dir}/${output_filename}\"\n    \"\"\"\n    umask 0002\n    mkdir -p ${output_dir}\n    /app/scripts/waitforpaths.sh ${fixed_spots_file} ${moving_spots_file}\n    /entrypoint.sh ransac ${fixed_spots_file} ${moving_spots_file} ${output_path} $cutoff $threshold\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    output_path = \"${output_dir}/${output_filename}\"\n    \"\"\"\n    umask 0002\n    mkdir -p ${output_dir}\n    /app/scripts/waitforpaths.sh ${fixed_spots_file} ${moving_spots_file}\n    /entrypoint.sh ransac ${fixed_spots_file} ${moving_spots_file} ${output_path} $cutoff $threshold\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fixed_spots_file",
            "moving_spots_file",
            "output_dir",
            "output_filename",
            "cutoff",
            "threshold"
        ],
        "nb_inputs": 6,
        "outputs": [
            "output_path"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "container { params.registration_container }",
            "cpus { params.ransac_cpus }",
            "memory { params.ransac_memory }"
        ],
        "when": "",
        "stub": ""
    },
    "apply_transform": {
        "name_process": "apply_transform",
        "string_process": "\nprocess apply_transform {\n    container { params.registration_container }\n    cpus { cpus }\n    memory { memory }\n\n    input:\n    val(ref_image_path)\n    val(ref_image_subpath)\n    val(mov_image_path)\n    val(mov_image_subpath)\n    val(txm_path)\n    val(output_path)\n    val(points_path)\n    val(cpus)\n    val(memory)\n\n    output:\n    tuple val(output_path), val(ref_image_subpath)\n\n    script:\n    def output_parent_dir = file(output_path).parent\n    def args_list = [\n        ref_image_path,\n        ref_image_subpath,\n        mov_image_path,\n        mov_image_subpath,\n        txm_path,\n        output_path,\n        points_path\n    ]\n    def args = args_list.join(' ')\n    \"\"\"\n    echo \"Apply transform\"\n    umask 0002\n    mkdir -p ${output_parent_dir}\n    # Must remove the output directory, or we get a zarr.errors.ContainsArrayError if it already exists\n    rm -rf ${output_path}${ref_image_subpath} || true\n    /app/scripts/waitforpaths.sh ${ref_image_path}${ref_image_subpath} ${mov_image_path}${mov_image_subpath} ${txm_path}\n    /entrypoint.sh apply_transform_n5 ${args}\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    def output_parent_dir = file(output_path).parent\n    def args_list = [\n        ref_image_path,\n        ref_image_subpath,\n        mov_image_path,\n        mov_image_subpath,\n        txm_path,\n        output_path,\n        points_path\n    ]\n    def args = args_list.join(' ')\n    \"\"\"\n    echo \"Apply transform\"\n    umask 0002\n    mkdir -p ${output_parent_dir}\n    # Must remove the output directory, or we get a zarr.errors.ContainsArrayError if it already exists\n    rm -rf ${output_path}${ref_image_subpath} || true\n    /app/scripts/waitforpaths.sh ${ref_image_path}${ref_image_subpath} ${mov_image_path}${mov_image_subpath} ${txm_path}\n    /entrypoint.sh apply_transform_n5 ${args}\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref_image_path",
            "ref_image_subpath",
            "mov_image_path",
            "mov_image_subpath",
            "txm_path",
            "output_path",
            "points_path",
            "cpus",
            "memory"
        ],
        "nb_inputs": 9,
        "outputs": [
            "ref_image_subpath"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "container { params.registration_container }",
            "cpus { cpus }",
            "memory { memory }"
        ],
        "when": "",
        "stub": ""
    },
    "coarse_spots": {
        "name_process": "coarse_spots",
        "string_process": "\nprocess coarse_spots {\n    container { params.registration_container }\n    cpus { params.coarse_spots_cpus }\n    memory { params.coarse_spots_memory }\n\n    input:\n    val(image_path)\n    val(image_subpath)\n    val(output_dir)\n    val(output_filename)\n    val(radius)\n    val(spotNum)\n\n    output:\n    tuple val(image_path), val(output_dir), val(output_path)\n\n    script:\n    output_path = \"${output_dir}/${output_filename}\"\n    \"\"\"\n    umask 0002\n    mkdir -p ${output_dir}\n    /app/scripts/waitforpaths.sh ${image_path}${image_subpath}\n    /entrypoint.sh spots coarse ${image_path} ${image_subpath} ${output_path} ${radius} ${spotNum}\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    output_path = \"${output_dir}/${output_filename}\"\n    \"\"\"\n    umask 0002\n    mkdir -p ${output_dir}\n    /app/scripts/waitforpaths.sh ${image_path}${image_subpath}\n    /entrypoint.sh spots coarse ${image_path} ${image_subpath} ${output_path} ${radius} ${spotNum}\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "image_path",
            "image_subpath",
            "output_dir",
            "output_filename",
            "radius",
            "spotNum"
        ],
        "nb_inputs": 6,
        "outputs": [
            "output_path"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "container { params.registration_container }",
            "cpus { params.coarse_spots_cpus }",
            "memory { params.coarse_spots_memory }"
        ],
        "when": "",
        "stub": ""
    },
    "spots": {
        "name_process": "spots",
        "string_process": "\nprocess spots {\n    container { params.registration_container }\n    cpus { params.spots_cpus }\n    memory { params.spots_memory }\n\n    input:\n    val(image_path)\n    val(image_subpath)\n    val(tile_dir)\n    val(output_filename)\n    val(radius)\n    val(spotNum)\n\n    output:\n    tuple val(image_path), val(tile_dir), val(output_path)\n\n    script:\n    output_path = \"${tile_dir}/${output_filename}\"\n    \"\"\"\n    /app/scripts/waitforpaths.sh ${image_path}${image_subpath}\n    /entrypoint.sh spots ${tile_dir}/coords.txt ${image_path} ${image_subpath} ${output_path} ${radius} ${spotNum}\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    output_path = \"${tile_dir}/${output_filename}\"\n    \"\"\"\n    /app/scripts/waitforpaths.sh ${image_path}${image_subpath}\n    /entrypoint.sh spots ${tile_dir}/coords.txt ${image_path} ${image_subpath} ${output_path} ${radius} ${spotNum}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "image_path",
            "image_subpath",
            "tile_dir",
            "output_filename",
            "radius",
            "spotNum"
        ],
        "nb_inputs": 6,
        "outputs": [
            "output_path"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "container { params.registration_container }",
            "cpus { params.spots_cpus }",
            "memory { params.spots_memory }"
        ],
        "when": "",
        "stub": ""
    },
    "interpolate_affines": {
        "name_process": "interpolate_affines",
        "string_process": "\nprocess interpolate_affines {\n    container { params.registration_container }\n    cpus { params.interpolate_cpus }\n    memory { params.interpolate_memory }\n\n    input:\n    val(tiles_dir)\n\n    output:\n    val(interpolated_dir)\n\n    script:\n    interpolated_dir = tiles_dir\n    \"\"\"\n    umask 0002\n    /entrypoint.sh interpolate_affines ${interpolated_dir}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    interpolated_dir = tiles_dir\n    \"\"\"\n    umask 0002\n    /entrypoint.sh interpolate_affines ${interpolated_dir}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tiles_dir"
        ],
        "nb_inputs": 1,
        "outputs": [
            "interpolated_dir"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "container { params.registration_container }",
            "cpus { params.interpolate_cpus }",
            "memory { params.interpolate_memory }"
        ],
        "when": "",
        "stub": ""
    },
    "deform": {
        "name_process": "deform",
        "string_process": "\nprocess deform {\n    container { params.registration_container }\n    cpus { params.deform_cpus }\n    memory { params.deform_memory }\n\n    input:\n    val(tile)\n    val(image_path)\n    val(image_subpath)\n    val(ransac_affine)\n    val(ransac_affine_subpath)\n    val(deform_iterations)\n    val(deform_auto_mask)\n\n    output:\n    tuple val(tile), val(image_path), val(deform_output)\n\n    script:\n    deform_output = \"$tile/warp.nrrd\"\n    \"\"\"\n    umask 0002\n    /app/scripts/waitforpaths.sh ${image_path}${image_subpath} ${ransac_affine}${ransac_affine_subpath}\n    /entrypoint.sh deform $image_path $image_subpath $ransac_affine $ransac_affine_subpath $tile/coords.txt $deform_output $tile/ransac_affine.mat $tile/final_lcc.nrrd $tile/invwarp.nrrd $deform_iterations $deform_auto_mask\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    deform_output = \"$tile/warp.nrrd\"\n    \"\"\"\n    umask 0002\n    /app/scripts/waitforpaths.sh ${image_path}${image_subpath} ${ransac_affine}${ransac_affine_subpath}\n    /entrypoint.sh deform $image_path $image_subpath $ransac_affine $ransac_affine_subpath $tile/coords.txt $deform_output $tile/ransac_affine.mat $tile/final_lcc.nrrd $tile/invwarp.nrrd $deform_iterations $deform_auto_mask\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tile",
            "image_path",
            "image_subpath",
            "ransac_affine",
            "ransac_affine_subpath",
            "deform_iterations",
            "deform_auto_mask"
        ],
        "nb_inputs": 7,
        "outputs": [
            "deform_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "container { params.registration_container }",
            "cpus { params.deform_cpus }",
            "memory { params.deform_memory }"
        ],
        "when": "",
        "stub": ""
    },
    "stitch": {
        "name_process": "stitch",
        "string_process": "\nprocess stitch {\n    container { params.registration_container }\n    cpus { params.registration_stitch_cpus }\n    memory { params.registration_stitch_memory }\n\n    input:\n    val(tile)\n    val(xy_overlap)\n    val(z_overlap)\n    val(image_path)\n    val(image_subpath)\n    val(ransac_affine_mat)\n    val(transform_dir)\n    val(invtransform_dir)\n    val(output_subpath)\n\n    output:\n    tuple val(tile),\n          val(image_path),\n          val(transform_dir),\n          val(invtransform_dir),\n          val(transform_output),\n          val(invtransform_output)\n\n    script:\n    transform_output = \"${transform_dir}${output_subpath}\"\n    invtransform_output = \"${invtransform_dir}${output_subpath}\"\n    \"\"\"\n    umask 0002\n    /app/scripts/waitforpaths.sh $tile ${image_path}${image_subpath} $ransac_affine_mat\n    /entrypoint.sh stitch_and_write $tile $xy_overlap $z_overlap $image_path $image_subpath $ransac_affine_mat $transform_dir $invtransform_dir $output_subpath\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    transform_output = \"${transform_dir}${output_subpath}\"\n    invtransform_output = \"${invtransform_dir}${output_subpath}\"\n    \"\"\"\n    umask 0002\n    /app/scripts/waitforpaths.sh $tile ${image_path}${image_subpath} $ransac_affine_mat\n    /entrypoint.sh stitch_and_write $tile $xy_overlap $z_overlap $image_path $image_subpath $ransac_affine_mat $transform_dir $invtransform_dir $output_subpath\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tile",
            "xy_overlap",
            "z_overlap",
            "image_path",
            "image_subpath",
            "ransac_affine_mat",
            "transform_dir",
            "invtransform_dir",
            "output_subpath"
        ],
        "nb_inputs": 9,
        "outputs": [
            "invtransform_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "container { params.registration_container }",
            "cpus { params.registration_stitch_cpus }",
            "memory { params.registration_stitch_memory }"
        ],
        "when": "",
        "stub": ""
    },
    "final_transform": {
        "name_process": "final_transform",
        "string_process": "\nprocess final_transform {\n    container { params.registration_container }\n    cpus { params.registration_transform_cpus }\n    memory { params.registration_transform_memory }\n\n    input:\n    val(ref_image_path)\n    val(ref_image_subpath)\n    val(mov_image_path)\n    val(mov_image_subpath)\n    val(txm_path)\n    val(output_path)\n\n    output:\n    tuple val(ref_image_path),\n          val(ref_image_subpath),\n          val(mov_image_path),\n          val(mov_image_subpath),\n          val(txm_path),\n          val(output_path)\n\n    script:\n    \"\"\"\n    echo \"Final transform\"\n    # Must remove the output directory, or we get a zarr.errors.ContainsArrayError if it already exists\n    rm -rf ${output_path}${ref_image_subpath} || true\n    umask 0002\n    /app/scripts/waitforpaths.sh ${ref_image_path}${ref_image_subpath} ${mov_image_path}${mov_image_subpath}\n    /entrypoint.sh apply_transform_n5 $ref_image_path $ref_image_subpath $mov_image_path $mov_image_subpath $txm_path $output_path\n    echo \"Finished final transform for ${output_path}${ref_image_subpath}\"\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    echo \"Final transform\"\n    # Must remove the output directory, or we get a zarr.errors.ContainsArrayError if it already exists\n    rm -rf ${output_path}${ref_image_subpath} || true\n    umask 0002\n    /app/scripts/waitforpaths.sh ${ref_image_path}${ref_image_subpath} ${mov_image_path}${mov_image_subpath}\n    /entrypoint.sh apply_transform_n5 $ref_image_path $ref_image_subpath $mov_image_path $mov_image_subpath $txm_path $output_path\n    echo \"Finished final transform for ${output_path}${ref_image_subpath}\"\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref_image_path",
            "ref_image_subpath",
            "mov_image_path",
            "mov_image_subpath",
            "txm_path",
            "output_path"
        ],
        "nb_inputs": 6,
        "outputs": [
            "output_path"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "container { params.registration_container }",
            "cpus { params.registration_transform_cpus }",
            "memory { params.registration_transform_memory }"
        ],
        "when": "",
        "stub": ""
    },
    "run_airlocalize": {
        "name_process": "run_airlocalize",
        "string_process": "\nprocess run_airlocalize {\n    container = params.airlocalize_container\n    cpus { params.airlocalize_cpus }\n    memory { params.airlocalize_memory }\n\n    input: \n    val(image_path)\n    val(ch)\n    val(scale)\n    val(coords)\n    val(params_filename)\n    val(tile_path)\n    val(suffix)\n    val(dapi_subpath)\n\n    output: \n    tuple val(image_path), val(tile_path), val(ch)\n\n    script:\n    args_list = [\n        image_path,\n        \"/${ch}/${scale}\",\n        coords,\n        params_filename,\n        tile_path,\n        suffix\n    ]\n    if (dapi_subpath != null && dapi_subpath != '') {\n        args_list.add(dapi_subpath)\n    }\n    args = args_list.join(' ')\n    \"\"\"\n    export SCRATCH_DIR=${params.local_scratch_dir}\n    echo \"SCRATCH_DIR: \\$SCRATCH_DIR\"\n    echo \"/app/airlocalize/airlocalize.sh ${args}\"\n    /app/airlocalize/airlocalize.sh ${args}\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    args_list = [\n        image_path,\n        \"/${ch}/${scale}\",\n        coords,\n        params_filename,\n        tile_path,\n        suffix\n    ]\n    if (dapi_subpath != null && dapi_subpath != '') {\n        args_list.add(dapi_subpath)\n    }\n    args = args_list.join(' ')\n    \"\"\"\n    export SCRATCH_DIR=${params.local_scratch_dir}\n    echo \"SCRATCH_DIR: \\$SCRATCH_DIR\"\n    echo \"/app/airlocalize/airlocalize.sh ${args}\"\n    /app/airlocalize/airlocalize.sh ${args}\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "image_path",
            "ch",
            "scale",
            "coords",
            "params_filename",
            "tile_path",
            "suffix",
            "dapi_subpath"
        ],
        "nb_inputs": 8,
        "outputs": [
            "ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "container = params.airlocalize_container",
            "cpus { params.airlocalize_cpus }",
            "memory { params.airlocalize_memory }"
        ],
        "when": "",
        "stub": ""
    },
    "merge_points": {
        "name_process": "merge_points",
        "string_process": "\nprocess merge_points {\n    label 'small'\n\n    container { params.airlocalize_container }\n\n    input:\n    val(image_path)\n    val(ch)\n    val(scale)\n    val(tiles_dir)\n    val(xy_overlap)\n    val(z_overlap)\n    val(output_path)\n\n    output:\n    tuple val(image_path), val(ch), val(scale), val(spots_microns), val(spots_voxels)\n\n    script:\n    spots_microns = \"${output_path}/spots_${ch}.txt\"\n    spots_voxels = \"${output_path}/spots_airlocalize_${ch}.csv\"\n    args_list = [\n        \"\\\"${tiles_dir}/*/air_localize_points_${ch}.txt\\\"\",\n        spots_microns,\n        spots_voxels,\n        xy_overlap,\n        z_overlap,\n        image_path,\n        \"/${ch}/${scale}\",\n        \"/${ch}/s0\"\n    ]\n    args = args_list.join(' ')\n    \"\"\"\n    umask 0002\n    mkdir -p ${output_path}\n    echo \"python /app/airlocalize/scripts/merge_points.py ${args}\"\n    python /app/airlocalize/scripts/merge_points.py ${args}\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    spots_microns = \"${output_path}/spots_${ch}.txt\"\n    spots_voxels = \"${output_path}/spots_airlocalize_${ch}.csv\"\n    args_list = [\n        \"\\\"${tiles_dir}/*/air_localize_points_${ch}.txt\\\"\",\n        spots_microns,\n        spots_voxels,\n        xy_overlap,\n        z_overlap,\n        image_path,\n        \"/${ch}/${scale}\",\n        \"/${ch}/s0\"\n    ]\n    args = args_list.join(' ')\n    \"\"\"\n    umask 0002\n    mkdir -p ${output_path}\n    echo \"python /app/airlocalize/scripts/merge_points.py ${args}\"\n    python /app/airlocalize/scripts/merge_points.py ${args}\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "image_path",
            "ch",
            "scale",
            "tiles_dir",
            "xy_overlap",
            "z_overlap",
            "output_path"
        ],
        "nb_inputs": 7,
        "outputs": [
            "spots_voxels"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__multifish",
        "directive": [
            "label 'small'",
            "container { params.airlocalize_container }"
        ],
        "when": "",
        "stub": ""
    }
}
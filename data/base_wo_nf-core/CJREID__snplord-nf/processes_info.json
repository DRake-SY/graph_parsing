{
    "SNP_DISTS": {
        "name_process": "SNP_DISTS",
        "string_process": "\nprocess SNP_DISTS{\n    echo true\n\n    publishDir \"${params.outdir}/snp-dists\" , mode: 'copy'\n\n    input:\n        path (input)\n\n    output:\n        path (\"*snp-dists.csv\")\n\n    script:\n    \"\"\"\n    snp-dists -c -b ${input} > ${input}.snp-dists.csv\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    snp-dists -c -b ${input} > ${input}.snp-dists.csv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "CJREID__snplord-nf",
        "directive": [
            "echo true",
            "publishDir \"${params.outdir}/snp-dists\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "SNIPPY": {
        "name_process": "SNIPPY",
        "string_process": "\nprocess SNIPPY {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/snippy\" , mode: 'copy'\n\n    input:\n        tuple val(id), path(reads)\n        path (ref)\n    \n    output:\n        tuple val(id), path(\"${id}\"), emit: snps\n\nscript:\n    \"\"\"\n    snippy --force \\\n        --cpus ${task.cpus}\\\n        --outdir ${id} \\\n        --ref ${ref} \\\n        --R1 ${reads[0]}\\\n        --R2 ${reads[1]}\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    snippy --force \\\n        --cpus ${task.cpus}\\\n        --outdir ${id} \\\n        --ref ${ref} \\\n        --R1 ${reads[0]}\\\n        --R2 ${reads[1]}\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "snippy"
        ],
        "tools_url": [
            "https://bio.tools/snippy"
        ],
        "tools_dico": [
            {
                "name": "snippy",
                "uri": "https://bio.tools/snippy",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Rapid haploid variant calling and core SNP phylogeny generation.",
                "homepage": "https://github.com/tseemann/snippy"
            }
        ],
        "inputs": [
            "id",
            "reads",
            "ref"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "CJREID__snplord-nf",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/snippy\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "SNIPPYCORE": {
        "name_process": "SNIPPYCORE",
        "string_process": "\nprocess SNIPPYCORE {\n    publishDir \"${params.outdir}/snippy_core\" , mode: 'copy'\n    publishDir \"${params.outdir}\" , mode: 'copy' ,\n        saveAs: { filename -> \n            if (filename == \"core.aln\") \"core_aln.fa\"\n            else if (filename == \"core.vcf\") \"core.vcf\"\n            else if (filename == \"clean.full.aln\") \"full_aln.fa\"\n        }\n    \n    input:\n        path (snps)\n        path (ref)\n\n    output:\n        path \"core.*\"\n        path \"core.aln\", emit: core_aln\n        path \"clean.full.aln\", emit: full_aln\n\n    script:\n    \"\"\"\n    snippy-core \\\n        --ref ${ref} \\\n        ${snps}\n\n    snippy-clean_full_aln \\\n        core.full.aln > clean.full.aln\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    snippy-core \\\n        --ref ${ref} \\\n        ${snps}\n\n    snippy-clean_full_aln \\\n        core.full.aln > clean.full.aln\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "snps",
            "ref"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "CJREID__snplord-nf",
        "directive": [
            "publishDir \"${params.outdir}/snippy_core\" , mode: 'copy'",
            "publishDir \"${params.outdir}\" , mode: 'copy' , saveAs: { filename -> if (filename == \"core.aln\") \"core_aln.fa\" else if (filename == \"core.vcf\") \"core.vcf\" else if (filename == \"clean.full.aln\") \"full_aln.fa\" }"
        ],
        "when": "",
        "stub": ""
    },
    "IQTREE": {
        "name_process": "IQTREE",
        "string_process": "\nprocess IQTREE {\n    echo true\n    \n    publishDir \"${params.outdir}/iqtree\" , mode: 'copy'\n\n    input:\n        path (alignment)\n        path (ref)\n\n    output:\n        path (\"*.treefile\")\n    \n        \n    shell:\n    \"\"\"\n    iqtree -s ${alignment} -pre ${ref.baseName}.${alignment.baseName} -m MFP -bb 1000 -nt AUTO\n    \"\"\"\n    }",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    iqtree -s ${alignment} -pre ${ref.baseName}.${alignment.baseName} -m MFP -bb 1000 -nt AUTO\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignment",
            "ref"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "CJREID__snplord-nf",
        "directive": [
            "echo true",
            "publishDir \"${params.outdir}/iqtree\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "ch_adata = Channel.fromPath(params.adata, checkIfExists: true)",
        "origin": [
            [
                "params.adata, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_adata",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "ch_parameters = Channel.fromPath(params.parameters, checkIfExists: true)",
        "origin": [
            [
                "params.parameters, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_parameters",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_probeset = Channel.fromPath(params.probeset, checkIfExists: true)",
        "origin": [
            [
                "params.probeset, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_probeset",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "ch_markers = Channel.fromPath(params.markers, checkIfExists: true)",
        "origin": [
            [
                "params.markers, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_markers",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "cluster_similarity_results = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "cluster_similarity_results",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "knn_results = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "knn_results",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "gene_corr_results = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "gene_corr_results",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "marker_corr_results = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "marker_corr_results",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "rf_results = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "rf_results",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "all_results = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "all_results",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_12": {
        "string": "ch_adata.into { shared_adata;\n                pre_results_cs_adata;\n                pre_results_knn_adata;\n                probesets_fclfs_adata;\n                probesets_cs_adata;\n                probesets_knn_adata;\n                probesets_corr_adata;\n                summary_adata }",
        "origin": [
            [
                "ch_adata",
                "P"
            ]
        ],
        "gives": [
            [
                "shared_adata",
                "P"
            ],
            [
                "pre_results_cs_adata",
                "P"
            ],
            [
                "pre_results_knn_adata",
                "P"
            ],
            [
                "probesets_fclfs_adata",
                "P"
            ],
            [
                "probesets_cs_adata",
                "P"
            ],
            [
                "probesets_knn_adata",
                "P"
            ],
            [
                "probesets_corr_adata",
                "P"
            ],
            [
                "summary_adata",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "ch_parameters.into { shared_parameters;\n                    pre_results_cs_parameters;\n                    pre_results_knn_parameters;\n                    probesets_fclfs_parameters;\n                    probesets_cs_parameters;\n                    probesets_knn_parameters;\n                    probesets_corr_parameters;\n                    summary_parameters }",
        "origin": [
            [
                "ch_parameters",
                "P"
            ]
        ],
        "gives": [
            [
                "shared_parameters",
                "P"
            ],
            [
                "pre_results_cs_parameters",
                "P"
            ],
            [
                "pre_results_knn_parameters",
                "P"
            ],
            [
                "probesets_fclfs_parameters",
                "P"
            ],
            [
                "probesets_cs_parameters",
                "P"
            ],
            [
                "probesets_knn_parameters",
                "P"
            ],
            [
                "probesets_corr_parameters",
                "P"
            ],
            [
                "summary_parameters",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "ch_probeset.into {  shared_probeset;\n                    pre_results_cs_probeset;\n                    pre_results_knn_probeset;\n                    probesets_fclfs_probeset; \n                    probesets_cs_probeset;\n                    probesets_knn_probeset;\n                    probesets_corr_probeset;\n                    summary_probeset }",
        "origin": [
            [
                "ch_probeset",
                "P"
            ]
        ],
        "gives": [
            [
                "shared_probeset",
                "P"
            ],
            [
                "pre_results_cs_probeset",
                "P"
            ],
            [
                "pre_results_knn_probeset",
                "P"
            ],
            [
                "probesets_fclfs_probeset",
                "P"
            ],
            [
                "probesets_cs_probeset",
                "P"
            ],
            [
                "probesets_knn_probeset",
                "P"
            ],
            [
                "probesets_corr_probeset",
                "P"
            ],
            [
                "summary_probeset",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "ch_markers.into {   shared_markers;\n                    pre_results_cs_markers;\n                    pre_results_knn_markers;\n                    probesets_fclfs_markers; \n                    probesets_cs_markers;\n                    probesets_knn_markers;\n                    probesets_corr_markers;\n                    summary_markers }",
        "origin": [
            [
                "ch_markers",
                "P"
            ]
        ],
        "gives": [
            [
                "shared_markers",
                "P"
            ],
            [
                "pre_results_cs_markers",
                "P"
            ],
            [
                "pre_results_knn_markers",
                "P"
            ],
            [
                "probesets_fclfs_markers",
                "P"
            ],
            [
                "probesets_cs_markers",
                "P"
            ],
            [
                "probesets_knn_markers",
                "P"
            ],
            [
                "probesets_corr_markers",
                "P"
            ],
            [
                "summary_markers",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "cluster_similarity_results = ch_cs_probesets.collect()",
        "origin": [
            [
                "ch_cs_probesets",
                "P"
            ]
        ],
        "gives": [
            [
                "cluster_similarity_results",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "knn_results = ch_knn_probesets.collect()",
        "origin": [
            [
                "ch_knn_probesets",
                "P"
            ]
        ],
        "gives": [
            [
                "knn_results",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "all_results = cluster_similarity_results.mix(knn_results, gene_corr_results, marker_corr_results, rf_results).collect()",
        "origin": [
            [
                "cluster_similarity_results",
                "P"
            ],
            [
                "knn_results",
                "P"
            ],
            [
                "gene_corr_results",
                "P"
            ],
            [
                "marker_corr_results",
                "P"
            ],
            [
                "rf_results",
                "P"
            ]
        ],
        "gives": [
            [
                "all_results",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "gene_corr_results = ch_gene_corr_probesets",
        "origin": [
            [
                "ch_gene_corr_probesets",
                "P"
            ]
        ],
        "gives": [
            [
                "gene_corr_results",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "marker_corr_results = ch_marker_corr_probesets",
        "origin": [
            [
                "ch_marker_corr_probesets",
                "P"
            ]
        ],
        "gives": [
            [
                "marker_corr_results",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "rf_results = ch_fclfs_probesets",
        "origin": [
            [
                "ch_fclfs_probesets",
                "P"
            ]
        ],
        "gives": [
            [
                "rf_results",
                "P"
            ]
        ]
    }
}
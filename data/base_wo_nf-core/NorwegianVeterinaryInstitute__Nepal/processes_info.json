{
    "GUPPY": {
        "name_process": "GUPPY",
        "string_process": "\nprocess GUPPY {\n\tconda \"/cluster/projects/nn9305k/src/miniconda/envs/guppy_gpu_v5\"\n\tpublishDir \"${params.out_dir}/01_guppy/\", pattern: \"logs/guppy_basecaller_*.log\", mode: \"copy\"\n\tpublishDir \"${params.out_dir}/01_guppy/\", pattern: \"fastq\", mode: \"copy\"\n\tpublishDir \"${params.out_dir}/01_guppy/\", pattern: \"sequencing_logs/sequencing_*.*\", mode: \"copy\"\n\n\tlabel 'gpu'\n\n\tinput:\n\tfile(\"*\")\n\n\n\toutput:\n\tpath \"fastq/pass/*.gz\", emit: fastq_ch\n  path \"fastq\"\n\tfile(\"logs/guppy_basecaller_*.log\")\n\tpath \"sequencing_logs/sequencing_summary.txt\", emit: summary_ch\n\n\tscript:\n\t\"\"\"\n\n\tguppy_basecaller --flowcell ${params.flowcell} --kit ${params.seqkit} \\\n        -x \"cuda:all\" \\\n        --gpu_runners_per_device 24 \\\n        --num_callers 24 \\\n        --records_per_fastq 0 \\\n        --compress_fastq \\\n        --disable_pings \\\n        --min_qscore 7 \\\n        -i fast5 \\\n        -s fastq\n\n\t# moving log files\n\tmkdir logs\n\tmv fastq/guppy_basecaller_*.log logs/\n\n\t# moving sequencing telemetry and summary files\n\tmkdir sequencing_logs\n\tmv fastq/sequencing_*.* sequencing_logs/\n\n\t\"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "\t\"\"\"\n\n\tguppy_basecaller --flowcell ${params.flowcell} --kit ${params.seqkit} \\\n        -x \"cuda:all\" \\\n        --gpu_runners_per_device 24 \\\n        --num_callers 24 \\\n        --records_per_fastq 0 \\\n        --compress_fastq \\\n        --disable_pings \\\n        --min_qscore 7 \\\n        -i fast5 \\\n        -s fastq\n\n\t# moving log files\n\tmkdir logs\n\tmv fastq/guppy_basecaller_*.log logs/\n\n\t# moving sequencing telemetry and summary files\n\tmkdir sequencing_logs\n\tmv fastq/sequencing_*.* sequencing_logs/\n\n\t\"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NorwegianVeterinaryInstitute__Nepal",
        "directive": [
            "conda \"/cluster/projects/nn9305k/src/miniconda/envs/guppy_gpu_v5\"",
            "publishDir \"${params.out_dir}/01_guppy/\", pattern: \"logs/guppy_basecaller_*.log\", mode: \"copy\"",
            "publishDir \"${params.out_dir}/01_guppy/\", pattern: \"fastq\", mode: \"copy\"",
            "publishDir \"${params.out_dir}/01_guppy/\", pattern: \"sequencing_logs/sequencing_*.*\", mode: \"copy\"",
            "label 'gpu'"
        ],
        "when": "",
        "stub": ""
    },
    "NANOPLOT_BASIC": {
        "name_process": "NANOPLOT_BASIC",
        "string_process": "\nprocess NANOPLOT_BASIC {\n\texecutor=\"local\"\n\tconda \"/cluster/projects/nn9305k/src/miniconda/envs/nanoplot\"\n\n\tpublishDir \"${params.out_dir}/02_nanoplot_basic/\", pattern: \"*\", mode: \"copy\"\n\n\tlabel 'tiny'\n\n\tinput:\n\tfile(summary)\n\n\n\toutput:\n\tpath \"*.summary-plots-log-transformed\"\n\n\tscript:\n\t\"\"\"\n\n\tNanoPlot -t 4 --summary $summary --plots hex dot --title Sequencing_Summary -o Sequencing.summary-plots-log-transformed\n\n\n\t\"\"\"\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\t\"\"\"\n\n\tNanoPlot -t 4 --summary $summary --plots hex dot --title Sequencing_Summary -o Sequencing.summary-plots-log-transformed\n\n\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "summary"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NorwegianVeterinaryInstitute__Nepal",
        "directive": [
            "executor=\"local\"",
            "conda \"/cluster/projects/nn9305k/src/miniconda/envs/nanoplot\"",
            "publishDir \"${params.out_dir}/02_nanoplot_basic/\", pattern: \"*\", mode: \"copy\"",
            "label 'tiny'"
        ],
        "when": "",
        "stub": ""
    },
    "NANOPLOT_AMPLICON": {
        "name_process": "NANOPLOT_AMPLICON",
        "string_process": "\nprocess NANOPLOT_AMPLICON {\n\tconda \"/cluster/projects/nn9305k/src/miniconda/envs/nanoplot\"\n\n\tpublishDir \"${params.out_dir}/02_nanoplot_amplicon/\", pattern: \"*\", mode: \"copy\"\n\n\tlabel 'tiny'\n\n\tinput:\n\tfile(summary)\n\n\n\toutput:\n\tpath \"*.summary-plots-log-transformed\"\n\n\tscript:\n\t\"\"\"\n\n\tNanoPlot -t 4 --summary $summary --maxlength 3000 --plots hex dot --title Sequencing_Summary -o Sequencing.summary-plots-log-transformed\n\n\n\t\"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "\t\"\"\"\n\n\tNanoPlot -t 4 --summary $summary --maxlength 3000 --plots hex dot --title Sequencing_Summary -o Sequencing.summary-plots-log-transformed\n\n\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "summary"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NorwegianVeterinaryInstitute__Nepal",
        "directive": [
            "conda \"/cluster/projects/nn9305k/src/miniconda/envs/nanoplot\"",
            "publishDir \"${params.out_dir}/02_nanoplot_amplicon/\", pattern: \"*\", mode: \"copy\"",
            "label 'tiny'"
        ],
        "when": "",
        "stub": ""
    },
    "NANOPLOT_CLEAN": {
        "name_process": "NANOPLOT_CLEAN",
        "string_process": "\nprocess NANOPLOT_CLEAN {\n\tconda \"/cluster/projects/nn9305k/src/miniconda/envs/nanoplot\"\n\n\tpublishDir \"${params.out_dir}/02_nanoplot_amplicon/\", pattern: \"*\", mode: \"copy\"\n\n\tlabel 'tiny'\n\n\tinput:\n\tfile(barcode*.gz)\n\n\n\toutput:\n\tpath \"*.summary-plots-log-transformed\"\n\n\tscript:\n\t\"\"\"\n\n\tNanoPlot -t 4 --fastq_minimal barcode*.gz  --maxlength 3000 --plots hex dot --title Clean_data_Summary -o Clean_data.summary-plots-log-transformed\n\n\n\t\"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "\t\"\"\"\n\n\tNanoPlot -t 4 --fastq_minimal barcode*.gz  --maxlength 3000 --plots hex dot --title Clean_data_Summary -o Clean_data.summary-plots-log-transformed\n\n\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "barcode"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NorwegianVeterinaryInstitute__Nepal",
        "directive": [
            "conda \"/cluster/projects/nn9305k/src/miniconda/envs/nanoplot\"",
            "publishDir \"${params.out_dir}/02_nanoplot_amplicon/\", pattern: \"*\", mode: \"copy\"",
            "label 'tiny'"
        ],
        "when": "",
        "stub": ""
    },
    "QCAT": {
        "name_process": "QCAT",
        "string_process": "\nprocess QCAT {\n\t                                                                                                          \n\t                                                                                                           \n\t                                                   \n\t              \n\n\tconda \"/cluster/projects/nn9305k/src/miniconda/envs/qcat\"\n\n\tpublishDir \"${params.out_dir}/03_qcat/\", pattern: \"*\", mode: \"copy\"\n\n  label 'longtime'\n\n\n\tinput:\n\tfile(x)\n\n\n\toutput:\n\tpath \"amplicons.demultiplexed/*\", emit: demultiplexed_ch\n\tfile(\"*.log\")\n\tfile(\"*.txt\")\n\n\tscript:\n\t\"\"\"\n\tzcat *.fastq.gz > all.sequences.fastq\n\n\techo processing all.sequences.fastq\n\n\t##running qcat with default parameters\n\tqcat -t 1 -f all.sequences.fastq \\\n\t\t-b amplicons.demultiplexed \\\n\t\t--guppy \\\n\t\t--kit ${params.barcode} \\\n\t\t--detect-middle \\\n\t\t--trim \\\n\t\t--min-read-length 50  \\\n\t\t--tsv > qcat_demultiplexing.log 2>stdout.log\n\n\tgzip -r amplicons.demultiplexed\n\n\t# extracting the barcode counts from stdout and put them in a parsable format\n\tgrep -iF \"barcode\" stdout.log | sed -e 's/      barcode/barcode/g' | sed -e '1 ! s/  */_/g' | sed -e '1 ! s/:_|_|_/\\t/g' |sed -e 's/_/\\t/g' |sed -e 's/\\t%//g' > barcode_counts.txt\n\n\t\"\"\"\n\t                                                                                                   \n\n}",
        "nb_lignes_process": 46,
        "string_script": "\t\"\"\"\n\tzcat *.fastq.gz > all.sequences.fastq\n\n\techo processing all.sequences.fastq\n\n\t##running qcat with default parameters\n\tqcat -t 1 -f all.sequences.fastq \\\n\t\t-b amplicons.demultiplexed \\\n\t\t--guppy \\\n\t\t--kit ${params.barcode} \\\n\t\t--detect-middle \\\n\t\t--trim \\\n\t\t--min-read-length 50  \\\n\t\t--tsv > qcat_demultiplexing.log 2>stdout.log\n\n\tgzip -r amplicons.demultiplexed\n\n\t# extracting the barcode counts from stdout and put them in a parsable format\n\tgrep -iF \"barcode\" stdout.log | sed -e 's/      barcode/barcode/g' | sed -e '1 ! s/  */_/g' | sed -e '1 ! s/:_|_|_/\\t/g' |sed -e 's/_/\\t/g' |sed -e 's/\\t%//g' > barcode_counts.txt\n\n\t\"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "seqCAT"
        ],
        "tools_url": [
            "https://bio.tools/seqcat"
        ],
        "tools_dico": [
            {
                "name": "seqCAT",
                "uri": "https://bio.tools/seqcat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package uses variant calling data (in the form of VCF files) from high throughput sequencing technologies to authenticate and validate the source, function and characteristics of biological samples used in scientific endeavours.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/seqCAT.html"
            }
        ],
        "inputs": [
            "x"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NorwegianVeterinaryInstitute__Nepal",
        "directive": [
            "conda \"/cluster/projects/nn9305k/src/miniconda/envs/qcat\"",
            "publishDir \"${params.out_dir}/03_qcat/\", pattern: \"*\", mode: \"copy\"",
            "label 'longtime'"
        ],
        "when": "",
        "stub": ""
    },
    "NANOFILT_BASIC": {
        "name_process": "NANOFILT_BASIC",
        "string_process": "\nprocess NANOFILT_BASIC {\n\t                                                                                        \n                                                                  \n                                                               \n   \n\n\tconda \"/cluster/projects/nn9305k/src/miniconda/envs/nanofilt\"\n\n\tpublishDir \"${params.out_dir}/04_nanofilt_basic/\", pattern: \"*\", mode: \"copy\"\n\n\tlabel 'tiny'\n\n\tinput:\n\tfile(x)\n\n\toutput:\n\ttuple val(samplename), path('*.trimmed.fastq.gz'), emit: trimmed_ch\n\n\tscript:\n\tsamplename = x.toString() - ~/.fastq.gz$/\n\t\"\"\"\n\tls -la\n\tgunzip -c $x | NanoFilt -q 7 -l 100 --headcrop 50 | gzip > ${samplename}.trimmed.fastq.gz\n\n\t\"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "\tsamplename = x.toString() - ~/.fastq.gz$/\n\t\"\"\"\n\tls -la\n\tgunzip -c $x | NanoFilt -q 7 -l 100 --headcrop 50 | gzip > ${samplename}.trimmed.fastq.gz\n\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "x"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NorwegianVeterinaryInstitute__Nepal",
        "directive": [
            "conda \"/cluster/projects/nn9305k/src/miniconda/envs/nanofilt\"",
            "publishDir \"${params.out_dir}/04_nanofilt_basic/\", pattern: \"*\", mode: \"copy\"",
            "label 'tiny'"
        ],
        "when": "",
        "stub": ""
    },
    "NANOFILT_AMPLICON": {
        "name_process": "NANOFILT_AMPLICON",
        "string_process": "\nprocess NANOFILT_AMPLICON {\n\t                                                                                        \n                                                                  \n                                                               \n                                              \n                                              \n                                           \n   \n\n\tconda \"/cluster/projects/nn9305k/src/miniconda/envs/nanofilt\"\n\n\tpublishDir \"${params.out_dir}/04_nanofilt_amplicon/\", pattern: \"*\", mode: \"copy\"\n\n\tlabel 'tiny'\n\n\tinput:\n\tfile(x)\n\n\toutput:\n\ttuple val(samplename), path('*.trimmed.fastq.gz'), emit: trimmed_ch\n\n\tscript:\n\tsamplename = x.toString() - ~/.fastq.gz$/\n\t\"\"\"\n\tls -la\n\tgunzip -c $x | NanoFilt -q 7 -l 1300 --maxlength 1700 | gzip > ${samplename}.trimmed.fastq.gz\n\n\t\"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\tsamplename = x.toString() - ~/.fastq.gz$/\n\t\"\"\"\n\tls -la\n\tgunzip -c $x | NanoFilt -q 7 -l 1300 --maxlength 1700 | gzip > ${samplename}.trimmed.fastq.gz\n\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "x"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NorwegianVeterinaryInstitute__Nepal",
        "directive": [
            "conda \"/cluster/projects/nn9305k/src/miniconda/envs/nanofilt\"",
            "publishDir \"${params.out_dir}/04_nanofilt_amplicon/\", pattern: \"*\", mode: \"copy\"",
            "label 'tiny'"
        ],
        "when": "",
        "stub": ""
    },
    "FLY_BASIC": {
        "name_process": "FLY_BASIC",
        "string_process": "\nprocess FLY_BASIC {\n\t                                                                         \n                                                                      \n                                                               \n   \n\n\tconda \"/cluster/projects/nn9305k/src/miniconda/envs/flye\"\n\n\tpublishDir \"${params.out_dir}/05_fly_asm/\", pattern: \"*\", mode: \"copy\"\n\n\tlabel 'medium'\n\n\tinput:\n\ttuple val(samplename), file(x)\n\n\toutput:\n  tuple val(samplename), path {\"*\"}, emit: new_assemblies\n\n\tscript:\n\t\"\"\"\n\tls -la\n  flye --nano-raw *.trimmed.fastq.gz --out-dir ${samplename} --threads 8\n\t\"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\t\"\"\"\n\tls -la\n  flye --nano-raw *.trimmed.fastq.gz --out-dir ${samplename} --threads 8\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "samplename",
            "x"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NorwegianVeterinaryInstitute__Nepal",
        "directive": [
            "conda \"/cluster/projects/nn9305k/src/miniconda/envs/flye\"",
            "publishDir \"${params.out_dir}/05_fly_asm/\", pattern: \"*\", mode: \"copy\"",
            "label 'medium'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "prepare_molecular_traits": {
        "name_process": "prepare_molecular_traits",
        "string_process": "\nprocess prepare_molecular_traits {\n    tag \"${qtl_subset}\"\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n\n    input:\n    tuple val(qtl_subset), file(expression_matrix), file(phenotype_metadata), file(sample_metadata), file(vcf_variant_info)\n\n    output: \n    tuple val(qtl_subset), file(\"*.bed\"), emit: bed_file\n    tuple val(qtl_subset), file(\"*.sample_names.txt\"), emit: sample_names\n    tuple val(qtl_subset), file(\"${qtl_subset}.pheno_cov.txt\"), emit: pheno_cov\n    tuple val(qtl_subset), file(phenotype_metadata), emit: pheno_meta\n\n    script:\n    \"\"\"\n    Rscript $baseDir/bin/prepare_molecular_traits.R \\\\\n        -p \"$phenotype_metadata\" \\\\\n        -s \"$sample_metadata\" \\\\\n        -e \"$expression_matrix\" \\\\\n        -v \"$vcf_variant_info\" \\\\\n        -o \".\" \\\\\n        -c ${params.cis_window} \\\\\n        -m ${params.mincisvariant} \\\\\n        -a ${params.covariates}\n    \n    #Merge phenotype covariates together\n    head -n ${params.n_pheno_pcs + 1} phenoPCA.tsv > ${qtl_subset}.pheno_cov.txt\n    tail -n+2 additional_covariates.tsv >> ${qtl_subset}.pheno_cov.txt\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    Rscript $baseDir/bin/prepare_molecular_traits.R \\\\\n        -p \"$phenotype_metadata\" \\\\\n        -s \"$sample_metadata\" \\\\\n        -e \"$expression_matrix\" \\\\\n        -v \"$vcf_variant_info\" \\\\\n        -o \".\" \\\\\n        -c ${params.cis_window} \\\\\n        -m ${params.mincisvariant} \\\\\n        -a ${params.covariates}\n    \n    #Merge phenotype covariates together\n    head -n ${params.n_pheno_pcs + 1} phenoPCA.tsv > ${qtl_subset}.pheno_cov.txt\n    tail -n+2 additional_covariates.tsv >> ${qtl_subset}.pheno_cov.txt\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "expression_matrix",
            "phenotype_metadata",
            "sample_metadata",
            "vcf_variant_info"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset}\"",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    },
    "compress_bed": {
        "name_process": "compress_bed",
        "string_process": "\nprocess compress_bed {\n    tag \"${qtl_subset}\"\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n\n    input:\n    tuple val(qtl_subset), file(bed_file)\n\n    output:\n    tuple val(qtl_subset), file(\"${bed_file}.gz\"), file(\"${bed_file}.gz.tbi\"), file(\"${bed_file.baseName}.fastQTL.bed.gz\"), file(\"${bed_file.baseName}.fastQTL.bed.gz.tbi\")\n\n    script:\n    \"\"\"\n    bgzip ${bed_file} && tabix -p bed ${bed_file}.gz\n    \n    csvtk cut -C\\$ -t -f -strand,-group_id ${bed_file}.gz | bgzip > ${bed_file.baseName}.fastQTL.bed.gz\n    tabix -p bed ${bed_file.baseName}.fastQTL.bed.gz\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    bgzip ${bed_file} && tabix -p bed ${bed_file}.gz\n    \n    csvtk cut -C\\$ -t -f -strand,-group_id ${bed_file}.gz | bgzip > ${bed_file.baseName}.fastQTL.bed.gz\n    tabix -p bed ${bed_file.baseName}.fastQTL.bed.gz\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "bed_file"
        ],
        "nb_inputs": 2,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset}\"",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    },
    "make_pca_covariates": {
        "name_process": "make_pca_covariates",
        "string_process": "\nprocess make_pca_covariates {\n    tag \"${qtl_subset}\"\n    publishDir \"${params.outdir}/PCA/${qtl_subset}\", mode: 'copy'\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n\n    input:\n    tuple val(qtl_subset), file(phenotype_cov), file(vcf)\n\n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.covariates.txt\")\n\n    script:\n    \"\"\"\n    plink2 --vcf $vcf --vcf-half-call h --indep-pairwise 50000 200 0.05 --out ${qtl_subset}_pruned_variants --threads ${task.cpus} --memory ${task.memory.mega} --const-fid \n    plink2 --vcf $vcf --vcf-half-call h --extract ${qtl_subset}_pruned_variants.prune.in --make-bed --out ${qtl_subset}_pruned --const-fid \n    plink2 -bfile ${qtl_subset}_pruned --pca ${params.n_geno_pcs} header tabs\n    cat plink.eigenvec \\\\\n        | sed '1s/IID/genotype_id/' \\\\\n        | sed '1s/PC/geno_PC/g' \\\\\n        | csvtk cut -t -f -\"FID\" \\\\\n        | csvtk transpose -t > ${qtl_subset}.geno.pca\n    cat $phenotype_cov > ${qtl_subset}.covariates.txt    \n    set +o pipefail; tail -n+2 ${qtl_subset}.geno.pca | head -n ${params.n_geno_pcs} >> ${qtl_subset}.covariates.txt\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    plink2 --vcf $vcf --vcf-half-call h --indep-pairwise 50000 200 0.05 --out ${qtl_subset}_pruned_variants --threads ${task.cpus} --memory ${task.memory.mega} --const-fid \n    plink2 --vcf $vcf --vcf-half-call h --extract ${qtl_subset}_pruned_variants.prune.in --make-bed --out ${qtl_subset}_pruned --const-fid \n    plink2 -bfile ${qtl_subset}_pruned --pca ${params.n_geno_pcs} header tabs\n    cat plink.eigenvec \\\\\n        | sed '1s/IID/genotype_id/' \\\\\n        | sed '1s/PC/geno_PC/g' \\\\\n        | csvtk cut -t -f -\"FID\" \\\\\n        | csvtk transpose -t > ${qtl_subset}.geno.pca\n    cat $phenotype_cov > ${qtl_subset}.covariates.txt    \n    set +o pipefail; tail -n+2 ${qtl_subset}.geno.pca | head -n ${params.n_geno_pcs} >> ${qtl_subset}.covariates.txt\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "phenotype_cov",
            "vcf"
        ],
        "nb_inputs": 3,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset}\"",
            "publishDir \"${params.outdir}/PCA/${qtl_subset}\", mode: 'copy'",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    },
    "vcf_to_dosage": {
        "name_process": "vcf_to_dosage",
        "string_process": "process vcf_to_dosage{\n    container = 'quay.io/eqtlcatalogue/susie-finemapping:v20.08.1'\n\n    input:\n    tuple val(qtl_subset), file(vcf)\n\n    output:\n    tuple val(qtl_subset), file(\"${vcf.simpleName}.dose.tsv.gz\"), file(\"${vcf.simpleName}.dose.tsv.gz.tbi\")\n\n    script:\n    if(params.vcf_genotype_field == 'DS'){\n        \"\"\"\n        #Extract header\n        printf 'CHROM\\\\nPOS\\\\nREF\\\\nALT\\\\n' > 4_columns.tsv\n        bcftools query -l ${vcf} > sample_list.tsv\n        cat 4_columns.tsv sample_list.tsv > header.tsv\n        csvtk transpose header.tsv -T | gzip > header_row.tsv.gz\n\n        #Extract dosage and merge\n        bcftools query -f \"%CHROM\\\\t%POS\\\\t%REF\\\\t%ALT[\\\\t%DS]\\\\n\" ${vcf} | gzip > dose_matrix.tsv.gz\n        zcat header_row.tsv.gz dose_matrix.tsv.gz | bgzip > ${vcf.simpleName}.dose.tsv.gz\n        tabix -s1 -b2 -e2 -S1 ${vcf.simpleName}.dose.tsv.gz\n        \"\"\"\n    } else if (params.vcf_genotype_field == 'GT'){\n        \"\"\"\n        #Extract header\n        printf 'CHROM\\\\nPOS\\\\nREF\\\\nALT\\\\n' > 4_columns.tsv\n        bcftools query -l ${vcf} > sample_list.tsv\n        cat 4_columns.tsv sample_list.tsv > header.tsv\n        csvtk transpose header.tsv -T | gzip > header_row.tsv.gz\n\n        #Extract dosage and merge\n        bcftools +dosage ${vcf} -- -t GT | tail -n+2 | gzip > dose_matrix.tsv.gz\n        zcat header_row.tsv.gz dose_matrix.tsv.gz | bgzip > ${vcf.simpleName}.dose.tsv.gz\n        tabix -s1 -b2 -e2 -S1 ${vcf.simpleName}.dose.tsv.gz\n        \"\"\"\n    } \n}",
        "nb_lignes_process": 36,
        "string_script": "    if(params.vcf_genotype_field == 'DS'){\n        \"\"\"\n        #Extract header\n        printf 'CHROM\\\\nPOS\\\\nREF\\\\nALT\\\\n' > 4_columns.tsv\n        bcftools query -l ${vcf} > sample_list.tsv\n        cat 4_columns.tsv sample_list.tsv > header.tsv\n        csvtk transpose header.tsv -T | gzip > header_row.tsv.gz\n\n        #Extract dosage and merge\n        bcftools query -f \"%CHROM\\\\t%POS\\\\t%REF\\\\t%ALT[\\\\t%DS]\\\\n\" ${vcf} | gzip > dose_matrix.tsv.gz\n        zcat header_row.tsv.gz dose_matrix.tsv.gz | bgzip > ${vcf.simpleName}.dose.tsv.gz\n        tabix -s1 -b2 -e2 -S1 ${vcf.simpleName}.dose.tsv.gz\n        \"\"\"\n    } else if (params.vcf_genotype_field == 'GT'){\n        \"\"\"\n        #Extract header\n        printf 'CHROM\\\\nPOS\\\\nREF\\\\nALT\\\\n' > 4_columns.tsv\n        bcftools query -l ${vcf} > sample_list.tsv\n        cat 4_columns.tsv sample_list.tsv > header.tsv\n        csvtk transpose header.tsv -T | gzip > header_row.tsv.gz\n\n        #Extract dosage and merge\n        bcftools +dosage ${vcf} -- -t GT | tail -n+2 | gzip > dose_matrix.tsv.gz\n        zcat header_row.tsv.gz dose_matrix.tsv.gz | bgzip > ${vcf.simpleName}.dose.tsv.gz\n        tabix -s1 -b2 -e2 -S1 ${vcf.simpleName}.dose.tsv.gz\n        \"\"\"\n    }",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "qtl_subset",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "container = 'quay.io/eqtlcatalogue/susie-finemapping:v20.08.1'"
        ],
        "when": "",
        "stub": ""
    },
    "run_permutation": {
        "name_process": "run_permutation",
        "string_process": "\nprocess run_permutation {\n    tag \"${qtl_subset} - ${batch_index}/${params.n_batches}\"\n    container = 'quay.io/eqtlcatalogue/qtltools:v22.03.1'\n\n    input:\n    each batch_index\n    tuple val(qtl_subset), file(bed), file(bed_index), file(fastqtl_bed), file(fastqtl_bed_index), file(vcf), file(vcf_index), file(covariate)\n\n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.permutation.batch.${batch_index}.${params.n_batches}.txt\")\n\n    script:\n    \"\"\"\n    QTLtools cis --vcf $vcf --bed $bed --cov $covariate --chunk $batch_index ${params.n_batches} --out ${qtl_subset}.permutation.batch.${batch_index}.${params.n_batches}.txt --window ${params.cis_window} --permute ${params.n_permutations} --grp-best\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    QTLtools cis --vcf $vcf --bed $bed --cov $covariate --chunk $batch_index ${params.n_batches} --out ${qtl_subset}.permutation.batch.${batch_index}.${params.n_batches}.txt --window ${params.cis_window} --permute ${params.n_permutations} --grp-best\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "QTLtools"
        ],
        "tools_url": [
            "https://bio.tools/qtltools"
        ],
        "tools_dico": [
            {
                "name": "QTLtools",
                "uri": "https://bio.tools/qtltools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression QTL analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression QTL profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "eQTL profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression quantitative trait loci profiling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool set for molecular QTL discovery and analysis. It allows to go from the raw sequence data to collection of molecular Quantitative Trait Loci (QTLs) in few easy-to-perform steps.",
                "homepage": "https://qtltools.github.io/qtltools/"
            }
        ],
        "inputs": [
            "batch_index",
            "qtl_subset",
            "bed",
            "bed_index",
            "fastqtl_bed",
            "fastqtl_bed_index",
            "vcf",
            "vcf_index",
            "covariate"
        ],
        "nb_inputs": 9,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset} - ${batch_index}/${params.n_batches}\"",
            "container = 'quay.io/eqtlcatalogue/qtltools:v22.03.1'"
        ],
        "when": "",
        "stub": ""
    },
    "merge_permutation_batches": {
        "name_process": "merge_permutation_batches",
        "string_process": "\nprocess merge_permutation_batches {\n    tag \"${qtl_subset}\"\n    publishDir \"${params.outdir}/sumstats\", mode: 'copy'\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n\n    input:\n    tuple val(qtl_subset), file(batch_file_names)\n\n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.permuted.tsv.gz\")\n\n    script:\n    \"\"\"\n    cat ${batch_file_names.join(' ')} | csvtk space2tab | sort -k11n -k12n > merged.txt\n    cut -f 1,6,7,8,10,11,12,18,20,21,22 merged.txt | csvtk add-header -t -n molecular_trait_object_id,molecular_trait_id,n_traits,n_variants,variant,chromosome,position,pvalue,beta,p_perm,p_beta | gzip > ${qtl_subset}.permuted.tsv.gz\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    cat ${batch_file_names.join(' ')} | csvtk space2tab | sort -k11n -k12n > merged.txt\n    cut -f 1,6,7,8,10,11,12,18,20,21,22 merged.txt | csvtk add-header -t -n molecular_trait_object_id,molecular_trait_id,n_traits,n_variants,variant,chromosome,position,pvalue,beta,p_perm,p_beta | gzip > ${qtl_subset}.permuted.tsv.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "batch_file_names"
        ],
        "nb_inputs": 2,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset}\"",
            "publishDir \"${params.outdir}/sumstats\", mode: 'copy'",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    },
    "run_nominal": {
        "name_process": "run_nominal",
        "string_process": "\nprocess run_nominal {\n    tag \"${qtl_subset} - ${batch_index}/${params.n_batches}\"\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n    \n    input:\n    each batch_index\n    tuple val(qtl_subset), file(bed), file(bed_index), file(fastqtl_bed), file(fastqtl_bed_index), file(vcf), file(vcf_index), file(covariate)\n\n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.nominal.batch.${batch_index}.${params.n_batches}.txt\")\n\n    script:\n    \"\"\"\n\tfastQTL --vcf $vcf --bed $fastqtl_bed --cov $covariate \\\\\n        --chunk $batch_index ${params.n_batches} \\\\\n        --out ${qtl_subset}.nominal.batch.${batch_index}.${params.n_batches}.txt \\\\\n        --window ${params.cis_window} \\\\\n        --ma-sample-threshold 1\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n\tfastQTL --vcf $vcf --bed $fastqtl_bed --cov $covariate \\\\\n        --chunk $batch_index ${params.n_batches} \\\\\n        --out ${qtl_subset}.nominal.batch.${batch_index}.${params.n_batches}.txt \\\\\n        --window ${params.cis_window} \\\\\n        --ma-sample-threshold 1\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "batch_index",
            "qtl_subset",
            "bed",
            "bed_index",
            "fastqtl_bed",
            "fastqtl_bed_index",
            "vcf",
            "vcf_index",
            "covariate"
        ],
        "nb_inputs": 9,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset} - ${batch_index}/${params.n_batches}\"",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    },
    "merge_nominal_batches": {
        "name_process": "merge_nominal_batches",
        "string_process": "\nprocess merge_nominal_batches {\n    tag \"${qtl_subset}\"\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n\n    input:\n    tuple val(qtl_subset), file(batch_file_names)  \n\n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.nominal.tab.txt.gz\")\n\n    script:\n    \"\"\"\n    cat ${batch_file_names.join(' ')} | \\\\\n        csvtk space2tab -T | \\\\\n        csvtk sep -H -t -f 2 -s \"_\" | \\\\\n        csvtk replace -t -H -f 10 -p ^chr | \\\\\n        csvtk cut -t -f1,10,11,12,13,2,4,5,6,7,8,9 | \\\\\n        bgzip > ${qtl_subset}.nominal.tab.txt.gz\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    cat ${batch_file_names.join(' ')} | \\\\\n        csvtk space2tab -T | \\\\\n        csvtk sep -H -t -f 2 -s \"_\" | \\\\\n        csvtk replace -t -H -f 10 -p ^chr | \\\\\n        csvtk cut -t -f1,10,11,12,13,2,4,5,6,7,8,9 | \\\\\n        bgzip > ${qtl_subset}.nominal.tab.txt.gz\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "batch_file_names"
        ],
        "nb_inputs": 2,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset}\"",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    },
    "sort_qtltools_output": {
        "name_process": "sort_qtltools_output",
        "string_process": "\nprocess sort_qtltools_output {\n    tag \"${qtl_subset}\"\n    publishDir path: { !params.reformat_sumstats ? \"${params.outdir}/sumstats\" : params.outdir },\n            saveAs: { !params.reformat_sumstats ? it : null }, mode: 'copy'\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n\n    input:\n    tuple val(qtl_subset), file(nominal_merged)\n\n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.nominal.sorted.norsid.tsv.gz\")\n\n    script:\n    \"\"\"\n    gzip -dc $nominal_merged | LANG=C sort -k2,2 -k3,3n -S11G --parallel=8 | uniq | \\\\\n        bgzip > ${qtl_subset}.nominal.sorted.norsid.tsv.gz\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    gzip -dc $nominal_merged | LANG=C sort -k2,2 -k3,3n -S11G --parallel=8 | uniq | \\\\\n        bgzip > ${qtl_subset}.nominal.sorted.norsid.tsv.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "nominal_merged"
        ],
        "nb_inputs": 2,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset}\"",
            "publishDir path: { !params.reformat_sumstats ? \"${params.outdir}/sumstats\" : params.outdir } , saveAs: { !params.reformat_sumstats ? it : null }, mode: 'copy'",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    },
    "join_rsids_var_info": {
        "name_process": "join_rsids_var_info",
        "string_process": "\nprocess join_rsids_var_info {\n    tag \"${qtl_subset}\"\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n\n    input:\n    tuple val(qtl_subset), file(var_info)\n    file(rsid_map)\n\n    output:\n    tuple val(qtl_subset), file(var_info), file(\"${var_info.simpleName}.var_info_rsid.tsv.gz\")\n\n    script:\n    \"\"\"\n    $baseDir/bin/join_variant_info.py \\\\\n        -v $var_info \\\\\n        -r $rsid_map \\\\\n        -o ${var_info.simpleName}.var_info_rsid.tsv.gz\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    $baseDir/bin/join_variant_info.py \\\\\n        -v $var_info \\\\\n        -r $rsid_map \\\\\n        -o ${var_info.simpleName}.var_info_rsid.tsv.gz\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "var_info",
            "rsid_map"
        ],
        "nb_inputs": 3,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset}\"",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    },
    "reformat_sumstats": {
        "name_process": "reformat_sumstats",
        "string_process": "\nprocess reformat_sumstats {\n    tag \"${qtl_subset}\"\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n\n    input:\n    tuple val(qtl_subset), file(summ_stats), file(var_info), file(rsid_map), file(phenotype_metadata), file(median_tpm)\n\n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.nominal.sorted.tsv.gz\")\n\n    script:\n    \"\"\"\n    $baseDir/bin/join_variant_info.py \\\n        -s $summ_stats \\\n        -v $var_info \\\n        -r $rsid_map \\\n        -p $phenotype_metadata \\\n        -m $median_tpm \\\n        -o ${qtl_subset}.nominal.sorted.tsv.gz\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    $baseDir/bin/join_variant_info.py \\\n        -s $summ_stats \\\n        -v $var_info \\\n        -r $rsid_map \\\n        -p $phenotype_metadata \\\n        -m $median_tpm \\\n        -o ${qtl_subset}.nominal.sorted.tsv.gz\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "summ_stats",
            "var_info",
            "rsid_map",
            "phenotype_metadata",
            "median_tpm"
        ],
        "nb_inputs": 6,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset}\"",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    },
    "tabix_index": {
        "name_process": "tabix_index",
        "string_process": "\nprocess tabix_index {\n    tag \"${qtl_subset}\"\n    publishDir \"${params.outdir}/sumstats\", mode: 'copy'\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n\n    input:\n    tuple val(qtl_subset), file(sumstats_file)\n\n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.all.tsv.gz\"), file(\"${qtl_subset}.all.tsv.gz.tbi\")\n\n    script:\n    \"\"\"\n    zcat $sumstats_file | bgzip > ${qtl_subset}.nominal.sorted.bgzip.tsv.gz\n    mv ${qtl_subset}.nominal.sorted.bgzip.tsv.gz ${qtl_subset}.all.tsv.gz\n    tabix -s2 -b3 -e3 -S1 -f ${qtl_subset}.all.tsv.gz\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    zcat $sumstats_file | bgzip > ${qtl_subset}.nominal.sorted.bgzip.tsv.gz\n    mv ${qtl_subset}.nominal.sorted.bgzip.tsv.gz ${qtl_subset}.all.tsv.gz\n    tabix -s2 -b3 -e3 -S1 -f ${qtl_subset}.all.tsv.gz\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "sumstats_file"
        ],
        "nb_inputs": 2,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset}\"",
            "publishDir \"${params.outdir}/sumstats\", mode: 'copy'",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    },
    "extract_variant_info": {
        "name_process": "extract_variant_info",
        "string_process": "\nprocess extract_variant_info {\n    tag \"${qtl_subset}\"\n    publishDir \"${params.outdir}/varinfo\", mode: 'copy'\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n\n    input:\n    tuple val(qtl_subset), file(vcf)\n    \n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.variant_information.txt.gz\")\n\n    script:\n    if (params.vcf_has_R2_field) {\n        \"\"\"\n        set +o pipefail; bcftools +fill-tags $vcf | bcftools query -f '%CHROM\\\\t%POS\\\\t%ID\\\\t%REF\\\\t%ALT\\\\t%TYPE\\\\t%AC\\\\t%AN\\\\t%MAF\\\\t%R2\\\\n' | gzip > ${qtl_subset}.variant_information.txt.gz\n        \"\"\"\n    } else {\n        \"\"\"\n        set +o pipefail; bcftools +fill-tags $vcf | bcftools query -f '%CHROM\\\\t%POS\\\\t%ID\\\\t%REF\\\\t%ALT\\\\t%TYPE\\\\t%AC\\\\t%AN\\\\t%MAF\\\\tNA\\\\n' | gzip > ${qtl_subset}.variant_information.txt.gz\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 21,
        "string_script": "    if (params.vcf_has_R2_field) {\n        \"\"\"\n        set +o pipefail; bcftools +fill-tags $vcf | bcftools query -f '%CHROM\\\\t%POS\\\\t%ID\\\\t%REF\\\\t%ALT\\\\t%TYPE\\\\t%AC\\\\t%AN\\\\t%MAF\\\\t%R2\\\\n' | gzip > ${qtl_subset}.variant_information.txt.gz\n        \"\"\"\n    } else {\n        \"\"\"\n        set +o pipefail; bcftools +fill-tags $vcf | bcftools query -f '%CHROM\\\\t%POS\\\\t%ID\\\\t%REF\\\\t%ALT\\\\t%TYPE\\\\t%AC\\\\t%AN\\\\t%MAF\\\\tNA\\\\n' | gzip > ${qtl_subset}.variant_information.txt.gz\n        \"\"\"\n    }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "qtl_subset",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset}\"",
            "publishDir \"${params.outdir}/varinfo\", mode: 'copy'",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    },
    "run_susie": {
        "name_process": "run_susie",
        "string_process": "process run_susie{\n    container = 'quay.io/eqtlcatalogue/susier:v21.10.2'\n\n    input:\n    tuple val(qtl_subset), file(expression_matrix), file(phenotype_meta), file(sample_meta), file(phenotype_list), file(covariates), file(genotype_matrix), file(genotype_matrix_index)\n    each batch_index\n\n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.${batch_index}_${params.n_batches}.txt\"), file(\"${qtl_subset}.${batch_index}_${params.n_batches}.cred.txt\"), file(\"${qtl_subset}.${batch_index}_${params.n_batches}.snp.txt\")\n\n    script:\n    \"\"\"\n    Rscript $baseDir/bin/run_susie.R --expression_matrix ${expression_matrix}\\\n     --phenotype_meta ${phenotype_meta}\\\n     --sample_meta ${sample_meta}\\\n     --phenotype_list ${phenotype_list}\\\n     --covariates ${covariates}\\\n     --genotype_matrix ${genotype_matrix}\\\n     --chunk '${batch_index} ${params.n_batches}'\\\n     --cisdistance ${params.cis_window}\\\n     --out_prefix '${qtl_subset}.${batch_index}_${params.n_batches}'\\\n     --eqtlutils null\\\n     --permuted true\\\n     --skip_full ${params.susie_skip_full}\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    Rscript $baseDir/bin/run_susie.R --expression_matrix ${expression_matrix}\\\n     --phenotype_meta ${phenotype_meta}\\\n     --sample_meta ${sample_meta}\\\n     --phenotype_list ${phenotype_list}\\\n     --covariates ${covariates}\\\n     --genotype_matrix ${genotype_matrix}\\\n     --chunk '${batch_index} ${params.n_batches}'\\\n     --cisdistance ${params.cis_window}\\\n     --out_prefix '${qtl_subset}.${batch_index}_${params.n_batches}'\\\n     --eqtlutils null\\\n     --permuted true\\\n     --skip_full ${params.susie_skip_full}\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "expression_matrix",
            "phenotype_meta",
            "sample_meta",
            "phenotype_list",
            "covariates",
            "genotype_matrix",
            "genotype_matrix_index",
            "batch_index"
        ],
        "nb_inputs": 9,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "container = 'quay.io/eqtlcatalogue/susier:v21.10.2'"
        ],
        "when": "",
        "stub": ""
    },
    "merge_susie": {
        "name_process": "merge_susie",
        "string_process": "\nprocess merge_susie{\n    container = 'quay.io/eqtlcatalogue/susie-finemapping:v20.08.1'\n\n    publishDir \"${params.outdir}/susie_full/\", mode: 'copy', pattern: \"*.cred.txt.gz\"\n    publishDir \"${params.outdir}/susie_full/\", mode: 'copy', pattern: \"*.snp.txt.gz\"\n\n    input:\n    tuple val(qtl_subset), file(in_cs_variant_batch_names), file(credible_set_batch_names), file(variant_batch_names)\n    \n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.txt.gz\"), file(\"${qtl_subset}.cred.txt.gz\"), file(\"${qtl_subset}.snp.txt.gz\")\n\n    script:\n    \"\"\"\n    awk 'NR == 1 || FNR > 1{print}' ${in_cs_variant_batch_names.join(' ')} | gzip -c > ${qtl_subset}.txt.gz\n    awk 'NR == 1 || FNR > 1{print}' ${credible_set_batch_names.join(' ')} | gzip -c > ${qtl_subset}.cred.txt.gz\n    awk 'NR == 1 || FNR > 1{print}' ${variant_batch_names.join(' ')} | gzip -c > ${qtl_subset}.snp.txt.gz\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    awk 'NR == 1 || FNR > 1{print}' ${in_cs_variant_batch_names.join(' ')} | gzip -c > ${qtl_subset}.txt.gz\n    awk 'NR == 1 || FNR > 1{print}' ${credible_set_batch_names.join(' ')} | gzip -c > ${qtl_subset}.cred.txt.gz\n    awk 'NR == 1 || FNR > 1{print}' ${variant_batch_names.join(' ')} | gzip -c > ${qtl_subset}.snp.txt.gz\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "in_cs_variant_batch_names",
            "credible_set_batch_names",
            "variant_batch_names"
        ],
        "nb_inputs": 4,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "container = 'quay.io/eqtlcatalogue/susie-finemapping:v20.08.1'",
            "publishDir \"${params.outdir}/susie_full/\", mode: 'copy', pattern: \"*.cred.txt.gz\"",
            "publishDir \"${params.outdir}/susie_full/\", mode: 'copy', pattern: \"*.snp.txt.gz\""
        ],
        "when": "",
        "stub": ""
    },
    "sort_susie": {
        "name_process": "sort_susie",
        "string_process": "\nprocess sort_susie{\n    container = 'quay.io/eqtlcatalogue/susie-finemapping:v20.08.1'\n\n    publishDir \"${params.outdir}/susie/\", mode: 'copy', pattern: \"*.purity_filtered.txt.gz\"\n\n    input:\n    tuple val(qtl_subset), file(merged_susie_output), file(susie_cred_output), file(susie_snp_output)\n\n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.purity_filtered.txt.gz\")\n\n    script:\n    \"\"\"\n    gunzip -c ${merged_susie_output} > susie_merged.txt\n    (head -n 1 susie_merged.txt && tail -n +2 susie_merged.txt | sort -k3 -k4n ) | gzip > ${qtl_subset}.purity_filtered.txt.gz\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    gunzip -c ${merged_susie_output} > susie_merged.txt\n    (head -n 1 susie_merged.txt && tail -n +2 susie_merged.txt | sort -k3 -k4n ) | gzip > ${qtl_subset}.purity_filtered.txt.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "merged_susie_output",
            "susie_cred_output",
            "susie_snp_output"
        ],
        "nb_inputs": 4,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "container = 'quay.io/eqtlcatalogue/susie-finemapping:v20.08.1'",
            "publishDir \"${params.outdir}/susie/\", mode: 'copy', pattern: \"*.purity_filtered.txt.gz\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_cs_variants": {
        "name_process": "extract_cs_variants",
        "string_process": "\nprocess extract_cs_variants{\n    container = 'quay.io/eqtlcatalogue/susie-finemapping:v20.08.1'\n\n    input:\n    tuple val(qtl_subset), file(credible_sets), file(qtl_ss), file(qtl_ss_index)\n\n    output:\n    tuple val(qtl_subset), file(credible_sets), file(\"${qtl_subset}.extracted_sumstats.tsv.gz\")\n\n    script:\n    \"\"\"\n    #Extract variant coordinates from the credible set file\n    csvtk cut -t -T -f chromosome,position ${credible_sets} | tail -n +2 | sort -k1n -k2n | uniq > selected_regions.tsv\n\n    #Extract variants from the summary stats file\n    set +o pipefail; zcat ${qtl_ss} | head -n1 | gzip > header.txt.gz\n    set +o pipefail; tabix -R selected_regions.tsv ${qtl_ss} | gzip > filtered_sumstats.tsv.gz\n    set +o pipefail; zcat header.txt.gz filtered_sumstats.tsv.gz | gzip > ${qtl_subset}.extracted_sumstats.tsv.gz\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    #Extract variant coordinates from the credible set file\n    csvtk cut -t -T -f chromosome,position ${credible_sets} | tail -n +2 | sort -k1n -k2n | uniq > selected_regions.tsv\n\n    #Extract variants from the summary stats file\n    set +o pipefail; zcat ${qtl_ss} | head -n1 | gzip > header.txt.gz\n    set +o pipefail; tabix -R selected_regions.tsv ${qtl_ss} | gzip > filtered_sumstats.tsv.gz\n    set +o pipefail; zcat header.txt.gz filtered_sumstats.tsv.gz | gzip > ${qtl_subset}.extracted_sumstats.tsv.gz\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "credible_sets",
            "qtl_ss",
            "qtl_ss_index"
        ],
        "nb_inputs": 4,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "container = 'quay.io/eqtlcatalogue/susie-finemapping:v20.08.1'"
        ],
        "when": "",
        "stub": ""
    },
    "merge_cs_sumstats": {
        "name_process": "merge_cs_sumstats",
        "string_process": "\nprocess merge_cs_sumstats{\n    publishDir \"${params.outdir}/susie_merged/\", mode: 'copy', pattern: \"*.credible_sets.tsv.gz\"\n    container = 'quay.io/eqtlcatalogue/susie-finemapping:v20.08.1'\n\n    input:\n    tuple val(qtl_subset), file(credible_sets), file(sumstats)\n\n    output:\n    tuple val(qtl_subset), file(\"${qtl_subset}.credible_sets.tsv.gz\")\n\n    script:\n    \"\"\"\n    Rscript $baseDir/bin/susie_merge_cs.R --cs_results ${credible_sets}\\\n     --sumstats ${sumstats}\\\n     --out ${qtl_subset}.credible_sets.tsv.gz\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    Rscript $baseDir/bin/susie_merge_cs.R --cs_results ${credible_sets}\\\n     --sumstats ${sumstats}\\\n     --out ${qtl_subset}.credible_sets.tsv.gz\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_subset",
            "credible_sets",
            "sumstats"
        ],
        "nb_inputs": 3,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "publishDir \"${params.outdir}/susie_merged/\", mode: 'copy', pattern: \"*.credible_sets.tsv.gz\"",
            "container = 'quay.io/eqtlcatalogue/susie-finemapping:v20.08.1'"
        ],
        "when": "",
        "stub": ""
    },
    "extract_samples_from_vcf": {
        "name_process": "extract_samples_from_vcf",
        "string_process": "\nprocess extract_samples_from_vcf {\n    tag \"${qtl_subset}\"\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n\n    input:\n    tuple val(qtl_subset), file(genotype_vcf), file(sample_names)\n\n    output:\n    tuple val(qtl_subset), file(\"${sample_names.simpleName}.vcf.gz\"), emit: vcf \n    tuple val(qtl_subset), file(\"${sample_names.simpleName}.vcf.gz.tbi\"), emit: index\n\n    script:\n    \"\"\"\n    bcftools view -S $sample_names $genotype_vcf -Oz -o ${sample_names.simpleName}.vcf.gz\n    tabix -p vcf ${sample_names.simpleName}.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    bcftools view -S $sample_names $genotype_vcf -Oz -o ${sample_names.simpleName}.vcf.gz\n    tabix -p vcf ${sample_names.simpleName}.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "qtl_subset",
            "genotype_vcf",
            "sample_names"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset}\"",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    },
    "vcf_set_variant_ids": {
        "name_process": "vcf_set_variant_ids",
        "string_process": "process vcf_set_variant_ids {\n    tag \"${qtl_subset}\"\n    container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'\n\n    input:\n    tuple val(qtl_subset), file(vcf)\n\n    output:\n    tuple val(qtl_subset), file(\"${vcf.simpleName}_renamed.vcf.gz\")\n\n    script:\n    \"\"\"\n    bcftools annotate --set-id 'chr%CHROM\\\\_%POS\\\\_%REF\\\\_%FIRST_ALT' $vcf -Oz -o ${vcf.simpleName}_renamed.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    bcftools annotate --set-id 'chr%CHROM\\\\_%POS\\\\_%REF\\\\_%FIRST_ALT' $vcf -Oz -o ${vcf.simpleName}_renamed.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "qtl_subset",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "qtl_subset"
        ],
        "nb_outputs": 1,
        "name_workflow": "eQTL-Catalogue__qtlmap",
        "directive": [
            "tag \"${qtl_subset}\"",
            "container = 'quay.io/eqtlcatalogue/qtlmap:v20.05.1'"
        ],
        "when": "",
        "stub": ""
    }
}
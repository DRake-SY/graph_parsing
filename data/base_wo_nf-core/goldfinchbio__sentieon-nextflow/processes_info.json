{
    "alignment": {
        "name_process": "alignment",
        "string_process": "\nprocess alignment {\n    tag \"${sample_id}\"\n\n    cpus 35\n    memory '61400 MB'\n\n    input:\n    file fasta_ref\n    file fasta_ref_dict\n    file fasta_ref_fai\n    file fasta_ref_alt\n    file fasta_ref_amb\n    file fasta_ref_ann\n    file fasta_ref_bwt\n    file fasta_ref_pac\n    file fasta_ref_sa\n    file fastq1Path\n    file fastq2Path\n\n    output:\n    file \"${sample_id}_sorted.bam\" into outputs_sorted_bam\n    file \"${sample_id}_sorted.bam.bai\" into outputs_indexed_bam\n    file \"code_ver\"\n\n    publishDir \"${outpath}/fastq/${sample_id}/\", mode: 'copy', overwrite: false\n    \n    \"\"\"\n    bwa mem -v 1 -K '${params.chunk_size}' -R \"@RG\\\\tID:${sample_id}\\\\tSM:${sample_id}\\\\tPL:Illumina\" -M -t '${threads}' '${fasta_ref}' '${fastq1Path}' '${fastq2Path}' | sentieon util sort -r '${fasta_ref}' -o '${sample_id}_sorted.bam' -t '${threads}' --sam2bam -i -\n    echo ${code_ver} > code_ver\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "\"\"\"\n    bwa mem -v 1 -K '${params.chunk_size}' -R \"@RG\\\\tID:${sample_id}\\\\tSM:${sample_id}\\\\tPL:Illumina\" -M -t '${threads}' '${fasta_ref}' '${fastq1Path}' '${fastq2Path}' | sentieon util sort -r '${fasta_ref}' -o '${sample_id}_sorted.bam' -t '${threads}' --sam2bam -i -\n    echo ${code_ver} > code_ver\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "fasta_ref",
            "fasta_ref_dict",
            "fasta_ref_fai",
            "fasta_ref_alt",
            "fasta_ref_amb",
            "fasta_ref_ann",
            "fasta_ref_bwt",
            "fasta_ref_pac",
            "fasta_ref_sa",
            "fastq1Path",
            "fastq2Path"
        ],
        "nb_inputs": 11,
        "outputs": [
            "outputs_sorted_bam",
            "outputs_indexed_bam"
        ],
        "nb_outputs": 2,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 35",
            "memory '61400 MB'"
        ],
        "when": "",
        "stub": ""
    },
    "alignment_metrics": {
        "name_process": "alignment_metrics",
        "string_process": "\nprocess alignment_metrics {\n    tag \"${sample_id}\"\n\n    cpus 18\n\n    input:\n    file aligned_bam from outputs_sorted_bam\n    file bam_index from outputs_indexed_bam\n    file fasta_ref\n    file fasta_ref_dict\n    file fasta_ref_fai\n\n    output:\n    file \"${sample_id}.mq_metrics.txt\" into output_meanqualitybycycle\n    file \"${sample_id}.qd_metrics.txt\" into output_qualdistribution\n    file \"${sample_id}.gc_summary.txt\" into output_gcsummary\n    file \"${sample_id}.gc_metrics.txt\" into output_gcmetrics\n    file \"${sample_id}.aln_metrics.txt\" into output_alignsummary\n    file \"${sample_id}.is_metrics.txt\" into output_insertsize\n    file \"code_ver\"\n\n    publishDir \"${outpath}/metrics/${sample_id}/\", mode: 'copy', overwrite: false\n    \n    \"\"\"\n    sentieon driver --input '${aligned_bam}' \\\n                                                     --reference '${fasta_ref}'  \\\n                                                     --thread_count '${threads}' \\\n                                                     --algo MeanQualityByCycle '${sample_id}.mq_metrics.txt'  \\\n                                                     --algo QualDistribution '${sample_id}.qd_metrics.txt'  \\\n                                                     --algo GCBias --summary '${sample_id}.gc_summary.txt' '${sample_id}.gc_metrics.txt'  \\\n                                                     --algo AlignmentStat '${sample_id}.aln_metrics.txt'  \\\n                                                     --algo InsertSizeMetricAlgo '${sample_id}.is_metrics.txt'\n    echo ${code_ver} > code_ver\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "\"\"\"\n    sentieon driver --input '${aligned_bam}' \\\n                                                     --reference '${fasta_ref}'  \\\n                                                     --thread_count '${threads}' \\\n                                                     --algo MeanQualityByCycle '${sample_id}.mq_metrics.txt'  \\\n                                                     --algo QualDistribution '${sample_id}.qd_metrics.txt'  \\\n                                                     --algo GCBias --summary '${sample_id}.gc_summary.txt' '${sample_id}.gc_metrics.txt'  \\\n                                                     --algo AlignmentStat '${sample_id}.aln_metrics.txt'  \\\n                                                     --algo InsertSizeMetricAlgo '${sample_id}.is_metrics.txt'\n    echo ${code_ver} > code_ver\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outputs_sorted_bam",
            "outputs_indexed_bam",
            "fasta_ref",
            "fasta_ref_dict",
            "fasta_ref_fai"
        ],
        "nb_inputs": 5,
        "outputs": [
            "output_meanqualitybycycle",
            "output_qualdistribution",
            "output_gcsummary",
            "output_gcmetrics",
            "output_alignsummary",
            "output_insertsize"
        ],
        "nb_outputs": 6,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 18"
        ],
        "when": "",
        "stub": ""
    },
    "plot_alignment_metrics_gc": {
        "name_process": "plot_alignment_metrics_gc",
        "string_process": "\nprocess plot_alignment_metrics_gc {\n    tag \"${sample_id}\"\n\n    errorStrategy 'finish'\n\n    cpus 18\n\n    input:\n    file input_gcmetrics from output_gcmetrics\n\n    output:\n    file \"${sample_id}.gc_metrics_plot.pdf\"\n\n    publishDir \"${outpath}/metrics/${sample_id}/\", mode: 'copy', overwrite: false\n    \n    \"\"\"\n    sentieon plot GCBias -o \"${sample_id}.gc_metrics_plot.pdf\" '${input_gcmetrics}'\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    sentieon plot GCBias -o \"${sample_id}.gc_metrics_plot.pdf\" '${input_gcmetrics}'\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "output_gcmetrics"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "errorStrategy 'finish'",
            "cpus 18"
        ],
        "when": "",
        "stub": ""
    },
    "plot_alignment_metrics_qd": {
        "name_process": "plot_alignment_metrics_qd",
        "string_process": "\nprocess plot_alignment_metrics_qd {\n    tag \"${sample_id}\"\n\n    cpus 18\n\n    input:\n    file input_qualdistribution from output_qualdistribution\n\n    output:\n    file \"${sample_id}.qd_metrics_plot.pdf\"\n\n    publishDir \"${outpath}/metrics/${sample_id}/\", mode: 'copy', overwrite: false\n    \n    \"\"\"\n    sentieon plot QualDistribution -o \"${sample_id}.qd_metrics_plot.pdf\" '${input_qualdistribution}'\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    sentieon plot QualDistribution -o \"${sample_id}.qd_metrics_plot.pdf\" '${input_qualdistribution}'\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "output_qualdistribution"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 18"
        ],
        "when": "",
        "stub": ""
    },
    "plot_alignment_metrics_mq": {
        "name_process": "plot_alignment_metrics_mq",
        "string_process": "\nprocess plot_alignment_metrics_mq {\n    tag \"${sample_id}\"\n\n    cpus 18\n\n    input:\n    file input_meanqualitybycycle from output_meanqualitybycycle\n\n    output:\n    file \"${sample_id}.mq_metrics_plot.pdf\"\n\n    publishDir \"${outpath}/metrics/${sample_id}/\", mode: 'copy', overwrite: false\n    \n    \"\"\"\n    sentieon plot MeanQualityByCycle -o \"${sample_id}.mq_metrics_plot.pdf\" '${input_meanqualitybycycle}'\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    sentieon plot MeanQualityByCycle -o \"${sample_id}.mq_metrics_plot.pdf\" '${input_meanqualitybycycle}'\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "output_meanqualitybycycle"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 18"
        ],
        "when": "",
        "stub": ""
    },
    "plot_alignment_metrics_isize": {
        "name_process": "plot_alignment_metrics_isize",
        "string_process": "\nprocess plot_alignment_metrics_isize {\n    tag \"${sample_id}\"\n\n    cpus 18\n\n    input:\n    file input_insertsize from output_insertsize\n\n    output:\n    file \"${sample_id}.is_metrics_plot.pdf\"\n\n    publishDir \"${outpath}/metrics/${sample_id}/\", mode: 'copy', overwrite: false\n    \n    \"\"\"\n    sentieon plot InsertSizeMetricAlgo -o \"${sample_id}.is_metrics_plot.pdf\" '${input_insertsize}'\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    sentieon plot InsertSizeMetricAlgo -o \"${sample_id}.is_metrics_plot.pdf\" '${input_insertsize}'\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "output_insertsize"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 18"
        ],
        "when": "",
        "stub": ""
    },
    "locus_collector": {
        "name_process": "locus_collector",
        "string_process": "\nprocess locus_collector {\n    tag \"${sample_id}\"\n\n    cpus 18\n\n    input:\n    file aligned_bam from outputs_sorted_bam\n    file bam_index from outputs_indexed_bam\n\n    output:\n    file \"${sample_id}.score.txt\" into output_score_info\n    file \"${sample_id}.score.txt.idx\" into output_score_info_index\n\n    \n    \"\"\"\n    sentieon driver --input '${aligned_bam}' \\\n                                                     --thread_count '${threads}' \\\n                                                     --algo LocusCollector \\\n                                                     --fun score_info '${sample_id}.score.txt'\n\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n    sentieon driver --input '${aligned_bam}' \\\n                                                     --thread_count '${threads}' \\\n                                                     --algo LocusCollector \\\n                                                     --fun score_info '${sample_id}.score.txt'\n\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outputs_sorted_bam",
            "outputs_indexed_bam"
        ],
        "nb_inputs": 2,
        "outputs": [
            "output_score_info",
            "output_score_info_index"
        ],
        "nb_outputs": 2,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 18"
        ],
        "when": "",
        "stub": ""
    },
    "deduplication": {
        "name_process": "deduplication",
        "string_process": "\nprocess deduplication {\n    tag \"${sample_id}\"\n\n    cpus 18\n\n    input:\n    file aligned_bam from outputs_sorted_bam\n    file bam_index from outputs_indexed_bam\n    file score_info from output_score_info\n    file score_info_index from output_score_info_index\n\n    output:\n    file \"${sample_id}.deduped.bam\" into outputs_deduped_bam\n    file \"${sample_id}.deduped.bam.bai\" into outputs_deduped_indexed_bam\n    file \"${sample_id}.dedup_metrics.txt\" into outputs_deduped_metrics\n\n    \n    \"\"\"\n    sentieon driver --input '${aligned_bam}' \\\n                                                     --thread_count '${threads}' \\\n                                                     --algo Dedup \\\n                                                     --metrics '${sample_id}.dedup_metrics.txt' \\\n                                                     --rmdup \\\n                                                     --score_info '${score_info}' \\\n                                                     '${sample_id}.deduped.bam'\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n    sentieon driver --input '${aligned_bam}' \\\n                                                     --thread_count '${threads}' \\\n                                                     --algo Dedup \\\n                                                     --metrics '${sample_id}.dedup_metrics.txt' \\\n                                                     --rmdup \\\n                                                     --score_info '${score_info}' \\\n                                                     '${sample_id}.deduped.bam'\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outputs_sorted_bam",
            "outputs_indexed_bam",
            "output_score_info",
            "output_score_info_index"
        ],
        "nb_inputs": 4,
        "outputs": [
            "outputs_deduped_bam",
            "outputs_deduped_indexed_bam",
            "outputs_deduped_metrics"
        ],
        "nb_outputs": 3,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 18"
        ],
        "when": "",
        "stub": ""
    },
    "realignment": {
        "name_process": "realignment",
        "string_process": "\nprocess realignment {\n    tag \"${sample_id}\"\n\n    cpus 18\n\n    input:\n    file deduped_bam from outputs_deduped_bam\n    file bam_index from outputs_deduped_indexed_bam\n    file fasta_ref\n    file fasta_ref_dict\n    file fasta_ref_fai\n    file reference_mills\n    file reference_mills_index\n\n    output:\n    file \"${sample_id}.bam\" into outputs_bam_realignment\n    file \"${sample_id}.bam.bai\" into outputs_realigned_indexed_bam\n    file \"code_ver\"\n\n    publishDir \"${outpath}/bam/${sample_id}/\", mode: 'copy', overwrite: false\n    \n    \"\"\"\n    sentieon driver --input '${deduped_bam}' \\\n                                                     --reference '${fasta_ref}' \\\n                                                     --thread_count '${threads}' \\\n                                                     --algo Realigner \\\n                                                     --known_sites '${reference_mills}' \\\n                                                     '${sample_id}.bam'\n\n    echo \"${code_ver}\" > code_ver\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "\"\"\"\n    sentieon driver --input '${deduped_bam}' \\\n                                                     --reference '${fasta_ref}' \\\n                                                     --thread_count '${threads}' \\\n                                                     --algo Realigner \\\n                                                     --known_sites '${reference_mills}' \\\n                                                     '${sample_id}.bam'\n\n    echo \"${code_ver}\" > code_ver\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outputs_deduped_bam",
            "outputs_deduped_indexed_bam",
            "fasta_ref",
            "fasta_ref_dict",
            "fasta_ref_fai",
            "reference_mills",
            "reference_mills_index"
        ],
        "nb_inputs": 7,
        "outputs": [
            "outputs_bam_realignment",
            "outputs_realigned_indexed_bam"
        ],
        "nb_outputs": 2,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 18"
        ],
        "when": "",
        "stub": ""
    },
    "qualcal": {
        "name_process": "qualcal",
        "string_process": "\nprocess qualcal {\n    tag \"${sample_id}\"\n\n    cpus 11\n\n    input:\n    file realigned_bam from outputs_bam_realignment\n    file bam_index from outputs_realigned_indexed_bam\n    file fasta_ref\n    file fasta_ref_dict\n    file fasta_ref_fai\n    file reference_mills\n    file reference_mills_index\n    file reference_dbsnp\n    file reference_dbsnp_index\n\n    output:\n    file \"${sample_id}.recal.table\" into outputs_recal_table\n    \n    \"\"\"\n    sentieon driver --input '${realigned_bam}' \\\n                                                     --reference '${fasta_ref}' \\\n                                                     --thread_count '${threads}' \\\n                                                     --algo QualCal \\\n                                                     --known_sites '${reference_dbsnp}' \\\n                                                     --known_sites '${reference_mills}' \\\n                                                     '${sample_id}.recal.table'\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n    sentieon driver --input '${realigned_bam}' \\\n                                                     --reference '${fasta_ref}' \\\n                                                     --thread_count '${threads}' \\\n                                                     --algo QualCal \\\n                                                     --known_sites '${reference_dbsnp}' \\\n                                                     --known_sites '${reference_mills}' \\\n                                                     '${sample_id}.recal.table'\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outputs_bam_realignment",
            "outputs_realigned_indexed_bam",
            "fasta_ref",
            "fasta_ref_dict",
            "fasta_ref_fai",
            "reference_mills",
            "reference_mills_index",
            "reference_dbsnp",
            "reference_dbsnp_index"
        ],
        "nb_inputs": 9,
        "outputs": [
            "outputs_recal_table"
        ],
        "nb_outputs": 1,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 11"
        ],
        "when": "",
        "stub": ""
    },
    "qualcalpost": {
        "name_process": "qualcalpost",
        "string_process": "\nprocess qualcalpost {\n    tag \"${sample_id}\"\n\n    cpus 11\n\n    input:\n    file realigned_bam from outputs_bam_realignment\n    file bam_index from outputs_realigned_indexed_bam\n    file qualcal from outputs_recal_table\n    file fasta_ref\n    file fasta_ref_dict\n    file fasta_ref_fai\n    file reference_mills\n    file reference_mills_index\n    file reference_dbsnp\n    file reference_dbsnp_index\n\n    output:\n    file \"${sample_id}.recal.table.post\" into outputs_recal_table_post\n\n    \"\"\"\n    sentieon driver --input '${realigned_bam}' \\\n                                                     --qual_cal '${qualcal}' \\\n                                                     --reference '${fasta_ref}' \\\n                                                     --thread_count '${threads}' \\\n                                                     --algo QualCal \\\n                                                     --known_sites '${reference_dbsnp}' \\\n                                                     --known_sites '${reference_mills}' \\\n                                                     '${sample_id}.recal.table.post'\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "\"\"\"\n    sentieon driver --input '${realigned_bam}' \\\n                                                     --qual_cal '${qualcal}' \\\n                                                     --reference '${fasta_ref}' \\\n                                                     --thread_count '${threads}' \\\n                                                     --algo QualCal \\\n                                                     --known_sites '${reference_dbsnp}' \\\n                                                     --known_sites '${reference_mills}' \\\n                                                     '${sample_id}.recal.table.post'\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outputs_bam_realignment",
            "outputs_realigned_indexed_bam",
            "outputs_recal_table",
            "fasta_ref",
            "fasta_ref_dict",
            "fasta_ref_fai",
            "reference_mills",
            "reference_mills_index",
            "reference_dbsnp",
            "reference_dbsnp_index"
        ],
        "nb_inputs": 10,
        "outputs": [
            "outputs_recal_table_post"
        ],
        "nb_outputs": 1,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 11"
        ],
        "when": "",
        "stub": ""
    },
    "applyrecal": {
        "name_process": "applyrecal",
        "string_process": "\nprocess applyrecal {\n    tag \"${sample_id}\"\n\n    cpus 11\n\n    input:\n    file qualcal from outputs_recal_table\n    file recal_table from outputs_recal_table_post\n\n    output:\n    file \"${sample_id}.recal.csv\" into outputs_bqsr\n    \n    \"\"\"\n    sentieon driver --thread_count '${threads}' \\\n                                                     --algo QualCal \\\n                                                     --after '${recal_table}' \\\n                                                     --before '${qualcal}' \\\n                                                     --plot '${sample_id}.recal.csv'\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    sentieon driver --thread_count '${threads}' \\\n                                                     --algo QualCal \\\n                                                     --after '${recal_table}' \\\n                                                     --before '${qualcal}' \\\n                                                     --plot '${sample_id}.recal.csv'\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outputs_recal_table",
            "outputs_recal_table_post"
        ],
        "nb_inputs": 2,
        "outputs": [
            "outputs_bqsr"
        ],
        "nb_outputs": 1,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 11"
        ],
        "when": "",
        "stub": ""
    },
    "plotbqsr": {
        "name_process": "plotbqsr",
        "string_process": "\nprocess plotbqsr {\n    tag \"${sample_id}\"\n    \n    cpus 10\n\n    input:\n    file recal_table from outputs_bqsr\n\n    output:\n    file \"${sample_id}.recal.pdf\"\n\n    publishDir \"${outpath}/metrics/${sample_id}/\", mode: 'copy', overwrite: false\n    \n    \"\"\"\n    sentieon plot QualCal -o '${sample_id}.recal.pdf' '${recal_table}'\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    sentieon plot QualCal -o '${sample_id}.recal.pdf' '${recal_table}'\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outputs_bqsr"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 10"
        ],
        "when": "",
        "stub": ""
    },
    "haplotypecaller": {
        "name_process": "haplotypecaller",
        "string_process": "\nprocess haplotypecaller {\n    tag \"${sample_id}\"\n\n    cpus 30\n\n    input:\n    file realigned_bam from outputs_bam_realignment\n    file bam_index from outputs_realigned_indexed_bam\n    file recal_table from outputs_recal_table\n    file fasta_ref\n    file fasta_ref_dict\n    file fasta_ref_fai\n    file reference_dbsnp\n    file reference_dbsnp_index\n\n    output:\n    file \"${sample_id}.g.vcf.gz\" into outputs_gvcf\n    file \"${sample_id}.g.vcf.gz.tbi\" into outputs_gvcf_index\n    file \"code_ver\"\n\n    publishDir \"${outpath}/gvcf/${sample_id}/\", mode: 'copy', overwrite: false\n    \n    \"\"\"\n    ARG_INTERVAL=\"\"\n    if [[ ${iswes} == \"true\" ]]\n    then\n        aws s3 cp ${reference_bedfile} wes.bed --region ${aws_region}\n        ARG_INTERVAL=\"--interval wes.bed\"\n    fi\n    sentieon driver \\$ARG_INTERVAL --input '${realigned_bam}' \\\n                                                               --qual_cal '${recal_table}' \\\n                                                               --reference '${fasta_ref}' \\\n                                                               --thread_count '${threads}' \\\n                                                               --algo Haplotyper \\\n                                                               --call_conf 30 \\\n                                                               --dbsnp '${reference_dbsnp}' \\\n                                                               --emit_conf 30 \\\n                                                               --emit_mode Gvcf \\\n                                                               '${sample_id}.g.vcf.gz'\n\n    echo \"${code_ver}\" > code_ver\n    \"\"\"\n    \n}",
        "nb_lignes_process": 43,
        "string_script": "\"\"\"\n    ARG_INTERVAL=\"\"\n    if [[ ${iswes} == \"true\" ]]\n    then\n        aws s3 cp ${reference_bedfile} wes.bed --region ${aws_region}\n        ARG_INTERVAL=\"--interval wes.bed\"\n    fi\n    sentieon driver \\$ARG_INTERVAL --input '${realigned_bam}' \\\n                                                               --qual_cal '${recal_table}' \\\n                                                               --reference '${fasta_ref}' \\\n                                                               --thread_count '${threads}' \\\n                                                               --algo Haplotyper \\\n                                                               --call_conf 30 \\\n                                                               --dbsnp '${reference_dbsnp}' \\\n                                                               --emit_conf 30 \\\n                                                               --emit_mode Gvcf \\\n                                                               '${sample_id}.g.vcf.gz'\n\n    echo \"${code_ver}\" > code_ver\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "JABAWS"
        ],
        "tools_url": [
            "https://bio.tools/jabaws"
        ],
        "tools_dico": [
            {
                "name": "JABAWS",
                "uri": "https://bio.tools/jabaws",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0097",
                            "term": "Nucleic acid structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3762",
                                    "term": "Service composition"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Collection of web services for bioinformatics, and currently provides services that make it easy to access well-known multiple sequence It is free software which provides web services conveniently packaged to run on your local computer, server, cluster or Amazon EC2 instance.",
                "homepage": "http://www.compbio.dundee.ac.uk/jabaws/"
            }
        ],
        "inputs": [
            "outputs_bam_realignment",
            "outputs_realigned_indexed_bam",
            "outputs_recal_table",
            "fasta_ref",
            "fasta_ref_dict",
            "fasta_ref_fai",
            "reference_dbsnp",
            "reference_dbsnp_index"
        ],
        "nb_inputs": 8,
        "outputs": [
            "outputs_gvcf",
            "outputs_gvcf_index"
        ],
        "nb_outputs": 2,
        "name_workflow": "goldfinchbio__sentieon-nextflow",
        "directive": [
            "tag \"${sample_id}\"",
            "cpus 30"
        ],
        "when": "",
        "stub": ""
    }
}
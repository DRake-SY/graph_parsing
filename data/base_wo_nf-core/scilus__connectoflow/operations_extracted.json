{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(\"$root/**/*t1.nii.gz\",\n                    maxDepth:1)\n    .map{[it.parent.name, it]}\n    .into{in_t1;subjects_for_count}",
        "origin": [],
        "gives": [
            [
                "in_t1",
                "P"
            ],
            [
                "subjects_for_count",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath(\"$root/**/*$params.labels_img_prefix*labels.nii.gz\",\n                    maxDepth:1)\n    .map{[it.parent.name, it]}\n    .set{in_labels}",
        "origin": [],
        "gives": [
            [
                "in_labels",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "in_transfo = Channel\n    .fromFilePairs(\"$root/**/{*0GenericAffine.mat,*1Warp.nii.gz}\",\n                    size: 2,\n                    maxDepth:1,\n                    flat: true) {it.parent.name}",
        "origin": [],
        "gives": [
            [
                "in_transfo",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "in_tracking = Channel\n    .fromFilePairs(\"$root/**/{*tracking*.*,}\",\n                    size: -1,\n                    maxDepth:1) {it.parent.name}",
        "origin": [],
        "gives": [
            [
                "in_tracking",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n    .fromPath(\"$root/**/*fodf.nii.gz\",\n                    maxDepth:1)\n    .map{[it.parent.name, it]}\n    .into{fodf_for_afd_rd;fodf_for_count}",
        "origin": [],
        "gives": [
            [
                "fodf_for_afd_rd",
                "P"
            ],
            [
                "fodf_for_count",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n    .fromFilePairs(\"$params.input/**/*lesion_mask.nii.gz\",\n        size: -1) { it.parent.name }\n    .set{lesion_for_lesion_load}",
        "origin": [],
        "gives": [
            [
                "lesion_for_lesion_load",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel.fromPath(file(params.template))\n    .into{template_for_registration;template_for_transformation_data;template_for_transformation_metrics;template_for_transformation_lesions}",
        "origin": [
            [
                "file(params.template",
                "A"
            ]
        ],
        "gives": [
            [
                "template_for_registration",
                "P"
            ],
            [
                "template_for_transformation_data",
                "P"
            ],
            [
                "template_for_transformation_metrics",
                "P"
            ],
            [
                "template_for_transformation_lesions",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel.fromPath(file(params.labels_list))\n    .into{labels_list_for_compute;labels_list_for_visualize}",
        "origin": [
            [
                "file(params.labels_list",
                "A"
            ]
        ],
        "gives": [
            [
                "labels_list_for_compute",
                "P"
            ],
            [
                "labels_list_for_visualize",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "in_opt_metrics = Channel\n    .fromFilePairs(\"$root/**/metrics/*.nii.gz\",\n                    size: -1,\n                    maxDepth:2) {it.parent.parent.name}",
        "origin": [],
        "gives": [
            [
                "in_opt_metrics",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "in_dwi_data = Channel\n    .fromFilePairs(\"$root/**/{*dwi.bval,*dwi.bvec,*dwi.nii.gz,*peaks.nii.gz}\",\n                    size: 4,\n                    maxDepth:1,\n                    flat: true) {it.parent.name}",
        "origin": [],
        "gives": [
            [
                "in_dwi_data",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "anat_for_transformation = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "anat_for_transformation",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "ori_anat = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ori_anat",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "ori_labels = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ori_labels",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "h5_labels_list_for_compute = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "h5_labels_list_for_compute",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "h5_labels_similarity_list_for_compute = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "h5_labels_similarity_list_for_compute",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "dwi_for_count, data_for_commit = in_dwi_data\n    .map{sid, bval, bvec, dwi, peaks ->\n        [tuple(sid, dwi),\n        tuple(sid, bval, bvec, dwi, peaks)]}\n    .separate(2)",
        "origin": [
            [
                "in_dwi_data",
                "P"
            ]
        ],
        "gives": [
            [
                "dwi_for_count",
                "P"
            ],
            [
                "data_for_commit",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "subjects_for_count.count().into{ number_subj_for_null_check; number_subj_for_compare_dwi; number_subj_for_compare_fodf; number_subj_for_compare_similarity}",
        "origin": [
            [
                "subjects_for_count",
                "P"
            ]
        ],
        "gives": [
            [
                "number_subj_for_null_check",
                "P"
            ],
            [
                "number_subj_for_compare_dwi",
                "P"
            ],
            [
                "number_subj_for_compare_fodf",
                "P"
            ],
            [
                "number_subj_for_compare_similarity",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "dwi_for_count.count().into{ dwi_for_null_check; dwi_for_compare }",
        "origin": [
            [
                "dwi_for_count",
                "P"
            ]
        ],
        "gives": [
            [
                "dwi_for_null_check",
                "P"
            ],
            [
                "dwi_for_compare",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "fodf_for_count.count().into{ fodf_for_null_check; fodf_for_compare }",
        "origin": [
            [
                "fodf_for_count",
                "P"
            ]
        ],
        "gives": [
            [
                "fodf_for_null_check",
                "P"
            ],
            [
                "fodf_for_compare",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "number_subj_for_null_check\n.subscribe{a -> if (a == 0)\n    error \"Error ~ No subjects found. Please check the naming convention, your --input path.\"}",
        "origin": [
            [
                "number_subj_for_null_check",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_21": {
        "string": "number_subj_for_compare_similarity\n.subscribe{a -> if (a < params.nbr_subjects_for_avg_connections && params.use_similarity_metric)\n    error \"Error --nbr_subjects_for_avg_connections is higher than the number of subjects. Please modify it or use --he number of subjects. Please modify it or use --use_similarity_metric\"}",
        "origin": [
            [
                "number_subj_for_compare_similarity",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_22": {
        "string": "dwi_for_null_check\n.subscribe{a -> if (a == 0)\n    run_commit = false}",
        "origin": [
            [
                "dwi_for_null_check",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_23": {
        "string": "fodf_for_null_check\n.subscribe{a -> if (a == 0)\n    run_afd_rd = false}",
        "origin": [
            [
                "fodf_for_null_check",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_24": {
        "string": "number_subj_for_compare_dwi\n    .concat(dwi_for_compare)\n    .toList()\n    .subscribe{a, b -> if (a != b && b > 0)\n    error \"Error ~ Mismatch between the number of subjects and DWI\"}",
        "origin": [
            [
                "number_subj_for_compare_dwi",
                "P"
            ],
            [
                "dwi_for_compare",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_25": {
        "string": "number_subj_for_compare_fodf\n    .concat(fodf_for_compare)\n    .toList()\n    .subscribe{a, b -> if (a != b && b > 0)\n    error \"Error ~ Mismatch between the number of subjects and FODF\"}",
        "origin": [
            [
                "number_subj_for_compare_fodf",
                "P"
            ],
            [
                "fodf_for_compare",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_26": {
        "string": "in_t1\n        .set{ori_anat}",
        "origin": [
            [
                "in_t1",
                "P"
            ]
        ],
        "gives": [
            [
                "ori_anat",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "in_labels\n        .set{ori_labels}",
        "origin": [
            [
                "in_labels",
                "P"
            ]
        ],
        "gives": [
            [
                "ori_labels",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "in_t1\n        .join(in_labels)\n        .join(in_transfo)\n        .set{anat_for_transformation}",
        "origin": [
            [
                "in_t1",
                "P"
            ],
            [
                "in_labels",
                "P"
            ],
            [
                "in_transfo",
                "P"
            ]
        ],
        "gives": [
            [
                "anat_for_transformation",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "ori_anat\n    .concat(transformed_anat)\n    .into{anat_for_registration;anat_for_concatenate;anat_for_metrics;anat_for_lesions}",
        "origin": [
            [
                "ori_anat",
                "P"
            ],
            [
                "transformed_anat",
                "P"
            ]
        ],
        "gives": [
            [
                "anat_for_registration",
                "P"
            ],
            [
                "anat_for_concatenate",
                "P"
            ],
            [
                "anat_for_metrics",
                "P"
            ],
            [
                "anat_for_lesions",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "ori_labels\n    .concat(transformed_labels)\n    .into{labels_for_transformation;labels_for_decompose}",
        "origin": [
            [
                "ori_labels",
                "P"
            ],
            [
                "transformed_labels",
                "P"
            ]
        ],
        "gives": [
            [
                "labels_for_transformation",
                "P"
            ],
            [
                "labels_for_decompose",
                "P"
            ]
        ]
    },
    "OPERATION_31": {
        "string": "in_tracking.set{tracking_for_decompose}",
        "origin": [
            [
                "in_tracking",
                "P"
            ]
        ],
        "gives": [
            [
                "tracking_for_decompose",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "tracking_for_decompose\n    .join(labels_for_decompose)\n    .set{tracking_labels_for_decompose}",
        "origin": [
            [
                "tracking_for_decompose",
                "P"
            ],
            [
                "labels_for_decompose",
                "P"
            ]
        ],
        "gives": [
            [
                "tracking_labels_for_decompose",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "data_for_commit\n    .join(h5_for_commit)\n    .set{data_tracking_for_commit}",
        "origin": [
            [
                "data_for_commit",
                "P"
            ],
            [
                "h5_for_commit",
                "P"
            ]
        ],
        "gives": [
            [
                "data_tracking_for_commit",
                "P"
            ]
        ]
    },
    "OPERATION_34": {
        "string": "h5_for_skip_commit\n        .into{h5_for_afd_rd;h5_for_skip_afd_rd}",
        "origin": [
            [
                "h5_for_skip_commit",
                "P"
            ]
        ],
        "gives": [
            [
                "h5_for_afd_rd",
                "P"
            ],
            [
                "h5_for_skip_afd_rd",
                "P"
            ]
        ]
    },
    "OPERATION_35": {
        "string": "h5_for_afd_rd\n    .join(fodf_for_afd_rd)\n    .set{h5_fodf_for_afd_rd}",
        "origin": [
            [
                "h5_for_afd_rd",
                "P"
            ],
            [
                "fodf_for_afd_rd",
                "P"
            ]
        ],
        "gives": [
            [
                "h5_fodf_for_afd_rd",
                "P"
            ]
        ]
    },
    "OPERATION_36": {
        "string": "anat_for_registration\n    .combine(template_for_registration)\n    .set{anats_for_registration}PROCESS DEF Register_Anat",
        "origin": [
            [
                "anat_for_registration",
                "P"
            ],
            [
                "template_for_registration",
                "P"
            ]
        ],
        "gives": [
            [
                "anats_for_registration",
                "P"
            ]
        ]
    },
    "OPERATION_37": {
        "string": "in_opt_metrics\n    .transpose()\n    .concat(anat_for_metrics)\n    .groupTuple()\n    .flatMap{ sid, metrics -> metrics.collect{ [sid, it] } }\n    .combine(transformation_for_metrics, by: 0)\n    .combine(template_for_transformation_metrics)\n    .set{metrics_transformation_for_metrics}PROCESS DEF Transform_Metrics",
        "origin": [
            [
                "in_opt_metrics",
                "P"
            ],
            [
                "template_for_transformation_metrics",
                "P"
            ],
            [
                "anat_for_metrics",
                "P"
            ]
        ],
        "gives": [
            [
                "metrics_transformation_for_metrics",
                "P"
            ]
        ]
    },
    "OPERATION_38": {
        "string": "lesion_for_lesion_load\n    .join(transformation_for_lesions)\n    .combine(template_for_transformation_lesions)\n    .set{lesions_transformation_for_data}",
        "origin": [
            [
                "lesion_for_lesion_load",
                "P"
            ],
            [
                "transformation_for_lesions",
                "P"
            ],
            [
                "template_for_transformation_lesions",
                "P"
            ]
        ],
        "gives": [
            [
                "lesions_transformation_for_data",
                "P"
            ]
        ]
    },
    "OPERATION_39": {
        "string": "h5_for_skip_afd_rd\n        .set{h5_for_transformation}",
        "origin": [
            [
                "h5_for_skip_afd_rd",
                "P"
            ]
        ],
        "gives": [
            [
                "h5_for_transformation",
                "P"
            ]
        ]
    },
    "OPERATION_40": {
        "string": "h5_for_transformation\n    .join(labels_for_transformation)\n    .join(transformation_for_data)\n    .combine(template_for_transformation_data)\n    .set{labels_tracking_transformation_for_data}PROCESS DEF Transform_Data",
        "origin": [
            [
                "h5_for_transformation",
                "P"
            ],
            [
                "labels_for_transformation",
                "P"
            ],
            [
                "transformation_for_data",
                "P"
            ],
            [
                "template_for_transformation_data",
                "P"
            ]
        ],
        "gives": [
            [
                "labels_tracking_transformation_for_data",
                "P"
            ]
        ]
    },
    "OPERATION_41": {
        "string": "h5_for_similarity\n    .take(params.nbr_subjects_for_avg_connections)\n    .collect()\n    .set{all_h5_for_similarity}",
        "origin": [
            [
                "h5_for_similarity",
                "P"
            ]
        ],
        "gives": [
            [
                "all_h5_for_similarity",
                "P"
            ]
        ]
    },
    "OPERATION_42": {
        "string": "metrics_for_compute\n    .concat(lesions_for_compute)\n    .groupTuple()\n    .set{all_metrics_for_compute}",
        "origin": [
            [
                "metrics_for_compute",
                "P"
            ],
            [
                "lesions_for_compute",
                "P"
            ]
        ],
        "gives": [
            [
                "all_metrics_for_compute",
                "P"
            ]
        ]
    },
    "OPERATION_43": {
        "string": "h5_labels_for_compute\n        .join(all_metrics_for_compute)\n        .combine(edges_for_similarity)\n        .combine(labels_list_for_compute)\n        .set{h5_labels_similarity_list_for_compute}",
        "origin": [
            [
                "h5_labels_for_compute",
                "P"
            ],
            [
                "all_metrics_for_compute",
                "P"
            ],
            [
                "edges_for_similarity",
                "P"
            ],
            [
                "labels_list_for_compute",
                "P"
            ]
        ],
        "gives": [
            [
                "h5_labels_similarity_list_for_compute",
                "P"
            ]
        ]
    },
    "OPERATION_44": {
        "string": "h5_labels_for_compute\n        .join(all_metrics_for_compute)\n        .combine(labels_list_for_compute)\n        .set{h5_labels_list_for_compute}",
        "origin": [
            [
                "h5_labels_for_compute",
                "P"
            ],
            [
                "all_metrics_for_compute",
                "P"
            ],
            [
                "labels_list_for_compute",
                "P"
            ]
        ],
        "gives": [
            [
                "h5_labels_list_for_compute",
                "P"
            ]
        ]
    },
    "OPERATION_45": {
        "string": "matrices_w_similarity_for_merge\n  .mix(matrices_wo_similarity_for_merge)\n  .set{matrices_for_connectivity_in_csv}",
        "origin": [
            [
                "matrices_w_similarity_for_merge",
                "P"
            ],
            [
                "matrices_wo_similarity_for_merge",
                "P"
            ]
        ],
        "gives": [
            [
                "matrices_for_connectivity_in_csv",
                "P"
            ]
        ]
    },
    "OPERATION_46": {
        "string": "matrices_for_visualize_with_similarity\n    .concat(matrices_for_visualize_without_similarity)\n    .combine(labels_list_for_visualize)\n    .set{matrices_labels_list_for_visualize}",
        "origin": [
            [
                "matrices_for_visualize_with_similarity",
                "P"
            ],
            [
                "labels_list_for_visualize",
                "P"
            ],
            [
                "matrices_for_visualize_without_similarity",
                "P"
            ]
        ],
        "gives": [
            [
                "matrices_labels_list_for_visualize",
                "P"
            ]
        ]
    }
}
{
    "snp_sites": {
        "name_process": "snp_sites",
        "string_process": "\nprocess snp_sites {\n    publishDir \"${params.outdir}/gubbins/\" , mode: 'copy'\n\n    input:\n    path(aln)\n\n    output:\n    path \"gubbins.filtered_polymorphic_sites_clean.fasta\", emit: core_aln\n\n    script:\n    \"\"\"\n    snp-sites \\\n        -c -m \\\n        -o gubbins.filtered_polymorphic_sites_clean.fasta \\\n        ${aln}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    snp-sites \\\n        -c -m \\\n        -o gubbins.filtered_polymorphic_sites_clean.fasta \\\n        ${aln}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aln"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-snp",
        "directive": [
            "publishDir \"${params.outdir}/gubbins/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "snippy": {
        "name_process": "snippy",
        "string_process": "\nprocess snippy {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/snippy\" , mode: 'copy'\n\n    input:\n    tuple val(id), path(input)\n    path (ref)\n    path (targets)\n    \n    output:\n    tuple val(id), path(\"${id}\"), emit: snps\n\n    script:\n    param_input = params.single_end ? \" --se \\\"$input\\\"\" : \"--pe1 \\\"${input[0]}\\\" --pe2 \\\"${input[1]}\\\"\"\n    param_targets = params.targets != 'none' ? \"--targets $targets\" : ''\n    param_report = params.report ? '--report' : ''\n    \"\"\"\n    snippy \\\n        --cpus ${task.cpus} \\\n        --outdir ${id} \\\n        --ref ${ref} \\\n        $param_input \\\n        $param_targets \\\n        $param_report\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    param_input = params.single_end ? \" --se \\\"$input\\\"\" : \"--pe1 \\\"${input[0]}\\\" --pe2 \\\"${input[1]}\\\"\"\n    param_targets = params.targets != 'none' ? \"--targets $targets\" : ''\n    param_report = params.report ? '--report' : ''\n    \"\"\"\n    snippy \\\n        --cpus ${task.cpus} \\\n        --outdir ${id} \\\n        --ref ${ref} \\\n        $param_input \\\n        $param_targets \\\n        $param_report\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "snippy"
        ],
        "tools_url": [
            "https://bio.tools/snippy"
        ],
        "tools_dico": [
            {
                "name": "snippy",
                "uri": "https://bio.tools/snippy",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0567",
                                    "term": "Phylogenetic tree rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Rapid haploid variant calling and core SNP phylogeny generation.",
                "homepage": "https://github.com/tseemann/snippy"
            }
        ],
        "inputs": [
            "id",
            "input",
            "ref",
            "targets"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-snp",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/snippy\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "snippy_core": {
        "name_process": "snippy_core",
        "string_process": "\nprocess snippy_core {\n    publishDir \"${params.outdir}/snippy_core\" , mode: 'copy'\n    publishDir \"${params.outdir}\" , mode: 'copy' ,\n        saveAs: { filename -> \n            if (filename == \"core.aln\") \"core_aln.fa\"\n            else if (filename == \"core.vcf\") \"core.vcf\"\n            else if (filename == \"clean.full.aln\") \"full_aln.fa\"\n        }\n    \n    input:\n    path (snps)\n    path (ref)\n\n    output:\n    path \"core.*\"\n    path \"core.aln\", emit: core_aln\n    path \"clean.full.aln\", emit: clean_full_aln\n\n    script:\n    \"\"\"\n    snippy-core \\\n        --ref ${ref} \\\n        ${snps}\n\n    snippy-clean_full_aln \\\n        core.full.aln > clean.full.aln\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    snippy-core \\\n        --ref ${ref} \\\n        ${snps}\n\n    snippy-clean_full_aln \\\n        core.full.aln > clean.full.aln\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "snps",
            "ref"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-snp",
        "directive": [
            "publishDir \"${params.outdir}/snippy_core\" , mode: 'copy'",
            "publishDir \"${params.outdir}\" , mode: 'copy' , saveAs: { filename -> if (filename == \"core.aln\") \"core_aln.fa\" else if (filename == \"core.vcf\") \"core.vcf\" else if (filename == \"clean.full.aln\") \"full_aln.fa\" }"
        ],
        "when": "",
        "stub": ""
    },
    "gubbins": {
        "name_process": "gubbins",
        "string_process": "\nprocess gubbins {\n    publishDir \"${params.outdir}/gubbins/\" , mode: 'copy'\n\n    input:\n    path(full_aln)\n\n    output:\n    path \"gubbins.*\"\n    path \"gubbins.filtered_polymorphic_sites.fasta\", emit: filt_core_aln\n\n    script:\n    \"\"\"\n    run_gubbins.py \\\n        -p gubbins \\\n        -t ${params.gubbins_tree_builder} \\\n        -i ${params.gubbins_iterations} \\\n        --threads ${task.cpus} \\\n        ${full_aln} > gubbins.log\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    run_gubbins.py \\\n        -p gubbins \\\n        -t ${params.gubbins_tree_builder} \\\n        -i ${params.gubbins_iterations} \\\n        --threads ${task.cpus} \\\n        ${full_aln} > gubbins.log\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "full_aln"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-snp",
        "directive": [
            "publishDir \"${params.outdir}/gubbins/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "raxml": {
        "name_process": "raxml",
        "string_process": "\nprocess raxml {\n    publishDir \"${params.outdir}/raxml\" , mode: 'copy'\n    publishDir \"${params.outdir}\" , mode: 'copy' ,\n        saveAs: { filename -> \n            if (filename == \"RAxML_bestTree.run\") \"tree.tree\"\n            else if (filename == \"RAxML_bipartitions.run\") \"tree_support.tree\"\n        }\n\n    input:\n    path(core_aln)\n\n    output:\n    path \"*.run\"\n\n    script:\n    if (params.raxml_mode == 'default')\n        \"\"\"\n        raxmlHPC-PTHREADS-SSE3 \\\n            -f d \\\n            -m ASC_GTRCAT \\\n            -V \\\n            --asc-corr=lewis \\\n            -p 42 \\\n            -T ${task.cpus} \\\n            -n run \\\n            -N ${params.raxml_nsearch} \\\n            -s ${core_aln}\n        \"\"\"\n        \n    else if ( params.raxml_mode == 'rbs' )\n        \"\"\"\n        raxmlHPC-PTHREADS-SSE3 \\\n            -f a \\\n            -x 43 \\\n            -N ${params.raxml_nboot} \\\n            -m ASC_GTRCAT \\\n            -V \\\n            --asc-corr=lewis \\\n            -p 42 \\\n            -s ${core_aln} \\\n            -n run \\\n            -T ${task.cpus}\n        \"\"\"\n    else\n        error \"Invalid RAxML mode: ${params.raxml_mode}\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    if (params.raxml_mode == 'default')\n        \"\"\"\n        raxmlHPC-PTHREADS-SSE3 \\\n            -f d \\\n            -m ASC_GTRCAT \\\n            -V \\\n            --asc-corr=lewis \\\n            -p 42 \\\n            -T ${task.cpus} \\\n            -n run \\\n            -N ${params.raxml_nsearch} \\\n            -s ${core_aln}\n        \"\"\"\n        \n    else if ( params.raxml_mode == 'rbs' )\n        \"\"\"\n        raxmlHPC-PTHREADS-SSE3 \\\n            -f a \\\n            -x 43 \\\n            -N ${params.raxml_nboot} \\\n            -m ASC_GTRCAT \\\n            -V \\\n            --asc-corr=lewis \\\n            -p 42 \\\n            -s ${core_aln} \\\n            -n run \\\n            -T ${task.cpus}\n        \"\"\"\n    else\n        error \"Invalid RAxML mode: ${params.raxml_mode}\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "core_aln"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-snp",
        "directive": [
            "publishDir \"${params.outdir}/raxml\" , mode: 'copy'",
            "publishDir \"${params.outdir}\" , mode: 'copy' , saveAs: { filename -> if (filename == \"RAxML_bestTree.run\") \"tree.tree\" else if (filename == \"RAxML_bipartitions.run\") \"tree_support.tree\" }"
        ],
        "when": "",
        "stub": ""
    },
    "deinterleave": {
        "name_process": "deinterleave",
        "string_process": "\nprocess deinterleave {      \n        tag \"${id}\"\n\n        input:\n        tuple val(id), path(reads)\n\n        output:\n        tuple val(id), path(\"read_*.fastq.gz\"), emit: deint_reads\n\n        script:\n        task_memory_GB = task.memory.toGiga()\n        \n        \"\"\"\n        reformat.sh \\\n            -Xmx${task_memory_GB}g \\\n            in=$reads \\\n            out1=read_1.fastq.gz \\\n            out2=read_2.fastq.gz \\\n            t=1\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        task_memory_GB = task.memory.toGiga()\n        \n        \"\"\"\n        reformat.sh \\\n            -Xmx${task_memory_GB}g \\\n            in=$reads \\\n            out1=read_1.fastq.gz \\\n            out2=read_2.fastq.gz \\\n            t=1\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-snp",
        "directive": [
            "tag \"${id}\""
        ],
        "when": "",
        "stub": ""
    },
    "reads_stats": {
        "name_process": "reads_stats",
        "string_process": "\nprocess reads_stats {   \n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/${reads_stats_outdir}/${id}\" , mode: 'copy'\n\n    input:\n    tuple val(id), path(reads)\n    val (reads_stats_outdir)\n\n    output:\n    path \"*hist.txt\"\n\n    script:\n    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    \"\"\"\n    bbduk.sh \\\n        -Xmx${task_memory_GB}g \\\n        $input \\\n        bhist=bhist.txt \\\n        qhist=qhist.txt \\\n        gchist=gchist.txt \\\n        aqhist=aqhist.txt \\\n        lhist=lhist.txt \\\n        gcbins=auto\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    \"\"\"\n    bbduk.sh \\\n        -Xmx${task_memory_GB}g \\\n        $input \\\n        bhist=bhist.txt \\\n        qhist=qhist.txt \\\n        gchist=gchist.txt \\\n        aqhist=aqhist.txt \\\n        lhist=lhist.txt \\\n        gcbins=auto\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "wossinput"
        ],
        "tools_url": [
            "https://bio.tools/wossinput"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            }
        ],
        "inputs": [
            "id",
            "reads",
            "reads_stats_outdir"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-snp",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/${reads_stats_outdir}/${id}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
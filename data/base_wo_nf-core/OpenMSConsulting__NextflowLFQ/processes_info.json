{
    "peptide_feature_detection": {
        "name_process": "peptide_feature_detection",
        "string_process": "\nprocess peptide_feature_detection {\n\n  tag \"$uid\"\n\n  input:\n    tuple uid, path(file_mzML) from ch_1\n\n  output:\n    tuple uid, path(\"${uid}.featureXML\") into ch_3\n\n  script:\n  \"\"\"\n  FeatureFinderMultiplex -in ${file_mzML} \\\\\n                         -out ${uid}.featureXML \\\\\n                         -algorithm:labels [] \\\\\n                         -algorithm:charge 1:7 \\\\\n                         -algorithm:rt_typical 70.0 \\\\\n                         -algorithm:rt_min 15.0 \\\\\n                         -algorithm:mz_tolerance 7 \\\\\n                         -algorithm:mz_unit ppm \\\\\n                         -algorithm:intensity_cutoff 10.0 \\\\\n                         -algorithm:peptide_similarity 0.9 \\\\\n                         -algorithm:averagine_similarity 0.9\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  \"\"\"\n  FeatureFinderMultiplex -in ${file_mzML} \\\\\n                         -out ${uid}.featureXML \\\\\n                         -algorithm:labels [] \\\\\n                         -algorithm:charge 1:7 \\\\\n                         -algorithm:rt_typical 70.0 \\\\\n                         -algorithm:rt_min 15.0 \\\\\n                         -algorithm:mz_tolerance 7 \\\\\n                         -algorithm:mz_unit ppm \\\\\n                         -algorithm:intensity_cutoff 10.0 \\\\\n                         -algorithm:peptide_similarity 0.9 \\\\\n                         -algorithm:averagine_similarity 0.9\n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_3"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [
            "tag \"$uid\""
        ],
        "when": "",
        "stub": ""
    },
    "precursor_correction": {
        "name_process": "precursor_correction",
        "string_process": "\nprocess precursor_correction {\n\n  tag \"$uid\"\n\n  input:\n    tuple uid, path(file_mzML), path(file_featureXML) from ch_2.join(ch_4)\n\n  output:\n    tuple uid, path(\"${uid}_corrected.mzML\") into ch_6\n\n  script:\n  \"\"\"\n  HighResPrecursorMassCorrector -in ${file_mzML} \\\\\n                                -feature:in ${file_featureXML} \\\\\n                                -out ${uid}_corrected.mzML\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  HighResPrecursorMassCorrector -in ${file_mzML} \\\\\n                                -feature:in ${file_featureXML} \\\\\n                                -out ${uid}_corrected.mzML\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_2",
            "ch_4"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_6"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [
            "tag \"$uid\""
        ],
        "when": "",
        "stub": ""
    },
    "peptide_identification": {
        "name_process": "peptide_identification",
        "string_process": "\nprocess peptide_identification {\n\n  tag \"$uid\"\n\n  input:\n    tuple uid, path(file_mzML) from ch_6\n    path(file_fasta) from ch_database\n    path(file_jar) from ch_msgfplus\n\n  output:\n   tuple uid, path(\"${uid}.idXML\") into ch_7\n\n  script:\n  \"\"\"\n  MSGFPlusAdapter -in ${file_mzML} \\\\\n                  -out ${uid}.idXML \\\\\n                  -database ${file_fasta} \\\\\n                  -executable ${file_jar} \\\\\n                  -instrument Q_Exactive \\\\\n                  -protocol none \\\\\n                  -min_precursor_charge 2 \\\\\n                  -max_precursor_charge 5 \\\\\n                  -max_missed_cleavages 3 \\\\\n                  -fixed_modifications 'Carbamidomethyl (C)' \\\\\n                  -variable_modifications 'Oxidation (M)' 'Phospho (S)' \\\\\n                  -java_memory 7000\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  \"\"\"\n  MSGFPlusAdapter -in ${file_mzML} \\\\\n                  -out ${uid}.idXML \\\\\n                  -database ${file_fasta} \\\\\n                  -executable ${file_jar} \\\\\n                  -instrument Q_Exactive \\\\\n                  -protocol none \\\\\n                  -min_precursor_charge 2 \\\\\n                  -max_precursor_charge 5 \\\\\n                  -max_missed_cleavages 3 \\\\\n                  -fixed_modifications 'Carbamidomethyl (C)' \\\\\n                  -variable_modifications 'Oxidation (M)' 'Phospho (S)' \\\\\n                  -java_memory 7000\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_6",
            "ch_database",
            "ch_msgfplus"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ch_7"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [
            "tag \"$uid\""
        ],
        "when": "",
        "stub": ""
    },
    "peptide_indexing": {
        "name_process": "peptide_indexing",
        "string_process": "\nprocess peptide_indexing {\n\n  tag \"$uid\"\n\n  input:\n    tuple uid, path(file_idXML) from ch_7\n    path(file_fasta) from ch_database\n\n  output:\n    tuple uid, path(\"${uid}_indexed.idXML\") into ch_8\n\n  script:\n  \"\"\"\n  PeptideIndexer -in ${file_idXML} \\\\\n                 -out ${uid}_indexed.idXML \\\\\n                 -fasta ${file_fasta} \\\\\n                 -decoy_string DECOY_ \\\\\n                 -missing_decoy_action warn \\\\\n                 -write_protein_sequence \\\\\n                 -write_protein_description \\\\\n                 -enzyme:name Trypsin/P \\\\\n                 -enzyme:specificity full\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  \"\"\"\n  PeptideIndexer -in ${file_idXML} \\\\\n                 -out ${uid}_indexed.idXML \\\\\n                 -fasta ${file_fasta} \\\\\n                 -decoy_string DECOY_ \\\\\n                 -missing_decoy_action warn \\\\\n                 -write_protein_sequence \\\\\n                 -write_protein_description \\\\\n                 -enzyme:name Trypsin/P \\\\\n                 -enzyme:specificity full\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_7",
            "ch_database"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_8"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [
            "tag \"$uid\""
        ],
        "when": "",
        "stub": ""
    },
    "false_discovery_rate": {
        "name_process": "false_discovery_rate",
        "string_process": "\nprocess false_discovery_rate {\n\n  tag \"$uid\"\n\n  input:\n    tuple uid, path(file_idXML) from ch_9\n\n  output:\n    tuple uid, path(\"${uid}_fdr.idXML\") into ch_11\n\n  script:\n  \"\"\"\n  FalseDiscoveryRate -in ${file_idXML} \\\\\n                     -out ${uid}_fdr.idXML \\\\\n                     -PSM true \\\\\n                     -FDR:PSM 0.05 \\\\\n                     -protein false\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  FalseDiscoveryRate -in ${file_idXML} \\\\\n                     -out ${uid}_fdr.idXML \\\\\n                     -PSM true \\\\\n                     -FDR:PSM 0.05 \\\\\n                     -protein false\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_9"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_11"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [
            "tag \"$uid\""
        ],
        "when": "",
        "stub": ""
    },
    "mztab_export_peptide_id": {
        "name_process": "mztab_export_peptide_id",
        "string_process": "\nprocess mztab_export_peptide_id {\n\n  tag \"$uid\"\n  publishDir params.output, mode: 'copy'\n\n  input:\n    tuple uid, path(file_idXML) from ch_12\n\n  output:\n    tuple uid, path(\"${uid}.mzTab\") into ch_14\n\n  script:\n  \"\"\"\n  MzTabExporter -in ${file_idXML} \\\\\n                -out ${uid}.mzTab\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  MzTabExporter -in ${file_idXML} \\\\\n                -out ${uid}.mzTab\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_12"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_14"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [
            "tag \"$uid\"",
            "publishDir params.output, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "id_mapping": {
        "name_process": "id_mapping",
        "string_process": "\nprocess id_mapping {\n\n  tag \"$uid\"\n\n  input:\n    tuple uid, path(file_featureXML), path(file_idXML) from ch_5.join(ch_13)\n\n  output:\n    path(\"${uid}_annotated.featureXML\") into ch_15\n\n  script:\n  \"\"\"\n  IDMapper -in ${file_featureXML} \\\\\n           -id ${file_idXML} \\\\\n           -out ${uid}_annotated.featureXML \\\\\n           -rt_tolerance 40.0 \\\\\n           -mz_tolerance 15.0 \\\\\n           -mz_measure ppm \\\\\n           -mz_reference precursor \\\\\n           -feature:use_centroid_rt true \\\\\n           -feature:use_centroid_mz true\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  IDMapper -in ${file_featureXML} \\\\\n           -id ${file_idXML} \\\\\n           -out ${uid}_annotated.featureXML \\\\\n           -rt_tolerance 40.0 \\\\\n           -mz_tolerance 15.0 \\\\\n           -mz_measure ppm \\\\\n           -mz_reference precursor \\\\\n           -feature:use_centroid_rt true \\\\\n           -feature:use_centroid_mz true\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "BioIDMapper"
        ],
        "tools_url": [
            "https://bio.tools/bioidmapper"
        ],
        "tools_dico": [
            {
                "name": "BioIDMapper",
                "uri": "https://bio.tools/bioidmapper",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BioIDMapper is a Cross-referencing and Managing Platform for Biological IDs in R.",
                "homepage": "http://genome.sdau.edu.cn/research/software/BioIDMapper.html"
            }
        ],
        "inputs": [
            "ch_5",
            "ch_13"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_15"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [
            "tag \"$uid\""
        ],
        "when": "",
        "stub": ""
    },
    "link_maps": {
        "name_process": "link_maps",
        "string_process": "\nprocess link_maps {\n\n  input:\n    path files_featureXML from ch_15.collect()\n\n  output:\n    path \"out_linked.consensusXML\" into ch_16\n\n  script:\n  \"\"\"\n  FeatureLinkerUnlabeledQT -in ${(files_featureXML as List).join(' ')}  \\\\\n           -out out_linked.consensusXML \\\\\n           -algorithm:distance_RT:max_difference 150.0 \\\\\n           -algorithm:distance_MZ:max_difference 10.0 \\\\\n           -algorithm:distance_MZ:unit ppm\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  FeatureLinkerUnlabeledQT -in ${(files_featureXML as List).join(' ')}  \\\\\n           -out out_linked.consensusXML \\\\\n           -algorithm:distance_RT:max_difference 150.0 \\\\\n           -algorithm:distance_MZ:max_difference 10.0 \\\\\n           -algorithm:distance_MZ:unit ppm\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_15"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_16"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "clean_up_ids": {
        "name_process": "clean_up_ids",
        "string_process": "\nprocess clean_up_ids {\n\n  input:\n    path file_consensusXML from ch_16\n\n  output:\n    path \"out_clean.consensusXML\" into ch_17\n\n  script:\n  \"\"\"\n  IDConflictResolver -in ${file_consensusXML}  \\\\\n           -out out_clean.consensusXML \\\\\n           -resolve_between_features highest_intensity\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  IDConflictResolver -in ${file_consensusXML}  \\\\\n           -out out_clean.consensusXML \\\\\n           -resolve_between_features highest_intensity\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_16"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_17"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "normalize": {
        "name_process": "normalize",
        "string_process": "\nprocess normalize {\n\n  input:\n    path file_consensusXML from ch_17\n\n  output:\n    path \"out.consensusXML\" into ch_18\n\n  script:\n  \"\"\"\n  ConsensusMapNormalizer -in ${file_consensusXML}  \\\\\n                         -out out.consensusXML \\\\\n                         -algorithm_type quantile\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  ConsensusMapNormalizer -in ${file_consensusXML}  \\\\\n                         -out out.consensusXML \\\\\n                         -algorithm_type quantile\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_17"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_18"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "mztab_export_peptide_quant": {
        "name_process": "mztab_export_peptide_quant",
        "string_process": "\nprocess mztab_export_peptide_quant {\n\n  publishDir params.output, mode: 'copy'\n\n  input:\n    path file_consensusXML from ch_20\n\n  output:\n    path \"peptides_quant.mzTab\" into ch_21\n\n  script:\n  \"\"\"\n  MzTabExporter -in ${file_consensusXML} \\\\\n                -out peptides_quant.mzTab\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  MzTabExporter -in ${file_consensusXML} \\\\\n                -out peptides_quant.mzTab\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_20"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_21"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [
            "publishDir params.output, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "error_probability": {
        "name_process": "error_probability",
        "string_process": "\nprocess error_probability {\n\n  tag \"$uid\"\n\n  input:\n    tuple uid, path(file_idXML) from ch_10\n\n  output:\n    path(\"${uid}_err.idXML\") into ch_22\n\n  script:\n  \"\"\"\n  IDPosteriorErrorProbability -in ${file_idXML} \\\\\n                              -out ${uid}_err.idXML\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  IDPosteriorErrorProbability -in ${file_idXML} \\\\\n                              -out ${uid}_err.idXML\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_10"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_22"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [
            "tag \"$uid\""
        ],
        "when": "",
        "stub": ""
    },
    "merge_ids": {
        "name_process": "merge_ids",
        "string_process": "\nprocess merge_ids {\n\n  input:\n    path files_idXML from ch_22.collect()\n\n  output:\n    path \"out_merged.idXML\" into ch_23\n\n  script:\n  \"\"\"\n  IDMerger -in ${(files_idXML as List).join(' ')}  \\\\\n           -out out_merged.idXML\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  IDMerger -in ${(files_idXML as List).join(' ')}  \\\\\n           -out out_merged.idXML\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_22"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_23"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "protein_inference": {
        "name_process": "protein_inference",
        "string_process": "\nprocess protein_inference {\n\n  input:\n    path file_idXML from ch_23\n\n  output:\n    path \"out_inf.idXML\" into ch_24\n\n  script:\n  \"\"\"\n  Epifany -in ${file_idXML}  \\\\\n          -out out_inf.idXML\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  Epifany -in ${file_idXML}  \\\\\n          -out out_inf.idXML\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_23"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_24"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "protein_quantification": {
        "name_process": "protein_quantification",
        "string_process": "\nprocess protein_quantification {\n\n  publishDir params.output, mode: 'copy'\n\n  input:\n    path file_consensusXML from ch_19\n    path file_idXML from ch_24\n\n  output:\n    path \"proteins_quant.mzTab\" into ch_25\n\n  script:\n  \"\"\"\n  ProteinQuantifier -in ${file_consensusXML}  \\\\\n                    -protein_groups ${file_idXML}  \\\\\n                    -out proteins_quant.csv \\\\\n                    -mztab proteins_quant.mzTab\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  ProteinQuantifier -in ${file_consensusXML}  \\\\\n                    -protein_groups ${file_idXML}  \\\\\n                    -out proteins_quant.csv \\\\\n                    -mztab proteins_quant.mzTab\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_19",
            "ch_24"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_25"
        ],
        "nb_outputs": 1,
        "name_workflow": "OpenMSConsulting__NextflowLFQ",
        "directive": [
            "publishDir params.output, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
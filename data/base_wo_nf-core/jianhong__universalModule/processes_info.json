{
    "TRIMGALORE": {
        "name_process": "TRIMGALORE",
        "string_process": " process TRIMGALORE {\n     tag \"$meta.id\"\n     label 'process_medium'\n     publishDir \"${params.outdir}/${options.publish_dir}\",\n         mode: options.publish_mode,\n         enabled: options.publish_enabled\n\n     conda (params.enable_conda ? \"bioconda::cutadapt=1.18 bioconda::trim-galore=0.6.6\" : null)\n     if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n         container \"https://depot.galaxyproject.org/singularity/trim-galore:0.6.5--0\"\n     } else {\n         container \"quay.io/biocontainers/trim-galore:0.6.5--0\"\n     }\n\n     input:\n     tuple val(meta), path(reads)\n\n     output:\n     tuple val(meta), path(\"*.fq.gz\"), emit: reads\n     tuple val(meta), path(\"*.html\"), emit: html optional true\n     tuple val(meta), path(\"*.zip\"), emit: zip optional true\n     tuple val(meta), path(\"*report.txt\"), emit: log\n     path \"trimgalore.version.txt\", emit: version\n\n     script:\n     params.options.forEach{key, value -> options[key]=value}\n     def cores = 1\n     if (task.cpus) {\n        cores = (task.cpus as int) - 4\n        if (meta.single_end) cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n     }\n                                                                     \n      def c_r1 = options.clip_r1 > 0 ? \"--clip_r1 ${options.clip_r1}\" : ''\n      def c_r2 = options.clip_r2 > 0 ? \"--clip_r2 ${options.clip_r2}\" : ''\n      def tpc_r1 = options.three_prime_clip_r1 > 0 ? \"--three_prime_clip_r1 ${options.three_prime_clip_r1}\" : ''\n      def tpc_r2 = options.three_prime_clip_r2 > 0 ? \"--three_prime_clip_r2 ${options.three_prime_clip_r2}\" : ''\n\n      if (meta.single_end) {\n          \"\"\"\n          [ ! -f  ${meta.id}.fastq.gz ] && ln -s $reads[0] ${meta.id}.fastq.gz\n          trim_galore \\\\\n              $options.args \\\\\n              --cores $cores \\\\\n              --gzip \\\\\n              $c_r1 \\\\\n              $tpc_r1 \\\\\n              ${meta.id}.fastq.gz\n          echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//' > ${software}.version.txt\n          \"\"\"\n      } else {\n          \"\"\"\n          [ ! -f  ${meta.id}_1.fastq.gz ] && ln -s ${reads[0]} ${meta.id}_1.fastq.gz\n          [ ! -f  ${meta.id}_2.fastq.gz ] && ln -s ${reads[1]} ${meta.id}_2.fastq.gz\n          trim_galore \\\\\n              $options.args \\\\\n              --cores $cores \\\\\n              --paired \\\\\n              --gzip \\\\\n              $c_r1 \\\\\n              $c_r2 \\\\\n              $tpc_r1 \\\\\n              $tpc_r2 \\\\\n              ${meta.id}_1.fastq.gz \\\\\n              ${meta.id}_2.fastq.gz\n          echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//' > ${software}.version.txt\n          \"\"\"\n      }\n }",
        "nb_lignes_process": 68,
        "string_script": "     params.options.forEach{key, value -> options[key]=value}\n     def cores = 1\n     if (task.cpus) {\n        cores = (task.cpus as int) - 4\n        if (meta.single_end) cores = (task.cpus as int) - 3\n        if (cores < 1) cores = 1\n        if (cores > 4) cores = 4\n     }\n                                                                     \n      def c_r1 = options.clip_r1 > 0 ? \"--clip_r1 ${options.clip_r1}\" : ''\n      def c_r2 = options.clip_r2 > 0 ? \"--clip_r2 ${options.clip_r2}\" : ''\n      def tpc_r1 = options.three_prime_clip_r1 > 0 ? \"--three_prime_clip_r1 ${options.three_prime_clip_r1}\" : ''\n      def tpc_r2 = options.three_prime_clip_r2 > 0 ? \"--three_prime_clip_r2 ${options.three_prime_clip_r2}\" : ''\n\n      if (meta.single_end) {\n          \"\"\"\n          [ ! -f  ${meta.id}.fastq.gz ] && ln -s $reads[0] ${meta.id}.fastq.gz\n          trim_galore \\\\\n              $options.args \\\\\n              --cores $cores \\\\\n              --gzip \\\\\n              $c_r1 \\\\\n              $tpc_r1 \\\\\n              ${meta.id}.fastq.gz\n          echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//' > ${software}.version.txt\n          \"\"\"\n      } else {\n          \"\"\"\n          [ ! -f  ${meta.id}_1.fastq.gz ] && ln -s ${reads[0]} ${meta.id}_1.fastq.gz\n          [ ! -f  ${meta.id}_2.fastq.gz ] && ln -s ${reads[1]} ${meta.id}_2.fastq.gz\n          trim_galore \\\\\n              $options.args \\\\\n              --cores $cores \\\\\n              --paired \\\\\n              --gzip \\\\\n              $c_r1 \\\\\n              $c_r2 \\\\\n              $tpc_r1 \\\\\n              $tpc_r2 \\\\\n              ${meta.id}_1.fastq.gz \\\\\n              ${meta.id}_2.fastq.gz\n          echo \\$(trim_galore --version 2>&1) | sed 's/^.*version //; s/Last.*\\$//' > ${software}.version.txt\n          \"\"\"\n      }",
        "nb_lignes_script": 43,
        "language_script": "bash",
        "tools": [
            "CoreSlicer"
        ],
        "tools_url": [
            "https://bio.tools/CoreSlicer"
        ],
        "tools_dico": [
            {
                "name": "CoreSlicer",
                "uri": "https://bio.tools/CoreSlicer",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3384",
                            "term": "Medical imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRI"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "CT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "Computed tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3452",
                            "term": "TDM"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Nuclear magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "MRT"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "Magnetic resonance tomography"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3444",
                            "term": "NMRI"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Enables extraction of morphomic markers from CT images by non-technically skilled clinicians.",
                "homepage": "https://coreslicer.com/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode , enabled: options.publish_enabled",
            "conda (params.enable_conda ? \"bioconda::cutadapt=1.18 bioconda::trim-galore=0.6.6\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/trim-galore:0.6.5--0\" } else { container \"quay.io/biocontainers/trim-galore:0.6.5--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_INDEX": {
        "name_process": "SAMTOOLS_INDEX",
        "string_process": " process SAMTOOLS_INDEX {\n     tag \"$meta.id\"\n     publishDir \"${params.outdir}/${options.publish_dir}\",\n         mode: options.publish_mode,\n         enabled: options.publish_enabled\n\n     conda (params.enable_conda ? \"bioconda::samtools=1.09\" : null)\n     if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n         container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n     } else {\n         container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n     }\n\n     input:\n     tuple val(meta), path(bam)\n\n     output:\n     tuple val(meta), path(bam), path(\"*.bai\"), emit: bai\n     path \"samtools.version.txt\", emit: version\n\n     script:\n     params.options.forEach{key, value -> options[key]=value}\n     \"\"\"\n     samtools index $bam\n     echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > samtools.version.txt\n     \"\"\"\n }",
        "nb_lignes_process": 25,
        "string_script": "     params.options.forEach{key, value -> options[key]=value}\n     \"\"\"\n     samtools index $bam\n     echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > samtools.version.txt\n     \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "tag \"$meta.id\"",
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode , enabled: options.publish_enabled",
            "conda (params.enable_conda ? \"bioconda::samtools=1.09\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BWA_INDEX": {
        "name_process": "BWA_INDEX",
        "string_process": " process BWA_INDEX {\n     tag \"$fasta\"\n     label 'process_high'\n     publishDir \"${params.outdir}/${options.publish_dir}\",\n         mode: options.publish_mode,\n         enabled: options.publish_enabled\n\n     conda (params.enable_conda ? \"bioconda::bwa=0.7.17\" : null)\n     if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n         container \"https://depot.galaxyproject.org/singularity/bwa:0.7.17--hed695b0_7\"\n     } else {\n         container \"biocontainers/bwa:v0.7.17_cv1\"\n     }\n\n     input:\n     path fasta\n\n     output:\n     tuple path(\"${fasta}.*\"), path(fasta), emit: index\n     path \"bwa.version.txt\", emit: version\n\n     script:\n     params.options.forEach{key, value -> options[key]=value}\n     \"\"\"\n     bwa index $options.args $fasta\n     echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//' > bwa.version.txt\n     \"\"\"\n }",
        "nb_lignes_process": 26,
        "string_script": "     params.options.forEach{key, value -> options[key]=value}\n     \"\"\"\n     bwa index $options.args $fasta\n     echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//' > bwa.version.txt\n     \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "tag \"$fasta\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode , enabled: options.publish_enabled",
            "conda (params.enable_conda ? \"bioconda::bwa=0.7.17\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bwa:0.7.17--hed695b0_7\" } else { container \"biocontainers/bwa:v0.7.17_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BWA_MEM": {
        "name_process": "BWA_MEM",
        "string_process": " process BWA_MEM {\n     tag \"$meta.id\"\n     label 'process_high'\n     publishDir \"${params.outdir}/${options.publish_dir}\",\n         mode: options.publish_mode,\n         enabled: options.publish_enabled\n\n\n     conda (params.enable_conda ? \"bioconda::bwa=0.7.17\" : null)\n     if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n         container \"https://depot.galaxyproject.org/singularity/bwa:0.7.17--hed695b0_7\"\n     } else {\n         container \"biocontainers/bwa:v0.7.17_cv1\"\n     }\n\n     input:\n     tuple val(meta), path(reads)\n     tuple path(index), path(fasta)\n\n     output:\n     tuple val(meta), path(\"*.bam\"), emit: bam\n     path \"bwa.version.txt\", emit: version\n\n     script:\n     params.options.forEach{key, value -> options[key]=value}\n     def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n     def rg       = meta.read_group ? \"-R ${meta.read_group}\" : \"\"\n     \"\"\"\n     bwa mem \\\\\n        $options.args \\\\\n        $rg \\\\\n        -t $task.cpus \\\\\n        $fasta \\\\\n        $reads \\\\\n        | samtools view $options.samtools_args -@ $task.cpus -bS -o ${prefix}.bam -\n     echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//' > bwa.version.txt\n     \"\"\"\n }",
        "nb_lignes_process": 36,
        "string_script": "     params.options.forEach{key, value -> options[key]=value}\n     def prefix   = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n     def rg       = meta.read_group ? \"-R ${meta.read_group}\" : \"\"\n     \"\"\"\n     bwa mem \\\\\n        $options.args \\\\\n        $rg \\\\\n        -t $task.cpus \\\\\n        $fasta \\\\\n        $reads \\\\\n        | samtools view $options.samtools_args -@ $task.cpus -bS -o ${prefix}.bam -\n     echo \\$(bwa 2>&1) | sed 's/^.*Version: //; s/Contact:.*\\$//' > bwa.version.txt\n     \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "fasta"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode , enabled: options.publish_enabled",
            "conda (params.enable_conda ? \"bioconda::bwa=0.7.17\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bwa:0.7.17--hed695b0_7\" } else { container \"biocontainers/bwa:v0.7.17_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "TEST": {
        "name_process": "TEST",
        "string_process": "\nprocess TEST {\n  input: path(test_file)\n  script:\n  \"\"\"\n  nextflow run ${test_file} --conda\n  \"\"\"\n}",
        "nb_lignes_process": 6,
        "string_script": "  \"\"\"\n  nextflow run ${test_file} --conda\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Nextflow"
        ],
        "tools_url": [
            "https://bio.tools/nextflow"
        ],
        "tools_dico": [
            {
                "name": "Nextflow",
                "uri": "https://bio.tools/nextflow",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3762",
                                    "term": "Service composition"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Nextflow enables scalable and reproducible scientific workflows using software containers. It allows the adaptation of pipelines written in the most common scripting languages.",
                "homepage": "https://www.nextflow.io/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "GUNZIP": {
        "name_process": "GUNZIP",
        "string_process": " process GUNZIP {\n     tag \"$archive\"\n     publishDir \"${params.outdir}/${options.publish_dir}\",\n         mode: options.publish_mode,\n         enabled: options.publish_enabled\n\n     conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n     if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n         container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n     } else {\n         container \"biocontainers/biocontainers:v1.2.0_cv1\"\n     }\n\n     input:\n     path archive\n\n     output:\n     path \"$gunzip\",       emit: gunzip\n     path \"gunzip.version.txt\", emit: version\n\n     script:\n     params.options.forEach{key, value -> options[key]=value}\n     gunzip       = archive.toString() - '.gz'\n     \"\"\"\n     gunzip -f $options.args $archive\n     echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//' > gunzip.version.txt\n     \"\"\"\n }",
        "nb_lignes_process": 26,
        "string_script": "     params.options.forEach{key, value -> options[key]=value}\n     gunzip       = archive.toString() - '.gz'\n     \"\"\"\n     gunzip -f $options.args $archive\n     echo \\$(gunzip --version 2>&1) | sed 's/^.*(gzip) //; s/ Copyright.*\\$//' > gunzip.version.txt\n     \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "archive"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "tag \"$archive\"",
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode , enabled: options.publish_enabled",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": " process FASTQC {\n     tag \"$meta.id\"\n     label 'process_medium'\n     publishDir \"${params.outdir}/${options.publish_dir}\",\n         mode: options.publish_mode,\n         enabled: options.publish_enabled\n\n     conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n     if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n         container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\"\n     } else {\n         container \"quay.io/biocontainers/fastqc:0.11.9--0\"\n     }\n\n     input:\n     tuple val(meta), path(reads)\n     tuple path(index), path(fasta)\n\n     output:\n     tuple val(meta), path(\"*.html\"), emit: html\n     tuple val(meta), path(\"*.zip\"), emit: zip\n     path \"fastqc.version.txt\", emit: version\n\n     script:\n     params.options.forEach{key, value -> options[key]=value}\n      if (meta.single_end) {\n          \"\"\"\n          [ ! -f  ${meta.id}.fastq.gz ] && ln -s ${reads[0]} ${meta.id}.fastq.gz\n          fastqc $options.args --threads $task.cpus ${meta.id}.fastq.gz\n          fastqc --version | sed -e \"s/FastQC v//g\" > fastqc.version.txt\n          \"\"\"\n      } else {\n          \"\"\"\n          [ ! -f  ${meta.id}_1.fastq.gz ] && ln -s ${reads[0]} ${meta.id}_1.fastq.gz\n          [ ! -f  ${meta.id}_2.fastq.gz ] && ln -s ${reads[1]} ${meta.id}_2.fastq.gz\n          fastqc $options.args --threads $task.cpus ${meta.id}_1.fastq.gz ${meta.id}_2.fastq.gz\n          fastqc --version | sed -e \"s/FastQC v//g\" > fastqc.version.txt\n          \"\"\"\n      }\n }",
        "nb_lignes_process": 38,
        "string_script": "     params.options.forEach{key, value -> options[key]=value}\n      if (meta.single_end) {\n          \"\"\"\n          [ ! -f  ${meta.id}.fastq.gz ] && ln -s ${reads[0]} ${meta.id}.fastq.gz\n          fastqc $options.args --threads $task.cpus ${meta.id}.fastq.gz\n          fastqc --version | sed -e \"s/FastQC v//g\" > fastqc.version.txt\n          \"\"\"\n      } else {\n          \"\"\"\n          [ ! -f  ${meta.id}_1.fastq.gz ] && ln -s ${reads[0]} ${meta.id}_1.fastq.gz\n          [ ! -f  ${meta.id}_2.fastq.gz ] && ln -s ${reads[1]} ${meta.id}_2.fastq.gz\n          fastqc $options.args --threads $task.cpus ${meta.id}_1.fastq.gz ${meta.id}_2.fastq.gz\n          fastqc --version | sed -e \"s/FastQC v//g\" > fastqc.version.txt\n          \"\"\"\n      }",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "index",
            "fasta"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode , enabled: options.publish_enabled",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0\" } else { container \"quay.io/biocontainers/fastqc:0.11.9--0\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CHROM_SIZES": {
        "name_process": "CHROM_SIZES",
        "string_process": " process CHROM_SIZES {\n     tag \"$fasta\"\n     publishDir \"${params.outdir}/${options.publish_dir}\",\n         mode: options.publish_mode,\n         enabled: options.publish_enabled\n\n     conda (params.enable_conda ? \"bioconda::samtools=1.09\" : null)\n     if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n         container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n     } else {\n         container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n     }\n\n     input:\n     path fasta\n\n     output:\n     tuple path(\"${fasta}.sizes\"), path(fasta), path(\"${fasta}.fai\"), emit: sizes\n     path \"samtools.version.txt\", emit: version\n\n     script:\n     params.options.forEach{key, value -> options[key]=value}\n     \"\"\"\n     samtools faidx $fasta\n     cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n     echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > samtools.version.txt\n     \"\"\"\n }",
        "nb_lignes_process": 26,
        "string_script": "     params.options.forEach{key, value -> options[key]=value}\n     \"\"\"\n     samtools faidx $fasta\n     cut -f 1,2 ${fasta}.fai > ${fasta}.sizes\n     echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > samtools.version.txt\n     \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "tag \"$fasta\"",
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode , enabled: options.publish_enabled",
            "conda (params.enable_conda ? \"bioconda::samtools=1.09\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "UNTAR": {
        "name_process": "UNTAR",
        "string_process": " process UNTAR {\n     tag \"$archive\"\n     publishDir \"${params.outdir}/${options.publish_dir}\",\n         mode: options.publish_mode,\n         enabled: options.publish_enabled\n\n     conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n     if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n         container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n     } else {\n         container \"biocontainers/biocontainers:v1.2.0_cv1\"\n     }\n\n     input:\n     path archive\n\n     output:\n     path \"$untar\",       emit: untar\n     path \"tar.version.txt\", emit: version\n\n     script:\n     params.options.forEach{key, value -> options[key]=value}\n     untar        = archive.toString() - '.tar.gz'\n     \"\"\"\n     tar -xzvf $options.args $archive\n     echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//' > tar.version.txt\n     \"\"\"\n }",
        "nb_lignes_process": 26,
        "string_script": "     params.options.forEach{key, value -> options[key]=value}\n     untar        = archive.toString() - '.tar.gz'\n     \"\"\"\n     tar -xzvf $options.args $archive\n     echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//' > tar.version.txt\n     \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "archive"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "tag \"$archive\"",
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode , enabled: options.publish_enabled",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SESSION_INFO": {
        "name_process": "SESSION_INFO",
        "string_process": " process SESSION_INFO {\n    tag \"$archive\"\n    publishDir \"${params.outdir}/${options.publish_dir}\",\n       mode: options.publish_mode,\n       enabled: options.publish_enabled\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n      container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n      container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.csv\", emit: csv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:\n    params.options.forEach{key, value -> options[key]=value}\n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    echo $workflow.manifest.name > pipelinename.version.txt\n    echo $workflow.manifest.homePage > pipelienurl.version.txt\n\n    # write scrape_software_versions scripts\n    SEP=\"'\"\n    SEP=\\$SEP\\$SEP\\$SEP\n    cat <<EOT > scrape_software_versions.py\n#!/usr/bin/env python\nfrom __future__ import print_function\nimport os\nimport re\n\npipelinename = \"pipeline\"\npipelineurl = \"pipelineurl\"\n\nresults = {}\nversion_files = [x for x in os.listdir('.') if x.endswith('.version.txt')]\nfor version_file in version_files:\n\n    software = version_file.replace('.version.txt','')\n\n    with open(version_file) as fin:\n        version = fin.read().strip()\n\n    if software == 'pipelinename':\n        pipelinename = version\n    elif software == 'pipelineurl':\n        pipelineurl = version\n    else:\n        results[software] = version\n\nresults[pipelinename] = results.pop(\"pipeline\")\n\n# Dump to YAML\nprint (\\${SEP}\nid: 'software_versions'\nsection_name: '%s Software Versions'\nsection_href: '%s'\nplot_type: 'html'\ndescription: 'are collected at run time from the software output.'\ndata: |\n    <dl class=\"dl-horizontal\">\n\\${SEP} % (pipelinename, pipelineurl))\nfor k,v in sorted(results.items()):\n    print(\"        <dt>{}</dt><dd><samp>{}</samp></dd>\".format(k,v))\nprint (\"    </dl>\")\n\n# Write out regexes as csv file:\nwith open('software_versions.csv', 'w') as f:\n    for k,v in sorted(results.items()):\n        f.write(\"{}\\t{}\\n\".format(k,v))\nEOT\n    python scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n }",
        "nb_lignes_process": 78,
        "string_script": "    params.options.forEach{key, value -> options[key]=value}\n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    echo $workflow.manifest.name > pipelinename.version.txt\n    echo $workflow.manifest.homePage > pipelienurl.version.txt\n\n    # write scrape_software_versions scripts\n    SEP=\"'\"\n    SEP=\\$SEP\\$SEP\\$SEP\n    cat <<EOT > scrape_software_versions.py\n#!/usr/bin/env python\nfrom __future__ import print_function\nimport os\nimport re\n\npipelinename = \"pipeline\"\npipelineurl = \"pipelineurl\"\n\nresults = {}\nversion_files = [x for x in os.listdir('.') if x.endswith('.version.txt')]\nfor version_file in version_files:\n\n    software = version_file.replace('.version.txt','')\n\n    with open(version_file) as fin:\n        version = fin.read().strip()\n\n    if software == 'pipelinename':\n        pipelinename = version\n    elif software == 'pipelineurl':\n        pipelineurl = version\n    else:\n        results[software] = version\n\nresults[pipelinename] = results.pop(\"pipeline\")\n\n# Dump to YAML\nprint (\\${SEP}\nid: 'software_versions'\nsection_name: '%s Software Versions'\nsection_href: '%s'\nplot_type: 'html'\ndescription: 'are collected at run time from the software output.'\ndata: |\n    <dl class=\"dl-horizontal\">\n\\${SEP} % (pipelinename, pipelineurl))\nfor k,v in sorted(results.items()):\n    print(\"        <dt>{}</dt><dd><samp>{}</samp></dd>\".format(k,v))\nprint (\"    </dl>\")\n\n# Write out regexes as csv file:\nwith open('software_versions.csv', 'w') as f:\n    for k,v in sorted(results.items()):\n        f.write(\"{}\\t{}\\n\".format(k,v))\nEOT\n    python scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 57,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "tag \"$archive\"",
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode , enabled: options.publish_enabled",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_STATS": {
        "name_process": "SAMTOOLS_STATS",
        "string_process": " process SAMTOOLS_STATS {\n     tag \"$meta.id\"\n     label 'process_medium'\n     publishDir \"${params.outdir}/${options.publish_dir}\",\n         mode: options.publish_mode,\n         enabled: options.publish_enabled\n\n     conda (params.enable_conda ? \"bioconda::samtools=1.09\" : null)\n     if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n         container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n     } else {\n         container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n     }\n\n     input:\n     tuple val(meta), path(bam), path(bai)\n\n     output:\n     tuple val(meta), path(\"*.stats\"), emit: stats\n     tuple val(meta), path(\"*.flagstat\"), emit: flagstat\n     tuple val(meta), path(\"*.idxstats\"), emit: idxstats\n     path \"samtools.version.txt\", emit: version\n\n     script:\n     params.options.forEach{key, value -> options[key]=value}\n     \"\"\"\n     samtools stats $bam > ${bam}.stats\n     samtools flagstat $bam > ${bam}.flagstat\n     samtools idxstats $bam > ${bam}.idxstats\n     echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > samtools.version.txt\n     \"\"\"\n }",
        "nb_lignes_process": 30,
        "string_script": "     params.options.forEach{key, value -> options[key]=value}\n     \"\"\"\n     samtools stats $bam > ${bam}.stats\n     samtools flagstat $bam > ${bam}.flagstat\n     samtools idxstats $bam > ${bam}.idxstats\n     echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > samtools.version.txt\n     \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode , enabled: options.publish_enabled",
            "conda (params.enable_conda ? \"bioconda::samtools=1.09\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MD_HTML": {
        "name_process": "MD_HTML",
        "string_process": "\nprocess MD_HTML {\n  publishDir \"${params.outdir}/${options.publish_dir}\",\n             mode: options.publish_mode\n\n  conda (params.enable_conda ? \"markdown=3.2.2 conda-forge::pymdown-extensions=7.1\" : null)\n\n  input:\n    tuple val(output), path(md)\n  output: path(\"*.html\"), emit: html\n  script:\n  params.options.forEach{key, value -> options[key]=value}\n  \"\"\"\n  # write markdown_to_html.py\n  SEP='\"'\n  SEP=\\$SEP\\$SEP\\$SEP\n  cat <<EOT > markdown_to_html.py\n#!/usr/bin/env python\nfrom __future__ import print_function\nimport argparse\nimport markdown\nimport os\nimport sys\nimport io\n\n\ndef convert_markdown(in_fn):\n    input_md = io.open(in_fn, mode=\"r\", encoding=\"utf-8\").read()\n    html = markdown.markdown(\n        \"[TOC]\\\\n\" + input_md,\n        extensions=[\"pymdownx.extra\", \"pymdownx.b64\", \"pymdownx.highlight\", \"pymdownx.emoji\", \"pymdownx.tilde\", \"toc\"],\n        extension_configs={\n            \"pymdownx.b64\": {\"base_path\": os.path.dirname(in_fn)},\n            \"pymdownx.highlight\": {\"noclasses\": True},\n            \"toc\": {\"title\": \"Table of Contents\"},\n        },\n    )\n    return html\n\n\ndef wrap_html(contents):\n    header = \\${SEP}<!DOCTYPE html><html>\n    <head>\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n        <style>\n            body {\n              font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";\n              padding: 3em;\n              margin-right: 350px;\n              max-width: 100%;\n            }\n            .toc {\n              position: fixed;\n              right: 20px;\n              width: 300px;\n              padding-top: 20px;\n              overflow: scroll;\n              height: calc(100% - 3em - 20px);\n            }\n            .toctitle {\n              font-size: 1.8em;\n              font-weight: bold;\n            }\n            .toc > ul {\n              padding: 0;\n              margin: 1rem 0;\n              list-style-type: none;\n            }\n            .toc > ul ul { padding-left: 20px; }\n            .toc > ul > li > a { display: none; }\n            img { max-width: 800px; }\n            pre {\n              padding: 0.6em 1em;\n            }\n            h2 {\n\n            }\n        </style>\n    </head>\n    <body>\n    <div class=\"container\">\n    \\${SEP}\n    footer = \\${SEP}\n    </div>\n    </body>\n    </html>\n    \\${SEP}\n    return header + contents + footer\n\n\ndef parse_args(args=None):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"mdfile\", type=argparse.FileType(\"r\"), nargs=\"?\", help=\"File to convert. Defaults to stdin.\")\n    parser.add_argument(\n        \"-o\", \"--out\", type=argparse.FileType(\"w\"), default=sys.stdout, help=\"Output file name. Defaults to stdout.\"\n    )\n    return parser.parse_args(args)\n\n\ndef main(args=None):\n    args = parse_args(args)\n    converted_md = convert_markdown(args.mdfile.name)\n    html = wrap_html(converted_md)\n    args.out.write(html)\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n\nEOT\n  # run the script\n  python markdown_to_html.py $md -o $output\n  \"\"\"\n}",
        "nb_lignes_process": 112,
        "string_script": "  params.options.forEach{key, value -> options[key]=value}\n  \"\"\"\n  # write markdown_to_html.py\n  SEP='\"'\n  SEP=\\$SEP\\$SEP\\$SEP\n  cat <<EOT > markdown_to_html.py\n#!/usr/bin/env python\nfrom __future__ import print_function\nimport argparse\nimport markdown\nimport os\nimport sys\nimport io\n\n\ndef convert_markdown(in_fn):\n    input_md = io.open(in_fn, mode=\"r\", encoding=\"utf-8\").read()\n    html = markdown.markdown(\n        \"[TOC]\\\\n\" + input_md,\n        extensions=[\"pymdownx.extra\", \"pymdownx.b64\", \"pymdownx.highlight\", \"pymdownx.emoji\", \"pymdownx.tilde\", \"toc\"],\n        extension_configs={\n            \"pymdownx.b64\": {\"base_path\": os.path.dirname(in_fn)},\n            \"pymdownx.highlight\": {\"noclasses\": True},\n            \"toc\": {\"title\": \"Table of Contents\"},\n        },\n    )\n    return html\n\n\ndef wrap_html(contents):\n    header = \\${SEP}<!DOCTYPE html><html>\n    <head>\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n        <style>\n            body {\n              font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,\"Noto Sans\",sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";\n              padding: 3em;\n              margin-right: 350px;\n              max-width: 100%;\n            }\n            .toc {\n              position: fixed;\n              right: 20px;\n              width: 300px;\n              padding-top: 20px;\n              overflow: scroll;\n              height: calc(100% - 3em - 20px);\n            }\n            .toctitle {\n              font-size: 1.8em;\n              font-weight: bold;\n            }\n            .toc > ul {\n              padding: 0;\n              margin: 1rem 0;\n              list-style-type: none;\n            }\n            .toc > ul ul { padding-left: 20px; }\n            .toc > ul > li > a { display: none; }\n            img { max-width: 800px; }\n            pre {\n              padding: 0.6em 1em;\n            }\n            h2 {\n\n            }\n        </style>\n    </head>\n    <body>\n    <div class=\"container\">\n    \\${SEP}\n    footer = \\${SEP}\n    </div>\n    </body>\n    </html>\n    \\${SEP}\n    return header + contents + footer\n\n\ndef parse_args(args=None):\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"mdfile\", type=argparse.FileType(\"r\"), nargs=\"?\", help=\"File to convert. Defaults to stdin.\")\n    parser.add_argument(\n        \"-o\", \"--out\", type=argparse.FileType(\"w\"), default=sys.stdout, help=\"Output file name. Defaults to stdout.\"\n    )\n    return parser.parse_args(args)\n\n\ndef main(args=None):\n    args = parse_args(args)\n    converted_md = convert_markdown(args.mdfile.name)\n    html = wrap_html(converted_md)\n    args.out.write(html)\n\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n\nEOT\n  # run the script\n  python markdown_to_html.py $md -o $output\n  \"\"\"",
        "nb_lignes_script": 101,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "output",
            "md"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode",
            "conda (params.enable_conda ? \"markdown=3.2.2 conda-forge::pymdown-extensions=7.1\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "SAMTOOLS_SORT": {
        "name_process": "SAMTOOLS_SORT",
        "string_process": " process SAMTOOLS_SORT {\n     tag \"$meta.id\"\n     label 'process_medium'\n     publishDir \"${params.outdir}/${options.publish_dir}\",\n         mode: options.publish_mode,\n         enabled: options.publish_enabled\n\n     conda (params.enable_conda ? \"bioconda::samtools=1.09\" : null)\n     if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n         container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\"\n     } else {\n         container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\"\n     }\n\n     input:\n     tuple val(meta), path(bam)\n\n     output:\n     tuple val(meta), path(\"*.bam\"), emit: bam\n     path \"samtools.version.txt\", emit: version\n\n     script:\n     params.options.forEach{key, value -> options[key]=value}\n     def prefix   = ioptions.suffix ? \"${meta.id}${ioptions.suffix}\" : \"${meta.id}\"\n     \"\"\"\n     samtools sort $options.args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n     echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > samtools.version.txt\n     \"\"\"\n }",
        "nb_lignes_process": 27,
        "string_script": "     params.options.forEach{key, value -> options[key]=value}\n     def prefix   = ioptions.suffix ? \"${meta.id}${ioptions.suffix}\" : \"${meta.id}\"\n     \"\"\"\n     samtools sort $options.args -@ $task.cpus -o ${prefix}.bam -T $prefix $bam\n     echo \\$(samtools --version 2>&1) | sed 's/^.*samtools //; s/Using.*\\$//' > samtools.version.txt\n     \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "meta",
            "bam"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode , enabled: options.publish_enabled",
            "conda (params.enable_conda ? \"bioconda::samtools=1.09\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/samtools:1.10--h9402c20_2\" } else { container \"quay.io/biocontainers/samtools:1.10--h9402c20_2\" }"
        ],
        "when": "",
        "stub": ""
    },
    "CHECKSUM": {
        "name_process": "CHECKSUM",
        "string_process": "\nprocess CHECKSUM {\n  tag \"$meta.id\"\n  publishDir \"${params.outdir}/${options.publish_dir}\",\n             mode: options.publish_mode\n\n   conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n   if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n       container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\"\n   } else {\n       container \"biocontainers/biocontainers:v1.2.0_cv1\"\n   }\n\n  input: tuple val(meta), path(reads)\n  output:\n  path(\"md5.*.txt\"), emit: md5\n  \n  script:\n  def prefix = meta.id\n  params.options.forEach{key, value -> options[key]=value}\n  if (meta.single_end) {\n        \"\"\"\n        touch md5.${prefix}.txt\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s ${reads[0]} ${prefix}.fastq.gz\n        ${options.gunzip_exec} -c ${prefix}.fastq.gz > ${prefix}.fastq\n        ${options.md5_exec} ${prefix}.fastq >>md5.${prefix}.txt\n        if [ \"${meta.md5_1}\" != \"null\" ]; then\n            md5=(\\$(${options.md5_exec} ${prefix}.fastq.gz))\n            if [ \"\\$md5\" != \"${meta.md5_1}\" ]\n            then\n                echo \"${meta.id} has checksum ${meta.md5_1}, but we got checksum \\$md5!\"\n                exit 128\n            fi\n        fi\n        \"\"\"\n    } else {\n        \"\"\"\n        touch md5.${prefix}.txt\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        ${options.gunzip_exec} -c ${prefix}_1.fastq.gz > ${prefix}_1.fastq\n        ${options.md5_exec} ${prefix}_1.fastq >>md5.${prefix}.txt\n        ${options.gunzip_exec} -c ${prefix}_2.fastq.gz > ${prefix}_2.fastq\n        ${options.md5_exec} ${prefix}_2.fastq >>md5.${prefix}.txt\n        if [ \"${meta.md5_1}\" != \"null\" ]; then\n            md5=(\\$(${options.md5_exec} ${prefix}_1.fastq.gz))\n            if [ \"\\$md5\" != \"${meta.md5_1}\" ]\n            then\n                echo \"${meta.id} has checksum ${meta.md5_1}, but we got checksum \\$md5!\"\n                exit 128\n            fi\n        fi\n        if [ \"${meta.md5_2}\" != \"null\" ]; then\n            md5=(\\$(${options.md5_exec} ${prefix}_2.fastq.gz))\n            if [ \"\\$md5\" != \"${meta.md5_2}\" ]\n            then\n                echo \"${meta.id} has checksum ${meta.md5_2}, but we got checksum \\$md5!\"\n                exit 128\n            fi\n        fi\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 61,
        "string_script": "  def prefix = meta.id\n  params.options.forEach{key, value -> options[key]=value}\n  if (meta.single_end) {\n        \"\"\"\n        touch md5.${prefix}.txt\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s ${reads[0]} ${prefix}.fastq.gz\n        ${options.gunzip_exec} -c ${prefix}.fastq.gz > ${prefix}.fastq\n        ${options.md5_exec} ${prefix}.fastq >>md5.${prefix}.txt\n        if [ \"${meta.md5_1}\" != \"null\" ]; then\n            md5=(\\$(${options.md5_exec} ${prefix}.fastq.gz))\n            if [ \"\\$md5\" != \"${meta.md5_1}\" ]\n            then\n                echo \"${meta.id} has checksum ${meta.md5_1}, but we got checksum \\$md5!\"\n                exit 128\n            fi\n        fi\n        \"\"\"\n    } else {\n        \"\"\"\n        touch md5.${prefix}.txt\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        ${options.gunzip_exec} -c ${prefix}_1.fastq.gz > ${prefix}_1.fastq\n        ${options.md5_exec} ${prefix}_1.fastq >>md5.${prefix}.txt\n        ${options.gunzip_exec} -c ${prefix}_2.fastq.gz > ${prefix}_2.fastq\n        ${options.md5_exec} ${prefix}_2.fastq >>md5.${prefix}.txt\n        if [ \"${meta.md5_1}\" != \"null\" ]; then\n            md5=(\\$(${options.md5_exec} ${prefix}_1.fastq.gz))\n            if [ \"\\$md5\" != \"${meta.md5_1}\" ]\n            then\n                echo \"${meta.id} has checksum ${meta.md5_1}, but we got checksum \\$md5!\"\n                exit 128\n            fi\n        fi\n        if [ \"${meta.md5_2}\" != \"null\" ]; then\n            md5=(\\$(${options.md5_exec} ${prefix}_2.fastq.gz))\n            if [ \"\\$md5\" != \"${meta.md5_2}\" ]\n            then\n                echo \"${meta.id} has checksum ${meta.md5_2}, but we got checksum \\$md5!\"\n                exit 128\n            fi\n        fi\n        \"\"\"\n    }",
        "nb_lignes_script": 43,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jianhong__universalModule",
        "directive": [
            "tag \"$meta.id\"",
            "publishDir \"${params.outdir}/${options.publish_dir}\" , mode: options.publish_mode",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img\" } else { container \"biocontainers/biocontainers:v1.2.0_cv1\" } input: tuple val(meta), path(reads)"
        ],
        "when": "",
        "stub": ""
    }
}
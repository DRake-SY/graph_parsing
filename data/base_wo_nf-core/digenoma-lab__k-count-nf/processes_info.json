{
    "ckmers": {
        "name_process": "ckmers",
        "string_process": "\nprocess ckmers{\n  tag \"${sample}\"\n  cpus params.cpu\n  memory params.mem+'G'\n                                                  \n  publishDir \"${params.outdir}/kmc\", mode: 'copy'\n                                                                         \n\n  input:\n      set val(sample), file(reads) from reads_kmc\n  output:\n                      \n      set val(sample), file(\"${sample}.hist\") into gs_in\n                                                      \n      set val(sample), file(\"${sample}.{kmc_pre,kmc_suf}\") optional true into kmc_output\n                        \n\n  script:\n  def del_kmc=\"\"\n  if(params.remove_kmc_db){\n    del_kmc=\"rm -f ${sample}.kmc_pre ${sample}.kmc_suf\"\n  }\n  if(params.debug){\n    \"\"\"\n    touch ${sample}.hist\n    touch ${sample}.kmc_pre\n    touch ${sample}.kmc_suf\n    ${del_kmc}\n    \"\"\"\n                           \n  }else{\n  \"\"\"\n  ls ${reads} > reads.txt\n  mkdir ${sample}-tmp\n  # We count the 21 mers in 12Gb memory\n  kmc -k${params.kmer} -t${params.cpu} -m${params.mem} -ci1 -cs10000 @reads.txt ${sample} ${sample}-tmp\n  # We create the output histogram\n  kmc_tools transform ${sample} histogram ${sample}.hist -cx10000\n  ${del_kmc}\n  \"\"\"\n                                   \n  }\n}",
        "nb_lignes_process": 42,
        "string_script": "  def del_kmc=\"\"\n  if(params.remove_kmc_db){\n    del_kmc=\"rm -f ${sample}.kmc_pre ${sample}.kmc_suf\"\n  }\n  if(params.debug){\n    \"\"\"\n    touch ${sample}.hist\n    touch ${sample}.kmc_pre\n    touch ${sample}.kmc_suf\n    ${del_kmc}\n    \"\"\"\n                           \n  }else{\n  \"\"\"\n  ls ${reads} > reads.txt\n  mkdir ${sample}-tmp\n  # We count the 21 mers in 12Gb memory\n  kmc -k${params.kmer} -t${params.cpu} -m${params.mem} -ci1 -cs10000 @reads.txt ${sample} ${sample}-tmp\n  # We create the output histogram\n  kmc_tools transform ${sample} histogram ${sample}.hist -cx10000\n  ${del_kmc}\n  \"\"\"\n                                   \n  }",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "KMC"
        ],
        "tools_url": [
            "https://bio.tools/kmc"
        ],
        "tools_dico": [
            {
                "name": "KMC",
                "uri": "https://bio.tools/kmc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3472",
                                    "term": "k-mer counting"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "KMC is a utility designed for counting k-mers (sequences of consecutive k symbols) in a set of reads from genome sequencing projects.",
                "homepage": "http://sun.aei.polsl.pl/REFRESH/index.php?page=projects&project=kmc&subpage=about"
            }
        ],
        "inputs": [
            "reads_kmc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "gs_in",
            "kmc_output"
        ],
        "nb_outputs": 2,
        "name_workflow": "digenoma-lab__k-count-nf",
        "directive": [
            "tag \"${sample}\"",
            "cpus params.cpu",
            "memory params.mem+'G'",
            "publishDir \"${params.outdir}/kmc\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "genomescope": {
        "name_process": "genomescope",
        "string_process": "\nprocess genomescope {\n    tag \"${sample}-GS\"\n    cpus 1\n    memory params.mem+'G'\n\n    publishDir \"${params.outdir}/genomescope/\", mode: 'copy'\n\n    input:\n        set sample, file(hist) from gs_in\n    output:\n        path(\"${sample}-GS\")\n\n    script:\n    if(params.debug){\n      \"\"\"\n      mkdir ${sample}-GS\n      touch ${sample}-GS/${sample}-GS.png\n      \"\"\"\n    }else{\n    \"\"\"\n    genomescope2 -i ${hist} -o ${sample}-GS -k ${params.kmer}\n    \"\"\"\n  }\n}",
        "nb_lignes_process": 23,
        "string_script": "    if(params.debug){\n      \"\"\"\n      mkdir ${sample}-GS\n      touch ${sample}-GS/${sample}-GS.png\n      \"\"\"\n    }else{\n    \"\"\"\n    genomescope2 -i ${hist} -o ${sample}-GS -k ${params.kmer}\n    \"\"\"\n  }",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gs_in"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "digenoma-lab__k-count-nf",
        "directive": [
            "tag \"${sample}-GS\"",
            "cpus 1",
            "memory params.mem+'G'",
            "publishDir \"${params.outdir}/genomescope/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
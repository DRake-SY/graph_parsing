{
    "OPERATION_1": {
        "string": "Channel.fromPath(params.gwas_ss_tsv)\n    .ifEmpty { error \"Cannot find gwas_vcf: ${params.gwas_vcf}\" }\n    .splitCsv(header: true, sep: '\\t', strip: true)\n    .map{row -> [ row.gwas_id, file(row.gwas_vcf)]}\n    .set { gwas_vcf_ch }",
        "origin": [
            [
                "params.gwas_ss_tsv",
                "A"
            ]
        ],
        "gives": [
            [
                "gwas_vcf_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.fromPath(params.gwas_lift_chain)\n    .ifEmpty { error \"Cannot find gwas_vcf: ${params.gwas_lift_chain}\" }\n    .set { gwas_lift_chain_ch }",
        "origin": [
            [
                "params.gwas_lift_chain",
                "A"
            ]
        ],
        "gives": [
            [
                "gwas_lift_chain_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(params.hg38_ref_genome)\n    .ifEmpty { error \"Cannot find gwas_vcf: ${params.hg38_ref_genome}\" }\n    .set { hg38_ref_genome_ch }",
        "origin": [
            [
                "params.hg38_ref_genome",
                "A"
            ]
        ],
        "gives": [
            [
                "hg38_ref_genome_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath(params.qtl_ss_tsv)\n    .ifEmpty { error \"Cannot find gene_variant_list: ${params.eqtl_summ_stats_path}\" }\n    .splitCsv(header: true, sep: '\\t', strip: true)\n    .map{row -> [ row.qtl_subset, file(row.qtl_ss), file(row.qtl_ss_index), file(row.qtl_credible_set_or_perm)]}\n    .set{ eqtl_summ_stats_raw_ch }",
        "origin": [
            [
                "params.qtl_ss_tsv",
                "A"
            ]
        ],
        "gives": [
            [
                "eqtl_summ_stats_raw_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "eqtl_summ_stats_raw_ch.set { extract_lead_var_pairs_ch }",
        "origin": [
            [
                "eqtl_summ_stats_raw_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "extract_lead_var_pairs_ch",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "eqtl_summ_stats_raw_ch.set { eqtl_summ_stats_ch }",
        "origin": [
            [
                "eqtl_summ_stats_raw_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "eqtl_summ_stats_ch",
                "P"
            ]
        ]
    }
}
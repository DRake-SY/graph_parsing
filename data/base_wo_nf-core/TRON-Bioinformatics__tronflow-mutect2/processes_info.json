{
    "PILEUP_SUMMARIES": {
        "name_process": "PILEUP_SUMMARIES",
        "string_process": "\nprocess PILEUP_SUMMARIES {\n    cpus 2\n    memory params.memory_pileup\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}\", mode: \"copy\"\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n\n    input:\n    tuple val(name), val(tumor_bam), val(normal_bam)\n\n    output:\n    tuple val(\"${name}\"), file(\"${name}.pileupsummaries.table\"), emit: pileupsummaries\n\n    script:\n    tumor_inputs = tumor_bam.split(\",\").collect({v -> \"--input $v\"}).join(\" \")\n    \"\"\"\n    gatk --java-options '-Xmx${params.memory_pileup}' GetPileupSummaries  \\\n    --intervals ${params.gnomad} \\\n    --variant ${params.gnomad} \\\n    ${tumor_inputs} \\\n    --output ${name}.pileupsummaries.table\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    tumor_inputs = tumor_bam.split(\",\").collect({v -> \"--input $v\"}).join(\" \")\n    \"\"\"\n    gatk --java-options '-Xmx${params.memory_pileup}' GetPileupSummaries  \\\n    --intervals ${params.gnomad} \\\n    --variant ${params.gnomad} \\\n    ${tumor_inputs} \\\n    --output ${name}.pileupsummaries.table\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "name",
            "tumor_bam",
            "normal_bam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-mutect2",
        "directive": [
            "cpus 2",
            "memory params.memory_pileup",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}\", mode: \"copy\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "LEARN_READ_ORIENTATION_MODEL": {
        "name_process": "LEARN_READ_ORIENTATION_MODEL",
        "string_process": "\nprocess LEARN_READ_ORIENTATION_MODEL {\n  cpus 2\n  memory params.memory_read_orientation\n  tag \"${name}\"\n  publishDir \"${params.output}/${name}\", mode: \"copy\"\n\n  conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n\n  input:\n  tuple val(name), file(f1r2_stats)\n\n  output:\n  tuple val(name), file(\"${name}.read-orientation-model.tar.gz\"), emit: read_orientation_model\n\n  \"\"\"\n  gatk --java-options '-Xmx${params.memory_read_orientation}' LearnReadOrientationModel \\\n  --input ${f1r2_stats} \\\n  --output ${name}.read-orientation-model.tar.gz\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n  gatk --java-options '-Xmx${params.memory_read_orientation}' LearnReadOrientationModel \\\n  --input ${f1r2_stats} \\\n  --output ${name}.read-orientation-model.tar.gz\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "name",
            "f1r2_stats"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-mutect2",
        "directive": [
            "cpus 2",
            "memory params.memory_read_orientation",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}\", mode: \"copy\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "CALCULATE_CONTAMINATION": {
        "name_process": "CALCULATE_CONTAMINATION",
        "string_process": "\nprocess CALCULATE_CONTAMINATION {\n    cpus 2\n    memory params.memory_contamination\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}\", mode: \"copy\"\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n\n    input:\n    tuple val(name), file(table)\n\n    output:\n    tuple val(name), file(\"${name}.segments.table\"), file(\"${name}.calculatecontamination.table\"), emit: contaminationTables\n\n    \"\"\"\n    gatk --java-options '-Xmx${params.memory_contamination}' CalculateContamination \\\n    --input ${table} \\\n    -tumor-segmentation ${name}.segments.table \\\n    --output ${name}.calculatecontamination.table\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n    gatk --java-options '-Xmx${params.memory_contamination}' CalculateContamination \\\n    --input ${table} \\\n    -tumor-segmentation ${name}.segments.table \\\n    --output ${name}.calculatecontamination.table\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "name",
            "table"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-mutect2",
        "directive": [
            "cpus 2",
            "memory params.memory_contamination",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}\", mode: \"copy\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "MUTECT2": {
        "name_process": "MUTECT2",
        "string_process": "\nprocess MUTECT2 {\n    cpus 2\n    memory params.memory_mutect2\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}\", mode: \"copy\"\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1 bioconda::samtools=1.12\" : null)\n\n    input:\n    tuple val(name), val(tumor_bam), val(normal_bam)\n\n    output:\n    tuple val(\"${name}\"), file(\"${name}.mutect2.unfiltered.vcf\"), file(\"${name}.mutect2.unfiltered.vcf.stats\"), emit: unfiltered_vcfs\n    tuple val(\"${name}\"), file(\"${name}.f1r2.tar.gz\"), emit: f1r2_stats\n    tuple file(\"${name}.mutect2.assembled_haplotypes.bam\"), file(\"${name}.mutect2.assembled_haplotypes.bai\"), optional: true\n\n    script:\n    normal_panel_option = params.pon ? \"--panel-of-normals ${params.pon}\" : \"\"\n    germline_filter = params.disable_common_germline_filter ? \"\" : \"--germline-resource ${params.gnomad}\"\n    normal_inputs = normal_bam.split(\",\").collect({v -> \"--input $v\"}).join(\" \")\n    tumor_inputs = tumor_bam.split(\",\").collect({v -> \"--input $v\"}).join(\" \")\n    normalRGSMs = normal_bam.split(\",\").collect({v -> \"\\$(samtools view -H $v | grep -oP '(?<=SM:)[^ |\\\\t]*' | head -1)\"})\n    normalRGSM = normalRGSMs.first()\n    tumorRGSMs = tumor_bam.split(\",\").collect({v -> \"\\$(samtools view -H $v | grep -oP '(?<=SM:)[^ |\\\\t]*' | head -1)\"})\n    tumorRGSM = tumorRGSMs.first()\n    intervals_option = params.intervals ? \"--intervals ${params.intervals}\" : \"\"\n    bam_output_option = params.enable_bam_output ? \"--bam-output ${name}.mutect2.assembled_haplotypes.bam\" : \"\"\n    \"\"\"\n    # sanity checks on the RGSM\n    source assert.sh\n\n    assert_eq \\$(echo ${tumorRGSMs} | sed 's/\\\\[//g' | sed 's/\\\\]//g' | sed 's/, /\\\\n/g' | sort | uniq | wc -l) 1 \"All tumor BAMs RGSM tags must be equal\"\n    assert_eq \\$(echo ${normalRGSMs} | sed 's/\\\\[//g' | sed 's/\\\\]//g' | sed 's/, /\\\\n/g' | sort | uniq | wc -l) 1 \"All normal BAMs RGSM tags must be equal\"\n    assert_not_eq \"${normalRGSM}\" \"${tumorRGSM}\" \"Tumor and normal RGSM must be different!\"\n\n    gatk --java-options '-Xmx${params.memory_mutect2}' Mutect2 \\\n    --reference ${params.reference} \\\n    ${intervals_option} \\\n    ${germline_filter} \\\n    ${normal_panel_option} \\\n    ${bam_output_option} \\\n    ${normal_inputs} --normal-sample ${normalRGSM} \\\n    ${tumor_inputs} --tumor-sample ${tumorRGSM} \\\n    --output ${name}.mutect2.unfiltered.vcf \\\n    --f1r2-tar-gz ${name}.f1r2.tar.gz ${params.args_mutect2}\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    normal_panel_option = params.pon ? \"--panel-of-normals ${params.pon}\" : \"\"\n    germline_filter = params.disable_common_germline_filter ? \"\" : \"--germline-resource ${params.gnomad}\"\n    normal_inputs = normal_bam.split(\",\").collect({v -> \"--input $v\"}).join(\" \")\n    tumor_inputs = tumor_bam.split(\",\").collect({v -> \"--input $v\"}).join(\" \")\n    normalRGSMs = normal_bam.split(\",\").collect({v -> \"\\$(samtools view -H $v | grep -oP '(?<=SM:)[^ |\\\\t]*' | head -1)\"})\n    normalRGSM = normalRGSMs.first()\n    tumorRGSMs = tumor_bam.split(\",\").collect({v -> \"\\$(samtools view -H $v | grep -oP '(?<=SM:)[^ |\\\\t]*' | head -1)\"})\n    tumorRGSM = tumorRGSMs.first()\n    intervals_option = params.intervals ? \"--intervals ${params.intervals}\" : \"\"\n    bam_output_option = params.enable_bam_output ? \"--bam-output ${name}.mutect2.assembled_haplotypes.bam\" : \"\"\n    \"\"\"\n    # sanity checks on the RGSM\n    source assert.sh\n\n    assert_eq \\$(echo ${tumorRGSMs} | sed 's/\\\\[//g' | sed 's/\\\\]//g' | sed 's/, /\\\\n/g' | sort | uniq | wc -l) 1 \"All tumor BAMs RGSM tags must be equal\"\n    assert_eq \\$(echo ${normalRGSMs} | sed 's/\\\\[//g' | sed 's/\\\\]//g' | sed 's/, /\\\\n/g' | sort | uniq | wc -l) 1 \"All normal BAMs RGSM tags must be equal\"\n    assert_not_eq \"${normalRGSM}\" \"${tumorRGSM}\" \"Tumor and normal RGSM must be different!\"\n\n    gatk --java-options '-Xmx${params.memory_mutect2}' Mutect2 \\\n    --reference ${params.reference} \\\n    ${intervals_option} \\\n    ${germline_filter} \\\n    ${normal_panel_option} \\\n    ${bam_output_option} \\\n    ${normal_inputs} --normal-sample ${normalRGSM} \\\n    ${tumor_inputs} --tumor-sample ${tumorRGSM} \\\n    --output ${name}.mutect2.unfiltered.vcf \\\n    --f1r2-tar-gz ${name}.f1r2.tar.gz ${params.args_mutect2}\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "name",
            "tumor_bam",
            "normal_bam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-mutect2",
        "directive": [
            "cpus 2",
            "memory params.memory_mutect2",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}\", mode: \"copy\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1 bioconda::samtools=1.12\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "FILTER_CALLS": {
        "name_process": "FILTER_CALLS",
        "string_process": "\nprocess FILTER_CALLS {\n    cpus 2\n    memory params.memory_filter\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}\", mode: \"copy\"\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n\n    input:\n    tuple val(name), file(segments_table), file(contamination_table), file(model), file(unfiltered_vcf), file(vcf_stats)\n\n    output:\n    tuple val(name), val(\"${params.output}/${name}/${name}.mutect2.vcf\"), emit: final_vcfs\n    tuple val(name), file(\"${name}.mutect2.vcf\"), emit: anno_input\n    file \"${name}.mutect2.vcf\"\n\n    \"\"\"\n    gatk --java-options '-Xmx${params.memory_filter}' FilterMutectCalls \\\n    -V ${unfiltered_vcf} \\\n    --reference ${params.reference} \\\n    --tumor-segmentation ${segments_table} \\\n    --contamination-table ${contamination_table} \\\n    --ob-priors ${model} \\\n    --output ${name}.mutect2.vcf ${params.args_filter}\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n    gatk --java-options '-Xmx${params.memory_filter}' FilterMutectCalls \\\n    -V ${unfiltered_vcf} \\\n    --reference ${params.reference} \\\n    --tumor-segmentation ${segments_table} \\\n    --contamination-table ${contamination_table} \\\n    --ob-priors ${model} \\\n    --output ${name}.mutect2.vcf ${params.args_filter}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "name",
            "segments_table",
            "contamination_table",
            "model",
            "unfiltered_vcf",
            "vcf_stats"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-mutect2",
        "directive": [
            "cpus 2",
            "memory params.memory_filter",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}\", mode: \"copy\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "mutect2Pon": {
        "name_process": "mutect2Pon",
        "string_process": "\nprocess mutect2Pon {\n    cpus 2\n    memory '16g'\n    module 'java/1.8.0'\n    errorStrategy 'finish'\n\n    input:\n    \tset val(name), file(bam), file(bai), file(interval) from input_files.combine(intervals)\n\n    output:\n\t    set val(\"${bam.baseName}\"), file(\"${bam.baseName}.${interval.baseName}.mutect.vcf\")  into mutect_vcfs\n\n    \"\"\"\n    mkdir -p `pwd`/scratch/tmp\n    java -Xmx16g -Djava.io.tmpdir=`pwd`/scratch/tmp -jar ${gatk4_jar} \\\n    Mutect2 \\\n    --reference ${params.reference} \\\n    --intervals ${interval} \\\n    --input ${bam} \\\n    --tumor-sample ${name} \\\n    --max-mnp-distance 0 \\\n    --output ${bam.baseName}.${interval.baseName}.mutect.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n    mkdir -p `pwd`/scratch/tmp\n    java -Xmx16g -Djava.io.tmpdir=`pwd`/scratch/tmp -jar ${gatk4_jar} \\\n    Mutect2 \\\n    --reference ${params.reference} \\\n    --intervals ${interval} \\\n    --input ${bam} \\\n    --tumor-sample ${name} \\\n    --max-mnp-distance 0 \\\n    --output ${bam.baseName}.${interval.baseName}.mutect.vcf\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_files",
            "intervals"
        ],
        "nb_inputs": 2,
        "outputs": [
            "mutect_vcfs"
        ],
        "nb_outputs": 1,
        "name_workflow": "TRON-Bioinformatics__tronflow-mutect2",
        "directive": [
            "cpus 2",
            "memory '16g'",
            "module 'java/1.8.0'",
            "errorStrategy 'finish'"
        ],
        "when": "",
        "stub": ""
    },
    "gatherVcfs": {
        "name_process": "gatherVcfs",
        "string_process": "\nprocess gatherVcfs {\n    cpus 1\n    memory '32g'\n    module 'java/1.8.0'\n    publishDir \"${params.output}\", mode: \"copy\"\n\n    input:\n    \tset name, file(vcf_list) from mutect_vcfs.groupTuple()\t                \n\n    output:\n    \tfile(\"${name}.vcf\") into whole_vcfs\n\n    script:\n      \t                                                                           \n    \tinput_vcfs = \"$vcf_list\".split(\" \")\n        .sort{ a, b -> a.tokenize(\".\")[-3].toInteger().compareTo b.tokenize(\".\")[-3].toInteger() }\n        .collect{\"INPUT=\" + it}.join(\" \")\n    \t\"\"\"\n      \tmkdir -p `pwd`/scratch/tmp\n    \tjava -Xmx32g -Djava.io.tmpdir=`pwd`/scratch/tmp  -jar $picard_jar \\\n    \tGatherVcfs \\\n      \t${input_vcfs} \\\n      \tOUTPUT=${name}.vcf\n\t    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \tinput_vcfs = \"$vcf_list\".split(\" \")\n        .sort{ a, b -> a.tokenize(\".\")[-3].toInteger().compareTo b.tokenize(\".\")[-3].toInteger() }\n        .collect{\"INPUT=\" + it}.join(\" \")\n    \t\"\"\"\n      \tmkdir -p `pwd`/scratch/tmp\n    \tjava -Xmx32g -Djava.io.tmpdir=`pwd`/scratch/tmp  -jar $picard_jar \\\n    \tGatherVcfs \\\n      \t${input_vcfs} \\\n      \tOUTPUT=${name}.vcf\n\t    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mutect_vcfs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "whole_vcfs"
        ],
        "nb_outputs": 1,
        "name_workflow": "TRON-Bioinformatics__tronflow-mutect2",
        "directive": [
            "cpus 1",
            "memory '32g'",
            "module 'java/1.8.0'",
            "publishDir \"${params.output}\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "createPON": {
        "name_process": "createPON",
        "string_process": "\nprocess createPON {\n    cpus 1\n    memory '32g'\n    module 'java/1.8.0'\n    publishDir \"${params.output}\", mode: \"copy\"\n\n    input:\n    \tfile(vcf_list) from whole_vcfs.collect()\n\n    output:\n    \tfile(\"pon.vcf\")\n      file(\"pon.vcf.idx\")\n\n    script:\n    \tinput_vcfs = \"$vcf_list\".split(\" \").collect{\"--vcfs \" + it}.join(\" \")\n    \t\"\"\"\n      # combines VCFs and keeps variants occuring in at least two VCFs\n\t    mkdir -p `pwd`/scratch/tmp\n    \tjava -Xmx32g -Djava.io.tmpdir=`pwd`/scratch/tmp  -jar $gatk40_jar \\\n    \tCreateSomaticPanelOfNormals ${input_vcfs} \\\n      --output pon.vcf\n    \t\"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \tinput_vcfs = \"$vcf_list\".split(\" \").collect{\"--vcfs \" + it}.join(\" \")\n    \t\"\"\"\n      # combines VCFs and keeps variants occuring in at least two VCFs\n\t    mkdir -p `pwd`/scratch/tmp\n    \tjava -Xmx32g -Djava.io.tmpdir=`pwd`/scratch/tmp  -jar $gatk40_jar \\\n    \tCreateSomaticPanelOfNormals ${input_vcfs} \\\n      --output pon.vcf\n    \t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "whole_vcfs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-mutect2",
        "directive": [
            "cpus 1",
            "memory '32g'",
            "module 'java/1.8.0'",
            "publishDir \"${params.output}\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "FUNCOTATOR": {
        "name_process": "FUNCOTATOR",
        "string_process": "\nprocess FUNCOTATOR {\n\n    cpus 2\n    memory params.memory_funcotator\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}\", mode: \"copy\"\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)\n\n    input:\n    tuple val(name), file(vcf)\n\n    output:\n    tuple val(name), val(\"${params.output}/${name}/${name}.mutect2.funcotated.vcf\"), emit: vcf_anno\n    file \"${name}.mutect2.funcotated.maf\"\n\n    \"\"\"\n    gatk --java-options '-Xmx${params.memory_funcotator}' Funcotator \\\n     --variant ${vcf} \\\n     --reference ${params.reference} \\\n     --ref-version ${params.reference_version_funcotator} \\\n     --data-sources-path ${params.funcotator} \\\n     --output ${name}.mutect2.funcotated.maf \\\n     --output-file-format ${params.output_format_funcotator} \\\n     --transcript-selection-mode ${params.transcript_selection_mode_funcotator} \\\n     ${params.args_funcotator}\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n    gatk --java-options '-Xmx${params.memory_funcotator}' Funcotator \\\n     --variant ${vcf} \\\n     --reference ${params.reference} \\\n     --ref-version ${params.reference_version_funcotator} \\\n     --data-sources-path ${params.funcotator} \\\n     --output ${name}.mutect2.funcotated.maf \\\n     --output-file-format ${params.output_format_funcotator} \\\n     --transcript-selection-mode ${params.transcript_selection_mode_funcotator} \\\n     ${params.args_funcotator}\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "name",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-mutect2",
        "directive": [
            "cpus 2",
            "memory params.memory_funcotator",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}\", mode: \"copy\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.6.1\" : null)"
        ],
        "when": "",
        "stub": ""
    }
}
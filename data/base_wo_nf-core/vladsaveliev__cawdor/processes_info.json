{
    "CreateIntervalBeds": {
        "name_process": "CreateIntervalBeds",
        "string_process": "\nprocess CreateIntervalBeds {\n  tag {intervals.fileName}\n\n  input:\n  file(intervals) from Channel.value(intervals)\n\n  output:\n  file '*.bed' into intervalBeds mode flatten\n\n  script:\n                                                                           \n                                                                                \n  if (intervals.getName().endsWith('.bed'))\n    \"\"\"\n    awk -v FS=\"\\t\" '{\n      t = \\$5  # runtime estimate\n      if (t == \"\") {\n        # no runtime estimate in this row, assume default value\n        t = (\\$3 - \\$2) / ${params.nucleotidesPerSecond}\n      }\n      if (chunk_fname == \"\" || (chunk > 600 && (chunk + t) > longest * 1.05)) {\n        # start a new chunk\n        chunk_fname = sprintf(\"%s_%d-%d.bed\", \\$1, \\$2+1, \\$3)\n        chunk = 0\n        longest = 0\n      }\n      if (t > longest)\n        longest = t\n      chunk += t\n      print \\$0 > chunk_fname\n      close(chunk_fname)\n    }' ${intervals}\n    \"\"\"\n  else\n    \"\"\"\n    awk -v FS=\"[:-]\" '{\n      chunk_fname = sprintf(\"%s_%d-%d.bed\", \\$1, \\$2, \\$3);\n      printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > chunk_fname\n      close(chunk_fname)\n    }' ${intervals}\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "  if (intervals.getName().endsWith('.bed'))\n    \"\"\"\n    awk -v FS=\"\\t\" '{\n      t = \\$5  # runtime estimate\n      if (t == \"\") {\n        # no runtime estimate in this row, assume default value\n        t = (\\$3 - \\$2) / ${params.nucleotidesPerSecond}\n      }\n      if (chunk_fname == \"\" || (chunk > 600 && (chunk + t) > longest * 1.05)) {\n        # start a new chunk\n        chunk_fname = sprintf(\"%s_%d-%d.bed\", \\$1, \\$2+1, \\$3)\n        chunk = 0\n        longest = 0\n      }\n      if (t > longest)\n        longest = t\n      chunk += t\n      print \\$0 > chunk_fname\n      close(chunk_fname)\n    }' ${intervals}\n    \"\"\"\n  else\n    \"\"\"\n    awk -v FS=\"[:-]\" '{\n      chunk_fname = sprintf(\"%s_%d-%d.bed\", \\$1, \\$2, \\$3);\n      printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > chunk_fname\n      close(chunk_fname)\n    }' ${intervals}\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "intervalBeds"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {intervals.fileName}"
        ],
        "when": "",
        "stub": ""
    },
    "RunMutect": {
        "name_process": "RunMutect",
        "string_process": " process RunMutect {\n    tag {sample}\n\n    publishDir params.outDir, mode: 'link', saveAs: { \"Mutect/${it}\" }\n\n    input:\n    set sample, status, patient, file(bam), file(bai) from readyBamsForMutect\n    set file(genomeFasta), file(genomeIndex), file(genomeDict) from Channel.value([genomeFasta, genomeIndex, genomeDict])\n    file(snps) from Channel.value(file(params.snps))\n\n    output:\n    set sample, status, patient, file(\"*.vcf.gz\"), file(\"*.vcf.gz.tbi\") into mutectOutput\n\n    script:\n    outFile = \"${sample}.vcf.gz\"\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n    Mutect2 \\\n    -R ${genomeFasta}\\\n    -I ${bam} -tumor ${idSampleTumour} \\\n    -L ${snps} \\\n    -O ${outFile} \\\n    \"\"\"\n  }",
        "nb_lignes_process": 22,
        "string_script": "    outFile = \"${sample}.vcf.gz\"\n    \"\"\"\n    gatk --java-options \"-Xmx${task.memory.toGiga()}g\" \\\n    Mutect2 \\\n    -R ${genomeFasta}\\\n    -I ${bam} -tumor ${idSampleTumour} \\\n    -L ${snps} \\\n    -O ${outFile} \\\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "readyBamsForMutect"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mutectOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {sample}",
            "publishDir params.outDir, mode: 'link', saveAs: { \"Mutect/${it}\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RunVarDict": {
        "name_process": "RunVarDict",
        "string_process": "\nprocess RunVarDict {\n  tag {idPatient + \"-vardict-\" + intervalBed.baseName}\n\n  input:\n  set idPatient, idSampleNormal, file(bamNormal), file(baiNormal), idSampleTumour, file(bamTumour),\n    file(baiTumour), file(intervalBed) from bamsForVardict\n  file(genomeFasta) from Channel.value(genomeFasta)\n  file(genomeIndex) from Channel.value(genomeIndex)\n  file(callable) from Channel.value(callable ? file(callable) : \"null\")\n\n  output:\n  set val(\"vardict\"), idPatient, idSampleNormal, idSampleTumour,\n      file(\"*.vcf.gz\"), file(\"*.vcf.gz.tbi\") into vardictOutput\n\n  when: !params.strelkaOnly && !params.onlyQC\n\n  script:\n  def makeTarget = \"\"\n  def targetBed = intervalBed\n  if (callable) {\n    targetBed = 'target.bed'\n    makeTarget = \"bedtools intersect -a ${intervalBed} -b ${callable} > ${targetBed}\"\n  }\n  tmpDir = file(\"tmp\").mkdir()\n  outFile = \"${idPatient}-interval_${intervalBed.baseName}.vcf.gz\"\n  \"\"\"\n  ${makeTarget}\n  unset JAVA_HOME && \\\n  export VAR_DICT_OPTS='-Xms750m -Xmx${task.memory.toGiga()}g -XX:+UseSerialGC -Djava.io.tmpdir=${tmpDir}' && \\\n  vardict-java -G ${genomeFasta} \\\n  -N ${idSampleNormal} \\\n  -b \"${bamTumour}|${bamNormal}\" \\\n  -c 1 -S 2 -E 3 -g 4 --nosv --deldupvar -Q 10 -F 0x700 -f 0.1 \\\n  ${targetBed} \\\n  | awk 'NF>=48' \\\n  | testsomatic.R \\\n  | var2vcf_paired.pl -P 0.9 -m 4.25 -f 0.01 -M  -N \"${idSampleTumour}|${idSampleNormal}\" \\\n  | bcftools filter -m '+' -s 'REJECT' -e 'STATUS !~ \".*Somatic\"' \\\n  2> /dev/null \\\n  | bcftools filter --soft-filter 'LowFreqBias' --mode '+' -e 'FORMAT/AF[0] < 0.02 && \\\n  FORMAT/VD[0] < 30 && FORMAT/SBF[0] < 0.1 && FORMAT/NM[0] >= 2.0' \\\n  | bcftools filter -i 'QUAL >= 0' \\\n  | sed 's/\\\\\\\\.*Somatic\\\\\\\\/Somatic/' \\\n  | sed 's/REJECT,Description=\".*\">/REJECT,Description=\"Not Somatic via VarDict\">/' \\\n  | awk -F\\$'\\\\t' -v OFS='\\\\t' '{if (\\$0 !~ /^#/) gsub(/[KMRYSWBVHDXkmryswbvhdx]/, \"N\", \\$4) } {print}' \\\n  | awk -F\\$'\\\\t' -v OFS='\\\\t' '{if (\\$0 !~ /^#/) gsub(/[KMRYSWBVHDXkmryswbvhdx]/, \"N\", \\$5) } {print}' \\\n  | awk -F\\$'\\\\t' -v OFS='\\\\t' '\\$1!~/^#/ && \\$4 == \\$5 {next} {print}' \\\n  | vcfstreamsort \\\n  | bgzip -c > ${outFile} && tabix -p vcf ${outFile} \\\n  \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "  def makeTarget = \"\"\n  def targetBed = intervalBed\n  if (callable) {\n    targetBed = 'target.bed'\n    makeTarget = \"bedtools intersect -a ${intervalBed} -b ${callable} > ${targetBed}\"\n  }\n  tmpDir = file(\"tmp\").mkdir()\n  outFile = \"${idPatient}-interval_${intervalBed.baseName}.vcf.gz\"\n  \"\"\"\n  ${makeTarget}\n  unset JAVA_HOME && \\\n  export VAR_DICT_OPTS='-Xms750m -Xmx${task.memory.toGiga()}g -XX:+UseSerialGC -Djava.io.tmpdir=${tmpDir}' && \\\n  vardict-java -G ${genomeFasta} \\\n  -N ${idSampleNormal} \\\n  -b \"${bamTumour}|${bamNormal}\" \\\n  -c 1 -S 2 -E 3 -g 4 --nosv --deldupvar -Q 10 -F 0x700 -f 0.1 \\\n  ${targetBed} \\\n  | awk 'NF>=48' \\\n  | testsomatic.R \\\n  | var2vcf_paired.pl -P 0.9 -m 4.25 -f 0.01 -M  -N \"${idSampleTumour}|${idSampleNormal}\" \\\n  | bcftools filter -m '+' -s 'REJECT' -e 'STATUS !~ \".*Somatic\"' \\\n  2> /dev/null \\\n  | bcftools filter --soft-filter 'LowFreqBias' --mode '+' -e 'FORMAT/AF[0] < 0.02 && \\\n  FORMAT/VD[0] < 30 && FORMAT/SBF[0] < 0.1 && FORMAT/NM[0] >= 2.0' \\\n  | bcftools filter -i 'QUAL >= 0' \\\n  | sed 's/\\\\\\\\.*Somatic\\\\\\\\/Somatic/' \\\n  | sed 's/REJECT,Description=\".*\">/REJECT,Description=\"Not Somatic via VarDict\">/' \\\n  | awk -F\\$'\\\\t' -v OFS='\\\\t' '{if (\\$0 !~ /^#/) gsub(/[KMRYSWBVHDXkmryswbvhdx]/, \"N\", \\$4) } {print}' \\\n  | awk -F\\$'\\\\t' -v OFS='\\\\t' '{if (\\$0 !~ /^#/) gsub(/[KMRYSWBVHDXkmryswbvhdx]/, \"N\", \\$5) } {print}' \\\n  | awk -F\\$'\\\\t' -v OFS='\\\\t' '\\$1!~/^#/ && \\$4 == \\$5 {next} {print}' \\\n  | vcfstreamsort \\\n  | bgzip -c > ${outFile} && tabix -p vcf ${outFile} \\\n  \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "BCFtools",
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/bcftools",
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "bamsForVardict"
        ],
        "nb_inputs": 1,
        "outputs": [
            "vardictOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {idPatient + \"-vardict-\" + intervalBed.baseName}"
        ],
        "when": "",
        "stub": ""
    },
    "ConcatVCFbyInterval": {
        "name_process": "ConcatVCFbyInterval",
        "string_process": "\nprocess ConcatVCFbyInterval {\n  tag {idSample + \"-\" + variantCaller}\n\n  publishDir \"${params.outDir}/VariantCalling/${idSample}/${\"$variantCaller\"}\", mode: params.publishDirMode\n\n  input:\n  set variantCaller, idSample, file(vcfFiles), file(tbiFiles) from vcfsToConcat\n\n  output:\n  set variantCaller, idSample,\n      file(\"*-${variantCaller}.vcf.gz\"), file(\"*-${variantCaller}.vcf.gz.tbi\") into vcfConcatenated\n\n  when: !params.onlyQC\n\n  script:\n  outFile = \"${idSample}-germline-${variantCaller}.vcf.gz\"                                           \n  \"\"\"\n  bcftools concat ${idSample}-interval_*.vcf.gz -a | bcftools sort -Oz -o ${outFile}\n  tabix -p vcf ${outFile}\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  outFile = \"${idSample}-germline-${variantCaller}.vcf.gz\"                                           \n  \"\"\"\n  bcftools concat ${idSample}-interval_*.vcf.gz -a | bcftools sort -Oz -o ${outFile}\n  tabix -p vcf ${outFile}\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "vcfsToConcat"
        ],
        "nb_inputs": 1,
        "outputs": [
            "vcfConcatenated"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {idSample + \"-\" + variantCaller}",
            "publishDir \"${params.outDir}/VariantCalling/${idSample}/${\"$variantCaller\"}\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "RunManta": {
        "name_process": "RunManta",
        "string_process": "\nprocess RunManta {\n  tag {idSample}\n\n  publishDir \"${params.outDir}/VariantCalling/${idSample}/Manta\", mode: params.publishDirMode\n\n  input:\n  set idSample, file(bam), file(bai) from bamsForManta\n  file(targetBED) from Channel.value(params.targetBED ? file(params.targetBED) : \"null\")\n  set file(genomeFasta), file(genomeIndex) from Channel.value([\n      genomeFasta,\n      genomeIndex\n  ])\n\n  output:\n  set val(\"manta\"), idSample, file(\"*.vcf.gz\"), file(\"*.vcf.gz.tbi\") into mantaOutput\n\n  when: !params.onlyQC\n\n  script:\n  targetCmd = params.targetBED ?\n      \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" :\n      \"\"\n  options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n  outputFile = \"${idSample}-germline-manta.vcf.gz\"\n  \"\"\"\n  ${targetCmd}\n  configManta.py \\\n  --bam ${bam} \\\n  --reference ${genomeFasta} \\\n  ${options} \\\n  --runDir Manta\n\n  python Manta/runWorkflow.py -m local -j ${task.cpus}\n\n  mv Manta/results/variants/diploidSV.vcf.gz ${outputFile}\n  mv Manta/results/variants/diploidSV.vcf.gz.tbi ${outputFile}.tbi\n  \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "  targetCmd = params.targetBED ?\n      \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" :\n      \"\"\n  options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n  outputFile = \"${idSample}-germline-manta.vcf.gz\"\n  \"\"\"\n  ${targetCmd}\n  configManta.py \\\n  --bam ${bam} \\\n  --reference ${genomeFasta} \\\n  ${options} \\\n  --runDir Manta\n\n  python Manta/runWorkflow.py -m local -j ${task.cpus}\n\n  mv Manta/results/variants/diploidSV.vcf.gz ${outputFile}\n  mv Manta/results/variants/diploidSV.vcf.gz.tbi ${outputFile}.tbi\n  \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamsForManta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mantaOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {idSample}",
            "publishDir \"${params.outDir}/VariantCalling/${idSample}/Manta\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "RunStrelka": {
        "name_process": "RunStrelka",
        "string_process": "\nprocess RunStrelka {\n  tag {idSample}\n\n  publishDir \"${params.outDir}/VariantCalling/${idSample}/Strelka\", mode: params.publishDirMode\n\n  input:\n  set idSample, file(bam), file(bai) from bamsForStrelka\n  file(targetBED) from Channel.value(params.targetBED ? file(params.targetBED) : \"null\")\n  set file(genomeFasta), file(genomeIndex) from Channel.value([\n      genomeFasta,\n      genomeIndex\n  ])\n\n  output:\n  set val(\"strelka\"), idSample, file(\"*.vcf.gz\"), file(\"*.vcf.gz.tbi\") into strelkaOutput\n\n  when: !params.onlyQC\n\n  script:\n  targetsCmd = params.targetBED ?\n      \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" :\n      \"\"\n  options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n  outputFile = \"${idSample}-germline-strelka.vcf.gz\"\n  \"\"\"\n  ${targetsCmd}\n  configureStrelkaGermlineWorkflow.py \\\n  --bam ${bam} \\\n  --referenceFasta ${genomeFasta} \\\n  ${options} \\\n  --runDir Strelka\n\n  python Strelka/runWorkflow.py -m local -j ${task.cpus}\n  mv Strelka/results/variants/variants.vcf.gz ${outputFile}\n  mv Strelka/results/variants/variants.vcf.gz.tbi ${outputFile}.tbi\n  \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "  targetsCmd = params.targetBED ?\n      \"bgzip --threads ${task.cpus} -c ${targetBED} > call_targets.bed.gz ; tabix call_targets.bed.gz\" :\n      \"\"\n  options = params.targetBED ? \"--exome --callRegions call_targets.bed.gz\" : \"\"\n  outputFile = \"${idSample}-germline-strelka.vcf.gz\"\n  \"\"\"\n  ${targetsCmd}\n  configureStrelkaGermlineWorkflow.py \\\n  --bam ${bam} \\\n  --referenceFasta ${genomeFasta} \\\n  ${options} \\\n  --runDir Strelka\n\n  python Strelka/runWorkflow.py -m local -j ${task.cpus}\n  mv Strelka/results/variants/variants.vcf.gz ${outputFile}\n  mv Strelka/results/variants/variants.vcf.gz.tbi ${outputFile}.tbi\n  \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamsForStrelka"
        ],
        "nb_inputs": 1,
        "outputs": [
            "strelkaOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {idSample}",
            "publishDir \"${params.outDir}/VariantCalling/${idSample}/Strelka\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "RunAmber": {
        "name_process": "RunAmber",
        "string_process": "\nprocess RunAmber {\n  label \"purple\"\n\n  tag {idSampleTumour + \"_vs_\" + idSampleNormal}\n\n  publishDir \"${params.outDir}/VariantCalling/${idPatient}/Purple/amber\", mode: params.publishDirMode\n\n  input:\n  set idPatient, idSampleNormal, file(bamNormal), file(baiNormal), idSampleTumour, file(bamTumour), file(baiTumour) from bamsForAmber\n  set file(genomeFasta), file(genomeIndex), file(genomeDict), file(purpleHet) from Channel.value([\n    genomeFasta,\n    genomeIndex,\n    genomeDict,\n    purpleHet\n  ])\n\n  output:\n  set idPatient, idSampleNormal, idSampleTumour, file('amber/*') into amberOutput\n\n  when: !params.onlyQC\n\n  script:\n  jvm_opts = \"-Xms750m -Xmx${task.memory.toGiga()}g\"\n  \"\"\" \\\n  AMBER ${jvm_opts} \\\n  -tumor ${idPatient} \\\n  -tumor_bam ${bamTumour} \\\n  -reference ${idSampleNormal} \\\n  -reference_bam ${bamNormal} \\\n  -ref_genome ${genomeFasta} \\\n  -bed ${purpleHet} \\\n  -threads ${task.cpus} \\\n  -output_dir amber \\\n  \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "  jvm_opts = \"-Xms750m -Xmx${task.memory.toGiga()}g\"\n  \"\"\" \\\n  AMBER ${jvm_opts} \\\n  -tumor ${idPatient} \\\n  -tumor_bam ${bamTumour} \\\n  -reference ${idSampleNormal} \\\n  -reference_bam ${bamNormal} \\\n  -ref_genome ${genomeFasta} \\\n  -bed ${purpleHet} \\\n  -threads ${task.cpus} \\\n  -output_dir amber \\\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "AMBER"
        ],
        "tools_url": [
            "https://bio.tools/amber"
        ],
        "tools_dico": [
            {
                "name": "AMBER",
                "uri": "https://bio.tools/amber",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3307",
                            "term": "Computational biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Assisted Model Building with Energy Refinement tool refers to two things: a set of molecular mechanical force fields for the simulation of biomolecules (which are in the public domain, and are used in a variety of simulation programs); and a package of molecular simulation programs which includes source code and demos.",
                "homepage": "http://ambermd.org/"
            }
        ],
        "inputs": [
            "bamsForAmber"
        ],
        "nb_inputs": 1,
        "outputs": [
            "amberOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "label \"purple\"",
            "tag {idSampleTumour + \"_vs_\" + idSampleNormal}",
            "publishDir \"${params.outDir}/VariantCalling/${idPatient}/Purple/amber\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "RunCobalt": {
        "name_process": "RunCobalt",
        "string_process": "\nprocess RunCobalt {\n  label \"purple\"\n\n  tag {idSampleTumour + \"_vs_\" + idSampleNormal}\n\n  publishDir \"${params.outDir}/VariantCalling/${idPatient}/Purple/cobalt\", mode: params.publishDirMode\n\n  input:\n  set idPatient, idSampleNormal, file(bamNormal), file(baiNormal),\n      idSampleTumour, file(bamTumour), file(baiTumour) from bamsForCobalt\n  set file(genomeFasta), file(genomeIndex), file(genomeDict), file(purpleGC) from Channel.value([\n      genomeFasta,\n      genomeIndex,\n      genomeDict,\n      purpleGC\n  ])\n\n  output:\n  set idPatient, idSampleNormal, idSampleTumour, file('cobalt/*') into cobaltOutput\n\n  when: !params.onlyQC\n\n  script:\n  jvm_opts = \"-Xms750m -Xmx${task.memory.toGiga()}g\"\n  \"\"\" \\\n  COBALT ${jvm_opts} \\\n  -tumor ${idPatient} \\\n  -tumor_bam ${bamTumour} \\\n  -reference ${idSampleNormal} \\\n  -reference_bam ${bamNormal} \\\n  -ref_genome ${genomeFasta} \\\n  -gc_profile ${purpleGC} \\\n  -threads ${task.cpus} \\\n  -output_dir cobalt \\\n  \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "  jvm_opts = \"-Xms750m -Xmx${task.memory.toGiga()}g\"\n  \"\"\" \\\n  COBALT ${jvm_opts} \\\n  -tumor ${idPatient} \\\n  -tumor_bam ${bamTumour} \\\n  -reference ${idSampleNormal} \\\n  -reference_bam ${bamNormal} \\\n  -ref_genome ${genomeFasta} \\\n  -gc_profile ${purpleGC} \\\n  -threads ${task.cpus} \\\n  -output_dir cobalt \\\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamsForCobalt"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cobaltOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "label \"purple\"",
            "tag {idSampleTumour + \"_vs_\" + idSampleNormal}",
            "publishDir \"${params.outDir}/VariantCalling/${idPatient}/Purple/cobalt\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "RunPurple": {
        "name_process": "RunPurple",
        "string_process": "\nprocess RunPurple {\n  label \"purple\"\n\n  tag {idSampleTumour + \"_vs_\" + idSampleNormal}\n\n  publishDir \"${params.outDir}/VariantCalling/${idPatient}/Purple/purple\", mode: params.publishDirMode\n\n  input:\n  set idPatient, idSampleNormal, idSampleTumour, file(amberFiles) from amberOutput\n  set idPatient, idSampleNormal, idSampleTumour, file(cobaltFiles) from cobaltOutput\n  set caller, idPatient, idSampleNormal, idSampleTumour, file(mantaVCF), file(mantaIndex) from mantaOutputForPurple\n  set file(genomeFasta), file(genomeIndex), file(genomeDict), file(purpleGC) from Channel.value([\n      genomeFasta,\n      genomeIndex,\n      genomeDict,\n      purpleGC\n  ])\n\n  output:\n  set val(\"PURPLE\"), idPatient, idSampleNormal, idSampleTumour, file('purple/*') into purpleOutput\n                                            \n                                                                                                   \n                                       \n\n  when: !params.onlyQC\n\n  script:\n  jvm_opts = \"-Xms750m -Xmx${task.memory.toGiga()}g\"\n                              \n                   \n  \"\"\" \\\n  mkdir -p purple/amber purple/cobalt\n  mv ${amberFiles} purple/amber\n  mv ${cobaltFiles} purple/cobalt\n  PURPLE ${jvm_opts} \\\n  -run_dir purple \\\n  -output_dir purple \\\n  -reference ${idSampleNormal} \\\n  -tumor ${idPatient} \\\n  -threads ${task.cpus} \\\n  -gc_profile ${purpleGC} \\\n  -structural_vcf ${mantaVCF} \\\n  \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "  jvm_opts = \"-Xms750m -Xmx${task.memory.toGiga()}g\"\n                              \n                   \n  \"\"\" \\\n  mkdir -p purple/amber purple/cobalt\n  mv ${amberFiles} purple/amber\n  mv ${cobaltFiles} purple/cobalt\n  PURPLE ${jvm_opts} \\\n  -run_dir purple \\\n  -output_dir purple \\\n  -reference ${idSampleNormal} \\\n  -tumor ${idPatient} \\\n  -threads ${task.cpus} \\\n  -gc_profile ${purpleGC} \\\n  -structural_vcf ${mantaVCF} \\\n  \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "amberOutput",
            "cobaltOutput",
            "mantaOutputForPurple"
        ],
        "nb_inputs": 3,
        "outputs": [
            "purpleOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "label \"purple\"",
            "tag {idSampleTumour + \"_vs_\" + idSampleNormal}",
            "publishDir \"${params.outDir}/VariantCalling/${idPatient}/Purple/purple\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "RunBcftoolsStats": {
        "name_process": "RunBcftoolsStats",
        "string_process": "\nprocess RunBcftoolsStats {\n  tag {vcf}\n\n  publishDir \"${params.outDir}/Reports/BCFToolsStats\", mode: params.publishDirMode\n\n  input:\n    set variantCaller, file(vcf) from vcfForBCFtools\n\n  output:\n  file (\"*_stats.txt\") into bcfReport\n\n  script:\n  \"\"\"\n  bcftools stats ${vcf} > ${vcf.simpleName}.bcftools_stats.txt\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  bcftools stats ${vcf} > ${vcf.simpleName}.bcftools_stats.txt\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "vcfForBCFtools"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bcfReport"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {vcf}",
            "publishDir \"${params.outDir}/Reports/BCFToolsStats\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "RunVcftools": {
        "name_process": "RunVcftools",
        "string_process": "\nprocess RunVcftools {\n  tag {vcf}\n\n  publishDir \"${params.outDir}/Reports/VCFTools\", mode: params.publishDirMode\n\n  input:\n    set variantCaller, file(vcf) from vcfForVCFtools\n\n  output:\n    file (\"${vcf.simpleName}.*\") into vcfReport\n\n  script:\n  \"\"\"\n  vcftools \\\n  --gzvcf ${vcf} \\\n  --relatedness2 \\\n  --out ${vcf.simpleName}\n\n  vcftools \\\n  --gzvcf ${vcf} \\\n  --TsTv-by-count \\\n  --out ${vcf.simpleName}\n\n  vcftools \\\n  --gzvcf ${vcf} \\\n  --TsTv-by-qual \\\n  --out ${vcf.simpleName}\n\n  vcftools \\\n  --gzvcf ${vcf} \\\n  --FILTER-summary \\\n  --out ${vcf.simpleName}\n  \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "  \"\"\"\n  vcftools \\\n  --gzvcf ${vcf} \\\n  --relatedness2 \\\n  --out ${vcf.simpleName}\n\n  vcftools \\\n  --gzvcf ${vcf} \\\n  --TsTv-by-count \\\n  --out ${vcf.simpleName}\n\n  vcftools \\\n  --gzvcf ${vcf} \\\n  --TsTv-by-qual \\\n  --out ${vcf.simpleName}\n\n  vcftools \\\n  --gzvcf ${vcf} \\\n  --FILTER-summary \\\n  --out ${vcf.simpleName}\n  \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "VCFtools"
        ],
        "tools_url": [
            "https://bio.tools/vcftools"
        ],
        "tools_dico": [
            {
                "name": "VCFtools",
                "uri": "https://bio.tools/vcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3675",
                                    "term": "Variant filtering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Provide easily accessible methods for working with complex genetic variation data in the form of VCF files.",
                "homepage": "https://vcftools.github.io/index.html"
            }
        ],
        "inputs": [
            "vcfForVCFtools"
        ],
        "nb_inputs": 1,
        "outputs": [
            "vcfReport"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {vcf}",
            "publishDir \"${params.outDir}/Reports/VCFTools\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "DownsampleFastq": {
        "name_process": "DownsampleFastq",
        "string_process": " process DownsampleFastq {\n    tag {sname}\n\n    validExitStatus 0,141\n\n    input:\n    set sname, file(file1) from inputChannel\n\n    output:\n    set sname, file(\"*.ds.fq\") into downsampledFastq\n\n    script:\n    \"\"\"\n    gunzip -c ${file1} | head -n${readsNum * 4} > ${sname}.ds.fq\n    \"\"\"\n  }",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    gunzip -c ${file1} | head -n${readsNum * 4} > ${sname}.ds.fq\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "inputChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "downsampledFastq"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {sname}",
            "validExitStatus 0,141"
        ],
        "when": "",
        "stub": ""
    },
    "RunNcmFastq": {
        "name_process": "RunNcmFastq",
        "string_process": "\nprocess RunNcmFastq {\n  tag {sname}\n\n  publishDir \"${params.outDir}\", mode: 'link'\n\n  input:\n  set sname, file(file1) from inputChannel\n  file ptfile from Channel.value(file(params.ptfile))\n\n  output:\n  file \"*.ncm\" into ncmFastq\n\n  script:\n  assert ptfile.name.endsWith(\".pt\")\n  \"\"\"\n  ngscheckmate_fastq \\\n  -1 ${file1} \\\n  ${ptfile} \\\n  -p ${task.cpus} \\\n  > ${sname}.ncm\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  assert ptfile.name.endsWith(\".pt\")\n  \"\"\"\n  ngscheckmate_fastq \\\n  -1 ${file1} \\\n  ${ptfile} \\\n  -p ${task.cpus} \\\n  > ${sname}.ncm\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "GPU-CASSERT"
        ],
        "tools_url": [
            "https://bio.tools/gpu-cassert"
        ],
        "tools_dico": [
            {
                "name": "GPU-CASSERT",
                "uri": "https://bio.tools/gpu-cassert",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_1317",
                            "term": "Structural biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structure alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structural alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The GPU-based implementation of the CASSERT algorithm for protein 3D structure similarity searching. The algorithm is based on the two-phase alignment of protein structures when matching fragments of compared proteins.",
                "homepage": "http://zti.polsl.pl/dmrozek/science/gpucassert/cassert.htm"
            }
        ],
        "inputs": [
            "inputChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ncmFastq"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {sname}",
            "publishDir \"${params.outDir}\", mode: 'link'"
        ],
        "when": "",
        "stub": ""
    },
    "RunNcnVaf": {
        "name_process": "RunNcnVaf",
        "string_process": "\nprocess RunNcnVaf {\n\n  publishDir \"${params.outDir}\", mode: 'link'\n\n  input:\n  file(ncmFiles) from ncmFiles\n\n  output:\n  set \"output_all.txt\", \"output_corr_matrix.txt\", \"r_script.r\" into ncmResult\n\n  \"\"\"\n  vaf_ncm.py -f -I . -O .\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n  vaf_ncm.py -f -I . -O .\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ncmFiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ncmResult"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "publishDir \"${params.outDir}\", mode: 'link'"
        ],
        "when": "",
        "stub": ""
    },
    "RunFastQC": {
        "name_process": "RunFastQC",
        "string_process": "\nprocess RunFastQC {\n  tag {idPatient + \"-\" + idLane}\n\n  publishDir \"${params.outDir}/Reports/FastQC/${idLane}\", mode: params.publishDirMode\n\n  input:\n  set idPatient, status, idSample, idLane, file(inputFile1), file(inputFile2) from inputFilesforFastQC\n\n  output:\n  file \"*_fastqc.{zip,html}\" into fastQCreport\n\n  script:\n  def inputs = Utils.isFq(inputFile1) ? \"${inputFile1} ${inputFile2}\" : \"${inputFile1}\"\n  \"\"\"\n  fastqc -t 2 -q ${inputs}\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  def inputs = Utils.isFq(inputFile1) ? \"${inputFile1} ${inputFile2}\" : \"${inputFile1}\"\n  \"\"\"\n  fastqc -t 2 -q ${inputs}\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "inputFilesforFastQC"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastQCreport"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {idPatient + \"-\" + idLane}",
            "publishDir \"${params.outDir}/Reports/FastQC/${idLane}\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "MapReads": {
        "name_process": "MapReads",
        "string_process": "\nprocess MapReads {\n  tag {sample}\n\n  publishDir \"${params.outDir}/Align\", mode: 'link'\n\n  input:\n  set sample, status, patient, file(file1), file(file2) from fastqsChannel\n  set file(genomeFasta), file(bwaIndex) from Channel.value([genomeFasta, bwaIndex])\n\n  output:\n  set sample, status, patient, file(\"*.bam\") into mappedBam\n\n  script:\n  CN = \"\"\n  if (params.containsKey(\"sequencing_center\")) {\n    CN = 'CN:' + params.get(\"sequencing_center\") + '\\\\t'\n  }\n  readGroup = \"@RG\\\\tID:${sname}\\\\t${CN}\\\\tSM:${sample}\\\\tPL:illumina\"\n  bwaMemCmd = \"bwa mem -K 100000000 -R \\\"${readGroup}\\\" -t ${task.cpus} -M ${genomeFasta}\"\n  sortMem = Math.min(2, task.memory.toGiga())\n  sortCmd = \"samtools sort -@ ${task.cpus} -m ${sortMem}G -\"\n  inp1 = file1\n  inp2 = file2\n  if (params.targetDepth > 0) {\n    inp1 = \"<(gunzip -c ${file1} | head -n${readsNum * 2})\"\n    inp2 = \"<(gunzip -c ${file2} | head -n${readsNum * 2})\"\n  }\n  \"\"\" \\\n  ${bwaMemCmd} \\\n  ${inp1} \\\n  ${inp2} \\\n  | ${sortCmd} \\\n  > ${sample}.bam \\\n  \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "  CN = \"\"\n  if (params.containsKey(\"sequencing_center\")) {\n    CN = 'CN:' + params.get(\"sequencing_center\") + '\\\\t'\n  }\n  readGroup = \"@RG\\\\tID:${sname}\\\\t${CN}\\\\tSM:${sample}\\\\tPL:illumina\"\n  bwaMemCmd = \"bwa mem -K 100000000 -R \\\"${readGroup}\\\" -t ${task.cpus} -M ${genomeFasta}\"\n  sortMem = Math.min(2, task.memory.toGiga())\n  sortCmd = \"samtools sort -@ ${task.cpus} -m ${sortMem}G -\"\n  inp1 = file1\n  inp2 = file2\n  if (params.targetDepth > 0) {\n    inp1 = \"<(gunzip -c ${file1} | head -n${readsNum * 2})\"\n    inp2 = \"<(gunzip -c ${file2} | head -n${readsNum * 2})\"\n  }\n  \"\"\" \\\n  ${bwaMemCmd} \\\n  ${inp1} \\\n  ${inp2} \\\n  | ${sortCmd} \\\n  > ${sample}.bam \\\n  \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "CNN"
        ],
        "tools_url": [
            "https://bio.tools/CNN"
        ],
        "tools_dico": [
            {
                "name": "CNN",
                "uri": "https://bio.tools/CNN",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3318",
                            "term": "Physics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3382",
                            "term": "Imaging"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Convolutional neural network for efficient estimation of regional brain strains.\n\nThree pretrained CNN neural network models are provided based on all of the brain response samples available in the published study (N=3069). They correspond to the peak maximum principal strain (MPS) of the whole brain (WB), MPS of the corpus callosum (CC), and fiber strain (FS) of the CC, all assessed at the 95th percentile levels",
                "homepage": "https://github.com/Jilab-biomechanics/CNN-brain-strains"
            }
        ],
        "inputs": [
            "fastqsChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mappedBam"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {sample}",
            "publishDir \"${params.outDir}/Align\", mode: 'link'"
        ],
        "when": "",
        "stub": ""
    },
    "MergeBams": {
        "name_process": "MergeBams",
        "string_process": "\nprocess MergeBams {\n  tag {idPatient + \"-\" + idSample}\n\n  input:\n  set idPatient, status, idSample, idLane, file(bam) from groupedBam\n\n  output:\n  set idPatient, status, idSample, file(\"${idSample}.bam\") into mergedBam\n\n  when: !params.onlyQC\n\n  script:\n  \"\"\"\n  samtools merge --threads ${task.cpus} ${idSample}.bam ${bam}\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  samtools merge --threads ${task.cpus} ${idSample}.bam ${bam}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "groupedBam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mergedBam"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {idPatient + \"-\" + idSample}"
        ],
        "when": "",
        "stub": ""
    },
    "MarkDuplicates": {
        "name_process": "MarkDuplicates",
        "string_process": "\nprocess MarkDuplicates {\n  tag {sample}\n\n  publishDir params.outDir, mode: 'link', saveAs: { \"Dedup/${it}\" }\n\n  input:\n  set sample, status, patient, file(inputBam) from mappedBam\n\n  output:\n  set sample, status, patient, file(\"${idSample}.dedup.bam\"), file(\"${idSample}.dedup.bai\") into readyBams\n\n  when: !params.onlyQC\n\n  script:\n  \"\"\" \\\n  gatk --java-options \"-Xms500m -Xmx${task.memory.toGiga()}g\" \\\n  MarkDuplicates \\\n  --MAX_RECORDS_IN_RAM 50000 \\\n  --INPUT ${inputBam} \\\n  --TMP_DIR tmp \\\n  --ASSUME_SORT_ORDER coordinate \\\n  --CREATE_INDEX true \\\n  --OUTPUT ${sample}.dedup.bam \\\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  \"\"\" \\\n  gatk --java-options \"-Xms500m -Xmx${task.memory.toGiga()}g\" \\\n  MarkDuplicates \\\n  --MAX_RECORDS_IN_RAM 50000 \\\n  --INPUT ${inputBam} \\\n  --TMP_DIR tmp \\\n  --ASSUME_SORT_ORDER coordinate \\\n  --CREATE_INDEX true \\\n  --OUTPUT ${sample}.dedup.bam \\\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "GATK",
            "MarkDuplicates (IP)"
        ],
        "tools_url": [
            "https://bio.tools/gatk",
            "https://bio.tools/markduplicates_ip"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            },
            {
                "name": "MarkDuplicates (IP)",
                "uri": "https://bio.tools/markduplicates_ip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Marks all duplicate reads in a provided SAM or BAM file and either removes them or flags them.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=toolshed.pasteur.fr/repos/fmareuil/picard_pasteur_wrapper/rgPicardMarkDups/1.56.0"
            }
        ],
        "inputs": [
            "mappedBam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "readyBams"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {sample}",
            "publishDir params.outDir, mode: 'link', saveAs: { \"Dedup/${it}\" }"
        ],
        "when": "",
        "stub": ""
    },
    "RunQualimap": {
        "name_process": "RunQualimap",
        "string_process": "\nprocess RunQualimap {\n  tag {idPatient + \"-\" + idSample}\n\n  publishDir \"${params.outDir}/Reports/Qualimap\", mode: params.publishDirMode\n\n  input:\n  set idPatient, idSample, file(bam), file(bai) from bamForQualimap\n\n  output:\n  file(\"${bam.baseName}\") into qualimapReport\n\n  when: !params.noQualimap\n\n  script:\n  \"\"\"\n  qualimap --java-mem-size=${task.memory.toGiga()}G \\\n  bamqc \\\n  -bam ${bam} \\\n  --paint-chromosome-limits \\\n  --genome-gc-distr HUMAN \\\n  -nt ${task.cpus} \\\n  -skip-duplicated \\\n  --skip-dup-mode 0 \\\n  -outdir ${bam.baseName} \\\n  -outformat HTML\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  qualimap --java-mem-size=${task.memory.toGiga()}G \\\n  bamqc \\\n  -bam ${bam} \\\n  --paint-chromosome-limits \\\n  --genome-gc-distr HUMAN \\\n  -nt ${task.cpus} \\\n  -skip-duplicated \\\n  --skip-dup-mode 0 \\\n  -outdir ${bam.baseName} \\\n  -outformat HTML\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "QualiMap"
        ],
        "tools_url": [
            "https://bio.tools/qualimap"
        ],
        "tools_dico": [
            {
                "name": "QualiMap",
                "uri": "https://bio.tools/qualimap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Platform-independent application written in Java and R that provides both a Graphical User Inteface (GUI) and a command-line interface to facilitate the quality control of alignment sequencing data.",
                "homepage": "http://qualimap.bioinfo.cipf.es/"
            }
        ],
        "inputs": [
            "bamForQualimap"
        ],
        "nb_inputs": 1,
        "outputs": [
            "qualimapReport"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {idPatient + \"-\" + idSample}",
            "publishDir \"${params.outDir}/Reports/Qualimap\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "RunSamtoolsStats": {
        "name_process": "RunSamtoolsStats",
        "string_process": "\nprocess RunSamtoolsStats {\n  tag {idPatient + \"-\" + idSample}\n\n  publishDir \"${params.outDir}/Reports/SamToolsStats\", mode: params.publishDirMode\n\n  input:\n  set idPatient, idSample, file(bam), file(bai) from bamForSamToolsStats\n\n  output:\n  file (\"${bam}.stats.txt\") into samtoolsStatsReport\n\n  script:\n  \"\"\" \\\n  samtools stats ${bam} > ${bam}.stats.txt \\\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\" \\\n  samtools stats ${bam} > ${bam}.stats.txt \\\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bamForSamToolsStats"
        ],
        "nb_inputs": 1,
        "outputs": [
            "samtoolsStatsReport"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {idPatient + \"-\" + idSample}",
            "publishDir \"${params.outDir}/Reports/SamToolsStats\", mode: params.publishDirMode"
        ],
        "when": "",
        "stub": ""
    },
    "RunHaplotypecaller": {
        "name_process": "RunHaplotypecaller",
        "string_process": "\nprocess RunHaplotypecaller {\n  tag {idSample + \"-haplotypecaller-\" + intervalBed.baseName}\n\n  input:\n  set idSample, file(bam), file(bai), file(intervalBed) from bamsForHC\n  set file(genomeFasta), file(genomeIndex), file(genomeDict), file(dbsnp), file(dbsnpIndex) from Channel.value([\n    genomeFasta,\n    genomeIndex,\n    genomeDict,\n    dbsnp,\n    dbsnpIndex\n  ])\n\n  output:\n  set val(\"haplotypecaller\"), idSample, file(\"*.vcf.gz\"), file(\"*.vcf.gz.tbi\") into hcOutput\n\n  when: !params.strelkaOnly && !params.onlyQC\n\n  script:\n  outFile = \"${idSample}-interval_${intervalBed.baseName}.vcf.gz\"\n  \"\"\"\n  gatk --java-options \"-Xms6g -Xmx${task.memory.toGiga()}g -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10\" \\\n  HaplotypeCaller \\\n  -R ${genomeFasta} \\\n  -I ${bam} \\\n  -L ${intervalBed} \\\n  -D ${dbsnp} \\\n  -O ${outputFile} \\\n  --annotation MappingQualityRankSumTest \\\n  --annotation MappingQualityZero \\\n  --annotation QualByDepth \\\n  --annotation ReadPosRankSumTest \\\n  --annotation RMSMappingQuality \\\n  --annotation BaseQualityRankSumTest \\\n  --annotation FisherStrand \\\n  --annotation MappingQuality \\\n  --annotation DepthPerAlleleBySample \\\n  --annotation Coverage \\\n  --annotation ClippingRankSumTest \\\n  --annotation DepthPerSampleHC \\\n  --interval-set-rule INTERSECTION \\\n  --native-pair-hmm-threads 1 \\\n  \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "  outFile = \"${idSample}-interval_${intervalBed.baseName}.vcf.gz\"\n  \"\"\"\n  gatk --java-options \"-Xms6g -Xmx${task.memory.toGiga()}g -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10\" \\\n  HaplotypeCaller \\\n  -R ${genomeFasta} \\\n  -I ${bam} \\\n  -L ${intervalBed} \\\n  -D ${dbsnp} \\\n  -O ${outputFile} \\\n  --annotation MappingQualityRankSumTest \\\n  --annotation MappingQualityZero \\\n  --annotation QualByDepth \\\n  --annotation ReadPosRankSumTest \\\n  --annotation RMSMappingQuality \\\n  --annotation BaseQualityRankSumTest \\\n  --annotation FisherStrand \\\n  --annotation MappingQuality \\\n  --annotation DepthPerAlleleBySample \\\n  --annotation Coverage \\\n  --annotation ClippingRankSumTest \\\n  --annotation DepthPerSampleHC \\\n  --interval-set-rule INTERSECTION \\\n  --native-pair-hmm-threads 1 \\\n  \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "bamsForHC"
        ],
        "nb_inputs": 1,
        "outputs": [
            "hcOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {idSample + \"-haplotypecaller-\" + intervalBed.baseName}"
        ],
        "when": "",
        "stub": ""
    },
    "RunVarDictGermline": {
        "name_process": "RunVarDictGermline",
        "string_process": "\nprocess RunVarDictGermline {\n  tag {idSample + \"-vardict-germline\" + intervalBed.baseName}\n\n  input:\n  set idSample, file(bam), file(bai), file(intervalBed) from bamsForVardict\n  set file(genomeFasta), file(genomeIndex), file(genomeDict) from Channel.value([\n      genomeFasta,\n      genomeIndex,\n      genomeDict\n  ])\n\n  output:\n  set val(\"vardict\"), idSample, file(\"*.vcf.gz\"), file(\"*.vcf.gz.tbi\") into vardictOutput\n\n  when: !params.strelkaOnly && !params.onlyQC\n\n  script:\n  tmpDir = file(\"tmp\").mkdir()\n  outFile = \"${idSample}-interval_${intervalBed.baseName}.vcf.gz\"\n  \"\"\"\n  unset JAVA_HOME && \\\n  export VAR_DICT_OPTS='-Xms750m -Xmx${task.memory.toGiga()}g -XX:+UseSerialGC -Djava.io.tmpdir=${tmpDir}' && \\\n  vardict-java -G ${genomeFasta} \\\n  -N ${idSample} \\\n  -b ${bam} \\\n  -c 1 -S 2 -E 3 -g 4 --nosv --deldupvar -Q 10 -F 0x700 -f 0.1 \\\n  ${intervalBed} \\\n  | teststrandbias.R \\\n  | var2vcf_valid.pl -A -N ${idSample} -E -f 0.1\n  | bcftools filter -i 'QUAL >= 0' \\\n  | bcftools filter --soft-filter 'LowFreqBias' --mode '+' -e 'FORMAT/AF[0] < 0.02 && FORMAT/VD[0] < 30 \\\n  && INFO/SBF < 0.1 && INFO/NM >= 2.0' \\\n  | awk -F\\$'\\t' -v OFS='\\t' '{if (\\$0 !~ /^#/) gsub(/[KMRYSWBVHDXkmryswbvhdx]/, \"N\", \\$4) } {print}' \\\n  | awk -F\\$'\\t' -v OFS='\\t' '{if (\\$0 !~ /^#/) gsub(/[KMRYSWBVHDXkmryswbvhdx]/, \"N\", \\$5) } {print}' \\\n  | awk -F\\$'\\t' -v OFS='\\t' '\\$1!~/^#/ && \\$4 == \\$5 {next} {print}' \\\n  | vcfstreamsort \\\n  | bgzip -c > ${outFile} && tabix -p vcf ${outFile} \\\n  \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "  tmpDir = file(\"tmp\").mkdir()\n  outFile = \"${idSample}-interval_${intervalBed.baseName}.vcf.gz\"\n  \"\"\"\n  unset JAVA_HOME && \\\n  export VAR_DICT_OPTS='-Xms750m -Xmx${task.memory.toGiga()}g -XX:+UseSerialGC -Djava.io.tmpdir=${tmpDir}' && \\\n  vardict-java -G ${genomeFasta} \\\n  -N ${idSample} \\\n  -b ${bam} \\\n  -c 1 -S 2 -E 3 -g 4 --nosv --deldupvar -Q 10 -F 0x700 -f 0.1 \\\n  ${intervalBed} \\\n  | teststrandbias.R \\\n  | var2vcf_valid.pl -A -N ${idSample} -E -f 0.1\n  | bcftools filter -i 'QUAL >= 0' \\\n  | bcftools filter --soft-filter 'LowFreqBias' --mode '+' -e 'FORMAT/AF[0] < 0.02 && FORMAT/VD[0] < 30 \\\n  && INFO/SBF < 0.1 && INFO/NM >= 2.0' \\\n  | awk -F\\$'\\t' -v OFS='\\t' '{if (\\$0 !~ /^#/) gsub(/[KMRYSWBVHDXkmryswbvhdx]/, \"N\", \\$4) } {print}' \\\n  | awk -F\\$'\\t' -v OFS='\\t' '{if (\\$0 !~ /^#/) gsub(/[KMRYSWBVHDXkmryswbvhdx]/, \"N\", \\$5) } {print}' \\\n  | awk -F\\$'\\t' -v OFS='\\t' '\\$1!~/^#/ && \\$4 == \\$5 {next} {print}' \\\n  | vcfstreamsort \\\n  | bgzip -c > ${outFile} && tabix -p vcf ${outFile} \\\n  \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bamsForVardict"
        ],
        "nb_inputs": 1,
        "outputs": [
            "vardictOutput"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {idSample + \"-vardict-germline\" + intervalBed.baseName}"
        ],
        "when": "",
        "stub": ""
    },
    "RunConpairPileup": {
        "name_process": "RunConpairPileup",
        "string_process": "\nprocess RunConpairPileup {\n  tag {sample}\n\n  input:\n  set sample, status, patient, file(bam), file(bai) from readyBams\n  set file(genomeFasta), file(genomeIndex), file(genomeDict) from Channel.value([genomeFasta, genomeIndex, genomeDict])\n\n  output:\n  set sample, status, patient, file('*.pileup') into conpairPileup\n\n  script:\n  def idxCmd = \"\"\n  if (bai.name  == \"null\")\n    idxCmd = \"samtools index ${bam}\"\n  \"\"\"\n  ${idxCmd}\n  run_gatk_pileup_for_sample.py \\\n  -B ${bam} \\\n  -O ${sample}.pileup \\\n  -g ${params.genome} \\\n  --reference ${genomeFasta}\\\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  def idxCmd = \"\"\n  if (bai.name  == \"null\")\n    idxCmd = \"samtools index ${bam}\"\n  \"\"\"\n  ${idxCmd}\n  run_gatk_pileup_for_sample.py \\\n  -B ${bam} \\\n  -O ${sample}.pileup \\\n  -g ${params.genome} \\\n  --reference ${genomeFasta}\\\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "readyBams"
        ],
        "nb_inputs": 1,
        "outputs": [
            "conpairPileup"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {sample}"
        ],
        "when": "",
        "stub": ""
    },
    "RunConcordance": {
        "name_process": "RunConcordance",
        "string_process": "\nprocess RunConcordance {\n  tag {patient}\n\n  publishDir \"${params.outDir}/concordance\"\n\n  input:\n  set patient, nSample, nPileup, tSample, tPileup from patientsConcordance\n\n  output:\n  set patient, file('*.txt') into concordance\n\n  script:\n  \"\"\"\n  verify_concordance.py \\\n   -T ${tPileup} \\\n   -N ${nPileup} \\\n   -g ${params.genome} \\\n   -O ${patient}.txt \\\n   -H \\\n   -C 0\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  verify_concordance.py \\\n   -T ${tPileup} \\\n   -N ${nPileup} \\\n   -g ${params.genome} \\\n   -O ${patient}.txt \\\n   -H \\\n   -C 0\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "patientsConcordance"
        ],
        "nb_inputs": 1,
        "outputs": [
            "concordance"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {patient}",
            "publishDir \"${params.outDir}/concordance\""
        ],
        "when": "",
        "stub": ""
    },
    "RunContamination": {
        "name_process": "RunContamination",
        "string_process": "\nprocess RunContamination {\n  tag {patient}\n\n  publishDir \"${params.outDir}/contamination\"\n\n  input:\n  set patient, nSample, nPileup, tSample, tPileup from patientsContamination\n\n  output:\n  set patient, file('*_normal_cont.txt'), file('*_tumour_cont.txt') into contamination\n\n  script:\n  \"\"\"\n  estimate_tumor_normal_contamination.py \\\n   -T ${tPileup} \\\n   -N ${nPileup} \\\n   -g ${params.genome} \\\n   | tee \\\n   >(grep Tumor | sed 's/Tumor sample/Sample/' > ${tSample}_normal_cont.txt) \\\n   | grep Normal | sed 's/Normal sample/Sample/' > ${nSample}_tumour_cont.txt\n\"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  estimate_tumor_normal_contamination.py \\\n   -T ${tPileup} \\\n   -N ${nPileup} \\\n   -g ${params.genome} \\\n   | tee \\\n   >(grep Tumor | sed 's/Tumor sample/Sample/' > ${tSample}_normal_cont.txt) \\\n   | grep Normal | sed 's/Normal sample/Sample/' > ${nSample}_tumour_cont.txt\n\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "patientsContamination"
        ],
        "nb_inputs": 1,
        "outputs": [
            "contamination"
        ],
        "nb_outputs": 1,
        "name_workflow": "vladsaveliev__cawdor",
        "directive": [
            "tag {patient}",
            "publishDir \"${params.outDir}/contamination\""
        ],
        "when": "",
        "stub": ""
    }
}
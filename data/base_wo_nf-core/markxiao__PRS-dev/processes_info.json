{
    "base_qc_file_transfer": {
        "name_process": "base_qc_file_transfer",
        "string_process": "\nprocess base_qc_file_transfer {\n    \n    publishDir \"${params.outdir}/md5sum_results\", mode: 'copy'\n\n    input:\n    file base_data\n\n    output:\n    file(\"base_data_md5sum\") into base_qc_file_transfer_output\n\n    \"\"\"\n    md5sum $base_data > base_data_md5sum\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    md5sum $base_data > base_data_md5sum\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base_data"
        ],
        "nb_inputs": 1,
        "outputs": [
            "base_qc_file_transfer_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/md5sum_results\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "base_qc_standard_gwas_qc": {
        "name_process": "base_qc_standard_gwas_qc",
        "string_process": "\nprocess base_qc_standard_gwas_qc {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    file base_data\n\n    output:\n    file('base_qc_standard_gwas_qc_output.gz') into base_qc_standard_gwas_qc_output\n\n    shell:\n    '''\n    gunzip -c !{base_data} |\\\n    awk 'NR==1 || ($11 > 0.01) && ($10 > 0.8) {print}' |\\\n    gzip  > base_qc_standard_gwas_qc_output.gz\n    '''\n}",
        "nb_lignes_process": 16,
        "string_script": "    '''\n    gunzip -c !{base_data} |\\\n    awk 'NR==1 || ($11 > 0.01) && ($10 > 0.8) {print}' |\\\n    gzip  > base_qc_standard_gwas_qc_output.gz\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base_data"
        ],
        "nb_inputs": 1,
        "outputs": [
            "base_qc_standard_gwas_qc_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "base_qc_duplicate_snps_get_dup": {
        "name_process": "base_qc_duplicate_snps_get_dup",
        "string_process": "\nprocess base_qc_duplicate_snps_get_dup {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    file base_qc_standard_gwas_qc_output\n\n    output:\n    file('base_qc_duplicate_snps.snp') into base_qc_duplicate_snps_get_dup_output\n\n    shell:\n    '''\n    gunzip -c !{base_qc_standard_gwas_qc_output} |\\\n    awk '{ print $3}' |\\\n    sort |\\\n    uniq -d > base_qc_duplicate_snps.snp\n    '''\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    gunzip -c !{base_qc_standard_gwas_qc_output} |\\\n    awk '{ print $3}' |\\\n    sort |\\\n    uniq -d > base_qc_duplicate_snps.snp\n    '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base_qc_standard_gwas_qc_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "base_qc_duplicate_snps_get_dup_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "base_qc_duplicate_snps_remove_dup": {
        "name_process": "base_qc_duplicate_snps_remove_dup",
        "string_process": "\nprocess base_qc_duplicate_snps_remove_dup {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    file base_qc_standard_gwas_qc_output\n    file base_qc_duplicate_snps_get_dup_output\n\n    output:\n    file('base_qc_remove_dup_output.nodup.gz') into base_qc_duplicate_snps_remove_dup_output\n\n    shell:\n    '''\n    gunzip -c !{base_qc_standard_gwas_qc_output}  |\\\n    grep -vf !{base_qc_duplicate_snps_get_dup_output} |\\\n    gzip - > base_qc_remove_dup_output.nodup.gz\n    '''\n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    gunzip -c !{base_qc_standard_gwas_qc_output}  |\\\n    grep -vf !{base_qc_duplicate_snps_get_dup_output} |\\\n    gzip - > base_qc_remove_dup_output.nodup.gz\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base_qc_standard_gwas_qc_output",
            "base_qc_duplicate_snps_get_dup_output"
        ],
        "nb_inputs": 2,
        "outputs": [
            "base_qc_duplicate_snps_remove_dup_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "base_qc_ambiguous_snps": {
        "name_process": "base_qc_ambiguous_snps",
        "string_process": "\nprocess base_qc_ambiguous_snps {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    file base_qc_duplicate_snps_remove_dup_output\n\n    output:\n    file('base_qc_output.QC.gz') into base_qc_final_output\n\n    shell:\n    '''\n    gunzip -c !{base_qc_duplicate_snps_remove_dup_output} |\\\n    awk '!( ($4==\"A\" && $5==\"T\") || \\\n            ($4==\"T\" && $5==\"A\") || \\\n            ($4==\"G\" && $5==\"C\") || \\\n            ($4==\"C\" && $5==\"G\")) {print}' |\\\n        gzip > base_qc_output.QC.gz\n    '''\n}",
        "nb_lignes_process": 19,
        "string_script": "    '''\n    gunzip -c !{base_qc_duplicate_snps_remove_dup_output} |\\\n    awk '!( ($4==\"A\" && $5==\"T\") || \\\n            ($4==\"T\" && $5==\"A\") || \\\n            ($4==\"G\" && $5==\"C\") || \\\n            ($4==\"C\" && $5==\"G\")) {print}' |\\\n        gzip > base_qc_output.QC.gz\n    '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base_qc_duplicate_snps_remove_dup_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "base_qc_final_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "target_qc_file_transfer": {
        "name_process": "target_qc_file_transfer",
        "string_process": "\nprocess target_qc_file_transfer {\n\n    publishDir \"${params.outdir}/md5sum_results\", mode: 'copy'\n\n    input:\n    tuple prefix, file(bed), file(bim), file(cov), file(fam), file(height) from target_data.copy1\n\n    output:\n    file(\"${prefix}_target_data_md5sum\") into target_qc_file_transfer_output\n\n    \"\"\"\n    md5sum $bed >> ${prefix}_target_data_md5sum\n    md5sum $bim >> ${prefix}_target_data_md5sum\n    md5sum $cov >> ${prefix}_target_data_md5sum\n    md5sum $fam >> ${prefix}_target_data_md5sum\n    md5sum $height >> ${prefix}_target_data_md5sum\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    md5sum $bed >> ${prefix}_target_data_md5sum\n    md5sum $bim >> ${prefix}_target_data_md5sum\n    md5sum $cov >> ${prefix}_target_data_md5sum\n    md5sum $fam >> ${prefix}_target_data_md5sum\n    md5sum $height >> ${prefix}_target_data_md5sum\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "target_data"
        ],
        "nb_inputs": 1,
        "outputs": [
            "target_qc_file_transfer_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/md5sum_results\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "target_qc_standard_gwas_qc_1": {
        "name_process": "target_qc_standard_gwas_qc_1",
        "string_process": "\nprocess target_qc_standard_gwas_qc_1 {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    tuple prefix, file(bed), file(bim), file(cov), file(fam), file(height) from target_data.copy2\n\n    output:\n    tuple val(\"${prefix}\"), file(\"${prefix_qc}.irem\"), file(\"${prefix_qc}.hh\"), file(\"${prefix_qc}.snplist\"), \\\n    file(\"${prefix_qc}.fam\"), file(\"${prefix_qc}.prune.in\"), file(\"${prefix_qc}.prune.out\"), \\\n    file(\"${prefix_qc}.het\") into target_qc_standard_gwas_qc_1_output\n\n    script:\n    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    plink --bfile ${prefix} --maf 0.01 --hwe 1e-6 --geno 0.01 --mind 0.01 --write-snplist --make-just-fam --out ${prefix_qc}\n    mkdir -p ${params.outdir}/logs\n    if test -f \"${prefix_qc}.log\";\n        then mv ${prefix_qc}.log ${params.outdir}/logs/${prefix_qc}.log.1\n    fi\n\n    plink --bfile ${prefix} --keep ${prefix_qc}.fam --extract ${prefix_qc}.snplist --indep-pairwise 200 50 0.25 --out ${prefix_qc}\n    if test -f \"${prefix_qc}.log\";\n        then mv ${prefix_qc}.log ${params.outdir}/logs/${prefix_qc}.log.2\n    fi\n\n    plink --bfile ${prefix} --extract ${prefix_qc}.prune.in --keep ${prefix_qc}.fam --het --out ${prefix_qc}\n    if test -f \"${prefix_qc}.log\";\n        then mv ${prefix_qc}.log ${params.outdir}/logs/${prefix_qc}.log.3\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    plink --bfile ${prefix} --maf 0.01 --hwe 1e-6 --geno 0.01 --mind 0.01 --write-snplist --make-just-fam --out ${prefix_qc}\n    mkdir -p ${params.outdir}/logs\n    if test -f \"${prefix_qc}.log\";\n        then mv ${prefix_qc}.log ${params.outdir}/logs/${prefix_qc}.log.1\n    fi\n\n    plink --bfile ${prefix} --keep ${prefix_qc}.fam --extract ${prefix_qc}.snplist --indep-pairwise 200 50 0.25 --out ${prefix_qc}\n    if test -f \"${prefix_qc}.log\";\n        then mv ${prefix_qc}.log ${params.outdir}/logs/${prefix_qc}.log.2\n    fi\n\n    plink --bfile ${prefix} --extract ${prefix_qc}.prune.in --keep ${prefix_qc}.fam --het --out ${prefix_qc}\n    if test -f \"${prefix_qc}.log\";\n        then mv ${prefix_qc}.log ${params.outdir}/logs/${prefix_qc}.log.3\n    fi\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "target_data"
        ],
        "nb_inputs": 1,
        "outputs": [
            "target_qc_standard_gwas_qc_1_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "target_qc_standard_gwas_qc_2": {
        "name_process": "target_qc_standard_gwas_qc_2",
        "string_process": "\nprocess target_qc_standard_gwas_qc_2 {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    tuple prefix, file(irem), file(hh), file(snplist), file(fam1), file(prune_in), file(prune_out), file(het) from target_qc_standard_gwas_qc_1_output_copy1\n\n    output:\n    file(\"${prefix}.valid.sample\") into target_qc_standard_gwas_qc_2_output\n\n    script:\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    dat <- read.table(\"${het}\", header=T) # Read in the EUR.het file, specify it has header\n    m <- mean(dat\\$F) # Calculate the mean  \n    s <- sd(dat\\$F) # Calculate the SD\n    valid <- subset(dat, F <= m+3*s & F >= m-3*s) # Get any samples with F coefficient within 3 SD of the population mean\n    write.table(valid[,c(1,2)], \"${prefix}.valid.sample\", quote=F, row.names=F) # print FID and IID for valid samples\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    #!/usr/bin/env Rscript\n\n    dat <- read.table(\"${het}\", header=T) # Read in the EUR.het file, specify it has header\n    m <- mean(dat\\$F) # Calculate the mean  \n    s <- sd(dat\\$F) # Calculate the SD\n    valid <- subset(dat, F <= m+3*s & F >= m-3*s) # Get any samples with F coefficient within 3 SD of the population mean\n    write.table(valid[,c(1,2)], \"${prefix}.valid.sample\", quote=F, row.names=F) # print FID and IID for valid samples\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "target_qc_standard_gwas_qc_1_output_copy1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "target_qc_standard_gwas_qc_2_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "target_qc_mismatching_snps": {
        "name_process": "target_qc_mismatching_snps",
        "string_process": "\nprocess target_qc_mismatching_snps {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    tuple prefix, file(bed), file(bim), file(cov), file(fam), file(height) from target_data.copy3\n    tuple _tmp, file(irem), file(hh), file(snplist), file(fam1), file(prune_in), file(prune_out), file(het) from target_qc_standard_gwas_qc_1_output_copy2\n    file base_qc_final from base_qc_final_output\n\n    output:\n    tuple file(\"${prefix}.a1\"), file(\"${prefix}.mismatch\") into target_qc_mismatching_snps_output\n\n    script:\n    \"\"\"\n    R --file=${bin}/target_qc_mismatching_snps.R --args ${bim} ${snplist} ${base_qc_final} ${prefix}.a1 ${prefix}.mismatch\n    \"\"\"  \n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    R --file=${bin}/target_qc_mismatching_snps.R --args ${bim} ${snplist} ${base_qc_final} ${prefix}.a1 ${prefix}.mismatch\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "target_data",
            "target_qc_standard_gwas_qc_1_output_copy2",
            "base_qc_final_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "target_qc_mismatching_snps_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "target_qc_sex_check": {
        "name_process": "target_qc_sex_check",
        "string_process": "\nprocess target_qc_sex_check {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    tuple prefix, file(bed), file(bim), file(cov), file(fam), file(height) from target_data.copy4\n    tuple _tmp, file(irem), file(hh), file(snplist), file(fam1), file(prune_in), file(prune_out), file(het) from target_qc_standard_gwas_qc_1_output_copy3\n    file valid_sample from target_qc_standard_gwas_qc_2_output\n\n    output:\n    tuple file(\"${prefix_qc}.sexcheck\"), file(\"${prefix_qc}.valid\"), file(\"${prefix_qc}.hh\") into target_qc_sex_check_output\n\n    script:\n    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    plink --bfile ${prefix} --extract ${prune_in} --keep ${valid_sample} --check-sex --out ${prefix_qc}\n    if test -f \"${prefix_qc}.log\";\n        then mv ${prefix_qc}.log ${params.outdir}/logs/${prefix_qc}.log.4\n    fi\n\n    R --file=${bin}/target_qc_sex_check.R --args ${valid_sample} ${prefix_qc}.sexcheck ${prefix_qc}.valid\n    \"\"\"  \n}",
        "nb_lignes_process": 22,
        "string_script": "    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    plink --bfile ${prefix} --extract ${prune_in} --keep ${valid_sample} --check-sex --out ${prefix_qc}\n    if test -f \"${prefix_qc}.log\";\n        then mv ${prefix_qc}.log ${params.outdir}/logs/${prefix_qc}.log.4\n    fi\n\n    R --file=${bin}/target_qc_sex_check.R --args ${valid_sample} ${prefix_qc}.sexcheck ${prefix_qc}.valid\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "target_data",
            "target_qc_standard_gwas_qc_1_output_copy3",
            "target_qc_standard_gwas_qc_2_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "target_qc_sex_check_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "target_qc_relatedness": {
        "name_process": "target_qc_relatedness",
        "string_process": "\nprocess target_qc_relatedness {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    tuple prefix, file(bed), file(bim), file(cov), file(fam), file(height) from target_data.copy5\n    tuple _tmp, file(irem), file(hh), file(snplist), file(fam1), file(prune_in), file(prune_out), file(het) from target_qc_standard_gwas_qc_1_output_copy4\n    tuple file(sexcheck), file(valid), file(\"tmp_hh\") from target_qc_sex_check_output\n\n    output:\n    file(\"${prefix_qc}.rel.id\") into target_qc_relatedness_output\n\n    script:\n    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    plink --bfile ${prefix} --extract ${prune_in} --keep ${valid} --rel-cutoff 0.125 --out ${prefix_qc}\n    if test -f \"${prefix_qc}.log\";\n        then mv ${prefix_qc}.log ${params.outdir}/logs/${prefix_qc}.log.5\n    fi\n    \"\"\"  \n}",
        "nb_lignes_process": 20,
        "string_script": "    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    plink --bfile ${prefix} --extract ${prune_in} --keep ${valid} --rel-cutoff 0.125 --out ${prefix_qc}\n    if test -f \"${prefix_qc}.log\";\n        then mv ${prefix_qc}.log ${params.outdir}/logs/${prefix_qc}.log.5\n    fi\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "target_data",
            "target_qc_standard_gwas_qc_1_output_copy4",
            "target_qc_sex_check_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "target_qc_relatedness_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "target_qc_final": {
        "name_process": "target_qc_final",
        "string_process": "\nprocess target_qc_final {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    tuple prefix, file(bed), file(bim), file(cov), file(fam), file(height) from target_data.copy6\n    tuple _tmp, file(irem), file(hh), file(snplist), file(fam1), file(prune_in), file(prune_out), file(het) from target_qc_standard_gwas_qc_1_output_copy5\n    tuple file(a1), file(mismatch) from target_qc_mismatching_snps_output\n    file rel_id from target_qc_relatedness_output\n\n    output:\n    tuple val(\"${prefix}\"), file(\"${prefix_qc}.fam\"), file(\"${prefix_qc}.bed\"), file(\"${prefix_qc}.bim\") into target_qc_final_output\n\n    script:\n    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    plink --bfile ${prefix} --make-bed --keep ${rel_id} --out ${prefix_qc} --extract ${snplist} --exclude ${mismatch} --a1-allele ${a1}\n    if test -f \"${prefix_qc}.log\";\n        then mv ${prefix_qc}.log ${params.outdir}/logs/${prefix_qc}.log.6\n    fi\n    \"\"\"  \n}",
        "nb_lignes_process": 21,
        "string_script": "    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    plink --bfile ${prefix} --make-bed --keep ${rel_id} --out ${prefix_qc} --extract ${snplist} --exclude ${mismatch} --a1-allele ${a1}\n    if test -f \"${prefix_qc}.log\";\n        then mv ${prefix_qc}.log ${params.outdir}/logs/${prefix_qc}.log.6\n    fi\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "target_data",
            "target_qc_standard_gwas_qc_1_output_copy5",
            "target_qc_mismatching_snps_output",
            "target_qc_relatedness_output"
        ],
        "nb_inputs": 4,
        "outputs": [
            "target_qc_final_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "plink_update_effect_size": {
        "name_process": "plink_update_effect_size",
        "string_process": "\nprocess plink_update_effect_size {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    file base_qc_final from base_qc_final_output\n\n    output:\n    file(\"${output_file}\") into plink_update_effect_size_output\n\n    script:\n    base = base_qc_final.baseName\n    output_file = \"${base}.Transformed\"\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    dat <- read.table(gzfile(\"${base_qc_final}\"), header=T)\n    dat\\$BETA <- log(dat\\$OR)\n    write.table(dat, \"${output_file}\", quote=F, row.names=F)\n    \"\"\"  \n}",
        "nb_lignes_process": 20,
        "string_script": "    base = base_qc_final.baseName\n    output_file = \"${base}.Transformed\"\n    \"\"\"\n    #!/usr/bin/env Rscript\n\n    dat <- read.table(gzfile(\"${base_qc_final}\"), header=T)\n    dat\\$BETA <- log(dat\\$OR)\n    write.table(dat, \"${output_file}\", quote=F, row.names=F)\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "base_qc_final_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "plink_update_effect_size_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "plink_clumping": {
        "name_process": "plink_clumping",
        "string_process": "\nprocess plink_clumping {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    tuple prefix, file(fam), file(bed), file(bim) from target_qc_final_output_copy1\n    file transformed from plink_update_effect_size_output\n\n\n    output:\n    tuple file(\"${prefix}.clumped\"), file(\"${prefix}.valid.snp\") into plink_clumping_output\n\n    script:\n    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    plink --bfile ${prefix_qc} --clump-p1 1 --clump-r2 0.1 --clump-kb 250 --clump ${transformed} --clump-snp-field SNP --clump-field P --out ${prefix}\n    if test -f \"${prefix}.log\";\n        then mv ${prefix}.log ${params.outdir}/logs/${prefix}.log.7\n    fi\n    awk 'NR!=1{print \\$3}' ${prefix}.clumped >  ${prefix}.valid.snp\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    plink --bfile ${prefix_qc} --clump-p1 1 --clump-r2 0.1 --clump-kb 250 --clump ${transformed} --clump-snp-field SNP --clump-field P --out ${prefix}\n    if test -f \"${prefix}.log\";\n        then mv ${prefix}.log ${params.outdir}/logs/${prefix}.log.7\n    fi\n    awk 'NR!=1{print \\$3}' ${prefix}.clumped >  ${prefix}.valid.snp\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "target_qc_final_output_copy1",
            "plink_update_effect_size_output"
        ],
        "nb_inputs": 2,
        "outputs": [
            "plink_clumping_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "plink_generate_prs": {
        "name_process": "plink_generate_prs",
        "string_process": "\nprocess plink_generate_prs {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    tuple prefix, file(fam), file(bed), file(bim) from target_qc_final_output_copy2\n    tuple file(clumped), file(valid_snp) from plink_clumping_output\n    file transformed from plink_update_effect_size_output\n\n    output:\n    tuple file(\"${prefix}.0.5.profile\"), file(\"${prefix}.0.4.profile\"), file(\"${prefix}.0.3.profile\"), file(\"${prefix}.0.2.profile\"), file(\"${prefix}.0.1.profile\"), file(\"${prefix}.0.05.profile\"), file(\"${prefix}.0.001.profile\") into plink_generate_prs_output\n\n    script:\n    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    awk '{print \\$3,\\$8}' ${transformed} > SNP.pvalue\n    echo \"0.001 0 0.001\" > range_list \n    echo \"0.05 0 0.05\" >> range_list\n    echo \"0.1 0 0.1\" >> range_list\n    echo \"0.2 0 0.2\" >> range_list\n    echo \"0.3 0 0.3\" >> range_list\n    echo \"0.4 0 0.4\" >> range_list\n    echo \"0.5 0 0.5\" >> range_list\n    plink --bfile ${prefix_qc} --score ${transformed} 3 4 12 header --q-score-range range_list SNP.pvalue --extract ${valid_snp} --out ${prefix}\n    if test -f \"${prefix}.log\";\n        then mv ${prefix}.log ${params.outdir}/logs/${prefix}.log.8\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    awk '{print \\$3,\\$8}' ${transformed} > SNP.pvalue\n    echo \"0.001 0 0.001\" > range_list \n    echo \"0.05 0 0.05\" >> range_list\n    echo \"0.1 0 0.1\" >> range_list\n    echo \"0.2 0 0.2\" >> range_list\n    echo \"0.3 0 0.3\" >> range_list\n    echo \"0.4 0 0.4\" >> range_list\n    echo \"0.5 0 0.5\" >> range_list\n    plink --bfile ${prefix_qc} --score ${transformed} 3 4 12 header --q-score-range range_list SNP.pvalue --extract ${valid_snp} --out ${prefix}\n    if test -f \"${prefix}.log\";\n        then mv ${prefix}.log ${params.outdir}/logs/${prefix}.log.8\n    fi\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "target_qc_final_output_copy2",
            "plink_clumping_output",
            "plink_update_effect_size_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "plink_generate_prs_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "plink_accounting_for_population_stratification": {
        "name_process": "plink_accounting_for_population_stratification",
        "string_process": "\nprocess plink_accounting_for_population_stratification {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    tuple prefix, file(fam), file(bed), file(bim) from target_qc_final_output_copy3\n\n    output:\n    tuple file(\"${prefix}.prune.in\"), file(\"${prefix}.prune.out\"), file(\"${prefix}.eigenvec\"), file(\"${prefix}.eigenval\") into plink_accounting_for_population_stratification_output\n\n    script:\n    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    # First, we need to perform prunning\n    plink --bfile ${prefix_qc} --indep-pairwise 200 50 0.25 --out ${prefix}\n    if test -f \"${prefix}.log\";\n        then mv ${prefix}.log ${params.outdir}/logs/${prefix}.log.9\n    fi\n\n    # Then we calculate the first 6 PCs\n    plink --bfile ${prefix_qc} --extract ${prefix}.prune.in --pca 6 --out ${prefix}\n    if test -f \"${prefix}.log\";\n        then mv ${prefix}.log ${params.outdir}/logs/${prefix}.log.10\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    # First, we need to perform prunning\n    plink --bfile ${prefix_qc} --indep-pairwise 200 50 0.25 --out ${prefix}\n    if test -f \"${prefix}.log\";\n        then mv ${prefix}.log ${params.outdir}/logs/${prefix}.log.9\n    fi\n\n    # Then we calculate the first 6 PCs\n    plink --bfile ${prefix_qc} --extract ${prefix}.prune.in --pca 6 --out ${prefix}\n    if test -f \"${prefix}.log\";\n        then mv ${prefix}.log ${params.outdir}/logs/${prefix}.log.10\n    fi\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "target_qc_final_output_copy3"
        ],
        "nb_inputs": 1,
        "outputs": [
            "plink_accounting_for_population_stratification_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "plink_finding_the_best_fit_prs": {
        "name_process": "plink_finding_the_best_fit_prs",
        "string_process": "\nprocess plink_finding_the_best_fit_prs {\n\n    publishDir \"${params.outdir}/PRS_plink_results\", mode: 'copy'\n\n    input:\n    tuple prefix, file(bed), file(bim), file(cov), file(fam), file(height) from target_data.copy7\n    tuple file(prune_in), file(prune_out), file(eigenvec), file(eigenval) from plink_accounting_for_population_stratification_output_copy1\n    tuple file(profile1), file(profile2), file(profile3), file(profile4), file(profile5), file(profile6), file(profile7) from plink_generate_prs_output\n\n    output:\n    file(\"${prefix}_plink_result\") into plink_finding_the_best_fit_prs_output\n\n    script:\n    \"\"\"\n    R --file=${bin}/regression_between_prs.R --args ${height} ${eigenvec} ${cov} ${prefix} > ${prefix}_plink_result\n    \"\"\"  \n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    R --file=${bin}/regression_between_prs.R --args ${height} ${eigenvec} ${cov} ${prefix} > ${prefix}_plink_result\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "target_data",
            "plink_accounting_for_population_stratification_output_copy1",
            "plink_generate_prs_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "plink_finding_the_best_fit_prs_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/PRS_plink_results\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "PRSice_analysis": {
        "name_process": "PRSice_analysis",
        "string_process": "\nprocess PRSice_analysis {\n\n    publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'\n\n    input:\n    tuple prefix, file(bed), file(bim), file(cov), file(fam), file(height) from target_data.copy8\n    tuple file(prune_in), file(prune_out), file(eigenvec), file(eigenval) from plink_accounting_for_population_stratification_output_copy2\n    file base_qc_final from base_qc_final_output\n    tuple _tmp, file(fam1), file(bed1), file(bim1) from target_qc_final_output_copy4\n\n    output:\n    file(\"${prefix}.covariate\") into prsice_analysis_output\n\n    script:\n    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    R --file=${bin}/create_covariate.R --args ${cov} ${eigenvec} ${prefix}.covariate\n\n    Rscript ${params.PRSice}/PRSice.R \\\n    --prsice ${params.PRSice}/PRSice_linux \\\n    --base ${base_qc_final} \\\n    --target ${prefix_qc} \\\n    --binary-target F \\\n    --pheno ${height} \\\n    --cov ${prefix}.covariate \\\n    --base-maf MAF:0.01 \\\n    --base-info INFO:0.8 \\\n    --stat OR \\\n    --or \\\n    --out ${prefix}\n\n    mkdir -p ${params.outdir}/PRSice_results\n    mv ${prefix}.summary ${params.outdir}/PRSice_results/\n    mv ${prefix}.prsice ${params.outdir}/PRSice_results/\n    mv ${prefix}.log ${params.outdir}/PRSice_results/\n    mv ${prefix}.best ${params.outdir}/PRSice_results/\n    mv ${prefix}*.png ${params.outdir}/PRSice_results/\n    \"\"\"  \n}",
        "nb_lignes_process": 38,
        "string_script": "    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    R --file=${bin}/create_covariate.R --args ${cov} ${eigenvec} ${prefix}.covariate\n\n    Rscript ${params.PRSice}/PRSice.R \\\n    --prsice ${params.PRSice}/PRSice_linux \\\n    --base ${base_qc_final} \\\n    --target ${prefix_qc} \\\n    --binary-target F \\\n    --pheno ${height} \\\n    --cov ${prefix}.covariate \\\n    --base-maf MAF:0.01 \\\n    --base-info INFO:0.8 \\\n    --stat OR \\\n    --or \\\n    --out ${prefix}\n\n    mkdir -p ${params.outdir}/PRSice_results\n    mv ${prefix}.summary ${params.outdir}/PRSice_results/\n    mv ${prefix}.prsice ${params.outdir}/PRSice_results/\n    mv ${prefix}.log ${params.outdir}/PRSice_results/\n    mv ${prefix}.best ${params.outdir}/PRSice_results/\n    mv ${prefix}*.png ${params.outdir}/PRSice_results/\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "target_data",
            "plink_accounting_for_population_stratification_output_copy2",
            "base_qc_final_output",
            "target_qc_final_output_copy4"
        ],
        "nb_inputs": 4,
        "outputs": [
            "prsice_analysis_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/intermediate_files\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "LDpred_2_analysis": {
        "name_process": "LDpred_2_analysis",
        "string_process": "\nprocess LDpred_2_analysis {\n\n    publishDir \"${params.outdir}/LDpred_2_results\", mode: 'copy'\n\n    input:\n    tuple prefix, file(bed), file(bim), file(cov), file(fam), file(height) from target_data.copy9\n    tuple file(prune_in), file(prune_out), file(eigenvec), file(eigenval) from plink_accounting_for_population_stratification_output_copy3\n    file base_qc_final from base_qc_final_output\n    tuple _tmp, file(fam1), file(bed1), file(bim1) from target_qc_final_output_copy5\n\n    output:\n    file(\"${prefix}_LDpred_2_result\") into LDpred_2_analysis_output\n\n    script:\n    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    R --file=${bin}/LDpred_2_analysis.R --args ${height} ${cov} ${eigenvec} ${bed1} ${prefix_qc}.rds ${base_qc_final} > ${prefix}_LDpred_2_result\n    \"\"\"  \n}",
        "nb_lignes_process": 18,
        "string_script": "    prefix_qc = \"${prefix}.QC\"\n    \"\"\"\n    R --file=${bin}/LDpred_2_analysis.R --args ${height} ${cov} ${eigenvec} ${bed1} ${prefix_qc}.rds ${base_qc_final} > ${prefix}_LDpred_2_result\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "target_data",
            "plink_accounting_for_population_stratification_output_copy3",
            "base_qc_final_output",
            "target_qc_final_output_copy5"
        ],
        "nb_inputs": 4,
        "outputs": [
            "LDpred_2_analysis_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [
            "publishDir \"${params.outdir}/LDpred_2_results\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "lassosum_analysis": {
        "name_process": "lassosum_analysis",
        "string_process": "\nprocess lassosum_analysis {\n\n    input:\n    tuple prefix, file(bed), file(bim), file(cov), file(fam), file(height) from target_data.copy10\n    tuple file(prune_in), file(prune_out), file(eigenvec), file(eigenval) from plink_accounting_for_population_stratification_output_copy4\n    file base_qc_final from base_qc_final_output\n    tuple _tmp, file(fam1), file(bed1), file(bim1) from target_qc_final_output_copy6\n\n    script:\n    prefix_qc = \"${prefix}.QC\"\n    ld_file = lassosum_prefix_to_ld_mapping[\"${prefix}\"]\n    \"\"\"\n    R --file=${bin}/lassosum_analysis.R --args ${height} ${cov} ${eigenvec} ${base_qc_final} ${prefix_qc} ${prefix} ${ld_file}\n\n    mkdir -p ${params.outdir}/lassosum_results\n    if test -f \"Rplots.pdf\";\n        then mv Rplots.pdf ${params.outdir}/lassosum_results/${prefix}.Rplots.pdf\n    fi\n    \"\"\"  \n}",
        "nb_lignes_process": 19,
        "string_script": "    prefix_qc = \"${prefix}.QC\"\n    ld_file = lassosum_prefix_to_ld_mapping[\"${prefix}\"]\n    \"\"\"\n    R --file=${bin}/lassosum_analysis.R --args ${height} ${cov} ${eigenvec} ${base_qc_final} ${prefix_qc} ${prefix} ${ld_file}\n\n    mkdir -p ${params.outdir}/lassosum_results\n    if test -f \"Rplots.pdf\";\n        then mv Rplots.pdf ${params.outdir}/lassosum_results/${prefix}.Rplots.pdf\n    fi\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "target_data",
            "plink_accounting_for_population_stratification_output_copy4",
            "base_qc_final_output",
            "target_qc_final_output_copy6"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "PRS_CS_step": {
        "name_process": "PRS_CS_step",
        "string_process": "\nprocess PRS_CS_step {\n\n    script:\n    \"\"\"\n    mkdir -p ${params.outdir}/PRS_CS_results\n\n    python3 ${params.prs_cs_script_dir}/PRScs.py --ref_dir=${params.prs_cs_ref_dir} --bim_prefix=${params.prs_cs_bim_prefix} --sst_file=${params.prs_cs_sst_file} --n_gwas=${params.prs_cs_n_gwas} --chrom=${params.prs_cs_chrom} --phi=1e-2 --out_dir=${params.outdir}/PRS_CS_results/\n    \"\"\"  \n}",
        "nb_lignes_process": 8,
        "string_script": "    \"\"\"\n    mkdir -p ${params.outdir}/PRS_CS_results\n\n    python3 ${params.prs_cs_script_dir}/PRScs.py --ref_dir=${params.prs_cs_ref_dir} --bim_prefix=${params.prs_cs_bim_prefix} --sst_file=${params.prs_cs_sst_file} --n_gwas=${params.prs_cs_n_gwas} --chrom=${params.prs_cs_chrom} --phi=1e-2 --out_dir=${params.outdir}/PRS_CS_results/\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "SBayesR_step": {
        "name_process": "SBayesR_step",
        "string_process": "\nprocess SBayesR_step {\n\n    script:\n    \"\"\"\n    mkdir -p ${params.outdir}/SBayesR_results\n\n    gctb --sbayes R --ldm ${params.sbayesr_ldm} --pi 0.95,0.02,0.02,0.01 --gamma 0.0,0.01,0.1,1 --gwas-summary ${params.sbayesr_gwas_summary} --chain-length 10000 --burn-in 2000 --out-freq 10 --out ${params.outdir}/SBayesR_results/sim_1\n    \"\"\"  \n}",
        "nb_lignes_process": 8,
        "string_script": "    \"\"\"\n    mkdir -p ${params.outdir}/SBayesR_results\n\n    gctb --sbayes R --ldm ${params.sbayesr_ldm} --pi 0.95,0.02,0.02,0.01 --gamma 0.0,0.01,0.1,1 --gwas-summary ${params.sbayesr_gwas_summary} --chain-length 10000 --burn-in 2000 --out-freq 10 --out ${params.outdir}/SBayesR_results/sim_1\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "markxiao__PRS-dev",
        "directive": [],
        "when": "",
        "stub": ""
    }
}
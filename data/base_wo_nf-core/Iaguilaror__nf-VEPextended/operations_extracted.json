{
    "OPERATION_1": {
        "string": "Channel\n  .fromPath(\"${params.vcffile}*\")\n\t.toList()\n  .set{ vcf_inputs }",
        "origin": [
            [
                "\"${params.vcffile}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "vcf_inputs",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-filter-vcf/*\")\n\t.toList()\n\t.set{ mkfiles_pre1 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-filter-vcf/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_pre1",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-extract-chromosomes/*\")\n\t.toList()\n\t.set{ mkfiles_pre2 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-extract-chromosomes/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_pre2",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-split-chromosomes/*\")\n\t.toList()\n\t.set{ mkfiles_pre3 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-split-chromosomes/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_pre3",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-untangle-multiallelic/*\")\n\t.toList()\n\t.set{ mkfiles_001 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-untangle-multiallelic/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_001",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n\t.fromPath(\"${params.reference_dbsnp}*\")\n\t.toList()\n\t.set{ reference_dbSNP }",
        "origin": [
            [
                "\"${params.reference_dbsnp}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "reference_dbSNP",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-annotate-rsid/*\")\n\t.toList()\n\t.set{ mkfiles_002 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-annotate-rsid/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_002",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "cadd_snv = Channel.fromPath(\"${params.cadd_snv_reference}*\")",
        "origin": [
            [
                "\"${params.cadd_snv_reference}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "cadd_snv",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "cadd_indel = Channel.fromPath(\"${params.cadd_indel_reference}*\")",
        "origin": [
            [
                "\"${params.cadd_indel_reference}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "cadd_indel",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "genome_reference = Channel.fromPath(\"${params.genome_reference}*\")",
        "origin": [
            [
                "\"${params.genome_reference}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "genome_reference",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "gnomad_reference = Channel.fromPath(\"${params.gnomad_reference}*\")",
        "origin": [
            [
                "\"${params.gnomad_reference}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "gnomad_reference",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "gnomad_coverage_reference = Channel.fromPath(\"${params.gnomad_coverage_reference}*\")",
        "origin": [
            [
                "\"${params.gnomad_coverage_reference}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "gnomad_coverage_reference",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "genehancer_reference = Channel.fromPath(\"${params.genehancer_reference}*\")",
        "origin": [
            [
                "\"${params.genehancer_reference}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "genehancer_reference",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "gwascatalog_reference = Channel.fromPath(\"${params.gwascatalog_reference}*\")",
        "origin": [
            [
                "\"${params.gwascatalog_reference}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "gwascatalog_reference",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "clinvar_reference = Channel.fromPath(\"${params.clinvar_reference}*\")",
        "origin": [
            [
                "\"${params.clinvar_reference}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "clinvar_reference",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "mirbase_reference = Channel.fromPath(\"${params.mirbase_reference}*\")",
        "origin": [
            [
                "\"${params.mirbase_reference}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mirbase_reference",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "pgkb_reference = Channel.fromPath(\"${params.pharmgkb_drug_reference}*\")",
        "origin": [
            [
                "\"${params.pharmgkb_drug_reference}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "pgkb_reference",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "project_coverage_reference = Channel.fromPath(\"${params.project_coverage}*\")",
        "origin": [
            [
                "\"${params.project_coverage}*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "project_coverage_reference",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "Channel\n\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-vep-extended/*\")\n\t.toList()\n\t.set{ mkfiles_003 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-vep-extended/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_003",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "Channel\n\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-rejoin-chromosomes/*\")\n\t.toList()\n\t.set{ mkfiles_pos1 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-rejoin-chromosomes/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_pos1",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "nfsummary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "nfsummary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_22": {
        "string": "pipelinesummary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "pipelinesummary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_23": {
        "string": "cadd_snv\n\t.mix(\n\t\tcadd_indel\n\t\t,genome_reference\n\t\t,gnomad_reference\n\t\t,gnomad_coverage_reference\n\t\t,genehancer_reference\n\t\t,gwascatalog_reference\n\t\t,clinvar_reference\n\t\t,mirbase_reference\n\t\t,pgkb_reference\n\t\t,project_coverage_reference\n\t)\n\t.toList()\n\t.set{ references_for_VEP }",
        "origin": [
            [
                "cadd_snv",
                "P"
            ],
            [
                "cadd_indel",
                "P"
            ],
            [
                "genome_reference",
                "P"
            ],
            [
                "gnomad_reference",
                "P"
            ],
            [
                "gnomad_coverage_reference",
                "P"
            ],
            [
                "genehancer_reference",
                "P"
            ],
            [
                "gwascatalog_reference",
                "P"
            ],
            [
                "clinvar_reference",
                "P"
            ],
            [
                "mirbase_reference",
                "P"
            ],
            [
                "pgkb_reference",
                "P"
            ],
            [
                "project_coverage_reference",
                "P"
            ]
        ],
        "gives": [
            [
                "references_for_VEP",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "results_003_vep_extended\n  .toList()\n  .set{ inputs_for_003 }",
        "origin": [
            [
                "results_003_vep_extended",
                "P"
            ]
        ],
        "gives": [
            [
                "inputs_for_003",
                "P"
            ]
        ]
    }
}
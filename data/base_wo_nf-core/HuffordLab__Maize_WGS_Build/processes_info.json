{
    "FastqToSam": {
        "name_process": "FastqToSam",
        "string_process": "\nprocess FastqToSam {\n  tag \"$readname\"\n  label 'gatk'\n  publishDir \"${params.outdir}/01_MarkAdapters/\"\n\n  input:                                                                \n  tuple val(readname), path(readpairs), val(i_readname)\n\n  output:                                                                       \n  path(\"*.bam\")\n  \n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  ${gatk_app} --java-options \"${java_options}\" FastqToSam \\\n    --FASTQ ${readpairs.get(0)} \\\n    --FASTQ2 ${readpairs.get(1)} \\\n    --OUTPUT ${i_readname}.bam \\\n    --READ_GROUP_NAME ${readname} \\\n    --SAMPLE_NAME ${readname}_name \\\n    --LIBRARY_NAME ${readname}_lib \\\n    --PLATFORM ILLUMINA \\\n    --SEQUENCING_CENTER ISU \\\n    --USE_JDK_DEFLATER true \\\n    --USE_JDK_INFLATER true\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${i_readname}.bam\n  \"\"\"  \n}",
        "nb_lignes_process": 32,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  ${gatk_app} --java-options \"${java_options}\" FastqToSam \\\n    --FASTQ ${readpairs.get(0)} \\\n    --FASTQ2 ${readpairs.get(1)} \\\n    --OUTPUT ${i_readname}.bam \\\n    --READ_GROUP_NAME ${readname} \\\n    --SAMPLE_NAME ${readname}_name \\\n    --LIBRARY_NAME ${readname}_lib \\\n    --PLATFORM ILLUMINA \\\n    --SEQUENCING_CENTER ISU \\\n    --USE_JDK_DEFLATER true \\\n    --USE_JDK_INFLATER true\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "readname",
            "i_readname",
            "readpairs"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"$readname\"",
            "label 'gatk'",
            "publishDir \"${params.outdir}/01_MarkAdapters/\""
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${i_readname}.bam\n  \"\"\""
    },
    "MarkIlluminaAdapters": {
        "name_process": "MarkIlluminaAdapters",
        "string_process": "\nprocess MarkIlluminaAdapters {\n  tag \"${bam.fileName}\"\n  label 'gatk'\n  publishDir \"${params.outdir}/01_MarkAdapters/\"\n\n  input:              \n  path(bam)\n\n  output:                    \n  path \"${bam.simpleName}_marked.bam\"\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" MarkIlluminaAdapters \\\n    --INPUT $bam \\\n    --OUTPUT ${bam.simpleName}_marked.bam \\\n    --METRICS ${bam.simpleName}_marked_metrics.txt \\\n    --USE_JDK_DEFLATER true \\\n    --USE_JDK_INFLATER true\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${bam.simpleName}_marked.bam\n  touch ${bam.simpleName}_marked_metrics.txt\n  \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" MarkIlluminaAdapters \\\n    --INPUT $bam \\\n    --OUTPUT ${bam.simpleName}_marked.bam \\\n    --METRICS ${bam.simpleName}_marked_metrics.txt \\\n    --USE_JDK_DEFLATER true \\\n    --USE_JDK_INFLATER true\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"${bam.fileName}\"",
            "label 'gatk'",
            "publishDir \"${params.outdir}/01_MarkAdapters/\""
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${bam.simpleName}_marked.bam\n  touch ${bam.simpleName}_marked_metrics.txt\n  \"\"\""
    },
    "SamToFastq": {
        "name_process": "SamToFastq",
        "string_process": "\nprocess SamToFastq {\n  tag \"${bam.fileName}\"\n  label 'gatk'\n  publishDir \"${params.outdir}/01_MarkAdapters/\"\n\n  input:              \n  path(bam)\n\n  output:                        \n  tuple val(\"${bam.simpleName}\"), path(\"${bam.simpleName}_newR1.fq\"), path(\"${bam.simpleName}_newR2.fq\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" SamToFastq \\\n    --INPUT $bam \\\n    --FASTQ ${bam.simpleName}_newR1.fq \\\n    --SECOND_END_FASTQ ${bam.simpleName}_newR2.fq \\\n    --CLIPPING_ATTRIBUTE XT \\\n    --CLIPPING_ACTION 2 \\\n    --INCLUDE_NON_PF_READS true \\\n    --USE_JDK_DEFLATER true \\\n    --USE_JDK_INFLATER true\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${bam.simpleName}_newR1.fq\n  touch ${bam.simpleName}_newR2.fq\n  \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" SamToFastq \\\n    --INPUT $bam \\\n    --FASTQ ${bam.simpleName}_newR1.fq \\\n    --SECOND_END_FASTQ ${bam.simpleName}_newR2.fq \\\n    --CLIPPING_ATTRIBUTE XT \\\n    --CLIPPING_ACTION 2 \\\n    --INCLUDE_NON_PF_READS true \\\n    --USE_JDK_DEFLATER true \\\n    --USE_JDK_INFLATER true\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"${bam.fileName}\"",
            "label 'gatk'",
            "publishDir \"${params.outdir}/01_MarkAdapters/\""
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${bam.simpleName}_newR1.fq\n  touch ${bam.simpleName}_newR2.fq\n  \"\"\""
    },
    "bwamem2_index": {
        "name_process": "bwamem2_index",
        "string_process": "\nprocess bwamem2_index {\n  tag \"${genome_fasta.simpleName}\"\n  label 'bwamem'\n  publishDir \"${params.outdir}/02_MapReads\"\n\n  input:\n  path(genome_fasta)\n\n  output:                                        \n  tuple path(\"$genome_fasta\"), path(\"${genome_fasta}*\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  $bwamem2_app index $genome_fasta\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${genome_fasta}.variousindexfiles\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  $bwamem2_app index $genome_fasta\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"${genome_fasta.simpleName}\"",
            "label 'bwamem'",
            "publishDir \"${params.outdir}/02_MapReads\""
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${genome_fasta}.variousindexfiles\n  \"\"\""
    },
    "bwamem2_mem": {
        "name_process": "bwamem2_mem",
        "string_process": "\nprocess bwamem2_mem {\n  tag \"$readname\"\n  label 'bwamem'\n  publishDir \"${params.outdir}/02_MapReads\"\n\n  input:\n  tuple path(genome_fasta), path(genome_index), val(readname), path(readpairs)\n\n  output:                             \n  path(\"${readname}_mapped.bam\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  PROC1=\\$((`nproc` * 3/4))\n  $bwamem2_app mem -t \\${PROC1} ${genome_fasta} ${readpairs} |\\\n     $samtools_app view --threads 1 -bS - > ${readname}_mapped.bam\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${readname}_mapped.bam\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  PROC1=\\$((`nproc` * 3/4))\n  $bwamem2_app mem -t \\${PROC1} ${genome_fasta} ${readpairs} |\\\n     $samtools_app view --threads 1 -bS - > ${readname}_mapped.bam\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "readname",
            "genome_fasta",
            "genome_index",
            "readpairs"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"$readname\"",
            "label 'bwamem'",
            "publishDir \"${params.outdir}/02_MapReads\""
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${readname}_mapped.bam\n  \"\"\""
    },
    "CreateSequenceDictionary": {
        "name_process": "CreateSequenceDictionary",
        "string_process": "\nprocess CreateSequenceDictionary {\n  tag \"${genome_fasta.simpleName}\"\n  label 'gatk'\n  publishDir \"${params.outdir}/03_PrepGATK\"\n\n  input:\n  path(genome_fasta)\n\n  output:\n  path(\"${genome_fasta.simpleName}.dict\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" CreateSequenceDictionary \\\n    -R ${genome_fasta} \\\n    -O ${genome_fasta.simpleName}.dict\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${genome_fasta.simpleName}.dict\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" CreateSequenceDictionary \\\n    -R ${genome_fasta} \\\n    -O ${genome_fasta.simpleName}.dict\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"${genome_fasta.simpleName}\"",
            "label 'gatk'",
            "publishDir \"${params.outdir}/03_PrepGATK\""
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${genome_fasta.simpleName}.dict\n  \"\"\""
    },
    "MergeBamAlignment": {
        "name_process": "MergeBamAlignment",
        "string_process": "\nprocess MergeBamAlignment {\n  tag \"$i_readname\"\n  label 'gatk'\n  publishDir \"${params.outdir}/03_PrepGATK\"\n\n  input:                                              \n  tuple val(i_readname), path(read_unmapped), path(read_mapped), path(genome_fasta), path(genome_dict)\n\n  output:                            \n  tuple path(\"${i_readname}_merged.bam\"), path(\"${i_readname}_merged.bai\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" MergeBamAlignment \\\n  --REFERENCE_SEQUENCE $genome_fasta \\\n  --UNMAPPED_BAM ${read_unmapped} \\\n  --ALIGNED_BAM ${read_mapped} \\\n  --OUTPUT ${i_readname}_merged.bam \\\n  --CREATE_INDEX true \\\n  --ADD_MATE_CIGAR true \\\n  --CLIP_ADAPTERS false \\\n  --CLIP_OVERLAPPING_READS true \\\n  --INCLUDE_SECONDARY_ALIGNMENTS true \\\n  --MAX_INSERTIONS_OR_DELETIONS -1 \\\n  --PRIMARY_ALIGNMENT_STRATEGY MostDistant \\\n  --ATTRIBUTES_TO_RETAIN XS \\\n  --USE_JDK_DEFLATER true \\\n  --USE_JDK_INFLATER true\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${i_readname}_merged.bam\n  touch ${i_readname}_merged.bai\n  \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" MergeBamAlignment \\\n  --REFERENCE_SEQUENCE $genome_fasta \\\n  --UNMAPPED_BAM ${read_unmapped} \\\n  --ALIGNED_BAM ${read_mapped} \\\n  --OUTPUT ${i_readname}_merged.bam \\\n  --CREATE_INDEX true \\\n  --ADD_MATE_CIGAR true \\\n  --CLIP_ADAPTERS false \\\n  --CLIP_OVERLAPPING_READS true \\\n  --INCLUDE_SECONDARY_ALIGNMENTS true \\\n  --MAX_INSERTIONS_OR_DELETIONS -1 \\\n  --PRIMARY_ALIGNMENT_STRATEGY MostDistant \\\n  --ATTRIBUTES_TO_RETAIN XS \\\n  --USE_JDK_DEFLATER true \\\n  --USE_JDK_INFLATER true\n  \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "i_readname",
            "read_unmapped",
            "read_mapped",
            "genome_fasta",
            "genome_dict"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"$i_readname\"",
            "label 'gatk'",
            "publishDir \"${params.outdir}/03_PrepGATK\""
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${i_readname}_merged.bam\n  touch ${i_readname}_merged.bai\n  \"\"\""
    },
    "samtools_faidx": {
        "name_process": "samtools_faidx",
        "string_process": "\nprocess samtools_faidx {\n  tag \"${genome_fasta.simpleName}\"\n  label 'samtools'\n  publishDir \"${params.outdir}/03_PrepGATK\"\n\n  input:\n  path(genome_fasta)\n\n  output:\n  path(\"${genome_fasta}.fai\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  $samtools_app faidx $genome_fasta\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${genome_fasta}.fai\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  $samtools_app faidx $genome_fasta\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"${genome_fasta.simpleName}\"",
            "label 'samtools'",
            "publishDir \"${params.outdir}/03_PrepGATK\""
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${genome_fasta}.fai\n  \"\"\""
    },
    "bedtools_makewindows": {
        "name_process": "bedtools_makewindows",
        "string_process": "\nprocess bedtools_makewindows {\n  tag \"${genome_fai.simpleName}\"\n  label 'bedtools'\n  publishDir \"${params.outdir}/03_PrepGATK\"\n\n  input:               \n  path(genome_fai)\n\n  output:                     \n  path(\"*_coords.bed\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  cat ${genome_fai} | awk -F'\\t' '{print \\$1\"\\t\"\\$2}' > genome_length.txt\n  $bedtools_app makewindows -w \"$params.window\" -g genome_length.txt |\\\n    awk '{print \\$1\"\\t\"\\$2+1\"\\t\"\\$3}' |\\\n    sed \\$'s/\\t/:/1' |\\\n    sed \\$'s/\\t/-/g' > ${genome_fai.simpleName}_coords.bed\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  echo \"0-1000\" > ${genome_fai.simpleName}_coords.bed\n  echo \"1000-2000\" >> ${genome_fai.simpleName}_coords.bed\n  echo \"2000-3000\" >> ${genome_fai.simpleName}_coords.bed\n  \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  cat ${genome_fai} | awk -F'\\t' '{print \\$1\"\\t\"\\$2}' > genome_length.txt\n  $bedtools_app makewindows -w \"$params.window\" -g genome_length.txt |\\\n    awk '{print \\$1\"\\t\"\\$2+1\"\\t\"\\$3}' |\\\n    sed \\$'s/\\t/:/1' |\\\n    sed \\$'s/\\t/-/g' > ${genome_fai.simpleName}_coords.bed\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_fai"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"${genome_fai.simpleName}\"",
            "label 'bedtools'",
            "publishDir \"${params.outdir}/03_PrepGATK\""
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  echo \"0-1000\" > ${genome_fai.simpleName}_coords.bed\n  echo \"1000-2000\" >> ${genome_fai.simpleName}_coords.bed\n  echo \"2000-3000\" >> ${genome_fai.simpleName}_coords.bed\n  \"\"\""
    },
    "gatk_HaplotypeCaller": {
        "name_process": "gatk_HaplotypeCaller",
        "string_process": "\nprocess gatk_HaplotypeCaller {\n  tag \"$window\"\n  label 'gatk'\n  publishDir \"${params.outdir}/04_GATK\", mode: 'copy'\n\n  input:                                                \n  tuple val(window), path(bam), path(bai), path(genome_fasta), path(genome_dict), path(genome_fai)\n\n  output:                                 \n  path(\"*.vcf\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  BAMFILES=`echo $bam | sed 's/ / -I /g' | tr '[' ' ' | tr ']' ' '`\n  $gatk_app --java-options \"${java_options}\" HaplotypeCaller \\\n    -R $genome_fasta \\\n    -I \\$BAMFILES \\\n    -L $window \\\n    --output ${window.replace(':','_')}.vcf\n  \"\"\"\n\n  stub:\n  \"\"\"\n  touch ${window.replace(':','_')}.vcf\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  BAMFILES=`echo $bam | sed 's/ / -I /g' | tr '[' ' ' | tr ']' ' '`\n  $gatk_app --java-options \"${java_options}\" HaplotypeCaller \\\n    -R $genome_fasta \\\n    -I \\$BAMFILES \\\n    -L $window \\\n    --output ${window.replace(':','_')}.vcf\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "window",
            "bam",
            "bai",
            "genome_fasta",
            "genome_dict",
            "genome_fai"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"$window\"",
            "label 'gatk'",
            "publishDir \"${params.outdir}/04_GATK\", mode: 'copy'"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  touch ${window.replace(':','_')}.vcf\n  \"\"\""
    },
    "gatk_HaplotypeCaller_invariant": {
        "name_process": "gatk_HaplotypeCaller_invariant",
        "string_process": "\nprocess gatk_HaplotypeCaller_invariant {\n  tag \"$window:${bam.simpleName}\"\n  label 'gatk'\n  publishDir \"${params.outdir}/04_GATK\", mode: 'copy'\n\n  input:                                                \n  tuple val(window), path(bam), path(bai), path(genome_fasta), path(genome_dict), path(genome_fai)\n\n  output:                                 \n  path(\"*.vcf\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  BAMFILES=`echo $bam | sed 's/ / -I /g' | tr '[' ' ' | tr ']' ' '`\n  $gatk_app --java-options \"${java_options}\" HaplotypeCaller \\\n    -ERC BP_RESOLUTION \\\n    -R $genome_fasta \\\n    -I \\$BAMFILES \\\n    -L $window \\\n    --output ${bam.simpleName}_${window.replace(':','_')}.vcf\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${bam.simpleName}_${window.replace(':','_')}.vcf\n  \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  BAMFILES=`echo $bam | sed 's/ / -I /g' | tr '[' ' ' | tr ']' ' '`\n  $gatk_app --java-options \"${java_options}\" HaplotypeCaller \\\n    -ERC BP_RESOLUTION \\\n    -R $genome_fasta \\\n    -I \\$BAMFILES \\\n    -L $window \\\n    --output ${bam.simpleName}_${window.replace(':','_')}.vcf\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "window",
            "bam",
            "bai",
            "genome_fasta",
            "genome_dict",
            "genome_fai"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"$window:${bam.simpleName}\"",
            "label 'gatk'",
            "publishDir \"${params.outdir}/04_GATK\", mode: 'copy'"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${bam.simpleName}_${window.replace(':','_')}.vcf\n  \"\"\""
    },
    "CombineGVCFs": {
        "name_process": "CombineGVCFs",
        "string_process": "\nprocess CombineGVCFs {\n  tag \"ConsolidateGVCFs\"\n  label 'gatk'\n  publishDir \"${params.outdir}/04_GATK\", mode: 'copy'\n\n  input:                                                \n  tuple path(gvcf), path(genome_fasta), path(genome_dict), path(genome_fai)\n\n  output:                                 \n  path(\"*.vcf\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  GVCFFILES=`echo $gvcf | sed 's/ / --variant /g' | tr '[' ' ' | tr ']' ' '`\n  $gatk_app --java-options \"${java_options}\" CombineGVCFs \\\n    -R $genome_fasta \\\n    --variant \\$GVCFFILES \\\n    --output all_combined.vcf\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch all_combined.vcf\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  GVCFFILES=`echo $gvcf | sed 's/ / --variant /g' | tr '[' ' ' | tr ']' ' '`\n  $gatk_app --java-options \"${java_options}\" CombineGVCFs \\\n    -R $genome_fasta \\\n    --variant \\$GVCFFILES \\\n    --output all_combined.vcf\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gvcf",
            "genome_fasta",
            "genome_dict",
            "genome_fai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"ConsolidateGVCFs\"",
            "label 'gatk'",
            "publishDir \"${params.outdir}/04_GATK\", mode: 'copy'"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch all_combined.vcf\n  \"\"\""
    },
    "GenotypeGVCFs": {
        "name_process": "GenotypeGVCFs",
        "string_process": "\nprocess GenotypeGVCFs {\n  tag \"JointCallCohorts\"\n  label 'gatk'\n  publishDir \"${params.outdir}/04_GATK\", mode: 'copy'\n\n  input:                                                \n  tuple path(all_combined_gvcf), path(genome_fasta), path(genome_dict), path(genome_fai)\n\n  output:                                 \n  path(\"*.vcf\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" GenotypeGVCFs \\\n    -R $genome_fasta \\\n    -V $all_combined_gvcf \\\n    --output output.vcf\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch output.vcf\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" GenotypeGVCFs \\\n    -R $genome_fasta \\\n    -V $all_combined_gvcf \\\n    --output output.vcf\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_combined_gvcf",
            "genome_fasta",
            "genome_dict",
            "genome_fai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"JointCallCohorts\"",
            "label 'gatk'",
            "publishDir \"${params.outdir}/04_GATK\", mode: 'copy'"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch output.vcf\n  \"\"\""
    },
    "merge_vcf": {
        "name_process": "merge_vcf",
        "string_process": "\nprocess merge_vcf {\n  publishDir \"${params.outdir}/04_GATK\", mode: 'copy'\n\n  input:                           \n  path(vcfs)\n\n  output:                            \n  path(\"first-round_merged.vcf\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  cat ${vcfs.get(0)} | grep \"^#\" > first-round_merged.vcf\n  cat ${vcfs} | grep -v \"^#\" >> first-round_merged.vcf\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch first-round_merged.vcf\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  cat ${vcfs.get(0)} | grep \"^#\" > first-round_merged.vcf\n  cat ${vcfs} | grep -v \"^#\" >> first-round_merged.vcf\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcfs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "publishDir \"${params.outdir}/04_GATK\", mode: 'copy'"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch first-round_merged.vcf\n  \"\"\""
    },
    "vcftools_snp_only": {
        "name_process": "vcftools_snp_only",
        "string_process": "\nprocess vcftools_snp_only {\n  tag \"${merged_vcf.fileName}\"\n  label 'vcftools'\n  publishDir \"${params.outdir}/05_FilterSNPs\", mode: 'copy'\n\n  input:                        \n  path(merged_vcf)\n\n  output:                                 \n  path(\"${merged_vcf.simpleName}_snps-only.*\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  $vcftools_app \\\n    --vcf $merged_vcf \\\n    --remove-indels \\\n    --recode \\\n    --recode-INFO-all \\\n    --out ${merged_vcf.simpleName}_snps-only\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${merged_vcf.simpleName}_snps-only.outputfiles\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  $vcftools_app \\\n    --vcf $merged_vcf \\\n    --remove-indels \\\n    --recode \\\n    --recode-INFO-all \\\n    --out ${merged_vcf.simpleName}_snps-only\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "merged_vcf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"${merged_vcf.fileName}\"",
            "label 'vcftools'",
            "publishDir \"${params.outdir}/05_FilterSNPs\", mode: 'copy'"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${merged_vcf.simpleName}_snps-only.outputfiles\n  \"\"\""
    },
    "SortVcf": {
        "name_process": "SortVcf",
        "string_process": "\nprocess SortVcf {\n  tag \"$vcf.fileName\"\n  label 'gatk'\n  publishDir \"$params.outdir/05_FilterSNPs\", mode: 'copy'\n\n  input:                           \n  tuple path(vcf), path(dict)\n\n  output:                  \n  path (\"*.vcf\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" SortVcf \\\n  --INPUT $vcf \\\n  --SEQUENCE_DICTIONARY $dict \\\n  --CREATE_INDEX true \\\n  --OUTPUT ${vcf.simpleName}_sorted.vcf\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${vcf.simpleName}_sorted.vcf\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" SortVcf \\\n  --INPUT $vcf \\\n  --SEQUENCE_DICTIONARY $dict \\\n  --CREATE_INDEX true \\\n  --OUTPUT ${vcf.simpleName}_sorted.vcf\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf",
            "dict"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"$vcf.fileName\"",
            "label 'gatk'",
            "publishDir \"$params.outdir/05_FilterSNPs\", mode: 'copy'"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${vcf.simpleName}_sorted.vcf\n  \"\"\""
    },
    "calc_DPvalue": {
        "name_process": "calc_DPvalue",
        "string_process": "\nprocess calc_DPvalue {\n  tag \"$sorted_vcf.fileName\"\n  label 'datamash'\n\n  input:                   \n  path(sorted_vcf)\n\n  output:                                                         \n  stdout()\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  grep -v \"^#\" $sorted_vcf | cut -f 8 | grep -oe \";DP=.*\" | cut -f 2 -d ';' | cut -f 2 -d \"=\" > dp.txt\n  cat dp.txt | $datamash_app mean 1 sstdev 1 > dp.stats\n  cat dp.stats | awk '{print \\$1+5*\\$2}'\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  # idk what default number should be here\n  echo \"75\"\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  grep -v \"^#\" $sorted_vcf | cut -f 8 | grep -oe \";DP=.*\" | cut -f 2 -d ';' | cut -f 2 -d \"=\" > dp.txt\n  cat dp.txt | $datamash_app mean 1 sstdev 1 > dp.stats\n  cat dp.stats | awk '{print \\$1+5*\\$2}'\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sorted_vcf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"$sorted_vcf.fileName\"",
            "label 'datamash'"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  # idk what default number should be here\n  echo \"75\"\n  \"\"\""
    },
    "VariantFiltration": {
        "name_process": "VariantFiltration",
        "string_process": "\nprocess VariantFiltration {\n  tag \"$sorted_snp_vcf.fileName\"\n  publishDir \"$params.outdir/05_FilterSNPs\", mode: 'copy'\n\n  input:                                                   \n  tuple path(sorted_snp_vcf), val(dp), path(genome_fasta), path(genome_dict), path(genome_fai)\n\n  output:                                       \n  path(\"${sorted_snp_vcf.simpleName}.marked.vcf\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" VariantFiltration \\\n    --reference $genome_fasta \\\n    --sequence-dictionary $genome_dict \\\n    --variant $sorted_snp_vcf \\\n    --filter-expression \\\"QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0 || DP > $dp\\\" \\\n    --filter-name \"FAIL\" \\\n    --output ${sorted_snp_vcf.simpleName}.marked.vcf\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${sorted_snp_vcf.simpleName}.marked.vcf\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  $gatk_app --java-options \"${java_options}\" VariantFiltration \\\n    --reference $genome_fasta \\\n    --sequence-dictionary $genome_dict \\\n    --variant $sorted_snp_vcf \\\n    --filter-expression \\\"QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0 || DP > $dp\\\" \\\n    --filter-name \"FAIL\" \\\n    --output ${sorted_snp_vcf.simpleName}.marked.vcf\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "mQC",
            "DP2"
        ],
        "tools_url": [
            "https://bio.tools/mQC",
            "https://bio.tools/dp2"
        ],
        "tools_dico": [
            {
                "name": "mQC",
                "uri": "https://bio.tools/mQC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3563",
                                    "term": "RNA-seq read count analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0447",
                                    "term": "Sequence alignment validation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0447",
                                    "term": "Sequence alignment quality evaluation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Quality visualization tool specific for ribosome profiling data",
                "homepage": "https://github.com/Biobix/mQC"
            },
            {
                "name": "DP2",
                "uri": "https://bio.tools/dp2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3382",
                            "term": "Imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0611",
                            "term": "Electron microscopy"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3443",
                                    "term": "Image analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software for segmentation of 3D structures contained in 3D microscopy.",
                "homepage": "https://sites.google.com/site/imagecrowdseg/home"
            }
        ],
        "inputs": [
            "dp",
            "sorted_snp_vcf",
            "genome_fasta",
            "genome_dict",
            "genome_fai"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"$sorted_snp_vcf.fileName\"",
            "publishDir \"$params.outdir/05_FilterSNPs\", mode: 'copy'"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${sorted_snp_vcf.simpleName}.marked.vcf\n  \"\"\""
    },
    "keep_only_pass": {
        "name_process": "keep_only_pass",
        "string_process": "\nprocess keep_only_pass {\n  tag \"${snp_marked_vcf.fileName}\"\n  publishDir \"$params.outdir/05_FilterSNPs\", mode: 'copy'\n\n  input:\n  path(snp_marked_vcf)\n\n  output:\n  path(\"${snp_marked_vcf.simpleName}_snp-only.pass-only.vcf\")\n\n  script:\n  \"\"\"\n  #! /usr/bin/env bash\n  cat $snp_marked_vcf | grep \"^#\" > ${snp_marked_vcf.simpleName}_snp-only.pass-only.vcf\n  cat $snp_marked_vcf | grep -v \"^#\" | awk '\\$7==\"PASS\"' >> ${snp_marked_vcf.simpleName}_snp-only.pass-only.vcf\n  \"\"\"\n\n  stub:\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${snp_marked_vcf.simpleName}_snp-only.pass-only.vcf\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  #! /usr/bin/env bash\n  cat $snp_marked_vcf | grep \"^#\" > ${snp_marked_vcf.simpleName}_snp-only.pass-only.vcf\n  cat $snp_marked_vcf | grep -v \"^#\" | awk '\\$7==\"PASS\"' >> ${snp_marked_vcf.simpleName}_snp-only.pass-only.vcf\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "snp_marked_vcf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HuffordLab__Maize_WGS_Build",
        "directive": [
            "tag \"${snp_marked_vcf.fileName}\"",
            "publishDir \"$params.outdir/05_FilterSNPs\", mode: 'copy'"
        ],
        "when": "",
        "stub": "\n  \"\"\"\n  #! /usr/bin/env bash\n  touch ${snp_marked_vcf.simpleName}_snp-only.pass-only.vcf\n  \"\"\""
    }
}
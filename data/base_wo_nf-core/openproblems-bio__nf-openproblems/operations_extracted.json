{
    "OPERATION_1": {
        "string": "configFiles.join(', ')",
        "origin": [
            [
                "configFiles",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_2": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_3": {
        "string": "ch_list_tasks\n    .splitText() { line -> line.replaceAll(\"\\\\n\", \"\") }\n    .into { ch_task_names_for_list_datasets;\n            ch_task_names_for_list_methods;\n            ch_task_names_for_list_metrics }",
        "origin": [
            [
                "ch_list_tasks",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_task_names_for_list_datasets",
                "P"
            ],
            [
                "ch_task_names_for_list_methods",
                "P"
            ],
            [
                "ch_task_names_for_list_metrics",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "ch_list_datasets\n    .map { it -> tuple(\n        it[0],\n        it[1].splitText()*.replaceAll(\"\\n\", \"\")\n     ) }\n    .transpose()\n    .set { ch_task_dataset_pairs }",
        "origin": [
            [
                "ch_list_datasets",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_task_dataset_pairs",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "ch_list_methods\n    .map { it -> tuple(\n        it[0],\n        it[1].splitText()*.replaceAll(\"\\n\", \"\")\n        )}\n    .transpose()\n    .set { ch_task_method_pairs }",
        "origin": [
            [
                "ch_list_methods",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_task_method_pairs",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "ch_task_method_image_hash\n    .combine( ch_loaded_datasets, by: 0)\n    .set { ch_dataset_methods }",
        "origin": [
            [
                "ch_task_method_image_hash",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_dataset_methods",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ch_ran_methods\n    .tap { ch_ran_methods_to_code_versions }\n    .set { ch_ran_methods_to_metrics }",
        "origin": [
            [
                "ch_ran_methods",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_ran_methods_to_metrics",
                "P"
            ],
            [
                "ch_ran_methods_to_code_versions",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "ch_list_metrics\n    .map { it -> tuple(\n        it[0],\n        it[1].splitText()*.replaceAll(\"\\n\", \"\")\n    ) }\n    .transpose()\n    .set { ch_task_metric_pairs }",
        "origin": [
            [
                "ch_list_metrics",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_task_metric_pairs",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "ch_task_metric_image_hash\n    .combine(ch_ran_methods_to_metrics, by:0)\n    .set { ch_dataset_method_metrics }",
        "origin": [
            [
                "ch_task_metric_image_hash",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_dataset_method_metrics",
                "P"
            ]
        ]
    }
}
{
    "OPERATION_1": {
        "string": "Channel\n      .fromPath(params.input_design)\n      .splitCsv(header:true, sep:';')\n      .map { row -> [ row.LibName, i++, file(\"$params.input_dir/$row.LibFastq1\", checkIfExists: true), file(\"$params.input_dir/$row.LibFastq2\", checkIfExists: true), \"$row.LibName.${params.mapper_id}.${params.genome_prefix}\"+\".pe\" ] }\n      .into { design_reads_csv; ch_Toreport_reads_nb }",
        "origin": [
            [
                "params.input_design",
                "A"
            ]
        ],
        "gives": [
            [
                "design_reads_csv",
                "P"
            ],
            [
                "ch_Toreport_reads_nb",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n      .fromPath(params.input_design)\n      .splitCsv(header:true, sep:';')\n      .map { row -> [ row.LibName, row.LibExp,i++, file(\"$params.input_dir/$row.LibBam\", checkIfExists: true), file(\"$params.input_dir/${row.LibBam}.bai\", checkIfExists: true), \"$row.LibName.${params.mapper_id}.${params.genome_prefix}\"+\".merged\" ] }\n      .into { design_bam_csv; test_design }",
        "origin": [
            [
                "params.input_design",
                "A"
            ]
        ],
        "gives": [
            [
                "design_bam_csv",
                "P"
            ],
            [
                "test_design",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_Toreport_trim_nb.join(trimed_reads_ch)\n   .set{ch_report_trim_nb}",
        "origin": [
            [
                "ch_Toreport_trim_nb",
                "P"
            ],
            [
                "trimed_reads_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_report_trim_nb",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "test_design.view()",
        "origin": [
            [
                "test_design",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_5": {
        "string": "design_bam_csv\n      .map{ it -> [it[1],it[2], it[3] ]}\n      .groupTuple(by: 0)\n      .map { it-> [ it[0], it[1], it[3].flatten()]}\n      .set {design_bam_merged}",
        "origin": [
            [
                "design_bam_csv",
                "P"
            ]
        ],
        "gives": [
            [
                "design_bam_merged",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "ch_Toreport_mapped_nb\n   .join(mapped_reads_ch)\n   .set{ch_report_mapped_nb}",
        "origin": [
            [
                "ch_Toreport_mapped_nb",
                "P"
            ],
            [
                "mapped_reads_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_report_mapped_nb",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ch_Toreport_all_stats\n.map{ it -> [it[1],it[0],it[2],it[3],it[4],it[5]  ] }\n.map{it -> [it.join(\"\\t\")]}.collect().set{ ch_report_all_stats} //Joining stats with \";\" then use collect to have a single entry channel",
        "origin": [
            [
                "ch_Toreport_all_stats",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_report_all_stats",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "ch_Toreport_uniq_nb\n   .join(mapped_uniq_reads_ch)\n   .set{ch_report_uniq_nb}",
        "origin": [
            [
                "ch_Toreport_uniq_nb",
                "P"
            ],
            [
                "mapped_uniq_reads_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_report_uniq_nb",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "ch_Toreport_uniq_stats\n.map{ it -> [it[1],it[0],it[2],it[3],it[4],it[5]  ] }\n.map{it -> [it.join(\"\\t\")]}.collect().set{ ch_report_uniq_stats} //Joining stats with \";\" then use collect to have a single entry channel",
        "origin": [
            [
                "ch_Toreport_uniq_stats",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_report_uniq_stats",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "genCoved_ch.join(ch_ToAoC)\n.map{ it -> [it[4], it[0], it[2][0], it[3], it[5], it[7], 'NA', it[8],  1, '', '', '', '', '', '', '']}\n.map{ it -> [it.join(\"\\t\")]}\n.collect()\n.set {ch_report_Aoc}",
        "origin": [
            [
                "genCoved_ch",
                "P"
            ],
            [
                "ch_ToAoC",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_report_Aoc",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "genCoved_uniq_ch.join(ch_ToAoC_uniq)\n.map{ it -> [it[4], it[0], it[2][0], it[3], it[5], it[7], it[7], it[8], 1, '', '', '', '', '', '', '']}\n.map{ it -> [it.join(\"\\t\")]}\n.collect()\n.set {ch_report_Aoc_uniq}",
        "origin": [
            [
                "genCoved_uniq_ch",
                "P"
            ],
            [
                "ch_ToAoC_uniq",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_report_Aoc_uniq",
                "P"
            ]
        ]
    }
}
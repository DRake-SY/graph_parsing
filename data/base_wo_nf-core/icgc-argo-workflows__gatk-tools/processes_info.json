{
    "gatkLearnReadOrientationModel": {
        "name_process": "gatkLearnReadOrientationModel",
        "string_process": "\nprocess gatkLearnReadOrientationModel {\n  container \"quay.io/icgc-argo/gatk-learn-read-orientation-model:gatk-learn-read-orientation-model.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    path input_f1r2_tar_gz\n\n  output:\n    path \"${input_f1r2_tar_gz.baseName}.read-orientation.artifact-priors.tar.gz\", emit: artifact_prior_table\n\n  script:\n    \"\"\"\n    gatk-learn-read-orientation-model.py \\\n                      -j ${(int) (params.mem * 1000)} \\\n                      -I ${input_f1r2_tar_gz} \\\n                      -O ${input_f1r2_tar_gz.baseName}.read-orientation.artifact-priors.tar.gz\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    gatk-learn-read-orientation-model.py \\\n                      -j ${(int) (params.mem * 1000)} \\\n                      -I ${input_f1r2_tar_gz} \\\n                      -O ${input_f1r2_tar_gz.baseName}.read-orientation.artifact-priors.tar.gz\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_f1r2_tar_gz"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-learn-read-orientation-model:gatk-learn-read-orientation-model.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkSelectVariants": {
        "name_process": "gatkSelectVariants",
        "string_process": "\nprocess gatkSelectVariants {\n  container \"quay.io/icgc-argo/gatk-select-variants:gatk-select-variants.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    path input_vcf\n    path input_vcf_tbi\n    val select_type_to_include\n    val select_type_to_exclude\n    val output_basename\n\n  output:\n    tuple path(\"${output_basename}.vcf.gz\"), path(\"${output_basename}.vcf.gz.tbi\"), emit: output\n\n  script:\n    variant_types = [\"INDEL\", \"SNP\", \"MIXED\", \"MNP\", \"SYMBOLIC\", \"NO_VARIATION\"]\n    if (!select_type_to_include && !select_type_to_exclude) {\n      exit 1, \"Please specify either select_type_to_include or select_type_to_exclude\"\n    } else if (select_type_to_include && select_type_to_exclude){\n      exit 1, \"Please specify either select_type_to_include or select_type_to_exclude\"\n    } else if (select_type_to_include && !variant_types.contains(select_type_to_include)) {\n      exit 1, \"select_type_to_include must be one of: ${variant_types}\"\n    } else if (select_type_to_exclude && !variant_types.contains(select_type_to_exclude)) {\n      exit 1, \"select_type_to_exclude must be one of: ${variant_types}\"\n    }\n\n    arg_select = \"-i ${select_type_to_include}\"\n    if (select_type_to_exclude) {\n        arg_select = \"-x ${select_type_to_exclude}\"\n    }\n\n    \"\"\"\n    gatk-select-variants.py \\\n                      -m ${(int) (params.mem * 1000)} \\\n                      -v ${input_vcf} \\\n                      -o ${output_basename}.vcf.gz ${arg_select}\n\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    variant_types = [\"INDEL\", \"SNP\", \"MIXED\", \"MNP\", \"SYMBOLIC\", \"NO_VARIATION\"]\n    if (!select_type_to_include && !select_type_to_exclude) {\n      exit 1, \"Please specify either select_type_to_include or select_type_to_exclude\"\n    } else if (select_type_to_include && select_type_to_exclude){\n      exit 1, \"Please specify either select_type_to_include or select_type_to_exclude\"\n    } else if (select_type_to_include && !variant_types.contains(select_type_to_include)) {\n      exit 1, \"select_type_to_include must be one of: ${variant_types}\"\n    } else if (select_type_to_exclude && !variant_types.contains(select_type_to_exclude)) {\n      exit 1, \"select_type_to_exclude must be one of: ${variant_types}\"\n    }\n\n    arg_select = \"-i ${select_type_to_include}\"\n    if (select_type_to_exclude) {\n        arg_select = \"-x ${select_type_to_exclude}\"\n    }\n\n    \"\"\"\n    gatk-select-variants.py \\\n                      -m ${(int) (params.mem * 1000)} \\\n                      -v ${input_vcf} \\\n                      -o ${output_basename}.vcf.gz ${arg_select}\n\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_vcf",
            "input_vcf_tbi",
            "select_type_to_include",
            "select_type_to_exclude",
            "output_basename"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-select-variants:gatk-select-variants.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkFilterAlignmentArtifacts": {
        "name_process": "gatkFilterAlignmentArtifacts",
        "string_process": "\nprocess gatkFilterAlignmentArtifacts {\n  container \"quay.io/icgc-argo/gatk-filter-alignment-artifacts:gatk-filter-alignment-artifacts.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    path tumour_seq\n    path tumour_seq_idx\n    path ref_fa\n    path ref_fa_2nd\n    path bwa_mem_index_image\n    path input_vcf\n    path input_vcf_idx\n    val output_vcf_basename\n\n  output:\n    path \"${output_vcf_basename}.vcf.gz\", emit: filtered_vcf\n    path \"${output_vcf_basename}.vcf.gz.tbi\", emit: filtered_vcf_idx\n\n  script:\n    \"\"\"\n    gatk-filter-alignment-artifacts.py \\\n                      -j ${(int) (params.mem * 1000)} \\\n                      -I ${tumour_seq} \\\n                      -V ${input_vcf} \\\n                      -R ${ref_fa} \\\n                      --bwa-mem-index-image ${bwa_mem_index_image} \\\n                      -O ${output_vcf_basename}.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    gatk-filter-alignment-artifacts.py \\\n                      -j ${(int) (params.mem * 1000)} \\\n                      -I ${tumour_seq} \\\n                      -V ${input_vcf} \\\n                      -R ${ref_fa} \\\n                      --bwa-mem-index-image ${bwa_mem_index_image} \\\n                      -O ${output_vcf_basename}.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tumour_seq",
            "tumour_seq_idx",
            "ref_fa",
            "ref_fa_2nd",
            "bwa_mem_index_image",
            "input_vcf",
            "input_vcf_idx",
            "output_vcf_basename"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-filter-alignment-artifacts:gatk-filter-alignment-artifacts.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkGatherPileupSummaries": {
        "name_process": "gatkGatherPileupSummaries",
        "string_process": "\nprocess gatkGatherPileupSummaries {\n  container \"quay.io/icgc-argo/gatk-gather-pileup-summaries:gatk-gather-pileup-summaries.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    path ref_genome_dict\n    path input_pileup\n\n\n  output:\n    path \"*.pileups_metrics.tsv\", emit: merged_pileups_metrics\n\n  script:\n\n    \"\"\"\n    gatk-gather-pileup-summaries.py -j ${(int) (params.mem * 1000)} \\\n                      -D ${ref_genome_dict} \\\n                      -I ${input_pileup} \n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    gatk-gather-pileup-summaries.py -j ${(int) (params.mem * 1000)} \\\n                      -D ${ref_genome_dict} \\\n                      -I ${input_pileup} \n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref_genome_dict",
            "input_pileup"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-gather-pileup-summaries:gatk-gather-pileup-summaries.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkCollectOxogMetrics": {
        "name_process": "gatkCollectOxogMetrics",
        "string_process": "\nprocess gatkCollectOxogMetrics {\n  container \"quay.io/icgc-argo/gatk-collect-oxog-metrics:gatk-collect-oxog-metrics.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n  publishDir \"${params.publish_dir}/${task.process.replaceAll(':', '_')}\", mode: \"copy\", enabled: \"${params.publish_dir ? true : ''}\"\n\n  input:\n    path seq\n    path seq_idx\n    path ref_genome_fa\n    path ref_genome_secondary_file\n    path interval_file\n    val paired\n    val dependencies\n\n  output:\n    path \"*.oxog_metrics.tgz\", emit: oxog_metrics\n\n  script:\n    arg_interval_file = interval_file.name == 'NO_FILE' ? \"\" : \"-i ${interval_file}\"\n    arg_paired = paired == \"true\" ? \"-p\" : \"\"\n    \"\"\"\n    gatk-collect-oxog-metrics.py -s ${seq} \\\n                      -r ${ref_genome_fa} \\\n                      -m ${(int) (params.mem * 1000)} ${arg_interval_file} ${arg_paired}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    arg_interval_file = interval_file.name == 'NO_FILE' ? \"\" : \"-i ${interval_file}\"\n    arg_paired = paired == \"true\" ? \"-p\" : \"\"\n    \"\"\"\n    gatk-collect-oxog-metrics.py -s ${seq} \\\n                      -r ${ref_genome_fa} \\\n                      -m ${(int) (params.mem * 1000)} ${arg_interval_file} ${arg_paired}\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seq",
            "seq_idx",
            "ref_genome_fa",
            "ref_genome_secondary_file",
            "interval_file",
            "paired",
            "dependencies"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-collect-oxog-metrics:gatk-collect-oxog-metrics.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\"",
            "publishDir \"${params.publish_dir}/${task.process.replaceAll(':', '_')}\", mode: \"copy\", enabled: \"${params.publish_dir ? true : ''}\""
        ],
        "when": "",
        "stub": ""
    },
    "gatherOxogMetrics": {
        "name_process": "gatherOxogMetrics",
        "string_process": "\nprocess gatherOxogMetrics {\n  container \"quay.io/icgc-argo/gatk-collect-oxog-metrics:gatk-collect-oxog-metrics.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n  publishDir \"${params.publish_dir}/${task.process.replaceAll(':', '_')}\", mode: \"copy\", enabled: \"${params.publish_dir ? true : ''}\"\n\n  input:\n    path oxog_metrics_files\n\n  output:\n    path \"out/*.oxog_metrics.tgz\", emit: oxog_metrics\n\n  script:\n    \"\"\"\n    gather-oxog-metrics.py -m ${oxog_metrics_files}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    gather-oxog-metrics.py -m ${oxog_metrics_files}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "oxog_metrics_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-collect-oxog-metrics:gatk-collect-oxog-metrics.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\"",
            "publishDir \"${params.publish_dir}/${task.process.replaceAll(':', '_')}\", mode: \"copy\", enabled: \"${params.publish_dir ? true : ''}\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkFilterMutectCalls": {
        "name_process": "gatkFilterMutectCalls",
        "string_process": "\nprocess gatkFilterMutectCalls {\n  container \"quay.io/icgc-argo/gatk-filter-mutect-calls:gatk-filter-mutect-calls.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n  publishDir \"${params.publish_dir}/${task.process.replaceAll(':', '_')}\", enabled: \"${params.publish_dir ? true : ''}\"\n\n  input:\n    path unfiltered_vcf\n    path unfiltered_vcf_tbi\n    path ref_genome_fa\n    path ref_genome_secondary_file\n    path contamination_table\n    path segmentation_table\n    path artifact_priors_tar_gz\n    path mutect_stats\n    val m2_extra_filtering_args\n\n  output:\n    path \"*.filtering-stats\", emit: filtering_stats\n    path \"*.filtered.vcf.gz\", emit: filtered_vcf\n    path \"*.filtered.vcf.gz.tbi\", emit: filtered_vcf_tbi\n\n  script:\n    arg_contamination_table = contamination_table.name == 'NO_FILE_cont' ? \"\" : \" --contamination-table ${contamination_table}\"\n    arg_segmentation_table = segmentation_table.name == 'NO_FILE_seg' ? \"\" : \" --tumor-segmentation ${segmentation_table}\"\n    arg_artifact_priors_tar_gz = artifact_priors_tar_gz.name == 'NO_FILE_ob' ? \"\" : \" --ob-priors ${artifact_priors_tar_gz}\"\n    arg_m2_extra_filtering_args = m2_extra_filtering_args == '' ? \"\" : \" -e ${m2_extra_filtering_args}\"\n    \n    \"\"\"\n    gatk-filter-mutect-calls.py -V ${unfiltered_vcf} \\\n                      -R ${ref_genome_fa} \\\n                      -j ${(int) (params.mem * 1000)} \\\n                      --stats ${mutect_stats} \\\n                      ${arg_contamination_table} \\\n                      ${arg_segmentation_table} \\\n                      ${arg_artifact_priors_tar_gz} \\\n                      ${arg_m2_extra_filtering_args}\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    arg_contamination_table = contamination_table.name == 'NO_FILE_cont' ? \"\" : \" --contamination-table ${contamination_table}\"\n    arg_segmentation_table = segmentation_table.name == 'NO_FILE_seg' ? \"\" : \" --tumor-segmentation ${segmentation_table}\"\n    arg_artifact_priors_tar_gz = artifact_priors_tar_gz.name == 'NO_FILE_ob' ? \"\" : \" --ob-priors ${artifact_priors_tar_gz}\"\n    arg_m2_extra_filtering_args = m2_extra_filtering_args == '' ? \"\" : \" -e ${m2_extra_filtering_args}\"\n    \n    \"\"\"\n    gatk-filter-mutect-calls.py -V ${unfiltered_vcf} \\\n                      -R ${ref_genome_fa} \\\n                      -j ${(int) (params.mem * 1000)} \\\n                      --stats ${mutect_stats} \\\n                      ${arg_contamination_table} \\\n                      ${arg_segmentation_table} \\\n                      ${arg_artifact_priors_tar_gz} \\\n                      ${arg_m2_extra_filtering_args}\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "unfiltered_vcf",
            "unfiltered_vcf_tbi",
            "ref_genome_fa",
            "ref_genome_secondary_file",
            "contamination_table",
            "segmentation_table",
            "artifact_priors_tar_gz",
            "mutect_stats",
            "m2_extra_filtering_args"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-filter-mutect-calls:gatk-filter-mutect-calls.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\"",
            "publishDir \"${params.publish_dir}/${task.process.replaceAll(':', '_')}\", enabled: \"${params.publish_dir ? true : ''}\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkApplyBQSR": {
        "name_process": "gatkApplyBQSR",
        "string_process": "\nprocess gatkApplyBQSR {\n  container \"quay.io/icgc-argo/gatk-apply-bqsr:gatk-apply-bqsr.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    path seq\n    path seq_idx\n    path ref_genome_fa\n    path ref_genome_secondary_file\n    path recalibration_report\n    val intervals\n    val output_bam_basename\n\n  output:\n    path \"${arg_output}.bam\", emit: recalibrated_bam\n    path \"${arg_output}.bam.bai\", emit: recalibrated_bam_bai\n    path \"${arg_output}.bam.md5\", emit: recalibrated_bam_md5\n\n  script:\n    if (!intervals) {\n      arg_intervals = \"\"\n      arg_output = output_bam_basename\n    } else {\n      (index, intervals) = intervals\n      arg_intervals = \"-i ${intervals}\"\n      arg_output = \"${index.toString().padLeft(6, '0')}.${output_bam_basename}\"\n    }\n\n    \"\"\"\n    gatk-apply-bqsr.py -s ${seq} \\\n                      -r ${ref_genome_fa} \\\n                      -m ${(int) (params.mem * 1000)} \\\n                      -c ${recalibration_report} \\\n                      -o ${arg_output} ${arg_intervals}\n\n    ln -s ${arg_output}.bai ${arg_output}.bam.bai\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    if (!intervals) {\n      arg_intervals = \"\"\n      arg_output = output_bam_basename\n    } else {\n      (index, intervals) = intervals\n      arg_intervals = \"-i ${intervals}\"\n      arg_output = \"${index.toString().padLeft(6, '0')}.${output_bam_basename}\"\n    }\n\n    \"\"\"\n    gatk-apply-bqsr.py -s ${seq} \\\n                      -r ${ref_genome_fa} \\\n                      -m ${(int) (params.mem * 1000)} \\\n                      -c ${recalibration_report} \\\n                      -o ${arg_output} ${arg_intervals}\n\n    ln -s ${arg_output}.bai ${arg_output}.bam.bai\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seq",
            "seq_idx",
            "ref_genome_fa",
            "ref_genome_secondary_file",
            "recalibration_report",
            "intervals",
            "output_bam_basename"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-apply-bqsr:gatk-apply-bqsr.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkMergeVcfs": {
        "name_process": "gatkMergeVcfs",
        "string_process": "\nprocess gatkMergeVcfs {\n  container \"quay.io/icgc-argo/gatk-merge-vcfs:gatk-merge-vcfs.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    path input_vcfs\n    val output_basename\n\n  output:\n    path \"${output_basename}.vcf.gz\", emit: output_vcf\n    path \"${output_basename}.vcf.gz.tbi\", emit: output_tbi\n\n  script:\n    \"\"\"\n    gatk-merge-vcfs.py \\\n                      -j ${(int) (params.mem * 1000)} \\\n                      -I ${input_vcfs} \\\n                      -O ${output_basename}.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    gatk-merge-vcfs.py \\\n                      -j ${(int) (params.mem * 1000)} \\\n                      -I ${input_vcfs} \\\n                      -O ${output_basename}.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_vcfs",
            "output_basename"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-merge-vcfs:gatk-merge-vcfs.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkCalculateContamination": {
        "name_process": "gatkCalculateContamination",
        "string_process": "\nprocess gatkCalculateContamination {\n  container \"quay.io/icgc-argo/gatk-calculate-contamination:gatk-calculate-contamination.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n                                              \n\n  input:\n    path seq_pileups\n    path matched_pileups\n\n  output:\n    path \"*.contamination_metrics\", emit: contamination_metrics\n    path \"*.segmentation_metrics\", emit: segmentation_metrics\n\n  script:\n\n    arg_matched_pileups = matched_pileups.name == 'NO_FILE' ? \"\" : \"-matched ${matched_pileups}\"\n\n    \"\"\"\n    gatk-calculate-contamination.py -I ${seq_pileups} \\\n                      ${arg_matched_pileups} \\\n                      -j ${(int) (params.mem * 1000)} \n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    arg_matched_pileups = matched_pileups.name == 'NO_FILE' ? \"\" : \"-matched ${matched_pileups}\"\n\n    \"\"\"\n    gatk-calculate-contamination.py -I ${seq_pileups} \\\n                      ${arg_matched_pileups} \\\n                      -j ${(int) (params.mem * 1000)} \n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seq_pileups",
            "matched_pileups"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-calculate-contamination:gatk-calculate-contamination.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkGatherBamFiles": {
        "name_process": "gatkGatherBamFiles",
        "string_process": "\nprocess gatkGatherBamFiles {\n  container \"quay.io/icgc-argo/gatk-gather-bam-files:gatk-gather-bam-files.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    path input_bams\n    val output_bam_basename\n    val compression_level\n\n  output:\n    path \"${output_bam_basename}.bam\", emit: merged_bam\n    path \"${output_bam_basename}.bam.bai\", emit: merged_bam_bai\n    path \"${output_bam_basename}.bam.md5\", emit: merged_bam_md5\n\n  script:\n    arg_compression_level = compression_level != \"null\" ? compression_level : 5\n\n    \"\"\"\n    gatk-gather-bam-files.py -m ${(int) (params.mem * 1000)} \\\n      -i ${input_bams} -o ${output_bam_basename} \\\n      -c ${arg_compression_level}\n\n    ln -s ${output_bam_basename}.bai ${output_bam_basename}.bam.bai\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    arg_compression_level = compression_level != \"null\" ? compression_level : 5\n\n    \"\"\"\n    gatk-gather-bam-files.py -m ${(int) (params.mem * 1000)} \\\n      -i ${input_bams} -o ${output_bam_basename} \\\n      -c ${arg_compression_level}\n\n    ln -s ${output_bam_basename}.bai ${output_bam_basename}.bam.bai\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_bams",
            "output_bam_basename",
            "compression_level"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-gather-bam-files:gatk-gather-bam-files.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkMutect2": {
        "name_process": "gatkMutect2",
        "string_process": "\nprocess gatkMutect2 {\n  container \"quay.io/icgc-argo/gatk-mutect2:gatk-mutect2.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n                               \n\n  input:\n    path tumour_reads\n    path tumour_idx\n    path normal_reads\n    path normal_idx\n    path ref_genome_fa\n    path ref_genome_secondary_file\n    path germline_resource\n    path germline_resource_idx\n    path panel_of_normals\n    path panel_of_normals_idx\n    path interval_file\n\n  output:\n    path \"*${arg_output_prefix}.vcf.gz\", emit: output_vcf\n    path \"*${arg_output_prefix}.vcf.gz.tbi\", emit: output_vcf_tbi\n    path \"*${arg_output_prefix}.vcf.gz.stats\", emit: mutect_stats\n    path \"*${arg_output_prefix}.bamout.bam\", emit: bam_output\n    path \"*${arg_output_prefix}.bamout.bai\", emit: bam_output_bai\n    path \"*${arg_output_prefix}.f1r2.tar.gz\", emit: f1r2_counts\n\n  script:\n    arg_interval_file = interval_file.name.startsWith('NO_FILE') ? \"\" : \"-L ${interval_file}\"\n    arg_output_prefix = tumour_reads\n    arg_germline_resource = germline_resource.name.startsWith('NO_FILE') ? \"\" : \"-g ${germline_resource}\"\n    arg_panel_of_normals = panel_of_normals.name.startsWith('NO_FILE') ? \"\" : \"-p ${panel_of_normals}\"\n\n    \"\"\"\n    gatk-mutect2.py \\\n      -j ${(int) (params.mem * 1000)} \\\n      -R ${ref_genome_fa} \\\n      -t ${tumour_reads} -n ${normal_reads} \\\n      -O ${arg_output_prefix}.vcf.gz \\\n      -b ${arg_output_prefix}.bamout.bam \\\n      -f ${arg_output_prefix}.f1r2.tar.gz \\\n      ${arg_interval_file} \\\n      ${arg_germline_resource} \\\n      ${arg_panel_of_normals}\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    arg_interval_file = interval_file.name.startsWith('NO_FILE') ? \"\" : \"-L ${interval_file}\"\n    arg_output_prefix = tumour_reads\n    arg_germline_resource = germline_resource.name.startsWith('NO_FILE') ? \"\" : \"-g ${germline_resource}\"\n    arg_panel_of_normals = panel_of_normals.name.startsWith('NO_FILE') ? \"\" : \"-p ${panel_of_normals}\"\n\n    \"\"\"\n    gatk-mutect2.py \\\n      -j ${(int) (params.mem * 1000)} \\\n      -R ${ref_genome_fa} \\\n      -t ${tumour_reads} -n ${normal_reads} \\\n      -O ${arg_output_prefix}.vcf.gz \\\n      -b ${arg_output_prefix}.bamout.bam \\\n      -f ${arg_output_prefix}.f1r2.tar.gz \\\n      ${arg_interval_file} \\\n      ${arg_germline_resource} \\\n      ${arg_panel_of_normals}\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tumour_reads",
            "tumour_idx",
            "normal_reads",
            "normal_idx",
            "ref_genome_fa",
            "ref_genome_secondary_file",
            "germline_resource",
            "germline_resource_idx",
            "panel_of_normals",
            "panel_of_normals_idx",
            "interval_file"
        ],
        "nb_inputs": 11,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-mutect2:gatk-mutect2.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkMergeMutectStats": {
        "name_process": "gatkMergeMutectStats",
        "string_process": "\nprocess gatkMergeMutectStats {\n  container \"quay.io/icgc-argo/gatk-merge-mutect-stats:gatk-merge-mutect-stats.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    path input_stats\n    val output_basename\n\n  output:\n    path \"${output_basename}.stats\", emit: merged_stats\n\n  script:\n    \"\"\"\n    gatk-merge-mutect-stats.py \\\n                      -j ${(int) (params.mem * 1000)} \\\n                      -I ${input_stats} \\\n                      -O ${output_basename}.stats\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    gatk-merge-mutect-stats.py \\\n                      -j ${(int) (params.mem * 1000)} \\\n                      -I ${input_stats} \\\n                      -O ${output_basename}.stats\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_stats",
            "output_basename"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-merge-mutect-stats:gatk-merge-mutect-stats.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkBaseRecalibrator": {
        "name_process": "gatkBaseRecalibrator",
        "string_process": "\nprocess gatkBaseRecalibrator {\n  container \"quay.io/icgc-argo/gatk-base-recalibrator:gatk-base-recalibrator.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    path seq\n    path seq_idx\n    path ref_genome_fa\n    path ref_genome_secondary_file\n    path known_sites_vcfs\n    path known_sites_indices\n    val intervals\n\n  output:\n    path \"${arg_output_prefix}.recal_data.csv\", emit: recalibration_report\n\n  script:\n    if (!intervals) {\n      arg_intervals = \"\"\n      arg_output_prefix = seq\n    } else {\n      (index, intervals) = intervals\n      arg_intervals = \"-i ${intervals}\"\n      arg_output_prefix = \"${index.toString().padLeft(6, '0')}.${seq}\"\n    }\n    arg_known_sites = known_sites_vcfs.name == 'NO_FILE' ? \"\" : \"-k ${known_sites_vcfs}\"\n\n    \"\"\"\n    gatk-base-recalibrator.py -s ${seq} \\\n                      -r ${ref_genome_fa} \\\n                      -m ${(int) (params.mem * 1000)} \\\n                      -o ${arg_output_prefix}.recal_data.csv ${arg_intervals} ${arg_known_sites}\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    if (!intervals) {\n      arg_intervals = \"\"\n      arg_output_prefix = seq\n    } else {\n      (index, intervals) = intervals\n      arg_intervals = \"-i ${intervals}\"\n      arg_output_prefix = \"${index.toString().padLeft(6, '0')}.${seq}\"\n    }\n    arg_known_sites = known_sites_vcfs.name == 'NO_FILE' ? \"\" : \"-k ${known_sites_vcfs}\"\n\n    \"\"\"\n    gatk-base-recalibrator.py -s ${seq} \\\n                      -r ${ref_genome_fa} \\\n                      -m ${(int) (params.mem * 1000)} \\\n                      -o ${arg_output_prefix}.recal_data.csv ${arg_intervals} ${arg_known_sites}\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seq",
            "seq_idx",
            "ref_genome_fa",
            "ref_genome_secondary_file",
            "known_sites_vcfs",
            "known_sites_indices",
            "intervals"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-base-recalibrator:gatk-base-recalibrator.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkGetPileupSummaries": {
        "name_process": "gatkGetPileupSummaries",
        "string_process": "\nprocess gatkGetPileupSummaries {\n  container \"quay.io/icgc-argo/gatk-get-pileup-summaries:gatk-get-pileup-summaries.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n                                          \n\n  input:\n    path seq\n    path seq_idx\n    path ref_genome_fa\n    path ref_genome_secondary_file\n    path variants_resources\n    path variants_secondary_file\n    path interval_file\n\n  output:\n    path \"*.pileups_metrics.txt\", emit: pileups_metrics\n\n  script:\n    arg_ref_genome_fa = ref_genome_fa.name.startsWith('NO_FILE') ? \"\" : \"-R ${ref_genome_fa}\"\n    arg_interval_file = interval_file.name.startsWith('NO_FILE') ? \"\" : \"-L ${interval_file}\"\n    \"\"\"\n    gatk-get-pileup-summaries.py -I ${seq} \\\n                      -V ${variants_resources} \\\n                      ${arg_interval_file} \\\n                      -j ${(int) (params.mem * 1000)} \\\n                      ${arg_ref_genome_fa}\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    arg_ref_genome_fa = ref_genome_fa.name.startsWith('NO_FILE') ? \"\" : \"-R ${ref_genome_fa}\"\n    arg_interval_file = interval_file.name.startsWith('NO_FILE') ? \"\" : \"-L ${interval_file}\"\n    \"\"\"\n    gatk-get-pileup-summaries.py -I ${seq} \\\n                      -V ${variants_resources} \\\n                      ${arg_interval_file} \\\n                      -j ${(int) (params.mem * 1000)} \\\n                      ${arg_ref_genome_fa}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seq",
            "seq_idx",
            "ref_genome_fa",
            "ref_genome_secondary_file",
            "variants_resources",
            "variants_secondary_file",
            "interval_file"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-get-pileup-summaries:gatk-get-pileup-summaries.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkGatherBQSRReports": {
        "name_process": "gatkGatherBQSRReports",
        "string_process": "\nprocess gatkGatherBQSRReports {\n  container \"quay.io/icgc-argo/gatk-gather-bqsr-reports:gatk-gather-bqsr-reports.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    path input_bqsr_reports\n    val output_report_filename\n\n  output:\n    path \"${output_report_filename}\", emit: bqsr_report\n\n  script:\n    \"\"\"\n    gatk-gather-bqsr-reports.py -m ${(int) (params.mem * 1000)} \\\n      -i ${input_bqsr_reports} -o ${output_report_filename}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    gatk-gather-bqsr-reports.py -m ${(int) (params.mem * 1000)} \\\n      -i ${input_bqsr_reports} -o ${output_report_filename}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_bqsr_reports",
            "output_report_filename"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-gather-bqsr-reports:gatk-gather-bqsr-reports.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "gatkSplitIntervals": {
        "name_process": "gatkSplitIntervals",
        "string_process": "\nprocess gatkSplitIntervals {\n  container \"quay.io/icgc-argo/gatk-split-intervals:gatk-split-intervals.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    val scatter_count\n    path ref_genome_fa\n    path ref_genome_secondary_file\n    path intervals\n\n  output:\n    path \"*.interval_list\", emit: interval_files\n\n  script:\n    arg_intervals = intervals.name != 'NO_FILE' ? \"-L ${intervals}\" : \"\"\n    \"\"\"\n    gatk-split-intervals.py --scatter ${scatter_count} \\\n                      -R ${ref_genome_fa} \\\n                      -j ${(int) (params.mem * 1000)} ${arg_intervals}\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    arg_intervals = intervals.name != 'NO_FILE' ? \"-L ${intervals}\" : \"\"\n    \"\"\"\n    gatk-split-intervals.py --scatter ${scatter_count} \\\n                      -R ${ref_genome_fa} \\\n                      -j ${(int) (params.mem * 1000)} ${arg_intervals}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "scatter_count",
            "ref_genome_fa",
            "ref_genome_secondary_file",
            "intervals"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__gatk-tools",
        "directive": [
            "container \"quay.io/icgc-argo/gatk-split-intervals:gatk-split-intervals.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    }
}
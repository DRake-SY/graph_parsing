{
    "GATK_HAPLOTYPE_CALLER": {
        "name_process": "GATK_HAPLOTYPE_CALLER",
        "string_process": "\nprocess GATK_HAPLOTYPE_CALLER {\n    tag \"${sampleId}_${interval_chunk_name}\"\n    label 'gatk4_container'\n\n    input:\n\n    tuple val(sampleId),\n            path(input_recal_merged_bam),\n            path(input_recal_merged_bai),\n            path(input_recal_merged_md5),\n            val(scatter_id),\n            val(interval_chunk_name),\n            path(interval_list_file)\n\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n\n    output:\n\n    tuple val(sampleId),\n            path(\"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${interval_chunk_name}.vcf\"),\n            path(\"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${interval_chunk_name}.vcf.idx\")\n\n\n    script:\n\n    \"\"\"\n    set -e\n\n    ${params.gatk_path} --java-options \"${params.java_opts}\" \\\n                        HaplotypeCaller \\\n                        -R ${ref_fasta} \\\n                        -I ${input_recal_merged_bam} \\\n                        --output \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${interval_chunk_name}.vcf\" \\\n                        -contamination ${params.contamination} \\\n                        -ERC GVCF \\\n                        -L ${interval_list_file}\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    touch \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${interval_chunk_name}.vcf\" \n    touch \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${interval_chunk_name}.vcf.idx\" \n\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    \"\"\"\n    set -e\n\n    ${params.gatk_path} --java-options \"${params.java_opts}\" \\\n                        HaplotypeCaller \\\n                        -R ${ref_fasta} \\\n                        -I ${input_recal_merged_bam} \\\n                        --output \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${interval_chunk_name}.vcf\" \\\n                        -contamination ${params.contamination} \\\n                        -ERC GVCF \\\n                        -L ${interval_list_file}\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "scatter_id",
            "interval_chunk_name",
            "input_recal_merged_bam",
            "input_recal_merged_bai",
            "input_recal_merged_md5",
            "interval_list_file",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai"
        ],
        "nb_inputs": 10,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "seqeralabs__gatk4-germline-snps-indels",
        "directive": [
            "tag \"${sampleId}_${interval_chunk_name}\"",
            "label 'gatk4_container'"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    touch \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${interval_chunk_name}.vcf\" \n    touch \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${interval_chunk_name}.vcf.idx\" \n\n    \"\"\""
    },
    "GATK_PAIRED_FASTQ_TO_UNMAPPED_BAM": {
        "name_process": "GATK_PAIRED_FASTQ_TO_UNMAPPED_BAM",
        "string_process": "\nprocess GATK_PAIRED_FASTQ_TO_UNMAPPED_BAM {\n    tag \"${sample_name}\"\n    label 'gatk4_container'\n\n\n    input:\n    tuple file(fastq_1),\n            file(fastq_2),\n            val(run_date),\n            val(sample_name),\n            val(library_name),\n            val(platform_name),\n            val(platform_unit),\n            val(readgroup_name),\n            val(sequencing_center)\n\n    output:\n    tuple val(sample_name), path(\"${readgroup_name}.unmapped.bam\")\n\n    script:\n    \"\"\"\n    sleep 60\n    ${params.gatk_path} --java-options \"${params.java_opts}\" \\\n                        FastqToSam \\\n                        --FASTQ ${fastq_1} \\\n                        --FASTQ2 ${fastq_2} \\\n                        --OUTPUT ${readgroup_name}.unmapped.bam \\\n                        --READ_GROUP_NAME ${readgroup_name} \\\n                        --SAMPLE_NAME ${sample_name} \\\n                        --LIBRARY_NAME ${library_name} \\\n                        --PLATFORM_UNIT ${platform_unit} \\\n                        --RUN_DATE ${run_date} \\\n                        --PLATFORM ${platform_name} \\\n                        --SEQUENCING_CENTER ${sequencing_center}\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    touch ${readgroup_name}.unmapped.bam\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    \"\"\"\n    sleep 60\n    ${params.gatk_path} --java-options \"${params.java_opts}\" \\\n                        FastqToSam \\\n                        --FASTQ ${fastq_1} \\\n                        --FASTQ2 ${fastq_2} \\\n                        --OUTPUT ${readgroup_name}.unmapped.bam \\\n                        --READ_GROUP_NAME ${readgroup_name} \\\n                        --SAMPLE_NAME ${sample_name} \\\n                        --LIBRARY_NAME ${library_name} \\\n                        --PLATFORM_UNIT ${platform_unit} \\\n                        --RUN_DATE ${run_date} \\\n                        --PLATFORM ${platform_name} \\\n                        --SEQUENCING_CENTER ${sequencing_center}\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "run_date",
            "sample_name",
            "library_name",
            "platform_name",
            "platform_unit",
            "readgroup_name",
            "sequencing_center",
            "fastq_1",
            "fastq_2"
        ],
        "nb_inputs": 9,
        "outputs": [
            "sample_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "seqeralabs__gatk4-germline-snps-indels",
        "directive": [
            "tag \"${sample_name}\"",
            "label 'gatk4_container'"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    touch ${readgroup_name}.unmapped.bam\n    \"\"\""
    },
    "GATK_GATHER_BAM_FILES": {
        "name_process": "GATK_GATHER_BAM_FILES",
        "string_process": "\nprocess GATK_GATHER_BAM_FILES {\n    tag \"${sampleId}\"\n    label 'gatk4_container'\n\n    input:\n    tuple val(sampleId), path(input_recalibrated_bams)\n\n    output:\n    tuple val(sampleId),\n            path(\"${sampleId}.recal.merged.bam\"),\n            path(\"${sampleId}.recal.merged.bai\"),\n            path(\"${sampleId}.recal.merged.bam.md5\")\n\n    script:\n\n    inputs_bams_to_merge = input_recalibrated_bams\n            .sort(false) { a, b -> a.getBaseName() <=> b.getBaseName() }.join(\" --INPUT \")\n\n    \"\"\"\n    ${params.gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level}  ${params.java_opts} \" \\\n                 GatherBamFiles \\\n                --INPUT ${inputs_bams_to_merge} \\\n                --OUTPUT \"${sampleId}.recal.merged.bam\" \\\n                --CREATE_INDEX true \\\n                --CREATE_MD5_FILE true\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    touch \"${sampleId}.recal.merged.bam\"\n    touch \"${sampleId}.recal.merged.bai\"\n    touch \"${sampleId}.recal.merged.bam.md5\"\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    inputs_bams_to_merge = input_recalibrated_bams\n            .sort(false) { a, b -> a.getBaseName() <=> b.getBaseName() }.join(\" --INPUT \")\n\n    \"\"\"\n    ${params.gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level}  ${params.java_opts} \" \\\n                 GatherBamFiles \\\n                --INPUT ${inputs_bams_to_merge} \\\n                --OUTPUT \"${sampleId}.recal.merged.bam\" \\\n                --CREATE_INDEX true \\\n                --CREATE_MD5_FILE true\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "input_recalibrated_bams"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "seqeralabs__gatk4-germline-snps-indels",
        "directive": [
            "tag \"${sampleId}\"",
            "label 'gatk4_container'"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    touch \"${sampleId}.recal.merged.bam\"\n    touch \"${sampleId}.recal.merged.bai\"\n    touch \"${sampleId}.recal.merged.bam.md5\"\n    \"\"\""
    },
    "BWA_GET_BWA_VERSION": {
        "name_process": "BWA_GET_BWA_VERSION",
        "string_process": "\nprocess BWA_GET_BWA_VERSION {\n    tag \"BWA version\"\n    label \"gitc_container\"\n\n    output:\n    stdout\n\n    script:\n\n    \"\"\"\n\n    ${params.bwa_path} 2>&1  \\\n    | grep -e '^Version'  \\\n    | sed 's/Version: //' \\\n    | tr -d '\\n'\n    \"\"\"\n\n    stub:\n    \"\"\"\n    echo 0.7.15-r1140\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n\n    ${params.bwa_path} 2>&1  \\\n    | grep -e '^Version'  \\\n    | sed 's/Version: //' \\\n    | tr -d '\\n'\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "seqeralabs__gatk4-germline-snps-indels",
        "directive": [
            "tag \"BWA version\"",
            "label \"gitc_container\""
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    echo 0.7.15-r1140\n    \"\"\""
    },
    "GATK_MERGE_BAM_ALIGNMENT": {
        "name_process": "GATK_MERGE_BAM_ALIGNMENT",
        "string_process": "\nprocess GATK_MERGE_BAM_ALIGNMENT {\n    tag \"${sampleId}\"\n    label 'gatk4_container'\n\n    input:\n\n    val(sampleId)\n    path(input_mapped_bam)\n    path(input_unmapped_bam)\n\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n    val(bwa_version)\n\n    output:\n    val(sampleId)\n    path(\"${sampleId}.mapped.merged.bam\")\n\n    script:\n    bwa_commandline = \"bwa mem -K 100000000 -p -v 3 -t 8 -Y ${ref_fasta}\"\n\n    \"\"\"\n    ${params.gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opts}\" \\\n                        MergeBamAlignment  \\\n                        --VALIDATION_STRINGENCY SILENT \\\n                        --EXPECTED_ORIENTATIONS FR \\\n                        --ATTRIBUTES_TO_RETAIN X0 \\\n                        --ALIGNED_BAM ${input_mapped_bam} \\\n                        --UNMAPPED_BAM ${input_unmapped_bam} \\\n                        --OUTPUT ${sampleId}.mapped.merged.bam \\\n                        --REFERENCE_SEQUENCE ${ref_fasta} \\\n                        --PAIRED_RUN true \\\n                        --SORT_ORDER \"unsorted\" \\\n                        --IS_BISULFITE_SEQUENCE false \\\n                        --ALIGNED_READS_ONLY false \\\n                        --CLIP_ADAPTERS false \\\n                        --MAX_RECORDS_IN_RAM 2000000 \\\n                        --ADD_MATE_CIGAR true \\\n                        --MAX_INSERTIONS_OR_DELETIONS -1 \\\n                        --PRIMARY_ALIGNMENT_STRATEGY MostDistant \\\n                        --PROGRAM_RECORD_ID \"bwamem\" \\\n                        --PROGRAM_GROUP_VERSION \"${bwa_version}\" \\\n                        --PROGRAM_GROUP_COMMAND_LINE \"${bwa_commandline}\" \\\n                        --PROGRAM_GROUP_NAME \"bwamem\" \\\n                        --UNMAPPED_READ_STRATEGY COPY_TO_TAG \\\n                        --ALIGNER_PROPER_PAIR_FLAGS true \\\n                        --UNMAP_CONTAMINANT_READS true\n    \"\"\"\n\n    stub:\n    \"\"\"\n    touch ${sampleId}.mapped.merged.bam\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    bwa_commandline = \"bwa mem -K 100000000 -p -v 3 -t 8 -Y ${ref_fasta}\"\n\n    \"\"\"\n    ${params.gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opts}\" \\\n                        MergeBamAlignment  \\\n                        --VALIDATION_STRINGENCY SILENT \\\n                        --EXPECTED_ORIENTATIONS FR \\\n                        --ATTRIBUTES_TO_RETAIN X0 \\\n                        --ALIGNED_BAM ${input_mapped_bam} \\\n                        --UNMAPPED_BAM ${input_unmapped_bam} \\\n                        --OUTPUT ${sampleId}.mapped.merged.bam \\\n                        --REFERENCE_SEQUENCE ${ref_fasta} \\\n                        --PAIRED_RUN true \\\n                        --SORT_ORDER \"unsorted\" \\\n                        --IS_BISULFITE_SEQUENCE false \\\n                        --ALIGNED_READS_ONLY false \\\n                        --CLIP_ADAPTERS false \\\n                        --MAX_RECORDS_IN_RAM 2000000 \\\n                        --ADD_MATE_CIGAR true \\\n                        --MAX_INSERTIONS_OR_DELETIONS -1 \\\n                        --PRIMARY_ALIGNMENT_STRATEGY MostDistant \\\n                        --PROGRAM_RECORD_ID \"bwamem\" \\\n                        --PROGRAM_GROUP_VERSION \"${bwa_version}\" \\\n                        --PROGRAM_GROUP_COMMAND_LINE \"${bwa_commandline}\" \\\n                        --PROGRAM_GROUP_NAME \"bwamem\" \\\n                        --UNMAPPED_READ_STRATEGY COPY_TO_TAG \\\n                        --ALIGNER_PROPER_PAIR_FLAGS true \\\n                        --UNMAP_CONTAMINANT_READS true\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "input_mapped_bam",
            "input_unmapped_bam",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai",
            "bwa_version"
        ],
        "nb_inputs": 7,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "seqeralabs__gatk4-germline-snps-indels",
        "directive": [
            "tag \"${sampleId}\"",
            "label 'gatk4_container'"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    touch ${sampleId}.mapped.merged.bam\n    \"\"\""
    },
    "GATK_APPLY_BQSR": {
        "name_process": "GATK_APPLY_BQSR",
        "string_process": "\nprocess GATK_APPLY_BQSR {\n    tag \"${sampleId}_${subgroup_unmapped_name}\"\n    label 'gatk4_container'\n\n\n    input:\n    tuple val(sampleId),\n            path(input_mapped_merged_marked_sorted_bam),\n            path(input_mapped_merged_marked_sorted_bai),\n            path(input_mapped_merged_marked_sorted_md5),\n            path(input_merged_bqsr_report),\n            val(scatter_id),\n            val(subgroup_unmapped_name),\n            val(subgroup_unmapped)\n\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n\n    output:\n    tuple val(sampleId),\n            path(\"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${subgroup_unmapped_name}.recal.bam\")\n\n    script:\n\n    subgroup_unmapped_trimmed = subgroup_unmapped.trim().split(\"\\t\").join(\" -L \")\n\n    \"\"\"\n    ${params.gatk_path} --java-options \"${params.java_opts}\" \\\n                        ApplyBQSR \\\n                        -R ${ref_fasta}  \\\n                        -I ${input_mapped_merged_marked_sorted_bam}  \\\n                        -O \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${subgroup_unmapped_name}.recal.bam\"  \\\n                        -L ${subgroup_unmapped_trimmed} \\\n                        -bqsr ${input_merged_bqsr_report} \\\n                        --static-quantized-quals 10 --static-quantized-quals 20 --static-quantized-quals 30 \\\n                        --add-output-sam-program-record \\\n                        --create-output-bam-md5 \\\n                        --use-original-qualities\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    touch \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${subgroup_unmapped_name}.recal.bam\" \n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    subgroup_unmapped_trimmed = subgroup_unmapped.trim().split(\"\\t\").join(\" -L \")\n\n    \"\"\"\n    ${params.gatk_path} --java-options \"${params.java_opts}\" \\\n                        ApplyBQSR \\\n                        -R ${ref_fasta}  \\\n                        -I ${input_mapped_merged_marked_sorted_bam}  \\\n                        -O \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${subgroup_unmapped_name}.recal.bam\"  \\\n                        -L ${subgroup_unmapped_trimmed} \\\n                        -bqsr ${input_merged_bqsr_report} \\\n                        --static-quantized-quals 10 --static-quantized-quals 20 --static-quantized-quals 30 \\\n                        --add-output-sam-program-record \\\n                        --create-output-bam-md5 \\\n                        --use-original-qualities\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "scatter_id",
            "subgroup_unmapped_name",
            "subgroup_unmapped",
            "input_mapped_merged_marked_sorted_bam",
            "input_mapped_merged_marked_sorted_bai",
            "input_mapped_merged_marked_sorted_md5",
            "input_merged_bqsr_report",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai"
        ],
        "nb_inputs": 11,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "seqeralabs__gatk4-germline-snps-indels",
        "directive": [
            "tag \"${sampleId}_${subgroup_unmapped_name}\"",
            "label 'gatk4_container'"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    touch \"${sampleId}.${scatter_id.toString().padLeft(2, '0')}.${subgroup_unmapped_name}.recal.bam\" \n    \"\"\""
    },
    "GATK_MERGE_VCFS": {
        "name_process": "GATK_MERGE_VCFS",
        "string_process": "\nprocess GATK_MERGE_VCFS {\n    tag \"${sampleId}\"\n    label 'gatk4_container'\n\n    input:\n    tuple val(sampleId),\n            path(input_vcfs_to_merge),\n            path(inputs_vcf_indices)\n\n\n    output:\n    tuple val(sampleId), path(\"${sampleId}.merged.vcf\")\n\n    script:\n\n    input_vcfs_params = input_vcfs_to_merge\n            .sort(false) { a, b -> a.getBaseName() <=> b.getBaseName() }.join(\" --INPUT \")\n\n    \"\"\"\n    set -e\n\n    ${params.gatk_path} --java-options \"${params.java_opts}\"  \\\n                        MergeVcfs \\\n                        --INPUT ${input_vcfs_params} \\\n                        --OUTPUT ${sampleId}.merged.vcf\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    touch ${sampleId}.merged.vcf\n    \"\"\"\n\n}",
        "nb_lignes_process": 33,
        "string_script": "    input_vcfs_params = input_vcfs_to_merge\n            .sort(false) { a, b -> a.getBaseName() <=> b.getBaseName() }.join(\" --INPUT \")\n\n    \"\"\"\n    set -e\n\n    ${params.gatk_path} --java-options \"${params.java_opts}\"  \\\n                        MergeVcfs \\\n                        --INPUT ${input_vcfs_params} \\\n                        --OUTPUT ${sampleId}.merged.vcf\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "input_vcfs_to_merge",
            "inputs_vcf_indices"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "seqeralabs__gatk4-germline-snps-indels",
        "directive": [
            "tag \"${sampleId}\"",
            "label 'gatk4_container'"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    touch ${sampleId}.merged.vcf\n    \"\"\""
    },
    "GATK_MARK_DUPLICATES": {
        "name_process": "GATK_MARK_DUPLICATES",
        "string_process": "\nprocess GATK_MARK_DUPLICATES {\n    tag \"${sampleId}\"\n    label 'gatk4_container'\n\n    input:\n    val(sampleId)\n    path(input_mapped_merged_bam)\n\n    output:\n    val(sampleId)\n    path(\"${sampleId}_merged.deduped.bam\")\n    path(\"${sampleId}_merged.deduped.metrics.txt\")\n\n    script:\n\n    \"\"\"\n    ${params.gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opts}\" \\\n                        MarkDuplicates \\\n                        --INPUT ${input_mapped_merged_bam} \\\n                        --OUTPUT ${sampleId}_merged.deduped.bam \\\n                        --METRICS_FILE ${sampleId}_merged.deduped.metrics.txt \\\n                        --VALIDATION_STRINGENCY SILENT \\\n                        --OPTICAL_DUPLICATE_PIXEL_DISTANCE 2500 \\\n                        --ASSUME_SORT_ORDER \"queryname\" \\\n                        --CREATE_MD5_FILE true\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    touch ${sampleId}_merged.deduped.bam\n    touch ${sampleId}_merged.deduped.metrics.txt\n    \"\"\"\n\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    ${params.gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opts}\" \\\n                        MarkDuplicates \\\n                        --INPUT ${input_mapped_merged_bam} \\\n                        --OUTPUT ${sampleId}_merged.deduped.bam \\\n                        --METRICS_FILE ${sampleId}_merged.deduped.metrics.txt \\\n                        --VALIDATION_STRINGENCY SILENT \\\n                        --OPTICAL_DUPLICATE_PIXEL_DISTANCE 2500 \\\n                        --ASSUME_SORT_ORDER \"queryname\" \\\n                        --CREATE_MD5_FILE true\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "MarkDuplicates (IP)"
        ],
        "tools_url": [
            "https://bio.tools/markduplicates_ip"
        ],
        "tools_dico": [
            {
                "name": "MarkDuplicates (IP)",
                "uri": "https://bio.tools/markduplicates_ip",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Marks all duplicate reads in a provided SAM or BAM file and either removes them or flags them.",
                "homepage": "https://galaxy.pasteur.fr/tool_runner?tool_id=toolshed.pasteur.fr/repos/fmareuil/picard_pasteur_wrapper/rgPicardMarkDups/1.56.0"
            }
        ],
        "inputs": [
            "sampleId",
            "input_mapped_merged_bam"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "seqeralabs__gatk4-germline-snps-indels",
        "directive": [
            "tag \"${sampleId}\"",
            "label 'gatk4_container'"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    touch ${sampleId}_merged.deduped.bam\n    touch ${sampleId}_merged.deduped.metrics.txt\n    \"\"\""
    },
    "PICARD_SAM_TO_FASTQ_BWA_MEM": {
        "name_process": "PICARD_SAM_TO_FASTQ_BWA_MEM",
        "string_process": "\nprocess PICARD_SAM_TO_FASTQ_BWA_MEM {\n    tag \"${sampleId}\"\n    label \"gitc_container\"\n\n    input:\n    tuple val(sampleId), path(input_unmapped_bam)\n\n    path(ref_alt)\n    path(ref_amb)\n    path(ref_ann)\n    path(ref_bwt)\n    path(ref_pac)\n    path(ref_sa)\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n    output:\n    val(sampleId)\n    path(\"${sampleId}.mapped.bam\")\n    path(input_unmapped_bam)\n\n    script:\n\n    \"\"\"\n    set -o pipefail\n    set -e\n\n\t${params.java_path} -Dsamjdk.compression_level=${params.compression_level} ${params.java_opts} \\\n\t    -jar ${params.picard_path} \\\n        SamToFastq \\\n        INPUT=${input_unmapped_bam} \\\n        FASTQ=/dev/stdout \\\n        INTERLEAVE=true \\\n        NON_PF=true \\\n    | \\\n\t\t${params.bwa_path} mem \\\n\t\t -K 100000000 -p -v 3 -t 16 -Y ${ref_fasta} /dev/stdin -  2> >(tee ${sampleId}.bwa.stderr.log >&2) \\\n    | \\\n\t\t${params.samtools_path} view -1 - > ${sampleId}.mapped.bam\n    \"\"\"\n\n\n    stub:\n\n    \"\"\"\n    touch ${sampleId}.mapped.bam\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    \"\"\"\n    set -o pipefail\n    set -e\n\n\t${params.java_path} -Dsamjdk.compression_level=${params.compression_level} ${params.java_opts} \\\n\t    -jar ${params.picard_path} \\\n        SamToFastq \\\n        INPUT=${input_unmapped_bam} \\\n        FASTQ=/dev/stdout \\\n        INTERLEAVE=true \\\n        NON_PF=true \\\n    | \\\n\t\t${params.bwa_path} mem \\\n\t\t -K 100000000 -p -v 3 -t 16 -Y ${ref_fasta} /dev/stdin -  2> >(tee ${sampleId}.bwa.stderr.log >&2) \\\n    | \\\n\t\t${params.samtools_path} view -1 - > ${sampleId}.mapped.bam\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "input_unmapped_bam",
            "ref_alt",
            "ref_amb",
            "ref_ann",
            "ref_bwt",
            "ref_pac",
            "ref_sa",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai"
        ],
        "nb_inputs": 11,
        "outputs": [
            "sampleId",
            "input_unmapped_bam"
        ],
        "nb_outputs": 2,
        "name_workflow": "seqeralabs__gatk4-germline-snps-indels",
        "directive": [
            "tag \"${sampleId}\"",
            "label \"gitc_container\""
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    touch ${sampleId}.mapped.bam\n    \"\"\""
    },
    "GATK_GATHER_BQSR_REPORTS": {
        "name_process": "GATK_GATHER_BQSR_REPORTS",
        "string_process": "\nprocess GATK_GATHER_BQSR_REPORTS {\n    tag \"${sampleId}\"\n    label 'gatk4_container'\n\n    input:\n    tuple val(sampleId), path(input_bqsr_reports)\n\n    output:\n    tuple val(sampleId),\n            path(\"${sampleId}.recal_data.csv\")\n\n    script:\n    input_bqsr_params = input_bqsr_reports.join(\" -I \")\n\n    \"\"\"\n    ${params.gatk_path} --java-options ${params.java_opts} \\\n                        GatherBQSRReports \\\n                        -I ${input_bqsr_params} \\\n                        -O \"${sampleId}.recal_data.csv\"\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    touch \"${sampleId}.recal_data.csv\"\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    input_bqsr_params = input_bqsr_reports.join(\" -I \")\n\n    \"\"\"\n    ${params.gatk_path} --java-options ${params.java_opts} \\\n                        GatherBQSRReports \\\n                        -I ${input_bqsr_params} \\\n                        -O \"${sampleId}.recal_data.csv\"\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "input_bqsr_reports"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "seqeralabs__gatk4-germline-snps-indels",
        "directive": [
            "tag \"${sampleId}\"",
            "label 'gatk4_container'"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    touch \"${sampleId}.recal_data.csv\"\n    \"\"\""
    },
    "GATK_BASE_RECALIBRATOR": {
        "name_process": "GATK_BASE_RECALIBRATOR",
        "string_process": "\nprocess GATK_BASE_RECALIBRATOR {\n    tag \"${sampleId}_${subgroup_name}\"\n    label 'gatk4_container'\n\n    input:\n    tuple val(sampleId),\n            path(input_mapped_merged_marked_sorted_bam),\n            path(input_mapped_merged_marked_sorted_bai),\n            path(input_mapped_merged_marked_sorted_md5),\n            val(subgroup_name),\n            val(subgroup)\n\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n    path(dbSNP_vcf)\n    path(dbSNP_vcf_index)\n    path(known_indels_mills)\n    path(known_indels_mills_index)\n    path(known_indels_dbSNP)\n    path(known_indels_dbSNP_index)\n\n    output:\n    tuple val(sampleId),\n            path(\"${sampleId}_recalibration_report_${subgroup_name}.recal_data.csv\")\n\n    script:\n    subgroup_trimmed = subgroup.trim().split(\"\\t\").join(\" -L \")\n\n    \"\"\"\n    ${params.gatk_path} --java-options ${params.java_opts} \\\n                 BaseRecalibrator \\\n                 -R ${ref_fasta} \\\n                 -I ${input_mapped_merged_marked_sorted_bam} \\\n                 --use-original-qualities \\\n                 -O \"${sampleId}_recalibration_report_${subgroup_name}.recal_data.csv\" \\\n                --known-sites ${dbSNP_vcf} \\\n                --known-sites ${known_indels_mills} \\\n                --known-sites ${known_indels_dbSNP} \\\n                -L ${subgroup_trimmed}\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    touch \"${sampleId}_recalibration_report_${subgroup_name}.recal_data.csv\"\n    \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "    subgroup_trimmed = subgroup.trim().split(\"\\t\").join(\" -L \")\n\n    \"\"\"\n    ${params.gatk_path} --java-options ${params.java_opts} \\\n                 BaseRecalibrator \\\n                 -R ${ref_fasta} \\\n                 -I ${input_mapped_merged_marked_sorted_bam} \\\n                 --use-original-qualities \\\n                 -O \"${sampleId}_recalibration_report_${subgroup_name}.recal_data.csv\" \\\n                --known-sites ${dbSNP_vcf} \\\n                --known-sites ${known_indels_mills} \\\n                --known-sites ${known_indels_dbSNP} \\\n                -L ${subgroup_trimmed}\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "subgroup_name",
            "subgroup",
            "input_mapped_merged_marked_sorted_bam",
            "input_mapped_merged_marked_sorted_bai",
            "input_mapped_merged_marked_sorted_md5",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai",
            "dbSNP_vcf",
            "dbSNP_vcf_index",
            "known_indels_mills",
            "known_indels_mills_index",
            "known_indels_dbSNP",
            "known_indels_dbSNP_index"
        ],
        "nb_inputs": 15,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "seqeralabs__gatk4-germline-snps-indels",
        "directive": [
            "tag \"${sampleId}_${subgroup_name}\"",
            "label 'gatk4_container'"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    touch \"${sampleId}_recalibration_report_${subgroup_name}.recal_data.csv\"\n    \"\"\""
    },
    "GATK_SORT_AND_FIX_TAGS": {
        "name_process": "GATK_SORT_AND_FIX_TAGS",
        "string_process": "\nprocess GATK_SORT_AND_FIX_TAGS {\n    tag \"${sampleId}\"\n    label 'gatk4_container'\n\n    input:\n    val(sampleId)\n    path(input_mapped_merged_marked_bam)\n\n    path(ref_dict)\n    path(ref_fasta)\n    path(ref_fasta_fai)\n\n    output:\n    tuple val(sampleId),\n            path(\"${sampleId}.mapped.merged.duplicate_marked.sorted.bam\"),\n            path(\"${sampleId}.mapped.merged.duplicate_marked.sorted.bai\"),\n            path(\"${sampleId}.mapped.merged.duplicate_marked.sorted.bam.md5\")\n\n\n    script:\n\n    \"\"\"\n    set -o pipefail\n\n    ${params.gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opts_sort}\" \\\n     SortSam \\\n        --INPUT ${input_mapped_merged_marked_bam} \\\n        --OUTPUT /dev/stdout \\\n        --SORT_ORDER \"coordinate\" \\\n        --CREATE_INDEX false \\\n        --CREATE_MD5_FILE false \\\n    | \\\n    ${params.gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opts_fix}\" \\\n    SetNmMdAndUqTags \\\n        --INPUT /dev/stdin \\\n        --OUTPUT ${sampleId}.mapped.merged.duplicate_marked.sorted.bam \\\n        --CREATE_INDEX true \\\n        --CREATE_MD5_FILE true \\\n        --REFERENCE_SEQUENCE ${ref_fasta}\n    \"\"\"\n\n\n    stub:\n\n    \"\"\"\n    touch ${sampleId}.mapped.merged.duplicate_marked.sorted.bai\n    touch ${sampleId}.mapped.merged.duplicate_marked.sorted.bam\n    touch ${sampleId}.mapped.merged.duplicate_marked.sorted.bam.md5\n    \n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    \"\"\"\n    set -o pipefail\n\n    ${params.gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opts_sort}\" \\\n     SortSam \\\n        --INPUT ${input_mapped_merged_marked_bam} \\\n        --OUTPUT /dev/stdout \\\n        --SORT_ORDER \"coordinate\" \\\n        --CREATE_INDEX false \\\n        --CREATE_MD5_FILE false \\\n    | \\\n    ${params.gatk_path} --java-options \"-Dsamjdk.compression_level=${params.compression_level} ${params.java_opts_fix}\" \\\n    SetNmMdAndUqTags \\\n        --INPUT /dev/stdin \\\n        --OUTPUT ${sampleId}.mapped.merged.duplicate_marked.sorted.bam \\\n        --CREATE_INDEX true \\\n        --CREATE_MD5_FILE true \\\n        --REFERENCE_SEQUENCE ${ref_fasta}\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleId",
            "input_mapped_merged_marked_bam",
            "ref_dict",
            "ref_fasta",
            "ref_fasta_fai"
        ],
        "nb_inputs": 5,
        "outputs": [
            "sampleId"
        ],
        "nb_outputs": 1,
        "name_workflow": "seqeralabs__gatk4-germline-snps-indels",
        "directive": [
            "tag \"${sampleId}\"",
            "label 'gatk4_container'"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    touch ${sampleId}.mapped.merged.duplicate_marked.sorted.bai\n    touch ${sampleId}.mapped.merged.duplicate_marked.sorted.bam\n    touch ${sampleId}.mapped.merged.duplicate_marked.sorted.bam.md5\n    \n    \"\"\""
    }
}
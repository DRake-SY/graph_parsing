{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(params.input)\n    .splitCsv(header:true, sep:'\\t', quote:'\"')\n    .map{ row-> tuple(row.sample_id, file(row.read_1), file(row.read_2)) }\n    .set { samples_tetyper_ch; }",
        "origin": [
            [
                "params.input",
                "A"
            ]
        ],
        "gives": []
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath(params.ref)\n    .first()\n    .set { ref_ch }",
        "origin": [
            [
                "params.ref",
                "A"
            ]
        ],
        "gives": [
            [
                "ref_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n    .fromPath(params.snp_profiles)\n    .first()\n    .set { snp_profiles_ch }",
        "origin": [
            [
                "params.snp_profiles",
                "A"
            ]
        ],
        "gives": [
            [
                "snp_profiles_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n    .fromPath(params.struct_profiles)\n    .first()\n    .set { struct_profiles_ch }",
        "origin": [
            [
                "params.struct_profiles",
                "A"
            ]
        ],
        "gives": [
            [
                "struct_profiles_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "tetyper_summary_ch.collectFile(name: \"summary.txt\", storeDir: \"${params.outdir}\", keepHeader: true, sort: true)",
        "origin": [
            [
                "tetyper_summary_ch",
                "P"
            ]
        ],
        "gives": []
    }
}
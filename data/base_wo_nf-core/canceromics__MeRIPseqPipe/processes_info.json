{
    "CheckDesignCompare": {
        "name_process": "CheckDesignCompare",
        "string_process": " process CheckDesignCompare{\n    input:\n    val design_info from format_design.collect()\n    file comparefile\n\n    output:\n    file (formatted_design) into formatted_designfile\n\n    script:\n    formatted_design = \"formatted_designfile.txt\"\n    formatted_design_info = \"\"\n    for(int i = 0; i < design_info.size(); i+=2 ) {\n        sample = design_info[i] + \".input,\" + design_info[i] + \".ip\"\n        formatted_design_info += design_info[i] + \",\" + sample + \",\" + design_info[i+1] + \"\\n\"\n    }\n    \"\"\"\n    echo \"Sample_ID,input_FileName,ip_FileName,Group\" > $formatted_design\n    echo \"$formatted_design_info\" |awk NF |sort | uniq >> $formatted_design\n    # Check the consistency of designfile and comparefile\n    if [ \"$comparefile\" != \"input.1\" ]; then \n        ## get groups' name in comparefile\n        cat $comparefile | dos2unix | awk -F \"_vs_\" '{print \\$1\"\\\\n\"\\$2}' | sort | uniq > tmp.compare.group\n        ## get groups' name in designfile\n        awk -F, 'NR>1{print \\$4}' $formatted_design | sort | uniq > tmp.design.group\n        intersection_num=\\$(join tmp.compare.group tmp.design.group | wc -l)\n        if [[ \\$intersection_num  != \\$(cat tmp.compare.group| wc -l) ]] ;then \n            echo \"The groups' name of comparefile and designfile are inconsistent.\"\n            echo \"Please check your comparefile: \"$comparefile\n            echo \"The groups' name of comparefile in designfile: \"\\$(join tmp.compare.group tmp.design.group)\n            exit 1\n        fi\n        rm tmp.compare.group tmp.design.group\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    formatted_design = \"formatted_designfile.txt\"\n    formatted_design_info = \"\"\n    for(int i = 0; i < design_info.size(); i+=2 ) {\n        sample = design_info[i] + \".input,\" + design_info[i] + \".ip\"\n        formatted_design_info += design_info[i] + \",\" + sample + \",\" + design_info[i+1] + \"\\n\"\n    }\n    \"\"\"\n    echo \"Sample_ID,input_FileName,ip_FileName,Group\" > $formatted_design\n    echo \"$formatted_design_info\" |awk NF |sort | uniq >> $formatted_design\n    # Check the consistency of designfile and comparefile\n    if [ \"$comparefile\" != \"input.1\" ]; then \n        ## get groups' name in comparefile\n        cat $comparefile | dos2unix | awk -F \"_vs_\" '{print \\$1\"\\\\n\"\\$2}' | sort | uniq > tmp.compare.group\n        ## get groups' name in designfile\n        awk -F, 'NR>1{print \\$4}' $formatted_design | sort | uniq > tmp.design.group\n        intersection_num=\\$(join tmp.compare.group tmp.design.group | wc -l)\n        if [[ \\$intersection_num  != \\$(cat tmp.compare.group| wc -l) ]] ;then \n            echo \"The groups' name of comparefile and designfile are inconsistent.\"\n            echo \"Please check your comparefile: \"$comparefile\n            echo \"The groups' name of comparefile in designfile: \"\\$(join tmp.compare.group tmp.design.group)\n            exit 1\n        fi\n        rm tmp.compare.group tmp.design.group\n    fi\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "SAMPLE"
        ],
        "tools_url": [
            "https://bio.tools/sample"
        ],
        "tools_dico": [
            {
                "name": "SAMPLE",
                "uri": "https://bio.tools/sample",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Linkage mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Functional mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The tool is designed to identify regions that are linked to a recessive disease by analysing genotype data from the parents and unaffected sibs of affected individuals. Since this analysis does not use data from affected patients, it is suited to the identification of lethal recessive genes, when the patients may have died before DNA samples could be obtained.",
                "homepage": "http://dna.leeds.ac.uk/sample/"
            }
        ],
        "inputs": [
            "format_design",
            "comparefile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "formatted_designfile"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "makeBED12": {
        "name_process": "makeBED12",
        "string_process": "\nprocess makeBED12 {\n    label 'build_index'\n    tag \"gtf2bed12\"\n    publishDir path: { params.saveReference ? \"${params.outdir}/Genome/reference_genome\" : params.outdir },\n                saveAs: { params.saveReference ? it : null }, mode: 'copy'\n\n    when:\n    !params.skip_qc && !params.skip_rseqc || !params.skip_motif\n\n    input:\n    file gtf\n    \n    output:\n    file \"${gtf.baseName}.bed\" into bed12file\n\n    shell:      \n    '''\n    gtf_file=!{gtf}\n    gtfToGenePred -genePredExt -geneNameAsName2 $gtf_file ${gtf_file/.gtf/.tmp}\n    genePredToBed ${gtf_file/.gtf/.tmp} ${gtf_file/.gtf/.bed}\n    '''\n}",
        "nb_lignes_process": 21,
        "string_script": "    '''\n    gtf_file=!{gtf}\n    gtfToGenePred -genePredExt -geneNameAsName2 $gtf_file ${gtf_file/.gtf/.tmp}\n    genePredToBed ${gtf_file/.gtf/.tmp} ${gtf_file/.gtf/.bed}\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtf"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bed12file"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'build_index'",
            "tag \"gtf2bed12\"",
            "publishDir path: { params.saveReference ? \"${params.outdir}/Genome/reference_genome\" : params.outdir } , saveAs: { params.saveReference ? it : null }, mode: 'copy'"
        ],
        "when": "!params.skip_qc && !params.skip_rseqc || !params.skip_motif",
        "stub": ""
    },
    "makechromesize": {
        "name_process": "makechromesize",
        "string_process": "\nprocess makechromesize {\n    label 'build_index'\n    tag \"gtf2bed12\"\n    publishDir path: { params.saveReference ? \"${params.outdir}/Genome/reference_genome\" : params.outdir },\n                saveAs: { params.saveReference ? it : null }, mode: 'copy'\n\n    when:\n    true\n\n    input:\n    file fasta\n    \n    output:\n    file \"chromsizes.file\" into chromsizesfile\n\n    shell:      \n    \"\"\"\n    samtools faidx ${fasta}\n    cut -f1,2 ${fasta}.fai > chromsizes.file\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    samtools faidx ${fasta}\n    cut -f1,2 ${fasta}.fai > chromsizes.file\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chromsizesfile"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'build_index'",
            "tag \"gtf2bed12\"",
            "publishDir path: { params.saveReference ? \"${params.outdir}/Genome/reference_genome\" : params.outdir } , saveAs: { params.saveReference ? it : null }, mode: 'copy'"
        ],
        "when": "true",
        "stub": ""
    },
    "MakeTophat2Index": {
        "name_process": "MakeTophat2Index",
        "string_process": " process MakeTophat2Index {\n        label 'build_index'\n        tag \"tophat2_index\"\n        publishDir path: { params.saveReference ? \"${params.outdir}/Genome/\": params.outdir },\n                   saveAs: { params.saveReference ? it : null }, mode: 'copy'\n        input:\n        file fasta\n\n        output:\n        file \"Tophat2Index/*\" into tophat2_index\n\n        when:\n        aligner == \"tophat2\"\n\n        script:\n        tophat2_index = \"Tophat2Index/\" + fasta.baseName.toString()\n        \"\"\"\n        mkdir Tophat2Index\n        ln $fasta Tophat2Index\n        bowtie2-build -f $fasta $tophat2_index\n        \"\"\"\n    }",
        "nb_lignes_process": 20,
        "string_script": "        tophat2_index = \"Tophat2Index/\" + fasta.baseName.toString()\n        \"\"\"\n        mkdir Tophat2Index\n        ln $fasta Tophat2Index\n        bowtie2-build -f $fasta $tophat2_index\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tophat2_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'build_index'",
            "tag \"tophat2_index\"",
            "publishDir path: { params.saveReference ? \"${params.outdir}/Genome/\": params.outdir } , saveAs: { params.saveReference ? it : null }, mode: 'copy'"
        ],
        "when": "aligner == \"tophat2\"",
        "stub": ""
    },
    "MakeHisat2Index": {
        "name_process": "MakeHisat2Index",
        "string_process": " process MakeHisat2Index {\n        label 'build_index'\n        tag \"hisat2_index\"\n        publishDir path: { params.saveReference ? \"${params.outdir}/Genome/ \" : params.outdir },\n                   saveAs: { params.saveReference ? it : null }, mode: 'copy'        \n        input:\n        file fasta\n        file gtf\n\n        output:\n        file \"Hisat2Index/*\" into hisat2_index\n\n        when:\n        aligner == \"hisat2\"\n        \n        script:\n        \"\"\"\n        mkdir Hisat2Index\n        hisat2_extract_exons.py $gtf > Hisat2Index/${fasta.baseName}.exon\n        hisat2_extract_splice_sites.py $gtf > Hisat2Index/${fasta.baseName}.ss\n        hisat2-build -p ${task.cpus} -f $fasta --exon Hisat2Index/${fasta.baseName}.exon --ss Hisat2Index/${fasta.baseName}.ss Hisat2Index/${fasta.baseName}\n        \"\"\"\n    }",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        mkdir Hisat2Index\n        hisat2_extract_exons.py $gtf > Hisat2Index/${fasta.baseName}.exon\n        hisat2_extract_splice_sites.py $gtf > Hisat2Index/${fasta.baseName}.ss\n        hisat2-build -p ${task.cpus} -f $fasta --exon Hisat2Index/${fasta.baseName}.exon --ss Hisat2Index/${fasta.baseName}.ss Hisat2Index/${fasta.baseName}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "hisat2_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'build_index'",
            "tag \"hisat2_index\"",
            "publishDir path: { params.saveReference ? \"${params.outdir}/Genome/ \" : params.outdir } , saveAs: { params.saveReference ? it : null }, mode: 'copy'"
        ],
        "when": "aligner == \"hisat2\"",
        "stub": ""
    },
    "MakeBWAIndex": {
        "name_process": "MakeBWAIndex",
        "string_process": " process MakeBWAIndex {\n        label 'build_index'\n        tag \"bwa_index\"\n        publishDir path: { params.saveReference ? \"${params.outdir}/Genome/\" : params.outdir },\n                   saveAs: { params.saveReference ? it : null }, mode: 'copy'\n\n        input:\n        file fasta\n\n        output:\n        file \"BWAIndex/*\" into bwa_index\n\n        when:\n        aligner == \"bwa\"\n     \n        script:\n        \"\"\"\n        mkdir BWAIndex\n        cd BWAIndex/\n        bwa index -p ${fasta.baseName} -a bwtsw ../$fasta\n        cd ../\n        \"\"\"\n    }",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        mkdir BWAIndex\n        cd BWAIndex/\n        bwa index -p ${fasta.baseName} -a bwtsw ../$fasta\n        cd ../\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bwa_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'build_index'",
            "tag \"bwa_index\"",
            "publishDir path: { params.saveReference ? \"${params.outdir}/Genome/\" : params.outdir } , saveAs: { params.saveReference ? it : null }, mode: 'copy'"
        ],
        "when": "aligner == \"bwa\"",
        "stub": ""
    },
    "MakeStarIndex": {
        "name_process": "MakeStarIndex",
        "string_process": " process MakeStarIndex {\n        label 'build_index'\n        tag \"star_index\"\n        publishDir path: { params.saveReference ? \"${params.outdir}/Genome/\" : params.outdir },\n                   saveAs: { params.saveReference ? it : null }, mode: 'copy'\n        input:\n        file fasta\n        file gtf\n\n        output:\n        file \"StarIndex\" into star_index\n\n        when:\n        aligner == \"star\"\n\n        script:\n        readLength = 50\n        overhang = readLength - 1\n        \"\"\"\n        mkdir StarIndex\n        STAR --runThreadN ${task.cpus} \\\n        --runMode genomeGenerate \\\n        --genomeDir StarIndex \\\n        --genomeFastaFiles $fasta \\\n        --sjdbGTFfile $gtf \\\n        --sjdbOverhang $overhang \\\n\t--limitGenomeGenerateRAM 36000000000\n        \"\"\"\n    }",
        "nb_lignes_process": 27,
        "string_script": "        readLength = 50\n        overhang = readLength - 1\n        \"\"\"\n        mkdir StarIndex\n        STAR --runThreadN ${task.cpus} \\\n        --runMode genomeGenerate \\\n        --genomeDir StarIndex \\\n        --genomeFastaFiles $fasta \\\n        --sjdbGTFfile $gtf \\\n        --sjdbOverhang $overhang \\\n\t--limitGenomeGenerateRAM 36000000000\n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "fasta",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "star_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'build_index'",
            "tag \"star_index\"",
            "publishDir path: { params.saveReference ? \"${params.outdir}/Genome/\" : params.outdir } , saveAs: { params.saveReference ? it : null }, mode: 'copy'"
        ],
        "when": "aligner == \"star\"",
        "stub": ""
    },
    "MakerRNAindex": {
        "name_process": "MakerRNAindex",
        "string_process": "\nprocess MakerRNAindex {\n    label 'build_index'\n    tag \"rRNA_index\"\n    publishDir path: { params.saveReference ? \"${params.outdir}/Genome/\" : params.outdir },\n                saveAs: { params.saveReference ? it : null }, mode: 'copy'\n    input:\n    file rRNA_fasta from rRNA_fasta\n\n    output:\n    file \"rRNAindex/*\" into rRNA_index\n\n    when:\n    params.rRNA_fasta && !params.skip_filterrRNA\n\n    script:\n    \"\"\"\n    mkdir rRNAindex\n    hisat2-build -p ${task.cpus} -f $rRNA_fasta rRNAindex/${rRNA_fasta.baseName}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    mkdir rRNAindex\n    hisat2-build -p ${task.cpus} -f $rRNA_fasta rRNAindex/${rRNA_fasta.baseName}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rRNA_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "rRNA_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'build_index'",
            "tag \"rRNA_index\"",
            "publishDir path: { params.saveReference ? \"${params.outdir}/Genome/\" : params.outdir } , saveAs: { params.saveReference ? it : null }, mode: 'copy'"
        ],
        "when": "params.rRNA_fasta && !params.skip_filterrRNA",
        "stub": ""
    },
    "Fastp": {
        "name_process": "Fastp",
        "string_process": "\nprocess Fastp{\n    label 'fastp'\n    tag \"$sample_name\"\n                            \n    publishDir path: { params.skip_fastp ? params.outdir : \"${params.outdir}/QC/fastp\" },\n             saveAs: { params.skip_fastp ? null : it }, mode: 'link'\n        \n    input:\n    set val(sample_id), file(reads), val(reads_single_end), val(gzip), val(input), val(group) from raw_fastq\n\n    output:\n    set val(sample_name), file(\"*_aligners.fastq*\"), val(reads_single_end), val(sample_id), val(gzip), val(input), val(group) into fastqc_reads, fastp_reads\n    file \"*\" into fastp_results\n\n    when:\n    aligner != \"none\"\n\n    shell:\n    skip_fastp = params.skip_fastp\n    if ( reads_single_end ){\n        filename = reads.toString() - ~/(\\.fq)?(\\.fastq)?(\\.gz)?$/\n        sample_name = filename\n        add_aligners = sample_name + \"_aligners.fastq\" + (gzip ? \".gz\" : \"\")\n        \"\"\"\n        if [ $skip_fastp == \"false\" ]; then\n            fastp -i ${reads} -o ${add_aligners} -j ${sample_name}_fastp.json -h ${sample_name}_fastp.html -w ${task.cpus}\n        else\n            mv ${reads} ${add_aligners}\n        fi\n        \"\"\"\n    } else {\n        filename = reads[0].toString() - ~/(_R[0-9])?(_[0-9])?(\\.fq)?(\\.fastq)?(\\.gz)?$/\n        sample_name = filename\n        add_aligners_1 = sample_name + \"_1_aligners.fastq\" + (gzip ? \".gz\" : \"\")\n        add_aligners_2 = sample_name + \"_2_aligners.fastq\" + (gzip ? \".gz\" : \"\")\n        \"\"\"\n        if [ $skip_fastp == \"false\" ]; then  \n            fastp -i ${reads[0]} -o ${add_aligners_1} -I ${reads[1]} -O ${add_aligners_2} -j ${sample_name}_fastp.json -h ${sample_name}_fastp.html -w ${task.cpus}\n        else\n            mv ${reads[0]} ${add_aligners_1}\n            mv ${reads[1]} ${add_aligners_2}\n        fi\n        \"\"\"\n    } \n}",
        "nb_lignes_process": 44,
        "string_script": "    skip_fastp = params.skip_fastp\n    if ( reads_single_end ){\n        filename = reads.toString() - ~/(\\.fq)?(\\.fastq)?(\\.gz)?$/\n        sample_name = filename\n        add_aligners = sample_name + \"_aligners.fastq\" + (gzip ? \".gz\" : \"\")\n        \"\"\"\n        if [ $skip_fastp == \"false\" ]; then\n            fastp -i ${reads} -o ${add_aligners} -j ${sample_name}_fastp.json -h ${sample_name}_fastp.html -w ${task.cpus}\n        else\n            mv ${reads} ${add_aligners}\n        fi\n        \"\"\"\n    } else {\n        filename = reads[0].toString() - ~/(_R[0-9])?(_[0-9])?(\\.fq)?(\\.fastq)?(\\.gz)?$/\n        sample_name = filename\n        add_aligners_1 = sample_name + \"_1_aligners.fastq\" + (gzip ? \".gz\" : \"\")\n        add_aligners_2 = sample_name + \"_2_aligners.fastq\" + (gzip ? \".gz\" : \"\")\n        \"\"\"\n        if [ $skip_fastp == \"false\" ]; then  \n            fastp -i ${reads[0]} -o ${add_aligners_1} -I ${reads[1]} -O ${add_aligners_2} -j ${sample_name}_fastp.json -h ${sample_name}_fastp.html -w ${task.cpus}\n        else\n            mv ${reads[0]} ${add_aligners_1}\n            mv ${reads[1]} ${add_aligners_2}\n        fi\n        \"\"\"\n    }",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "raw_fastq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_reads",
            "fastp_reads",
            "fastp_results"
        ],
        "nb_outputs": 3,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'fastp'",
            "tag \"$sample_name\"",
            "publishDir path: { params.skip_fastp ? params.outdir : \"${params.outdir}/QC/fastp\" } , saveAs: { params.skip_fastp ? null : it }, mode: 'link'"
        ],
        "when": "aligner != \"none\"",
        "stub": ""
    },
    "Fastqc": {
        "name_process": "Fastqc",
        "string_process": "\nprocess Fastqc{\n    tag \"$sample_name\"\n    publishDir path: { params.skip_fastqc ? params.outdir : \"${params.outdir}/QC\" },\n             saveAs: { params.skip_fastqc ? null : it }, mode: 'link'\n\n    input:\n    set val(sample_name), file(reads), val(reads_single_end), val(sample_id), val(gzip), val(input), val(group) from fastqc_reads\n\n    output:\n    file \"fastqc/*\" into fastqc_results\n\n    when:\n    aligner != \"none\" && !params.skip_fastqc\n\n    shell:\n    skip_fastqc = params.skip_fastqc\n    if ( reads_single_end){\n        \"\"\"\n        mkdir fastqc\n        fastqc -o fastqc --noextract ${reads}\n        \"\"\"       \n    } else {\n        \"\"\"\n        mkdir fastqc   \n        fastqc -o fastqc --noextract ${reads[0]}\n        fastqc -o fastqc --noextract ${reads[1]}\n        \"\"\"      \n    }\n}",
        "nb_lignes_process": 28,
        "string_script": "    skip_fastqc = params.skip_fastqc\n    if ( reads_single_end){\n        \"\"\"\n        mkdir fastqc\n        fastqc -o fastqc --noextract ${reads}\n        \"\"\"       \n    } else {\n        \"\"\"\n        mkdir fastqc   \n        fastqc -o fastqc --noextract ${reads[0]}\n        fastqc -o fastqc --noextract ${reads[1]}\n        \"\"\"      \n    }",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "fastqc_reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "tag \"$sample_name\"",
            "publishDir path: { params.skip_fastqc ? params.outdir : \"${params.outdir}/QC\" } , saveAs: { params.skip_fastqc ? null : it }, mode: 'link'"
        ],
        "when": "aligner != \"none\" && !params.skip_fastqc",
        "stub": ""
    },
    "FilterrRNA": {
        "name_process": "FilterrRNA",
        "string_process": " process FilterrRNA {\n    label 'aligners'\n    tag \"$sample_name\"\n    publishDir \"${params.outdir}/alignment/rRNA_dup\", mode: 'link', overwrite: true\n    \n    input:\n    set val(sample_name), file(reads), val(reads_single_end), val(sample_id), val(gzip), val(input), val(group) from rRNA_reads\n    file index from rRNA_index.collect()\n\n    output:\n    set val(sample_name), file(\"*.fastq.gz\"), val(reads_single_end), val(sample_id), val(gzip), val(input), val(group) into tophat2_reads, hisat2_reads, bwa_reads, star_reads\n    file \"*_summary.txt\" into rRNA_log\n\n    when:\n    params.rRNA_fasta && !params.skip_filterrRNA\n\n    script:\n    gzip = true\n    index_base = index[0].toString() - ~/(\\.exon)?(\\.\\d)?(\\.fa)?(\\.gtf)?(\\.ht2)?$/\n    if (reads_single_end) {\n        \"\"\"\n        hisat2 --summary-file ${sample_name}_rRNA_summary.txt \\\n            --no-spliced-alignment --no-softclip --norc --no-unal \\\n            -p ${task.cpus} --dta --un-gz ${sample_id}.fastq.gz \\\n            -x $index_base \\\n            -U $reads | \\\n            samtools view -@ ${task.cpus} -Shub - | \\\n            samtools sort -@ ${task.cpus} -o ${sample_name}_rRNA_sort.bam -\n        \"\"\"\n    } else {\n        \"\"\"\n        hisat2 --summary-file ${sample_name}_rRNA_summary.txt \\\n            --no-spliced-alignment --no-softclip --norc --no-unal \\\n            -p ${task.cpus} --dta --un-conc-gz ${sample_name}_fastq.gz \\\n            -x $index_base \\\n            -1 ${reads[0]} -2 ${reads[1]} | \\\n            samtools view -@ ${task.cpus} -Shub - | \\\n            samtools sort -@ ${task.cpus} -o ${sample_name}_rRNA_sort.bam -\n        mv ${sample_name}_fastq.1.gz ${sample_name}_1.fastq.gz\n        mv ${sample_name}_fastq.2.gz ${sample_name}_2.fastq.gz\n        \"\"\"\n    }\n    }",
        "nb_lignes_process": 41,
        "string_script": "    gzip = true\n    index_base = index[0].toString() - ~/(\\.exon)?(\\.\\d)?(\\.fa)?(\\.gtf)?(\\.ht2)?$/\n    if (reads_single_end) {\n        \"\"\"\n        hisat2 --summary-file ${sample_name}_rRNA_summary.txt \\\n            --no-spliced-alignment --no-softclip --norc --no-unal \\\n            -p ${task.cpus} --dta --un-gz ${sample_id}.fastq.gz \\\n            -x $index_base \\\n            -U $reads | \\\n            samtools view -@ ${task.cpus} -Shub - | \\\n            samtools sort -@ ${task.cpus} -o ${sample_name}_rRNA_sort.bam -\n        \"\"\"\n    } else {\n        \"\"\"\n        hisat2 --summary-file ${sample_name}_rRNA_summary.txt \\\n            --no-spliced-alignment --no-softclip --norc --no-unal \\\n            -p ${task.cpus} --dta --un-conc-gz ${sample_name}_fastq.gz \\\n            -x $index_base \\\n            -1 ${reads[0]} -2 ${reads[1]} | \\\n            samtools view -@ ${task.cpus} -Shub - | \\\n            samtools sort -@ ${task.cpus} -o ${sample_name}_rRNA_sort.bam -\n        mv ${sample_name}_fastq.1.gz ${sample_name}_1.fastq.gz\n        mv ${sample_name}_fastq.2.gz ${sample_name}_2.fastq.gz\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "rRNA_reads",
            "rRNA_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "tophat2_reads",
            "hisat2_reads",
            "bwa_reads",
            "star_reads",
            "rRNA_log"
        ],
        "nb_outputs": 5,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'aligners'",
            "tag \"$sample_name\"",
            "publishDir \"${params.outdir}/alignment/rRNA_dup\", mode: 'link', overwrite: true"
        ],
        "when": "params.rRNA_fasta && !params.skip_filterrRNA",
        "stub": ""
    },
    "Tophat2Align": {
        "name_process": "Tophat2Align",
        "string_process": "\nprocess Tophat2Align {\n    label 'aligners'\n    tag \"$sample_name\"\n    publishDir \"${params.outdir}/alignment/tophat2\", mode: 'link', overwrite: true\n\n    input:\n    set val(sample_name), file(reads), val(reads_single_end), val(sample_id), val(gzip), val(input), val(group) from tophat2_reads\n    file index from tophat2_index.collect()\n    file gtf\n\n    output:\n    set val(sample_id), file(\"*_tophat2.bam\"), val(reads_single_end), val(gzip), val(input), val(group) into tophat2_bam\n    file \"*_log.txt\" into tophat2_log\n    \n    when:\n    aligner == \"tophat2\"\n\n    script:\n    index_base = index[0].toString() - ~/(\\.rev)?(\\.\\d)?(\\.fa)?(\\.bt2)?$/\n    strand_info = params.stranded == \"no\" ? \"fr-unstranded\" : params.stranded == \"reverse\" ? \"fr-secondstrand\" : \"fr-firststrand\"\n    if (reads_single_end) {\n        \"\"\"\n        tophat  -p ${task.cpus} \\\n                -G $gtf \\\n                -o $sample_name \\\n                --no-novel-juncs \\\n                --library-type $strand_info \\\n                $index_base \\\n                $reads > ${sample_name}_log.txt\n        mv $sample_name/accepted_hits.bam ${sample_name}_tophat2.bam\n        \"\"\"\n    } else {\n        \"\"\"\n        tophat -p ${task.cpus} \\\n                -G $gtf \\\n                -o $sample_name \\\n                --no-novel-juncs \\\n                --library-type $strand_info \\\n                $index_base \\\n                ${reads[0]} ${reads[1]} > ${sample_name}_log.txt\n        mv $sample_name/accepted_hits.bam ${sample_name}_tophat2.bam\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 43,
        "string_script": "    index_base = index[0].toString() - ~/(\\.rev)?(\\.\\d)?(\\.fa)?(\\.bt2)?$/\n    strand_info = params.stranded == \"no\" ? \"fr-unstranded\" : params.stranded == \"reverse\" ? \"fr-secondstrand\" : \"fr-firststrand\"\n    if (reads_single_end) {\n        \"\"\"\n        tophat  -p ${task.cpus} \\\n                -G $gtf \\\n                -o $sample_name \\\n                --no-novel-juncs \\\n                --library-type $strand_info \\\n                $index_base \\\n                $reads > ${sample_name}_log.txt\n        mv $sample_name/accepted_hits.bam ${sample_name}_tophat2.bam\n        \"\"\"\n    } else {\n        \"\"\"\n        tophat -p ${task.cpus} \\\n                -G $gtf \\\n                -o $sample_name \\\n                --no-novel-juncs \\\n                --library-type $strand_info \\\n                $index_base \\\n                ${reads[0]} ${reads[1]} > ${sample_name}_log.txt\n        mv $sample_name/accepted_hits.bam ${sample_name}_tophat2.bam\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "TopHat"
        ],
        "tools_url": [
            "https://bio.tools/tophat"
        ],
        "tools_dico": [
            {
                "name": "TopHat",
                "uri": "https://bio.tools/tophat",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0433",
                                    "term": "Splice site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0433",
                                    "term": "Splice prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            },
                            {
                                "uri": "http://edamontology.org/data_2749",
                                "term": "Genome identifier"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3002",
                                "term": "Annotation track"
                            }
                        ]
                    }
                ],
                "description": "Program that aligns RNA-Seq reads to a genome in order to identify exon-exon splice junctions. It is built on the ultrafast short read mapping program Bowtie. A stable SAMtools version is now packaged with the program.",
                "homepage": "http://ccb.jhu.edu/software/tophat/index.shtml"
            }
        ],
        "inputs": [
            "tophat2_reads",
            "tophat2_index",
            "gtf"
        ],
        "nb_inputs": 3,
        "outputs": [
            "tophat2_bam",
            "tophat2_log"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'aligners'",
            "tag \"$sample_name\"",
            "publishDir \"${params.outdir}/alignment/tophat2\", mode: 'link', overwrite: true"
        ],
        "when": "aligner == \"tophat2\"",
        "stub": ""
    },
    "Hisat2Align": {
        "name_process": "Hisat2Align",
        "string_process": "\nprocess Hisat2Align {\n    label 'aligners'\n    tag \"$sample_name\"\n    publishDir \"${params.outdir}/alignment/hisat2\", mode: 'link', overwrite: true\n\n    input:\n    set val(sample_name), file(reads), val(reads_single_end), val(sample_id), val(gzip), val(input), val(group) from hisat2_reads\n    file index from hisat2_index.collect()\n\n    output:\n    set val(sample_id), file(\"*_hisat2.bam\"), val(reads_single_end), val(gzip), val(input), val(group) into hisat2_bam\n    file \"*_summary.txt\" into hisat2_log\n\n    when:\n    aligner == \"hisat2\"\n\n    script:\n    index_base = index[0].toString() - ~/(\\.exon)?(\\.\\d)?(\\.fa)?(\\.gtf)?(\\.ht2)?$/\n    if (reads_single_end) {\n        \"\"\"\n        hisat2  --summary-file ${sample_name}_hisat2_summary.txt\\\n                -p ${task.cpus} --dta \\\n                -x $index_base \\\n                -U $reads | \\\n                samtools view -@ ${task.cpus} -hbS - > ${sample_name}_hisat2.bam \n        \"\"\"\n    } else {\n        \"\"\"\n        hisat2  --summary-file ${sample_name}_hisat2_summary.txt \\\n                -p ${task.cpus} --dta \\\n                -x $index_base \\\n                -1 ${reads[0]} -2 ${reads[1]} | \\\n                samtools view -@ ${task.cpus} -hbS - > ${sample_name}_hisat2.bam\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 35,
        "string_script": "    index_base = index[0].toString() - ~/(\\.exon)?(\\.\\d)?(\\.fa)?(\\.gtf)?(\\.ht2)?$/\n    if (reads_single_end) {\n        \"\"\"\n        hisat2  --summary-file ${sample_name}_hisat2_summary.txt\\\n                -p ${task.cpus} --dta \\\n                -x $index_base \\\n                -U $reads | \\\n                samtools view -@ ${task.cpus} -hbS - > ${sample_name}_hisat2.bam \n        \"\"\"\n    } else {\n        \"\"\"\n        hisat2  --summary-file ${sample_name}_hisat2_summary.txt \\\n                -p ${task.cpus} --dta \\\n                -x $index_base \\\n                -1 ${reads[0]} -2 ${reads[1]} | \\\n                samtools view -@ ${task.cpus} -hbS - > ${sample_name}_hisat2.bam\n        \"\"\"\n    }",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "hisat2_reads",
            "hisat2_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "hisat2_bam",
            "hisat2_log"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'aligners'",
            "tag \"$sample_name\"",
            "publishDir \"${params.outdir}/alignment/hisat2\", mode: 'link', overwrite: true"
        ],
        "when": "aligner == \"hisat2\"",
        "stub": ""
    },
    "BWAAlign": {
        "name_process": "BWAAlign",
        "string_process": "\nprocess BWAAlign{\n    label 'aligners'\n    tag \"$sample_name\"\n    publishDir \"${params.outdir}/alignment/bwa\", mode: 'link', overwrite: true\n    \n    input:\n    set val(sample_name), file(reads), val(reads_single_end), val(sample_id), val(gzip), val(input), val(group) from bwa_reads\n    file index from bwa_index.collect()\n\n    output:\n    set val(sample_id), file(\"*_bwa.bam\"), val(reads_single_end), val(gzip), val(input), val(group) into bwa_bam\n    file \"*\" into bwa_result\n\n    when:\n    aligner == \"bwa\"\n\n    script:\n    index_base = index[0].toString() - ~/(\\.pac)?(\\.bwt)?(\\.ann)?(\\.amb)?(\\.sa)?(\\.fa)?$/\n    if (reads_single_end) {\n        \"\"\"\n        bwa aln -t ${task.cpus} \\\n                -f ${reads.baseName}.sai \\\n                $index_base \\\n                $reads\n        bwa samse \\\n                $index_base \\\n                ${reads.baseName}.sai \\\n                $reads  | \\\n            samtools view -@ ${task.cpus} -h -bS - > ${sample_name}_bwa.bam\n        \"\"\"\n    } else {\n        \"\"\"\n        bwa aln -t ${task.cpus} \\\n                -f ${reads[0].baseName}.sai \\\n                $index_base \\\n                ${reads[0]}\n        bwa aln -t ${task.cpus} \\\n                -f ${reads[1].baseName}.sai \\\n                $index_base \\\n                ${reads[1]}\n        bwa sampe \\\n                $index_base \\\n                ${reads[0].baseName}.sai ${reads[1].baseName}.sai \\\n                ${reads[0]} ${reads[1]} | \\\n            samtools view -@ ${task.cpus} -h -bS - > ${sample_name}_bwa.bam\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 47,
        "string_script": "    index_base = index[0].toString() - ~/(\\.pac)?(\\.bwt)?(\\.ann)?(\\.amb)?(\\.sa)?(\\.fa)?$/\n    if (reads_single_end) {\n        \"\"\"\n        bwa aln -t ${task.cpus} \\\n                -f ${reads.baseName}.sai \\\n                $index_base \\\n                $reads\n        bwa samse \\\n                $index_base \\\n                ${reads.baseName}.sai \\\n                $reads  | \\\n            samtools view -@ ${task.cpus} -h -bS - > ${sample_name}_bwa.bam\n        \"\"\"\n    } else {\n        \"\"\"\n        bwa aln -t ${task.cpus} \\\n                -f ${reads[0].baseName}.sai \\\n                $index_base \\\n                ${reads[0]}\n        bwa aln -t ${task.cpus} \\\n                -f ${reads[1].baseName}.sai \\\n                $index_base \\\n                ${reads[1]}\n        bwa sampe \\\n                $index_base \\\n                ${reads[0].baseName}.sai ${reads[1].baseName}.sai \\\n                ${reads[0]} ${reads[1]} | \\\n            samtools view -@ ${task.cpus} -h -bS - > ${sample_name}_bwa.bam\n        \"\"\"\n    }",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "BWA",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bwa",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bwa_reads",
            "bwa_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bwa_bam",
            "bwa_result"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'aligners'",
            "tag \"$sample_name\"",
            "publishDir \"${params.outdir}/alignment/bwa\", mode: 'link', overwrite: true"
        ],
        "when": "aligner == \"bwa\"",
        "stub": ""
    },
    "StarAlign": {
        "name_process": "StarAlign",
        "string_process": "\nprocess StarAlign {\n    label 'aligners'\n    tag \"$sample_name\"\n    publishDir \"${params.outdir}/alignment/star\", mode: 'link', overwrite: true\n    \n    input:\n    set val(sample_name), file(reads), val(reads_single_end), val(sample_id), val(gzip), val(input), val(group) from star_reads\n    file star_index from star_index.collect()\n\n    output:\n    set val(sample_id), file(\"*_star.bam\"), val(reads_single_end), val(gzip), val(input), val(group) into star_bam\n    file \"*.final.out\" into star_log\n\n    when:\n    aligner == \"star\"\n\n    script:\n    gzip_cmd = gzip ? \"--readFilesCommand zcat\" : \"\"\n    if (reads_single_end) {\n        \"\"\"\n        STAR --runThreadN ${task.cpus} $gzip_cmd \\\n            --twopassMode Basic \\\n            --genomeDir $star_index \\\n            --readFilesIn $reads  \\\n            --outSAMtype BAM Unsorted \\\n            --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 \\\n            --outFilterIntronMotifs RemoveNoncanonical \\\n            --outFilterMultimapNmax 20 \\\n            --alignIntronMin 20 \\\n            --alignIntronMax 100000 \\\n            --alignMatesGapMax 1000000 \\\n            --outFileNamePrefix ${sample_name}  > ${sample_name}_log.txt\n        mv ${sample_name}Aligned.out.bam ${sample_name}_star.bam\n        \"\"\"\n    } else {\n        \"\"\"\n        STAR --runThreadN ${task.cpus} $gzip_cmd \\\n            --twopassMode Basic \\\n            --genomeDir $star_index \\\n            --readFilesIn ${reads[0]} ${reads[1]}  \\\n            --outSAMtype BAM Unsorted \\\n            --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 \\\n            --outFilterIntronMotifs RemoveNoncanonical \\\n            --outFilterMultimapNmax 20 \\\n            --alignIntronMin 20 \\\n            --alignIntronMax 1000000 \\\n            --alignMatesGapMax 1000000 \\\n            --outFileNamePrefix ${sample_name} > ${sample_name}_log.txt\n        mv ${sample_name}Aligned.out.bam ${sample_name}_star.bam\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 51,
        "string_script": "    gzip_cmd = gzip ? \"--readFilesCommand zcat\" : \"\"\n    if (reads_single_end) {\n        \"\"\"\n        STAR --runThreadN ${task.cpus} $gzip_cmd \\\n            --twopassMode Basic \\\n            --genomeDir $star_index \\\n            --readFilesIn $reads  \\\n            --outSAMtype BAM Unsorted \\\n            --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 \\\n            --outFilterIntronMotifs RemoveNoncanonical \\\n            --outFilterMultimapNmax 20 \\\n            --alignIntronMin 20 \\\n            --alignIntronMax 100000 \\\n            --alignMatesGapMax 1000000 \\\n            --outFileNamePrefix ${sample_name}  > ${sample_name}_log.txt\n        mv ${sample_name}Aligned.out.bam ${sample_name}_star.bam\n        \"\"\"\n    } else {\n        \"\"\"\n        STAR --runThreadN ${task.cpus} $gzip_cmd \\\n            --twopassMode Basic \\\n            --genomeDir $star_index \\\n            --readFilesIn ${reads[0]} ${reads[1]}  \\\n            --outSAMtype BAM Unsorted \\\n            --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 \\\n            --outFilterIntronMotifs RemoveNoncanonical \\\n            --outFilterMultimapNmax 20 \\\n            --alignIntronMin 20 \\\n            --alignIntronMax 1000000 \\\n            --alignMatesGapMax 1000000 \\\n            --outFileNamePrefix ${sample_name} > ${sample_name}_log.txt\n        mv ${sample_name}Aligned.out.bam ${sample_name}_star.bam\n        \"\"\"\n    }",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "star_reads",
            "star_index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "star_bam",
            "star_log"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'aligners'",
            "tag \"$sample_name\"",
            "publishDir \"${params.outdir}/alignment/star\", mode: 'link', overwrite: true"
        ],
        "when": "aligner == \"star\"",
        "stub": ""
    },
    "SortRename": {
        "name_process": "SortRename",
        "string_process": "\nprocess SortRename {\n    label 'sort'\n    tag \"$sample_name\"\n    publishDir \"${params.outdir}/alignment/samtoolsSort/\", mode: 'link', overwrite: true\n    \n    input:\n    set val(sample_id), file(bam_file), val(reads_single_end), val(gzip), val(input), val(group) from merge_bam_file\n\n    output:\n    set val(group), val(sample_id), file(\"*.bam\"), file(\"*.bai\") into sorted_bam\n    file \"*.{bam,bai}\" into rseqc_bam, bedgraph_bam, feacount_bam, cuffbam, peakquan_bam, diffpeak_bam, sng_bam\n    file \"*.bam\" into bam_results\n\n    script:\n    sample_name = sample_id + (input ? \".input_\" : \".ip_\") + group\n    output = sample_name + \".bam\"\n    mapq_cutoff = (params.mapq_cutoff).toInteger() \n    if (!params.skip_sort){\n        \"\"\"\n        if [ \"$mapq_cutoff\" -gt \"0\" ]; then\n            samtools view -hbq $mapq_cutoff $bam_file | samtools sort -@ ${task.cpus} -O BAM -o $output -\n        else\n            samtools sort -@ ${task.cpus} -O BAM -o $output $bam_file\n        fi\n        samtools index -@ ${task.cpus} $output\n        \"\"\"\n    } else {\n        \"\"\"\n        if [ \"$mapq_cutoff\" -gt \"0\" ]; then\n            samtools view -hbq $mapq_cutoff $bam_file > $output\n        else\n            mv $bam_file $output\n        fi\n        samtools index -@ ${task.cpus} $output\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 36,
        "string_script": "    sample_name = sample_id + (input ? \".input_\" : \".ip_\") + group\n    output = sample_name + \".bam\"\n    mapq_cutoff = (params.mapq_cutoff).toInteger() \n    if (!params.skip_sort){\n        \"\"\"\n        if [ \"$mapq_cutoff\" -gt \"0\" ]; then\n            samtools view -hbq $mapq_cutoff $bam_file | samtools sort -@ ${task.cpus} -O BAM -o $output -\n        else\n            samtools sort -@ ${task.cpus} -O BAM -o $output $bam_file\n        fi\n        samtools index -@ ${task.cpus} $output\n        \"\"\"\n    } else {\n        \"\"\"\n        if [ \"$mapq_cutoff\" -gt \"0\" ]; then\n            samtools view -hbq $mapq_cutoff $bam_file > $output\n        else\n            mv $bam_file $output\n        fi\n        samtools index -@ ${task.cpus} $output\n        \"\"\"\n    }",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "wossoutput",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/wossoutput",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "wossoutput",
                "uri": "https://bio.tools/wossoutput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM output data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossoutput.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "merge_bam_file"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sorted_bam",
            "rseqc_bam",
            "bedgraph_bam",
            "feacount_bam",
            "cuffbam",
            "peakquan_bam",
            "diffpeak_bam",
            "sng_bam",
            "bam_results"
        ],
        "nb_outputs": 9,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'sort'",
            "tag \"$sample_name\"",
            "publishDir \"${params.outdir}/alignment/samtoolsSort/\", mode: 'link', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RSeQC": {
        "name_process": "RSeQC",
        "string_process": "\nprocess RSeQC {\n    tag \"$output\"\n    publishDir \"${params.outdir}/QC/rseqc\" , mode: 'link', overwrite: true,\n        saveAs: {filename ->\n                 if (filename.indexOf(\"bam_stat.txt\") > 0)                      \"bam_stat/$filename\"\n            else if (filename.indexOf(\"infer_experiment.txt\") > 0)              \"infer_experiment/$filename\"\n            else if (filename.indexOf(\"read_distribution.txt\") > 0)             \"read_distribution/$filename\"\n            else if (filename.indexOf(\"read_duplication.DupRate_plot.pdf\") > 0) \"read_duplication/$filename\"\n            else if (filename.indexOf(\"read_duplication.DupRate_plot.r\") > 0)   \"read_duplication/rscripts/$filename\"\n            else if (filename.indexOf(\"read_duplication.pos.DupRate.xls\") > 0)  \"read_duplication/dup_pos/$filename\"\n            else if (filename.indexOf(\"read_duplication.seq.DupRate.xls\") > 0)  \"read_duplication/dup_seq/$filename\"\n            else if (filename.indexOf(\"inner_distance.txt\") > 0)                \"inner_distance/$filename\"\n            else if (filename.indexOf(\"inner_distance_freq.txt\") > 0)           \"inner_distance/data/$filename\"\n            else if (filename.indexOf(\"inner_distance_plot.r\") > 0)             \"inner_distance/rscripts/$filename\"\n            else if (filename.indexOf(\"inner_distance_plot.pdf\") > 0)           \"inner_distance/plots/$filename\"\n            else if (filename.indexOf(\"junction_plot.r\") > 0)                   \"junction_annotation/rscripts/$filename\"\n            else if (filename.indexOf(\"junction.xls\") > 0)                      \"junction_annotation/data/$filename\"\n            else if (filename.indexOf(\"splice_events.pdf\") > 0)                 \"junction_annotation/events/$filename\"\n            else if (filename.indexOf(\"splice_junction.pdf\") > 0)               \"junction_annotation/junctions/$filename\"\n            else if (filename.indexOf(\"junctionSaturation_plot.pdf\") > 0)       \"junction_saturation/$filename\"\n            else if (filename.indexOf(\"junctionSaturation_plot.r\") > 0)         \"junction_saturation/rscripts/$filename\"\n            else filename\n        }    \n    when:\n    !params.skip_qc && !params.skip_rseqc\n\n    input:\n    file bam_file from rseqc_bam\n    file bed12 from bed12file.collect()\n\n    output:\n    file \"*\" into rseqc_results\n    file \"*.bam_stat.txt\" into bam_stat_for_normlization\n\n    script:\n    output = bam_file[0].toString() - ~/(\\.bam)?$/\n    \"\"\"    \n    infer_experiment.py -i ${bam_file[0]} -r ${bed12} > ${output}.infer_experiment.txt\n    junction_annotation.py -i ${bam_file[0]}  -o ${output}.rseqc -r ${bed12}\n    bam_stat.py -i ${bam_file[0]}  > ${output}.bam_stat.txt\n    junction_saturation.py -i ${bam_file[0]}  -o ${output}.rseqc -r ${bed12} 2> ${output}.junction_annotation_log.txt\n    inner_distance.py -i ${bam_file[0]}  -o ${output}.rseqc -r ${bed12}\n    read_distribution.py -i ${bam_file[0]}  -r ${bed12} > ${output}.read_distribution.txt\n    read_duplication.py -i ${bam_file[0]}  -o ${output}.read_duplication\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    output = bam_file[0].toString() - ~/(\\.bam)?$/\n    \"\"\"    \n    infer_experiment.py -i ${bam_file[0]} -r ${bed12} > ${output}.infer_experiment.txt\n    junction_annotation.py -i ${bam_file[0]}  -o ${output}.rseqc -r ${bed12}\n    bam_stat.py -i ${bam_file[0]}  > ${output}.bam_stat.txt\n    junction_saturation.py -i ${bam_file[0]}  -o ${output}.rseqc -r ${bed12} 2> ${output}.junction_annotation_log.txt\n    inner_distance.py -i ${bam_file[0]}  -o ${output}.rseqc -r ${bed12}\n    read_distribution.py -i ${bam_file[0]}  -r ${bed12} > ${output}.read_distribution.txt\n    read_duplication.py -i ${bam_file[0]}  -o ${output}.read_duplication\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "wossoutput"
        ],
        "tools_url": [
            "https://bio.tools/wossoutput"
        ],
        "tools_dico": [
            {
                "name": "wossoutput",
                "uri": "https://bio.tools/wossoutput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM output data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossoutput.html"
            }
        ],
        "inputs": [
            "rseqc_bam",
            "bed12file"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rseqc_results",
            "bam_stat_for_normlization"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "tag \"$output\"",
            "publishDir \"${params.outdir}/QC/rseqc\" , mode: 'link', overwrite: true , saveAs: {filename -> if (filename.indexOf(\"bam_stat.txt\") > 0) \"bam_stat/$filename\" else if (filename.indexOf(\"infer_experiment.txt\") > 0) \"infer_experiment/$filename\" else if (filename.indexOf(\"read_distribution.txt\") > 0) \"read_distribution/$filename\" else if (filename.indexOf(\"read_duplication.DupRate_plot.pdf\") > 0) \"read_duplication/$filename\" else if (filename.indexOf(\"read_duplication.DupRate_plot.r\") > 0) \"read_duplication/rscripts/$filename\" else if (filename.indexOf(\"read_duplication.pos.DupRate.xls\") > 0) \"read_duplication/dup_pos/$filename\" else if (filename.indexOf(\"read_duplication.seq.DupRate.xls\") > 0) \"read_duplication/dup_seq/$filename\" else if (filename.indexOf(\"inner_distance.txt\") > 0) \"inner_distance/$filename\" else if (filename.indexOf(\"inner_distance_freq.txt\") > 0) \"inner_distance/data/$filename\" else if (filename.indexOf(\"inner_distance_plot.r\") > 0) \"inner_distance/rscripts/$filename\" else if (filename.indexOf(\"inner_distance_plot.pdf\") > 0) \"inner_distance/plots/$filename\" else if (filename.indexOf(\"junction_plot.r\") > 0) \"junction_annotation/rscripts/$filename\" else if (filename.indexOf(\"junction.xls\") > 0) \"junction_annotation/data/$filename\" else if (filename.indexOf(\"splice_events.pdf\") > 0) \"junction_annotation/events/$filename\" else if (filename.indexOf(\"splice_junction.pdf\") > 0) \"junction_annotation/junctions/$filename\" else if (filename.indexOf(\"junctionSaturation_plot.pdf\") > 0) \"junction_saturation/$filename\" else if (filename.indexOf(\"junctionSaturation_plot.r\") > 0) \"junction_saturation/rscripts/$filename\" else filename }"
        ],
        "when": "!params.skip_qc && !params.skip_rseqc",
        "stub": ""
    },
    "CreateBedgraph": {
        "name_process": "CreateBedgraph",
        "string_process": "\nprocess CreateBedgraph{\n    tag \"$output\"\n    publishDir \"${params.outdir}/QC/rseqc/\", mode: 'link', overwrite: true ,\n        saveAs: {filename ->\n            if (filename.indexOf(\"bedgraph\") > 0) \"bedgraph/$filename\"\n        }\n\n    input:\n    file bam_file from bedgraph_bam\n\n    output:\n    file \"*.bedgraph\" into bedgraph_for_genebody, bedgraph_for_igv\n\n    when:\n    !params.skip_createbedgraph\n\n    script:\n    output = bam_file[0].toString() - ~/(\\.bam)?$/\n    \"\"\"\n    bamCoverage -b ${bam_file[0]} --outFileFormat bedgraph -o ${output}.bedgraph -p ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    output = bam_file[0].toString() - ~/(\\.bam)?$/\n    \"\"\"\n    bamCoverage -b ${bam_file[0]} --outFileFormat bedgraph -o ${output}.bedgraph -p ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "wossoutput"
        ],
        "tools_url": [
            "https://bio.tools/wossoutput"
        ],
        "tools_dico": [
            {
                "name": "wossoutput",
                "uri": "https://bio.tools/wossoutput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM output data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossoutput.html"
            }
        ],
        "inputs": [
            "bedgraph_bam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bedgraph_for_genebody",
            "bedgraph_for_igv"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "tag \"$output\"",
            "publishDir \"${params.outdir}/QC/rseqc/\", mode: 'link', overwrite: true , saveAs: {filename -> if (filename.indexOf(\"bedgraph\") > 0) \"bedgraph/$filename\" }"
        ],
        "when": "!params.skip_createbedgraph",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc{\n    publishDir \"${params.outdir}/Report/QCReadsReport\" , mode: 'link', overwrite: true\n    \n    when:\n    !params.skip_qc && !params.skip_multiqc\n\n    input:\n    file arranged_qc from arranged_qc.collect()\n\n    output:\n    file \"multiqc*\" into multiqc_results\n\n    script:\n    \"\"\"\n    multiqc -n multiqc_report_$aligner .\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    multiqc -n multiqc_report_$aligner .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "arranged_qc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "multiqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "publishDir \"${params.outdir}/Report/QCReadsReport\" , mode: 'link', overwrite: true"
        ],
        "when": "!params.skip_qc && !params.skip_multiqc",
        "stub": ""
    },
    "FeatureCount": {
        "name_process": "FeatureCount",
        "string_process": "\nprocess FeatureCount{\n    label 'analysis'\n    publishDir \"${params.outdir}/expressionAnalysis/featurecounts\", mode: 'link', overwrite: true\n\n    input:\n    file bam_bai_file from feacount_bam.collect()\n    file formatted_designfile from formatted_designfile.collect()\n    file gtf\n\n    output:\n                                                                  \n    file \"*input*.count\" into htseq_count_input, htseq_count_input_to_arrange\n    file \"expression*.matrix\" into htseq_results\n    file \"expression*.count.matrix\" into htseq_diffm6a_results\n\n    script:\n    println LikeletUtils.print_purple(\"Generate gene expression matrix by featureCounts and Rscript\")\n    strand_info = params.stranded == \"no\" ? \"0\" : params.stranded == \"reverse\" ? \"2\" : \"1\"\n    reads_type = params.single_end ? \"\" : \"-p \"\n    minmqs = params.featurecount_minMQS\n    align_tool = params.aligners\n       \"\"\"\n    // bash $baseDir/bin/htseq_count.sh $gtf $strand_info ${task.cpus}\n    // Rscript $baseDir/bin/get_htseq_matrix.R $formatted_designfile ${task.cpus} \n    // \"\"\"\n    \"\"\"\n    for bam_file in *.input*.bam\n    do\n        featureCounts $reads_type-Q $minmqs -T ${task.cpus} -s $strand_info -a ${gtf} -o \\${bam_file/%_sort*/}.txt \\${bam_file};\n    done\n    Rscript $baseDir/bin/generate_featurecount_mat.R $formatted_designfile ${task.cpus} $gtf $align_tool\n    \"\"\" \n}",
        "nb_lignes_process": 32,
        "string_script": "    println LikeletUtils.print_purple(\"Generate gene expression matrix by featureCounts and Rscript\")\n    strand_info = params.stranded == \"no\" ? \"0\" : params.stranded == \"reverse\" ? \"2\" : \"1\"\n    reads_type = params.single_end ? \"\" : \"-p \"\n    minmqs = params.featurecount_minMQS\n    align_tool = params.aligners\n       \"\"\"\n    // bash $baseDir/bin/htseq_count.sh $gtf $strand_info ${task.cpus}\n    // Rscript $baseDir/bin/get_htseq_matrix.R $formatted_designfile ${task.cpus} \n    // \"\"\"\n    \"\"\"\n    for bam_file in *.input*.bam\n    do\n        featureCounts $reads_type-Q $minmqs -T ${task.cpus} -s $strand_info -a ${gtf} -o \\${bam_file/%_sort*/}.txt \\${bam_file};\n    done\n    Rscript $baseDir/bin/generate_featurecount_mat.R $formatted_designfile ${task.cpus} $gtf $align_tool\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "feacount_bam",
            "formatted_designfile",
            "gtf"
        ],
        "nb_inputs": 3,
        "outputs": [
            "htseq_count_input",
            "htseq_count_input_to_arrange",
            "htseq_results",
            "htseq_diffm6a_results"
        ],
        "nb_outputs": 4,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'analysis'",
            "publishDir \"${params.outdir}/expressionAnalysis/featurecounts\", mode: 'link', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "DESeq2": {
        "name_process": "DESeq2",
        "string_process": "\nprocess DESeq2{\n    label 'analysis'\n    tag \"$compare_str\"\n\n    publishDir \"${params.outdir}/expressionAnalysis/DESeq2\", mode: 'link', overwrite: true\n\n    input:\n    file reads_count_input from htseq_count_input.collect()\n    file formatted_designfile from formatted_designfile.collect()\n    val compare_str from compareLines_for_DESeq2\n\n    output:\n    file \"DESeq2*.csv\" into deseq2_results\n    \n    when:\n    !params.skip_deseq2 && !params.skip_expression && params.comparefile\n    \n    script:\n    println LikeletUtils.print_purple(\"Differential expression analysis performed by DESeq2 ($compare_str)\")\n    \"\"\"\n    Rscript $baseDir/bin/DESeq2.R $formatted_designfile $compare_str $params.aligners\n    \"\"\" \n}",
        "nb_lignes_process": 22,
        "string_script": "    println LikeletUtils.print_purple(\"Differential expression analysis performed by DESeq2 ($compare_str)\")\n    \"\"\"\n    Rscript $baseDir/bin/DESeq2.R $formatted_designfile $compare_str $params.aligners\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "htseq_count_input",
            "formatted_designfile",
            "compareLines_for_DESeq2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "deseq2_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'analysis'",
            "tag \"$compare_str\"",
            "publishDir \"${params.outdir}/expressionAnalysis/DESeq2\", mode: 'link', overwrite: true"
        ],
        "when": "!params.skip_deseq2 && !params.skip_expression && params.comparefile",
        "stub": ""
    },
    "EdgeR": {
        "name_process": "EdgeR",
        "string_process": "\nprocess EdgeR{\n    label 'analysis'\n    tag \"$compare_str\"\n    publishDir \"${params.outdir}/expressionAnalysis/edgeR\", mode: 'link', overwrite: true\n\n    input:\n    file reads_count_input from htseq_count_input.collect()\n    file formatted_designfile from formatted_designfile.collect()\n    val compare_str from compareLines_for_edgeR\n\n    output:\n    file \"edgeR*.csv\" into edgeR_results\n    \n    when:\n    !params.skip_edger && !params.skip_expression && params.comparefile\n\n    script:\n    println LikeletUtils.print_purple(\"Differential expression analysis performed by EdgeR ($compare_str)\")\n    \"\"\"\n    Rscript $baseDir/bin/edgeR.R $formatted_designfile $compare_str $params.aligners\n    \"\"\" \n}",
        "nb_lignes_process": 21,
        "string_script": "    println LikeletUtils.print_purple(\"Differential expression analysis performed by EdgeR ($compare_str)\")\n    \"\"\"\n    Rscript $baseDir/bin/edgeR.R $formatted_designfile $compare_str $params.aligners\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "htseq_count_input",
            "formatted_designfile",
            "compareLines_for_edgeR"
        ],
        "nb_inputs": 3,
        "outputs": [
            "edgeR_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'analysis'",
            "tag \"$compare_str\"",
            "publishDir \"${params.outdir}/expressionAnalysis/edgeR\", mode: 'link', overwrite: true"
        ],
        "when": "!params.skip_edger && !params.skip_expression && params.comparefile",
        "stub": ""
    },
    "Metpeak": {
        "name_process": "Metpeak",
        "string_process": "\nprocess Metpeak {\n    tag \"$peakcalling_tag\"\n    label 'onecore_peak'\n    publishDir \"${params.outdir}/peakCalling/metpeak\", mode: 'link', overwrite: true\n\n    input:\n    set val(group), val(sample_id), file(bam_vector), file(bai_vector) from metpeak_bam\n    file gtf\n\n    output:\n    file \"*\" into metpeak_results\n    file \"metpeak*_normalized.bed\" into metpeak_nomarlized_bed\n\n    when:\n    !params.skip_metpeak && !params.skip_peakCalling\n\n    script:\n    input = []; ip = []\n    bam_vector.eachWithIndex{val, ix -> (ix & 1 ? ip : input) << val}\n    input_bam = input.join(','); ip_bam = ip.join(',')\n    peakcalling_tag = params.peakCalling_mode == \"group\" ? \"group_\" + group : sample_id\n    \"\"\"\n    echo $input_bam\n    Rscript $baseDir/bin/MeTPeak.R $input_bam $ip_bam $peakcalling_tag $gtf\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    input = []; ip = []\n    bam_vector.eachWithIndex{val, ix -> (ix & 1 ? ip : input) << val}\n    input_bam = input.join(','); ip_bam = ip.join(',')\n    peakcalling_tag = params.peakCalling_mode == \"group\" ? \"group_\" + group : sample_id\n    \"\"\"\n    echo $input_bam\n    Rscript $baseDir/bin/MeTPeak.R $input_bam $ip_bam $peakcalling_tag $gtf\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "wossinput",
            "IPO"
        ],
        "tools_url": [
            "https://bio.tools/wossinput",
            "https://bio.tools/ipo"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "IPO",
                "uri": "https://bio.tools/ipo",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2425",
                                    "term": "Optimisation and refinement"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The outcome of XCMS data processing strongly depends on the parameter settings. Isotopologue Parameter Optimization is a parameter optimization tool that is applicable for samples and liquid chromatography coupled to high resolution mass spectrometry devices, fast and free of labeling steps. It uses natural, stable 13C isotopes to calculate peak picking score. The different parameter settings are achieved by design of experiment. The resulting scores are evaluated using response surface models.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/IPO.html"
            }
        ],
        "inputs": [
            "metpeak_bam",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "metpeak_results",
            "metpeak_nomarlized_bed"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "tag \"$peakcalling_tag\"",
            "label 'onecore_peak'",
            "publishDir \"${params.outdir}/peakCalling/metpeak\", mode: 'link', overwrite: true"
        ],
        "when": "!params.skip_metpeak && !params.skip_peakCalling",
        "stub": ""
    },
    "Macs2": {
        "name_process": "Macs2",
        "string_process": "\nprocess Macs2{\n    tag \"$peakcalling_tag\"\n    label 'onecore_peak'\n    publishDir \"${params.outdir}/peakCalling/macs2\", mode: 'link', overwrite: true\n\n    input:\n    file fasta\n    set val(group), val(sample_id), file(bam_vector), file(bai_vector) from macs2_bam\n\n    output:\n    file \"macs2*.{xls,narrowPeak,summits}\" into macs2_results\n    file \"macs2*_normalized.bed\" into macs2_nomarlized_bed\n\n    when:\n    !params.skip_macs2 && !params.skip_peakCalling\n\n    script:\n    input = []; ip = []\n    bam_vector.eachWithIndex{val, ix -> (ix & 1 ? ip : input) << val}\n    input_bam = input.join(' '); ip_bam = ip.join(' ')\n    input_file_count = input.size()\n    ip_file_count = ip.size()\n    peakcalling_tag = params.peakCalling_mode == \"group\" ? \"group_\" + group : sample_id\n    arguments = params.peak_threshold == \"high\" ? \"-p 1e-6 --keep-dup 5\" : params.peak_threshold == \"medium\" ? \"-q 0.01 --keep-dup 5\" : \"-q 0.05 --keep-dup 3\"\n    \"\"\"\n    genome_size=\\$(faCount $fasta | tail -1 | awk '{print \\$2-\\$7}')\n    if [ $ip_file_count -gt 1 ]; then samtools merge -f macs2_${peakcalling_tag}_ip.bam $ip_bam; fi\n    if [ $input_file_count -gt 1 ]; then samtools merge -f macs2_${peakcalling_tag}_input.bam $input_bam; fi\n    macs2 callpeak -t *${peakcalling_tag}*ip*.bam -c *${peakcalling_tag}*input*.bam -g \\$genome_size -n macs2_${peakcalling_tag} $arguments -f BAM --nomodel\n    awk -v OFS=\"\\\\t\" '{print \\$1,\\$2,\\$3,\\$1\":\"\\$2\"-\"\\$3,10^-\\$8}' macs2_${peakcalling_tag}_peaks.narrowPeak > macs2_${peakcalling_tag}_normalized.bed\n    mv macs2_${peakcalling_tag}_summits.bed macs2_${peakcalling_tag}.summits\n    \"\"\" \n}",
        "nb_lignes_process": 32,
        "string_script": "    input = []; ip = []\n    bam_vector.eachWithIndex{val, ix -> (ix & 1 ? ip : input) << val}\n    input_bam = input.join(' '); ip_bam = ip.join(' ')\n    input_file_count = input.size()\n    ip_file_count = ip.size()\n    peakcalling_tag = params.peakCalling_mode == \"group\" ? \"group_\" + group : sample_id\n    arguments = params.peak_threshold == \"high\" ? \"-p 1e-6 --keep-dup 5\" : params.peak_threshold == \"medium\" ? \"-q 0.01 --keep-dup 5\" : \"-q 0.05 --keep-dup 3\"\n    \"\"\"\n    genome_size=\\$(faCount $fasta | tail -1 | awk '{print \\$2-\\$7}')\n    if [ $ip_file_count -gt 1 ]; then samtools merge -f macs2_${peakcalling_tag}_ip.bam $ip_bam; fi\n    if [ $input_file_count -gt 1 ]; then samtools merge -f macs2_${peakcalling_tag}_input.bam $input_bam; fi\n    macs2 callpeak -t *${peakcalling_tag}*ip*.bam -c *${peakcalling_tag}*input*.bam -g \\$genome_size -n macs2_${peakcalling_tag} $arguments -f BAM --nomodel\n    awk -v OFS=\"\\\\t\" '{print \\$1,\\$2,\\$3,\\$1\":\"\\$2\"-\"\\$3,10^-\\$8}' macs2_${peakcalling_tag}_peaks.narrowPeak > macs2_${peakcalling_tag}_normalized.bed\n    mv macs2_${peakcalling_tag}_summits.bed macs2_${peakcalling_tag}.summits\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "wossinput",
            "IPO"
        ],
        "tools_url": [
            "https://bio.tools/wossinput",
            "https://bio.tools/ipo"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "IPO",
                "uri": "https://bio.tools/ipo",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2425",
                                    "term": "Optimisation and refinement"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The outcome of XCMS data processing strongly depends on the parameter settings. Isotopologue Parameter Optimization is a parameter optimization tool that is applicable for samples and liquid chromatography coupled to high resolution mass spectrometry devices, fast and free of labeling steps. It uses natural, stable 13C isotopes to calculate peak picking score. The different parameter settings are achieved by design of experiment. The resulting scores are evaluated using response surface models.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/IPO.html"
            }
        ],
        "inputs": [
            "fasta",
            "macs2_bam"
        ],
        "nb_inputs": 2,
        "outputs": [
            "macs2_results",
            "macs2_nomarlized_bed"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "tag \"$peakcalling_tag\"",
            "label 'onecore_peak'",
            "publishDir \"${params.outdir}/peakCalling/macs2\", mode: 'link', overwrite: true"
        ],
        "when": "!params.skip_macs2 && !params.skip_peakCalling",
        "stub": ""
    },
    "MATKpeakCalling": {
        "name_process": "MATKpeakCalling",
        "string_process": "\nprocess MATKpeakCalling {\n    tag \"$peakcalling_tag\"\n    label 'onecore_peak'\n    publishDir \"${params.outdir}/peakCalling/MATK\", mode: 'link', overwrite: true\n\n    input:\n    set val(group), val(sample_id), file(bam_vector), file(bai_vector) from matk_bam\n    file gtf\n\n    output:\n    file \"*\" into matk_results\n    file \"MATK*_normalized.bed\" into matk_nomarlized_bed\n\n    when:\n    !params.skip_matk && !params.skip_peakCalling\n\n    script:\n    matk_jar = params.matk_jar\n    input = []; ip = []\n    bam_vector.eachWithIndex{val, ix -> (ix & 1 ? ip : input) << val}\n    input_bam = input.join(';'); ip_bam = ip.join(';')\n    input_file_count = input.size()\n    peakcalling_tag = params.peakCalling_mode == \"group\" ? \"group_\" + group : sample_id\n    arguments = params.peak_threshold == \"high\" ? \"-q 0.01\" : params.peak_threshold == \"medium\" ? \"-q 0.05\" : \"-q 0.1\"\n    \"\"\"\n    #export OMP_NUM_THREADS=${task.cpus}\n    if [ ! -f \"$matk_jar\" ]; then\n        echo \"Cannot find matk.jar. Please check the param of matk_jar\" 1>&2\n        exit 1\n    fi\n    java -jar $matk_jar -peakCalling $arguments -c $input_file_count -ip \"$ip_bam\" -input \"$input_bam\" -out MATK_${peakcalling_tag}.bed\n    awk 'BEGIN{FS=\"\\\\t\";OFS=\"\\\\t\"}{print \\$1,\\$2,\\$3,\\$1\":\"\\$2\"-\"\\$3,\\$5}' MATK_${peakcalling_tag}.bed > MATK_${peakcalling_tag}_normalized.bed\n    \"\"\"    \n}",
        "nb_lignes_process": 33,
        "string_script": "    matk_jar = params.matk_jar\n    input = []; ip = []\n    bam_vector.eachWithIndex{val, ix -> (ix & 1 ? ip : input) << val}\n    input_bam = input.join(';'); ip_bam = ip.join(';')\n    input_file_count = input.size()\n    peakcalling_tag = params.peakCalling_mode == \"group\" ? \"group_\" + group : sample_id\n    arguments = params.peak_threshold == \"high\" ? \"-q 0.01\" : params.peak_threshold == \"medium\" ? \"-q 0.05\" : \"-q 0.1\"\n    \"\"\"\n    #export OMP_NUM_THREADS=${task.cpus}\n    if [ ! -f \"$matk_jar\" ]; then\n        echo \"Cannot find matk.jar. Please check the param of matk_jar\" 1>&2\n        exit 1\n    fi\n    java -jar $matk_jar -peakCalling $arguments -c $input_file_count -ip \"$ip_bam\" -input \"$input_bam\" -out MATK_${peakcalling_tag}.bed\n    awk 'BEGIN{FS=\"\\\\t\";OFS=\"\\\\t\"}{print \\$1,\\$2,\\$3,\\$1\":\"\\$2\"-\"\\$3,\\$5}' MATK_${peakcalling_tag}.bed > MATK_${peakcalling_tag}_normalized.bed\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "wossinput",
            "IPO"
        ],
        "tools_url": [
            "https://bio.tools/wossinput",
            "https://bio.tools/ipo"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "IPO",
                "uri": "https://bio.tools/ipo",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2425",
                                    "term": "Optimisation and refinement"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The outcome of XCMS data processing strongly depends on the parameter settings. Isotopologue Parameter Optimization is a parameter optimization tool that is applicable for samples and liquid chromatography coupled to high resolution mass spectrometry devices, fast and free of labeling steps. It uses natural, stable 13C isotopes to calculate peak picking score. The different parameter settings are achieved by design of experiment. The resulting scores are evaluated using response surface models.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/IPO.html"
            }
        ],
        "inputs": [
            "matk_bam",
            "gtf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "matk_results",
            "matk_nomarlized_bed"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "tag \"$peakcalling_tag\"",
            "label 'onecore_peak'",
            "publishDir \"${params.outdir}/peakCalling/MATK\", mode: 'link', overwrite: true"
        ],
        "when": "!params.skip_matk && !params.skip_peakCalling",
        "stub": ""
    },
    "MeyerPrepration": {
        "name_process": "MeyerPrepration",
        "string_process": " process MeyerPrepration{\n        label 'build_index'\n        tag \"onecore_peak\"\n        publishDir path: { params.saveReference ? \"${params.outdir}/Genome/meyerPrepration\" : params.outdir },\n                saveAs: { params.saveReference ? it : null }, mode: 'copy'       \n\n        input:\n        file fasta\n        file chromsizesfile from chromsizesfile.collect()\n\n        output:\n        file \"chrName.txt\" into chrNamefile\n        file \"genome.bin25.bed\" into bin25file\n        file \"genomebin\" into genomebin\n\n        when:\n        !params.skip_meyer && !params.skip_peakCalling\n\n        shell:\n        '''\n        awk '{print $1}' !{chromsizesfile} > chrName.txt\n        mkdir genomebin\n        bedtools makewindows -g !{chromsizesfile} -w 25 > genome.bin25.bed\n        awk '{print \"cat genome.bin25.bed | grep \"$1\" > genomebin/\"$1\".bin25.bed\"}' chrName.txt | xargs -iCMD -P!{task.cpus} bash -c CMD\n        '''\n    }",
        "nb_lignes_process": 24,
        "string_script": "        '''\n        awk '{print $1}' !{chromsizesfile} > chrName.txt\n        mkdir genomebin\n        bedtools makewindows -g !{chromsizesfile} -w 25 > genome.bin25.bed\n        awk '{print \"cat genome.bin25.bed | grep \"$1\" > genomebin/\"$1\".bin25.bed\"}' chrName.txt | xargs -iCMD -P!{task.cpus} bash -c CMD\n        '''",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "fasta",
            "chromsizesfile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "chrNamefile",
            "bin25file",
            "genomebin"
        ],
        "nb_outputs": 3,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'build_index'",
            "tag \"onecore_peak\"",
            "publishDir path: { params.saveReference ? \"${params.outdir}/Genome/meyerPrepration\" : params.outdir } , saveAs: { params.saveReference ? it : null }, mode: 'copy'"
        ],
        "when": "!params.skip_meyer && !params.skip_peakCalling",
        "stub": ""
    },
    "Meyer": {
        "name_process": "Meyer",
        "string_process": "\nprocess Meyer{\n    tag \"$peakcalling_tag\"\n    label 'peak_calling'\n    publishDir \"${params.outdir}/peakCalling/meyer\", mode: 'link', overwrite: true\n\n    input:\n    set val(group), val(sample_id), file(bam_vector), file(bai_vector) from meyer_bam\n    file chrNamefile from chrNamefile\n    file bin25file from bin25file\n    file genomebin from genomebin\n\n    output:\n    file \"meyer*.bed\" into meyer_results\n    file \"meyer*_normalized.bed\" into meyer_nomarlized_bed\n\n    when:\n    !params.skip_meyer && !params.skip_peakCalling\n\n    shell:\n    \n                                     \n                                                                                             \n             \n                                                                                                   \n        \n    input = []; ip = []\n    bam_vector.eachWithIndex{val, ix -> (ix & 1 ? ip : input) << val}\n    input_bam = input.join(' '); ip_bam = ip.join(' ')\n    input_file_count = input.size()\n    ip_file_count = ip.size()\n    peakcalling_tag = params.peakCalling_mode == \"group\" ? \"group_\" + group : sample_id\n    arguments = params.peak_threshold == \"high\" ? \"-q 0.01\" : params.peak_threshold == \"medium\" ? \"-q 0.05\" : \"-q 0.1\"\n    '''\n    cp !{baseDir}/bin/meyer.py ./\n    if [ !{ip_file_count} -gt 1 ]; then samtools merge -f meyer_!{peakcalling_tag}_ip.bam !{ip_bam}; fi\n    if [ !{input_file_count} -gt 1 ]; then samtools merge -f meyer_!{peakcalling_tag}_input.bam !{input_bam}; fi    \n    input_bam=*!{peakcalling_tag}*input*.bam\n    ip_bam=*!{peakcalling_tag}*ip*.bam\n    prefix=meyer_!{peakcalling_tag}\n    genomebin_dir=\"genomebin/\"\n    peak_windows_number=$(wc -l !{bin25file}| cut -d \" \" -f 1)\n    input_total_reads_count=$(samtools view -c $input_bam)\n    ip_total_reads_count=$(samtools view -c $ip_bam)\n    mkdir $prefix.tmp \"$prefix.tmp/input\" \"$prefix.tmp/ip\"\n    awk -v bam=\"$input_bam\" -v pre=\"$prefix\" '\n        {print \"samtools view -b \"bam\" \"$1 \">./\"pre\".tmp/input/\"$1\".bam; \\\n        bamToBed -split -i < ./\"pre\".tmp/input/\"$1\".bam>./\"pre\".tmp/input/\"$1\".bed; \\\n        sortBed -i ./\"pre\".tmp/input/\"$1\".bed | intersectBed  -a '${genomebin_dir}'\"$1\".bin25.bed -b - -sorted -c > ./\"pre\".tmp/input/\"$1\".bin25.txt\"}' !{chrNamefile} \\\n        | xargs -iCMD -P!{task.cpus} bash -c CMD\n    awk -v bam=\"$ip_bam\" -v pre=\"$prefix\"  '\n        {print \"samtools view -b \"bam\" \"$1 \">./\"pre\".tmp/ip/\"$1\".bam; \\\n        bamToBed -split -i < ./\"pre\".tmp/ip/\"$1\".bam>./\"pre\".tmp/ip/\"$1\".bed; \\\n        sortBed -i ./\"pre\".tmp/ip/\"$1\".bed | intersectBed  -a '${genomebin_dir}'\"$1\".bin25.bed -b - -sorted -c > ./\"pre\".tmp/ip/\"$1\".bin25.txt\"}' !{chrNamefile} \\\n        | xargs -iCMD -P!{task.cpus} bash -c CMD\n    echo \"cal pval for each 25bp bin\"\n    awk -v pre=\"$prefix\" '\n    {print \"python meyer.py ./\"pre\".tmp/input/\"$1\".bin25.txt ./\"pre\".tmp/ip/\"$1\".bin25.txt '$input_total_reads_count' '$ip_total_reads_count' '$peak_windows_number' ./\"pre\".tmp/ip/\"$1\".m6A.meyer.pval.txt\"}' !{chrNamefile} \\\n    |xargs -iCMD -P!{task.cpus} bash -c CMD\n    cat $prefix.tmp/ip/*.m6A.meyer.pval.txt > ${prefix}.bed\n    awk 'BEGIN{FS=\"\\t\";OFS=\"\\t\"}{print $1,$2,$3,$1\":\"$2\"-\"$3,$4}' ${prefix}.bed > ${prefix}_normalized.bed\n    rm -rf $prefix.tmp\n    ''' \n}",
        "nb_lignes_process": 62,
        "string_script": "    input = []; ip = []\n    bam_vector.eachWithIndex{val, ix -> (ix & 1 ? ip : input) << val}\n    input_bam = input.join(' '); ip_bam = ip.join(' ')\n    input_file_count = input.size()\n    ip_file_count = ip.size()\n    peakcalling_tag = params.peakCalling_mode == \"group\" ? \"group_\" + group : sample_id\n    arguments = params.peak_threshold == \"high\" ? \"-q 0.01\" : params.peak_threshold == \"medium\" ? \"-q 0.05\" : \"-q 0.1\"\n    '''\n    cp !{baseDir}/bin/meyer.py ./\n    if [ !{ip_file_count} -gt 1 ]; then samtools merge -f meyer_!{peakcalling_tag}_ip.bam !{ip_bam}; fi\n    if [ !{input_file_count} -gt 1 ]; then samtools merge -f meyer_!{peakcalling_tag}_input.bam !{input_bam}; fi    \n    input_bam=*!{peakcalling_tag}*input*.bam\n    ip_bam=*!{peakcalling_tag}*ip*.bam\n    prefix=meyer_!{peakcalling_tag}\n    genomebin_dir=\"genomebin/\"\n    peak_windows_number=$(wc -l !{bin25file}| cut -d \" \" -f 1)\n    input_total_reads_count=$(samtools view -c $input_bam)\n    ip_total_reads_count=$(samtools view -c $ip_bam)\n    mkdir $prefix.tmp \"$prefix.tmp/input\" \"$prefix.tmp/ip\"\n    awk -v bam=\"$input_bam\" -v pre=\"$prefix\" '\n        {print \"samtools view -b \"bam\" \"$1 \">./\"pre\".tmp/input/\"$1\".bam; \\\n        bamToBed -split -i < ./\"pre\".tmp/input/\"$1\".bam>./\"pre\".tmp/input/\"$1\".bed; \\\n        sortBed -i ./\"pre\".tmp/input/\"$1\".bed | intersectBed  -a '${genomebin_dir}'\"$1\".bin25.bed -b - -sorted -c > ./\"pre\".tmp/input/\"$1\".bin25.txt\"}' !{chrNamefile} \\\n        | xargs -iCMD -P!{task.cpus} bash -c CMD\n    awk -v bam=\"$ip_bam\" -v pre=\"$prefix\"  '\n        {print \"samtools view -b \"bam\" \"$1 \">./\"pre\".tmp/ip/\"$1\".bam; \\\n        bamToBed -split -i < ./\"pre\".tmp/ip/\"$1\".bam>./\"pre\".tmp/ip/\"$1\".bed; \\\n        sortBed -i ./\"pre\".tmp/ip/\"$1\".bed | intersectBed  -a '${genomebin_dir}'\"$1\".bin25.bed -b - -sorted -c > ./\"pre\".tmp/ip/\"$1\".bin25.txt\"}' !{chrNamefile} \\\n        | xargs -iCMD -P!{task.cpus} bash -c CMD\n    echo \"cal pval for each 25bp bin\"\n    awk -v pre=\"$prefix\" '\n    {print \"python meyer.py ./\"pre\".tmp/input/\"$1\".bin25.txt ./\"pre\".tmp/ip/\"$1\".bin25.txt '$input_total_reads_count' '$ip_total_reads_count' '$peak_windows_number' ./\"pre\".tmp/ip/\"$1\".m6A.meyer.pval.txt\"}' !{chrNamefile} \\\n    |xargs -iCMD -P!{task.cpus} bash -c CMD\n    cat $prefix.tmp/ip/*.m6A.meyer.pval.txt > ${prefix}.bed\n    awk 'BEGIN{FS=\"\\t\";OFS=\"\\t\"}{print $1,$2,$3,$1\":\"$2\"-\"$3,$4}' ${prefix}.bed > ${prefix}_normalized.bed\n    rm -rf $prefix.tmp\n    '''",
        "nb_lignes_script": 36,
        "language_script": "bash",
        "tools": [
            "wossinput",
            "IPO"
        ],
        "tools_url": [
            "https://bio.tools/wossinput",
            "https://bio.tools/ipo"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "IPO",
                "uri": "https://bio.tools/ipo",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2425",
                                    "term": "Optimisation and refinement"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The outcome of XCMS data processing strongly depends on the parameter settings. Isotopologue Parameter Optimization is a parameter optimization tool that is applicable for samples and liquid chromatography coupled to high resolution mass spectrometry devices, fast and free of labeling steps. It uses natural, stable 13C isotopes to calculate peak picking score. The different parameter settings are achieved by design of experiment. The resulting scores are evaluated using response surface models.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/IPO.html"
            }
        ],
        "inputs": [
            "meyer_bam",
            "chrNamefile",
            "bin25file",
            "genomebin"
        ],
        "nb_inputs": 4,
        "outputs": [
            "meyer_results",
            "meyer_nomarlized_bed"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "tag \"$peakcalling_tag\"",
            "label 'peak_calling'",
            "publishDir \"${params.outdir}/peakCalling/meyer\", mode: 'link', overwrite: true"
        ],
        "when": "!params.skip_meyer && !params.skip_peakCalling",
        "stub": ""
    },
    "PeakMerge": {
        "name_process": "PeakMerge",
        "string_process": "\nprocess PeakMerge {\n    label 'analysis'\n    publishDir \"${params.outdir}/peakCalling/mergedBed\", mode: 'link', overwrite: true,\n        saveAs: {filename ->\n            if (filename.indexOf(\"bed\") > 0) \"$filename\"\n        }\n    \n    input:\n    file peak_bed from merged_bed.collect()\n    file formatted_designfile from formatted_designfile.collect()\n\n    output:\n    file \"*merged*.bed\" into merge_result\n    file \"*merged_group*.bed\" into group_merged_bed\n    file \"*_merged_allpeaks.bed\" into all_merged_bed\n\n    script:\n    flag_peakCallingbygroup = params.peakCalling_mode == \"group\" ? 1 : 0\n    peakCalling_tools_count = (params.skip_metpeak ? 0 : 1).toInteger() + (params.skip_macs2 ? 0 : 1).toInteger() + (params.skip_matk ? 0 : 1).toInteger() + (params.skip_meyer ? 0 : 1).toInteger()\n    peakMerged_mode = params.peakMerged_mode\n    if ( peakMerged_mode == \"rank\" )  \n        println LikeletUtils.print_purple(\"Start merge peaks by RobustRankAggreg\")\n    else if ( peakMerged_mode == \"mspc\" )  \n        println LikeletUtils.print_purple(\"Start merge peaks by MSPC\")\n    else\n        println LikeletUtils.print_purple(\"Start merge peaks by \" + peakMerged_mode )\n\n    \"\"\"\n    cp ${baseDir}/bin/normalize_peaks.py ./\n    if [ ${peakMerged_mode} == \"rank\" ]; then \n        cp $baseDir/bin/merge_peaks_by_rank.R ./\n        bash $baseDir/bin/merge_peaks_by_rank.sh $formatted_designfile ${task.cpus} $flag_peakCallingbygroup $peakCalling_tools_count\n    elif [ ${peakMerged_mode} == \"mspc\" ]; then\n        bash $baseDir/bin/merge_peaks_by_mspc.sh $formatted_designfile ${task.cpus} $flag_peakCallingbygroup $peakCalling_tools_count mspc_results\n    elif [ ${peakMerged_mode} == \"macs2\" ]||[ ${peakMerged_mode} == \"metpeak\" ]||[ ${peakMerged_mode} == \"MATK\" ]||[ ${peakMerged_mode} == \"meyer\" ]; then \n        bash $baseDir/bin/merge_peaks_by_bedtools.sh $formatted_designfile ${task.cpus} $flag_peakCallingbygroup $peakCalling_tools_count $peakMerged_mode\n    else\n        echo -e \"Please check your value of peakMerged_mode: $peakMerged_mode\"\n    fi\n    whether_nopeaks=\\$(wc -l *merged*.bed | awk '\\$1==0{print \"error\"}' | uniq)\n    if [[ \\$whether_nopeaks == \"error\" ]] ;then \n        echo \"There is no peaks in one of the merged peaks files\" 1>&2\n        echo \"Merge Peaks by \"${peakMerged_mode}\" may not be suitable for your data.\" 1>&2\n        exit 1\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    flag_peakCallingbygroup = params.peakCalling_mode == \"group\" ? 1 : 0\n    peakCalling_tools_count = (params.skip_metpeak ? 0 : 1).toInteger() + (params.skip_macs2 ? 0 : 1).toInteger() + (params.skip_matk ? 0 : 1).toInteger() + (params.skip_meyer ? 0 : 1).toInteger()\n    peakMerged_mode = params.peakMerged_mode\n    if ( peakMerged_mode == \"rank\" )  \n        println LikeletUtils.print_purple(\"Start merge peaks by RobustRankAggreg\")\n    else if ( peakMerged_mode == \"mspc\" )  \n        println LikeletUtils.print_purple(\"Start merge peaks by MSPC\")\n    else\n        println LikeletUtils.print_purple(\"Start merge peaks by \" + peakMerged_mode )\n\n    \"\"\"\n    cp ${baseDir}/bin/normalize_peaks.py ./\n    if [ ${peakMerged_mode} == \"rank\" ]; then \n        cp $baseDir/bin/merge_peaks_by_rank.R ./\n        bash $baseDir/bin/merge_peaks_by_rank.sh $formatted_designfile ${task.cpus} $flag_peakCallingbygroup $peakCalling_tools_count\n    elif [ ${peakMerged_mode} == \"mspc\" ]; then\n        bash $baseDir/bin/merge_peaks_by_mspc.sh $formatted_designfile ${task.cpus} $flag_peakCallingbygroup $peakCalling_tools_count mspc_results\n    elif [ ${peakMerged_mode} == \"macs2\" ]||[ ${peakMerged_mode} == \"metpeak\" ]||[ ${peakMerged_mode} == \"MATK\" ]||[ ${peakMerged_mode} == \"meyer\" ]; then \n        bash $baseDir/bin/merge_peaks_by_bedtools.sh $formatted_designfile ${task.cpus} $flag_peakCallingbygroup $peakCalling_tools_count $peakMerged_mode\n    else\n        echo -e \"Please check your value of peakMerged_mode: $peakMerged_mode\"\n    fi\n    whether_nopeaks=\\$(wc -l *merged*.bed | awk '\\$1==0{print \"error\"}' | uniq)\n    if [[ \\$whether_nopeaks == \"error\" ]] ;then \n        echo \"There is no peaks in one of the merged peaks files\" 1>&2\n        echo \"Merge Peaks by \"${peakMerged_mode}\" may not be suitable for your data.\" 1>&2\n        exit 1\n    fi\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "merged_bed",
            "formatted_designfile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "merge_result",
            "group_merged_bed",
            "all_merged_bed"
        ],
        "nb_outputs": 3,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'analysis'",
            "publishDir \"${params.outdir}/peakCalling/mergedBed\", mode: 'link', overwrite: true , saveAs: {filename -> if (filename.indexOf(\"bed\") > 0) \"$filename\" }"
        ],
        "when": "",
        "stub": ""
    },
    "BedAnnotated": {
        "name_process": "BedAnnotated",
        "string_process": "\nprocess BedAnnotated{\n    tag \"${all_bed.baseName}\"\n    label 'onecore_peak'\n    publishDir \"${params.outdir}/m6AAnalysis/AnnotatedPeaks\", mode: 'link', overwrite: true\n    \n    input:\n    file all_bed from beds_anno\n    file fasta\n    file gtf\n\n    output:\n    file \"annotatedbygtf/*\" into annotation_results_xy, anno_for_quantification, anno_for_diffreport\n    file \"*_annotatedbyhomer.bed\" into annotation_results_homer\n    \n    when:\n    !params.skip_annotation\n\n    script:\n    annotated_script_dir = baseDir + \"/bin\"\n    bed_prefix = all_bed.toString() - ~/(\\.bed)?$/\n                                     \n    \"\"\"\n    # Annotation Peaks\n    cp ${annotated_script_dir}/intersec.pl ./\n    cp ${annotated_script_dir}/m6A_annotate_forGTF_xingyang2.pl ./\n    mkdir annotatedbygtf\n    perl m6A_annotate_forGTF_xingyang2.pl ${gtf} ${all_bed} annotatedbygtf/${bed_prefix} \n    annotatePeaks.pl ${all_bed} ${fasta} -gtf ${gtf} > ${bed_prefix}_annotatedbyhomer.bed\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    annotated_script_dir = baseDir + \"/bin\"\n    bed_prefix = all_bed.toString() - ~/(\\.bed)?$/\n                                     \n    \"\"\"\n    # Annotation Peaks\n    cp ${annotated_script_dir}/intersec.pl ./\n    cp ${annotated_script_dir}/m6A_annotate_forGTF_xingyang2.pl ./\n    mkdir annotatedbygtf\n    perl m6A_annotate_forGTF_xingyang2.pl ${gtf} ${all_bed} annotatedbygtf/${bed_prefix} \n    annotatePeaks.pl ${all_bed} ${fasta} -gtf ${gtf} > ${bed_prefix}_annotatedbyhomer.bed\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "beds_anno",
            "fasta",
            "gtf"
        ],
        "nb_inputs": 3,
        "outputs": [
            "annotation_results_xy",
            "anno_for_quantification",
            "anno_for_diffreport",
            "annotation_results_homer"
        ],
        "nb_outputs": 4,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "tag \"${all_bed.baseName}\"",
            "label 'onecore_peak'",
            "publishDir \"${params.outdir}/m6AAnalysis/AnnotatedPeaks\", mode: 'link', overwrite: true"
        ],
        "when": "!params.skip_annotation",
        "stub": ""
    },
    "MotifSearching": {
        "name_process": "MotifSearching",
        "string_process": "\nprocess MotifSearching {\n    label 'onecore_peak'\n    tag \"${bed_file.baseName}\"\n    publishDir \"${params.outdir}/m6AAnalysis/motif\", mode: 'link', overwrite: true\n    \n    input:\n    file bed_file from motif_collection\n    file chromsizesfile from chromsizesfile.collect()\n    file bed12 from bed12file.collect()\n    file fasta\n    file gtf\n\n    output:\n    file \"*_{dreme,homer}\" into motif_results, motif_results_for_report\n\n    when:\n    !params.skip_motif\n\n    script:\n    motif_file_dir = baseDir + \"/bin\"\n    bed_prefix = bed_file.baseName\n    length = params.motiflength\n    println LikeletUtils.print_purple(\"Motif analysis is going on by Homer\")\n    \"\"\"\n    # cp ${motif_file_dir}/m6A_motif.meme ./\n    sort -k5,5 -g ${bed_file} | awk 'FNR <= 2000{ print \\$1\"\\\\t\"\\$2\"\\\\t\"\\$3}' > ${bed_prefix}.location\n    intersectBed -wo -a ${bed_prefix}.location -b $gtf | awk -v OFS=\"\\\\t\" '{print \\$1,\\$2,\\$3,\"*\",\"*\",\\$10}' | sort -k1,2 | uniq > ${bed_prefix}_bestpeaks.bed\n    fastaFromBed -name+ -split -s -fi $fasta -bed ${bed_prefix}_bestpeaks.bed > ${bed_prefix}_bestpeaks.fa\n    # ame -oc ${bed_prefix}_ame ${bed_prefix}_bestpeaks.fa m6A_motif.meme\n    shuffleBed -incl ${bed12} -seed 12345 -noOverlapping -i ${bed_prefix}_bestpeaks.bed -g ${chromsizesfile} > ${bed_prefix}_random_peak.bed\n    fastaFromBed -name+ -split -s -fi $fasta -bed ${bed_prefix}_random_peak.bed > ${bed_prefix}_random_peak.fa\n    findMotifs.pl ${bed_prefix}_bestpeaks.fa fasta ${bed_prefix}_homer -fasta ${bed_prefix}_random_peak.fa -p ${task.cpus} \\\n        -len $length -S 10 -rna -dumpFasta > ${bed_prefix}_homer_run.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    motif_file_dir = baseDir + \"/bin\"\n    bed_prefix = bed_file.baseName\n    length = params.motiflength\n    println LikeletUtils.print_purple(\"Motif analysis is going on by Homer\")\n    \"\"\"\n    # cp ${motif_file_dir}/m6A_motif.meme ./\n    sort -k5,5 -g ${bed_file} | awk 'FNR <= 2000{ print \\$1\"\\\\t\"\\$2\"\\\\t\"\\$3}' > ${bed_prefix}.location\n    intersectBed -wo -a ${bed_prefix}.location -b $gtf | awk -v OFS=\"\\\\t\" '{print \\$1,\\$2,\\$3,\"*\",\"*\",\\$10}' | sort -k1,2 | uniq > ${bed_prefix}_bestpeaks.bed\n    fastaFromBed -name+ -split -s -fi $fasta -bed ${bed_prefix}_bestpeaks.bed > ${bed_prefix}_bestpeaks.fa\n    # ame -oc ${bed_prefix}_ame ${bed_prefix}_bestpeaks.fa m6A_motif.meme\n    shuffleBed -incl ${bed12} -seed 12345 -noOverlapping -i ${bed_prefix}_bestpeaks.bed -g ${chromsizesfile} > ${bed_prefix}_random_peak.bed\n    fastaFromBed -name+ -split -s -fi $fasta -bed ${bed_prefix}_random_peak.bed > ${bed_prefix}_random_peak.fa\n    findMotifs.pl ${bed_prefix}_bestpeaks.fa fasta ${bed_prefix}_homer -fasta ${bed_prefix}_random_peak.fa -p ${task.cpus} \\\n        -len $length -S 10 -rna -dumpFasta > ${bed_prefix}_homer_run.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "fastafrombed"
        ],
        "tools_url": [
            "https://bio.tools/fastafrombed"
        ],
        "tools_dico": [
            {
                "name": "fastafrombed",
                "uri": "https://bio.tools/fastafrombed",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3002",
                                "term": "Annotation track"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "Create fasta files with DNA sequences given a BED file.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "motif_collection",
            "chromsizesfile",
            "bed12file",
            "fasta",
            "gtf"
        ],
        "nb_inputs": 5,
        "outputs": [
            "motif_results",
            "motif_results_for_report"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'onecore_peak'",
            "tag \"${bed_file.baseName}\"",
            "publishDir \"${params.outdir}/m6AAnalysis/motif\", mode: 'link', overwrite: true"
        ],
        "when": "!params.skip_motif",
        "stub": ""
    },
    "PeaksMotifReport": {
        "name_process": "PeaksMotifReport",
        "string_process": "\nprocess PeaksMotifReport {\n    publishDir \"${params.outdir}/Report/PeaksMotifReport\", mode: 'link', overwrite: true\n    \n    input:\n    file motif from motif_results.collect()\n    file annotation_files from annotation_results_xy.collect()\n    file formatted_designfile from formatted_designfile.collect()\n\n    output:\n    file \"*.{html,pdf}\" into peaksMotifReport\n\n    script:\n    peakMerged_mode = params.peakMerged_mode \n    peakCalling_mode = params.peakCalling_mode\n    qcPeaksRData = \"PeakMotifPlot.RData\"\n    \"\"\"\n    cp $baseDir/bin/Peaks_Motif_Report.rmd ./\n    Rscript $baseDir/bin/Peaks_Motif_Report.R $formatted_designfile $peakMerged_mode $peakCalling_mode $qcPeaksRData\n    R -e \"load(\\\\\"$qcPeaksRData\\\\\");rmarkdown::render('Peaks_Motif_Report.rmd',output_file='Peaks_Motif_Report_${peakMerged_mode}.html')\"\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    peakMerged_mode = params.peakMerged_mode \n    peakCalling_mode = params.peakCalling_mode\n    qcPeaksRData = \"PeakMotifPlot.RData\"\n    \"\"\"\n    cp $baseDir/bin/Peaks_Motif_Report.rmd ./\n    Rscript $baseDir/bin/Peaks_Motif_Report.R $formatted_designfile $peakMerged_mode $peakCalling_mode $qcPeaksRData\n    R -e \"load(\\\\\"$qcPeaksRData\\\\\");rmarkdown::render('Peaks_Motif_Report.rmd',output_file='Peaks_Motif_Report_${peakMerged_mode}.html')\"\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "motif_results",
            "annotation_results_xy",
            "formatted_designfile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "peaksMotifReport"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "publishDir \"${params.outdir}/Report/PeaksMotifReport\", mode: 'link', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "PeaksQuantification": {
        "name_process": "PeaksQuantification",
        "string_process": "\nprocess PeaksQuantification{\n    label 'analysis'\n    publishDir \"${params.outdir}/m6AAnalysis/m6AQuantification\", mode: 'link', overwrite: true\n    \n    input:\n    file merged_bed from all_merged_bed.collect()\n    file htseq_count_file from htseq_count_input.collect()\n    file bam_bai_file from peakquan_bam.collect()\n    file formatted_designfile from formatted_designfile.collect()\n    file annotation_file from methylation_annotaion_file.collect()\n    file gtf\n\n    output:\n    file \"*.{matrix,count}\" into quantification_results, quantification_matrix\n\n    when:\n    !params.skip_peakCalling\n\n    script:\n    matk_jar = params.matk_jar\n    methylation_analysis_mode = params.methylation_analysis_mode\n    if ( methylation_analysis_mode == \"Wilcox-test\" )  \n        println LikeletUtils.print_purple(\"Generate m6A quantification matrix by bedtools\")\n    else if ( methylation_analysis_mode == \"QNB\" )  \n        println LikeletUtils.print_purple(\"Generate m6A quantification matrix by QNB\")\n    else if ( methylation_analysis_mode == \"MATK\" )\n        println LikeletUtils.print_purple(\"Generate m6A quantification matrix by MATK\")\n    else if ( methylation_analysis_mode == \"edgeR\" )  \n        println LikeletUtils.print_purple(\"Generate m6A quantification matrix by bedtools\")\n    else if ( methylation_analysis_mode == \"DESeq2\" )\n        println LikeletUtils.print_purple(\"Generate m6A quantification matrix by bedtools\")\n    \"\"\"\n    if [ ${methylation_analysis_mode} == \"DESeq2\" ]||[ ${methylation_analysis_mode} == \"edgeR\" ]; then \n        # PeaksQuantification by LRT\n        bash $baseDir/bin/bed_count.sh ${formatted_designfile} ${task.cpus} ${merged_bed} bam_stat_summary.txt\n        Rscript $baseDir/bin/bedtools_quantification.R $formatted_designfile bam_stat_summary.txt\n    else\n        case ${methylation_analysis_mode} in \n        Wilcox-test)\n            bash $baseDir/bin/bed_count.sh ${formatted_designfile} ${task.cpus} ${merged_bed} bam_stat_summary.txt\n            Rscript $baseDir/bin/bedtools_quantification.R $formatted_designfile bam_stat_summary.txt\n            ;;\n        QNB)\n            bash $baseDir/bin/bed_count.sh ${formatted_designfile} ${task.cpus} ${merged_bed} bam_stat_summary.txt\n            Rscript $baseDir/bin/QNB_quantification.R $formatted_designfile ${task.cpus}\n            ;;\n        MATK)\n            export OMP_NUM_THREADS=${task.cpus}\n            if [ ! -f \"$matk_jar\" ]; then\n                echo \"Cannot find matk.jar. Please check the param of matk_jar\" 1>&2\n                exit 1\n            fi\n            bash $baseDir/bin/MATK_quantification.sh $matk_jar $gtf $formatted_designfile ${merged_bed} 1\n            ;;\n        *)\n            echo ${methylation_analysis_mode}\" is not Wilcox-test, QNB, MATK, DESeq2 or edgeR\"\n            exit 1\n            ;;\n        esac\n    fi\n    head -1 *_quantification.matrix |sed 's/^\\\\t//'  |awk -F \"\\\\t\" '{print \"ID\\\\tGene_symbol\\\\t\"\\$0}' > tmp.header.file\n    sed '1d' *_quantification.matrix | sort > tmp.quantification.file\n    awk 'BEGIN{FS=\"\\\\t\";OFS=\"\\\\t\"}{print \\$4,\\$15,\\$11}' ${annotation_file} | sort | join -t \\$'\\t' -e 'NA' -a1 -o 1.1 -o 2.2 -o 2.3 tmp.quantification.file - >  tmp.annotation.file\n    join -t \\$'\\t' tmp.annotation.file tmp.quantification.file | cat tmp.header.file - > *_quantification.matrix \n    \"\"\"\n}",
        "nb_lignes_process": 65,
        "string_script": "    matk_jar = params.matk_jar\n    methylation_analysis_mode = params.methylation_analysis_mode\n    if ( methylation_analysis_mode == \"Wilcox-test\" )  \n        println LikeletUtils.print_purple(\"Generate m6A quantification matrix by bedtools\")\n    else if ( methylation_analysis_mode == \"QNB\" )  \n        println LikeletUtils.print_purple(\"Generate m6A quantification matrix by QNB\")\n    else if ( methylation_analysis_mode == \"MATK\" )\n        println LikeletUtils.print_purple(\"Generate m6A quantification matrix by MATK\")\n    else if ( methylation_analysis_mode == \"edgeR\" )  \n        println LikeletUtils.print_purple(\"Generate m6A quantification matrix by bedtools\")\n    else if ( methylation_analysis_mode == \"DESeq2\" )\n        println LikeletUtils.print_purple(\"Generate m6A quantification matrix by bedtools\")\n    \"\"\"\n    if [ ${methylation_analysis_mode} == \"DESeq2\" ]||[ ${methylation_analysis_mode} == \"edgeR\" ]; then \n        # PeaksQuantification by LRT\n        bash $baseDir/bin/bed_count.sh ${formatted_designfile} ${task.cpus} ${merged_bed} bam_stat_summary.txt\n        Rscript $baseDir/bin/bedtools_quantification.R $formatted_designfile bam_stat_summary.txt\n    else\n        case ${methylation_analysis_mode} in \n        Wilcox-test)\n            bash $baseDir/bin/bed_count.sh ${formatted_designfile} ${task.cpus} ${merged_bed} bam_stat_summary.txt\n            Rscript $baseDir/bin/bedtools_quantification.R $formatted_designfile bam_stat_summary.txt\n            ;;\n        QNB)\n            bash $baseDir/bin/bed_count.sh ${formatted_designfile} ${task.cpus} ${merged_bed} bam_stat_summary.txt\n            Rscript $baseDir/bin/QNB_quantification.R $formatted_designfile ${task.cpus}\n            ;;\n        MATK)\n            export OMP_NUM_THREADS=${task.cpus}\n            if [ ! -f \"$matk_jar\" ]; then\n                echo \"Cannot find matk.jar. Please check the param of matk_jar\" 1>&2\n                exit 1\n            fi\n            bash $baseDir/bin/MATK_quantification.sh $matk_jar $gtf $formatted_designfile ${merged_bed} 1\n            ;;\n        *)\n            echo ${methylation_analysis_mode}\" is not Wilcox-test, QNB, MATK, DESeq2 or edgeR\"\n            exit 1\n            ;;\n        esac\n    fi\n    head -1 *_quantification.matrix |sed 's/^\\\\t//'  |awk -F \"\\\\t\" '{print \"ID\\\\tGene_symbol\\\\t\"\\$0}' > tmp.header.file\n    sed '1d' *_quantification.matrix | sort > tmp.quantification.file\n    awk 'BEGIN{FS=\"\\\\t\";OFS=\"\\\\t\"}{print \\$4,\\$15,\\$11}' ${annotation_file} | sort | join -t \\$'\\t' -e 'NA' -a1 -o 1.1 -o 2.2 -o 2.3 tmp.quantification.file - >  tmp.annotation.file\n    join -t \\$'\\t' tmp.annotation.file tmp.quantification.file | cat tmp.header.file - > *_quantification.matrix \n    \"\"\"",
        "nb_lignes_script": 45,
        "language_script": "bash",
        "tools": [
            "CASE",
            "joineRML"
        ],
        "tools_url": [
            "https://bio.tools/CASE",
            "https://bio.tools/joinerml"
        ],
        "tools_dico": [
            {
                "name": "CASE",
                "uri": "https://bio.tools/CASE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology browsing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Advancing Coordinated Cyber-investigations and Tool Interoperability using a Community Developed Specification Language.\n\nSource files for the CASE website.\n\nAPI used for instantiating CASE objects (includes ontological verification and type checking).\n\nCyber-investigation Analysis Standard Expression (CASE).\n\nRead the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO.\n\n\"@vocab\": \"http://case.example.org/core#\",.\n\nDET ER DINE PENGER DET DREIER SEG OM...\n\nVi er ikke st\ufffdrst, men garanterer effektiv behandling.\n\nLast ned v\ufffdr brosjyre i PDF format.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/pymzml (GITHUB.COM).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'UCO', 'cyber-investigation', 'cyber-investigations', 'plaso'",
                "homepage": "http://CASE.as"
            },
            {
                "name": "joineRML",
                "uri": "https://bio.tools/joinerml",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3569",
                            "term": "Applied mathematics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Joint Modelling of Multivariate Longitudinal Data and Time-to-Event Outcomes.",
                "homepage": "https://cran.r-project.org/web/packages/joineRML/"
            }
        ],
        "inputs": [
            "all_merged_bed",
            "htseq_count_input",
            "peakquan_bam",
            "formatted_designfile",
            "methylation_annotaion_file",
            "gtf"
        ],
        "nb_inputs": 6,
        "outputs": [
            "quantification_results",
            "quantification_matrix"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'analysis'",
            "publishDir \"${params.outdir}/m6AAnalysis/m6AQuantification\", mode: 'link', overwrite: true"
        ],
        "when": "!params.skip_peakCalling",
        "stub": ""
    },
    "diffm6APeak": {
        "name_process": "diffm6APeak",
        "string_process": "\nprocess diffm6APeak{\n    label 'analysis'\n    tag \"$compare_str\"\n    publishDir \"${params.outdir}/m6AAnalysis/diffm6A\", mode: 'link', overwrite: true\n    \n    input:\n                                                   \n    file merged_bed from all_merged_bed.collect()\n    file bam_bai_file from diffpeak_bam.collect()\n    file formatted_designfile from formatted_designfile.collect()\n    file count_matrix from quantification_matrix.collect()\n    file exp_matrix from htseq_diffm6a_results.collect()\n    file gtf\n    val compare_str from compareLines_for_diffm6A\n\n    output:\n    file \"*diffm6A*.txt\" into diffm6A_results\n\n    when:\n    !params.skip_diffpeakCalling && params.comparefile\n\n    script:\n    matk_jar = params.matk_jar\n    methylation_analysis_mode = params.methylation_analysis_mode\n    if ( methylation_analysis_mode == \"Wilcox-test\" )  \n        println LikeletUtils.print_purple(\"Differential m6A analysis is going on by bedtools\")\n    else if ( methylation_analysis_mode == \"QNB\" )  \n        println LikeletUtils.print_purple(\"Differential m6A analysis is going on by QNB\")\n    else if ( methylation_analysis_mode == \"MATK\" )\n        println LikeletUtils.print_purple(\"Differential m6A analysis is going on by MATK\")\n    else if ( methylation_analysis_mode == \"edgeR\" )  \n        println LikeletUtils.print_purple(\"Differential m6A analysis is going on by edgeR\")\n    else if ( methylation_analysis_mode == \"DESeq2\" )\n        println LikeletUtils.print_purple(\"Differential m6A analysis is going on by DESeq2\")\n    \"\"\"\n    case ${methylation_analysis_mode} in \n        Wilcox-test)\n            Rscript $baseDir/bin/bedtools_diffm6A.R $formatted_designfile bedtools_quantification.matrix $compare_str\n            ;;\n        QNB)\n            Rscript $baseDir/bin/QNB_diffm6A.R $formatted_designfile ${merged_bed} $compare_str   \n            ;;\n        MATK)\n            export OMP_NUM_THREADS=${task.cpus}\n            if [ ! -f \"$matk_jar\" ]; then\n                echo \"Cannot find matk.jar. Please check the param of matk_jar\" 1>&2\n                exit 1\n            fi\n            bash $baseDir/bin/MATK_diffm6A.sh $matk_jar $formatted_designfile $gtf $compare_str $merged_bed\n            ;;\n        edgeR)\n            Rscript $baseDir/bin/GLM_edgeR_DM.R $formatted_designfile $compare_str bedtools_quantification.matrix $exp_matrix   \n            ;;\n        DESeq2)\n            Rscript $baseDir/bin/GLM_DESeq2_DM.R $formatted_designfile $compare_str ${task.cpus} bedtools_quantification.matrix $exp_matrix \n            ;;\n        *)\n            echo ${methylation_analysis_mode}\" is not Wilcox-test, QNB, MATK, DESeq2 or edgeR\"\n            exit 1\n            ;;\n    esac   \n    \"\"\" \n}",
        "nb_lignes_process": 62,
        "string_script": "    matk_jar = params.matk_jar\n    methylation_analysis_mode = params.methylation_analysis_mode\n    if ( methylation_analysis_mode == \"Wilcox-test\" )  \n        println LikeletUtils.print_purple(\"Differential m6A analysis is going on by bedtools\")\n    else if ( methylation_analysis_mode == \"QNB\" )  \n        println LikeletUtils.print_purple(\"Differential m6A analysis is going on by QNB\")\n    else if ( methylation_analysis_mode == \"MATK\" )\n        println LikeletUtils.print_purple(\"Differential m6A analysis is going on by MATK\")\n    else if ( methylation_analysis_mode == \"edgeR\" )  \n        println LikeletUtils.print_purple(\"Differential m6A analysis is going on by edgeR\")\n    else if ( methylation_analysis_mode == \"DESeq2\" )\n        println LikeletUtils.print_purple(\"Differential m6A analysis is going on by DESeq2\")\n    \"\"\"\n    case ${methylation_analysis_mode} in \n        Wilcox-test)\n            Rscript $baseDir/bin/bedtools_diffm6A.R $formatted_designfile bedtools_quantification.matrix $compare_str\n            ;;\n        QNB)\n            Rscript $baseDir/bin/QNB_diffm6A.R $formatted_designfile ${merged_bed} $compare_str   \n            ;;\n        MATK)\n            export OMP_NUM_THREADS=${task.cpus}\n            if [ ! -f \"$matk_jar\" ]; then\n                echo \"Cannot find matk.jar. Please check the param of matk_jar\" 1>&2\n                exit 1\n            fi\n            bash $baseDir/bin/MATK_diffm6A.sh $matk_jar $formatted_designfile $gtf $compare_str $merged_bed\n            ;;\n        edgeR)\n            Rscript $baseDir/bin/GLM_edgeR_DM.R $formatted_designfile $compare_str bedtools_quantification.matrix $exp_matrix   \n            ;;\n        DESeq2)\n            Rscript $baseDir/bin/GLM_DESeq2_DM.R $formatted_designfile $compare_str ${task.cpus} bedtools_quantification.matrix $exp_matrix \n            ;;\n        *)\n            echo ${methylation_analysis_mode}\" is not Wilcox-test, QNB, MATK, DESeq2 or edgeR\"\n            exit 1\n            ;;\n    esac   \n    \"\"\"",
        "nb_lignes_script": 39,
        "language_script": "bash",
        "tools": [
            "CASE"
        ],
        "tools_url": [
            "https://bio.tools/CASE"
        ],
        "tools_dico": [
            {
                "name": "CASE",
                "uri": "https://bio.tools/CASE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology browsing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Advancing Coordinated Cyber-investigations and Tool Interoperability using a Community Developed Specification Language.\n\nSource files for the CASE website.\n\nAPI used for instantiating CASE objects (includes ontological verification and type checking).\n\nCyber-investigation Analysis Standard Expression (CASE).\n\nRead the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO.\n\n\"@vocab\": \"http://case.example.org/core#\",.\n\nDET ER DINE PENGER DET DREIER SEG OM...\n\nVi er ikke st\ufffdrst, men garanterer effektiv behandling.\n\nLast ned v\ufffdr brosjyre i PDF format.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/pymzml (GITHUB.COM).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'UCO', 'cyber-investigation', 'cyber-investigations', 'plaso'",
                "homepage": "http://CASE.as"
            }
        ],
        "inputs": [
            "all_merged_bed",
            "diffpeak_bam",
            "formatted_designfile",
            "quantification_matrix",
            "htseq_diffm6a_results",
            "gtf",
            "compareLines_for_diffm6A"
        ],
        "nb_inputs": 7,
        "outputs": [
            "diffm6A_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'analysis'",
            "tag \"$compare_str\"",
            "publishDir \"${params.outdir}/m6AAnalysis/diffm6A\", mode: 'link', overwrite: true"
        ],
        "when": "!params.skip_diffpeakCalling && params.comparefile",
        "stub": ""
    },
    "SingleNucleotidePrediction": {
        "name_process": "SingleNucleotidePrediction",
        "string_process": "\nprocess SingleNucleotidePrediction{\n    label 'analysis'\n    publishDir \"${params.outdir}/m6AAnalysis/m6APredictionSites\", mode: 'link', overwrite: true\n    \n    input:\n    file peak_bed from group_merged_bed.collect()\n    file group_bed from all_merged_bed.collect()\n    file formatted_designfile from formatted_designfile.collect()\n    file bam_bai_file from sng_bam.collect()\n    file fasta\n    file gtf\n\n    output:\n    file \"m6A_sites*.bed\" into prediction_results\n\n    when:\n    !params.skip_m6Aprediction\n\n    script:\n    matk_jar = params.matk_jar\n    println LikeletUtils.print_purple(\"SignleNucleotide Prediction analysis is going on by MATK\")\n    \"\"\"\n    export OMP_NUM_THREADS=${task.cpus}\n    bash $baseDir/bin/m6Aprediction.sh $matk_jar $formatted_designfile $fasta $gtf\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    matk_jar = params.matk_jar\n    println LikeletUtils.print_purple(\"SignleNucleotide Prediction analysis is going on by MATK\")\n    \"\"\"\n    export OMP_NUM_THREADS=${task.cpus}\n    bash $baseDir/bin/m6Aprediction.sh $matk_jar $formatted_designfile $fasta $gtf\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "group_merged_bed",
            "all_merged_bed",
            "formatted_designfile",
            "sng_bam",
            "fasta",
            "gtf"
        ],
        "nb_inputs": 6,
        "outputs": [
            "prediction_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "label 'analysis'",
            "publishDir \"${params.outdir}/m6AAnalysis/m6APredictionSites\", mode: 'link', overwrite: true"
        ],
        "when": "!params.skip_m6Aprediction",
        "stub": ""
    },
    "DiffReport": {
        "name_process": "DiffReport",
        "string_process": "\nprocess DiffReport {\n    publishDir \"${params.outdir}/Report\" , mode: 'link', overwrite: true,\n        saveAs: {filename ->\n                 if (filename.indexOf(\".html\") > 0)  \"diffReport/$filename\"\n                 else if (filename.indexOf(\".pdf\") > 0)  \"diffReport/$filename\"\n                 else \"ReportRData/$filename\"\n        }        \n    input:\n    file results from results_arrange.collect()\n    file formatted_designfile from formatted_designfile.collect()\n    val compare_info from compareLines_for_arranged_result.collect()\n    \n    output:\n    file \"*.m6APipe\" into m6APipe_result\n    file \"*.{html,pdf}\" into diffReport_result\n\n    when:\n    !params.skip_annotation && !params.skip_expression && !params.skip_diffpeakCalling && !params.skip_peakCalling && params.comparefile\n    \n    script:\n    methylation_analysis_mode = params.methylation_analysis_mode\n    expression_analysis_mode = params.expression_analysis_mode\n    peakMerged_mode = params.peakMerged_mode\n    diffReportRData = \"DiffReport.RData\"\n    \"\"\"\n    cp $baseDir/bin/DiffReport.rmd ./\n    if [ \"$compare_info\" != \"[two_groups]\" ]; then\n        echo $compare_info | sed 's/^\\\\[//g' | sed 's/\\\\]\\$//g' | sed s/[[:space:]]//g > compare_info\n    else\n        echo \\$(awk 'BEGIN{FS=\",\"}NR>1{print \\$4}' $formatted_designfile |sort|uniq|awk 'NR==1{printf \\$0\"_vs_\"}NR==2{print \\$0}') > compare_info\n    fi\n    Rscript $baseDir/bin/arranged_results.R $formatted_designfile compare_info $params.aligners $methylation_analysis_mode $expression_analysis_mode $peakMerged_mode\n    Rscript $baseDir/bin/DiffReport.R *.m6APipe $diffReportRData $params.delfc $params.dmlfc $params.cluster_method\n    R -e \"load(\\\\\"$diffReportRData\\\\\");rmarkdown::render('DiffReport.rmd',output_file='DiffReport_${peakMerged_mode}_${methylation_analysis_mode}_${expression_analysis_mode}.html')\"\n    rm Rplots.pdf\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    methylation_analysis_mode = params.methylation_analysis_mode\n    expression_analysis_mode = params.expression_analysis_mode\n    peakMerged_mode = params.peakMerged_mode\n    diffReportRData = \"DiffReport.RData\"\n    \"\"\"\n    cp $baseDir/bin/DiffReport.rmd ./\n    if [ \"$compare_info\" != \"[two_groups]\" ]; then\n        echo $compare_info | sed 's/^\\\\[//g' | sed 's/\\\\]\\$//g' | sed s/[[:space:]]//g > compare_info\n    else\n        echo \\$(awk 'BEGIN{FS=\",\"}NR>1{print \\$4}' $formatted_designfile |sort|uniq|awk 'NR==1{printf \\$0\"_vs_\"}NR==2{print \\$0}') > compare_info\n    fi\n    Rscript $baseDir/bin/arranged_results.R $formatted_designfile compare_info $params.aligners $methylation_analysis_mode $expression_analysis_mode $peakMerged_mode\n    Rscript $baseDir/bin/DiffReport.R *.m6APipe $diffReportRData $params.delfc $params.dmlfc $params.cluster_method\n    R -e \"load(\\\\\"$diffReportRData\\\\\");rmarkdown::render('DiffReport.rmd',output_file='DiffReport_${peakMerged_mode}_${methylation_analysis_mode}_${expression_analysis_mode}.html')\"\n    rm Rplots.pdf\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "results_arrange",
            "formatted_designfile",
            "compareLines_for_arranged_result"
        ],
        "nb_inputs": 3,
        "outputs": [
            "m6APipe_result",
            "diffReport_result"
        ],
        "nb_outputs": 2,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "publishDir \"${params.outdir}/Report\" , mode: 'link', overwrite: true , saveAs: {filename -> if (filename.indexOf(\".html\") > 0) \"diffReport/$filename\" else if (filename.indexOf(\".pdf\") > 0) \"diffReport/$filename\" else \"ReportRData/$filename\" }"
        ],
        "when": "!params.skip_annotation && !params.skip_expression && !params.skip_diffpeakCalling && !params.skip_peakCalling && params.comparefile",
        "stub": ""
    },
    "CreateIGVjs": {
        "name_process": "CreateIGVjs",
        "string_process": "\nprocess CreateIGVjs {\n    publishDir \"${params.outdir}/Report\" , mode: 'link', overwrite: true,\n        saveAs: {filename ->\n                 if (filename.indexOf(\".html\") > 0)  \"Igv_js/$filename\"\n                 else if (filename.indexOf(\".pdf\") > 0)  \"Igv_js/$filename\"\n                 else \"Igv_js/$filename\"\n        }        \n    input:\n    file m6APipe_result from m6APipe_result\n    file fasta \n    file gtf\n    file formatted_designfile from formatted_designfile.collect()\n    file group_bed from group_merged_bed.collect()\n    file all_bed from all_merged_bed.collect()\n    file bedgraph from bedgraph_for_igv.collect()\n    \n    output:\n    file \"*\" into igv_js\n\n    script:    \n    igv_fasta = fasta.baseName.toString() + \".igv.fa\"\n    igv_gtf = gtf.baseName.toString() + \".igv.gtf\"\n    merged_allpeaks_igvfile = all_bed.baseName.toString() + \".igv.bed\"\n    \"\"\"\n    ls -l $fasta | awk -F \"> \" '{print \"ln -s \"\\$2\" ./'$igv_fasta'\"}' | bash\n    ls -l $gtf | awk -F \"> \" '{print \"ln -s \"\\$2\" ./'$igv_gtf'\"}' | bash\n    ls -l $m6APipe_result | awk '{print \"ln -s \"\\$11\" initial.m6APipe\"}' | bash\n    ls -l $group_bed $all_bed | awk '{sub(\".bed\\$\",\".igv.bed\",\\$9);print \"ln -s \"\\$11,\\$9}' | bash\n    ls -l $bedgraph | awk '{sub(\".bedgraph\\$\",\".igv.bedgraph\",\\$9);print \"ln -s \"\\$11,\\$9}' | bash\n    samtools faidx $igv_fasta\n    bash $baseDir/bin/create_IGV_js.sh $igv_fasta $igv_gtf $merged_allpeaks_igvfile $formatted_designfile\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    igv_fasta = fasta.baseName.toString() + \".igv.fa\"\n    igv_gtf = gtf.baseName.toString() + \".igv.gtf\"\n    merged_allpeaks_igvfile = all_bed.baseName.toString() + \".igv.bed\"\n    \"\"\"\n    ls -l $fasta | awk -F \"> \" '{print \"ln -s \"\\$2\" ./'$igv_fasta'\"}' | bash\n    ls -l $gtf | awk -F \"> \" '{print \"ln -s \"\\$2\" ./'$igv_gtf'\"}' | bash\n    ls -l $m6APipe_result | awk '{print \"ln -s \"\\$11\" initial.m6APipe\"}' | bash\n    ls -l $group_bed $all_bed | awk '{sub(\".bed\\$\",\".igv.bed\",\\$9);print \"ln -s \"\\$11,\\$9}' | bash\n    ls -l $bedgraph | awk '{sub(\".bedgraph\\$\",\".igv.bedgraph\",\\$9);print \"ln -s \"\\$11,\\$9}' | bash\n    samtools faidx $igv_fasta\n    bash $baseDir/bin/create_IGV_js.sh $igv_fasta $igv_gtf $merged_allpeaks_igvfile $formatted_designfile\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "m6APipe_result",
            "fasta",
            "gtf",
            "formatted_designfile",
            "group_merged_bed",
            "all_merged_bed",
            "bedgraph_for_igv"
        ],
        "nb_inputs": 7,
        "outputs": [
            "igv_js"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "publishDir \"${params.outdir}/Report\" , mode: 'link', overwrite: true , saveAs: {filename -> if (filename.indexOf(\".html\") > 0) \"Igv_js/$filename\" else if (filename.indexOf(\".pdf\") > 0) \"Igv_js/$filename\" else \"Igv_js/$filename\" }"
        ],
        "when": "",
        "stub": ""
    },
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    publishDir \"${params.outdir}/pipeline_info\", mode: 'copy',\n        saveAs: { filename ->\n            if (filename.indexOf(\".csv\") > 0) filename\n            else null\n        }\n\n    output:\n    file 'software_versions_mqc.yaml' into software_versions_yaml\n    file \"software_versions.csv\"\n\n    script:\n                                                                     \n    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    fastqc --version > v_fastqc.txt\n    multiqc --version > v_multiqc.txt\n    python ${baseDir}/bin/scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    fastqc --version > v_fastqc.txt\n    multiqc --version > v_multiqc.txt\n    python ${baseDir}/bin/scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "FastQC",
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc",
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            },
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "canceromics__MeRIPseqPipe",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: 'copy' , saveAs: { filename -> if (filename.indexOf(\".csv\") > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    }
}
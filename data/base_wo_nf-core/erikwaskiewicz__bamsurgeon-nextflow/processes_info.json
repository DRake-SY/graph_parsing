{
    "build_reference_bam_index": {
        "name_process": "build_reference_bam_index",
        "string_process": " process build_reference_bam_index {\n          \n                                                             \n           \n        publishDir \"$params.outdir\", mode: \"copy\"\n        input:\n            file(bam) from bam_file\n        output:\n            file(\"${bam.name + '.bai'}\") into bai_file\n        when:\n            !params.bam_index\n        script:\n        \"\"\"\n        picard BuildBamIndex \\\n            I=$bam \\\n            O=${bam.name + '.bai'}\n        \"\"\"\n    }",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        picard BuildBamIndex \\\n            I=$bam \\\n            O=${bam.name + '.bai'}\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "bam_file"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bai_file"
        ],
        "nb_outputs": 1,
        "name_workflow": "erikwaskiewicz__bamsurgeon-nextflow",
        "directive": [
            "publishDir \"$params.outdir\", mode: \"copy\""
        ],
        "when": "!params.bam_index",
        "stub": ""
    },
    "make_snvs": {
        "name_process": "make_snvs",
        "string_process": "\nprocess make_snvs {\n       \n                                                                       \n       \n    container \"erikwaskiewicz/bamsurgeon:v0.1\"\n    publishDir \"$params.outdir\", mode: \"copy\"\n    input:\n        file(var) from snv_file\n        file(bam) from bam_file\n        file(bai) from bai_file\n                                                                                  \n                                                                                        \n    output:\n        file(\"${bam.name.replace('.bam', '_mut.bam')}\") into bam_out\n    script:\n    \"\"\"\n    export PICARDJAR=\\$(find /opt/conda -name picard.jar)\n    addsnv.py \\\n        --varfile $var \\\n        --bamfile $bam \\\n        --reference /var/app/bamsurgeon/test_data/Homo_sapiens_chr22_assembly19.fasta \\\n        --outbam ${bam.name.replace('.bam', '_mut.bam')} \\\n        --picardjar \\$PICARDJAR \\\n        --aligner mem\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    export PICARDJAR=\\$(find /opt/conda -name picard.jar)\n    addsnv.py \\\n        --varfile $var \\\n        --bamfile $bam \\\n        --reference /var/app/bamsurgeon/test_data/Homo_sapiens_chr22_assembly19.fasta \\\n        --outbam ${bam.name.replace('.bam', '_mut.bam')} \\\n        --picardjar \\$PICARDJAR \\\n        --aligner mem\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "snv_file",
            "bam_file",
            "bai_file"
        ],
        "nb_inputs": 3,
        "outputs": [
            "bam_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "erikwaskiewicz__bamsurgeon-nextflow",
        "directive": [
            "container \"erikwaskiewicz/bamsurgeon:v0.1\"",
            "publishDir \"$params.outdir\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "build_processed_bam_index": {
        "name_process": "build_processed_bam_index",
        "string_process": "\nprocess build_processed_bam_index {\n      \n                                                          \n       \n    publishDir \"$params.outdir\", mode: \"copy\"\n    input:\n        file(bam) from bam_out\n    output:\n        file(\"${bam.name + '.bai'}\") into bam_index_out\n    script:\n    \"\"\"\n    picard BuildBamIndex \\\n        I=$bam \\\n        O=${bam.name + '.bai'}\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    picard BuildBamIndex \\\n        I=$bam \\\n        O=${bam.name + '.bai'}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "bam_out"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_index_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "erikwaskiewicz__bamsurgeon-nextflow",
        "directive": [
            "publishDir \"$params.outdir\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "test_picard_installation": {
        "name_process": "test_picard_installation",
        "string_process": "\nprocess test_picard_installation {\n       \n                                                                     \n                                           \n       \n    container \"erikwaskiewicz/bamsurgeon:v0.1\"\n    output:\n        val true into installed_correctly\n    script:\n    \"\"\"\n    export PICARDJAR=\\$(find /opt/conda -name picard.jar)\n    count=\\$(echo \\$PICARDJAR | wc -l)\n\n    if [[ \\$count -lt 1 ]]; then\n        echo \"Picard not installed\"\n        exit 1\n\n    elif [[ \\$count -gt 1 ]]; then\n        echo \"Multiple versions of Picard installed\"\n        exit 1\n\n    else\n        echo \"Picard installed at \\$PICARDJAR\"\n        exit 0\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    export PICARDJAR=\\$(find /opt/conda -name picard.jar)\n    count=\\$(echo \\$PICARDJAR | wc -l)\n\n    if [[ \\$count -lt 1 ]]; then\n        echo \"Picard not installed\"\n        exit 1\n\n    elif [[ \\$count -gt 1 ]]; then\n        echo \"Multiple versions of Picard installed\"\n        exit 1\n\n    else\n        echo \"Picard installed at \\$PICARDJAR\"\n        exit 0\n    fi\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "installed_correctly"
        ],
        "nb_outputs": 1,
        "name_workflow": "erikwaskiewicz__bamsurgeon-nextflow",
        "directive": [
            "container \"erikwaskiewicz/bamsurgeon:v0.1\""
        ],
        "when": "",
        "stub": ""
    },
    "test_snv": {
        "name_process": "test_snv",
        "string_process": "\nprocess test_snv {\n       \n                                                \n       \n    container \"erikwaskiewicz/bamsurgeon:v0.1\"\n    input:\n        val flag from installed_correctly\n    script:\n    \"\"\"\n    export PICARDJAR=\\$(find /opt/conda -name picard.jar)\n\n    cd /var/app/bamsurgeon/test\n    bash test_snv.sh \\$PICARDJAR\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    export PICARDJAR=\\$(find /opt/conda -name picard.jar)\n\n    cd /var/app/bamsurgeon/test\n    bash test_snv.sh \\$PICARDJAR\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "installed_correctly"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "erikwaskiewicz__bamsurgeon-nextflow",
        "directive": [
            "container \"erikwaskiewicz/bamsurgeon:v0.1\""
        ],
        "when": "",
        "stub": ""
    },
    "test_snv_alt": {
        "name_process": "test_snv_alt",
        "string_process": "\nprocess test_snv_alt {\n       \n                                                \n       \n    container \"erikwaskiewicz/bamsurgeon:v0.1\"\n    input:\n        val flag from installed_correctly\n    script:\n    \"\"\"\n    cd /var/app/bamsurgeon/test\n    bash test_snv_alt.sh 5 1 /var/app/bamsurgeon/test_data/Homo_sapiens_chr22_assembly19.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    cd /var/app/bamsurgeon/test\n    bash test_snv_alt.sh 5 1 /var/app/bamsurgeon/test_data/Homo_sapiens_chr22_assembly19.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "installed_correctly"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "erikwaskiewicz__bamsurgeon-nextflow",
        "directive": [
            "container \"erikwaskiewicz/bamsurgeon:v0.1\""
        ],
        "when": "",
        "stub": ""
    },
    "test_snv_environ": {
        "name_process": "test_snv_environ",
        "string_process": "\nprocess test_snv_environ {\n       \n                                                                                    \n       \n    container \"erikwaskiewicz/bamsurgeon:v0.1\"\n    input:\n        val flag from installed_correctly\n    script:\n    \"\"\"\n    export PICARDJAR=\\$(find /opt/conda -name picard.jar)\n\n    cd /var/app/bamsurgeon/test\n    bash test_snv_environ.sh \\$PICARDJAR\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    export PICARDJAR=\\$(find /opt/conda -name picard.jar)\n\n    cd /var/app/bamsurgeon/test\n    bash test_snv_environ.sh \\$PICARDJAR\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "installed_correctly"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "erikwaskiewicz__bamsurgeon-nextflow",
        "directive": [
            "container \"erikwaskiewicz/bamsurgeon:v0.1\""
        ],
        "when": "",
        "stub": ""
    },
    "test_snv_minmutreads": {
        "name_process": "test_snv_minmutreads",
        "string_process": "\nprocess test_snv_minmutreads {\n       \n                                                                        \n       \n    container \"erikwaskiewicz/bamsurgeon:v0.1\"\n    input:\n        val flag from installed_correctly\n    script:\n    \"\"\"\n    cd /var/app/bamsurgeon/test\n    bash test_snv_minmutreads.sh 5 1 /var/app/bamsurgeon/test_data/Homo_sapiens_chr22_assembly19.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    cd /var/app/bamsurgeon/test\n    bash test_snv_minmutreads.sh 5 1 /var/app/bamsurgeon/test_data/Homo_sapiens_chr22_assembly19.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "installed_correctly"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "erikwaskiewicz__bamsurgeon-nextflow",
        "directive": [
            "container \"erikwaskiewicz/bamsurgeon:v0.1\""
        ],
        "when": "",
        "stub": ""
    },
    "test_snv_ont": {
        "name_process": "test_snv_ont",
        "string_process": "\nprocess test_snv_ont {\n       \n                                       \n       \n    container \"erikwaskiewicz/bamsurgeon:v0.1\"\n    input:\n        val flag from installed_correctly\n    script:\n    \"\"\"\n    export PICARDJAR=\\$(find /opt/conda -name picard.jar)\n    cd /var/app/bamsurgeon/test\n\n    bash test_snv_ont.sh \\$PICARDJAR\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    export PICARDJAR=\\$(find /opt/conda -name picard.jar)\n    cd /var/app/bamsurgeon/test\n\n    bash test_snv_ont.sh \\$PICARDJAR\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "installed_correctly"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "erikwaskiewicz__bamsurgeon-nextflow",
        "directive": [
            "container \"erikwaskiewicz/bamsurgeon:v0.1\""
        ],
        "when": "",
        "stub": ""
    },
    "test_snv_skipmerge": {
        "name_process": "test_snv_skipmerge",
        "string_process": "\nprocess test_snv_skipmerge {\n       \n                                                                     \n       \n    container \"erikwaskiewicz/bamsurgeon:v0.1\"\n    input:\n        val flag from installed_correctly\n    script:\n    \"\"\"\n    cd /var/app/bamsurgeon/test\n    bash test_snv_skipmerge.sh 5 1 /var/app/bamsurgeon/test_data/Homo_sapiens_chr22_assembly19.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "    \"\"\"\n    cd /var/app/bamsurgeon/test\n    bash test_snv_skipmerge.sh 5 1 /var/app/bamsurgeon/test_data/Homo_sapiens_chr22_assembly19.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "installed_correctly"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "erikwaskiewicz__bamsurgeon-nextflow",
        "directive": [
            "container \"erikwaskiewicz/bamsurgeon:v0.1\""
        ],
        "when": "",
        "stub": ""
    }
}
{
    "downloadSingleWget": {
        "name_process": "downloadSingleWget",
        "string_process": "\nprocess downloadSingleWget {\n  label 'download'\n  input:\n  tuple val(sample), val(fastqUrl)\n\n  output:\n  tuple val(sample), file(\"${sample}.fastq.gz\")\n\n  script:\n  \"\"\"\n  ${params.wgetCommand} $fastqUrl -O ${sample}.fastq.gz\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "  \"\"\"\n  ${params.wgetCommand} $fastqUrl -O ${sample}.fastq.gz\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "fastqUrl"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "wbazant__CORALE",
        "directive": [
            "label 'download'"
        ],
        "when": "",
        "stub": ""
    },
    "downloadPairedWget": {
        "name_process": "downloadPairedWget",
        "string_process": "\nprocess downloadPairedWget {\n  label 'download'\n  input:\n  tuple val(sample), val(fastqUrlR1), val(fastqUrlR2)\n\n  output:\n  tuple val(sample), file(\"${sample}_R1.fastq.gz\"), file(\"${sample}_R2.fastq.gz\")\n\n  script:\n  \"\"\"\n  ${params.wgetCommand} $fastqUrlR1 -O ${sample}_R1.fastq.gz\n  ${params.wgetCommand} $fastqUrlR2 -O ${sample}_R2.fastq.gz\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  ${params.wgetCommand} $fastqUrlR1 -O ${sample}_R1.fastq.gz\n  ${params.wgetCommand} $fastqUrlR2 -O ${sample}_R2.fastq.gz\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "fastqUrlR1",
            "fastqUrlR2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "wbazant__CORALE",
        "directive": [
            "label 'download'"
        ],
        "when": "",
        "stub": ""
    },
    "downloadPairedWgetUnpackBz2": {
        "name_process": "downloadPairedWgetUnpackBz2",
        "string_process": "\nprocess downloadPairedWgetUnpackBz2 {\n  label 'download'\n  input:\n  tuple val(sample), val(url)\n\n  output:\n  tuple val(sample), file(\"${sample}_R1.fastq\"), file(\"${sample}_R2.fastq\")\n\n  script:\n  \"\"\"\n  ${params.wgetCommand} $url -O ${sample}.tar.bz2\n  tar -xvjf ${sample}.tar.bz2 --transform 's!^[^/]\\\\+\\\\(\\$\\\\|/\\\\)!tar_out\\\\1!'\n  fastq_R1=\\$(find tar_out -name '*1.fastq')\n  fastq_R2=\\$(find tar_out -name '*2.fastq')\n  mv -v \"\\$fastq_R1\" \"${sample}_R1.fastq\"\n  mv -v \"\\$fastq_R2\" \"${sample}_R2.fastq\"\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  ${params.wgetCommand} $url -O ${sample}.tar.bz2\n  tar -xvjf ${sample}.tar.bz2 --transform 's!^[^/]\\\\+\\\\(\\$\\\\|/\\\\)!tar_out\\\\1!'\n  fastq_R1=\\$(find tar_out -name '*1.fastq')\n  fastq_R2=\\$(find tar_out -name '*2.fastq')\n  mv -v \"\\$fastq_R1\" \"${sample}_R1.fastq\"\n  mv -v \"\\$fastq_R2\" \"${sample}_R2.fastq\"\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "url"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "wbazant__CORALE",
        "directive": [
            "label 'download'"
        ],
        "when": "",
        "stub": ""
    },
    "downloadSingleSra": {
        "name_process": "downloadSingleSra",
        "string_process": "\nprocess downloadSingleSra {\n\n  label 'download'\n\n  input:\n  tuple val(sample), val(runAccession)\n\n  output:\n  tuple val(sample), file(\"${sample}.fastq\")\n\n  script:\n  \"\"\"\n  getFastqFromSraSingle $runAccession ${sample}.fastq\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  getFastqFromSraSingle $runAccession ${sample}.fastq\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "runAccession"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "wbazant__CORALE",
        "directive": [
            "label 'download'"
        ],
        "when": "",
        "stub": ""
    },
    "downloadPairedSra": {
        "name_process": "downloadPairedSra",
        "string_process": "\nprocess downloadPairedSra {\n\n  label 'download'\n\n  input:\n  tuple val(sample), val(runAccession)\n\n  output:\n  tuple val(sample), file(\"${sample}_R1.fastq\"), file(\"${sample}_R2.fastq\")\n\n  script:\n  \"\"\"\n  getFastqFromSraPaired $runAccession ${sample}_R1.fastq ${sample}_R2.fastq\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  getFastqFromSraPaired $runAccession ${sample}_R1.fastq ${sample}_R2.fastq\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "runAccession"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "wbazant__CORALE",
        "directive": [
            "label 'download'"
        ],
        "when": "",
        "stub": ""
    },
    "bowtie2Single": {
        "name_process": "bowtie2Single",
        "string_process": "\nprocess bowtie2Single {\n  label 'align'\n  input:\n  tuple val(sample), path(readsFastq)\n\n  output:\n  tuple val(sample), path(\"numReads.txt\"), path(\"alignmentsSingle.sam\")\n\n  script:\n  \"\"\"\n  grep -c '^@' ${readsFastq} > numReads.txt\n\n  ${params.bowtie2Command} \\\n    -x ${params.refdb} \\\n    -U ${readsFastq} \\\n    -S alignmentsSingle.sam \n  \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  grep -c '^@' ${readsFastq} > numReads.txt\n\n  ${params.bowtie2Command} \\\n    -x ${params.refdb} \\\n    -U ${readsFastq} \\\n    -S alignmentsSingle.sam \n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "readsFastq"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "wbazant__CORALE",
        "directive": [
            "label 'align'"
        ],
        "when": "",
        "stub": ""
    },
    "bowtie2Paired": {
        "name_process": "bowtie2Paired",
        "string_process": "\nprocess bowtie2Paired {\n  label 'align'\n  input:\n  tuple val(sample), path(readsFastqR1), path(readsFastqR2)\n\n  output:\n  tuple val(sample), path(\"numReads.txt\"), path(\"alignmentsPaired.sam\")\n\n  script:\n  \"\"\"\n  grep -c '^@' ${readsFastqR1} > numReads.txt\n\n  ${params.bowtie2Command} \\\n    -x ${params.refdb} \\\n    -1 ${readsFastqR1} \\\n    -2 ${readsFastqR2} \\\n    -S alignmentsPaired.sam\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  grep -c '^@' ${readsFastqR1} > numReads.txt\n\n  ${params.bowtie2Command} \\\n    -x ${params.refdb} \\\n    -1 ${readsFastqR1} \\\n    -2 ${readsFastqR2} \\\n    -S alignmentsPaired.sam\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "readsFastqR1",
            "readsFastqR2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "wbazant__CORALE",
        "directive": [
            "label 'align'"
        ],
        "when": "",
        "stub": ""
    },
    "alignmentStats": {
        "name_process": "alignmentStats",
        "string_process": "\nprocess alignmentStats {\n  publishDir \"${params.resultDir}/alignmentStats\"\n  label 'stats'\n\n  input:\n  tuple val(sample), path(numReadsPath), path(alignmentsSam)\n\n  output:\n  tuple val(sample), path(\"${sample}.alignmentStats.txt\")\n\n  script:\n  \"\"\"\n  ${params.alignmentStatsCommand} ${alignmentsSam} > ${sample}.alignmentStats.txt\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  ${params.alignmentStatsCommand} ${alignmentsSam} > ${sample}.alignmentStats.txt\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "numReadsPath",
            "alignmentsSam"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "wbazant__CORALE",
        "directive": [
            "publishDir \"${params.resultDir}/alignmentStats\"",
            "label 'stats'"
        ],
        "when": "",
        "stub": ""
    },
    "summarizeAlignments": {
        "name_process": "summarizeAlignments",
        "string_process": "\nprocess summarizeAlignments{\n  publishDir \"${params.resultDir}/summarizedAlignments\"\n  label 'postAlign'\n\n  input:\n  tuple val(sample), path(numReadsPath), path(alignmentsSam)\n\n  output:\n  path(\"${sample}.taxa.tsv\")\n\n  script:\n  \"\"\"\n  ${params.summarizeAlignmentsCommand} \\\n    --input ${alignmentsSam} \\\n    --refdb-marker-to-taxon-path ${params.markerToTaxonPath} \\\n    --refdb-format eukprot \\\n    --output-type taxon_all \\\n    --num-reads \\$(cat ${numReadsPath}) \\\n    --output ${sample}.taxa.tsv \n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  ${params.summarizeAlignmentsCommand} \\\n    --input ${alignmentsSam} \\\n    --refdb-marker-to-taxon-path ${params.markerToTaxonPath} \\\n    --refdb-format eukprot \\\n    --output-type taxon_all \\\n    --num-reads \\$(cat ${numReadsPath}) \\\n    --output ${sample}.taxa.tsv \n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "numReadsPath",
            "alignmentsSam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wbazant__CORALE",
        "directive": [
            "publishDir \"${params.resultDir}/summarizedAlignments\"",
            "label 'postAlign'"
        ],
        "when": "",
        "stub": ""
    },
    "makeTsv": {
        "name_process": "makeTsv",
        "string_process": "\nprocess makeTsv {\n  publishDir params.resultDir, mode: 'move', overwrite: true  \n  label 'postAlign'\n\n  input:\n  file(\"*.taxa.tsv\")\n\n  output:\n  file(\"${params.summaryColumn}.${params.summaryFormat}.tsv\")\n\n  script:\n  \"\"\"\n  makeTsv.pl . .taxa.tsv ${params.summaryColumn} ${params.summaryFormat} > ${params.summaryColumn}.${params.summaryFormat}.tsv\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  makeTsv.pl . .taxa.tsv ${params.summaryColumn} ${params.summaryFormat} > ${params.summaryColumn}.${params.summaryFormat}.tsv\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wbazant__CORALE",
        "directive": [
            "publishDir params.resultDir, mode: 'move', overwrite: true",
            "label 'postAlign'"
        ],
        "when": "",
        "stub": ""
    }
}
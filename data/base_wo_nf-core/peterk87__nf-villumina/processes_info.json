{
    "REMOVE_PHIX": {
        "name_process": "REMOVE_PHIX",
        "string_process": "\nprocess REMOVE_PHIX {\n  tag \"$sample_id\"\n  publishDir \"${params.outdir}/qc/phix_removal\", pattern: \"*.txt\", mode: 'copy'\n  publishDir \"${params.outdir}/reads/phix_removed\", pattern: \"*.fastq.gz\"\n  \n  input:\n    file phix\n    tuple sample_id, path(reads1), path(reads2)\n  output:\n    tuple sample_id, path(reads_out1), path(reads_out2), emit: 'reads'\n    tuple sample_id, path(stats), emit: 'stats'\n\n  script:\n  reads_out1 = \"${sample_id}_1.phix_removed.fastq.gz\"\n  reads_out2 = \"${sample_id}_2.phix_removed.fastq.gz\"\n  stats = \"${sample_id}-remove_phix-stats.txt\"\n  \"\"\"\n  bbduk.sh \\\\\n    -Xmx${task.memory.toMega()}m \\\\\n    in1=$reads1 in2=$reads2 \\\\\n    out1=$reads_out1 out2=$reads_out2 \\\\\n    ref=$phix k=31 hdist=1 \\\\\n    stats=$stats\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  reads_out1 = \"${sample_id}_1.phix_removed.fastq.gz\"\n  reads_out2 = \"${sample_id}_2.phix_removed.fastq.gz\"\n  stats = \"${sample_id}-remove_phix-stats.txt\"\n  \"\"\"\n  bbduk.sh \\\\\n    -Xmx${task.memory.toMega()}m \\\\\n    in1=$reads1 in2=$reads2 \\\\\n    out1=$reads_out1 out2=$reads_out2 \\\\\n    ref=$phix k=31 hdist=1 \\\\\n    stats=$stats\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "GOstats"
        ],
        "tools_url": [
            "https://bio.tools/gostats"
        ],
        "tools_dico": [
            {
                "name": "GOstats",
                "uri": "https://bio.tools/gostats",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set enrichment analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "GSEA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Functional enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2436",
                                    "term": "Gene-set over-represenation analysis"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2603",
                                "term": "Expression data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0582",
                                "term": "Ontology"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2884",
                                "term": "Plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            },
                            {
                                "uri": "http://edamontology.org/data_1772",
                                "term": "Score"
                            }
                        ]
                    }
                ],
                "description": "A set of tools for interacting with GO and microarray data. A variety of basic manipulation tools for graphs, hypothesis testing and other simple calculations.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/GOstats.html"
            }
        ],
        "inputs": [
            "phix",
            "reads1",
            "reads2",
            "sample_id"
        ],
        "nb_inputs": 4,
        "outputs": [
            "reads_out2",
            "stats"
        ],
        "nb_outputs": 2,
        "name_workflow": "peterk87__nf-villumina",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/qc/phix_removal\", pattern: \"*.txt\", mode: 'copy'",
            "publishDir \"${params.outdir}/reads/phix_removed\", pattern: \"*.fastq.gz\""
        ],
        "when": "",
        "stub": ""
    },
    "FASTP": {
        "name_process": "FASTP",
        "string_process": "\nprocess FASTP {\n  tag \"$sample_id\"\n  publishDir \"${params.outdir}/fastp/html\", pattern: \"*.html\", mode: 'copy'\n  publishDir \"${params.outdir}/fastp/json\", pattern: \"*.json\", mode: 'copy'\n  publishDir \"${params.outdir}/reads/fastp\", pattern: \"*.fastp.fastq.gz\"\n\n  input:\n    tuple sample_id, path(r1), path(r2)\n  output:\n    tuple sample_id, path(reads_out1), path(reads_out2), emit: 'reads'\n    tuple sample_id, path(html_report), path(json_report), emit: 'report'\n\n  script:\n  reads_out1 = \"${sample_id}_1.fastp.fastq.gz\"\n  reads_out2 = \"${sample_id}_2.fastp.fastq.gz\"\n  json_report = \"fastp-report-${sample_id}.json\"\n  html_report = \"fastp-report-${sample_id}.html\"\n  \"\"\"\n  fastp -i $r1 -I $r2 \\\\\n    -o $reads_out1 -O $reads_out2 \\\\\n    -p -c -R \"$sample_id fastp report\" \\\\\n    -w ${task.cpus} \\\\\n    -q ${params.fastp_min_base_quality} \\\\\n    -u ${params.fastp_max_percent_low_qual_base} \\\\\n    -j $json_report -h $html_report\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  reads_out1 = \"${sample_id}_1.fastp.fastq.gz\"\n  reads_out2 = \"${sample_id}_2.fastp.fastq.gz\"\n  json_report = \"fastp-report-${sample_id}.json\"\n  html_report = \"fastp-report-${sample_id}.html\"\n  \"\"\"\n  fastp -i $r1 -I $r2 \\\\\n    -o $reads_out1 -O $reads_out2 \\\\\n    -p -c -R \"$sample_id fastp report\" \\\\\n    -w ${task.cpus} \\\\\n    -q ${params.fastp_min_base_quality} \\\\\n    -u ${params.fastp_max_percent_low_qual_base} \\\\\n    -j $json_report -h $html_report\n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "r1",
            "r2",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [
            "reads_out2",
            "json_report"
        ],
        "nb_outputs": 2,
        "name_workflow": "peterk87__nf-villumina",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/fastp/html\", pattern: \"*.html\", mode: 'copy'",
            "publishDir \"${params.outdir}/fastp/json\", pattern: \"*.json\", mode: 'copy'",
            "publishDir \"${params.outdir}/reads/fastp\", pattern: \"*.fastp.fastq.gz\""
        ],
        "when": "",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "\nprocess FASTQC {\n  tag \"$sample_id\"\n  publishDir \"${params.outdir}/qc/fastqc\", mode: 'copy',\n      saveAs: { filename -> \n        filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\"\n      }\n\n  input:\n    tuple val(sample_id), path(reads1), path(reads2)\n  output:\n    file \"*_fastqc.{zip,html}\"\n\n  script:\n  \"\"\"\n  fastqc -q $reads1 $reads2\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  fastqc -q $reads1 $reads2\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "sample_id",
            "reads1",
            "reads2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "peterk87__nf-villumina",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/qc/fastqc\", mode: 'copy' , saveAs: { filename -> filename.indexOf(\".zip\") > 0 ? \"zips/$filename\" : \"$filename\" }"
        ],
        "when": "",
        "stub": ""
    },
    "KRAKEN2": {
        "name_process": "KRAKEN2",
        "string_process": "\nprocess KRAKEN2 {\n  tag \"$sample_id\"\n  publishDir \"${params.outdir}/kraken2/results\", pattern: \"*-kraken2_results.tsv\", mode: 'copy'\n  publishDir \"${params.outdir}/kraken2/reports\", pattern: \"*-kraken2_report.tsv\", mode: 'copy'\n\n  input:\n    path(kraken2_db_dir)\n    tuple sample_id,\n          path(reads1),\n          path(reads2)\n  output:\n    tuple sample_id,\n          path(reads1),\n          path(reads2),\n          path(results),\n          path(report)\n\n  script:\n  results = \"${sample_id}-kraken2_results.tsv\"\n  report = \"${sample_id}-kraken2_report.tsv\"\n  \"\"\"\n  kraken2 --memory-mapping --threads ${task.cpus} \\\\\n    --db ./${kraken2_db_dir}/ \\\\\n    --output ${results} \\\\\n    --report ${report} \\\\\n    $reads1 $reads2\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  results = \"${sample_id}-kraken2_results.tsv\"\n  report = \"${sample_id}-kraken2_report.tsv\"\n  \"\"\"\n  kraken2 --memory-mapping --threads ${task.cpus} \\\\\n    --db ./${kraken2_db_dir}/ \\\\\n    --output ${results} \\\\\n    --report ${report} \\\\\n    $reads1 $reads2\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "RESULTS:MWMM",
            "Reporter",
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/RESULTSMWMM",
            "https://bio.tools/reporter",
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "RESULTS:MWMM",
                "uri": "https://bio.tools/RESULTSMWMM",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3792",
                                    "term": "miRNA expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3766",
                                    "term": "Weighted correlation network analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3432",
                                    "term": "Clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3792",
                                    "term": "miRNA expression profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3766",
                                    "term": "WGCNA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3766",
                                    "term": "Weighted gene co-expression network analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> MEDIUM CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'MWMM', 'blossom' | Clustering analysis of microRNA and mRNA expression data from TCGA using maximum edge-weighted matching algorithms | maximum weighted merger method",
                "homepage": "https://github.com/BaiLab/MWMM"
            },
            {
                "name": "Reporter",
                "uri": "https://bio.tools/reporter",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3630",
                                    "term": "Protein quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3630",
                                    "term": "Protein quantitation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2536",
                                "term": "Mass spectrometry data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2886",
                                "term": "Protein sequence record"
                            }
                        ]
                    }
                ],
                "description": "Protein quantification based on reporter ions.",
                "homepage": "http://compomics.github.io/projects/reporter.html"
            },
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "kraken2_db_dir",
            "reads1",
            "reads2",
            "sample_id"
        ],
        "nb_inputs": 4,
        "outputs": [
            "report"
        ],
        "nb_outputs": 1,
        "name_workflow": "peterk87__nf-villumina",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/kraken2/results\", pattern: \"*-kraken2_results.tsv\", mode: 'copy'",
            "publishDir \"${params.outdir}/kraken2/reports\", pattern: \"*-kraken2_report.tsv\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "CENTRIFUGE": {
        "name_process": "CENTRIFUGE",
        "string_process": "\nprocess CENTRIFUGE {\n  tag \"$sample_id\"\n  publishDir \"${params.outdir}/centrifuge/results\", pattern: \"*-centrifuge_results.tsv\", mode: 'copy'\n  publishDir \"${params.outdir}/centrifuge/reports\", pattern: \"*-centrifuge_kreport.tsv\", mode: 'copy'\n                                                                                \n  memory {\n    file_sizes = file(centrifuge_db_dir).listFiles()\n      .findAll { it.isFile() && file(it).getExtension() == 'cf' }\n      .collect { it.size() }\n      .inject(0, { r, i -> r + i })\n      .toLong()\n    (file_sizes * 1.25).toLong()\n  }\n\n  input:\n    tuple db_name, \n          path(centrifuge_db_dir)\n    tuple sample_id,\n          path(reads1),\n          path(reads2)\n  output:\n    tuple sample_id,\n          path(reads1),\n          path(reads2),\n          path(results),\n          path(kreport)\n\n  script:\n  results = \"${sample_id}-centrifuge_results.tsv\"\n  kreport = \"${sample_id}-centrifuge_kreport.tsv\"\n  \"\"\"\n  centrifuge -x ${centrifuge_db_dir}/${db_name} \\\\\n    -1 $reads1 -2 $reads2 \\\\\n    -S $results -p ${task.cpus} \n  centrifuge-kreport -x ${centrifuge_db_dir}/${db_name} $results > $kreport\n  \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "  results = \"${sample_id}-centrifuge_results.tsv\"\n  kreport = \"${sample_id}-centrifuge_kreport.tsv\"\n  \"\"\"\n  centrifuge -x ${centrifuge_db_dir}/${db_name} \\\\\n    -1 $reads1 -2 $reads2 \\\\\n    -S $results -p ${task.cpus} \n  centrifuge-kreport -x ${centrifuge_db_dir}/${db_name} $results > $kreport\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "RESULTS:MWMM",
            "Centrifuge"
        ],
        "tools_url": [
            "https://bio.tools/RESULTSMWMM",
            "https://bio.tools/centrifuge"
        ],
        "tools_dico": [
            {
                "name": "RESULTS:MWMM",
                "uri": "https://bio.tools/RESULTSMWMM",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3792",
                                    "term": "miRNA expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3766",
                                    "term": "Weighted correlation network analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3432",
                                    "term": "Clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3792",
                                    "term": "miRNA expression profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3766",
                                    "term": "WGCNA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3766",
                                    "term": "Weighted gene co-expression network analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> MEDIUM CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'MWMM', 'blossom' | Clustering analysis of microRNA and mRNA expression data from TCGA using maximum edge-weighted matching algorithms | maximum weighted merger method",
                "homepage": "https://github.com/BaiLab/MWMM"
            },
            {
                "name": "Centrifuge",
                "uri": "https://bio.tools/centrifuge",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A very rapid and memory-efficient system for the classification of DNA sequences from microbial samples. The system uses a novel indexing scheme based on the Burrows-Wheeler transform and the Ferragina-Manzini index, optimized specifically for the metagenomic classification problem. Together these advances enable timely and accurate analysis of large metagenomics data sets on conventional desktop computers.",
                "homepage": "https://ccb.jhu.edu/software/centrifuge/"
            }
        ],
        "inputs": [
            "centrifuge_db_dir",
            "db_name",
            "reads1",
            "reads2",
            "sample_id"
        ],
        "nb_inputs": 5,
        "outputs": [
            "kreport"
        ],
        "nb_outputs": 1,
        "name_workflow": "peterk87__nf-villumina",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/centrifuge/results\", pattern: \"*-centrifuge_results.tsv\", mode: 'copy'",
            "publishDir \"${params.outdir}/centrifuge/reports\", pattern: \"*-centrifuge_kreport.tsv\", mode: 'copy'",
            "memory { file_sizes = file(centrifuge_db_dir).listFiles() .findAll { it.isFile() && file(it).getExtension() == 'cf' } .collect { it.size() } .inject(0, { r, i -> r + i }) .toLong() (file_sizes * 1.25).toLong() }"
        ],
        "when": "",
        "stub": ""
    },
    "FILTER_READS_BY_CLASSIFICATIONS": {
        "name_process": "FILTER_READS_BY_CLASSIFICATIONS",
        "string_process": "\nprocess FILTER_READS_BY_CLASSIFICATIONS {\n  tag \"$sample_id\"\n  publishDir \"${params.outdir}/filtered_reads/\", pattern: \"*.filtered.fastq.gz\", mode: 'copy'\n\n  input:\n    tuple sample_id,\n          path(reads1),\n          path(reads2),\n          path(kraken2_results),\n          path(kraken2_report),\n          path(centrifuge_results),\n          path(centrifuge_report)\n  output:\n    tuple sample_id,\n          path(filtered_reads1),\n          path(filtered_reads2) optional true\n\n  script:\n  filtered_reads1 = \"${sample_id}_1.filtered.fastq.gz\"\n  filtered_reads2 = \"${sample_id}_2.filtered.fastq.gz\"\n  exclude_unclassified_reads = (params.exclude_unclassified_reads) ? '--exclude-unclassified' : ''\n  \"\"\"\n  filter_classified_reads -i $reads1 -I $reads2 \\\\\n    -o $filtered_reads1 -O $filtered_reads2 \\\\\n    -c $centrifuge_results -C $centrifuge_report \\\\\n    -k $kraken2_results -K $kraken2_report \\\\\n    --taxids ${params.taxids} $exclude_unclassified_reads\n  \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "  filtered_reads1 = \"${sample_id}_1.filtered.fastq.gz\"\n  filtered_reads2 = \"${sample_id}_2.filtered.fastq.gz\"\n  exclude_unclassified_reads = (params.exclude_unclassified_reads) ? '--exclude-unclassified' : ''\n  \"\"\"\n  filter_classified_reads -i $reads1 -I $reads2 \\\\\n    -o $filtered_reads1 -O $filtered_reads2 \\\\\n    -c $centrifuge_results -C $centrifuge_report \\\\\n    -k $kraken2_results -K $kraken2_report \\\\\n    --taxids ${params.taxids} $exclude_unclassified_reads\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads1",
            "reads2",
            "kraken2_results",
            "kraken2_report",
            "centrifuge_results",
            "centrifuge_report",
            "sample_id"
        ],
        "nb_inputs": 7,
        "outputs": [
            "filtered_reads2"
        ],
        "nb_outputs": 1,
        "name_workflow": "peterk87__nf-villumina",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/filtered_reads/\", pattern: \"*.filtered.fastq.gz\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "UNICYCLER_ASSEMBLY": {
        "name_process": "UNICYCLER_ASSEMBLY",
        "string_process": "\nprocess UNICYCLER_ASSEMBLY {\n  tag \"$sample_id\"\n  publishDir \"${params.outdir}/assemblies/unicycler/$sample_id\", mode: 'copy'\n\n  input:\n    tuple(val(sample_id), path(reads1), path(reads2))\n  output:\n    tuple sample_id, val('unicycler'), path(output_contigs, optional: true), emit: 'contigs'\n    tuple sample_id, path(output_unicycler_log, optional: true), emit: 'log'\n    tuple sample_id, path(output_gfa, optional: true), emit: 'gfa'\n\n  script:\n  output_contigs = \"${sample_id}-assembly.fasta\"\n  output_gfa = \"${sample_id}-assembly.gfa\"\n  output_unicycler_log = \"${sample_id}-unicycler.log\"\n  \"\"\"\n  unicycler -t ${task.cpus} --mode ${params.unicycler_mode} -o $sample_id -1 $reads1 -2 $reads2\n  ln -s ${sample_id}/assembly.fasta $output_contigs\n  ln -s ${sample_id}/assembly.gfa $output_gfa\n  ln -s ${sample_id}/unicycler.log $output_unicycler_log\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  output_contigs = \"${sample_id}-assembly.fasta\"\n  output_gfa = \"${sample_id}-assembly.gfa\"\n  output_unicycler_log = \"${sample_id}-unicycler.log\"\n  \"\"\"\n  unicycler -t ${task.cpus} --mode ${params.unicycler_mode} -o $sample_id -1 $reads1 -2 $reads2\n  ln -s ${sample_id}/assembly.fasta $output_contigs\n  ln -s ${sample_id}/assembly.gfa $output_gfa\n  ln -s ${sample_id}/unicycler.log $output_unicycler_log\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "sample_id",
            "reads1",
            "reads2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "output_contigs",
            "output_unicycler_log",
            "output_gfa"
        ],
        "nb_outputs": 3,
        "name_workflow": "peterk87__nf-villumina",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/assemblies/unicycler/$sample_id\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "SHOVILL_ASSEMBLY": {
        "name_process": "SHOVILL_ASSEMBLY",
        "string_process": "\nprocess SHOVILL_ASSEMBLY {\n  tag \"$sample_id\"\n  publishDir \"${params.outdir}/assemblies/shovill/$sample_id\", mode: 'copy'\n\n  input:\n    tuple val(sample_id), path(reads1), path(reads2)\n  output:\n    tuple sample_id, val('shovill'), path(output_contigs, optional: true), emit: 'contigs'\n    tuple sample_id, path(output_shovill_log, optional: true), emit: 'log'\n    tuple sample_id, path(output_gfa, optional: true), emit: 'gfa'\n\n  script:\n  output_contigs = \"${sample_id}-contigs.fasta\"\n  output_gfa = \"${sample_id}-contigs.gfa\"\n  output_shovill_log = \"${sample_id}-shovill.log\"\n  shovill_trim = (params.shovill_trim) ? \"--trim\" : \"\"\n  \"\"\"\n  shovill --cpus ${task.cpus} --ram ${task.memory.toGiga()} \\\\\n    --R1 $reads1 --R2 $reads2 \\\\\n    --mincov 0.1 --depth 0 $shovill_trim \\\\\n    --outdir $sample_id \n  ln -s ${sample_id}/contigs.fa $output_contigs\n  ln -s ${sample_id}/contigs.gfa $output_gfa\n  ln -s ${sample_id}/shovill.log $output_shovill_log\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  output_contigs = \"${sample_id}-contigs.fasta\"\n  output_gfa = \"${sample_id}-contigs.gfa\"\n  output_shovill_log = \"${sample_id}-shovill.log\"\n  shovill_trim = (params.shovill_trim) ? \"--trim\" : \"\"\n  \"\"\"\n  shovill --cpus ${task.cpus} --ram ${task.memory.toGiga()} \\\\\n    --R1 $reads1 --R2 $reads2 \\\\\n    --mincov 0.1 --depth 0 $shovill_trim \\\\\n    --outdir $sample_id \n  ln -s ${sample_id}/contigs.fa $output_contigs\n  ln -s ${sample_id}/contigs.gfa $output_gfa\n  ln -s ${sample_id}/shovill.log $output_shovill_log\n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "shovill"
        ],
        "tools_url": [
            "https://bio.tools/shovill"
        ],
        "tools_dico": [
            {
                "name": "shovill",
                "uri": "https://bio.tools/shovill",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Shovill is a pipeline for assembly of bacterial isolate genomes from Illumina paired-end reads.  Shovill uses SPAdes at its core, but alters the steps before and after the primary assembly step to get similar results in less time. Shovill also supports other assemblers like SKESA, Velvet and Megahit, so you can take advantage of the pre- and post-processing the Shovill provides with those too.",
                "homepage": "https://github.com/tseemann/shovill"
            }
        ],
        "inputs": [
            "sample_id",
            "reads1",
            "reads2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "output_contigs",
            "output_shovill_log",
            "output_gfa"
        ],
        "nb_outputs": 3,
        "name_workflow": "peterk87__nf-villumina",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/assemblies/shovill/$sample_id\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "MEGAHIT_ASSEMBLY": {
        "name_process": "MEGAHIT_ASSEMBLY",
        "string_process": "\nprocess MEGAHIT_ASSEMBLY {\n  publishDir \"${params.outdir}/assemblies/megahit/$sample_id\", mode: 'copy'\n\n  input:\n    tuple val(sample_id), path(reads1), path(reads2)\n  output:\n    tuple sample_id, val('megahit'), path(output_contigs, optional: true), emit: 'contigs'\n    tuple sample_id, path(output_log, optional: true), emit: 'log'\n\n  script:\n  output_contigs = \"${sample_id}-contigs.fasta\"\n  output_log = \"${sample_id}-megahit.log\"\n  megahit_preset = (params.megahit_preset.toString() == '') ? '' : \"--presets ${params.megahit_preset}\"\n  \"\"\"\n  megahit \\\\\n    -t ${task.cpus} \\\\\n    -m ${task.memory.toBytes()} \\\\\n    $megahit_preset \\\\\n    -1 $reads1 \\\\\n    -2 $reads2 \\\\\n    -o out \\\\\n    --out-prefix out\n  ln -s out/out.contigs.fa $output_contigs\n  ln -s out/out.log $output_log\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  output_contigs = \"${sample_id}-contigs.fasta\"\n  output_log = \"${sample_id}-megahit.log\"\n  megahit_preset = (params.megahit_preset.toString() == '') ? '' : \"--presets ${params.megahit_preset}\"\n  \"\"\"\n  megahit \\\\\n    -t ${task.cpus} \\\\\n    -m ${task.memory.toBytes()} \\\\\n    $megahit_preset \\\\\n    -1 $reads1 \\\\\n    -2 $reads2 \\\\\n    -o out \\\\\n    --out-prefix out\n  ln -s out/out.contigs.fa $output_contigs\n  ln -s out/out.log $output_log\n  \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "MEGAHIT"
        ],
        "tools_url": [
            "https://bio.tools/megahit"
        ],
        "tools_dico": [
            {
                "name": "MEGAHIT",
                "uri": "https://bio.tools/megahit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0610",
                            "term": "Ecology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Single node assembler for large and complex metagenomics NGS reads, such as soil. It makes use of succinct de Bruijn graph to achieve low memory usage, whereas its goal is not to make memory usage as low as possible.",
                "homepage": "https://github.com/voutcn/megahit"
            }
        ],
        "inputs": [
            "sample_id",
            "reads1",
            "reads2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "output_contigs",
            "output_log"
        ],
        "nb_outputs": 2,
        "name_workflow": "peterk87__nf-villumina",
        "directive": [
            "publishDir \"${params.outdir}/assemblies/megahit/$sample_id\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "BLASTN": {
        "name_process": "BLASTN",
        "string_process": "\nprocess BLASTN {\n  publishDir \"${params.outdir}/blastn/$assembler\", pattern: \"*.tsv\", mode: 'copy'\n  tag \"$sample_id|$dbname|$assembler|$txids\"\n\n  input:\n    tuple dbname, path(dbdir)\n    path(txids)\n    tuple val(sample_id), val(assembler), path(contigs)\n  output:\n    tuple val(sample_id), val(assembler), path(contigs), path(blast_out)\n\n  script:\n  taxidlist_opt = (taxids == 'EMPTY') ? '' : \"-taxidlist $txids\"\n  blast_out = \"blastn-${sample_id}-VS-${dbname}.tsv\"\n  blast_tab_columns = \"qaccver saccver pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen stitle staxid ssciname\"\n  \"\"\"\n  blastn $taxidlist_opt \\\\\n    -num_threads ${task.cpus} \\\\\n    -db $dbdir/$dbname \\\\\n    -query $contigs \\\\\n    -outfmt \"6 $blast_tab_columns\" \\\\\n    -evalue 1e-6 \\\\\n    -out $blast_out\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  taxidlist_opt = (taxids == 'EMPTY') ? '' : \"-taxidlist $txids\"\n  blast_out = \"blastn-${sample_id}-VS-${dbname}.tsv\"\n  blast_tab_columns = \"qaccver saccver pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen stitle staxid ssciname\"\n  \"\"\"\n  blastn $taxidlist_opt \\\\\n    -num_threads ${task.cpus} \\\\\n    -db $dbdir/$dbname \\\\\n    -query $contigs \\\\\n    -outfmt \"6 $blast_tab_columns\" \\\\\n    -evalue 1e-6 \\\\\n    -out $blast_out\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "dbdir",
            "dbname",
            "txids",
            "sample_id",
            "assembler",
            "contigs"
        ],
        "nb_inputs": 6,
        "outputs": [
            "assembler"
        ],
        "nb_outputs": 1,
        "name_workflow": "peterk87__nf-villumina",
        "directive": [
            "publishDir \"${params.outdir}/blastn/$assembler\", pattern: \"*.tsv\", mode: 'copy'",
            "tag \"$sample_id|$dbname|$assembler|$txids\""
        ],
        "when": "",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "\nprocess MULTIQC {\n    publishDir params.outdir, mode:'copy'\n\n    input:\n    path('*') \n    path(config) \n\n    output:\n    path('multiqc_report.html')\n\n    script:\n    \"\"\"\n    cp $config/* .\n    echo \"custom_logo: \\$PWD/logo.png\" >> multiqc_config.yaml\n    multiqc .\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    cp $config/* .\n    echo \"custom_logo: \\$PWD/logo.png\" >> multiqc_config.yaml\n    multiqc .\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "config"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "peterk87__nf-villumina",
        "directive": [
            "publishDir params.outdir, mode:'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "download": {
        "name_process": "download",
        "string_process": "\nprocess download {\n    executor 'pbs'\n    queue params.queue\n    cpus 1\n    time '72h'\n\n    input:\n        tuple val(name), val(target) \n\n    output:\n        tuple val(name), path(\"*.2bit\"), emit: twobit optional true\n        tuple val(name), path(\"*.gz\"), emit: gzip optional true\n\n    script:\n    \"\"\"\n        wget -O ${name} ${target}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n        wget -O ${name} ${target}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "target"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "njspix__ref_genomes",
        "directive": [
            "executor 'pbs'",
            "queue params.queue",
            "cpus 1",
            "time '72h'"
        ],
        "when": "",
        "stub": ""
    },
    "unpack": {
        "name_process": "unpack",
        "string_process": "\nprocess unpack {\n    executor 'pbs'\n    queue params.queue\n    cpus 1\n    time '72h'\n    conda params.conda_path+'/index'\n\n    input:\n        tuple val(name), path(twobit) \n\n    output:\n        tuple val(id), path(\"*.f*a\") \n\n    script:\n    id = file(name).getSimpleName().toString()\n    \"\"\"\n        twoBitToFa ${twobit} ${id}.fa\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    id = file(name).getSimpleName().toString()\n    \"\"\"\n        twoBitToFa ${twobit} ${id}.fa\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MID"
        ],
        "tools_url": [
            "https://bio.tools/mid"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            }
        ],
        "inputs": [
            "name",
            "twobit"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "njspix__ref_genomes",
        "directive": [
            "executor 'pbs'",
            "queue params.queue",
            "cpus 1",
            "time '72h'",
            "conda params.conda_path+'/index'"
        ],
        "when": "",
        "stub": ""
    },
    "unzip": {
        "name_process": "unzip",
        "string_process": "\nprocess unzip {\n    executor 'pbs'\n    queue params.queue\n    cpus 1\n    time '72h'\n\n    input:\n        tuple val(name), path(gzip) \n\n    output:\n        tuple val(id), path(\"*.fa\") \n\n    script:\n    id = file(name).getSimpleName().toString()\n    \"\"\"\n        gunzip -f ${gzip}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    id = file(name).getSimpleName().toString()\n    \"\"\"\n        gunzip -f ${gzip}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MID"
        ],
        "tools_url": [
            "https://bio.tools/mid"
        ],
        "tools_dico": [
            {
                "name": "MID",
                "uri": "https://bio.tools/mid",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "MID (Micro-Inversion Detector) is a tool to detect microinversions (MIs) by mapping initially unmapped short reads back onto reference genome sequence (i.e. human genome assebly hg19).",
                "homepage": "http://cqb.pku.edu.cn/ZhuLab/MID/index.html"
            }
        ],
        "inputs": [
            "name",
            "gzip"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "njspix__ref_genomes",
        "directive": [
            "executor 'pbs'",
            "queue params.queue",
            "cpus 1",
            "time '72h'"
        ],
        "when": "",
        "stub": ""
    },
    "adjoin_lambda": {
        "name_process": "adjoin_lambda",
        "string_process": "\nprocess adjoin_lambda {\n    executor 'pbs'\n    queue params.queue\n    cpus 1\n    time '72h'\n\n    input:\n        tuple val(ref_name), path(ref), path(lambda) \n\n    output:\n        tuple val(new_ref_name), path(\"*.fa\") \n\n    script:\n    new_ref_name = ref_name+\"_lambda\"\n    \"\"\"\n        cat ${ref} ${lambda} > ${new_ref_name}.fa\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    new_ref_name = ref_name+\"_lambda\"\n    \"\"\"\n        cat ${ref} ${lambda} > ${new_ref_name}.fa\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ref_name",
            "ref",
            "lambda"
        ],
        "nb_inputs": 3,
        "outputs": [
            "new_ref_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "njspix__ref_genomes",
        "directive": [
            "executor 'pbs'",
            "queue params.queue",
            "cpus 1",
            "time '72h'"
        ],
        "when": "",
        "stub": ""
    },
    "biscuit_index": {
        "name_process": "biscuit_index",
        "string_process": "\nprocess biscuit_index {\n    executor 'pbs'\n    queue params.queue\n    cpus 1\n    time '72h'\n    conda params.conda_path+'/index'\n    publishDir \"${params.out_dir}/${id}/biscuit\", mode: 'copy'\n\n    input:\n        tuple val(id), path(ref)\n\n    output:\n        path(\"*\", includeInputs: true)\n\n    script:\n    \"\"\"\n        biscuit index ${ref}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n        biscuit index ${ref}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "ref"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "njspix__ref_genomes",
        "directive": [
            "executor 'pbs'",
            "queue params.queue",
            "cpus 1",
            "time '72h'",
            "conda params.conda_path+'/index'",
            "publishDir \"${params.out_dir}/${id}/biscuit\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bwa_index": {
        "name_process": "bwa_index",
        "string_process": "\nprocess bwa_index {\n    executor 'pbs'\n    queue params.queue\n    cpus 1\n    time '72h'\n    conda params.conda_path+'/index'\n    publishDir \"${params.out_dir}/${id}/bwa\", mode: 'copy'\n\n    input:\n        tuple val(id), path(ref)\n\n    output:\n        path(\"*\", includeInputs: true)\n\n    script:\n    \"\"\"\n        bwa index ${ref}\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n        bwa index ${ref}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "id",
            "ref"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "njspix__ref_genomes",
        "directive": [
            "executor 'pbs'",
            "queue params.queue",
            "cpus 1",
            "time '72h'",
            "conda params.conda_path+'/index'",
            "publishDir \"${params.out_dir}/${id}/bwa\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
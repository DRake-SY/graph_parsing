{
    "saige_null_fitting": {
        "name_process": "saige_null_fitting",
        "string_process": "process saige_null_fitting {\n    label \"saige\"\n    input:\n        tuple path(hardcalls_bed), path(hardcalls_bim), path(fam), path(pheno)\n    output:\n        path(\"null_model.rda\"), emit: null_model\n        path(\"null_model.varianceRatio.txt\"), emit: variance_ratio\n    script:\n        \"\"\"\n        cp \"${fam}\" hardcalls_merged.fam\n        step1_fitNULLGLMM.R \\\n            --plinkFile hardcalls_merged \\\n            --phenoFile \"${pheno}\" \\\n            --phenoCol standing_height \\\n            --sampleIDColinphenoFile IID \\\n            --covarColList genetic_sex \\\n            --traitType quantitative \\\n            --invNormalize TRUE \\\n            --nThreads \"${task.cpus}\" \\\n            --LOCO FALSE \\\n            --tauInit 1,0 \\\n            --outputPrefix \"null_model\"\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        cp \"${fam}\" hardcalls_merged.fam\n        step1_fitNULLGLMM.R \\\n            --plinkFile hardcalls_merged \\\n            --phenoFile \"${pheno}\" \\\n            --phenoCol standing_height \\\n            --sampleIDColinphenoFile IID \\\n            --covarColList genetic_sex \\\n            --traitType quantitative \\\n            --invNormalize TRUE \\\n            --nThreads \"${task.cpus}\" \\\n            --LOCO FALSE \\\n            --tauInit 1,0 \\\n            --outputPrefix \"null_model\"\n        \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "hardcalls_bed",
            "hardcalls_bim",
            "fam",
            "pheno"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "label \"saige\""
        ],
        "when": "",
        "stub": ""
    },
    "saige_assoc": {
        "name_process": "saige_assoc",
        "string_process": "\nprocess saige_assoc {\n    label \"saige\"\n    publishDir \"results/saige/\", mode: 'copy'\n    input:\n        tuple val(prefix), path(genotypes), path(sample), path(null_model), path(variance_ratio)\n    output:\n        tuple val(prefix), path(\"${prefix}.out.txt\"), emit: saige_results\n    script:\n        \"\"\"\n        # saige wants a headerless .sample file\n        sed -e 1,2d < ${sample} > headerless.sample\n        step2_SPAtests.R  \\\n            --bgenFile ${prefix}.bgen \\\n            --sampleFile headerless.sample \\\n            --chrom ${prefix} \\\n            --GMMATmodelFile ${null_model} \\\n            --varianceRatioFile ${variance_ratio} \\\n            --SAIGEOutputFile ${prefix}.out.txt \\\n            --numLinesOutput 2 \\\n            --LOCO FALSE\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        # saige wants a headerless .sample file\n        sed -e 1,2d < ${sample} > headerless.sample\n        step2_SPAtests.R  \\\n            --bgenFile ${prefix}.bgen \\\n            --sampleFile headerless.sample \\\n            --chrom ${prefix} \\\n            --GMMATmodelFile ${null_model} \\\n            --varianceRatioFile ${variance_ratio} \\\n            --SAIGEOutputFile ${prefix}.out.txt \\\n            --numLinesOutput 2 \\\n            --LOCO FALSE\n        \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "genotypes",
            "sample",
            "null_model",
            "variance_ratio"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "label \"saige\"",
            "publishDir \"results/saige/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "regenie_step_1": {
        "name_process": "regenie_step_1",
        "string_process": "process regenie_step_1 {\n    label \"regenie\"\n    input:\n        tuple path(hardcalls_bed), path(hardcalls_bim), path(fam), path(pheno)\n    output:\n        path(\"regenie_step_1_pred.list\"), emit: regenie_predictions\n    script:\n        \"\"\"\n        cp \"${fam}\" hardcalls_merged.fam\n        regenie \\\n            --step 1 \\\n            --bed hardcalls_merged \\\n            --phenoFile ${pheno} \\\n            --covarFile ${pheno} \\\n            --phenoCol standing_height \\\n            --covarCol genetic_sex \\\n            --bsize 1000 \\\n            --lowmem \\\n            --threads ${task.cpus} \\\n            --out regenie_step_1\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        \"\"\"\n        cp \"${fam}\" hardcalls_merged.fam\n        regenie \\\n            --step 1 \\\n            --bed hardcalls_merged \\\n            --phenoFile ${pheno} \\\n            --covarFile ${pheno} \\\n            --phenoCol standing_height \\\n            --covarCol genetic_sex \\\n            --bsize 1000 \\\n            --lowmem \\\n            --threads ${task.cpus} \\\n            --out regenie_step_1\n        \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "hardcalls_bed",
            "hardcalls_bim",
            "fam",
            "pheno"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "label \"regenie\""
        ],
        "when": "",
        "stub": ""
    },
    "regenie_step_2": {
        "name_process": "regenie_step_2",
        "string_process": "\nprocess regenie_step_2 {\n    label \"regenie\"\n    publishDir \"results/regenie/\", mode: 'copy'\n    input:\n        tuple val(prefix), path(genotypes), path(sample), path(pheno), path(pred)\n    output:\n        path(\"*.regenie\"), emit: results\n    script:\n        \"\"\"\n        regenie \\\n            --step 2 \\\n            --bgen ${prefix}.bgen \\\n            --ref-first \\\n            --sample ${sample} \\\n            --phenoFile ${pheno} \\\n            --covarFile ${pheno} \\\n            --phenoCol standing_height \\\n            --covarCol genetic_sex \\\n            --firth 0.01 --approx \\\n            --pred ${pred} \\\n            --bsize 400 \\\n            --split \\\n            --threads ${task.cpus} \\\n            --out ${prefix}\n        \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "        \"\"\"\n        regenie \\\n            --step 2 \\\n            --bgen ${prefix}.bgen \\\n            --ref-first \\\n            --sample ${sample} \\\n            --phenoFile ${pheno} \\\n            --covarFile ${pheno} \\\n            --phenoCol standing_height \\\n            --covarCol genetic_sex \\\n            --firth 0.01 --approx \\\n            --pred ${pred} \\\n            --bsize 400 \\\n            --split \\\n            --threads ${task.cpus} \\\n            --out ${prefix}\n        \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "genotypes",
            "sample",
            "pheno",
            "pred"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "label \"regenie\"",
            "publishDir \"results/regenie/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "make_phenotypes": {
        "name_process": "make_phenotypes",
        "string_process": "\nprocess make_phenotypes {\n    label \"R\"\n    tag \"phenotypes\"\n    publishDir \"results/\", mode: 'copy'\n\n    input:\n        path(phenotypes)\n        path(to_include)\n    output:\n        path(\"phenotypes.txt\"), emit: pheno\n    script:\n        \"\"\"\n        #!/usr/bin/env Rscript\n        library(vroom)\n        library(tidyverse)\n        to_include <- read_delim(\"$to_include\",\n                                 col_names = FALSE,\n                                 delim = \" \",\n                                 trim_ws = TRUE) %>% \n            mutate(ids = paste0(\"f.\", X1, \".0.0\"))\n        \n        # add PCs\n        pcs <- paste0(\"f.22009.0.\", seq(1, 15))\n        pcs_name <- paste0(\"PC\", seq(1, 15))\n        pcs_tibble <- tibble(X1 = rep(22009, 15), X2 = pcs_name, ids = pcs)\n        to_include <- to_include %>% bind_rows(pcs_tibble)\n\n        all_phenotypes <- vroom(\"$phenotypes\",\n                                col_names = TRUE,\n                                num_threads = $task.cpus,\n                                col_select = c(f.eid,\n                                               all_of(to_include\\$ids))) %>% \n            rename(FID = f.eid) %>%\n            mutate(IID = FID) %>%\n            relocate(IID, .after = FID) %>%\n            rename_at(vars(to_include\\$ids), ~ to_include\\$X2) %>%\n            drop_na()\n        write_tsv(all_phenotypes, path = \"phenotypes.txt\")\n        \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "        \"\"\"\n        #!/usr/bin/env Rscript\n        library(vroom)\n        library(tidyverse)\n        to_include <- read_delim(\"$to_include\",\n                                 col_names = FALSE,\n                                 delim = \" \",\n                                 trim_ws = TRUE) %>% \n            mutate(ids = paste0(\"f.\", X1, \".0.0\"))\n        \n        # add PCs\n        pcs <- paste0(\"f.22009.0.\", seq(1, 15))\n        pcs_name <- paste0(\"PC\", seq(1, 15))\n        pcs_tibble <- tibble(X1 = rep(22009, 15), X2 = pcs_name, ids = pcs)\n        to_include <- to_include %>% bind_rows(pcs_tibble)\n\n        all_phenotypes <- vroom(\"$phenotypes\",\n                                col_names = TRUE,\n                                num_threads = $task.cpus,\n                                col_select = c(f.eid,\n                                               all_of(to_include\\$ids))) %>% \n            rename(FID = f.eid) %>%\n            mutate(IID = FID) %>%\n            relocate(IID, .after = FID) %>%\n            rename_at(vars(to_include\\$ids), ~ to_include\\$X2) %>%\n            drop_na()\n        write_tsv(all_phenotypes, path = \"phenotypes.txt\")\n        \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotypes",
            "to_include"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "label \"R\"",
            "tag \"phenotypes\"",
            "publishDir \"results/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "make_train_test": {
        "name_process": "make_train_test",
        "string_process": "\nprocess make_train_test {\n    label \"R\"\n    tag \"ids\"\n    publishDir \"results/\", mode: \"copy\"\n    input:\n        path(phenotypes)\n    output:\n        path(\"train_ids_to_include.txt\"), emit: train_ids_to_include\n        path(\"test_ids_to_include.txt\"), emit: test_ids_to_include\n        path(\"phenotypes_split.rds\"), emit: splits_rds\n    script:\n        \"\"\"\n        #!/usr/bin/env Rscript\n        library(tidyverse)\n        library(tidymodels)\n\n        set.seed(1)\n        phenotypes <- read_tsv(\"$phenotypes\")\n        splits <- initial_split(phenotypes,\n                                strata = \"genetic_sex\")\n        train_data <- training(splits)\n        test_data <- testing(splits)\n        train_ids_to_include <- train_data %>%\n            select(FID, IID)\n        test_ids_to_include <- test_data %>%\n            select(FID, IID)\n        \n        write_tsv(train_ids_to_include, path = \"train_ids_to_include.txt\")\n        write_tsv(test_ids_to_include, path = \"test_ids_to_include.txt\")\n        saveRDS(splits, \"phenotypes_split.rds\")\n        \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "        \"\"\"\n        #!/usr/bin/env Rscript\n        library(tidyverse)\n        library(tidymodels)\n\n        set.seed(1)\n        phenotypes <- read_tsv(\"$phenotypes\")\n        splits <- initial_split(phenotypes,\n                                strata = \"genetic_sex\")\n        train_data <- training(splits)\n        test_data <- testing(splits)\n        train_ids_to_include <- train_data %>%\n            select(FID, IID)\n        test_ids_to_include <- test_data %>%\n            select(FID, IID)\n        \n        write_tsv(train_ids_to_include, path = \"train_ids_to_include.txt\")\n        write_tsv(test_ids_to_include, path = \"test_ids_to_include.txt\")\n        saveRDS(splits, \"phenotypes_split.rds\")\n        \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotypes"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "label \"R\"",
            "tag \"ids\"",
            "publishDir \"results/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "filter_cohort": {
        "name_process": "filter_cohort",
        "string_process": "\nprocess filter_cohort {\n    label \"plink2\"\n    publishDir \"results/\", mode: \"copy\"\n    input:\n        tuple val(prefix), path(genotypes), path(fam), path(to_include), path(phenotypes)\n    output:\n        tuple val(prefix), path(\"genotypes/${prefix}.{bed,bim,fam}\"), emit: genotypes_filtered\n    script:\n        \"\"\"\n        mkdir genotypes\n        plink2 --threads \"${task.cpus}\" --bpfile \"${prefix}\" \\\n            --fam \"${fam}\" --keep \"${to_include}\" --maf 0.01 \\\n            --hwe 1e-20 --geno 0.05 --max-alleles 2 --make-bed \\\n            --out \"genotypes/${prefix}\"\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        mkdir genotypes\n        plink2 --threads \"${task.cpus}\" --bpfile \"${prefix}\" \\\n            --fam \"${fam}\" --keep \"${to_include}\" --maf 0.01 \\\n            --hwe 1e-20 --geno 0.05 --max-alleles 2 --make-bed \\\n            --out \"genotypes/${prefix}\"\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "genotypes",
            "fam",
            "to_include",
            "phenotypes"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "label \"plink2\"",
            "publishDir \"results/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "filter_hardcalls": {
        "name_process": "filter_hardcalls",
        "string_process": "\nprocess filter_hardcalls {\n    label \"plink2\"\n    publishDir \"results/genotypes/\", mode: \"copy\"\n    input:\n        tuple val(prefix), path(genotypes), path(fam), path(to_include), path(phenotypes), path(hardcalls)\n    output:\n        path(\"hardcalls/${prefix}.{bed,bim,fam}\"), emit: genotypes_hardcalls_filtered\n    script:\n        \"\"\"\n        mkdir hardcalls\n        plink2 --threads \"${task.cpus}\" --bfile \"${prefix}\" \\\n            --fam \"${fam}\" --keep \"${to_include}\" --maf 0.01 \\\n            --hwe 1e-20 --geno 0.05 --max-alleles 2 --make-bed \\\n            --extract \"${hardcalls}\" --out \"hardcalls/${prefix}\"\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        mkdir hardcalls\n        plink2 --threads \"${task.cpus}\" --bfile \"${prefix}\" \\\n            --fam \"${fam}\" --keep \"${to_include}\" --maf 0.01 \\\n            --hwe 1e-20 --geno 0.05 --max-alleles 2 --make-bed \\\n            --extract \"${hardcalls}\" --out \"hardcalls/${prefix}\"\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "genotypes",
            "fam",
            "to_include",
            "phenotypes",
            "hardcalls"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "label \"plink2\"",
            "publishDir \"results/genotypes/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "make_bgen": {
        "name_process": "make_bgen",
        "string_process": "\nprocess make_bgen {\n    label \"plink2\"\n    publishDir \"results/genotypes\", mode: \"copy\"\n    input:\n        tuple val(prefix), path(genotypes)\n    output:\n        path(\"${prefix}.{bgen,sample}\"), emit: bgen_full\n    script:\n        \"\"\"\n        plink2 --threads \"${task.cpus}\" --bfile \"${prefix}\" \\\n            --export bgen-1.2 bits=8 --out \"${prefix}\"\n        \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        plink2 --threads \"${task.cpus}\" --bfile \"${prefix}\" \\\n            --export bgen-1.2 bits=8 --out \"${prefix}\"\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "genotypes"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "label \"plink2\"",
            "publishDir \"results/genotypes\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "unpack_hard_calls": {
        "name_process": "unpack_hard_calls",
        "string_process": "\nprocess unpack_hard_calls {\n    input:\n        path(hardcalls)\n    output:\n        path(\"*.txt\"), emit: hardcalls_list\n    script:\n        \"\"\"\n        tar xf \"${hardcalls}\"\n        for bim in *bim\n            do\n                base=\\$(basename \"\\${bim}\" _v2.bim)\n                prefix=\"\\${base#ukb_snp_}\"\n                cut -f2 \"\\${bim}\" > \"\\${prefix}\".txt\n            done\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        tar xf \"${hardcalls}\"\n        for bim in *bim\n            do\n                base=\\$(basename \"\\${bim}\" _v2.bim)\n                prefix=\"\\${base#ukb_snp_}\"\n                cut -f2 \"\\${bim}\" > \"\\${prefix}\".txt\n            done\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "hardcalls"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "merge_chromosomes": {
        "name_process": "merge_chromosomes",
        "string_process": "\nprocess merge_chromosomes {\n    label \"plink_dev\"\n    input:\n        path(fam)\n        path(genotypes)\n    output:\n        path(\"ukbb_merged.*\"), emit: ukbb_merged\n    script:\n        \"\"\"\n        # this is a placeholder containing the correct commands, but this step \n        # is not implemented in the pipeline yet\n        # TODO automate the merging. it will need splitting into several\n        # processes\n        # 1. generate the exclude missnp list. Plink errors at this step\n        # the error code will need to be ignored (with a trap?)\n        for chr in {2..22}\n            do\n                echo \"chr\\${chr}\" >> temp_list_beds_to_exclude.txt\n            done\n        plink --threads \"${task.cpus}\" \\\n            --bfile chr1 \\\n            --merge-list temp_list_beds_to_exclude.txt \\\n            --make-bed --out to_exclude\n        \n        # 2. exclude the multiallelic snps from all chromosomes\n        for chr in {1..22}\n            do\n                plink --threads \"${task.cpus}\" \\\n                --bfile chr\\${chr} \\\n                --exclude to_exclude-merge.missnp \\\n                --make-bed \\\n                --out chr\\${chr}_dedup\n            done\n        \n        # 3. merge the files\n        for chr in {2..22}\n            do\n                echo \"chr\\${chr}_dedup\" >> list_beds.txt\n            done\n        plink --threads \"${task.cpus}\" \\\n            --bfile chr1_dedup \\\n            --merge-list list_beds.txt \\\n            --make-bed \\\n            --out hardcalls_merged\n        \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "        \"\"\"\n        # this is a placeholder containing the correct commands, but this step \n        # is not implemented in the pipeline yet\n        # TODO automate the merging. it will need splitting into several\n        # processes\n        # 1. generate the exclude missnp list. Plink errors at this step\n        # the error code will need to be ignored (with a trap?)\n        for chr in {2..22}\n            do\n                echo \"chr\\${chr}\" >> temp_list_beds_to_exclude.txt\n            done\n        plink --threads \"${task.cpus}\" \\\n            --bfile chr1 \\\n            --merge-list temp_list_beds_to_exclude.txt \\\n            --make-bed --out to_exclude\n        \n        # 2. exclude the multiallelic snps from all chromosomes\n        for chr in {1..22}\n            do\n                plink --threads \"${task.cpus}\" \\\n                --bfile chr\\${chr} \\\n                --exclude to_exclude-merge.missnp \\\n                --make-bed \\\n                --out chr\\${chr}_dedup\n            done\n        \n        # 3. merge the files\n        for chr in {2..22}\n            do\n                echo \"chr\\${chr}_dedup\" >> list_beds.txt\n            done\n        plink --threads \"${task.cpus}\" \\\n            --bfile chr1_dedup \\\n            --merge-list list_beds.txt \\\n            --make-bed \\\n            --out hardcalls_merged\n        \"\"\"",
        "nb_lignes_script": 36,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "fam",
            "genotypes"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "label \"plink_dev\""
        ],
        "when": "",
        "stub": ""
    },
    "plink2": {
        "name_process": "plink2",
        "string_process": "process plink2 {\n    tag \"$prefix\"\n    label \"plink2\"\n    publishDir \"results/plink2/\", mode: 'copy'\n    input:\n        tuple val(prefix), path(genotypes), path(fam), path(to_include), path(pheno)\n    output:\n        tuple val(prefix), path(\"${prefix}.*.glm.linear\"), emit:  plink_results\n    script:\n        \"\"\"\n        plink2 --bpfile \"${prefix}\" --fam \"${fam}\" --keep \"${to_include}\" \\\n            --out \"${prefix}\" --threads \"${task.cpus}\" \\\n            --ci 0.95 --glm hide-covar cols=+a1freq,+ax --maf 0.01 \\\n            --hwe 1e-20 --geno 0.05 --pheno ${pheno} --max-alleles 2 \\\n            --covar ${pheno} --pheno-name standing_height \\\n            --covar-name genetic_sex PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 \\\n                PC9 PC10 PC11 PC12 PC13 PC14 PC15 \n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        plink2 --bpfile \"${prefix}\" --fam \"${fam}\" --keep \"${to_include}\" \\\n            --out \"${prefix}\" --threads \"${task.cpus}\" \\\n            --ci 0.95 --glm hide-covar cols=+a1freq,+ax --maf 0.01 \\\n            --hwe 1e-20 --geno 0.05 --pheno ${pheno} --max-alleles 2 \\\n            --covar ${pheno} --pheno-name standing_height \\\n            --covar-name genetic_sex PC1 PC2 PC3 PC4 PC5 PC6 PC7 PC8 \\\n                PC9 PC10 PC11 PC12 PC13 PC14 PC15 \n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "genotypes",
            "fam",
            "to_include",
            "pheno"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "tag \"$prefix\"",
            "label \"plink2\"",
            "publishDir \"results/plink2/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bolt_lmm": {
        "name_process": "bolt_lmm",
        "string_process": "process bolt_lmm {\n    label \"bolt\"\n    publishDir \"results/bolt/\", mode: 'copy'\n    tag \"all\"\n    input:\n        path(hardcalls)\n        path(imputed)\n        path(sample)\n        path(fam)\n        path(pheno)\n    output:\n        path(\"bolt_all_chr.*\"), emit: bolt_results\n    script:\n        \"\"\"\n        for bgen in *bgen\n            do\n                prefix=\\$(basename \\$bgen .bgen)\n                echo \\$bgen ${sample} >> list_bgen.txt\n            done\n        bolt \\\n            --bed hardcalls_merged.bed \\\n            --bim hardcalls_merged.bim \\\n            --fam \"${fam}\" \\\n            --phenoFile \"${pheno}\" \\\n            --phenoCol standing_height \\\n            --covarFile \"${pheno}\" \\\n            --covarCol genetic_sex \\\n            --qCovarCol PC{1:15} \\\n            --LDscoresFile \\$BOLT_LMM_ROOT/tables/LDSCORE.1000G_EUR.tab.gz \\\n            --geneticMapFile \\$BOLT_LMM_ROOT/tables/genetic_map_hg19_withX.txt.gz \\\n            --lmmForceNonInf \\\n            --numThreads ${task.cpus} \\\n            --statsFile bolt_all_chr.hardcalls.txt \\\n            --bgenSampleFileList list_bgen.txt \\\n            --statsFileBgenSnps bolt_all_chr.bgen.txt \\\n            --verboseStats\n        \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "        \"\"\"\n        for bgen in *bgen\n            do\n                prefix=\\$(basename \\$bgen .bgen)\n                echo \\$bgen ${sample} >> list_bgen.txt\n            done\n        bolt \\\n            --bed hardcalls_merged.bed \\\n            --bim hardcalls_merged.bim \\\n            --fam \"${fam}\" \\\n            --phenoFile \"${pheno}\" \\\n            --phenoCol standing_height \\\n            --covarFile \"${pheno}\" \\\n            --covarCol genetic_sex \\\n            --qCovarCol PC{1:15} \\\n            --LDscoresFile \\$BOLT_LMM_ROOT/tables/LDSCORE.1000G_EUR.tab.gz \\\n            --geneticMapFile \\$BOLT_LMM_ROOT/tables/genetic_map_hg19_withX.txt.gz \\\n            --lmmForceNonInf \\\n            --numThreads ${task.cpus} \\\n            --statsFile bolt_all_chr.hardcalls.txt \\\n            --bgenSampleFileList list_bgen.txt \\\n            --statsFileBgenSnps bolt_all_chr.bgen.txt \\\n            --verboseStats\n        \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "Bolt"
        ],
        "tools_url": [
            "https://bio.tools/Bolt"
        ],
        "tools_dico": [
            {
                "name": "Bolt",
                "uri": "https://bio.tools/Bolt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3645",
                                    "term": "PTM identification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3646",
                                    "term": "Peptide database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A cloud-based peptide search engine for MS/MS sequencing.",
                "homepage": "http://www.optystech.com/"
            }
        ],
        "inputs": [
            "hardcalls",
            "imputed",
            "sample",
            "fam",
            "pheno"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "label \"bolt\"",
            "publishDir \"results/bolt/\", mode: 'copy'",
            "tag \"all\""
        ],
        "when": "",
        "stub": ""
    },
    "filter_sample": {
        "name_process": "filter_sample",
        "string_process": "\nprocess filter_sample {\n    label \"R\"\n    input:\n        path(fam)\n        path(sample)\n    output:\n        path(\"ukb_all_chr.fam\"), emit: fam\n    script:\n        \"\"\"\n        #!/usr/bin/env Rscript\n        library(tidyverse)\n        fam_file <- read_delim(\"${fam}\",\n                        delim = \"\\t\",\n                        col_names = FALSE)\n        sample_file <- read_delim(\"${sample}\",\n                                delim = \" \")\n\n        sample_file_ids <- sample_file\\$ID_1\n        to_keep <- fam_file %>%\n            filter(`X1` %in% sample_file_ids)\n\n        write_delim(to_keep,\n                    \"ukb_all_chr.fam\",\n                    delim = \"\\t\",\n                    col_names = FALSE)\n        \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "        \"\"\"\n        #!/usr/bin/env Rscript\n        library(tidyverse)\n        fam_file <- read_delim(\"${fam}\",\n                        delim = \"\\t\",\n                        col_names = FALSE)\n        sample_file <- read_delim(\"${sample}\",\n                                delim = \" \")\n\n        sample_file_ids <- sample_file\\$ID_1\n        to_keep <- fam_file %>%\n            filter(`X1` %in% sample_file_ids)\n\n        write_delim(to_keep,\n                    \"ukb_all_chr.fam\",\n                    delim = \"\\t\",\n                    col_names = FALSE)\n        \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fam",
            "sample"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__gwas_benchmarks",
        "directive": [
            "label \"R\""
        ],
        "when": "",
        "stub": ""
    }
}
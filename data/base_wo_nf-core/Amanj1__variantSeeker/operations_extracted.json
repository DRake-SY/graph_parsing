{
    "OPERATION_1": {
        "string": "fastq_files = Channel.fromFilePairs(\"${params.fastq_dir}/**/*_{1,2,unpaired}.fq.gz\",size:3)",
        "origin": [
            [
                "\"${params.fastq_dir}/**/*_{1,2,unpaired}.fq.gz\",size:3",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_files",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "html_files = Channel.fromFilePairs(\"${params.html_dir}/html_{start,end}.txt\",size:2)",
        "origin": [
            [
                "\"${params.html_dir}/html_{start,end}.txt\",size:2",
                "A"
            ]
        ],
        "gives": [
            [
                "html_files",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "fastq_files.into{reformat_PE_in;\nreformat_S_in;\nextraction_in}",
        "origin": [
            [
                "fastq_files",
                "P"
            ]
        ],
        "gives": [
            [
                "reformat_PE_in",
                "P"
            ],
            [
                "reformat_S_in",
                "P"
            ],
            [
                "extraction_in",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "html_files.into{html_each;\nhtml_all}",
        "origin": [
            [
                "html_files",
                "P"
            ]
        ],
        "gives": [
            [
                "html_each",
                "P"
            ],
            [
                "html_all",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "tmp = blastn_phase1_PE.combine(blastn_phase1_S, by: 0)",
        "origin": [
            [
                "blastn_phase1_PE",
                "P"
            ]
        ],
        "gives": [
            [
                "tmp",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "blastn_phase1_with_fq = tmp.combine(extraction_in, by: 0)",
        "origin": [
            [
                "tmp",
                "P"
            ]
        ],
        "gives": [
            [
                "blastn_phase1_with_fq",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "phase1_fq_reads.into{asm_spades_in;\nasm_megahit_in;\nreads_for_mapping}",
        "origin": [
            [
                "phase1_fq_reads",
                "P"
            ]
        ],
        "gives": [
            [
                "asm_spades_in",
                "P"
            ],
            [
                "asm_megahit_in",
                "P"
            ],
            [
                "reads_for_mapping",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "asm_megahit_mod_out.into{asm_megahit_mod;\nasm_megahit_comb}",
        "origin": [
            [
                "asm_megahit_mod_out",
                "P"
            ]
        ],
        "gives": [
            [
                "asm_megahit_mod",
                "P"
            ],
            [
                "asm_megahit_comb",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "asm_spades_out.into{asm_spades;\nasm_spades_comb}",
        "origin": [
            [
                "asm_spades_out",
                "P"
            ]
        ],
        "gives": [
            [
                "asm_spades",
                "P"
            ],
            [
                "asm_spades_comb",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "asm_for_mapping = asm_spades_comb.combine(asm_megahit_comb, by: 0)",
        "origin": [
            [
                "asm_spades_comb",
                "P"
            ]
        ],
        "gives": [
            [
                "asm_for_mapping",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "map_reads_to_contigs = asm_for_mapping.combine(reads_for_mapping, by: 0)",
        "origin": [
            [
                "asm_for_mapping",
                "P"
            ]
        ],
        "gives": [
            [
                "map_reads_to_contigs",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "map_reads_to_contigs_out.into{asm_mapping_stats_in;\nasm_per_ctg_coverage_in;\nparse_sam_mapping}",
        "origin": [
            [
                "map_reads_to_contigs_out",
                "P"
            ]
        ],
        "gives": [
            [
                "asm_mapping_stats_in",
                "P"
            ],
            [
                "asm_per_ctg_coverage_in",
                "P"
            ],
            [
                "parse_sam_mapping",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "blastn_phase2_results = blastn_phase2_spades.combine(blastn_phase2_megahit, by: 0)",
        "origin": [
            [
                "blastn_phase2_spades",
                "P"
            ]
        ],
        "gives": [
            [
                "blastn_phase2_results",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "phase2_processed_results.into{fetch_names_local_DB;\nfetch_names_esearch;\ninitial_table}",
        "origin": [
            [
                "phase2_processed_results",
                "P"
            ]
        ],
        "gives": [
            [
                "fetch_names_local_DB",
                "P"
            ],
            [
                "fetch_names_esearch",
                "P"
            ],
            [
                "initial_table",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "classification_data = esearch_taxonomy_fetched.combine(initial_table, by: 0)",
        "origin": [
            [
                "esearch_taxonomy_fetched",
                "P"
            ]
        ],
        "gives": [
            [
                "classification_data",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "classified_asm.into{tsv_into_html_each;\ncombine_viral_tsv;\ncombine_all_tsv}",
        "origin": [
            [
                "classified_asm",
                "P"
            ]
        ],
        "gives": [
            [
                "tsv_into_html_each",
                "P"
            ],
            [
                "combine_viral_tsv",
                "P"
            ],
            [
                "combine_all_tsv",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "html_data_each = tsv_into_html_each.combine(html_each)",
        "origin": [
            [
                "tsv_into_html_each",
                "P"
            ],
            [
                "html_each",
                "P"
            ]
        ],
        "gives": [
            [
                "html_data_each",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "tsv_collection_into_html = all_tsv_collected.combine(viral_tsv_collected).combine(html_all)",
        "origin": [
            [
                "all_tsv_collected",
                "P"
            ],
            [
                "viral_tsv_collected",
                "P"
            ],
            [
                "html_all",
                "P"
            ]
        ],
        "gives": [
            [
                "tsv_collection_into_html",
                "P"
            ]
        ]
    }
}
{
    "index_bamfile": {
        "name_process": "index_bamfile",
        "string_process": "\nprocess index_bamfile {\n    input:\n        set file(bamfile), val(uuid), val(dir) from ch_index_bam\n    output:\n        set file(bamfile), file('*.bam.bai'), val(uuid), val(dir) into ch_indexed_bam\n\n    tag \"$uuid\"\n\n    executor choose_executor()\n\n    when: 'manta' in workflowSteps\n\n    script:\n    \"\"\"\n    samtools index \"$bamfile\"\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    samtools index \"$bamfile\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ch_index_bam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_indexed_bam"
        ],
        "nb_outputs": 1,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "manta": {
        "name_process": "manta",
        "string_process": "\nprocess manta {\n    input:\n        set file(bamfile), file(bamindex), val(uuid), val(dir) from ch_manta\n    output:\n        set file(\"manta.vcf\"), val(uuid), val(dir) into ch_manta_vcf\n\n    tag \"$uuid\"\n    publishDir \"$dir\", mode: 'copy', saveAs: { \"$params.prefix$it\" }\n\n    when: 'manta' in workflowSteps\n\n    script:\n    \"\"\"\n    if [ -z \"\\$SLURM_CPUS_ON_NODE\" ]; then\n        CPUS=1\n    else\n        CPUS=\\$SLURM_CPUS_ON_NODE\n    fi\n\n    echo \"CPUS: \\$CPUS\"\n    configManta.py --normalBam $bamfile --referenceFasta $params.ref_fasta --runDir testRun\n    cd testRun\n    ./runWorkflow.py -m local -j \\$CPUS\n    gunzip -c results/variants/diploidSV.vcf.gz > ../manta.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    if [ -z \"\\$SLURM_CPUS_ON_NODE\" ]; then\n        CPUS=1\n    else\n        CPUS=\\$SLURM_CPUS_ON_NODE\n    fi\n\n    echo \"CPUS: \\$CPUS\"\n    configManta.py --normalBam $bamfile --referenceFasta $params.ref_fasta --runDir testRun\n    cd testRun\n    ./runWorkflow.py -m local -j \\$CPUS\n    gunzip -c results/variants/diploidSV.vcf.gz > ../manta.vcf\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_manta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_manta_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "create_fastq": {
        "name_process": "create_fastq",
        "string_process": "\nprocess create_fastq {\n    input:\n        set file(bamfile), val(uuid), val(dir) from ch_create_fastq\n    output:\n        set file('fastq.fq.gz'), val(uuid), val(dir) into ch_created_fastq\n\n    tag \"$uuid\"\n\n    executor choose_executor()\n\n    when: 'fermikit' in workflowSteps\n\n    script:\n    \"\"\"\n    samtools bam2fq \"$bamfile\" | gzip - > fastq.fq.gz\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    samtools bam2fq \"$bamfile\" | gzip - > fastq.fq.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ch_create_fastq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_created_fastq"
        ],
        "nb_outputs": 1,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "fermikit": {
        "name_process": "fermikit",
        "string_process": "\nprocess fermikit {\n    input:\n        set file('sample.fq.gz'), val(uuid), val(dir) from ch_fermikit\n    output:\n        set file('*.vcf'), val(uuid), val(dir) into ch_fermi_vcf\n\n    tag \"$uuid\"\n    publishDir \"$dir\", mode: 'copy', saveAs: { \"$params.prefix$it\" }\n\n    when: 'fermikit' in workflowSteps\n\n    script:\n    \"\"\"\n    if [ -z \"\\$SLURM_CPUS_ON_NODE\" ]; then\n        CPUS=1\n    else\n        CPUS=\\$SLURM_CPUS_ON_NODE\n    fi\n\n    fermi2.pl unitig -s3g -t\\$CPUS -l150 -p sample sample.fq.gz > sample.mak\n    make -f sample.mak\n    run-calling -t\\$CPUS $params.ref_fasta sample.mag.gz > calling.sh\n    bash calling.sh\n    vcf-sort -c sample.sv.vcf.gz > fermikit.vcf\n    bgzip -c fermikit.vcf > fermikit.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    if [ -z \"\\$SLURM_CPUS_ON_NODE\" ]; then\n        CPUS=1\n    else\n        CPUS=\\$SLURM_CPUS_ON_NODE\n    fi\n\n    fermi2.pl unitig -s3g -t\\$CPUS -l150 -p sample sample.fq.gz > sample.mak\n    make -f sample.mak\n    run-calling -t\\$CPUS $params.ref_fasta sample.mag.gz > calling.sh\n    bash calling.sh\n    vcf-sort -c sample.sv.vcf.gz > fermikit.vcf\n    bgzip -c fermikit.vcf > fermikit.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fermikit"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fermi_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "artifact_mask_vcfs": {
        "name_process": "artifact_mask_vcfs",
        "string_process": "\nprocess artifact_mask_vcfs {\n    input:\n        set file(svfile), val(uuid), val(dir) from ch_vcfs\n    output:\n        set file(svfile), val(uuid), val(dir) into ch_artifact_masked_vcfs\n\n    tag \"$uuid $svfile\"\n\n    executor choose_executor()\n\n    \"\"\"\n    BNAME=\\$( echo $svfile | cut -d. -f1 )\n    MASK_DIR=$params.mask_artifacts_dir\n\n    # We don't want to change the filename in this process so we copy the\n    # infile and remove the symbolic link. And then recreate the file at the\n    # end.\n    cp \"$svfile\" workfile\n    rm \"$svfile\" # It's a link, should be ok :)\n    for mask in \\$MASK_DIR/*; do\n        if [[ ! -f \"\\$mask\" ]]; then\n            continue\n        fi\n        cat workfile \\\n            | bedtools intersect -header -v -a stdin -b \"\\$mask\" -f 0.25 \\\n            > tempfile\n        mv tempfile workfile\n    done\n    mv workfile \"$svfile\"\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "\"\"\"\n    BNAME=\\$( echo $svfile | cut -d. -f1 )\n    MASK_DIR=$params.mask_artifacts_dir\n\n    # We don't want to change the filename in this process so we copy the\n    # infile and remove the symbolic link. And then recreate the file at the\n    # end.\n    cp \"$svfile\" workfile\n    rm \"$svfile\" # It's a link, should be ok :)\n    for mask in \\$MASK_DIR/*; do\n        if [[ ! -f \"\\$mask\" ]]; then\n            continue\n        fi\n        cat workfile \\\n            | bedtools intersect -header -v -a stdin -b \"\\$mask\" -f 0.25 \\\n            > tempfile\n        mv tempfile workfile\n    done\n    mv workfile \"$svfile\"\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "ch_vcfs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_artifact_masked_vcfs"
        ],
        "nb_outputs": 1,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "cohort_mask_vcfs": {
        "name_process": "cohort_mask_vcfs",
        "string_process": "\nprocess cohort_mask_vcfs {\n    input:\n        set file(svfile), val(uuid), val(dir) from ch_cohort_mask_in\n    output:\n        set file('*_cohort_masked.vcf'), val(uuid), val(dir) into ch_cohort_masked_vcfs\n\n    tag \"$uuid $svfile\"\n\n    executor choose_executor()\n    when 'mask_cohort' in workflowSteps\n\n    \"\"\"\n    BNAME=\\$( echo $svfile | cut -d. -f1 )\n    MASK_FILE=\\${BNAME}_cohort_masked.vcf\n    MASK_DIR=$params.mask_cohort_dir\n\n    cp $svfile workfile\n    for mask in \\$MASK_DIR/*; do\n        if [[ ! -f \"\\$mask\" ]]; then\n            continue\n        fi\n        cat workfile \\\n            | bedtools intersect -header -v -a stdin -b \"\\$mask\" -f \"$params.sg_mask_ovlp\" \"$reciprocal\" \\\n            > tempfile\n        mv tempfile workfile\n    done\n    mv workfile \"\\$MASK_FILE\"\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n    BNAME=\\$( echo $svfile | cut -d. -f1 )\n    MASK_FILE=\\${BNAME}_cohort_masked.vcf\n    MASK_DIR=$params.mask_cohort_dir\n\n    cp $svfile workfile\n    for mask in \\$MASK_DIR/*; do\n        if [[ ! -f \"\\$mask\" ]]; then\n            continue\n        fi\n        cat workfile \\\n            | bedtools intersect -header -v -a stdin -b \"\\$mask\" -f \"$params.sg_mask_ovlp\" \"$reciprocal\" \\\n            > tempfile\n        mv tempfile workfile\n    done\n    mv workfile \"\\$MASK_FILE\"\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "ch_cohort_mask_in"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_cohort_masked_vcfs"
        ],
        "nb_outputs": 1,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "intersect_files": {
        "name_process": "intersect_files",
        "string_process": "\nprocess intersect_files {\n    input:\n        set file(vcfs), val(uuid), val(dir) from ch_intersect_input\n    output:\n        set file('combined_*.vcf'), val(uuid), val(\"${dir[0]}\") into ch_intersections\n\n    tag \"$uuid\"\n\n    executor choose_executor()\n\n    when: 'make_intersect' in workflowSteps\n\n    script:\n    \"\"\"\n    if head -n 10 ${vcfs[0]} | grep -q 'source=htsbox'; then\n        fermi_vcf=${vcfs[0]}\n        manta_vcf=${vcfs[1]}\n    else\n        fermi_vcf=${vcfs[1]}\n        manta_vcf=${vcfs[0]}\n    fi\n\n    OUTNAME=`basename \\$fermi_vcf|sed 's/fermikit_//;s/.vcf//'`\n    ## Create intersected vcf files\n    for WORD in DEL INS DUP; do\n        intersectBed -a <( grep -w \"^#.\\\\+\\\\|\\$WORD\" \\$fermi_vcf) \\\n                     -b <( grep -w \"^#.\\\\+\\\\|\\$WORD\" \\$manta_vcf) \\\n            -f 0.5 -r \\\n            | sort -k1,1V -k2,2n > cmb_\\${OUTNAME}_\\${WORD,,}.vcf\n    done\n\n    cat <( grep -v -w '^#.\\\\+\\\\|DEL\\\\|INS\\\\|DUP' \\$fermi_vcf ) \\\n        <( grep -v -w '^#.\\\\+\\\\|DEL\\\\|INS\\\\|DUP' \\$manta_vcf ) \\\n        | cut -f 1-8 \\\n        | sort -k1,1V -k2,2n > cmb_\\${OUTNAME}_OTHER.vcf\n\n    ( grep '^#' \\$fermi_vcf; \\\n        sort -k1,1V -k2,2n cmb_\\${OUTNAME}_*.vcf ) >> combined_\\${OUTNAME}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    \"\"\"\n    if head -n 10 ${vcfs[0]} | grep -q 'source=htsbox'; then\n        fermi_vcf=${vcfs[0]}\n        manta_vcf=${vcfs[1]}\n    else\n        fermi_vcf=${vcfs[1]}\n        manta_vcf=${vcfs[0]}\n    fi\n\n    OUTNAME=`basename \\$fermi_vcf|sed 's/fermikit_//;s/.vcf//'`\n    ## Create intersected vcf files\n    for WORD in DEL INS DUP; do\n        intersectBed -a <( grep -w \"^#.\\\\+\\\\|\\$WORD\" \\$fermi_vcf) \\\n                     -b <( grep -w \"^#.\\\\+\\\\|\\$WORD\" \\$manta_vcf) \\\n            -f 0.5 -r \\\n            | sort -k1,1V -k2,2n > cmb_\\${OUTNAME}_\\${WORD,,}.vcf\n    done\n\n    cat <( grep -v -w '^#.\\\\+\\\\|DEL\\\\|INS\\\\|DUP' \\$fermi_vcf ) \\\n        <( grep -v -w '^#.\\\\+\\\\|DEL\\\\|INS\\\\|DUP' \\$manta_vcf ) \\\n        | cut -f 1-8 \\\n        | sort -k1,1V -k2,2n > cmb_\\${OUTNAME}_OTHER.vcf\n\n    ( grep '^#' \\$fermi_vcf; \\\n        sort -k1,1V -k2,2n cmb_\\${OUTNAME}_*.vcf ) >> combined_\\${OUTNAME}.vcf\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "Dupre"
        ],
        "tools_url": [
            "https://bio.tools/dupre"
        ],
        "tools_dico": [
            {
                "name": "Dupre",
                "uri": "https://bio.tools/dupre",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3173",
                            "term": "Epigenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Mathematics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Maths"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Dupre is able to estimate the duplicate rate of a sequencing library at a given sequencing depth N, when the occupancy vector of a (small) subsample is known.",
                "homepage": "http://bitbucket.org/genomeinformatics/dupre"
            }
        ],
        "inputs": [
            "ch_intersect_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_intersections"
        ],
        "nb_outputs": 1,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "normalize_vcf": {
        "name_process": "normalize_vcf",
        "string_process": "\nprocess normalize_vcf {\n    input:\n        set file(infile), val(uuid), val(dir) from ch_normalize_vcf\n    output:\n        set file(\"*.vt.vcf\"), val(uuid), val(dir) into ch_normalized_vcf\n\n    tag \"$uuid - $infile\"\n\n    executor choose_executor()\n\n    \"\"\"\n    INFILE=\"$infile\"\n    OUTFILE=\"\\${INFILE%.vcf}.vt.vcf\"\n\n    ## If the input file is empty, just copy it\n    if [[ -f \"\\$INFILE\" && -s \"\\$INFILE\" ]]; then\n        cp \"\\$INFILE\" \"\\$OUTFILE\"\n        exit\n    fi\n\n\n    ## Normalization\n    sed 's/ID=AD,Number=./ID=AD,Number=R/' \"\\$INFILE\" \\\n        | vt decompose -s - > \"\\$INFILE.vt_temp\"\n\n    if ! vt normalize -r \"$params.ref_fasta\" \"\\$INFILE.vt_temp\" > \"\\$OUTFILE\"\n    then\n        printf \"VT normalisation Failed\\n\" >&2\n        cp \"\\$INFILE.vt_temp\" \"\\$OUTFILE\"\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "\"\"\"\n    INFILE=\"$infile\"\n    OUTFILE=\"\\${INFILE%.vcf}.vt.vcf\"\n\n    ## If the input file is empty, just copy it\n    if [[ -f \"\\$INFILE\" && -s \"\\$INFILE\" ]]; then\n        cp \"\\$INFILE\" \"\\$OUTFILE\"\n        exit\n    fi\n\n\n    ## Normalization\n    sed 's/ID=AD,Number=./ID=AD,Number=R/' \"\\$INFILE\" \\\n        | vt decompose -s - > \"\\$INFILE.vt_temp\"\n\n    if ! vt normalize -r \"$params.ref_fasta\" \"\\$INFILE.vt_temp\" > \"\\$OUTFILE\"\n    then\n        printf \"VT normalisation Failed\\n\" >&2\n        cp \"\\$INFILE.vt_temp\" \"\\$OUTFILE\"\n    fi\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "vt"
        ],
        "tools_url": [
            "https://bio.tools/vt"
        ],
        "tools_dico": [
            {
                "name": "vt",
                "uri": "https://bio.tools/vt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Variant tool set that discovers short variants from Next Generation Sequencing data.",
                "homepage": "http://genome.sph.umich.edu/wiki/Vt"
            }
        ],
        "inputs": [
            "ch_normalize_vcf"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_normalized_vcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "variant_effect_predictor": {
        "name_process": "variant_effect_predictor",
        "string_process": "\nprocess variant_effect_predictor {\n    input:\n        set file(infile), val(uuid), val(dir) from ch_annotate_vep\n    output:\n        file '*.vep.vcf'\n\n    tag \"$uuid - $infile\"\n    publishDir \"$dir\", mode: 'copy', saveAs: { \"$params.prefix$it\" }\n\n    when: 'vep' in workflowSteps\n\n    script:\n    \"\"\"\n    INFILE=\"$infile\"\n    OUTFILE=\"\\${INFILE%.vcf}.vep.vcf\"\n    VEP_CACHE=\"/sw/data/uppnex/vep/$params.vep_cache_version\"\n    ASSEMBLY=\"$params.assembly\"\n\n    case \"\\$INFILE\" in\n        *vcf) FORMAT=\"vcf\" ;;\n        *bed) FORMAT=\"ensembl\" ;;\n        *)    printf \"Unrecognized format for '%s'\\n\" \"\\$INFILE\" >&2\n              exit 1;;\n    esac\n\n    # VEP failes files without variants, but the pipeline should still run\n    if ! grep -qv '^#' \"\\$INFILE\"; then\n        cp \"\\$INFILE\" \"\\$OUTFILE\"\n        exit 0\n    fi\n\n    if [ -z \"\\$SLURM_CPUS_ON_NODE\" ]; then\n        CPUS=1\n    else\n        CPUS=\\$SLURM_CPUS_ON_NODE\n    fi\n\n    variant_effect_predictor.pl \\\n        -i \"\\$INFILE\"              \\\n        --format \"\\$FORMAT\"        \\\n        -cache --dir \"\\$VEP_CACHE\" \\\n        -o \"\\$OUTFILE\"             \\\n        --vcf                      \\\n        --merged                   \\\n        --regulatory               \\\n        --force_overwrite          \\\n        --sift b                   \\\n        --polyphen b               \\\n        --symbol                   \\\n        --numbers                  \\\n        --biotype                  \\\n        --total_length             \\\n        --canonical                \\\n        --ccds                     \\\n        \\$( test \"\\$CPUS\" -gt 1 && echo \"--fork \\$CPUS\" ) \\\n        --fields Consequence,Codons,Amino_acids,Gene,SYMBOL,Feature,EXON,PolyPhen,SIFT,Protein_position,BIOTYPE \\\n        --assembly \"\\$ASSEMBLY\" \\\n        --offline\n    \"\"\"\n}",
        "nb_lignes_process": 59,
        "string_script": "    \"\"\"\n    INFILE=\"$infile\"\n    OUTFILE=\"\\${INFILE%.vcf}.vep.vcf\"\n    VEP_CACHE=\"/sw/data/uppnex/vep/$params.vep_cache_version\"\n    ASSEMBLY=\"$params.assembly\"\n\n    case \"\\$INFILE\" in\n        *vcf) FORMAT=\"vcf\" ;;\n        *bed) FORMAT=\"ensembl\" ;;\n        *)    printf \"Unrecognized format for '%s'\\n\" \"\\$INFILE\" >&2\n              exit 1;;\n    esac\n\n    # VEP failes files without variants, but the pipeline should still run\n    if ! grep -qv '^#' \"\\$INFILE\"; then\n        cp \"\\$INFILE\" \"\\$OUTFILE\"\n        exit 0\n    fi\n\n    if [ -z \"\\$SLURM_CPUS_ON_NODE\" ]; then\n        CPUS=1\n    else\n        CPUS=\\$SLURM_CPUS_ON_NODE\n    fi\n\n    variant_effect_predictor.pl \\\n        -i \"\\$INFILE\"              \\\n        --format \"\\$FORMAT\"        \\\n        -cache --dir \"\\$VEP_CACHE\" \\\n        -o \"\\$OUTFILE\"             \\\n        --vcf                      \\\n        --merged                   \\\n        --regulatory               \\\n        --force_overwrite          \\\n        --sift b                   \\\n        --polyphen b               \\\n        --symbol                   \\\n        --numbers                  \\\n        --biotype                  \\\n        --total_length             \\\n        --canonical                \\\n        --ccds                     \\\n        \\$( test \"\\$CPUS\" -gt 1 && echo \"--fork \\$CPUS\" ) \\\n        --fields Consequence,Codons,Amino_acids,Gene,SYMBOL,Feature,EXON,PolyPhen,SIFT,Protein_position,BIOTYPE \\\n        --assembly \"\\$ASSEMBLY\" \\\n        --offline\n    \"\"\"",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [
            "CASE"
        ],
        "tools_url": [
            "https://bio.tools/CASE"
        ],
        "tools_dico": [
            {
                "name": "CASE",
                "uri": "https://bio.tools/CASE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3559",
                                    "term": "Ontology browsing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Advancing Coordinated Cyber-investigations and Tool Interoperability using a Community Developed Specification Language.\n\nSource files for the CASE website.\n\nAPI used for instantiating CASE objects (includes ontological verification and type checking).\n\nCyber-investigation Analysis Standard Expression (CASE).\n\nRead the CASE Wiki tab to learn everything you need to know about the Cyber-investigation Analysis Standard Expression (CASE) ontology. For learning about the Unified Cyber Ontology, CASE's parent, see UCO.\n\n\"@vocab\": \"http://case.example.org/core#\",.\n\nDET ER DINE PENGER DET DREIER SEG OM...\n\nVi er ikke st\ufffdrst, men garanterer effektiv behandling.\n\nLast ned v\ufffdr brosjyre i PDF format.\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/pymzml (GITHUB.COM).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'UCO', 'cyber-investigation', 'cyber-investigations', 'plaso'",
                "homepage": "http://CASE.as"
            }
        ],
        "inputs": [
            "ch_annotate_vep"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "snpEff": {
        "name_process": "snpEff",
        "string_process": "\nprocess snpEff {\n    input:\n        set file(infile), val(uuid), val(dir) from ch_annotate_snpeff\n    output:\n        file '*.snpeff.vcf'\n\n    tag \"$uuid - $infile\"\n    publishDir \"$dir\", mode: 'copy', saveAs: { \"$params.prefix$it\" }\n\n    executor choose_executor()\n\n    when: 'snpeff' in workflowSteps\n\n    script:\n    \"\"\"\n    INFILE=\"$infile\" ## Use bash-semantics for variables\n    OUTFILE=\"\\${INFILE%.vcf}.snpeff.vcf\"\n\n    snpEff -formatEff -classic ${params.assembly}.75 < \"\\$INFILE\" > \"\\$OUTFILE\"\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    INFILE=\"$infile\" ## Use bash-semantics for variables\n    OUTFILE=\"\\${INFILE%.vcf}.snpeff.vcf\"\n\n    snpEff -formatEff -classic ${params.assembly}.75 < \"\\$INFILE\" > \"\\$OUTFILE\"\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "snpEff"
        ],
        "tools_url": [
            "https://bio.tools/snpeff"
        ],
        "tools_dico": [
            {
                "name": "snpEff",
                "uri": "https://bio.tools/snpeff",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3511",
                            "term": "Nucleic acid sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            },
                            {
                                "uri": "http://edamontology.org/data_3002",
                                "term": "Annotation track"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Variant annotation and effect prediction tool. It annotates and predicts the effects of variants on genes and proteins (such as amino acid changes).",
                "homepage": "http://snpeff.sourceforge.net/"
            }
        ],
        "inputs": [
            "ch_annotate_snpeff"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "indexBamFile": {
        "name_process": "indexBamFile",
        "string_process": "\nprocess indexBamFile {\n\tcontainer params.samtoolsImage\n\n\tinput:\n\tpath bamFile\n\n\toutput:\n\ttuple path(\"${bamFile}\"), path(\"${bamFile}.bai\")\n\n\tscript:\n\t\"\"\"\n\tsamtools index ${bamFile}\n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\t\"\"\"\n\tsamtools index ${bamFile}\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bamFile"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [
            "container params.samtoolsImage"
        ],
        "when": "",
        "stub": ""
    },
    "configureManta": {
        "name_process": "configureManta",
        "string_process": "\nprocess configureManta {\n\tcontainer params.mantaImage\n\n\tinput:\n\ttuple path(bamFile), path(bamIndex)\n\n\toutput:\n\tpath \"runDir\"\n\n\tscript:\n\t\"\"\"\n\t${params.configureManta} \\\n\t\t--bam ${bamFile} \\\n\t\t--referenceFasta ${params.referenceSequence['path']} \\\n\t\t--runDir runDir\n\t\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\t\"\"\"\n\t${params.configureManta} \\\n\t\t--bam ${bamFile} \\\n\t\t--referenceFasta ${params.referenceSequence['path']} \\\n\t\t--runDir runDir\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bamFile",
            "bamIndex"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [
            "container params.mantaImage"
        ],
        "when": "",
        "stub": ""
    },
    "callVariantsForEachSample": {
        "name_process": "callVariantsForEachSample",
        "string_process": "\nprocess callVariantsForEachSample {\n\tcontainer params.mantaImage\n\n\tinput:\n\tpath runDir \n\n\toutput:\n\tstdout\n\n\tscript:\n\t\"\"\"\n\t${runDir}/runWorkflow.py \\\n\t\t-m local \\\n\t\t-j ${params.nThreadsPerProcess}\n\tmv -f ${runDir}/results/* ${params.outputDir}/\n\t\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\t\"\"\"\n\t${runDir}/runWorkflow.py \\\n\t\t-m local \\\n\t\t-j ${params.nThreadsPerProcess}\n\tmv -f ${runDir}/results/* ${params.outputDir}/\n\t\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "runDir"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sickle-in-africa__saw.structural-variants",
        "directive": [
            "container params.mantaImage"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "flye_assemble": {
        "name_process": "flye_assemble",
        "string_process": "\nprocess flye_assemble {\n    conda \"environments/base.yaml\"\n    publishDir \"${params.outdir}/${barcode}/\", mode: 'copy', overwrite: true\n    input:\n        val(barcode)\n        file(reads)\n    output:\n        val barcode, emit: barcode\n        path \"${barcode}_all_contigs.fasta\", emit: contigs\n        path \"${barcode}_assembly_report.txt\"\n        path \"${reads}\", emit: reads\n\n    \"\"\"\n    flye --nano-hq ${reads} --meta --out-dir . -t ${params.threads}\n    mv assembly.fasta ${barcode}_all_contigs.fasta\n    mv assembly_info.txt ${barcode}_assembly_report.txt\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    flye --nano-hq ${reads} --meta --out-dir . -t ${params.threads}\n    mv assembly.fasta ${barcode}_all_contigs.fasta\n    mv assembly_info.txt ${barcode}_assembly_report.txt\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "barcode",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BioWilko__Papaya",
        "directive": [
            "conda \"environments/base.yaml\"",
            "publishDir \"${params.outdir}/${barcode}/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "kraken2_contigs": {
        "name_process": "kraken2_contigs",
        "string_process": "\nprocess kraken2_contigs {\n    conda \"environments/base.yaml\"\n    publishDir \"${params.outdir}/${barcode}/\", mode: 'copy', overwrite: true\n    input:\n        val(barcode)\n        file(contigs)\n    output:\n        file(\"*\")\n        \n \n    \"\"\"\n    kraken2 --db ${params.kraken_database} --threads ${params.threads} --classified-out ${barcode}_classified_contigs.fasta --unclassified-out ${barcode}_unclassified_contigs.fasta --report ${barcode}_contig_kraken.report ${contigs} > kraken_contig.report\n    \"\"\"\n    \n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    kraken2 --db ${params.kraken_database} --threads ${params.threads} --classified-out ${barcode}_classified_contigs.fasta --unclassified-out ${barcode}_unclassified_contigs.fasta --report ${barcode}_contig_kraken.report ${contigs} > kraken_contig.report\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "barcode",
            "contigs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BioWilko__Papaya",
        "directive": [
            "conda \"environments/base.yaml\"",
            "publishDir \"${params.outdir}/${barcode}/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "kraken2_reads": {
        "name_process": "kraken2_reads",
        "string_process": "\nprocess kraken2_reads {\n    conda \"environments/base.yaml\"\n    publishDir \"${params.outdir}/${barcode}/\", mode: 'copy', overwrite: true\n    input:\n        val(barcode)\n        file(reads)\n\n    output:\n        path \"*.fasta\"\n        path \"${barcode}_read_kraken.report\", emit: kraken_report\n  \n \n    \"\"\"\n    kraken2 --db ${params.kraken_database} --threads ${params.threads} --classified-out ${barcode}_classified_reads.fasta --unclassified-out ${barcode}_unclassified_reads.fasta --report ${barcode}_read_kraken.report ${reads}\n    \"\"\"\n    \n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    kraken2 --db ${params.kraken_database} --threads ${params.threads} --classified-out ${barcode}_classified_reads.fasta --unclassified-out ${barcode}_unclassified_reads.fasta --report ${barcode}_read_kraken.report ${reads}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "barcode",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BioWilko__Papaya",
        "directive": [
            "conda \"environments/base.yaml\"",
            "publishDir \"${params.outdir}/${barcode}/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "bracken": {
        "name_process": "bracken",
        "string_process": "\nprocess bracken {\n    conda \"environments/base.yaml\"\n    publishDir \"${params.outdir}/${barcode}/\" , mode: 'copy', overwrite: true\n    input:\n        val(barcode)\n        file(kraken_report)\n    output:\n        path \"${barcode}_bracken.report\"\n\n    \"\"\"\n    bracken -d ${params.kraken_database} -i ${kraken_report} -o ${barcode}_bracken.report -r 300 -l ${params.bracken_tax_level}\n    \"\"\"\n    \n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    bracken -d ${params.kraken_database} -i ${kraken_report} -o ${barcode}_bracken.report -r 300 -l ${params.bracken_tax_level}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Bracken"
        ],
        "tools_url": [
            "https://bio.tools/bracken"
        ],
        "tools_dico": [
            {
                "name": "Bracken",
                "uri": "https://bio.tools/bracken",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical method that computes the abundance of species in DNA sequences from a metagenomics sample.",
                "homepage": "https://ccb.jhu.edu/software/bracken/"
            }
        ],
        "inputs": [
            "barcode",
            "kraken_report"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BioWilko__Papaya",
        "directive": [
            "conda \"environments/base.yaml\"",
            "publishDir \"${params.outdir}/${barcode}/\" , mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "check_barcodes": {
        "name_process": "check_barcodes",
        "string_process": "\nprocess check_barcodes {\n    conda \"environments/base.yaml\"\n    input:\n        path(runpath)\n        val(barcodes)\n    output:\n        file(\"barcodes.txt\")\n    \n    script:\n        if(barcodes == 0){\n            \"\"\"\n            python_funcs.py -a -r ${runpath} > barcodes.txt\n            \"\"\"\n        } else {\n            \"\"\"\n            IFS=',' read -r -a barcode_array <<< \"${barcodes}\"\n            for barcode in \\${barcode_array[@]}; do\n                echo \\$barcode >> barcodes.txt\n            done\n            \"\"\"\n        }\n}",
        "nb_lignes_process": 21,
        "string_script": "        if(barcodes == 0){\n            \"\"\"\n            python_funcs.py -a -r ${runpath} > barcodes.txt\n            \"\"\"\n        } else {\n            \"\"\"\n            IFS=',' read -r -a barcode_array <<< \"${barcodes}\"\n            for barcode in \\${barcode_array[@]}; do\n                echo \\$barcode >> barcodes.txt\n            done\n            \"\"\"\n        }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "runpath",
            "barcodes"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BioWilko__Papaya",
        "directive": [
            "conda \"environments/base.yaml\""
        ],
        "when": "",
        "stub": ""
    },
    "grab_fastq": {
        "name_process": "grab_fastq",
        "string_process": "\nprocess grab_fastq {\n    conda \"environments/base.yaml\"\n    publishDir \"${params.outdir}/${barcode}/\", mode: 'copy', overwrite: true\n    input:\n        path(runpath)\n        val(barcode)\n    output:\n        path \"${barcode}_all_reads.fastq\", emit: all_reads\n        val barcode, emit: barcode\n\n    \"\"\"\n    python_funcs.py -b ${barcode} -r ${runpath}\n    cat *.fastq > ${barcode}_all_reads.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    python_funcs.py -b ${barcode} -r ${runpath}\n    cat *.fastq > ${barcode}_all_reads.fastq\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "runpath",
            "barcode"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BioWilko__Papaya",
        "directive": [
            "conda \"environments/base.yaml\"",
            "publishDir \"${params.outdir}/${barcode}/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "expunge": {
        "name_process": "expunge",
        "string_process": "\nprocess expunge {\n    conda \"environments/base.yaml\"\n    publishDir \"${params.outdir}/${barcode}/\", mode: 'copy', overwrite: true\n    input:\n        val(barcode)\n        file(fastq)\n    output:\n        path \"${barcode}_expunged_reads.fastq\", emit: expunged_reads\n        val barcode, emit: barcode\n    \n    \"\"\"\n    minimap2 -x map-ont ${params.expunge_ref_idx} ${fastq} > aligned_reads.paf\n    python_funcs.py -x aligned_reads.paf > to_expunge\n    grep -E \"^@\" ${fastq} | cut -c2- | sed 's/ .*//' > read.ids\n    grep -vxFf to_expunge read.ids > to_save\n    seqtk subseq ${fastq} to_save > ${barcode}_expunged_reads.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    minimap2 -x map-ont ${params.expunge_ref_idx} ${fastq} > aligned_reads.paf\n    python_funcs.py -x aligned_reads.paf > to_expunge\n    grep -E \"^@\" ${fastq} | cut -c2- | sed 's/ .*//' > read.ids\n    grep -vxFf to_expunge read.ids > to_save\n    seqtk subseq ${fastq} to_save > ${barcode}_expunged_reads.fastq\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "barcode",
            "fastq"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BioWilko__Papaya",
        "directive": [
            "conda \"environments/base.yaml\"",
            "publishDir \"${params.outdir}/${barcode}/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "racon": {
        "name_process": "racon",
        "string_process": "\nprocess racon {\n    conda \"environments/base.yaml\"\n    input:\n        val(barcode)\n        val(reads)\n        val(contigs)\n    output:\n        path \"${barcode}_polished_contigs.fasta\", emit: polished_contigs\n    \n    \"\"\"\n    minimap2 -x map-ont ${contigs} ${reads} > overlaps_1.paf\n    racon -t ${params.threads} ${reads} overlaps_1.paf ${contigs} > temp_contigs.fasta\n    minimap2 -x map-ont temp_contigs.fasta ${reads} > overlaps_2.paf\n    racon -t ${params.threads} ${reads} overlaps_2.paf temp_contigs.fasta > ${barcode}_polished_contigs.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    minimap2 -x map-ont ${contigs} ${reads} > overlaps_1.paf\n    racon -t ${params.threads} ${reads} overlaps_1.paf ${contigs} > temp_contigs.fasta\n    minimap2 -x map-ont temp_contigs.fasta ${reads} > overlaps_2.paf\n    racon -t ${params.threads} ${reads} overlaps_2.paf temp_contigs.fasta > ${barcode}_polished_contigs.fasta\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "Racon"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/Racon"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "Racon",
                "uri": "https://bio.tools/Racon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Possibility to Use Oxford Nanopore Technology | Ultrafast consensus module for raw de novo genome assembly of long uncorrected reads. http://genome.cshlp.org/content/early/2017/01/18/gr.214270.116 Note: This was the original repository which will no longer be officially maintained. Please use the new official repository here: | Racon is intended as a standalone consensus module to correct raw contigs generated by rapid assembly methods which do not include a consensus step | Consensus module for raw de novo DNA assembly of long uncorrected reads",
                "homepage": "https://github.com/isovic/racon"
            }
        ],
        "inputs": [
            "barcode",
            "reads",
            "contigs"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BioWilko__Papaya",
        "directive": [
            "conda \"environments/base.yaml\""
        ],
        "when": "",
        "stub": ""
    }
}
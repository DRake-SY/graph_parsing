{
    "get_run_name": {
        "name_process": "get_run_name",
        "string_process": "\nprocess get_run_name {\n\n  input:\n\n  output:\n  stdout into ch_run_name\n\n  \"\"\"\n  bs list run --filter-field=ExperimentName --filter-term=${params.run} --format=csv | grep -v ExperimentName | cut -d ',' -f 1\n  \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\n  bs list run --filter-field=ExperimentName --filter-term=${params.run} --format=csv | grep -v ExperimentName | cut -d ',' -f 1\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "GBS"
        ],
        "tools_url": [
            "https://bio.tools/GBS"
        ],
        "tools_dico": [
            {
                "name": "GBS",
                "uri": "https://bio.tools/GBS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Read binning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Binning shotgun reads"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Binning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Screening populations for copy number variation using genotyping-by-sequencing | Detection of deletions and duplications from GBS data | delgbs is an R package which provides tools for detecting copy number variation from genotyping-by-sequencing (GBS) data. delgbs bases its CNV calls on the number of reads per sample in discrete bins (e.g. 1-kb bins) located along a reference genome",
                "homepage": "http://github.com/malemay/delgbs"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ch_run_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__base-space-download-fastq-with-checksums",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "get_run_id": {
        "name_process": "get_run_id",
        "string_process": "\nprocess get_run_id {\n\n  input:\n\n  output:\n  stdout into ch_run_id\n\n  \"\"\"\n  bs list run --filter-field=ExperimentName --filter-term=${params.run} --format=csv | grep -v ExperimentName | cut -d ',' -f 2\n  \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\n  bs list run --filter-field=ExperimentName --filter-term=${params.run} --format=csv | grep -v ExperimentName | cut -d ',' -f 2\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "GBS"
        ],
        "tools_url": [
            "https://bio.tools/GBS"
        ],
        "tools_dico": [
            {
                "name": "GBS",
                "uri": "https://bio.tools/GBS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Read binning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Binning shotgun reads"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3798",
                                    "term": "Binning"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Screening populations for copy number variation using genotyping-by-sequencing | Detection of deletions and duplications from GBS data | delgbs is an R package which provides tools for detecting copy number variation from genotyping-by-sequencing (GBS) data. delgbs bases its CNV calls on the number of reads per sample in discrete bins (e.g. 1-kb bins) located along a reference genome",
                "homepage": "http://github.com/malemay/delgbs"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ch_run_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__base-space-download-fastq-with-checksums",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "get_samples": {
        "name_process": "get_samples",
        "string_process": " process get_samples {\n  \n    input:\n    val(run_id) from ch_run_id\n \n    output:\n    stdout into ch_samples\n\n    \"\"\"\n    get_sample_ids.py ${dragen_flag} ${params.access_token} ${run_id - ~/\\s+/} | grep -v Undetermined | tee samples.txt\n    \"\"\"\n  }",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\n    get_sample_ids.py ${dragen_flag} ${params.access_token} ${run_id - ~/\\s+/} | grep -v Undetermined | tee samples.txt\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_run_id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_samples"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__base-space-download-fastq-with-checksums",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "download": {
        "name_process": "download",
        "string_process": "\nprocess download {\n\n    validExitStatus 0,1\n    maxForks 1\n    publishDir \"${params.outdir}/${run_name - ~/\\s+/}\", mode: 'move',\n              saveAs: {filename ->\n                  if (filename.indexOf(\"err\") >= 0) filename\n                  else if (filename.indexOf(\"md5\") >= 0) filename\n                  else if (filename.indexOf(\"fastq\") >= 0) filename\n                  else null\n              }\n\n    input:\n    tuple val(sample_id), val(biosample_id) from ch_biosamples1\n    val(run_name) from ch_run_name1\n\n    output:\n    file('*fastq*')\n    file('*err')\n    file('*md5*')\n    file('*.sample.txt') into ch_sample_files1\n\n    when:\n    !params.dragen\n\n    script:\n    \"\"\"\n    bs-cp --write-md5 //./Projects/${params.project}/samples/${sample_id} ./ 2> ${biosample_id}.err\n    md5sum --check md5sum.txt > ${biosample_id}.md5_check\n    mv md5sum.txt ${biosample_id}.md5sum.txt\n    echo ${biosample_id} > ${biosample_id}.sample.txt\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    bs-cp --write-md5 //./Projects/${params.project}/samples/${sample_id} ./ 2> ${biosample_id}.err\n    md5sum --check md5sum.txt > ${biosample_id}.md5_check\n    mv md5sum.txt ${biosample_id}.md5sum.txt\n    echo ${biosample_id} > ${biosample_id}.sample.txt\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_biosamples1",
            "ch_run_name1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_sample_files1"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__base-space-download-fastq-with-checksums",
        "directive": [
            "validExitStatus 0,1",
            "maxForks 1",
            "publishDir \"${params.outdir}/${run_name - ~/ s+/}\", mode: 'move' , saveAs: {filename -> if (filename.indexOf(\"err\") >= 0) filename else if (filename.indexOf(\"md5\") >= 0) filename else if (filename.indexOf(\"fastq\") >= 0) filename else null }"
        ],
        "when": "!params.dragen",
        "stub": ""
    },
    "download_dragen": {
        "name_process": "download_dragen",
        "string_process": "\nprocess download_dragen {\n\n    validExitStatus 0,1\n    maxForks 1\n    publishDir \"${params.outdir}/${run_name - ~/\\s+/}\", mode: 'move',\n              saveAs: {filename ->\n                  if (filename.indexOf(\"err\") >= 0) filename\n                  else if (filename.indexOf(\"md5\") >= 0) filename\n                  else if (filename.indexOf(\"fastq\") >= 0) filename\n                  else null\n              }\n\n    input:\n    tuple val(sample_id), val(biosample_id) from ch_biosamples2\n    val(run_name) from ch_run_name2\n\n    output:\n    file('*fastq*')\n    file('*err')\n    file('*md5*')\n    file('*.sample.txt') into ch_sample_files2\n\n    when:\n    params.dragen\n\n    script:\n    \"\"\"\n    dataset_id=`bs list datasets --project-id=${params.project} --is-type=common.fastq --filter-term=${biosample_id}  --format=csv | grep -v DataSetType | cut -f 2 -d ',' | head -n 1`\n    bs-cp --write-md5 //./Datasets/\\${dataset_id} ./ 2> ${biosample_id}.err\n    md5sum --check md5sum.txt > ${biosample_id}.md5_check\n    mv md5sum.txt ${biosample_id}.md5sum.txt\n    echo ${biosample_id} > ${biosample_id}.sample.txt\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    dataset_id=`bs list datasets --project-id=${params.project} --is-type=common.fastq --filter-term=${biosample_id}  --format=csv | grep -v DataSetType | cut -f 2 -d ',' | head -n 1`\n    bs-cp --write-md5 //./Datasets/\\${dataset_id} ./ 2> ${biosample_id}.err\n    md5sum --check md5sum.txt > ${biosample_id}.md5_check\n    mv md5sum.txt ${biosample_id}.md5sum.txt\n    echo ${biosample_id} > ${biosample_id}.sample.txt\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_biosamples2",
            "ch_run_name2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_sample_files2"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__base-space-download-fastq-with-checksums",
        "directive": [
            "validExitStatus 0,1",
            "maxForks 1",
            "publishDir \"${params.outdir}/${run_name - ~/ s+/}\", mode: 'move' , saveAs: {filename -> if (filename.indexOf(\"err\") >= 0) filename else if (filename.indexOf(\"md5\") >= 0) filename else if (filename.indexOf(\"fastq\") >= 0) filename else null }"
        ],
        "when": "params.dragen",
        "stub": ""
    },
    "collect_samples": {
        "name_process": "collect_samples",
        "string_process": "\nprocess collect_samples {\n\n    publishDir \"${params.outdir}/${run_name - ~/\\s+/}\", mode: 'move'\n\n    input:\n    val(run_name) from ch_run_name3\n    file(files) from ch_sample_files1.collect().concat(ch_sample_files2.collect())\n\n    output:\n    file(sample_file)\n\n    script:\n    sample_file = \"samples.txt\"\n    \"\"\"\n    cat ${files} >> ${sample_file}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    sample_file = \"samples.txt\"\n    \"\"\"\n    cat ${files} >> ${sample_file}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_run_name3",
            "ch_sample_files1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_file"
        ],
        "nb_outputs": 1,
        "name_workflow": "ameynert__base-space-download-fastq-with-checksums",
        "directive": [
            "publishDir \"${params.outdir}/${run_name - ~/ s+/}\", mode: 'move'"
        ],
        "when": "",
        "stub": ""
    }
}
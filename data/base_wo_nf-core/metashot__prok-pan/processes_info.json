{
    "roary": {
        "name_process": "roary",
        "string_process": "\nprocess roary {\n    publishDir \"${params.outdir}\" , mode: 'copy'\n\n    input:\n    path(gffs)\n    \n    output:\n    path \"roary/*\"\n    path \"roary/core_gene_alignment.aln\", emit: aln\n    path \"roary/gene_presence_absence.csv\", emit: gene_pa\n    path \"roary/accessory_binary_genes.fa.newick\", emit: accessory_tree\n   \n    script:\n    if( params.mode == 'Viruses') {\n        param_translation = '-t 1'\n    }\n    else if ( params.mode == 'Mitochondria' ) {\n        param_translation = '-t 4'\n    }\n    else {\n        param_translation = '-t 11'\n    }\n\n    param_dont_split_paralogs = params.dont_split_paralogs ? '-s' : ''\n    \"\"\"\n    roary \\\n        -e -n \\\n        ${param_translation} \\\n        -p ${task.cpus} \\\n        -f roary \\\n        -i ${params.min_ident} \\\n        -cd ${params.min_prev_core} \\\n        ${param_dont_split_paralogs} \\\n        ${gffs}\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    if( params.mode == 'Viruses') {\n        param_translation = '-t 1'\n    }\n    else if ( params.mode == 'Mitochondria' ) {\n        param_translation = '-t 4'\n    }\n    else {\n        param_translation = '-t 11'\n    }\n\n    param_dont_split_paralogs = params.dont_split_paralogs ? '-s' : ''\n    \"\"\"\n    roary \\\n        -e -n \\\n        ${param_translation} \\\n        -p ${task.cpus} \\\n        -f roary \\\n        -i ${params.min_ident} \\\n        -cd ${params.min_prev_core} \\\n        ${param_dont_split_paralogs} \\\n        ${gffs}\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "Roary"
        ],
        "tools_url": [
            "https://bio.tools/roary"
        ],
        "tools_dico": [
            {
                "name": "Roary",
                "uri": "https://bio.tools/roary",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high speed stand alone pan genome pipeline, which takes annotated assemblies in GFF3 format (produced by Prokka (Seemann, 2014)) and calculates the pan genome.",
                "homepage": "http://sanger-pathogens.github.io/Roary/"
            }
        ],
        "inputs": [
            "gffs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-pan",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "roary_plots": {
        "name_process": "roary_plots",
        "string_process": "\nprocess roary_plots {\n    publishDir \"${params.outdir}/roary\" , mode: 'copy'\n\n    input:\n    path(tree)\n    path(gene_pa)\n\n    output:\n    path \"pangenome_*\"\n\n    script:\n    \"\"\"\n    roary_plots.py ${tree} ${gene_pa}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    roary_plots.py ${tree} ${gene_pa}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tree",
            "gene_pa"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-pan",
        "directive": [
            "publishDir \"${params.outdir}/roary\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "prokka": {
        "name_process": "prokka",
        "string_process": "\nprocess prokka {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/prokka\" , mode: 'copy'\n\n    input:\n    tuple val(id), path(genome)\n    path (proteins)\n\n    output:\n    path \"${id}/*\"\n    tuple val(id), path (\"${id}/${id}.gff\"), emit: gff\n\n    script:\n    param_proteins = params.proteins != 'none' ? \"--proteins $proteins\" : ''\n    \"\"\"\n    prokka \\\n        $genome \\\n        --outdir ${id} \\\n        --prefix ${id} \\\n        --kingdom ${params.mode} \\\n        $param_proteins \\\n        --cpus ${task.cpus} \\\n        --centre X --compliant\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    param_proteins = params.proteins != 'none' ? \"--proteins $proteins\" : ''\n    \"\"\"\n    prokka \\\n        $genome \\\n        --outdir ${id} \\\n        --prefix ${id} \\\n        --kingdom ${params.mode} \\\n        $param_proteins \\\n        --cpus ${task.cpus} \\\n        --centre X --compliant\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "id",
            "genome",
            "proteins"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-pan",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/prokka\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "raxml": {
        "name_process": "raxml",
        "string_process": "\nprocess raxml {\n    publishDir \"${params.outdir}/raxml\" , mode: 'copy'\n    \n    input:\n    path(aln)\n\n    output:\n    path \"*.run\"\n    path \"RAxML_bestTree.run\", emit: tree\n\n    script:\n    if (params.raxml_mode == 'default')\n        \"\"\"\n        raxmlHPC-PTHREADS-SSE3 \\\n            -f d \\\n            -m GTRCAT \\\n            -p 42 \\\n            -T ${task.cpus} \\\n            -n run \\\n            -N ${params.raxml_nsearch} \\\n            -s ${aln}\n        \"\"\"\n\n    else if ( params.raxml_mode == 'rbs' )\n        \"\"\"\n        raxmlHPC-PTHREADS-SSE3 \\\n            -f a \\\n            -x 43 \\\n            -N ${params.raxml_nboot} \\\n            -m GTRCAT \\\n            -p 42 \\\n            -T ${task.cpus} \\\n            -n run \\\n            -s ${aln}\n        \"\"\"\n        \n    else\n        error \"Invalid RAxML mode: ${params.raxml_mode}\"\n\n}",
        "nb_lignes_process": 39,
        "string_script": "    if (params.raxml_mode == 'default')\n        \"\"\"\n        raxmlHPC-PTHREADS-SSE3 \\\n            -f d \\\n            -m GTRCAT \\\n            -p 42 \\\n            -T ${task.cpus} \\\n            -n run \\\n            -N ${params.raxml_nsearch} \\\n            -s ${aln}\n        \"\"\"\n\n    else if ( params.raxml_mode == 'rbs' )\n        \"\"\"\n        raxmlHPC-PTHREADS-SSE3 \\\n            -f a \\\n            -x 43 \\\n            -N ${params.raxml_nboot} \\\n            -m GTRCAT \\\n            -p 42 \\\n            -T ${task.cpus} \\\n            -n run \\\n            -s ${aln}\n        \"\"\"\n        \n    else\n        error \"Invalid RAxML mode: ${params.raxml_mode}\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aln"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-pan",
        "directive": [
            "publishDir \"${params.outdir}/raxml\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "QC_Brain_Extraction_DWI": {
        "name_process": "QC_Brain_Extraction_DWI",
        "string_process": "\nprocess QC_Brain_Extraction_DWI {\n    cpus params.bet_dwi_nb_threads\n\n    input:\n    tuple file(dwi), file(mask) from dwi_mask_for_bet\n\n    output:\n    file \"report_dwi_bet.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_bet_dwi\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {no_bet,bet_mask}\n    mv *dwi*.nii.gz no_bet/\n    mv *b0_bet_mask.nii.gz bet_mask/\n\n    dmriqc_brain_extraction.py \"Brain Extraction DWI\" report_dwi_bet.html\\\n    --no_bet no_bet/\\\n    --bet_mask bet_mask\\\n    --skip $params.bet_dwi_skip\\\n    --nb_threads $params.bet_dwi_nb_threads\\\n    --nb_columns $params.bet_dwi_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {no_bet,bet_mask}\n    mv *dwi*.nii.gz no_bet/\n    mv *b0_bet_mask.nii.gz bet_mask/\n\n    dmriqc_brain_extraction.py \"Brain Extraction DWI\" report_dwi_bet.html\\\n    --no_bet no_bet/\\\n    --bet_mask bet_mask\\\n    --skip $params.bet_dwi_skip\\\n    --nb_threads $params.bet_dwi_nb_threads\\\n    --nb_columns $params.bet_dwi_nb_columns\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dwi_mask_for_bet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.bet_dwi_nb_threads"
        ],
        "when": "params.run_qc_bet_dwi",
        "stub": ""
    },
    "QC_Brain_Extraction_T1": {
        "name_process": "QC_Brain_Extraction_T1",
        "string_process": "\nprocess QC_Brain_Extraction_T1 {\n    cpus params.bet_t1_nb_threads\n\n    input:\n    tuple file(t1), file(mask) from t1_mask_for_bet\n\n    output:\n    file \"report_t1_bet.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_bet_t1\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {no_bet,bet_mask}\n    mv *t1_bet_mask.nii.gz bet_mask/\n    mv *.nii.gz no_bet/\n\n    dmriqc_brain_extraction.py \"Brain Extraction T1\" report_t1_bet.html\\\n    --no_bet no_bet\\\n    --bet_mask bet_mask\\\n    --skip $params.bet_t1_skip\\\n    --nb_threads $params.bet_t1_nb_threads\\\n    --nb_columns $params.bet_t1_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {no_bet,bet_mask}\n    mv *t1_bet_mask.nii.gz bet_mask/\n    mv *.nii.gz no_bet/\n\n    dmriqc_brain_extraction.py \"Brain Extraction T1\" report_t1_bet.html\\\n    --no_bet no_bet\\\n    --bet_mask bet_mask\\\n    --skip $params.bet_t1_skip\\\n    --nb_threads $params.bet_t1_nb_threads\\\n    --nb_columns $params.bet_t1_nb_columns\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "t1_mask_for_bet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.bet_t1_nb_threads"
        ],
        "when": "params.run_qc_bet_t1",
        "stub": ""
    },
    "QC_Denoise_DWI": {
        "name_process": "QC_Denoise_DWI",
        "string_process": "\nprocess QC_Denoise_DWI {\n    cpus params.denoise_dwi_nb_threads\n\n    input:\n    file(dwi) from dwi_denoised\n\n    output:\n    file \"report_denoise_dwi.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_denoise_dwi\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *dwi_denoised.nii.gz images/\n\n    dmriqc_generic.py \"Denoise DWI\" report_denoise_dwi.html\\\n    --images images\\\n    --skip $params.denoise_dwi_skip\\\n    --nb_threads $params.denoise_dwi_nb_threads\\\n    --nb_columns $params.denoise_dwi_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *dwi_denoised.nii.gz images/\n\n    dmriqc_generic.py \"Denoise DWI\" report_denoise_dwi.html\\\n    --images images\\\n    --skip $params.denoise_dwi_skip\\\n    --nb_threads $params.denoise_dwi_nb_threads\\\n    --nb_columns $params.denoise_dwi_nb_columns\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dwi_denoised"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.denoise_dwi_nb_threads"
        ],
        "when": "params.run_qc_denoise_dwi",
        "stub": ""
    },
    "QC_Denoise_T1": {
        "name_process": "QC_Denoise_T1",
        "string_process": "\nprocess QC_Denoise_T1 {\n    cpus params.denoise_t1_nb_threads\n\n    input:\n    file(t1) from t1_denoised\n\n    output:\n    file \"report_denoise_t1.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_denoise_t1\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *t1_denoised.nii.gz images/\n\n    dmriqc_generic.py \"Denoise T1\" report_denoise_t1.html\\\n    --images images\\\n    --skip $params.denoise_t1_skip\\\n    --nb_threads $params.denoise_t1_nb_threads\\\n    --nb_columns $params.denoise_t1_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *t1_denoised.nii.gz images/\n\n    dmriqc_generic.py \"Denoise T1\" report_denoise_t1.html\\\n    --images images\\\n    --skip $params.denoise_t1_skip\\\n    --nb_threads $params.denoise_t1_nb_threads\\\n    --nb_columns $params.denoise_t1_nb_columns\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "t1_denoised"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.denoise_t1_nb_threads"
        ],
        "when": "params.run_qc_denoise_t1",
        "stub": ""
    },
    "QC_Eddy_Topup": {
        "name_process": "QC_Eddy_Topup",
        "string_process": "\nprocess QC_Eddy_Topup {\n    cpus params.eddy_topup_nb_threads\n\n    input:\n    file(b0) from b0_for_eddy_topup\n    file(b0_corrected) from b0_corrected\n    file(mask) from b0_mask_for_eddy_topup\n    val(counter_b0_before) from counter_b0\n    val(counter_b0_corrected) from counter_b0_eddy\n\n    output:\n    file \"report_eddy_topup.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n    (counter_b0_before == counter_b0_corrected) && params.run_qc_eddy_topup\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n    for i in $b0\n    do\n        echo \\$i >> b0.txt\n    done\n    for i in $b0_corrected\n    do\n        echo \\$i >> b0_corrected.txt\n    done\n    for i in $mask\n    do\n        echo \\$i >> mask.txt\n    done\n    mkdir images\n    paste b0.txt b0_corrected.txt mask.txt | while read a b c; do filename=\\$(basename -- \"\\$b\");\\\n    filename=\"\\${filename%.*.*}\"; mrcalc \\$b \\$c -mult \\${filename}_corrected_masked.nii.gz;\\\n    mrcat \\$a \\${filename}_corrected_masked.nii.gz images/\\${filename}_eddy_topup.nii.gz; done\n\n    dmriqc_generic.py \"Eddy Topup\" report_eddy_topup.html\\\n    --images images\\\n    --skip $params.eddy_topup_skip\\\n    --nb_threads $params.eddy_topup_nb_threads\\\n    --nb_columns $params.eddy_topup_nb_columns\\\n    --duration $params.eddy_topup_duration\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n    for i in $b0\n    do\n        echo \\$i >> b0.txt\n    done\n    for i in $b0_corrected\n    do\n        echo \\$i >> b0_corrected.txt\n    done\n    for i in $mask\n    do\n        echo \\$i >> mask.txt\n    done\n    mkdir images\n    paste b0.txt b0_corrected.txt mask.txt | while read a b c; do filename=\\$(basename -- \"\\$b\");\\\n    filename=\"\\${filename%.*.*}\"; mrcalc \\$b \\$c -mult \\${filename}_corrected_masked.nii.gz;\\\n    mrcat \\$a \\${filename}_corrected_masked.nii.gz images/\\${filename}_eddy_topup.nii.gz; done\n\n    dmriqc_generic.py \"Eddy Topup\" report_eddy_topup.html\\\n    --images images\\\n    --skip $params.eddy_topup_skip\\\n    --nb_threads $params.eddy_topup_nb_threads\\\n    --nb_columns $params.eddy_topup_nb_columns\\\n    --duration $params.eddy_topup_duration\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [
            "DMRcate"
        ],
        "tools_url": [
            "https://bio.tools/dmrcate"
        ],
        "tools_dico": [
            {
                "name": "DMRcate",
                "uri": "https://bio.tools/dmrcate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3204",
                                    "term": "Methylation profile analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "De novo identification and extraction of differentially methylated regions (DMRs) from the human genome using Whole Genome Bisulphite Sequencing (WGBS) and Illumina Infinium Array (450K and EPIC) data. Provides functionality for filtering probes possibly confounded by SNPs and cross-hybridisation. Includes GRanges generation and plotting functions.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/DMRcate.html"
            }
        ],
        "inputs": [
            "b0_for_eddy_topup",
            "b0_corrected",
            "b0_mask_for_eddy_topup",
            "counter_b0",
            "counter_b0_eddy"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.eddy_topup_nb_threads"
        ],
        "when": "(counter_b0_before == counter_b0_corrected) && params.run_qc_eddy_topup",
        "stub": ""
    },
    "QC_Resample_DWI": {
        "name_process": "QC_Resample_DWI",
        "string_process": "\nprocess QC_Resample_DWI {\n    cpus params.resample_dwi_nb_threads\n\n    input:\n    file(b0) from b0_resampled\n    file(wm) from wm_for_resampled_dwi\n    file(gm) from gm_for_resampled_dwi\n    file(csf) from csf_for_resampled_dwi\n\n    output:\n    file \"report_resampled_dwi.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_resample_dwi\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {images,wm,csf,gm}\n    mv *b0_resampled.nii.gz images/\n    for i in wm csf gm\n    do\n      mv *\\${i}.nii.gz \\${i}/\n    done\n\n    dmriqc_generic.py \"Resample DWI\" report_resampled_dwi.html\\\n    --images images --wm wm --gm gm --csf csf\\\n    --skip $params.resample_dwi_skip\\\n    --nb_threads $params.resample_dwi_nb_threads\\\n    --nb_columns $params.resample_dwi_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {images,wm,csf,gm}\n    mv *b0_resampled.nii.gz images/\n    for i in wm csf gm\n    do\n      mv *\\${i}.nii.gz \\${i}/\n    done\n\n    dmriqc_generic.py \"Resample DWI\" report_resampled_dwi.html\\\n    --images images --wm wm --gm gm --csf csf\\\n    --skip $params.resample_dwi_skip\\\n    --nb_threads $params.resample_dwi_nb_threads\\\n    --nb_columns $params.resample_dwi_nb_columns\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "b0_resampled",
            "wm_for_resampled_dwi",
            "gm_for_resampled_dwi",
            "csf_for_resampled_dwi"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.resample_dwi_nb_threads"
        ],
        "when": "params.run_qc_resample_dwi",
        "stub": ""
    },
    "QC_Resample_T1": {
        "name_process": "QC_Resample_T1",
        "string_process": "\nprocess QC_Resample_T1 {\n    cpus params.resample_t1_nb_threads\n\n    input:\n    file(t1) from t1_resampled\n\n    output:\n    file \"report_resampled_t1.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_resample_t1\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *t1_resampled.nii.gz images/\n\n    dmriqc_generic.py \"Resample T1\" report_resampled_t1.html\\\n    --images images\\\n    --skip $params.resample_t1_skip\\\n    --nb_threads $params.resample_t1_nb_threads\\\n    --nb_columns $params.resample_t1_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *t1_resampled.nii.gz images/\n\n    dmriqc_generic.py \"Resample T1\" report_resampled_t1.html\\\n    --images images\\\n    --skip $params.resample_t1_skip\\\n    --nb_threads $params.resample_t1_nb_threads\\\n    --nb_columns $params.resample_t1_nb_columns\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "t1_resampled"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.resample_t1_nb_threads"
        ],
        "when": "params.run_qc_resample_t1",
        "stub": ""
    },
    "QC_DTI": {
        "name_process": "QC_DTI",
        "string_process": "\nprocess QC_DTI {\n    cpus params.dti_nb_threads\n\n    input:\n    file(fa) from fa_for_dti_qa\n    file(md) from md_for_dti_qa\n    file(rd) from rd_for_dti_qa\n    file(ad) from ad_for_dti_qa\n    file(residual) from residual_for_dti_qa\n    file(evecs_v1) from evecs_for_dti_qa\n    file(wm) from wm_for_dti\n    file(gm) from gm_for_dti\n    file(csf) from csf_for_dti\n\n    output:\n    file \"report_dti.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_dti\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {fa,md,rd,ad,residual,evecs_v1,wm,gm,csf}\n\n    for i in fa md rd ad residual evecs_v1 wm csf gm\n    do\n      mv *\\${i}.nii.gz \\${i}/;\n    done\n\n    dmriqc_dti.py report_dti.html\\\n    --fa fa\\\n    --md md\\\n    --rd rd\\\n    --ad ad\\\n    --residual residual\\\n    --evecs_v1 evecs_v1\\\n    --wm wm --gm gm --csf csf\\\n    --skip $params.dti_skip\\\n    --nb_threads $params.dti_nb_threads\\\n    --nb_columns $params.dti_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {fa,md,rd,ad,residual,evecs_v1,wm,gm,csf}\n\n    for i in fa md rd ad residual evecs_v1 wm csf gm\n    do\n      mv *\\${i}.nii.gz \\${i}/;\n    done\n\n    dmriqc_dti.py report_dti.html\\\n    --fa fa\\\n    --md md\\\n    --rd rd\\\n    --ad ad\\\n    --residual residual\\\n    --evecs_v1 evecs_v1\\\n    --wm wm --gm gm --csf csf\\\n    --skip $params.dti_skip\\\n    --nb_threads $params.dti_nb_threads\\\n    --nb_columns $params.dti_nb_columns\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fa_for_dti_qa",
            "md_for_dti_qa",
            "rd_for_dti_qa",
            "ad_for_dti_qa",
            "residual_for_dti_qa",
            "evecs_for_dti_qa",
            "wm_for_dti",
            "gm_for_dti",
            "csf_for_dti"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.dti_nb_threads"
        ],
        "when": "params.run_qc_dti",
        "stub": ""
    },
    "QC_FRF": {
        "name_process": "QC_FRF",
        "string_process": "\nprocess QC_FRF {\n    cpus params.frf_nb_threads\n\n    input:\n    file(frf) from compute_frf\n\n    output:\n    file \"report_compute_frf.html\"\n    file \"libs\"\n\n    when:\n        params.run_qc_frf\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *frf.txt images/\n\n    dmriqc_frf.py images report_compute_frf.html\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *frf.txt images/\n\n    dmriqc_frf.py images report_compute_frf.html\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "compute_frf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.frf_nb_threads"
        ],
        "when": "params.run_qc_frf",
        "stub": ""
    },
    "QC_FODF": {
        "name_process": "QC_FODF",
        "string_process": "\nprocess QC_FODF {\n    cpus params.fodf_nb_threads\n\n    input:\n    file(afd_max) from afd_max_for_fodf_qa\n    file(afd_sum) from afd_sum_for_fodf_qa\n    file(afd_total) from afd_total_for_fodf_qa\n    file(nufo) from nufo_for_fodf_qa\n    file(wm) from wm_for_fodf\n    file(gm) from gm_for_fodf\n    file(csf) from csf_for_fodf\n\n    output:\n    file \"report_fodf.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_fodf\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {afd_max,afd_sum,afd_total,nufo,wm,csf,gm}\n    for i in afd_max afd_sum afd_total nufo wm csf gm\n    do\n      mv *\\${i}.nii.gz \\${i}/;\n    done\n\n    dmriqc_fodf.py report_fodf.html\\\n    --afd_max afd_max\\\n    --afd_sum afd_sum\\\n    --afd_total afd_total\\\n    --nufo nufo\\\n    --wm wm --gm gm --csf csf\\\n    --skip $params.fodf_skip\\\n    --nb_threads $params.fodf_nb_threads\\\n    --nb_columns $params.fodf_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {afd_max,afd_sum,afd_total,nufo,wm,csf,gm}\n    for i in afd_max afd_sum afd_total nufo wm csf gm\n    do\n      mv *\\${i}.nii.gz \\${i}/;\n    done\n\n    dmriqc_fodf.py report_fodf.html\\\n    --afd_max afd_max\\\n    --afd_sum afd_sum\\\n    --afd_total afd_total\\\n    --nufo nufo\\\n    --wm wm --gm gm --csf csf\\\n    --skip $params.fodf_skip\\\n    --nb_threads $params.fodf_nb_threads\\\n    --nb_columns $params.fodf_nb_columns\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "afd_max_for_fodf_qa",
            "afd_sum_for_fodf_qa",
            "afd_total_for_fodf_qa",
            "nufo_for_fodf_qa",
            "wm_for_fodf",
            "gm_for_fodf",
            "csf_for_fodf"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.fodf_nb_threads"
        ],
        "when": "params.run_qc_fodf",
        "stub": ""
    },
    "QC_Tracking": {
        "name_process": "QC_Tracking",
        "string_process": "\nprocess QC_Tracking {\n    cpus params.tracking_nb_threads\n\n    input:\n    set file(tracking), file(\"?????warped.nii.gz\") from tracking_t1\n\n    output:\n    file \"report_tracking.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_tracking\n\n    script:\n    \"\"\"\n    mkdir -p {anat,trks}\n    mv *warped.nii.gz anat/\n    mv *.trk trks/\n\n    dmriqc_tractogram.py report_tracking.html --tractograms trks --t1 anat\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    mkdir -p {anat,trks}\n    mv *warped.nii.gz anat/\n    mv *.trk trks/\n\n    dmriqc_tractogram.py report_tracking.html --tractograms trks --t1 anat\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tracking_t1"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.tracking_nb_threads"
        ],
        "when": "params.run_qc_tracking",
        "stub": ""
    },
    "QC_Segment_Tissues": {
        "name_process": "QC_Segment_Tissues",
        "string_process": "\nprocess QC_Segment_Tissues {\n    cpus params.segment_tissues_nb_threads\n\n    input:\n    file(wm) from wm_for_seg\n    file(gm) from gm_for_seg\n    file(csf) from csf_for_seg\n\n    output:\n    file \"report_segment_tissues.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_segment_tissues\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {wm,csf,gm}\n    for i in wm csf gm\n    do\n      mv *\\${i}.nii.gz \\${i}/;\n    done\n\n    dmriqc_tissues.py report_segment_tissues.html\\\n    --wm wm --gm gm --csf csf\\\n    --skip $params.segment_tissues_skip\\\n    --nb_threads $params.segment_tissues_nb_threads\\\n    --nb_columns $params.segment_tissues_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {wm,csf,gm}\n    for i in wm csf gm\n    do\n      mv *\\${i}.nii.gz \\${i}/;\n    done\n\n    dmriqc_tissues.py report_segment_tissues.html\\\n    --wm wm --gm gm --csf csf\\\n    --skip $params.segment_tissues_skip\\\n    --nb_threads $params.segment_tissues_nb_threads\\\n    --nb_columns $params.segment_tissues_nb_columns\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "wm_for_seg",
            "gm_for_seg",
            "csf_for_seg"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.segment_tissues_nb_threads"
        ],
        "when": "params.run_qc_segment_tissues",
        "stub": ""
    },
    "QC_PFT_Maps": {
        "name_process": "QC_PFT_Maps",
        "string_process": "\nprocess QC_PFT_Maps {\n    cpus params.pft_maps_nb_threads\n\n    input:\n    file(seeding_mask) from seeding\n    file(map_include) from include\n    file(map_exclude) from exclude\n\n    output:\n    file \"report_pft_maps.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_pft_maps && seeding_mask.size()\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {seeding_mask,map_include,map_exclude}\n    for i in seeding_mask map_include map_exclude\n    do\n      mv *\\${i}.nii.gz \\${i}/;\n    done\n\n    dmriqc_tracking_maps.py pft report_pft_maps.html\\\n    --seeding_mask seeding_mask --map_include map_include\\\n    --map_exclude map_exclude\\\n    --skip $params.pft_maps_skip\\\n    --nb_threads $params.pft_maps_nb_threads\\\n    --nb_columns $params.pft_maps_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {seeding_mask,map_include,map_exclude}\n    for i in seeding_mask map_include map_exclude\n    do\n      mv *\\${i}.nii.gz \\${i}/;\n    done\n\n    dmriqc_tracking_maps.py pft report_pft_maps.html\\\n    --seeding_mask seeding_mask --map_include map_include\\\n    --map_exclude map_exclude\\\n    --skip $params.pft_maps_skip\\\n    --nb_threads $params.pft_maps_nb_threads\\\n    --nb_columns $params.pft_maps_nb_columns\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seeding",
            "include",
            "exclude"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.pft_maps_nb_threads"
        ],
        "when": "params.run_qc_pft_maps && seeding_mask.size()",
        "stub": ""
    },
    "QC_Local_Tracking_Mask": {
        "name_process": "QC_Local_Tracking_Mask",
        "string_process": "\nprocess QC_Local_Tracking_Mask {\n    cpus params.local_tracking_mask_nb_threads\n\n    input:\n    file(tracking_mask) from mask\n\n    output:\n    file \"report_local_tracking_mask.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_tracking_mask && tracking_mask.size()\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *tracking_mask.nii.gz images/\n\n    dmriqc_generic.py \"Tracking mask\" report_local_tracking_mask.html\\\n        --images images\\\n        --skip $params.local_tracking_mask_skip\\\n        --nb_threads $params.local_tracking_mask_nb_threads\\\n        --nb_columns $params.local_tracking_mask_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *tracking_mask.nii.gz images/\n\n    dmriqc_generic.py \"Tracking mask\" report_local_tracking_mask.html\\\n        --images images\\\n        --skip $params.local_tracking_mask_skip\\\n        --nb_threads $params.local_tracking_mask_nb_threads\\\n        --nb_columns $params.local_tracking_mask_nb_columns\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mask"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.local_tracking_mask_nb_threads"
        ],
        "when": "params.run_qc_tracking_mask && tracking_mask.size()",
        "stub": ""
    },
    "QC_Local_Seeding_Mask": {
        "name_process": "QC_Local_Seeding_Mask",
        "string_process": "\nprocess QC_Local_Seeding_Mask {\n    cpus params.local_seeding_mask_nb_threads\n\n    input:\n    file(seeding_mask) from seeding\n\n    output:\n    file \"report_local_seeding_mask.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_seeding_mask && seeding_mask.size()\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *seeding_mask.nii.gz images/\n\n    dmriqc_generic.py \"Seeding mask\" report_local_seeding_mask.html\\\n            --images images\\\n            --skip $params.local_seeding_mask_skip\\\n            --nb_threads $params.local_seeding_mask_nb_threads\\\n            --nb_columns $params.local_seeding_mask_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *seeding_mask.nii.gz images/\n\n    dmriqc_generic.py \"Seeding mask\" report_local_seeding_mask.html\\\n            --images images\\\n            --skip $params.local_seeding_mask_skip\\\n            --nb_threads $params.local_seeding_mask_nb_threads\\\n            --nb_columns $params.local_seeding_mask_nb_columns\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seeding"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.local_seeding_mask_nb_threads"
        ],
        "when": "params.run_qc_seeding_mask && seeding_mask.size()",
        "stub": ""
    },
    "QC_Register_T1": {
        "name_process": "QC_Register_T1",
        "string_process": "\nprocess QC_Register_T1 {\n    cpus params.register_nb_threads\n\n    input:\n    file(t1) from t1_warped_for_registration\n    file(rgb) from rgb\n    file(wm) from wm_for_registration\n    file(gm) from gm_for_registration\n    file(csf) from csf_for_registration\n\n    output:\n    file \"report_registration.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_register_t1\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {t1_warped,rgb,wm,csf,gm}\n    for i in t1_warped rgb wm csf gm\n    do\n      mv *\\${i}.nii.gz \\${i}/;\n    done\n\n    dmriqc_registration.py report_registration.html\\\n    --t1 t1_warped --rgb rgb\\\n    --wm wm --gm gm --csf csf\\\n    --skip $params.register_skip\\\n    --nb_threads $params.register_nb_threads\\\n    --nb_columns $params.register_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {t1_warped,rgb,wm,csf,gm}\n    for i in t1_warped rgb wm csf gm\n    do\n      mv *\\${i}.nii.gz \\${i}/;\n    done\n\n    dmriqc_registration.py report_registration.html\\\n    --t1 t1_warped --rgb rgb\\\n    --wm wm --gm gm --csf csf\\\n    --skip $params.register_skip\\\n    --nb_threads $params.register_nb_threads\\\n    --nb_columns $params.register_nb_columns\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "t1_warped_for_registration",
            "rgb",
            "wm_for_registration",
            "gm_for_registration",
            "csf_for_registration"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.register_nb_threads"
        ],
        "when": "params.run_qc_register_t1",
        "stub": ""
    },
    "QC_DWI_Protocol": {
        "name_process": "QC_DWI_Protocol",
        "string_process": "\nprocess QC_DWI_Protocol {\n    cpus 1\n\n    input:\n    file(bval) from all_bval\n    file(bvec) from all_bvec\n    file(json) from all_json\n\n    output:\n    file \"report_dwi_protocol.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_dwi_protocol\n\n    script:\n    def metadata = json.name != [] ? \"--metadata json_f\" : ''\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {bval_f,bvec_f,json_f}\n    for i in bval bvec json\n    do\n      mv *\\${i} \\${i}_f/;\n    done\n\n    dmriqc_dwi_protocol.py report_dwi_protocol.html\\\n    --bval bval_f --bvec bvec_f\\\n    $metadata\\\n    --dicom_fields $params.dicom_fields\\\n    --tol $params.dwi_protocol_tol\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def metadata = json.name != [] ? \"--metadata json_f\" : ''\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir -p {bval_f,bvec_f,json_f}\n    for i in bval bvec json\n    do\n      mv *\\${i} \\${i}_f/;\n    done\n\n    dmriqc_dwi_protocol.py report_dwi_protocol.html\\\n    --bval bval_f --bvec bvec_f\\\n    $metadata\\\n    --dicom_fields $params.dicom_fields\\\n    --tol $params.dwi_protocol_tol\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_bval",
            "all_bvec",
            "all_json"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus 1"
        ],
        "when": "params.run_qc_dwi_protocol",
        "stub": ""
    },
    "QC_Raw_T1": {
        "name_process": "QC_Raw_T1",
        "string_process": "\nprocess QC_Raw_T1 {\n    cpus params.raw_t1_nb_threads\n\n    input:\n    file(t1) from all_t1\n\n    output:\n    file \"report_raw_t1.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_raw_t1\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *gz images/\n\n    dmriqc_generic.py \"Raw_T1\" report_raw_t1.html\\\n        --images images\\\n        --skip $params.raw_t1_skip\\\n        --nb_threads $params.raw_t1_nb_threads\\\n        --nb_columns $params.raw_t1_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *gz images/\n\n    dmriqc_generic.py \"Raw_T1\" report_raw_t1.html\\\n        --images images\\\n        --skip $params.raw_t1_skip\\\n        --nb_threads $params.raw_t1_nb_threads\\\n        --nb_columns $params.raw_t1_nb_columns\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_t1"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.raw_t1_nb_threads"
        ],
        "when": "params.run_raw_t1",
        "stub": ""
    },
    "QC_Raw_DWI": {
        "name_process": "QC_Raw_DWI",
        "string_process": "\nprocess QC_Raw_DWI {\n    cpus params.raw_dwi_nb_threads\n\n    input:\n    file(dwi) from all_dwi\n\n    output:\n    file \"report_raw_dwi.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_raw_dwi\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *gz images/\n\n    dmriqc_generic.py \"Raw_DWI\" report_raw_dwi.html\\\n        --images images\\\n        --skip $params.raw_dwi_skip\\\n        --nb_threads $params.raw_dwi_nb_threads\\\n        --nb_columns $params.raw_dwi_nb_columns\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mkdir images\n    mv *gz images/\n\n    dmriqc_generic.py \"Raw_DWI\" report_raw_dwi.html\\\n        --images images\\\n        --skip $params.raw_dwi_skip\\\n        --nb_threads $params.raw_dwi_nb_threads\\\n        --nb_columns $params.raw_dwi_nb_columns\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_dwi"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.raw_dwi_nb_threads"
        ],
        "when": "params.run_raw_dwi",
        "stub": ""
    },
    "Screenshots_RBx": {
        "name_process": "Screenshots_RBx",
        "string_process": "\nprocess Screenshots_RBx {\n    cpus 2\n    stageInMode 'copy'\n    publishDir {\"./results_QC/$task.process/${sid}\"}\n\n    input:\n    set sid, b_name, file(bundles), file(anat) from bundles_anat_for_screenshots\n\n    output:\n    set b_name, val(\"QC\"), \"${sid}__${b_name}.png\" into screenshots_for_report\n\n    when:\n        params.run_qc_rbx\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mrconvert $anat anat.nii.gz\n    scil_visualize_bundles_mosaic.py anat.nii.gz $bundles ${sid}__${b_name}.png -f --light_screenshot --no_information\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    mrconvert $anat anat.nii.gz\n    scil_visualize_bundles_mosaic.py anat.nii.gz $bundles ${sid}__${b_name}.png -f --light_screenshot --no_information\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bundles_anat_for_screenshots"
        ],
        "nb_inputs": 1,
        "outputs": [
            "screenshots_for_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus 2",
            "stageInMode 'copy'",
            "publishDir {\"./results_QC/$task.process/${sid}\"}"
        ],
        "when": "params.run_qc_rbx",
        "stub": ""
    },
    "QC_RBx": {
        "name_process": "QC_RBx",
        "string_process": "\nprocess QC_RBx {\n    cpus 1\n\n    input:\n    set b_names, file(bundles) from screenshots_for_qc_rbx\n\n    output:\n    file \"report_rbx.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n        params.run_qc_rbx\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n    for i in $b_names;\n    do\n        echo \\${i}\n        mkdir -p \\${i}\n        mv *\\${i}.png \\${i}/\n    done\n    dmriqc_from_screenshot.py report_rbx.html --data ${b_names} --sym_link\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n    for i in $b_names;\n    do\n        echo \\${i}\n        mkdir -p \\${i}\n        mv *\\${i}.png \\${i}/\n    done\n    dmriqc_from_screenshot.py report_rbx.html --data ${b_names} --sym_link\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "screenshots_for_qc_rbx"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus 1"
        ],
        "when": "params.run_qc_rbx",
        "stub": ""
    },
    "QC_Register_Lesions_to_Template": {
        "name_process": "QC_Register_Lesions_to_Template",
        "string_process": "\nprocess QC_Register_Lesions_to_Template {\n    cpus params.eddy_topup_nb_threads\n\n    input:\n    file(t1s) from t1_lesions_registered\n    file(template) from labels_for_register_lesions_qc\n\n    output:\n    file \"report_register_to_template.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n    params.run_t1_register_to_template\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    dmriqc_labels.py report_register_to_template.html\\\n    --t1 ${t1s}\\\n    --label ${template} \\\n    --skip $params.eddy_topup_skip\\\n    --nb_threads $params.eddy_topup_nb_threads\\\n    --nb_columns $params.eddy_topup_nb_columns\\\n    --compute_lut\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    dmriqc_labels.py report_register_to_template.html\\\n    --t1 ${t1s}\\\n    --label ${template} \\\n    --skip $params.eddy_topup_skip\\\n    --nb_threads $params.eddy_topup_nb_threads\\\n    --nb_columns $params.eddy_topup_nb_columns\\\n    --compute_lut\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "t1_lesions_registered",
            "labels_for_register_lesions_qc"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.eddy_topup_nb_threads"
        ],
        "when": "params.run_t1_register_to_template",
        "stub": ""
    },
    "QC_Register_Tractograms_to_Template": {
        "name_process": "QC_Register_Tractograms_to_Template",
        "string_process": "\nprocess QC_Register_Tractograms_to_Template {\n    cpus params.eddy_topup_nb_threads\n\n    input:\n    file(t1s) from t1_tractograms_registered\n    file(template) from labels_for_register_tractograms_qc\n\n    output:\n    file \"report_register_to_template.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n    params.run_t1_register_to_template\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    dmriqc_labels.py report_register_to_template.html\\\n    --t1 ${t1s}\\\n    --label ${template} \\\n    --skip $params.eddy_topup_skip\\\n    --nb_threads $params.eddy_topup_nb_threads\\\n    --nb_columns $params.eddy_topup_nb_columns\\\n    --compute_lut\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n\n    dmriqc_labels.py report_register_to_template.html\\\n    --t1 ${t1s}\\\n    --label ${template} \\\n    --skip $params.eddy_topup_skip\\\n    --nb_threads $params.eddy_topup_nb_threads\\\n    --nb_columns $params.eddy_topup_nb_columns\\\n    --compute_lut\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "t1_tractograms_registered",
            "labels_for_register_tractograms_qc"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus params.eddy_topup_nb_threads"
        ],
        "when": "params.run_t1_register_to_template",
        "stub": ""
    },
    "Create_disconets_csv": {
        "name_process": "Create_disconets_csv",
        "string_process": "\nprocess Create_disconets_csv {\n    cpus 1\n    input:\n    set sid, tid, file(before_mat), file(after_mat), file(label_atlas) from matrices_labels_for_create_csv\n\n    output:\n    file(\"${sid}_${tid}_sc_ratio.csv\") into stats_to_be_collected\n\n    script:\n\n    before_m=\"${before_mat}\"\n    after_m=\"${after_mat}\"\n    labels=\"${label_atlas}\"\n    output_file=\"${sid}_${tid}_sc_ratio.csv\"\n\n    template \"disconets_qc_analysis.py\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    before_m=\"${before_mat}\"\n    after_m=\"${after_mat}\"\n    labels=\"${label_atlas}\"\n    output_file=\"${sid}_${tid}_sc_ratio.csv\"\n\n    template \"disconets_qc_analysis.py\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "matrices_labels_for_create_csv"
        ],
        "nb_inputs": 1,
        "outputs": [
            "stats_to_be_collected"
        ],
        "nb_outputs": 1,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus 1"
        ],
        "when": "",
        "stub": ""
    },
    "QC_SC_Matrices": {
        "name_process": "QC_SC_Matrices",
        "string_process": "\nprocess QC_SC_Matrices {\n    cpus 1\n\n    input:\n    set sid, file(png) from lesion_png\n    file(stats) from stats_for_matrix\n\n    output:\n    file \"report_sc_matrices.html\"\n    file \"data\"\n    file \"libs\"\n\n    when:\n    params.run_qc_matrices\n\n    script:\n    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n    ls -al\n    for i in ${sid};\n    do\n      echo \\${i}\n      mkdir -p \\${i}\n      mv \\${i}*.* \\${i}/\n    done\n    dmriqc_from_screenshot.py report_sc_matrices.html --data ${sid} --stats --sym_link\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n    ls -al\n    for i in ${sid};\n    do\n      echo \\${i}\n      mkdir -p \\${i}\n      mv \\${i}*.* \\${i}/\n    done\n    dmriqc_from_screenshot.py report_sc_matrices.html --data ${sid} --stats --sym_link\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "lesion_png",
            "stats_for_matrix"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "scilus__dmriqc_flow",
        "directive": [
            "cpus 1"
        ],
        "when": "params.run_qc_matrices",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(\"$input/**/Segment_*/*mask_wm.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .into{wm_for_resampled_dwi;wm_for_dti;wm_for_fodf;wm_for_registration}",
        "origin": [
            [
                "\"$input/**/Segment_*/*mask_wm.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "wm_for_resampled_dwi",
                "P"
            ],
            [
                "wm_for_dti",
                "P"
            ],
            [
                "wm_for_fodf",
                "P"
            ],
            [
                "wm_for_registration",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath(\"$input/**/Segment_*/*mask_gm.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .into{gm_for_resampled_dwi;gm_for_dti;gm_for_fodf;gm_for_registration}",
        "origin": [
            [
                "\"$input/**/Segment_*/*mask_gm.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "gm_for_resampled_dwi",
                "P"
            ],
            [
                "gm_for_dti",
                "P"
            ],
            [
                "gm_for_fodf",
                "P"
            ],
            [
                "gm_for_registration",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n    .fromPath(\"$input/**/Segment_*/*mask_csf.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .into{csf_for_resampled_dwi;csf_for_dti;csf_for_fodf;csf_for_registration}",
        "origin": [
            [
                "\"$input/**/Segment_*/*mask_csf.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "csf_for_resampled_dwi",
                "P"
            ],
            [
                "csf_for_dti",
                "P"
            ],
            [
                "csf_for_fodf",
                "P"
            ],
            [
                "csf_for_registration",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n    .fromPath(\"$input/**/Bet_DWI/*b0_bet_mask.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .map{[it]}\n    .set{b0_bet_mask_for_bet}",
        "origin": [
            [
                "\"$input/**/Bet_DWI/*b0_bet_mask.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "b0_bet_mask_for_bet",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n    .fromPath([\"$input/**/Eddy/*dwi_corrected.nii.gz\", \"$input/**/Eddy_Topup/*dwi_corrected.nii.gz\"], maxDepth:3)\n    .collect(sort:true)\n    .map{[it]}\n    .set{dwi_eddy_for_bet}",
        "origin": [
            [
                "[\"$input/**/Eddy/*dwi_corrected.nii.gz\", \"$input/**/Eddy_Topup/*dwi_corrected.nii.gz\"], maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "dwi_eddy_for_bet",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n    .fromPath(\"$input/**/Bet_T1/*t1_bet_mask.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .map{[it]}\n    .set{t1_bet_mask_for_bet}",
        "origin": [
            [
                "\"$input/**/Bet_T1/*t1_bet_mask.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "t1_bet_mask_for_bet",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n    .fromPath(\"$input/**/Resample_T1/*t1_resampled.nii.gz\",\n      maxDepth:3)\n    .collect(sort:true)\n    .map{[it]}\n    .set{t1_for_bet}",
        "origin": [],
        "gives": [
            [
                "t1_for_bet",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel\n    .fromPath(\"$input/**/Denoise_DWI/*dwi_denoised.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{dwi_denoised}",
        "origin": [
            [
                "\"$input/**/Denoise_DWI/*dwi_denoised.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "dwi_denoised",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel\n    .fromPath(\"$input/**/Denoise_T1/*t1_denoised.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{t1_denoised}",
        "origin": [
            [
                "\"$input/**/Denoise_T1/*t1_denoised.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "t1_denoised",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel\n    .fromPath([\"$input/**/Bet_Prelim_DWI/*b0_bet.nii.gz\"],\n      maxDepth:3)\n    .collect(sort:true)\n    .into{b0_for_eddy_topup;for_counter_b0}",
        "origin": [],
        "gives": [
            [
                "b0_for_eddy_topup",
                "P"
            ],
            [
                "for_counter_b0",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel\n    .fromPath(\"$input/**/Bet_DWI/*b0_bet_mask.nii.gz\",\n      maxDepth:3)\n    .collect(sort:true)\n    .set{b0_mask_for_eddy_topup}",
        "origin": [],
        "gives": [
            [
                "b0_mask_for_eddy_topup",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel\n    .fromPath([\"$input/**/Extract_B0/*b0.nii.gz\",\"$input/**/Bet_DWI/*b0_no_bet.nii.gz\"], maxDepth:3)\n    .collect(sort:true)\n    .into{b0_corrected;for_counter_b0_corrected}",
        "origin": [
            [
                "[\"$input/**/Extract_B0/*b0.nii.gz\",\"$input/**/Bet_DWI/*b0_no_bet.nii.gz\"], maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "b0_corrected",
                "P"
            ],
            [
                "for_counter_b0_corrected",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "Channel\n    .fromPath(\"$input/**/*_B0/*b0_resampled.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{b0_resampled}",
        "origin": [
            [
                "\"$input/**/*_B0/*b0_resampled.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "b0_resampled",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel\n    .fromPath(\"$input/**/Resample_T1/*t1_resampled.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{t1_resampled}",
        "origin": [
            [
                "\"$input/**/Resample_T1/*t1_resampled.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "t1_resampled",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "dti_metrics = Channel\n    .fromFilePairs(\"$input/**/DTI_Metrics/*{fa.nii.gz,md.nii.gz,rd.nii.gz,ad.nii.gz,residual.nii.gz,evecs_v1.nii.gz}\",\n                    size: 6,\n                    maxDepth:3,\n                    flat:true)",
        "origin": [],
        "gives": [
            [
                "dti_metrics",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "Channel\n    .fromPath(\"$input/**/Compute_FRF/*frf.txt\", maxDepth:3)\n    .collect(sort:true)\n    .set{compute_frf}",
        "origin": [
            [
                "\"$input/**/Compute_FRF/*frf.txt\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "compute_frf",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "fodf_metrics = Channel\n    .fromFilePairs(\"$input/**/FODF_Metrics/*{afd_max.nii.gz,afd_sum.nii.gz,afd_total.nii.gz,nufo.nii.gz}\",\n                    size: 4,\n                    maxDepth:3,\n                    flat:true)",
        "origin": [],
        "gives": [
            [
                "fodf_metrics",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "Channel\n    .fromPath(\"$input/**/*_Tracking/*.trk\", maxDepth:3)\n    .map{[\"report\", it.parent.parent.name, it]}\n    .set{tractograms}",
        "origin": [
            [
                "\"$input/**/*_Tracking/*.trk\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "tractograms",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "Channel\n    .fromPath(\"$input/**/Register_T1/*t1_warped.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{t1_warped_for_registration}",
        "origin": [
            [
                "\"$input/**/Register_T1/*t1_warped.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "t1_warped_for_registration",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "Channel\n    .fromPath(\"$input/**/Register_T1/*t1_warped.nii.gz\", maxDepth:3)\n    .map{[\"report\", it.parent.parent.name, it]}\n    .set{t1_warped_for_tracking}",
        "origin": [
            [
                "\"$input/**/Register_T1/*t1_warped.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "t1_warped_for_tracking",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "Channel\n    .fromPath(\"$input/**/Segment_Tissues/*map_wm.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{wm_maps}",
        "origin": [
            [
                "\"$input/**/Segment_Tissues/*map_wm.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "wm_maps",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "Channel\n    .fromPath(\"$input/**/Segment_Freesurfer/*mask_wm.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{wm_masks}",
        "origin": [
            [
                "\"$input/**/Segment_Freesurfer/*mask_wm.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "wm_masks",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "Channel\n    .fromPath(\"$input/**/Segment_Tissues/*map_gm.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{gm_maps}",
        "origin": [
            [
                "\"$input/**/Segment_Tissues/*map_gm.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "gm_maps",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "Channel\n    .fromPath(\"$input/**/Segment_Freesurfer/*mask_gm.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{gm_masks}",
        "origin": [
            [
                "\"$input/**/Segment_Freesurfer/*mask_gm.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "gm_masks",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "Channel\n    .fromPath(\"$input/**/Segment_Tissues/*map_csf.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{csf_maps}",
        "origin": [
            [
                "\"$input/**/Segment_Tissues/*map_csf.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "csf_maps",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "Channel\n    .fromPath(\"$input/**/Segment_Freesurfer/*mask_csf.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{csf_masks}",
        "origin": [
            [
                "\"$input/**/Segment_Freesurfer/*mask_csf.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "csf_masks",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "Channel\n    .fromPath(\"$input/**/PFT_Seeding_Mask/*seeding_mask.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{seeding}",
        "origin": [
            [
                "\"$input/**/PFT_Seeding_Mask/*seeding_mask.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "seeding",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "Channel\n    .fromPath(\"$input/**/PFT_Tracking_Maps/*map_include.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{include}",
        "origin": [
            [
                "\"$input/**/PFT_Tracking_Maps/*map_include.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "include",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "Channel\n    .fromPath(\"$input/**/PFT_Tracking_Maps/*map_exclude.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{exclude}",
        "origin": [
            [
                "\"$input/**/PFT_Tracking_Maps/*map_exclude.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "exclude",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "Channel\n    .fromPath(\"$input/**/Local_Tracking_Mask/*tracking_mask.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{mask}",
        "origin": [
            [
                "\"$input/**/Local_Tracking_Mask/*tracking_mask.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "mask",
                "P"
            ]
        ]
    },
    "OPERATION_31": {
        "string": "Channel\n    .fromPath(\"$input/**/Local_Seeding_Mask/*seeding_mask.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{seeding}",
        "origin": [
            [
                "\"$input/**/Local_Seeding_Mask/*seeding_mask.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "seeding",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "Channel\n    .fromPath(\"$input/**/DTI_Metrics/*rgb.nii.gz\", maxDepth:3)\n    .collect(sort:true)\n    .set{rgb}",
        "origin": [
            [
                "\"$input/**/DTI_Metrics/*rgb.nii.gz\", maxDepth:3",
                "A"
            ]
        ],
        "gives": [
            [
                "rgb",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "Channel\n    .fromPath(\"$input/**/*bval\", maxDepth:1)\n    .collect(sort:true)\n    .set{all_raw_bval}",
        "origin": [
            [
                "\"$input/**/*bval\", maxDepth:1",
                "A"
            ]
        ],
        "gives": [
            [
                "all_raw_bval",
                "P"
            ]
        ]
    },
    "OPERATION_34": {
        "string": "Channel\n    .fromPath(\"$input/sub-*/**/*dwi.bval\", maxDepth:4)\n    .collect(sort:true)\n    .set{all_bids_bval}",
        "origin": [
            [
                "\"$input/sub-*/**/*dwi.bval\", maxDepth:4",
                "A"
            ]
        ],
        "gives": [
            [
                "all_bids_bval",
                "P"
            ]
        ]
    },
    "OPERATION_35": {
        "string": "Channel\n  .fromPath(\"$input/sub-*/**/*dwi.json\", maxDepth:4)\n  .map{it}\n  .toSortedList()\n  .set{all_bids_json}",
        "origin": [
            [
                "\"$input/sub-*/**/*dwi.json\", maxDepth:4",
                "A"
            ]
        ],
        "gives": [
            [
                "all_bids_json",
                "P"
            ]
        ]
    },
    "OPERATION_36": {
        "string": "Channel\n  .fromPath(\"$input/**/*dwi.json\", maxDepth:1)\n  .map{it}\n  .toSortedList()\n  .set{all_raw_json}",
        "origin": [
            [
                "\"$input/**/*dwi.json\", maxDepth:1",
                "A"
            ]
        ],
        "gives": [
            [
                "all_raw_json",
                "P"
            ]
        ]
    },
    "OPERATION_37": {
        "string": "Channel\n    .fromPath(\"$input/**/*bvec\", maxDepth:1)\n    .collect(sort:true)\n    .set{all_raw_bvec}",
        "origin": [
            [
                "\"$input/**/*bvec\", maxDepth:1",
                "A"
            ]
        ],
        "gives": [
            [
                "all_raw_bvec",
                "P"
            ]
        ]
    },
    "OPERATION_38": {
        "string": "Channel\n    .fromPath(\"$input/sub-*/**/*dwi.bvec\", maxDepth:4)\n    .collect(sort:true)\n    .set{all_bids_bvec}",
        "origin": [
            [
                "\"$input/sub-*/**/*dwi.bvec\", maxDepth:4",
                "A"
            ]
        ],
        "gives": [
            [
                "all_bids_bvec",
                "P"
            ]
        ]
    },
    "OPERATION_39": {
        "string": "Channel\n    .fromPath(\"$input/**/*t1.nii.gz\", maxDepth:2)\n    .collect(sort:true)\n    .set{all_raw_t1}",
        "origin": [
            [
                "\"$input/**/*t1.nii.gz\", maxDepth:2",
                "A"
            ]
        ],
        "gives": [
            [
                "all_raw_t1",
                "P"
            ]
        ]
    },
    "OPERATION_40": {
        "string": "Channel\n    .fromPath(\"$input/sub-*/**/*T1w.nii.gz\", maxDepth:4)\n    .collect(sort:true)\n    .set{all_bids_t1}",
        "origin": [
            [
                "\"$input/sub-*/**/*T1w.nii.gz\", maxDepth:4",
                "A"
            ]
        ],
        "gives": [
            [
                "all_bids_t1",
                "P"
            ]
        ]
    },
    "OPERATION_41": {
        "string": "Channel\n    .fromPath(\"$input/**/*dwi.nii.gz\", maxDepth:1)\n    .collect(sort:true)\n    .set{all_raw_dwi}",
        "origin": [
            [
                "\"$input/**/*dwi.nii.gz\", maxDepth:1",
                "A"
            ]
        ],
        "gives": [
            [
                "all_raw_dwi",
                "P"
            ]
        ]
    },
    "OPERATION_42": {
        "string": "Channel\n    .fromPath(\"$input/sub-*/**/*dwi.nii.gz\", maxDepth:4)\n    .collect(sort:true)\n    .set{all_bids_dwi}",
        "origin": [
            [
                "\"$input/sub-*/**/*dwi.nii.gz\", maxDepth:4",
                "A"
            ]
        ],
        "gives": [
            [
                "all_bids_dwi",
                "P"
            ]
        ]
    },
    "OPERATION_43": {
        "string": "anat_rbx = Channel\n    .fromFilePairs(\"$params.input/**/Register_Anat/*native_anat.nii.gz\",\n              maxDepth: 2,\n              size: 1,\n              flat: true) { it.parent.parent.name }",
        "origin": [],
        "gives": [
            [
                "anat_rbx",
                "P"
            ]
        ]
    },
    "OPERATION_44": {
        "string": "bundles_rbx = Channel\n    .fromFilePairs(\"$params.input/**/Clean_Bundles/*.trk\",\n                   maxDepth: 2,\n                   size: -1) { it.parent.parent.name }",
        "origin": [],
        "gives": [
            [
                "bundles_rbx",
                "P"
            ]
        ]
    },
    "OPERATION_45": {
        "string": "Channel.fromPath(\"$input/**/Register_Lesions_T1s/*space.nii.gz\", maxDepth:4)\n    .collect(sort:true)\n    .set{t1_lesions_registered}",
        "origin": [
            [
                "\"$input/**/Register_Lesions_T1s/*space.nii.gz\", maxDepth:4",
                "A"
            ]
        ],
        "gives": [
            [
                "t1_lesions_registered",
                "P"
            ]
        ]
    },
    "OPERATION_46": {
        "string": "Channel\n    .fromPath(\"$input/*_labels.nii.gz\")\n    .collect()\n    .into{labels_for_register_lesions_qc;labels_for_register_tractograms_qc}",
        "origin": [
            [
                "\"$input/*_labels.nii.gz\"",
                "A"
            ]
        ],
        "gives": [
            [
                "labels_for_register_lesions_qc",
                "P"
            ],
            [
                "labels_for_register_tractograms_qc",
                "P"
            ]
        ]
    },
    "OPERATION_47": {
        "string": "Channel.fromPath(\"$input/**/Register_Tractograms_T1s/*space.nii.gz\", maxDepth:4)\n    .collect(sort:true)\n    .set{t1_tractograms_registered}",
        "origin": [
            [
                "\"$input/**/Register_Tractograms_T1s/*space.nii.gz\", maxDepth:4",
                "A"
            ]
        ],
        "gives": [
            [
                "t1_tractograms_registered",
                "P"
            ]
        ]
    },
    "OPERATION_48": {
        "string": "Channel.fromPath(\"$input/**/**/Compute_Connectivity/Connectivity_w_lesion/*lesion_sc.npy\",\n    maxDepth:6)\n    .map{[it.parent.parent.parent.parent.name, it.parent.parent.parent.name, it]}\n    .set{matrice_lesion_for_combine}",
        "origin": [],
        "gives": [
            [
                "matrice_lesion_for_combine",
                "P"
            ]
        ]
    },
    "OPERATION_49": {
        "string": "Channel.fromPath(\"$input/**/**/Compute_Connectivity/*atlas_sc.npy\",\n    maxDepth:5)\n    .map{[it.parent.parent.parent.name, it.parent.parent.name, it]}\n    .set{matrice_atlas_for_combine}",
        "origin": [],
        "gives": [
            [
                "matrice_atlas_for_combine",
                "P"
            ]
        ]
    },
    "OPERATION_50": {
        "string": "Channel.fromPath(\"$input/*labels.txt\")\n    .set{labels}",
        "origin": [
            [
                "\"$input/*labels.txt\"",
                "A"
            ]
        ],
        "gives": [
            [
                "labels",
                "P"
            ]
        ]
    },
    "OPERATION_51": {
        "string": "Channel.fromPath(\"$input/**/**/Compute_Connectivity/Connectivity_w_lesion/*lesion_sc_matrix.png\", maxDepth:6)\n    .collect(sort: true)\n    .map{[it.parent.parent.parent.parent.name, it]}\n    .map{sid, png -> [sid.unique().join(\",\").replaceAll(\",\", \" \"), png].toList()}\n    .set{lesion_png}",
        "origin": [
            [
                "\"$input/**/**/Compute_Connectivity/Connectivity_w_lesion/*lesion_sc_matrix.png\", maxDepth:6",
                "A"
            ]
        ],
        "gives": [
            [
                "lesion_png",
                "P"
            ]
        ]
    },
    "OPERATION_52": {
        "string": "dwi_eddy_for_bet.combine(b0_bet_mask_for_bet).set{dwi_mask_for_bet}",
        "origin": [
            [
                "dwi_eddy_for_bet",
                "P"
            ],
            [
                "b0_bet_mask_for_bet",
                "P"
            ]
        ],
        "gives": [
            [
                "dwi_mask_for_bet",
                "P"
            ]
        ]
    },
    "OPERATION_53": {
        "string": "t1_for_bet.combine(t1_bet_mask_for_bet).set{t1_mask_for_bet}",
        "origin": [
            [
                "t1_for_bet",
                "P"
            ],
            [
                "t1_bet_mask_for_bet",
                "P"
            ]
        ],
        "gives": [
            [
                "t1_mask_for_bet",
                "P"
            ]
        ]
    },
    "OPERATION_54": {
        "string": "for_counter_b0\n    .flatten()\n    .count()\n    .set{counter_b0}",
        "origin": [
            [
                "for_counter_b0",
                "P"
            ]
        ],
        "gives": [
            [
                "counter_b0",
                "P"
            ]
        ]
    },
    "OPERATION_55": {
        "string": "for_counter_b0_corrected\n    .flatten()\n    .count()\n    .set{counter_b0_eddy}",
        "origin": [
            [
                "for_counter_b0_corrected",
                "P"
            ]
        ],
        "gives": [
            [
                "counter_b0_eddy",
                "P"
            ]
        ]
    },
    "OPERATION_56": {
        "string": "fa, md, rd, ad, residual, evecs = dti_metrics\n    .map{sid, ad, evecs, fa, md, rd, residual -> [tuple(fa),\n                              tuple(md),\n                              tuple(rd),\n                              tuple(ad),\n                              tuple(residual),\n                              tuple(evecs)]}\n    .separate(6)",
        "origin": [
            [
                "dti_metrics",
                "P"
            ]
        ],
        "gives": [
            [
                "fa",
                "P"
            ],
            [
                "md",
                "P"
            ],
            [
                "rd",
                "P"
            ],
            [
                "ad",
                "P"
            ],
            [
                "residual",
                "P"
            ],
            [
                "evecs",
                "P"
            ]
        ]
    },
    "OPERATION_57": {
        "string": "fa\n    .flatten()\n    .collect(sort:true)\n    .set{fa_for_dti_qa}",
        "origin": [
            [
                "fa",
                "P"
            ]
        ],
        "gives": [
            [
                "fa_for_dti_qa",
                "P"
            ]
        ]
    },
    "OPERATION_58": {
        "string": "md\n    .flatten()\n    .collect(sort:true)\n    .set{md_for_dti_qa}",
        "origin": [
            [
                "md",
                "P"
            ]
        ],
        "gives": [
            [
                "md_for_dti_qa",
                "P"
            ]
        ]
    },
    "OPERATION_59": {
        "string": "rd\n    .flatten()\n    .collect(sort:true)\n    .set{rd_for_dti_qa}",
        "origin": [
            [
                "rd",
                "P"
            ]
        ],
        "gives": [
            [
                "rd_for_dti_qa",
                "P"
            ]
        ]
    },
    "OPERATION_60": {
        "string": "ad\n    .flatten()\n    .collect(sort:true)\n    .set{ad_for_dti_qa}",
        "origin": [
            [
                "ad",
                "P"
            ]
        ],
        "gives": [
            [
                "ad_for_dti_qa",
                "P"
            ]
        ]
    },
    "OPERATION_61": {
        "string": "residual\n    .flatten()\n    .collect(sort:true)\n    .set{residual_for_dti_qa}",
        "origin": [
            [
                "residual",
                "P"
            ]
        ],
        "gives": [
            [
                "residual_for_dti_qa",
                "P"
            ]
        ]
    },
    "OPERATION_62": {
        "string": "evecs\n    .flatten()\n    .collect(sort:true)\n    .set{evecs_for_dti_qa}",
        "origin": [
            [
                "evecs",
                "P"
            ]
        ],
        "gives": [
            [
                "evecs_for_dti_qa",
                "P"
            ]
        ]
    },
    "OPERATION_63": {
        "string": "afd_max, afd_sum, afd_total, nufo = fodf_metrics\n    .map{sid, afd_max, afd_sum, afd_total, nufo -> [tuple(afd_max),\n                              tuple(afd_sum),\n                              tuple(afd_total),\n                              tuple(nufo)]}\n    .separate(4)",
        "origin": [
            [
                "fodf_metrics",
                "P"
            ]
        ],
        "gives": [
            [
                "afd_max",
                "P"
            ],
            [
                "afd_sum",
                "P"
            ],
            [
                "afd_total",
                "P"
            ],
            [
                "nufo",
                "P"
            ]
        ]
    },
    "OPERATION_64": {
        "string": "afd_max\n    .flatten()\n    .collect(sort:true)\n    .set{afd_max_for_fodf_qa}",
        "origin": [
            [
                "afd_max",
                "P"
            ]
        ],
        "gives": [
            [
                "afd_max_for_fodf_qa",
                "P"
            ]
        ]
    },
    "OPERATION_65": {
        "string": "afd_sum\n    .flatten()\n    .collect(sort:true)\n    .set{afd_sum_for_fodf_qa}",
        "origin": [
            [
                "afd_sum",
                "P"
            ]
        ],
        "gives": [
            [
                "afd_sum_for_fodf_qa",
                "P"
            ]
        ]
    },
    "OPERATION_66": {
        "string": "afd_total\n    .flatten()\n    .collect(sort:true)\n    .set{afd_total_for_fodf_qa}",
        "origin": [
            [
                "afd_total",
                "P"
            ]
        ],
        "gives": [
            [
                "afd_total_for_fodf_qa",
                "P"
            ]
        ]
    },
    "OPERATION_67": {
        "string": "nufo\n    .flatten()\n    .collect(sort:true)\n    .set{nufo_for_fodf_qa}",
        "origin": [
            [
                "nufo",
                "P"
            ]
        ],
        "gives": [
            [
                "nufo_for_fodf_qa",
                "P"
            ]
        ]
    },
    "OPERATION_68": {
        "string": "tractograms\n    .combine(t1_warped_for_tracking, by:[0,1])\n    .groupTuple(sort:true)\n    .map{it -> it[2..-1]}\n    .set{tracking_t1}",
        "origin": [
            [
                "tractograms",
                "P"
            ]
        ],
        "gives": [
            [
                "tracking_t1",
                "P"
            ]
        ]
    },
    "OPERATION_69": {
        "string": "wm_maps\n  .mix(wm_masks)\n  .collect(sort:true)\n  .set{wm_for_seg}",
        "origin": [
            [
                "wm_maps",
                "P"
            ],
            [
                "wm_masks",
                "P"
            ]
        ],
        "gives": [
            [
                "wm_for_seg",
                "P"
            ]
        ]
    },
    "OPERATION_70": {
        "string": "gm_maps\n  .mix(gm_masks)\n  .collect(sort:true)\n  .set{gm_for_seg}",
        "origin": [
            [
                "gm_maps",
                "P"
            ],
            [
                "gm_masks",
                "P"
            ]
        ],
        "gives": [
            [
                "gm_for_seg",
                "P"
            ]
        ]
    },
    "OPERATION_71": {
        "string": "csf_maps\n  .mix(csf_masks)\n  .collect(sort:true)\n  .set{csf_for_seg}",
        "origin": [
            [
                "csf_maps",
                "P"
            ],
            [
                "csf_masks",
                "P"
            ]
        ],
        "gives": [
            [
                "csf_for_seg",
                "P"
            ]
        ]
    },
    "OPERATION_72": {
        "string": "all_raw_bval\n  .mix(all_bids_bval)\n  .collect(sort:true)\n  .set{all_bval}",
        "origin": [
            [
                "all_raw_bval",
                "P"
            ],
            [
                "all_bids_bval",
                "P"
            ]
        ],
        "gives": [
            [
                "all_bval",
                "P"
            ]
        ]
    },
    "OPERATION_73": {
        "string": "all_raw_json\n  .mix(all_bids_json)\n  .collect(sort:true)\n  .set{all_json}",
        "origin": [
            [
                "all_raw_json",
                "P"
            ],
            [
                "all_bids_json",
                "P"
            ]
        ],
        "gives": [
            [
                "all_json",
                "P"
            ]
        ]
    },
    "OPERATION_74": {
        "string": "all_raw_bvec\n  .mix(all_bids_bvec)\n  .collect(sort:true)\n  .set{all_bvec}",
        "origin": [
            [
                "all_raw_bvec",
                "P"
            ],
            [
                "all_bids_bvec",
                "P"
            ]
        ],
        "gives": [
            [
                "all_bvec",
                "P"
            ]
        ]
    },
    "OPERATION_75": {
        "string": "all_raw_t1\n  .mix(all_bids_t1)\n  .collect(sort:true)\n  .set{all_t1}",
        "origin": [
            [
                "all_raw_t1",
                "P"
            ],
            [
                "all_bids_t1",
                "P"
            ]
        ],
        "gives": [
            [
                "all_t1",
                "P"
            ]
        ]
    },
    "OPERATION_76": {
        "string": "all_raw_dwi\n  .mix(all_bids_dwi)\n  .collect(sort:true)\n  .set{all_dwi}",
        "origin": [
            [
                "all_raw_dwi",
                "P"
            ],
            [
                "all_bids_dwi",
                "P"
            ]
        ],
        "gives": [
            [
                "all_dwi",
                "P"
            ]
        ]
    },
    "OPERATION_77": {
        "string": "bundles_rbx\n    .flatMap{ sid, bundles -> bundles.collect{ [sid, it] } }\n    .map{sid, bundle -> [sid, bundle.getName().replace(sid, \"\").replace(\".trk\", \"\").replace(\"__\", \"\").replace(\"_L\", \"\").replace(\"_R\", \"\"), bundle]}\n    .groupTuple(by: [0,1])\n    .combine(anat_rbx, by:0)\n    .set{bundles_anat_for_screenshots}",
        "origin": [
            [
                "bundles_rbx",
                "P"
            ]
        ],
        "gives": [
            [
                "bundles_anat_for_screenshots",
                "P"
            ]
        ]
    },
    "OPERATION_78": {
        "string": "screenshots_for_report\n    .groupTuple(by: 1, sort:true)\n    .map{b_names, _, bundles -> [b_names.unique().join(\",\").replaceAll(\",\", \" \"), bundles].toList()}\n    .set{screenshots_for_qc_rbx}",
        "origin": [
            [
                "screenshots_for_report",
                "P"
            ]
        ],
        "gives": [
            [
                "screenshots_for_qc_rbx",
                "P"
            ]
        ]
    },
    "OPERATION_79": {
        "string": "matrice_atlas_for_combine.join(matrice_lesion_for_combine, by: [0,1])\n    .set{matrice_for_create_csv}",
        "origin": [
            [
                "matrice_atlas_for_combine",
                "P"
            ]
        ],
        "gives": [
            [
                "matrice_for_create_csv",
                "P"
            ]
        ]
    },
    "OPERATION_80": {
        "string": "matrice_for_create_csv.combine(labels)\n    .set{matrices_labels_for_create_csv}",
        "origin": [
            [
                "matrice_for_create_csv",
                "P"
            ],
            [
                "labels",
                "P"
            ]
        ],
        "gives": [
            [
                "matrices_labels_for_create_csv",
                "P"
            ]
        ]
    },
    "OPERATION_81": {
        "string": "stats_to_be_collected\n  .collect()\n  .set{stats_for_matrix}",
        "origin": [
            [
                "stats_to_be_collected",
                "P"
            ]
        ],
        "gives": [
            [
                "stats_for_matrix",
                "P"
            ]
        ]
    }
}
{
    "create_single_line_fasta": {
        "name_process": "create_single_line_fasta",
        "string_process": "\nprocess create_single_line_fasta {\n      \n                                                                                 \n      \n\n    input:\n      file prokka_protein_fasta\n\n    output:\n      file \"${prokka_protein_fasta.simpleName}.sl.faa\" into single_line_fasta\n\n    \"\"\"\n    perl -pe '/^>/ ? print \"\\n\" : chomp' $prokka_protein_fasta | tail -n +2 > ${prokka_protein_fasta.simpleName}.sl.faa\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    perl -pe '/^>/ ? print \"\\n\" : chomp' $prokka_protein_fasta | tail -n +2 > ${prokka_protein_fasta.simpleName}.sl.faa\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prokka_protein_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [
            "single_line_fasta"
        ],
        "nb_outputs": 1,
        "name_workflow": "J333__calculate-functional-trees",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "subset_gff": {
        "name_process": "subset_gff",
        "string_process": "\nprocess subset_gff {\n      \n                                                                                                                    \n                               \n      \n\n    input:\n      file prokka_gff\n    output:\n      file \"${prokka_gff.simpleName}_subset.gff\" into subset_gff\n\n    \"\"\"\n    cat $prokka_gff | \\\n      grep \"gene=$gene_name\" | \\\n      awk '\\$3 == \"CDS\" {print \\$0}' > ${prokka_gff.simpleName}_subset.gff\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    cat $prokka_gff | \\\n      grep \"gene=$gene_name\" | \\\n      awk '\\$3 == \"CDS\" {print \\$0}' > ${prokka_gff.simpleName}_subset.gff\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prokka_gff"
        ],
        "nb_inputs": 1,
        "outputs": [
            "subset_gff"
        ],
        "nb_outputs": 1,
        "name_workflow": "J333__calculate-functional-trees",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "subset_protein_fasta": {
        "name_process": "subset_protein_fasta",
        "string_process": "\nprocess subset_protein_fasta {\n      \n                                                                                                                      \n                                                                                                               \n                                                                                                                      \n                       \n      \n\n    input:\n      file single_line_fasta\n      file subset_gff\n    output:\n      file \"${prokka_protein_fasta.simpleName}_subset.faa\" into subset_prokka\n\n    \"\"\"\n    cat $subset_gff | \\\n      awk -F '[\\t;]' '\\$3 == \"CDS\" {print \\$9}' | \\\n      grep -oP '^ID=\\\\K.*' | \\\n      sed 's/\\$/ /' > gene_ids.txt\n    grep -F -A 1 -f gene_ids.txt $single_line_fasta | \\\n      sed '/^--\\$/d' > ${prokka_protein_fasta.simpleName}_subset.faa\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n    cat $subset_gff | \\\n      awk -F '[\\t;]' '\\$3 == \"CDS\" {print \\$9}' | \\\n      grep -oP '^ID=\\\\K.*' | \\\n      sed 's/\\$/ /' > gene_ids.txt\n    grep -F -A 1 -f gene_ids.txt $single_line_fasta | \\\n      sed '/^--\\$/d' > ${prokka_protein_fasta.simpleName}_subset.faa\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "single_line_fasta",
            "subset_gff"
        ],
        "nb_inputs": 2,
        "outputs": [
            "subset_prokka"
        ],
        "nb_outputs": 1,
        "name_workflow": "J333__calculate-functional-trees",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "download_sequences_from_uniprot": {
        "name_process": "download_sequences_from_uniprot",
        "string_process": "\nprocess download_sequences_from_uniprot {\n      \n                                                                                                                        \n      \n\n    publishDir 'results/'\n\n    input:\n      file taxa_of_interest\n    output:\n      file \"uniprot_seq.faa\" into subset_target_genes\n\n    \"\"\"\n    get_protein_sequences.py -i $taxa_of_interest -o uniprot_seq.faa -g $gene_name\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    get_protein_sequences.py -i $taxa_of_interest -o uniprot_seq.faa -g $gene_name\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "taxa_of_interest"
        ],
        "nb_inputs": 1,
        "outputs": [
            "subset_target_genes"
        ],
        "nb_outputs": 1,
        "name_workflow": "J333__calculate-functional-trees",
        "directive": [
            "publishDir 'results/'"
        ],
        "when": "",
        "stub": ""
    },
    "merge_protein_sequences": {
        "name_process": "merge_protein_sequences",
        "string_process": "\nprocess merge_protein_sequences {\n      \n                                                                                       \n      \n\n    input:\n      file subset_prokka\n      file subset_target_genes\n    output:\n      file \"merged_seqs.faa\" into merged_proteins\n\n    \"\"\"\n    cat $subset_prokka $subset_target_genes > merged_seqs.faa\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    cat $subset_prokka $subset_target_genes > merged_seqs.faa\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "subset_prokka",
            "subset_target_genes"
        ],
        "nb_inputs": 2,
        "outputs": [
            "merged_proteins"
        ],
        "nb_outputs": 1,
        "name_workflow": "J333__calculate-functional-trees",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "remove_duplicates": {
        "name_process": "remove_duplicates",
        "string_process": "\nprocess remove_duplicates {\n      \n                                                                                               \n      \n\n    input:\n      file merged_proteins \n    output:\n      file \"${merged_proteins.simpleName}.nodup.faa\" into merged_proteins_no_dup\n\n    \"\"\"\n    cd-hit-dup -i $merged_proteins -o ${merged_proteins.simpleName}.nodup.faa\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    cd-hit-dup -i $merged_proteins -o ${merged_proteins.simpleName}.nodup.faa\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "merged_proteins"
        ],
        "nb_inputs": 1,
        "outputs": [
            "merged_proteins_no_dup"
        ],
        "nb_outputs": 1,
        "name_workflow": "J333__calculate-functional-trees",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "run_msa": {
        "name_process": "run_msa",
        "string_process": "\nprocess run_msa {\n      \n                                                                                                    \n      \n\n    input:\n      file merged_proteins_no_dup\n    output:\n      file \"${merged_proteins_no_dup.simpleName}.msa.faa\" into msa\n\n    \"\"\"\n    mafft --auto $merged_proteins_no_dup > ${merged_proteins_no_dup.simpleName}.msa.faa\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    mafft --auto $merged_proteins_no_dup > ${merged_proteins_no_dup.simpleName}.msa.faa\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MAFFT"
        ],
        "tools_url": [
            "https://bio.tools/MAFFT"
        ],
        "tools_dico": [
            {
                "name": "MAFFT",
                "uri": "https://bio.tools/MAFFT",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.",
                "homepage": "http://mafft.cbrc.jp/alignment/server/index.html"
            }
        ],
        "inputs": [
            "merged_proteins_no_dup"
        ],
        "nb_inputs": 1,
        "outputs": [
            "msa"
        ],
        "nb_outputs": 1,
        "name_workflow": "J333__calculate-functional-trees",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "fasta_to_phylip": {
        "name_process": "fasta_to_phylip",
        "string_process": "\nprocess fasta_to_phylip {\n      \n                                                   \n      \n\n    input:\n      file msa\n    output:\n      file \"${msa.simpleName}.phylip\" into phylip\n\n    \"\"\"\n    fasta_to_phylip.py $msa ${msa.simpleName}.phylip\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    fasta_to_phylip.py $msa ${msa.simpleName}.phylip\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "msa"
        ],
        "nb_inputs": 1,
        "outputs": [
            "phylip"
        ],
        "nb_outputs": 1,
        "name_workflow": "J333__calculate-functional-trees",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "remove_special_chars_from_phylip": {
        "name_process": "remove_special_chars_from_phylip",
        "string_process": "\nprocess remove_special_chars_from_phylip {\n      \n                                                                       \n      \n\n    input:\n      file phylip\n    output:\n      file \"${phylip.simpleName}.clean.phylip\" into phylip_clean\n\n    \"\"\"\n    remove_special_characters_from_phylip.py $phylip > ${phylip.simpleName}.clean.phylip\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    remove_special_characters_from_phylip.py $phylip > ${phylip.simpleName}.clean.phylip\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phylip"
        ],
        "nb_inputs": 1,
        "outputs": [
            "phylip_clean"
        ],
        "nb_outputs": 1,
        "name_workflow": "J333__calculate-functional-trees",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "run_raxml": {
        "name_process": "run_raxml",
        "string_process": "\nprocess run_raxml {\n      \n                                                              \n      \n\n    cpus 28\n\n    publishDir 'results/'\n\n    input:\n      file phylip_clean\n    output:\n      file \"RAxML_bestTree.${gene_name}\" into raxml_tree\n\n    \"\"\"\n    raxmlHPC-PTHREADS-SSE3 -T ${task.cpus} -p $raxml_randomseed -s $phylip_clean -m $raxml_model -n $gene_name \\\n      -x $raxml_randomseed -f $raxml_algorithm -N $raxml_runs\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    raxmlHPC-PTHREADS-SSE3 -T ${task.cpus} -p $raxml_randomseed -s $phylip_clean -m $raxml_model -n $gene_name \\\n      -x $raxml_randomseed -f $raxml_algorithm -N $raxml_runs\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phylip_clean"
        ],
        "nb_inputs": 1,
        "outputs": [
            "raxml_tree"
        ],
        "nb_outputs": 1,
        "name_workflow": "J333__calculate-functional-trees",
        "directive": [
            "cpus 28",
            "publishDir 'results/'"
        ],
        "when": "",
        "stub": ""
    },
    "plot_tree": {
        "name_process": "plot_tree",
        "string_process": "\nprocess plot_tree {\n      \n                                                                                  \n      \n\n    publishDir 'results/'\n\n    input:\n      file raxml_tree\n      file kallisto_matrix\n    output:\n      file \"tree_${gene_name}.pdf\" into tree_plot\n\n    \"\"\"\n    plot_tree.R -t $raxml_tree -k $kallisto_matrix -s ${params.heatmap_scale} -o tree_${gene_name}.pdf\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    plot_tree.R -t $raxml_tree -k $kallisto_matrix -s ${params.heatmap_scale} -o tree_${gene_name}.pdf\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "raxml_tree",
            "kallisto_matrix"
        ],
        "nb_inputs": 2,
        "outputs": [
            "tree_plot"
        ],
        "nb_outputs": 1,
        "name_workflow": "J333__calculate-functional-trees",
        "directive": [
            "publishDir 'results/'"
        ],
        "when": "",
        "stub": ""
    }
}
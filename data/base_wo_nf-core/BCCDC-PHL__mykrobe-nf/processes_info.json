{
    "fastp": {
        "name_process": "fastp",
        "string_process": "process fastp {\n\n  tag { sample_id }\n\n  publishDir params.versioned_outdir ? \"${params.outdir}/${sample_id}/${params.pipeline_short_name}-v${params.pipeline_minor_version}-output\" : \"${params.outdir}/${sample_id}\", pattern: \"${sample_id}_fastp.{json,csv}\", mode: 'copy'\n\n  input:\n  tuple val(sample_id), path(reads_1), path(reads_2)\n\n  output:\n  tuple val(sample_id), path(\"${sample_id}_fastp.json\"), emit: fastp_json\n  tuple val(sample_id), path(\"${sample_id}_fastp.csv\"), emit: fastp_csv\n  tuple val(sample_id), path(\"${sample_id}_trimmed_R1.fastq.gz\"), path(\"${sample_id}_trimmed_R2.fastq.gz\"), emit: reads\n\n  script:\n  \"\"\"\n  fastp -i ${reads_1} -I ${reads_2} -o ${sample_id}_trimmed_R1.fastq.gz -O ${sample_id}_trimmed_R2.fastq.gz\n  mv fastp.json ${sample_id}_fastp.json\n  fastp_json_to_csv.py -s ${sample_id} ${sample_id}_fastp.json > ${sample_id}_fastp.csv\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  fastp -i ${reads_1} -I ${reads_2} -o ${sample_id}_trimmed_R1.fastq.gz -O ${sample_id}_trimmed_R2.fastq.gz\n  mv fastp.json ${sample_id}_fastp.json\n  fastp_json_to_csv.py -s ${sample_id} ${sample_id}_fastp.json > ${sample_id}_fastp.csv\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "sample_id",
            "reads_1",
            "reads_2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__mykrobe-nf",
        "directive": [
            "tag { sample_id }",
            "publishDir params.versioned_outdir ? \"${params.outdir}/${sample_id}/${params.pipeline_short_name}-v${params.pipeline_minor_version}-output\" : \"${params.outdir}/${sample_id}\", pattern: \"${sample_id}_fastp.{json,csv}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mykrobe_predict": {
        "name_process": "mykrobe_predict",
        "string_process": "\nprocess mykrobe_predict {\n\n  tag { sample_id }\n\n  publishDir params.versioned_outdir ? \"${params.outdir}/${sample_id}/${params.pipeline_short_name}-v${params.pipeline_minor_version}-output\" : \"${params.outdir}/${sample_id}\", mode: 'copy', pattern: \"${sample_id}_mykrobe.{csv,json}\"\n\n  input:\n    tuple val(sample_id), path(reads_1), path(reads_2)\n\n  output:\n    tuple val(sample_id), path(\"${sample_id}_mykrobe.csv\"), emit: csv\n    tuple val(sample_id), path(\"${sample_id}_mykrobe.json\"), emit: json\n\n  script:\n    \"\"\"\n    mykrobe predict --threads ${task.cpus} --sample ${sample_id} --species ${params.species} -i ${reads_1} ${reads_2} --format json_and_csv --output ${sample_id}_mykrobe\n    mv ${sample_id}_mykrobe.csv ${sample_id}_mykrobe_unformatted.csv\n    format_mykrobe_csv.py ${sample_id}_mykrobe_unformatted.csv > ${sample_id}_mykrobe.csv\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    mykrobe predict --threads ${task.cpus} --sample ${sample_id} --species ${params.species} -i ${reads_1} ${reads_2} --format json_and_csv --output ${sample_id}_mykrobe\n    mv ${sample_id}_mykrobe.csv ${sample_id}_mykrobe_unformatted.csv\n    format_mykrobe_csv.py ${sample_id}_mykrobe_unformatted.csv > ${sample_id}_mykrobe.csv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Mykrobe"
        ],
        "tools_url": [
            "https://bio.tools/Mykrobe"
        ],
        "tools_dico": [
            {
                "name": "Mykrobe",
                "uri": "https://bio.tools/Mykrobe",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Antibiotic resistance prediction for Mycobacterium tuberculosis from genome sequence data with Mykrobe.\n\nAntibiotic resistance prediction in minutes.\n\nTable of Contents generated with DocToc.\n\nAMR prediction (Mykrobe predictor).\n\nBefore attempting to install with bioconda, please ensure you have your channels set up as specified in the documentation. If you don't, you may run into issues with an older version of mykrobe being installed",
                "homepage": "https://github.com/mykrobe-tools/mykrobe"
            }
        ],
        "inputs": [
            "sample_id",
            "reads_1",
            "reads_2"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "BCCDC-PHL__mykrobe-nf",
        "directive": [
            "tag { sample_id }",
            "publishDir params.versioned_outdir ? \"${params.outdir}/${sample_id}/${params.pipeline_short_name}-v${params.pipeline_minor_version}-output\" : \"${params.outdir}/${sample_id}\", mode: 'copy', pattern: \"${sample_id}_mykrobe.{csv,json}\""
        ],
        "when": "",
        "stub": ""
    }
}
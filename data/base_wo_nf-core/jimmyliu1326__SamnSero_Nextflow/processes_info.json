{
    "sistr": {
        "name_process": "sistr",
        "string_process": "\nprocess sistr {\n    tag \"SISTR serotyping for ${assembly.baseName}\"\n    label \"process_low\"\n\n    input:\n        tuple val(sample_id), path(assembly)\n    output:\n        tuple val(sample_id), file(\"${assembly.simpleName}.csv\")\n    shell:\n        \"\"\"\n        sistr -i ${assembly} ${assembly.simpleName} -o ${assembly.simpleName}.csv -t ${task.cpus} -f csv --qc\n        \"\"\"   \n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        sistr -i ${assembly} ${assembly.simpleName} -o ${assembly.simpleName}.csv -t ${task.cpus} -f csv --qc\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SISTR"
        ],
        "tools_url": [
            "https://bio.tools/SISTR"
        ],
        "tools_dico": [
            {
                "name": "SISTR",
                "uri": "https://bio.tools/SISTR",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Zoology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Metazoa"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animal biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animal"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animals"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3840",
                                    "term": "Multilocus sequence typing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3840",
                                    "term": "MLST"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Salmonella In Silico Typing Resource (SISTR) is an open-source and freely available web application for rapid in silico typing and serovar prediction from Salmonella genome assemblies using cgMLST and O and H antigen gene searching.",
                "homepage": "https://lfz.corefacility.ca/sistr-app/"
            }
        ],
        "inputs": [
            "sample_id",
            "assembly"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "jimmyliu1326__SamnSero_Nextflow",
        "directive": [
            "tag \"SISTR serotyping for ${assembly.baseName}\"",
            "label \"process_low\""
        ],
        "when": "",
        "stub": ""
    },
    "aggregate_sistr": {
        "name_process": "aggregate_sistr",
        "string_process": "\nprocess aggregate_sistr {\n    tag \"Aggregating serotyping results\"\n    label \"process_low\"\n\n    input:\n        path(sistr_res)\n    output:\n        file(\"sistr_res_aggregate.csv\")\n    shell:\n        \"\"\"\n        awk 'NR == 1 || FNR > 1' *.csv > sistr_res_aggregate.csv\n        sed -i 's/,genome,/,id,/g' sistr_res_aggregate.csv\n        \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        awk 'NR == 1 || FNR > 1' *.csv > sistr_res_aggregate.csv\n        sed -i 's/,genome,/,id,/g' sistr_res_aggregate.csv\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sistr_res"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jimmyliu1326__SamnSero_Nextflow",
        "directive": [
            "tag \"Aggregating serotyping results\"",
            "label \"process_low\""
        ],
        "when": "",
        "stub": ""
    },
    "medaka": {
        "name_process": "medaka",
        "string_process": "\nprocess medaka {\n    tag \"Assembly polishing for ${reads.simpleName}\"\n    label \"process_medium\"\n    publishDir \"$params.outdir\"+\"/assembly\", mode: \"copy\"\n\n    input:\n        tuple val(sample_id), path(assembly), path(reads)\n    output:\n        tuple val(sample_id), file(\"${reads.simpleName}.fasta\")\n    shell:\n        \"\"\"\n        medaka_consensus -i ${reads} -d ${assembly} -o . -t ${task.cpus}\n        mv consensus.fasta ${reads.simpleName}.fasta\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        medaka_consensus -i ${reads} -d ${assembly} -o . -t ${task.cpus}\n        mv consensus.fasta ${reads.simpleName}.fasta\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "assembly",
            "reads"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "jimmyliu1326__SamnSero_Nextflow",
        "directive": [
            "tag \"Assembly polishing for ${reads.simpleName}\"",
            "label \"process_medium\"",
            "publishDir \"$params.outdir\"+\"/assembly\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "medaka_gpu": {
        "name_process": "medaka_gpu",
        "string_process": "\nprocess medaka_gpu {\n    tag \"Assembly polishing for ${reads.simpleName}\"\n    label \"process_medium\"\n    maxForks 1\n    publishDir \"$params.outdir\"+\"/assembly\", mode: \"copy\"\n\n    input:\n        tuple val(sample_id), path(assembly), path(reads)\n    output:\n        tuple val(sample_id), file(\"${reads.simpleName}.fasta\")\n    shell:\n        \"\"\"\n        medaka_consensus -i ${reads} -d ${assembly} -o . -t ${task.cpus}\n        mv consensus.fasta ${reads.simpleName}.fasta\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        medaka_consensus -i ${reads} -d ${assembly} -o . -t ${task.cpus}\n        mv consensus.fasta ${reads.simpleName}.fasta\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "assembly",
            "reads"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "jimmyliu1326__SamnSero_Nextflow",
        "directive": [
            "tag \"Assembly polishing for ${reads.simpleName}\"",
            "label \"process_medium\"",
            "maxForks 1",
            "publishDir \"$params.outdir\"+\"/assembly\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "combine": {
        "name_process": "combine",
        "string_process": "\nprocess combine {\n    tag \"Combining Fastq files for ${sample_id}\"\n    label \"process_low\"\n\n    input:\n        tuple val(sample_id), path(reads)\n    output:\n        tuple val(sample_id), file(\"${sample_id}.{fastq,fastq.gz}\")\n    shell:\n        \"\"\"\n        sample=\\$(ls ${reads} | head -n 1)\n        if [[ \\${sample##*.} == \"gz\" ]]; then\n            cat ${reads}/*.fastq.gz > ${sample_id}.fastq.gz\n        else\n            cat ${reads}/*.fastq > ${sample_id}.fastq\n        fi\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        sample=\\$(ls ${reads} | head -n 1)\n        if [[ \\${sample##*.} == \"gz\" ]]; then\n            cat ${reads}/*.fastq.gz > ${sample_id}.fastq.gz\n        else\n            cat ${reads}/*.fastq > ${sample_id}.fastq\n        fi\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "jimmyliu1326__SamnSero_Nextflow",
        "directive": [
            "tag \"Combining Fastq files for ${sample_id}\"",
            "label \"process_low\""
        ],
        "when": "",
        "stub": ""
    },
    "porechop": {
        "name_process": "porechop",
        "string_process": "\nprocess porechop {\n    tag \"Adaptor trimming on ${reads.simpleName}\"\n    label \"process_high\"\n\n    input:\n        path(reads)\n    output:\n        tuple val(sample_id), file(\"${reads.simpleName}_trimmed.fastq\")\n    shell:\n        \"\"\"\n        porechop -t ${task.cpus} -i ${reads} -o ${reads.simpleName}_trimmed.fastq\n        \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        porechop -t ${task.cpus} -i ${reads} -o ${reads.simpleName}_trimmed.fastq\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reads"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "jimmyliu1326__SamnSero_Nextflow",
        "directive": [
            "tag \"Adaptor trimming on ${reads.simpleName}\"",
            "label \"process_high\""
        ],
        "when": "",
        "stub": ""
    },
    "flye": {
        "name_process": "flye",
        "string_process": "\nprocess flye {\n    tag \"Flye assembly on ${reads.simpleName}\"\n    label \"process_medium\"\n\n    input:\n        tuple val(sample_id), path(reads)\n    output:\n        tuple val(sample_id), file(\"flye/${reads.simpleName}.fasta\")\n    shell:\n        \"\"\"\n        flye --nano-raw ${reads} -t ${task.cpus} -i 2 -g 4.8m --out-dir flye\n        mv flye/assembly.fasta flye/${reads.simpleName}.fasta\n        \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        flye --nano-raw ${reads} -t ${task.cpus} -i 2 -g 4.8m --out-dir flye\n        mv flye/assembly.fasta flye/${reads.simpleName}.fasta\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "jimmyliu1326__SamnSero_Nextflow",
        "directive": [
            "tag \"Flye assembly on ${reads.simpleName}\"",
            "label \"process_medium\""
        ],
        "when": "",
        "stub": ""
    },
    "dragonflye": {
        "name_process": "dragonflye",
        "string_process": "\nprocess dragonflye {\n    tag \"DragonFlye assembly on ${reads.simpleName}\"\n    label \"process_medium\"\n\n    input:\n        tuple val(sample_id), path(reads)\n    output:\n        tuple val(sample_id), file(\"dragonflye/${reads.simpleName}.fasta\")\n    shell:\n        \"\"\"\n        dragonflye --reads ${reads} --cpus ${task.cpus} --gsize 4.8m --outdir dragonflye ${nanohq}\n        mv dragonflye/contigs.fa dragonflye/${reads.simpleName}.fasta\n        \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        dragonflye --reads ${reads} --cpus ${task.cpus} --gsize 4.8m --outdir dragonflye ${nanohq}\n        mv dragonflye/contigs.fa dragonflye/${reads.simpleName}.fasta\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "jimmyliu1326__SamnSero_Nextflow",
        "directive": [
            "tag \"DragonFlye assembly on ${reads.simpleName}\"",
            "label \"process_medium\""
        ],
        "when": "",
        "stub": ""
    }
}
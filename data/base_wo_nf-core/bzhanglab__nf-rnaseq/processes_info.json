{
    "genome_index": {
        "name_process": "genome_index",
        "string_process": "\nprocess genome_index {\n  container \"${params.container.bwa}\" \n  publishDir  params.genome_basedir, mode: 'move'\n  label 'r5_2xlarge'\n  cpus 8\n  memory '60 GB'\n\n  input:\n  val(ref_prefix)\n  path('ref.fa')\n   \n  output:\n  path(\"${ref_prefix}.*\")\n  \n  \"\"\"\n  mv ref.fa ${ref_prefix}\n  bwa index ${ref_prefix}\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n  mv ref.fa ${ref_prefix}\n  bwa index ${ref_prefix}\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "ref_prefix"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "container \"${params.container.bwa}\"",
            "publishDir params.genome_basedir, mode: 'move'",
            "label 'r5_2xlarge'",
            "cpus 8",
            "memory '60 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "generate_id_files_gdc": {
        "name_process": "generate_id_files_gdc",
        "string_process": "\nprocess generate_id_files_gdc {\n   container \"${params.container.r_tidyverse}\"\n   label 'r5_2xlarge'\n\n   input:\n     path('catalog.txt')\n     path('case_id.txt')\n     val start\n     val end\n\n   output:\n     path 'case_*.tsv'\n\n   script:\n   \"\"\"\n   #!/usr/bin/env Rscript\n   library(tidyverse)\n   \n   # if dup_id is 0,  there is no duplication\n   get_file_info <- function(catalog_rnaseq, case, st, r1_name, dup_id,\n                             matched_case, case_aliquot){\n      if (dup_id == 0) {\n        new_name <- paste0(case, \"_\", st)\n        cur_aliquot <- case_aliquot[1, \"aliquot\"]\n      } else {\n        new_name <- paste0(case, \"_\", st, \"_\", dup_id)\n        cur_aliquot <- case_aliquot[dup_id, \"aliquot\"] %>% pull(1)\n      }\n      r1_file_name <- catalog_rnaseq %>%\n                  filter(.data[[names(.)[[1]]]] == r1_name) %>%\n                  filter(.data[[names(.)[[6]]]] == cur_aliquot) %>%\n                  select(\"filename\") %>%\n                  pull(1)\n      r1_uuid <- catalog_rnaseq %>%\n                  filter(.data[[names(.)[[1]]]] == r1_name) %>%\n                  filter(.data[[names(.)[[6]]]] == cur_aliquot) %>%\n                  select(\"UUID\") %>%\n                  pull(1)\n      r1_md5 <- catalog_rnaseq %>%\n                  filter(.data[[names(.)[[1]]]] == r1_name) %>%\n                  filter(.data[[names(.)[[6]]]] == cur_aliquot) %>%\n                  select(\"MD5\") %>%\n                  pull(1)\n      r2_name <- matched_case %>%\n                  filter(.data[[names(.)[[3]]]] == \"R2\") %>%\n                  filter(.data[[names(.)[[4]]]] == st) %>%\n                  pull(1) %>% \n                  unique()\n      r2_file_name <- catalog_rnaseq %>%\n                    filter(.data[[names(.)[[1]]]] == r2_name) %>%\n                    filter(.data[[names(.)[[6]]]] == cur_aliquot) %>%\n                    select(\"filename\") %>%\n                    pull(1)\n      r2_uuid <- catalog_rnaseq %>%\n                  filter(.data[[names(.)[[1]]]] == r2_name) %>%\n                  filter(.data[[names(.)[[6]]]] == cur_aliquot) %>%\n                  select(\"UUID\") %>%\n                  pull(1)\n      r2_md5 <- catalog_rnaseq %>%\n                  filter(.data[[names(.)[[1]]]] == r2_name) %>%\n                  filter(.data[[names(.)[[6]]]] == cur_aliquot) %>%\n                  select(\"MD5\") %>%\n                  pull(1)\n      return(tibble(case=new_name, R1_filename=r1_file_name, R1_uuid=r1_uuid,\n                  R1_md5=r1_md5, R2_filename=r2_file_name,\n                  R2_uuid=r2_uuid, R2_md5=r2_md5))\n   }\n\n   case_id <- read_tsv(\"case_id.txt\") %>%\n              pull(1)\n   case_start <- ifelse($start == -1, 1, $start)\n   case_end <- ifelse($end == -1, length(case_id), $end)\n   stopifnot(case_start >= 1, case_start <= length(case_id))\n   stopifnot(case_end >= 1, case_end <= length(case_id))\n   stopifnot(case_start <= case_end)\n\n   case_id <- case_id[case_start:case_end]\n\n   catalog <- read_tsv(\"catalog.txt\")\n   catalog_rnaseq <- catalog %>% \n                     filter(case %in% case_id) %>%\n                     select(sample_name = 1, everything()) %>%\n                     filter(experimental_strategy == \"RNA-Seq\") %>%\n                     filter(data_format == \"FASTQ\") %>%\n                     {\n                        if(\"aliquot_annotation\" %in% names(.)) filter(., is.na(aliquot_annotation)) else .\n                     }\n\n\n   sample_names <-  catalog_rnaseq %>% pull(1)\n   all_case_tbl <- tibble(case=character(),\n                          R1_filename=character(),\n                          R1_uuid=character(),\n                          R1_md5=character(),\n                          R2_filename=character(),\n                          R2_uuid=character(),\n                          R2_md5=character()) \n   for (case in case_id) {\n      tmp <- str_match(sample_names, paste0(\"(\",case,\")\\\\\\\\.RNA-Seq\\\\\\\\.(R[1-2]).([^\\\\\\\\.]+)(.*)\"))\n      matched_case <- as_tibble(tmp, .name_repair = \"unique\") %>% \n                    filter(.data[[names(.)[[5]]]] == \"\") %>%\n                    drop_na()\n      # e.g. \"A\", \"T\"\n      sample_type <- unique(matched_case[[4]])\n      for (st in sample_type){\n          r1_name <- matched_case %>% \n                     filter(.data[[names(.)[[3]]]] == \"R1\") %>%\n                     filter(.data[[names(.)[[4]]]] == st)  %>%\n                     pull(1)\n          case_aliquot <- catalog_rnaseq %>%\n                          select(sample_name, case, aliquot) %>%\n                          filter(sample_name == unique(r1_name)) %>%\n                          arrange(aliquot)\n          if (length(r1_name) > 1) {\n            # if allow duplicates, \n            # give new names ordered by aliquot id (alphabetically)\n            # e.g. C3N-01525_T_1, C3N-01525_T_2, ...\n            # with aliquot ID:  CPT95870043, CPT95870046, ...\n            if(\"${params.allow_dup}\" == \"false\") {\n              print(\"error!!! duplicates found!!! \")\n              print(paste0(length(r1_name), \" duplicates for \", unique(r1_name), \" found\"))\n              quit(status=1)\n            } else {\n              # create multiple r1_name, one for each aliquot id\n              temp_info <- tibble(case=character(), R1_filename=character(),\n                            R1_uuid=character(), R1_md5=character(),\n                            R2_filename=character(),\n                            R2_uuid=character(), R2_md5=character())\n              for (i in seq_len(nrow(case_aliquot))){\n                 res <- get_file_info(catalog_rnaseq, case, st, \n                                      unique(r1_name), i,\n                                      matched_case, case_aliquot) \n                 temp_info <- temp_info %>%\n                              bind_rows(res)    \n              }\n            }\n          }\n          else{  # no duplication\n            temp_info <- get_file_info(catalog_rnaseq, case, st, unique(r1_name),\n                                        0, matched_case, case_aliquot)  \n          }\n          all_case_tbl <- all_case_tbl %>%\n                          bind_rows(temp_info)\n          \n      }\n   }\n\n   # write_tsv(all_case_tbl, \"all_case_info.tsv\")\n   # case_id   r1_uuid    r2_uuid\n   for (i in seq(1, nrow(all_case_tbl))) {\n      write_tsv(all_case_tbl[i, c(\"case\", \"R1_uuid\", \"R1_filename\", \"R1_md5\", \n                \"R2_uuid\", \"R2_filename\", \"R2_md5\")], paste0('case_', i, '.tsv'),\n                col_names = FALSE)\n   }\n   \"\"\"\n}",
        "nb_lignes_process": 155,
        "string_script": "   \"\"\"\n   #!/usr/bin/env Rscript\n   library(tidyverse)\n   \n   # if dup_id is 0,  there is no duplication\n   get_file_info <- function(catalog_rnaseq, case, st, r1_name, dup_id,\n                             matched_case, case_aliquot){\n      if (dup_id == 0) {\n        new_name <- paste0(case, \"_\", st)\n        cur_aliquot <- case_aliquot[1, \"aliquot\"]\n      } else {\n        new_name <- paste0(case, \"_\", st, \"_\", dup_id)\n        cur_aliquot <- case_aliquot[dup_id, \"aliquot\"] %>% pull(1)\n      }\n      r1_file_name <- catalog_rnaseq %>%\n                  filter(.data[[names(.)[[1]]]] == r1_name) %>%\n                  filter(.data[[names(.)[[6]]]] == cur_aliquot) %>%\n                  select(\"filename\") %>%\n                  pull(1)\n      r1_uuid <- catalog_rnaseq %>%\n                  filter(.data[[names(.)[[1]]]] == r1_name) %>%\n                  filter(.data[[names(.)[[6]]]] == cur_aliquot) %>%\n                  select(\"UUID\") %>%\n                  pull(1)\n      r1_md5 <- catalog_rnaseq %>%\n                  filter(.data[[names(.)[[1]]]] == r1_name) %>%\n                  filter(.data[[names(.)[[6]]]] == cur_aliquot) %>%\n                  select(\"MD5\") %>%\n                  pull(1)\n      r2_name <- matched_case %>%\n                  filter(.data[[names(.)[[3]]]] == \"R2\") %>%\n                  filter(.data[[names(.)[[4]]]] == st) %>%\n                  pull(1) %>% \n                  unique()\n      r2_file_name <- catalog_rnaseq %>%\n                    filter(.data[[names(.)[[1]]]] == r2_name) %>%\n                    filter(.data[[names(.)[[6]]]] == cur_aliquot) %>%\n                    select(\"filename\") %>%\n                    pull(1)\n      r2_uuid <- catalog_rnaseq %>%\n                  filter(.data[[names(.)[[1]]]] == r2_name) %>%\n                  filter(.data[[names(.)[[6]]]] == cur_aliquot) %>%\n                  select(\"UUID\") %>%\n                  pull(1)\n      r2_md5 <- catalog_rnaseq %>%\n                  filter(.data[[names(.)[[1]]]] == r2_name) %>%\n                  filter(.data[[names(.)[[6]]]] == cur_aliquot) %>%\n                  select(\"MD5\") %>%\n                  pull(1)\n      return(tibble(case=new_name, R1_filename=r1_file_name, R1_uuid=r1_uuid,\n                  R1_md5=r1_md5, R2_filename=r2_file_name,\n                  R2_uuid=r2_uuid, R2_md5=r2_md5))\n   }\n\n   case_id <- read_tsv(\"case_id.txt\") %>%\n              pull(1)\n   case_start <- ifelse($start == -1, 1, $start)\n   case_end <- ifelse($end == -1, length(case_id), $end)\n   stopifnot(case_start >= 1, case_start <= length(case_id))\n   stopifnot(case_end >= 1, case_end <= length(case_id))\n   stopifnot(case_start <= case_end)\n\n   case_id <- case_id[case_start:case_end]\n\n   catalog <- read_tsv(\"catalog.txt\")\n   catalog_rnaseq <- catalog %>% \n                     filter(case %in% case_id) %>%\n                     select(sample_name = 1, everything()) %>%\n                     filter(experimental_strategy == \"RNA-Seq\") %>%\n                     filter(data_format == \"FASTQ\") %>%\n                     {\n                        if(\"aliquot_annotation\" %in% names(.)) filter(., is.na(aliquot_annotation)) else .\n                     }\n\n\n   sample_names <-  catalog_rnaseq %>% pull(1)\n   all_case_tbl <- tibble(case=character(),\n                          R1_filename=character(),\n                          R1_uuid=character(),\n                          R1_md5=character(),\n                          R2_filename=character(),\n                          R2_uuid=character(),\n                          R2_md5=character()) \n   for (case in case_id) {\n      tmp <- str_match(sample_names, paste0(\"(\",case,\")\\\\\\\\.RNA-Seq\\\\\\\\.(R[1-2]).([^\\\\\\\\.]+)(.*)\"))\n      matched_case <- as_tibble(tmp, .name_repair = \"unique\") %>% \n                    filter(.data[[names(.)[[5]]]] == \"\") %>%\n                    drop_na()\n      # e.g. \"A\", \"T\"\n      sample_type <- unique(matched_case[[4]])\n      for (st in sample_type){\n          r1_name <- matched_case %>% \n                     filter(.data[[names(.)[[3]]]] == \"R1\") %>%\n                     filter(.data[[names(.)[[4]]]] == st)  %>%\n                     pull(1)\n          case_aliquot <- catalog_rnaseq %>%\n                          select(sample_name, case, aliquot) %>%\n                          filter(sample_name == unique(r1_name)) %>%\n                          arrange(aliquot)\n          if (length(r1_name) > 1) {\n            # if allow duplicates, \n            # give new names ordered by aliquot id (alphabetically)\n            # e.g. C3N-01525_T_1, C3N-01525_T_2, ...\n            # with aliquot ID:  CPT95870043, CPT95870046, ...\n            if(\"${params.allow_dup}\" == \"false\") {\n              print(\"error!!! duplicates found!!! \")\n              print(paste0(length(r1_name), \" duplicates for \", unique(r1_name), \" found\"))\n              quit(status=1)\n            } else {\n              # create multiple r1_name, one for each aliquot id\n              temp_info <- tibble(case=character(), R1_filename=character(),\n                            R1_uuid=character(), R1_md5=character(),\n                            R2_filename=character(),\n                            R2_uuid=character(), R2_md5=character())\n              for (i in seq_len(nrow(case_aliquot))){\n                 res <- get_file_info(catalog_rnaseq, case, st, \n                                      unique(r1_name), i,\n                                      matched_case, case_aliquot) \n                 temp_info <- temp_info %>%\n                              bind_rows(res)    \n              }\n            }\n          }\n          else{  # no duplication\n            temp_info <- get_file_info(catalog_rnaseq, case, st, unique(r1_name),\n                                        0, matched_case, case_aliquot)  \n          }\n          all_case_tbl <- all_case_tbl %>%\n                          bind_rows(temp_info)\n          \n      }\n   }\n\n   # write_tsv(all_case_tbl, \"all_case_info.tsv\")\n   # case_id   r1_uuid    r2_uuid\n   for (i in seq(1, nrow(all_case_tbl))) {\n      write_tsv(all_case_tbl[i, c(\"case\", \"R1_uuid\", \"R1_filename\", \"R1_md5\", \n                \"R2_uuid\", \"R2_filename\", \"R2_md5\")], paste0('case_', i, '.tsv'),\n                col_names = FALSE)\n   }\n   \"\"\"",
        "nb_lignes_script": 140,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "start",
            "end"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "container \"${params.container.r_tidyverse}\"",
            "label 'r5_2xlarge'"
        ],
        "when": "",
        "stub": ""
    },
    "generate_id_files": {
        "name_process": "generate_id_files",
        "string_process": "\nprocess generate_id_files {\n   container \"${params.container.r_tidyverse}\"\n   label 'r5_2xlarge'\n\n   input:\n     path('catalog.txt')\n     val start\n     val end\n\n   output:\n     path 'case_*.tsv'\n\n   script:\n   \"\"\"\n   #!/usr/bin/env Rscript\n   library(tidyverse)\n   \n   catalog <- read_tsv(\"catalog.txt\")\n   case_id <- catalog %>% pull(1)\n   case_start <- ifelse($start == -1, 1, $start)\n   case_end <- ifelse($end == -1, length(case_id), $end)\n   stopifnot(case_start >= 1, case_start <= length(case_id))\n   stopifnot(case_end >= 1, case_end <= length(case_id))\n   stopifnot(case_start <= case_end)\n\n   case_id <- case_id[case_start:case_end]\n   catalog_rnaseq <- catalog %>% \n                     filter(sample_name %in% case_id) \n\n   # case_id   R1_path    R2_path\n   for (i in seq(1, nrow(catalog_rnaseq))) {\n      write_tsv(catalog_rnaseq[i,], paste0('case_', i, '.tsv'),\n                col_names = FALSE)\n   }\n   \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "   \"\"\"\n   #!/usr/bin/env Rscript\n   library(tidyverse)\n   \n   catalog <- read_tsv(\"catalog.txt\")\n   case_id <- catalog %>% pull(1)\n   case_start <- ifelse($start == -1, 1, $start)\n   case_end <- ifelse($end == -1, length(case_id), $end)\n   stopifnot(case_start >= 1, case_start <= length(case_id))\n   stopifnot(case_end >= 1, case_end <= length(case_id))\n   stopifnot(case_start <= case_end)\n\n   case_id <- case_id[case_start:case_end]\n   catalog_rnaseq <- catalog %>% \n                     filter(sample_name %in% case_id) \n\n   # case_id   R1_path    R2_path\n   for (i in seq(1, nrow(catalog_rnaseq))) {\n      write_tsv(catalog_rnaseq[i,], paste0('case_', i, '.tsv'),\n                col_names = FALSE)\n   }\n   \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "start",
            "end"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "container \"${params.container.r_tidyverse}\"",
            "label 'r5_2xlarge'"
        ],
        "when": "",
        "stub": ""
    },
    "extract_paths": {
        "name_process": "extract_paths",
        "string_process": "\nprocess extract_paths {\n  container \"${params.container.ubuntu}\"\n  cpus 8\n  memory '60 GB'\n  label 'r5_2xlarge'\n\n  input:\n    path(id_file)\n\n  output:\n    env case_id, emit: case_id\n    env r1_path, emit: r1_path\n    env r2_path, emit: r2_path\n\n  \"\"\"\n   while IFS=\\$'\\\\t' read -r -a myid\n   do\n      case_id=\"\\${myid[0]}\"\n      r1_path=\"\\${myid[1]}\"\n      r2_path=\"\\${myid[2]}\"\n   done < $id_file\n   \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n   while IFS=\\$'\\\\t' read -r -a myid\n   do\n      case_id=\"\\${myid[0]}\"\n      r1_path=\"\\${myid[1]}\"\n      r2_path=\"\\${myid[2]}\"\n   done < $id_file\n   \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "container \"${params.container.ubuntu}\"",
            "cpus 8",
            "memory '60 GB'",
            "label 'r5_2xlarge'"
        ],
        "when": "",
        "stub": ""
    },
    "download_files": {
        "name_process": "download_files",
        "string_process": "\nprocess download_files {\n  container \"${params.container.gdc_client}\"\n  label 'r5_2xlarge'\n  cpus 8\n  memory '60 GB'\n\n  input:\n    path(token)\n    path(id_file)\n\n output:\n  tuple path('CASE_ID'),\n        path('R1/*.fastq'),\n        path('R2/*.fastq'),\n        emit: res_ch\n\n  \"\"\"\n   while IFS=\\$'\\\\t' read -r -a myid\n   do\n      case_id=\"\\${myid[0]}\"\n      gdc-client download \"\\${myid[1]}\" -t \"$token\" -n ${task.cpus}\n      mv \"\\${myid[1]}\" R1\n      md5_1=\"\\${myid[3]}\"\n      md5_result=\\$(md5sum R1/\\${myid[2]} | cut -d \" \" -f1)\n      if [[ \"\\$md5_result\" != \"\\$md5_1\" ]]\n       then\n        echo \"\\${myid[2]} md5 does not match\"\n        exit 1\n       else\n        echo \"md5 check OK\"\n      fi\n      # unzip \n      r1_fastq=\"R1/\\${case_id}_R1.fastq.gz\"\n      mv \"R1/\\${myid[2]}\" \"\\${r1_fastq}\"\n      gzip -d \"\\${r1_fastq}\"\n      gdc-client download \"\\${myid[4]}\" -t \"$token\" -n ${task.cpus}\n      mv \"\\${myid[4]}\" R2\n      md5_2=\"\\${myid[6]}\"\n      md5_result=\\$(md5sum R2/\\${myid[5]} | cut -d \" \" -f1)\n      if [[ \"\\$md5_result\" != \"\\$md5_2\" ]]\n      then\n        echo \"\\${myid[5]} md5 does not match\"\n        exit 1\n       else\n        echo \"md5 check OK\"\n      fi\n      # unzip \n      r2_fastq=\"R2/\\${case_id}_R2.fastq.gz\"\n      mv \"R2/\\${myid[5]}\" \"\\${r2_fastq}\"\n      gzip -d \"\\${r2_fastq}\"\n      echo \"\\${case_id}\" > CASE_ID\n   done < $id_file\n   \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "\"\"\"\n   while IFS=\\$'\\\\t' read -r -a myid\n   do\n      case_id=\"\\${myid[0]}\"\n      gdc-client download \"\\${myid[1]}\" -t \"$token\" -n ${task.cpus}\n      mv \"\\${myid[1]}\" R1\n      md5_1=\"\\${myid[3]}\"\n      md5_result=\\$(md5sum R1/\\${myid[2]} | cut -d \" \" -f1)\n      if [[ \"\\$md5_result\" != \"\\$md5_1\" ]]\n       then\n        echo \"\\${myid[2]} md5 does not match\"\n        exit 1\n       else\n        echo \"md5 check OK\"\n      fi\n      # unzip \n      r1_fastq=\"R1/\\${case_id}_R1.fastq.gz\"\n      mv \"R1/\\${myid[2]}\" \"\\${r1_fastq}\"\n      gzip -d \"\\${r1_fastq}\"\n      gdc-client download \"\\${myid[4]}\" -t \"$token\" -n ${task.cpus}\n      mv \"\\${myid[4]}\" R2\n      md5_2=\"\\${myid[6]}\"\n      md5_result=\\$(md5sum R2/\\${myid[5]} | cut -d \" \" -f1)\n      if [[ \"\\$md5_result\" != \"\\$md5_2\" ]]\n      then\n        echo \"\\${myid[5]} md5 does not match\"\n        exit 1\n       else\n        echo \"md5 check OK\"\n      fi\n      # unzip \n      r2_fastq=\"R2/\\${case_id}_R2.fastq.gz\"\n      mv \"R2/\\${myid[5]}\" \"\\${r2_fastq}\"\n      gzip -d \"\\${r2_fastq}\"\n      echo \"\\${case_id}\" > CASE_ID\n   done < $id_file\n   \"\"\"",
        "nb_lignes_script": 36,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "token",
            "id_file"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "container \"${params.container.gdc_client}\"",
            "label 'r5_2xlarge'",
            "cpus 8",
            "memory '60 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "stage_files": {
        "name_process": "stage_files",
        "string_process": "\nprocess stage_files {\n  container \"${params.container.ubuntu}\"\n  label 'r5_2xlarge'\n  cpus 8\n  memory '60 GB'\n\n  input:\n    val(case_id)\n    val(r1_path)\n    val(r2_path)\n    path(r1_path)\n    path(r2_path)\n\n output:\n  tuple path('CASE_ID'),\n        path('R1/*.fastq'),\n        path('R2/*.fastq'),\n        emit: res_ch\n\n  \"\"\"\n  echo \"${case_id}\" > CASE_ID\n  mkdir R1 R2\n  r1_name=\\$(basename ${r1_path})\n  gunzip -f \\${r1_name}\n  mv *.fastq R1\n  r2_name=\\$(basename ${r2_path})\n  gunzip -f \\${r2_name}\n  mv *.fastq R2\n  \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "\"\"\"\n  echo \"${case_id}\" > CASE_ID\n  mkdir R1 R2\n  r1_name=\\$(basename ${r1_path})\n  gunzip -f \\${r1_name}\n  mv *.fastq R1\n  r2_name=\\$(basename ${r2_path})\n  gunzip -f \\${r2_name}\n  mv *.fastq R2\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "case_id",
            "r1_path",
            "r2_path",
            "r1_path",
            "r2_path"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "container \"${params.container.ubuntu}\"",
            "label 'r5_2xlarge'",
            "cpus 8",
            "memory '60 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "fastq_to_sam": {
        "name_process": "fastq_to_sam",
        "string_process": "\nprocess fastq_to_sam {\n  container \"${params.container.bwa}\"\n  cpus 8\n  memory '60 GB'\n  label 'r5_2xlarge_dynamic_disk'\n\n  input:\n    tuple path('CASE_ID'),\n          path('r1.fastq'),\n          path('r2.fastq')\n    val(genome_ref_prefix)\n    path('*')\n    path('*')\n\n  output:\n    tuple path('CASE_ID'), \n          path('bwa-pe-for-CIRI.sam'),\n          emit: res_ch\n\n  \"\"\"\n   bwa mem -t ${task.cpus} -T 19 ${genome_ref_prefix} \\\n      r1.fastq r2.fastq -o bwa-pe-for-CIRI.sam \n  \"\"\"\n\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n   bwa mem -t ${task.cpus} -T 19 ${genome_ref_prefix} \\\n      r1.fastq r2.fastq -o bwa-pe-for-CIRI.sam \n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "genome_ref_prefix"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "container \"${params.container.bwa}\"",
            "cpus 8",
            "memory '60 GB'",
            "label 'r5_2xlarge_dynamic_disk'"
        ],
        "when": "",
        "stub": ""
    },
    "ciri_calling": {
        "name_process": "ciri_calling",
        "string_process": "\nprocess ciri_calling {\n  publishDir params.outdir_ciri, \n             pattern: '*/results_CIRI.txt',\n             mode: 'copy', overwrite: true \n  container \"${params.container.ciri}\"\n  label 'r5_4xlarge_dynamic_disk'\n  cpus 16\n  memory '124 GB'\n\n  input:\n    tuple path('CASE_ID'), path('bwa-pe-for-CIRI.sam')\n    val(genome_ref_prefix)\n    path('*')\n    path('*')\n    path('anno.gtf')\n\n  output:\n    tuple path('CASE_ID'), path(\"*/results_CIRI.txt\"), emit: res_ch\n\n  \"\"\"\n  case_id=\\$(cat CASE_ID) \n  mkdir \\${case_id} \n  perl /usr/src/CIRI2.pl -T ${task.cpus} \\\n  -I bwa-pe-for-CIRI.sam \\\n  -O \\${case_id}/results_CIRI.txt \\\n  -F ${genome_ref_prefix} \\\n  -A anno.gtf \n  \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n  case_id=\\$(cat CASE_ID) \n  mkdir \\${case_id} \n  perl /usr/src/CIRI2.pl -T ${task.cpus} \\\n  -I bwa-pe-for-CIRI.sam \\\n  -O \\${case_id}/results_CIRI.txt \\\n  -F ${genome_ref_prefix} \\\n  -A anno.gtf \n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_ref_prefix"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "publishDir params.outdir_ciri , pattern: '*/results_CIRI.txt', mode: 'copy', overwrite: true",
            "container \"${params.container.ciri}\"",
            "label 'r5_4xlarge_dynamic_disk'",
            "cpus 16",
            "memory '124 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "add_gene_name_to_CIRI_results": {
        "name_process": "add_gene_name_to_CIRI_results",
        "string_process": "\nprocess add_gene_name_to_CIRI_results {\n  publishDir params.outdir_ciri,\n             pattern: '*/results_CIRI_added_gene_name.txt',\n             mode: 'copy', overwrite: true\n  container \"${params.container.rna_seq_misc_ydou}\"\n  label 'r5_2xlarge'\n\n  input:\n    tuple path('CASE_ID'), path('results_CIRI.txt') \n    path('ref_file.gtf')\n  \n  output:\n    tuple path('CASE_ID'), path(\"*/results_CIRI_added_gene_name.txt\"), emit: res_ch\n  \n  \"\"\"\n  case_id=\\$(cat CASE_ID) \n  mkdir \\${case_id} \n  1_add_gene_name_to_CIRI_results.pl -I results_CIRI.txt -F ref_file.gtf \\\n  -O \\${case_id}/results_CIRI_added_gene_name.txt\n  \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n  case_id=\\$(cat CASE_ID) \n  mkdir \\${case_id} \n  1_add_gene_name_to_CIRI_results.pl -I results_CIRI.txt -F ref_file.gtf \\\n  -O \\${case_id}/results_CIRI_added_gene_name.txt\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "publishDir params.outdir_ciri , pattern: '*/results_CIRI_added_gene_name.txt' , mode: 'copy', overwrite: true",
            "container \"${params.container.rna_seq_misc_ydou}\"",
            "label 'r5_2xlarge'"
        ],
        "when": "",
        "stub": ""
    },
    "add_linear_circular_isoform_to_gtf": {
        "name_process": "add_linear_circular_isoform_to_gtf",
        "string_process": "\nprocess add_linear_circular_isoform_to_gtf{\n  container \"${params.container.rna_seq_misc_ydou}\"\n  label 'r5_2xlarge'\n\n  input:\n    tuple path('CASE_ID'), path('results_CIRI_added_gene_name.txt')\n    path('ref_file.gtf')\n  \n  output:\n    tuple path('CASE_ID'),\n          path(\"*/genome_with_circular_RNA.gtf\"), emit: res_ch\n  \n  \"\"\"\n  case_id=\\$(cat CASE_ID) \n  mkdir \\${case_id}\n  2_add_linear_circular_isoform_to_gtf.pl -I results_CIRI_added_gene_name.txt -F ref_file.gtf \\\n  -O \\${case_id}/genome_with_circular_RNA.gtf\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n  case_id=\\$(cat CASE_ID) \n  mkdir \\${case_id}\n  2_add_linear_circular_isoform_to_gtf.pl -I results_CIRI_added_gene_name.txt -F ref_file.gtf \\\n  -O \\${case_id}/genome_with_circular_RNA.gtf\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "container \"${params.container.rna_seq_misc_ydou}\"",
            "label 'r5_2xlarge'"
        ],
        "when": "",
        "stub": ""
    },
    "extract_linear_and_circRNA_transcripts": {
        "name_process": "extract_linear_and_circRNA_transcripts",
        "string_process": "\nprocess extract_linear_and_circRNA_transcripts {\n                                       \n                         \"*/${genome_ref_prefix}.linear.and.circrna.*\" \n                                             \n  container \"${params.container.rsem}\"\n  label 'r5_2xlarge'\n\n  input:\n    tuple path('CASE_ID'), path('anno.gtf')\n    val(genome_ref_prefix)\n    path('*')\n    path('*')\n\n  output:\n    tuple path('CASE_ID'),\n          path(\"*/${genome_ref_prefix}.linear.and.circrna.transcripts.fa\"), emit: res_ch\n          path \"*/${genome_ref_prefix}.linear.and.circrna.*\", emit: output_ch\n     \n\"\"\"\ncase_id=\\$(cat CASE_ID) \nmkdir \\${case_id}\n/opt/RSEM/rsem-extract-reference-transcripts \\${case_id}/${genome_ref_prefix}.linear.and.circrna \\\n0 anno.gtf None 0 ${genome_ref_prefix}\n\"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\ncase_id=\\$(cat CASE_ID) \nmkdir \\${case_id}\n/opt/RSEM/rsem-extract-reference-transcripts \\${case_id}/${genome_ref_prefix}.linear.and.circrna \\\n0 anno.gtf None 0 ${genome_ref_prefix}\n\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_ref_prefix"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "container \"${params.container.rsem}\"",
            "label 'r5_2xlarge'"
        ],
        "when": "",
        "stub": ""
    },
    "circular_linear_to_psedo_linear": {
        "name_process": "circular_linear_to_psedo_linear",
        "string_process": "\nprocess circular_linear_to_psedo_linear{\n                                     \n                         '*/linear.and.circrna.as.pseudo.linear.transcripts.fa' \n                                             \n  container  \"${params.container.rna_seq_misc_ydou}\"\n  label 'r5_2xlarge'\n\n  input:\n    tuple path('CASE_ID'), path('linear.and.circrna.transcripts.fa')\n\n  output:\n    tuple path('CASE_ID'), path(\"*/linear.and.circrna.as.pseudo.linear.transcripts.fa\"), emit: res_ch\n\n  \"\"\"\n  case_id=\\$(cat CASE_ID) \n  mkdir \\${case_id}\n  3_circular_linear_to_psedo_linear.pl -I linear.and.circrna.transcripts.fa \\\n  -O \\${case_id}/linear.and.circrna.as.pseudo.linear.transcripts.fa\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n  case_id=\\$(cat CASE_ID) \n  mkdir \\${case_id}\n  3_circular_linear_to_psedo_linear.pl -I linear.and.circrna.transcripts.fa \\\n  -O \\${case_id}/linear.and.circrna.as.pseudo.linear.transcripts.fa\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "container \"${params.container.rna_seq_misc_ydou}\"",
            "label 'r5_2xlarge'"
        ],
        "when": "",
        "stub": ""
    },
    "gene_isoform_mapping_with_circular_rna": {
        "name_process": "gene_isoform_mapping_with_circular_rna",
        "string_process": "\nprocess gene_isoform_mapping_with_circular_rna{\n                                     \n                         '*/gene_isoform_mapping_with_circular_rna_for_RSEM.txt' \n                             \n                               \n  container  \"${params.container.rna_seq_misc_ydou}\"\n  label 'r5_2xlarge'\n\n  input:\n    tuple path('CASE_ID'), path('genome_with_circular_RNA.gtf')\n\n  output:\n    tuple path('CASE_ID'), \n          path('*/gene_isoform_mapping_with_circular_rna_for_RSEM.txt'),\n          emit: res_ch\n\n \"\"\"\n  case_id=\\$(cat CASE_ID) \n  mkdir \\${case_id}\n  4_gene_isoform_mapping_with_circular_rna.pl \\\n  -I genome_with_circular_RNA.gtf \\\n  -O \\${case_id}/gene_isoform_mapping_with_circular_rna_for_RSEM.txt\n \"\"\"\n\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n  case_id=\\$(cat CASE_ID) \n  mkdir \\${case_id}\n  4_gene_isoform_mapping_with_circular_rna.pl \\\n  -I genome_with_circular_RNA.gtf \\\n  -O \\${case_id}/gene_isoform_mapping_with_circular_rna_for_RSEM.txt\n \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "container \"${params.container.rna_seq_misc_ydou}\"",
            "label 'r5_2xlarge'"
        ],
        "when": "",
        "stub": ""
    },
    "build_rsem_index": {
        "name_process": "build_rsem_index",
        "string_process": "\nprocess build_rsem_index {\n                                                                   \n  container \"${params.container.rsem}\"\n  label 'r5_2xlarge'\n  cpus 8\n  memory '60 GB'\n\n  input:\n    tuple val(case_id), \n          path('linear.and.circrna.as.pseudo.linear.transcripts.fa'),\n          path('gene_isoform_mapping_with_circular_rna_for_RSEM.txt')\n    \n  output: \n    tuple val(case_id),\n          path(\"${case_id}/hg38*\"),\n          emit: res_ch\n\n\"\"\"\nmkdir ${case_id}\n/opt/RSEM/rsem-prepare-reference -p ${task.cpus} \\\n--transcript-to-gene-map gene_isoform_mapping_with_circular_rna_for_RSEM.txt \\\n--bowtie2 --bowtie2-path /opt/bowtie2 \\\nlinear.and.circrna.as.pseudo.linear.transcripts.fa ${case_id}/hg38 \n\"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\nmkdir ${case_id}\n/opt/RSEM/rsem-prepare-reference -p ${task.cpus} \\\n--transcript-to-gene-map gene_isoform_mapping_with_circular_rna_for_RSEM.txt \\\n--bowtie2 --bowtie2-path /opt/bowtie2 \\\nlinear.and.circrna.as.pseudo.linear.transcripts.fa ${case_id}/hg38 \n\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "case_id"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "container \"${params.container.rsem}\"",
            "label 'r5_2xlarge'",
            "cpus 8",
            "memory '60 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "gene_and_transcript_quantification": {
        "name_process": "gene_and_transcript_quantification",
        "string_process": "\nprocess gene_and_transcript_quantification {\n  publishDir params.outdir_rsem2, \n             pattern: \"${case_id}/${case_id}.stat\",\n             mode: 'copy',\n             overwrite: true\n  publishDir params.outdir_rsem2, \n             pattern: \"${case_id}/${case_id}.*.results\",\n             mode: 'copy',\n             overwrite: true\n  container \"${params.container.rsem}\"\n  label 'r5_2xlarge_dynamic_disk'\n  cpus 8\n  memory '60 GB'\n\n  input:\n    tuple val(case_id),\n          path('r1.fastq'),\n          path('r2.fastq'),\n          path('*')\n    \n  output: \n    tuple val(case_id),\n          path(\"${case_id}/${case_id}*\"),\n          emit: res_ch\n\n\"\"\"\nmkdir ${case_id}\n/opt/RSEM/rsem-calculate-expression --bowtie2 --bowtie2-path \\\n/opt/bowtie2/ --paired-end -p ${task.cpus} \\\nr1.fastq r2.fastq hg38 ${case_id}/${case_id}\n\"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "\"\"\"\nmkdir ${case_id}\n/opt/RSEM/rsem-calculate-expression --bowtie2 --bowtie2-path \\\n/opt/bowtie2/ --paired-end -p ${task.cpus} \\\nr1.fastq r2.fastq hg38 ${case_id}/${case_id}\n\"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Rbowtie2"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            }
        ],
        "inputs": [
            "case_id"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "publishDir params.outdir_rsem2 , pattern: \"${case_id}/${case_id}.stat\", mode: 'copy', overwrite: true",
            "publishDir params.outdir_rsem2 , pattern: \"${case_id}/${case_id}.*.results\", mode: 'copy', overwrite: true",
            "container \"${params.container.rsem}\"",
            "label 'r5_2xlarge_dynamic_disk'",
            "cpus 8",
            "memory '60 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "summarize_gene_quantification": {
        "name_process": "summarize_gene_quantification",
        "string_process": "\nprocess summarize_gene_quantification {\n publishDir params.outdir_rsem,\n             pattern: \"${case_id}\",\n             mode: 'copy',\n             overwrite: true\n  container  \"${params.container.rna_seq_misc_ydou}\"\n  label 'r5_2xlarge'\n  cpus 4\n  memory '30 GB'\n\n  input:\n    tuple val(case_id), path('*')\n\n  output:\n    path \"${case_id}\", emit: res_ch\n\n  \"\"\"\n  mkdir ${case_id}\n  5_summary-gene-quantification.pl\n  mv *.txt ${case_id}\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n  mkdir ${case_id}\n  5_summary-gene-quantification.pl\n  mv *.txt ${case_id}\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "case_id"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "publishDir params.outdir_rsem , pattern: \"${case_id}\" , mode: 'copy' , overwrite: true",
            "container \"${params.container.rna_seq_misc_ydou}\"",
            "label 'r5_2xlarge'",
            "cpus 4",
            "memory '30 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "combine_and_summary": {
        "name_process": "combine_and_summary",
        "string_process": "\nprocess combine_and_summary {\n  publishDir params.outdir_rsem,\n             pattern: \"RSEM_results_summarized\",\n             mode: 'copy',\n             overwrite: true\n  container  \"${params.container.rna_seq_combine_summary}\"\n  label 'r5_2xlarge'\n  cpus 4\n  memory '30 GB'\n\n  input:\n    path('*')\n\n  output:\n                                                          \n    path('RSEM_results_summarized')\n\n  \"\"\"\n  Rscript /usr/src/combine_and_summary.r \n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n  Rscript /usr/src/combine_and_summary.r \n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "bzhanglab__nf-rnaseq",
        "directive": [
            "publishDir params.outdir_rsem , pattern: \"RSEM_results_summarized\" , mode: 'copy' , overwrite: true",
            "container \"${params.container.rna_seq_combine_summary}\"",
            "label 'r5_2xlarge'",
            "cpus 4",
            "memory '30 GB'"
        ],
        "when": "",
        "stub": ""
    }
}
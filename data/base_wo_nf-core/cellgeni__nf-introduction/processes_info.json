{
    "import_data": {
        "name_process": "import_data",
        "string_process": "\nprocess import_data {\n\n  when: params.datadir != ''\n\n  input: set val(sample_id), val(fname) from samplelist.splitCsv(sep: '\\t').view { \"splitcsv: $it\" }\n\n  output: set val(sample_id), file(\"${sample_id}.*\") into ch_chunky                        \n                                                                                                  \n  shell:\n  '''\n  filename=!{params.datadir}/!{fname}\n\n  if [[ ! -e $filename ]]; then\n    echo \"File $filename not found!\"\n    false\n  fi\n  split -l !{params.chunksize} $filename !{sample_id}.\n  '''\n}",
        "nb_lignes_process": 18,
        "string_script": "  '''\n  filename=!{params.datadir}/!{fname}\n\n  if [[ ! -e $filename ]]; then\n    echo \"File $filename not found!\"\n    false\n  fi\n  split -l !{params.chunksize} $filename !{sample_id}.\n  '''",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cellgeni__nf-introduction",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "do_a_sample_chunk": {
        "name_process": "do_a_sample_chunk",
        "string_process": "\nprocess do_a_sample_chunk {\n  echo true\n\n  input: set val(sample_id), file(chunk) from ch_chunks\n\n  output: set val(sample_id), file('*.max') into ch_scatter\n\n  shell:\n  '''\n  echo \"parallel execution: !{sample_id} !{chunk}\"\n  sort -n !{chunk} | tail -n 1 > !{chunk}.max\n  '''\n}",
        "nb_lignes_process": 12,
        "string_script": "  '''\n  echo \"parallel execution: !{sample_id} !{chunk}\"\n  sort -n !{chunk} | tail -n 1 > !{chunk}.max\n  '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cellgeni__nf-introduction",
        "directive": [
            "echo true input: set val(sample_id), file(chunk) from ch_chunks output: set val(sample_id), file('*.max') into ch_scatter"
        ],
        "when": "",
        "stub": ""
    },
    "samples_gather": {
        "name_process": "samples_gather",
        "string_process": "\nprocess samples_gather {\n  echo true\n\n  publishDir \"${params.outdir}/5\", mode: 'link'\n\n  input: set val(sample_id), file(maxes) from ch_scatter.groupTuple()                           \n  output: file('*.integrated')\n\n  shell:\n  '''\n  echo \"integrate: !{sample_id} !{maxes}\"\n  cat !{maxes} > !{sample_id}.integrated\n  '''\n}",
        "nb_lignes_process": 13,
        "string_script": "  '''\n  echo \"integrate: !{sample_id} !{maxes}\"\n  cat !{maxes} > !{sample_id}.integrated\n  '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cellgeni__nf-introduction",
        "directive": [
            "echo true",
            "publishDir \"${params.outdir}/5\", mode: 'link' input: set val(sample_id), file(maxes) from ch_scatter.groupTuple() output: file('*.integrated')"
        ],
        "when": "",
        "stub": ""
    },
    "alignReads": {
        "name_process": "alignReads",
        "string_process": "\nprocess alignReads {\n  echo true\n\n  input: set val(sample_id), file(fastqs) from ch_fastq_align\n\n  output: set val(sample_id), file('*.bam') into ch_bam\n\n  shell:\n  f1 = fastqs[0]\n  f2 = fastqs[1]\n  '''\n  echo \"align reads input: !{sample_id} !{fastqs}\"\n  echo \"Equivalently: !{sample_id} f1 !{f1} f2 !{f2}\"\n\n  # please pretend this is an alignment program\n  cat !{fastqs} | gzip -c > !{sample_id}.bam\n  '''\n}",
        "nb_lignes_process": 17,
        "string_script": "  f1 = fastqs[0]\n  f2 = fastqs[1]\n  '''\n  echo \"align reads input: !{sample_id} !{fastqs}\"\n  echo \"Equivalently: !{sample_id} f1 !{f1} f2 !{f2}\"\n\n  # please pretend this is an alignment program\n  cat !{fastqs} | gzip -c > !{sample_id}.bam\n  '''",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "gff2ps"
        ],
        "tools_url": [
            "https://bio.tools/gff2ps"
        ],
        "tools_dico": [
            {
                "name": "gff2ps",
                "uri": "https://bio.tools/gff2ps",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1255",
                                "term": "Sequence features"
                            }
                        ]
                    }
                ],
                "description": "Program for visualizing annotations of genomic sequences. The program takes the annotated features on a genomic sequence in GFF format as input, and produces a visual output in PostScript. While it can be used in a very simple way, it also allows for a great degree of customization through a number of options and/or customization files.",
                "homepage": "http://big.crg.cat/services/gff2ps"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cellgeni__nf-introduction",
        "directive": [
            "echo true input: set val(sample_id), file(fastqs) from ch_fastq_align output: set val(sample_id), file('*.bam') into ch_bam"
        ],
        "when": "",
        "stub": ""
    },
    "splitLetters": {
        "name_process": "splitLetters",
        "string_process": "\nprocess splitLetters {\n\n    publishDir \"${params.outdir}/2\", mode: 'link'\n\n    output:\n    file 'chunk_*' into ch_letters\n\n    shell:\n    '''\n    printf '!{params.str}' | split -b 15 - chunk_\n    '''\n}",
        "nb_lignes_process": 11,
        "string_script": "    '''\n    printf '!{params.str}' | split -b 15 - chunk_\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ch_letters"
        ],
        "nb_outputs": 1,
        "name_workflow": "cellgeni__nf-introduction",
        "directive": [
            "publishDir \"${params.outdir}/2\", mode: 'link'"
        ],
        "when": "",
        "stub": ""
    },
    "convertToUpper": {
        "name_process": "convertToUpper",
        "string_process": "\nprocess convertToUpper {\n\n    publishDir \"${params.outdir}/2\", mode: 'link'\n\n    input:\n    file x from ch_letters.flatten()                                                     \n\n    output:\n    file('*.txt') into ch_morestuff\n\n    shell:\n    '''\n    cat !{x} | tr '[a-z]' '[A-Z]' > hw.!{task.index}.txt\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    cat !{x} | tr '[a-z]' '[A-Z]' > hw.!{task.index}.txt\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_letters"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_morestuff"
        ],
        "nb_outputs": 1,
        "name_workflow": "cellgeni__nf-introduction",
        "directive": [
            "publishDir \"${params.outdir}/2\", mode: 'link'"
        ],
        "when": "",
        "stub": ""
    },
    "mergeData": {
        "name_process": "mergeData",
        "string_process": "\nprocess mergeData {\n\n    echo true\n\n    publishDir \"${params.outdir}/3\", mode: 'link'\n\n    input:\n    file inputs from ch_merge.collect()\n\n    output:\n    file('summary.txt')\n\n    shell:\n    '''\n    echo \"I have files !{inputs}\"\n    md5sum !{inputs} > summary.txt\n    ''' \n}",
        "nb_lignes_process": 17,
        "string_script": "    '''\n    echo \"I have files !{inputs}\"\n    md5sum !{inputs} > summary.txt\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_merge"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "cellgeni__nf-introduction",
        "directive": [
            "echo true",
            "publishDir \"${params.outdir}/3\", mode: 'link'"
        ],
        "when": "",
        "stub": ""
    }
}
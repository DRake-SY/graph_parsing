{
    "table_scan": {
        "name_process": "table_scan",
        "string_process": "\nprocess table_scan {\n    \n    echo true\n\n    publishDir \"./results\", mode: 'copy'\n\n    input:\n    path 'common.py' from table_scan_common\n    path 'parts.sql' from parts_sql\n    path 'exercise4.py' from python_script_4\n    path 'sample.db' from db\n\n                 \n                                         \n\n    '''\n    #!/usr/bin/env python3\n\n    from exercise4 import table_scan\n\n    table_scan(\"parts.sql\")\n\n    '''\n\n\n}",
        "nb_lignes_process": 25,
        "string_script": "'''\n    #!/usr/bin/env python3\n\n    from exercise4 import table_scan\n\n    table_scan(\"parts.sql\")\n\n    '''",
        "nb_lignes_script": 7,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "table_scan_common",
            "parts_sql",
            "python_script_4",
            "db"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HallerPatrick__nextflow-exercises",
        "directive": [
            "echo true",
            "publishDir \"./results\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "kmer": {
        "name_process": "kmer",
        "string_process": "\nprocess kmer {\n    \n    echo true\n\n    publishDir \"./results\", mode: 'copy'\n\n    input:\n    path 'common.py' from kmer_common\n    path 'raeuber.txt' from raeuber_text_kmer\n    path 'exercise3.py' from python_script_3\n\n    output:\n    file 'kmers.json' into out_file_kmers\n\n    '''\n    #!/usr/bin/env python3\n\n    from exercise3 import find_kmers\n\n    find_kmers(\"raeuber.txt\")\n\n    '''\n\n\n}",
        "nb_lignes_process": 24,
        "string_script": "'''\n    #!/usr/bin/env python3\n\n    from exercise3 import find_kmers\n\n    find_kmers(\"raeuber.txt\")\n\n    '''",
        "nb_lignes_script": 7,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kmer_common",
            "raeuber_text_kmer",
            "python_script_3"
        ],
        "nb_inputs": 3,
        "outputs": [
            "out_file_kmers"
        ],
        "nb_outputs": 1,
        "name_workflow": "HallerPatrick__nextflow-exercises",
        "directive": [
            "echo true",
            "publishDir \"./results\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "tokenize": {
        "name_process": "tokenize",
        "string_process": "\nprocess tokenize {\n    \n    echo true\n\n    publishDir \"./results\", mode: 'copy'\n\n    input:\n    path 'raeuber.txt' from raeuber_text\n    path 'common.py' from python_common\n    path 'exercise2.py' from python_script\n\n    output:\n    file 'freqs.json' into out_file\n\n    '''\n    #!/usr/bin/env python3\n\n    from exercise2 import make_frequency\n\n    make_frequency(\"raeuber.txt\")\n\n    '''\n\n    '''\n    #!/bin/bash\n\n    python3 exercise2.py\n    '''\n}",
        "nb_lignes_process": 28,
        "string_script": "'''\n    #!/usr/bin/env python3\n\n    from exercise2 import make_frequency\n\n    make_frequency(\"raeuber.txt\")\n\n    '''\n\n    '''\n    #!/bin/bash\n\n    python3 exercise2.py\n    '''",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "denvax",
            "FROMP"
        ],
        "tools_url": [
            "https://bio.tools/denvax",
            "https://bio.tools/fromp"
        ],
        "tools_dico": [
            {
                "name": "denvax",
                "uri": "https://bio.tools/denvax",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3379",
                            "term": "Preclinical and clinical studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatric medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "https://en.wikipedia.org/wiki/Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3399",
                            "term": "Geriatrics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0560",
                                    "term": "DNA vaccine design"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Serostatus testing and dengue vaccine cost-benefit thresholds | R package for manuscript \"Serostatus Testing & Dengue Vaccine Cost Benefit Thresholds\"",
                "homepage": "https://cran.r-project.org/web/packages/denvax/index.html"
            },
            {
                "name": "FROMP",
                "uri": "https://bio.tools/fromp",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2259",
                            "term": "Systems biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3172",
                            "term": "Metabolomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3660",
                                    "term": "Metabolic network modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3660",
                                    "term": "http://edamontology.org/Metabolic%20pathway%20modelling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software for mapping and visualizing enzyme annotations onto the Kyoto Encyclopedia of Genes and Genomes (KEGG) metabolic pathways or custom-made pathways and comparing the samples in terms of their Pathway Completeness Scores, their relative Activity Scores or enzyme enrichment odds ratios.",
                "homepage": "https://github.com/LaRocheLab/FROMP"
            }
        ],
        "inputs": [
            "raeuber_text",
            "python_common",
            "python_script"
        ],
        "nb_inputs": 3,
        "outputs": [
            "out_file"
        ],
        "nb_outputs": 1,
        "name_workflow": "HallerPatrick__nextflow-exercises",
        "directive": [
            "echo true",
            "publishDir \"./results\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "frequencies": {
        "name_process": "frequencies",
        "string_process": "\nprocess frequencies {\n\n    input:\n    file tokenized_file from freqs_tokens\n    file 'freqs.py' from Channel.value(python_freqs.text)\n\n    output:\n    file 'freqs_*' into freqs_files\n\n    \"\"\"\n    #!/usr/bin/env python3\n\n    from freqs import make_frequency\n    \n    make_frequency(\"$tokenized_file\")\n\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    #!/usr/bin/env python3\n\n    from freqs import make_frequency\n    \n    make_frequency(\"$tokenized_file\")\n\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "freqs_tokens"
        ],
        "nb_inputs": 1,
        "outputs": [
            "freqs_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "HallerPatrick__nextflow-exercises",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "kmers": {
        "name_process": "kmers",
        "string_process": "\nprocess kmers {\n\n    input:\n    file tokenized_file from kmers_tokens\n    file 'kmers.py' from Channel.value(python_kmers.text)\n\n    output:\n    file 'kmers_*' into kmers_files\n\n    \"\"\"\n    #!/usr/bin/env python3\n\n    from kmers import find_kmers\n\n    find_kmers(\"$tokenized_file\")\n\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    #!/usr/bin/env python3\n\n    from kmers import find_kmers\n\n    find_kmers(\"$tokenized_file\")\n\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "kmers_tokens"
        ],
        "nb_inputs": 1,
        "outputs": [
            "kmers_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "HallerPatrick__nextflow-exercises",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "merge": {
        "name_process": "merge",
        "string_process": "\nprocess merge {\n\n    publishDir \"results\", mode: \"copy\"\n\n    input:\n    file 'merger.py' from Channel.value(python_merger.text)\n\n    file freqs_file from freqs_files.collect()\n    file kmers_file from kmers_files.collect()\n\n    output:\n    file 'result.json' into result\n    \n\n    \"\"\"\n    #!/usr/bin/env python3\n    \n    from merger import merger\n\n    merger(\".\")\n\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n    #!/usr/bin/env python3\n    \n    from merger import merger\n\n    merger(\".\")\n\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "python3",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "freqs_files",
            "kmers_files"
        ],
        "nb_inputs": 2,
        "outputs": [
            "result"
        ],
        "nb_outputs": 1,
        "name_workflow": "HallerPatrick__nextflow-exercises",
        "directive": [
            "publishDir \"results\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "helloWorld": {
        "name_process": "helloWorld",
        "string_process": "\nprocess helloWorld {\n    echo true\n\n    '''\n    #!/usr/bin/env python\n\n    print(\"Hello World\")\n    '''\n}",
        "nb_lignes_process": 8,
        "string_script": "'''\n    #!/usr/bin/env python\n\n    print(\"Hello World\")\n    '''",
        "nb_lignes_script": 4,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HallerPatrick__nextflow-exercises",
        "directive": [
            "echo true"
        ],
        "when": "",
        "stub": ""
    }
}
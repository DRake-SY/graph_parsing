{
    "beastgen_process": {
        "name_process": "beastgen_process",
        "string_process": "\nprocess beastgen_process{\n    tag \"$key\"\n    publishDir \"${params.outDir}/xml\" , pattern: \"*xml\", saveAs: {it.replaceAll(\"beast\",key)}\n    input:\n        tuple val(key),path(trees), path(xml_template)\n    output:\n        tuple val(key), path('beast.xml')\n\"\"\"\ncp $xml_template ./local_template\n\nbeastgen -date_order -1 -date_prefix \"|\" -date_precision \\\n    -D \"outputStem=${key}\" \\\n    -tree $trees \\\n    local_template \\\n    $trees \\\n    beast.xml \n\"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\ncp $xml_template ./local_template\n\nbeastgen -date_order -1 -date_prefix \"|\" -date_precision \\\n    -D \"outputStem=${key}\" \\\n    -tree $trees \\\n    local_template \\\n    $trees \\\n    beast.xml \n\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "trees",
            "xml_template"
        ],
        "nb_inputs": 3,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "publishDir \"${params.outDir}/xml\" , pattern: \"*xml\", saveAs: {it.replaceAll(\"beast\",key)}"
        ],
        "when": "",
        "stub": ""
    },
    "beastgen_with_traits": {
        "name_process": "beastgen_with_traits",
        "string_process": "\nprocess beastgen_with_traits{\n    tag \"$key\"\n    publishDir \"${params.outDir}/xml\" , pattern: \"*xml\", saveAs: {it.replaceAll(\"beast\",key)}\n    input:\n        tuple val(key),path(trees), path(traits),path(xml_template),val(beastgenOptions)\n    output:\n        tuple val(key), path('beast.xml')\n\"\"\"\ncp $xml_template ./local_template\n\nbeastgen -date_order -1 -date_prefix \"|\" -date_precision \\\n    -D \"outputStem=${key} ${beastgenOptions}\" \\\n    -tree $trees \\\n    -traits $traits \\\n    local_template \\\n    $trees \\\n    beast.xml \n\"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\ncp $xml_template ./local_template\n\nbeastgen -date_order -1 -date_prefix \"|\" -date_precision \\\n    -D \"outputStem=${key} ${beastgenOptions}\" \\\n    -tree $trees \\\n    -traits $traits \\\n    local_template \\\n    $trees \\\n    beast.xml \n\"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "beastgenOptions",
            "trees",
            "traits",
            "xml_template"
        ],
        "nb_inputs": 5,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "publishDir \"${params.outDir}/xml\" , pattern: \"*xml\", saveAs: {it.replaceAll(\"beast\",key)}"
        ],
        "when": "",
        "stub": ""
    },
    "sample_metadata": {
        "name_process": "sample_metadata",
        "string_process": "\nprocess sample_metadata {\n    tag \"$key\"\n    label 'concensus_processing'\n\n    input:\n        tuple val(key), path(metadata),val(n), val(sample_options)\n    output:\n        tuple val(key), path(\"sampled.tsv\")\n\n\"\"\"\n sampler -i $metadata -n $n ${sample_options} > sampled.tsv\n\"\"\"\n\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n sampler -i $metadata -n $n ${sample_options} > sampled.tsv\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SamPler"
        ],
        "tools_url": [
            "https://bio.tools/SamPler"
        ],
        "tools_dico": [
            {
                "name": "SamPler",
                "uri": "https://bio.tools/SamPler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3407",
                            "term": "Endocrinology and metabolism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3407",
                            "term": "https://en.wikipedia.org/wiki/Endocrinology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> MEDIUM CONFIDENCE! | a novel method for selecting parameters for gene functional annotation routines | Novel strategy for selecting best parameters for gene functional annotation routines in merlin | readme instructions updated \u00b7 81b3a5a9",
                "homepage": "https://gitlab.bio.di.uminho.pt/merlin-sysbio/merlin-sampler"
            }
        ],
        "inputs": [
            "key",
            "n",
            "sample_options",
            "metadata"
        ],
        "nb_inputs": 4,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "label 'concensus_processing'"
        ],
        "when": "",
        "stub": ""
    },
    "sample_seq": {
        "name_process": "sample_seq",
        "string_process": "\nprocess sample_seq {\n    tag \"$key\"\n    label 'concensus_processing'\n\n    input:\n        tuple val(key),  path(samples), path(fasta),\n    output:\n        tuple val(key), path(\"sampled.fa\")\n\n\"\"\"\n python ${workflow_dir}\n\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\"\"\"\n python ${workflow_dir}\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "samples",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "label 'concensus_processing'"
        ],
        "when": "",
        "stub": ""
    },
    "minimap2": {
        "name_process": "minimap2",
        "string_process": "\nprocess minimap2{\n    tag \"$key\"\n    label 'concensus_processing'\n    input:\n        tuple val(key), path(fasta),path(reference)\n    output:\n        tuple val(key), path(\"sam.sam\"), path(reference)\n\"\"\"\n minimap2 -t 3 -a -x asm5 $reference $fasta > sam.sam\n\"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\n minimap2 -t 3 -a -x asm5 $reference $fasta > sam.sam\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "key",
            "fasta",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "label 'concensus_processing'"
        ],
        "when": "",
        "stub": ""
    },
    "sam_to_fasta": {
        "name_process": "sam_to_fasta",
        "string_process": "\nprocess sam_to_fasta{\n    tag \"$key\"\n    label 'concensus_processing'\n    input:\n        tuple val(key), path(sam), path(reference)\n    output:\n        tuple val(key), path(\"aligned.fa\")\n\"\"\"\ngofasta sam toMultiAlign -t 3 --reference $reference -s $sam --pad > aligned.fa\n\"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\ngofasta sam toMultiAlign -t 3 --reference $reference -s $sam --pad > aligned.fa\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "sam",
            "reference"
        ],
        "nb_inputs": 3,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "label 'concensus_processing'"
        ],
        "when": "",
        "stub": ""
    },
    "mask": {
        "name_process": "mask",
        "string_process": "\nprocess mask{\n    tag \"$key\"\n    label 'concensus_processing'\n    publishDir \"${params.outDir}/alignments\", overwrite:\"true\", saveAs:{\"${key}.fa\"}\n    \n    input:\n        tuple val(key), path(fasta), val(masked_sites)\n    output:\n        tuple val(key), path(\"masked.fa\")\n\"\"\"\ngoalign mask -t 3 -s $masked_sites -l 1 -i $fasta -o masked.fa\n\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\"\"\"\ngoalign mask -t 3 -s $masked_sites -l 1 -i $fasta -o masked.fa\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "goalign"
        ],
        "tools_url": [
            "https://bio.tools/goalign"
        ],
        "tools_dico": [
            {
                "name": "goalign",
                "uri": "https://bio.tools/goalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools to manipulate multiple alignments.",
                "homepage": "https://github.com/fredericlemoine/goalign"
            }
        ],
        "inputs": [
            "key",
            "masked_sites",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "label 'concensus_processing'",
            "publishDir \"${params.outDir}/alignments\", overwrite:\"true\", saveAs:{\"${key}.fa\"}"
        ],
        "when": "",
        "stub": ""
    },
    "combine_logs": {
        "name_process": "combine_logs",
        "string_process": "\nprocess combine_logs{\n    tag \"${key}\"\n    publishDir \"${params.outDir}/preliminary/combined_logs\", mode:\"copy\", overwrite:\"true\", saveAs:{\"${key}.b${burnin/1_000_000}M.s${resample/1_000}K.log\"}\n        errorStrategy 'finish'\n    input:\n        tuple val(key), path(logs), val(burnin) ,val(resample) \n    output:\n        tuple val(key), path(\"combined.log\")\n\n\"\"\"\nlogcombiner  ${(burnin>0? \"-burnin ${burnin}\": \"\")} \\\n            ${(resample>1?\"-resample ${resample}\":\"\")} \\\n             ${logs}  combined.log\n\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\nlogcombiner  ${(burnin>0? \"-burnin ${burnin}\": \"\")} \\\n            ${(resample>1?\"-resample ${resample}\":\"\")} \\\n             ${logs}  combined.log\n\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "burnin",
            "resample",
            "logs"
        ],
        "nb_inputs": 4,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"${key}\"",
            "publishDir \"${params.outDir}/preliminary/combined_logs\", mode:\"copy\", overwrite:\"true\", saveAs:{\"${key}.b${burnin/1_000_000}M.s${resample/1_000}K.log\"}",
            "errorStrategy 'finish'"
        ],
        "when": "",
        "stub": ""
    },
    "combine_trees": {
        "name_process": "combine_trees",
        "string_process": "\nprocess combine_trees {\n    tag \"${key}\"\n        errorStrategy 'finish'\n    publishDir \"${params.outDir}/preliminary/combined_trees\", mode:\"copy\", overwrite:\"true\", saveAs:{\"${key}.b${burnin/1_000_000}M.s${resample/1_000}K.trees\"}\n\n    input:\n        tuple val(key), path(trees), val(burnin),val(resample)\n    output:\n        tuple val(key), path(\"combined.trees\")\n\n\"\"\"\nlogcombiner -trees ${(burnin>0? \"-burnin ${burnin}\": \"\")} \\\n            ${(resample>1? \"-resample ${resample}\":\"\")} \\\n             ${trees} combined.trees\n\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\nlogcombiner -trees ${(burnin>0? \"-burnin ${burnin}\": \"\")} \\\n            ${(resample>1? \"-resample ${resample}\":\"\")} \\\n             ${trees} combined.trees\n\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "burnin",
            "resample",
            "trees"
        ],
        "nb_inputs": 4,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"${key}\"",
            "errorStrategy 'finish'",
            "publishDir \"${params.outDir}/preliminary/combined_trees\", mode:\"copy\", overwrite:\"true\", saveAs:{\"${key}.b${burnin/1_000_000}M.s${resample/1_000}K.trees\"}"
        ],
        "when": "",
        "stub": ""
    },
    "mcc": {
        "name_process": "mcc",
        "string_process": "\nprocess mcc{\n    tag\"${key}\"\n    publishDir \"${params.outDir}/DTA/mcc\",  overwrite:\"true\", saveAs:{\"${key}.mcc.tree\"}\n        errorStrategy 'finish'\n\n   input:\n        tuple val(key),path(trees)\n    output:\n        tuple val(key),path(\"mcc.tree\")\n\"\"\"\ntreeannotator  $trees mcc.tree\n\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\"\"\"\ntreeannotator  $trees mcc.tree\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "trees"
        ],
        "nb_inputs": 2,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag\"${key}\"",
            "publishDir \"${params.outDir}/DTA/mcc\", overwrite:\"true\", saveAs:{\"${key}.mcc.tree\"}",
            "errorStrategy 'finish'"
        ],
        "when": "",
        "stub": ""
    },
    "transmission_lineage": {
        "name_process": "transmission_lineage",
        "string_process": "\nprocess transmission_lineage{\n    tag \"${key}\"\npublishDir \"${params.outDir}/DTA/transmission\", pattern: \"*tsv\", mode:\"copy\", saveAs:{\"${key}.TL.tsv\"}\n    input:\n        tuple val(key),path(tree)\n    output:\n        tuple val(key),path(\"tl.tsv\")\n\n\"\"\"\nRUST_LOG=info fertree transmission-lineages -i $tree -k location --to $params.location --nexus >tl.tsv\n\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\nRUST_LOG=info fertree transmission-lineages -i $tree -k location --to $params.location --nexus >tl.tsv\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "tree"
        ],
        "nb_inputs": 2,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"${key}\"",
            "publishDir \"${params.outDir}/DTA/transmission\", pattern: \"*tsv\", mode:\"copy\", saveAs:{\"${key}.TL.tsv\"}"
        ],
        "when": "",
        "stub": ""
    },
    "refine": {
        "name_process": "refine",
        "string_process": "\nprocess refine {\n    tag \"$key\"\n    input:\n    tuple val(key),path(tree),path(alignment)\n    output:\n    tuple val(key), path(\"refined.tree\"), path('node.data.json')\n\n\"\"\"\n#make date file\necho -e 'name\\tdate'>input_dates.tsv;\nfertree extract taxa -i $tree | \\\nawk '{n=split(\\$1,a,\"\\\\|\");printf \"%s\\\\t%s\\\\n\",\\$1,a[n]}'>>input_dates.tsv;\n\naugur refine \\\n            --tree $tree \\\n            --metadata input_dates.tsv \\\n            --alignment $alignment \\\n            --output-tree refined.tree \\\n            --output-node-data node.data.json \\\n            --timetree \\\n            --keep-root \\\n            --keep-polytomies \\\n            --clock-rate $params.clock_rate \\\n            --date-inference marginal \\\n            --divergence-unit mutations \\\n            --no-covariance \\\n            --clock-filter-iqd $params.clock_filter\n\"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n#make date file\necho -e 'name\\tdate'>input_dates.tsv;\nfertree extract taxa -i $tree | \\\nawk '{n=split(\\$1,a,\"\\\\|\");printf \"%s\\\\t%s\\\\n\",\\$1,a[n]}'>>input_dates.tsv;\n\naugur refine \\\n            --tree $tree \\\n            --metadata input_dates.tsv \\\n            --alignment $alignment \\\n            --output-tree refined.tree \\\n            --output-node-data node.data.json \\\n            --timetree \\\n            --keep-root \\\n            --keep-polytomies \\\n            --clock-rate $params.clock_rate \\\n            --date-inference marginal \\\n            --divergence-unit mutations \\\n            --no-covariance \\\n            --clock-filter-iqd $params.clock_filter\n\"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "Augur"
        ],
        "tools_url": [
            "https://bio.tools/Augur"
        ],
        "tools_dico": [
            {
                "name": "Augur",
                "uri": "https://bio.tools/Augur",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2229",
                            "term": "Cell biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3450",
                                    "term": "Neurite measurement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Cell type prioritization in single-cell data.\n\nAugur is an R package to prioritize cell types involved in the response to an experimental perturbation within high-dimensional single-cell data. The intuition underlying Augur is that cells undergoing a profound response to a given experimental stimulus become more separable, in the space of molecular measurements, than cells that remain unaffected by the stimulus. Augur quantifies this separability by asking how readily the experimental sample labels associated with each cell (e.g., treatment vs. control) can be predicted from molecular measurements alone. This is achieved by training a machine-learning model specific to each cell type, to predict the experimental condition from which each individual cell originated. The accuracy of each cell type-specific classifier is evaluated in cross-validation, providing a quantitative basis for cell type prioritization",
                "homepage": "https://github.com/neurorestore/Augur"
            }
        ],
        "inputs": [
            "key",
            "tree",
            "alignment"
        ],
        "nb_inputs": 3,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\""
        ],
        "when": "",
        "stub": ""
    },
    "ancestral": {
        "name_process": "ancestral",
        "string_process": "\nprocess ancestral {\n    input:\n     path(tree)\n     path(alignment)\n    output:\n    path('nt_muts.json')\n\n\"\"\"\naugur ancestral \\\n            --tree $tree \\\n            --alignment $alignment \\\n            --output-node-data nt_muts.json \\\n            --inference joint \\\n            --infer-ambiguous\n\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\naugur ancestral \\\n            --tree $tree \\\n            --alignment $alignment \\\n            --output-node-data nt_muts.json \\\n            --inference joint \\\n            --infer-ambiguous\n\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Augur"
        ],
        "tools_url": [
            "https://bio.tools/Augur"
        ],
        "tools_dico": [
            {
                "name": "Augur",
                "uri": "https://bio.tools/Augur",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2229",
                            "term": "Cell biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3450",
                                    "term": "Neurite measurement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Cell type prioritization in single-cell data.\n\nAugur is an R package to prioritize cell types involved in the response to an experimental perturbation within high-dimensional single-cell data. The intuition underlying Augur is that cells undergoing a profound response to a given experimental stimulus become more separable, in the space of molecular measurements, than cells that remain unaffected by the stimulus. Augur quantifies this separability by asking how readily the experimental sample labels associated with each cell (e.g., treatment vs. control) can be predicted from molecular measurements alone. This is achieved by training a machine-learning model specific to each cell type, to predict the experimental condition from which each individual cell originated. The accuracy of each cell type-specific classifier is evaluated in cross-validation, providing a quantitative basis for cell type prioritization",
                "homepage": "https://github.com/neurorestore/Augur"
            }
        ],
        "inputs": [
            "tree",
            "alignment"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "translate": {
        "name_process": "translate",
        "string_process": "\nprocess translate {\n    input:\n    path(tree)\n    path(nt_muts)\n    output:\n    path('aa_muts.json')\n\n\"\"\"\naugur translate \\\n            --tree $tree \\\n            --ancestral-sequences $nt_muts \\\n            --reference-sequence ${projectDir}/reference/reference_seq.gb \\\n            --output-node-data aa_muts.json\n\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\naugur translate \\\n            --tree $tree \\\n            --ancestral-sequences $nt_muts \\\n            --reference-sequence ${projectDir}/reference/reference_seq.gb \\\n            --output-node-data aa_muts.json\n\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Augur"
        ],
        "tools_url": [
            "https://bio.tools/Augur"
        ],
        "tools_dico": [
            {
                "name": "Augur",
                "uri": "https://bio.tools/Augur",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2229",
                            "term": "Cell biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3450",
                                    "term": "Neurite measurement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Cell type prioritization in single-cell data.\n\nAugur is an R package to prioritize cell types involved in the response to an experimental perturbation within high-dimensional single-cell data. The intuition underlying Augur is that cells undergoing a profound response to a given experimental stimulus become more separable, in the space of molecular measurements, than cells that remain unaffected by the stimulus. Augur quantifies this separability by asking how readily the experimental sample labels associated with each cell (e.g., treatment vs. control) can be predicted from molecular measurements alone. This is achieved by training a machine-learning model specific to each cell type, to predict the experimental condition from which each individual cell originated. The accuracy of each cell type-specific classifier is evaluated in cross-validation, providing a quantitative basis for cell type prioritization",
                "homepage": "https://github.com/neurorestore/Augur"
            }
        ],
        "inputs": [
            "tree",
            "nt_muts"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "v2": {
        "name_process": "v2",
        "string_process": "\nprocess v2 {\n    publishDir \"${params.outDir}/auspice\" , pattern: \"final.json\", mode:\"move\", saveAs: {\"${key}.json\"}\n\n    input:\n    path(tree)\n    path(nt_muts)\n    path(aa_muts)\n    path(node_data)\n    path(metadata)\n    path(config)\n    output:\n    path('final.json')\n\n\"\"\"\naugur export v2 \\\n            --tree $tree \\\n             --node-data $nt_muts $aa_muts $node_data \\\n             --auspice-config $config \\\n             --metadata $metadata \\\n             --output final.json\t\n\"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\naugur export v2 \\\n            --tree $tree \\\n             --node-data $nt_muts $aa_muts $node_data \\\n             --auspice-config $config \\\n             --metadata $metadata \\\n             --output final.json\t\n\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Augur"
        ],
        "tools_url": [
            "https://bio.tools/Augur"
        ],
        "tools_dico": [
            {
                "name": "Augur",
                "uri": "https://bio.tools/Augur",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2229",
                            "term": "Cell biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3450",
                                    "term": "Neurite measurement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Cell type prioritization in single-cell data.\n\nAugur is an R package to prioritize cell types involved in the response to an experimental perturbation within high-dimensional single-cell data. The intuition underlying Augur is that cells undergoing a profound response to a given experimental stimulus become more separable, in the space of molecular measurements, than cells that remain unaffected by the stimulus. Augur quantifies this separability by asking how readily the experimental sample labels associated with each cell (e.g., treatment vs. control) can be predicted from molecular measurements alone. This is achieved by training a machine-learning model specific to each cell type, to predict the experimental condition from which each individual cell originated. The accuracy of each cell type-specific classifier is evaluated in cross-validation, providing a quantitative basis for cell type prioritization",
                "homepage": "https://github.com/neurorestore/Augur"
            }
        ],
        "inputs": [
            "tree",
            "nt_muts",
            "aa_muts",
            "node_data",
            "metadata",
            "config"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "publishDir \"${params.outDir}/auspice\" , pattern: \"final.json\", mode:\"move\", saveAs: {\"${key}.json\"}"
        ],
        "when": "",
        "stub": ""
    },
    "tree_time": {
        "name_process": "tree_time",
        "string_process": "\nprocess tree_time{\n    tag \"$key\"\n    stageInMode 'copy'\n    publishDir \"${params.outDir}/input_trees\" , pattern: \"outliers.txt\", saveAs: {\"${key}.outliers.txt\"}\n    input:\n        tuple val(key), path(tree)\n    output:\n        tuple val(key), path(\"divergence_tree.nexus\"),path(\"timetree.nexus\"), path(\"outliers.txt\")\n    script:\nif(params.clock_rate==null)\n\"\"\"\ngotree reformat nexus -i $tree -o timetree.nexus\ngotree reformat nexus -i $tree -o divergence_tree.nexus\ntouch outliers.txt\n\n\"\"\"\nelse\n\"\"\"\n#make date file\necho -e 'name\\tdate'>input_dates.tsv\nfertree extract taxa -i $tree | \\\nawk '{n=split(\\$1,a,\"\\\\|\");printf \"%s\\\\t%s\\\\n\",\\$1,a[n]}'>>input_dates.tsv\n\ntreetime --tree $tree \\\n    --dates input_dates.tsv \\\n    --keep-root \\\n    --keep-polytomies \\\n    --sequence-length $params.sequence_length \\\n    --clock-rate ${params.clock_rate} \\\n    --clock-filter $params.clock_filter \\\n    --outdir ./\n\nawk '\\$3==\"--\"{print \\$1}' dates.tsv > outliers.txt\n\n\"\"\"\n\n}",
        "nb_lignes_process": 36,
        "string_script": "if(params.clock_rate==null)\n\"\"\"\ngotree reformat nexus -i $tree -o timetree.nexus\ngotree reformat nexus -i $tree -o divergence_tree.nexus\ntouch outliers.txt\n\n\"\"\"\nelse\n\"\"\"\n#make date file\necho -e 'name\\tdate'>input_dates.tsv\nfertree extract taxa -i $tree | \\\nawk '{n=split(\\$1,a,\"\\\\|\");printf \"%s\\\\t%s\\\\n\",\\$1,a[n]}'>>input_dates.tsv\n\ntreetime --tree $tree \\\n    --dates input_dates.tsv \\\n    --keep-root \\\n    --keep-polytomies \\\n    --sequence-length $params.sequence_length \\\n    --clock-rate ${params.clock_rate} \\\n    --clock-filter $params.clock_filter \\\n    --outdir ./\n\nawk '\\$3==\"--\"{print \\$1}' dates.tsv > outliers.txt\n\n\"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "tree"
        ],
        "nb_inputs": 2,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "stageInMode 'copy'",
            "publishDir \"${params.outDir}/input_trees\" , pattern: \"outliers.txt\", saveAs: {\"${key}.outliers.txt\"}"
        ],
        "when": "",
        "stub": ""
    },
    "clean_tree": {
        "name_process": "clean_tree",
        "string_process": "\nprocess clean_tree{\n    tag \"$key\"\n    input:\n          tuple val(key), path(divergence_tree),path(time_tree), path(outliers)\n    output:\n        tuple val(key), path(\"nocomments_divergence_tree.tree\") ,path(\"nocomments_time_tree.tree\") , path(outliers)\n    shell:\n        template 'clean_tree.sh'\n}",
        "nb_lignes_process": 8,
        "string_script": "        template 'clean_tree.sh'",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "key",
            "divergence_tree",
            "time_tree",
            "outliers"
        ],
        "nb_inputs": 4,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\""
        ],
        "when": "",
        "stub": ""
    },
    "resolve": {
        "name_process": "resolve",
        "string_process": "\nprocess resolve {\n    tag \"$key\"\n    input:\n        tuple val(key),path(ml_tree),path(time_tree)\n    output:\n        tuple val(key),path(ml_tree),path(\"resolved.nw\")\n\"\"\"\nRUST_LOG=info fertree resolve evenly -i $time_tree > resolved.nw 2>${key}.resolve.log\n\"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "\"\"\"\nRUST_LOG=info fertree resolve evenly -i $time_tree > resolved.nw 2>${key}.resolve.log\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "ml_tree",
            "time_tree"
        ],
        "nb_inputs": 3,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\""
        ],
        "when": "",
        "stub": ""
    },
    "cat": {
        "name_process": "cat",
        "string_process": "\nprocess cat {\n     tag \"$key\"\n    input:\n        tuple val(key), path(alignment),path(outgroup)\n    output:\n        tuple val(key), path(\"all.fa\")\n\n\"\"\"\ncat $alignment $outgroup > all.fa\n\"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\ncat $alignment $outgroup > all.fa\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "alignment",
            "outgroup"
        ],
        "nb_inputs": 3,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\""
        ],
        "when": "",
        "stub": ""
    },
    "to_nexus": {
        "name_process": "to_nexus",
        "string_process": "\nprocess to_nexus{\n    tag \"$key\"\n    publishDir \"${params.outDir}/input_trees\" , pattern: \"*nexus\",  saveAs: {it.replaceAll(\"tree\",key)}\n    input:\n        tuple val(key),path(tree)\n    output:\n        tuple val(key), path('tree.nexus')\n\n\"\"\"\ngotree reformat nexus -i $tree >tree.nexus\n\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\ngotree reformat nexus -i $tree >tree.nexus\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "tree"
        ],
        "nb_inputs": 2,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "publishDir \"${params.outDir}/input_trees\" , pattern: \"*nexus\", saveAs: {it.replaceAll(\"tree\",key)}"
        ],
        "when": "",
        "stub": ""
    },
    "make_taxa_nexus": {
        "name_process": "make_taxa_nexus",
        "string_process": "\nprocess make_taxa_nexus{\n    tag \"${key}\"\n        errorStrategy 'finish'\n    input:\n        tuple val(key), path(trees) \n    output:\n        tuple val(key), path(\"taxa.nexus\")\nshell:\n'''\ncutoff=$(grep -ni \"begin trees\" !{trees}  | cut -f1 -d:)\nawk  -v cutoff=\"$cutoff\" 'NR<cutoff {print}' !{trees}  >taxa.nexus\n'''\n\n}",
        "nb_lignes_process": 13,
        "string_script": "'''\ncutoff=$(grep -ni \"begin trees\" !{trees}  | cut -f1 -d:)\nawk  -v cutoff=\"$cutoff\" 'NR<cutoff {print}' !{trees}  >taxa.nexus\n'''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "trees"
        ],
        "nb_inputs": 2,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"${key}\"",
            "errorStrategy 'finish'"
        ],
        "when": "",
        "stub": ""
    },
    "beastgen": {
        "name_process": "beastgen",
        "string_process": "\nprocess beastgen{\n    tag \"${key}\"\n    stageInMode \"copy\"\n    publishDir \"${params.outDir}/DTA/xml\", pattern: \"*xml\",  saveAs:{\"${key}.DTA.xml\"}\n    publishDir \"${params.outDir}/DTA/xml\", pattern: \"*trees\",  saveAs:{\"${key}.emp.trees\"}\n    input: \n        tuple val(key),path(trees),path(taxa_nexus),path(traits),path(xml_template),val(dBeastgenOptions)\n    output:\n        tuple val(key),path(\"dta.xml\"),path(trees)\n\n\"\"\"\ncp $xml_template ./local_template;\nbeastgen -date_order -1 -date_prefix \"|\" -date_precision \\\n    -D \"outputFileStem=${key},empTreeFile=${trees.name},${dBeastgenOptions}\" \\\n    -traits $traits \\\n    local_template \\\n    $taxa_nexus \\\n    dta.xml\n\"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\ncp $xml_template ./local_template;\nbeastgen -date_order -1 -date_prefix \"|\" -date_precision \\\n    -D \"outputFileStem=${key},empTreeFile=${trees.name},${dBeastgenOptions}\" \\\n    -traits $traits \\\n    local_template \\\n    $taxa_nexus \\\n    dta.xml\n\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "dBeastgenOptions",
            "trees",
            "taxa_nexus",
            "traits",
            "xml_template"
        ],
        "nb_inputs": 6,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"${key}\"",
            "stageInMode \"copy\"",
            "publishDir \"${params.outDir}/DTA/xml\", pattern: \"*xml\", saveAs:{\"${key}.DTA.xml\"}",
            "publishDir \"${params.outDir}/DTA/xml\", pattern: \"*trees\", saveAs:{\"${key}.emp.trees\"}"
        ],
        "when": "",
        "stub": ""
    },
    "sample_meta": {
        "name_process": "sample_meta",
        "string_process": "\nprocess sample_meta{\n    tag \"$key\"\n    publishDir \"${params.outDir}/filter\" , pattern: \"*tsv\", saveAs: {it.replaceAll(\"meta\",key)}\n    input:\n        tuple val(key), path(metadata),val(n),val(wieghts)\n    output:\n        path(\"meta.tsv\")\n        tuple val(key), path(\"names.txt\"), emit : seqNames\n\"\"\"\nsampler -i $metadata -n $n -w $wieghts >meta.tsv;\n\ncut -f1 meta.tsv | sed 1,1d > names.txt\n\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\nsampler -i $metadata -n $n -w $wieghts >meta.tsv;\n\ncut -f1 meta.tsv | sed 1,1d > names.txt\n\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SamPler"
        ],
        "tools_url": [
            "https://bio.tools/SamPler"
        ],
        "tools_dico": [
            {
                "name": "SamPler",
                "uri": "https://bio.tools/SamPler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3407",
                            "term": "Endocrinology and metabolism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3407",
                            "term": "https://en.wikipedia.org/wiki/Endocrinology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> MEDIUM CONFIDENCE! | a novel method for selecting parameters for gene functional annotation routines | Novel strategy for selecting best parameters for gene functional annotation routines in merlin | readme instructions updated \u00b7 81b3a5a9",
                "homepage": "https://gitlab.bio.di.uminho.pt/merlin-sysbio/merlin-sampler"
            }
        ],
        "inputs": [
            "key",
            "n",
            "wieghts",
            "metadata"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "publishDir \"${params.outDir}/filter\" , pattern: \"*tsv\", saveAs: {it.replaceAll(\"meta\",key)}"
        ],
        "when": "",
        "stub": ""
    },
    "process_fa": {
        "name_process": "process_fa",
        "string_process": "\nprocess process_fa {\n    tag \"$key\"\n    publishDir \"${params.outDir}/filter\" , pattern: \"*fa\", saveAs: {it.replaceAll(\"fasta\",key)}\n\n    input:\n        tuple val(key), path(fasta), path(seqNames)\n    output:\n        tuple val(key), path(\"fasta.fa\")\n\"\"\"\nget_fasta_from_IDs.py $fasta $seqNames >fasta.fa\n\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\nget_fasta_from_IDs.py $fasta $seqNames >fasta.fa\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "fasta",
            "seqNames"
        ],
        "nb_inputs": 3,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "publishDir \"${params.outDir}/filter\" , pattern: \"*fa\", saveAs: {it.replaceAll(\"fasta\",key)}"
        ],
        "when": "",
        "stub": ""
    },
    "preliminary_beast_process": {
        "name_process": "preliminary_beast_process",
        "string_process": "\nprocess preliminary_beast_process{\n    stageInMode 'copy'\n    tag \"${key}-${seed}\"\n    label 'beast'\n    publishDir \"${params.outDir}/preliminary/${key}\", overwrite:\"true\"\n    input:\n        tuple val(key), path(xml_file), val(seed)\n    output:\n        tuple val(key), path(\"${seed}_${key}.log\"), emit: logs\n        tuple val(key), path(\"${seed}_${key}.trees\"), emit:trees\n        path(\"${seed}_${key}.ops\")\n        path(\"${key}-${seed}.out\")\n        path(\"${seed}_${key}.chkpt\") \n\"\"\"\nbeast   -save_every ${params.save_every} -save_state ${seed}_${key}.chkpt  -prefix ${seed}_ -seed ${seed}  ${xml_file} > ${key}-${seed}.out\n\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\nbeast   -save_every ${params.save_every} -save_state ${seed}_${key}.chkpt  -prefix ${seed}_ -seed ${seed}  ${xml_file} > ${key}-${seed}.out\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BEAST"
        ],
        "tools_url": [
            "https://bio.tools/beast"
        ],
        "tools_dico": [
            {
                "name": "BEAST",
                "uri": "https://bio.tools/beast",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic inference (from molecular sequences)"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree construction (from molecular sequences)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree generation (from molecular sequences)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Bayesian Evolutionary Analysis Sampling Trees is a cross-platform program for Bayesian analysis of molecular sequences using MCMC (Markov chain Monte Carlo). It is entirely orientated towards rooted, time-measured phylogenies inferred using strict or relaxed molecular clock models. It can be used as a method of reconstructing phylogenies but is also a framework for testing evolutionary hypotheses without conditioning on a single tree topology.",
                "homepage": "http://beast.bio.ed.ac.uk/"
            }
        ],
        "inputs": [
            "key",
            "seed",
            "xml_file"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "stageInMode 'copy'",
            "tag \"${key}-${seed}\"",
            "label 'beast'",
            "publishDir \"${params.outDir}/preliminary/${key}\", overwrite:\"true\""
        ],
        "when": "",
        "stub": ""
    },
    "DTA_beast_process": {
        "name_process": "DTA_beast_process",
        "string_process": "\nprocess DTA_beast_process{\n    tag \"${key}-${seed}\"\n    label 'beast'\n    publishDir \"${params.outDir}/DTA/${key}\", overwrite:\"true\"\n    input:\n        tuple val(key), path(xml_file), path(trees),val(seed)\n    output:\n        tuple val(key), path(\"${seed}_${key}.log\"), emit: logs\n        tuple val(key), path(\"${seed}_${key}.trees\"), emit:trees\n        path(\"${seed}_${key}.ops\")\n        path(\"${key}-${seed}.out\")\n                                          \n                                                    \n                                                        \n                                                      \n\n\"\"\"\nbeast   -beagle_scaling always -prefix ${seed}_ -seed ${seed}  ${xml_file} > ${key}-${seed}.out\n\"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\nbeast   -beagle_scaling always -prefix ${seed}_ -seed ${seed}  ${xml_file} > ${key}-${seed}.out\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BEAST"
        ],
        "tools_url": [
            "https://bio.tools/beast"
        ],
        "tools_dico": [
            {
                "name": "BEAST",
                "uri": "https://bio.tools/beast",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic inference (from molecular sequences)"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree construction (from molecular sequences)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree generation (from molecular sequences)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Bayesian Evolutionary Analysis Sampling Trees is a cross-platform program for Bayesian analysis of molecular sequences using MCMC (Markov chain Monte Carlo). It is entirely orientated towards rooted, time-measured phylogenies inferred using strict or relaxed molecular clock models. It can be used as a method of reconstructing phylogenies but is also a framework for testing evolutionary hypotheses without conditioning on a single tree topology.",
                "homepage": "http://beast.bio.ed.ac.uk/"
            }
        ],
        "inputs": [
            "key",
            "seed",
            "xml_file",
            "trees"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"${key}-${seed}\"",
            "label 'beast'",
            "publishDir \"${params.outDir}/DTA/${key}\", overwrite:\"true\""
        ],
        "when": "",
        "stub": ""
    },
    "DTA_beast_process_jar": {
        "name_process": "DTA_beast_process_jar",
        "string_process": "\nprocess DTA_beast_process_jar{\n    tag \"${key}-${seed}\"\n    label 'beast'\n    publishDir \"${params.outDir}/DTA/${key}\", overwrite:\"true\"\n    input:\n        tuple val(key), path(xml_file), path(trees),val(seed)\n    output:\n        tuple val(key), path(\"${seed}_${key}.log\"), emit: logs\n        tuple val(key), path(\"${seed}_${key}.location.history.trees\"), emit:trees\n        path(\"${seed}_${key}.ops\")\n        path(\"${key}-${seed}.out\")\n                                          \n                                                    \n                                                        \n        path(\"${seed}_${key}.complete.history.log\")\n\n\"\"\"\njava  -Xms64m -Xmx4096m -jar /usr/local/lib/beast.jar  -beagle_delay_scaling_off -beagle_scaling always -prefix ${seed}_ -seed ${seed}  ${xml_file} > ${key}-${seed}.out\n\"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\njava  -Xms64m -Xmx4096m -jar /usr/local/lib/beast.jar  -beagle_delay_scaling_off -beagle_scaling always -prefix ${seed}_ -seed ${seed}  ${xml_file} > ${key}-${seed}.out\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "seed",
            "xml_file",
            "trees"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"${key}-${seed}\"",
            "label 'beast'",
            "publishDir \"${params.outDir}/DTA/${key}\", overwrite:\"true\""
        ],
        "when": "",
        "stub": ""
    },
    "iqtree2": {
        "name_process": "iqtree2",
        "string_process": "\nprocess iqtree2{\n    tag \"$key\"\n    label 'tree_building'\n    input:\n        tuple val(key), path(alignment)\n    output:\n        tuple val(key), path(\"tree.treefile\")\n\"\"\"\niqtree2 -s $alignment $params.iqtree2_settings --prefix tree\n\"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "\"\"\"\niqtree2 -s $alignment $params.iqtree2_settings --prefix tree\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "alignment"
        ],
        "nb_inputs": 2,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "label 'tree_building'"
        ],
        "when": "",
        "stub": ""
    },
    "reroot": {
        "name_process": "reroot",
        "string_process": "\nprocess reroot {\n    tag \"$key\"\n    \n    input: \n       tuple val(key), path(tree), val(outgroup),val(prune)\n    output:\n       tuple val(key), path(\"rooted.nw\")\n    script:\n        if (prune)\n            \"\"\" \n            gotree reroot outgroup -i $tree \"$outgroup\" --remove-outgroup | gotree unroot > rooted.nw\n            \"\"\"\n        else\n            \"\"\"\n            gotree reroot outgroup -i $tree \"$outgroup\" | gotree unroot> rooted.nw\n            \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        if (prune)\n            \"\"\" \n            gotree reroot outgroup -i $tree \"$outgroup\" --remove-outgroup | gotree unroot > rooted.nw\n            \"\"\"\n        else\n            \"\"\"\n            gotree reroot outgroup -i $tree \"$outgroup\" | gotree unroot> rooted.nw\n            \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "outgroup",
            "prune",
            "tree"
        ],
        "nb_inputs": 4,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\""
        ],
        "when": "",
        "stub": ""
    },
    "rename": {
        "name_process": "rename",
        "string_process": "\nprocess rename {\n    tag \"$key\"\n    publishDir \"${params.outDir}/ML_tree\" , pattern: \"*nw\", saveAs: {\"${key}.nw\"}\n    input:\n    tuple val(key), path(tree), path(nameMap)\n    output:\n        tuple val(key), path(\"renamed.nw\")\n\"\"\"\ngotree rename -i $tree -m $nameMap -o renamed.nw\n\"\"\"\n\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\ngotree rename -i $tree -m $nameMap -o renamed.nw\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "tree",
            "nameMap"
        ],
        "nb_inputs": 3,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\"",
            "publishDir \"${params.outDir}/ML_tree\" , pattern: \"*nw\", saveAs: {\"${key}.nw\"}"
        ],
        "when": "",
        "stub": ""
    },
    "collapse": {
        "name_process": "collapse",
        "string_process": "\nprocess collapse {\n    tag \"$key\"\n    input:\n       tuple val(key),path(tree)\n    output:\n       tuple val(key),  path(\"collapsed.nw\")\n\"\"\"\ngotree collapse length -l $params.min_bl -i $tree -o collapsed.nw\n\"\"\" \n}",
        "nb_lignes_process": 9,
        "string_script": "\"\"\"\ngotree collapse length -l $params.min_bl -i $tree -o collapsed.nw\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "tree"
        ],
        "nb_inputs": 2,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "tag \"$key\""
        ],
        "when": "",
        "stub": ""
    },
    "process_refined_tree": {
        "name_process": "process_refined_tree",
        "string_process": "\nprocess process_refined_tree {\n    publishDir \"${params.outDir}/input_trees\" , pattern: \"*nexus\",  saveAs: {it.replaceAll(\"scaled\",key)}\n    tag \"$key\"\n    input:\n        tuple val(key), path(refined_tree), path(node_data)\n    output:\n        tuple val(key), path(\"scaled.nexus\")\n\n    \"\"\"\n    jq -r '.nodes | to_entries[] |[.key, .value.branch_length] | @tsv' $node_data > brlen.mut.tsv;\n    jq -r '.nodes | to_entries[] |[.key, .value.clock_length] | @tsv' $node_data > brlen.clock.tsv;\n\n\n    RUST_LOG=WARN fertree brlen set -f brlen.mut.tsv  -i $refined_tree | sed  's/NODE_[^:;]*//g' | gotree collapse length -l 0.5  >scaled.tree;\n    RUST_LOG=WARN fertree brlen set -f brlen.clock.tsv  -i $refined_tree | fertree resolve evenly | sed  's/NODE_[^:;]*//g' >>scaled.tree;\n\n    gotree reformat nexus -i scaled.tree -o scaled.nexus;\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    jq -r '.nodes | to_entries[] |[.key, .value.branch_length] | @tsv' $node_data > brlen.mut.tsv;\n    jq -r '.nodes | to_entries[] |[.key, .value.clock_length] | @tsv' $node_data > brlen.clock.tsv;\n\n\n    RUST_LOG=WARN fertree brlen set -f brlen.mut.tsv  -i $refined_tree | sed  's/NODE_[^:;]*//g' | gotree collapse length -l 0.5  >scaled.tree;\n    RUST_LOG=WARN fertree brlen set -f brlen.clock.tsv  -i $refined_tree | fertree resolve evenly | sed  's/NODE_[^:;]*//g' >>scaled.tree;\n\n    gotree reformat nexus -i scaled.tree -o scaled.nexus;\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "refined_tree",
            "node_data"
        ],
        "nb_inputs": 3,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "publishDir \"${params.outDir}/input_trees\" , pattern: \"*nexus\", saveAs: {it.replaceAll(\"scaled\",key)}",
            "tag \"$key\""
        ],
        "when": "",
        "stub": ""
    },
    "finalize_alignment": {
        "name_process": "finalize_alignment",
        "string_process": "\nprocess finalize_alignment {\n     publishDir \"${params.outDir}/alignment\" , pattern: \"*fa\",  saveAs: {it.replaceAll(\"final_alignment\",key)}\n     tag \"$key\"\n     input:\n        tuple val(key), path(nexus_tree), path(alignment)\n    output:\n        tuple val(key), path(\"final_alignment.fa\")\n\"\"\"\n# make the tip text\nRUST_LOG=WARN fertree extract taxa -i $nexus_tree -n | sort | uniq >tips.txt\npython3 $projectDir/bin/get_fasta_from_IDs.py $alignment tips.txt > final_alignment.fa\n\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\"\"\"\n# make the tip text\nRUST_LOG=WARN fertree extract taxa -i $nexus_tree -n | sort | uniq >tips.txt\npython3 $projectDir/bin/get_fasta_from_IDs.py $alignment tips.txt > final_alignment.fa\n\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "nexus_tree",
            "alignment"
        ],
        "nb_inputs": 3,
        "outputs": [
            "key"
        ],
        "nb_outputs": 1,
        "name_workflow": "jtmccr1__bft-nf",
        "directive": [
            "publishDir \"${params.outDir}/alignment\" , pattern: \"*fa\", saveAs: {it.replaceAll(\"final_alignment\",key)}",
            "tag \"$key\""
        ],
        "when": "",
        "stub": ""
    }
}
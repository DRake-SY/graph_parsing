{
    "OPERATION_1": {
        "string": "Channel\n        .fromPath(params.gtf)\n        .ifEmpty { exit 1, \"GTF annotation file not found: ${params.gtf}\" }\n        .into { gtfFile }",
        "origin": [
            [
                "params.gtf",
                "A"
            ]
        ],
        "gives": [
            [
                "gtfFile",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n        .fromPath(params.gff)\n        .ifEmpty { exit 1, \"GFF annotation file not found: ${params.gff}\" }\n        .into { gffFile }",
        "origin": [
            [
                "params.gff",
                "A"
            ]
        ],
        "gives": [
            [
                "gffFile",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n        .fromPath(params.phenotype_info)\n        .ifEmpty { exit 1, \"Phenotype file not found: ${params.phenotype_info}\" }\n        .into { phenotype_file }",
        "origin": [
            [
                "params.phenotype_info",
                "A"
            ]
        ],
        "gives": [
            [
                "phenotype_file",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "sample_sheet = Channel.fromPath(params.reads)",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "sample_sheet",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "sample_sheet_QC = Channel.fromPath(params.reads)",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "sample_sheet_QC",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "reads_ch = Channel.fromFilePairs(params.reads)",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "reads_ch",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "sample_sheet\n  .splitCsv(header:true)\n  .map{ row-> tuple(row.number, file(row.R1), file(row.R2)) }\n  .set { newSampleChannel }",
        "origin": [
            [
                "sample_sheet",
                "P"
            ]
        ],
        "gives": [
            [
                "newSampleChannel",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "sample_sheet_QC\n  .splitCsv(header:true)\n  .map{ row-> tuple(row.number, file(row.R1), file(row.R2)) }\n  .set { newSampleChannelFastQC }",
        "origin": [
            [
                "sample_sheet_QC",
                "P"
            ]
        ],
        "gives": [
            [
                "newSampleChannelFastQC",
                "P"
            ]
        ]
    }
}
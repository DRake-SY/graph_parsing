{
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions  {\n    publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode,\n        saveAs: { filename -> if (filename.indexOf('.csv') > 0) filename else null }\n\n    output:\n    file 'software_versions_mqc.yaml' into ch_software_versions_yaml\n    file 'software_versions.csv'\n\n\n    script:\n    \"\"\"\n\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    Rscript -e \"cat(as.character(packageVersion('CAMERA')),'\\\\n')\" &> v_camera.txt\n    Rscript -e \"cat(as.character(packageVersion('xcms')),'\\\\n')\" &> v_xcms.txt\n    Rscript -e \"cat(as.character(packageVersion('MSnbase')),'\\\\n')\" &> v_msnbase.txt\n    Rscript -e \"cat(as.character(packageVersion('IPO')),'\\\\n')\" &> v_ipo.txt\n    OpenMSInfo |  grep -oP -m 1 '([0-9][.][0-9][.][0-9])' &> v_openms.txt\n    sh /usr/bin/sirius/bin/sirius --loglevel=SEVERE --version 2>1 | grep -oP -m 1 '([0-9][.][0-9][.][0-9])' &> v_sirius.txt\n\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    Rscript -e \"cat(as.character(packageVersion('CAMERA')),'\\\\n')\" &> v_camera.txt\n    Rscript -e \"cat(as.character(packageVersion('xcms')),'\\\\n')\" &> v_xcms.txt\n    Rscript -e \"cat(as.character(packageVersion('MSnbase')),'\\\\n')\" &> v_msnbase.txt\n    Rscript -e \"cat(as.character(packageVersion('IPO')),'\\\\n')\" &> v_ipo.txt\n    OpenMSInfo |  grep -oP -m 1 '([0-9][.][0-9][.][0-9])' &> v_openms.txt\n    sh /usr/bin/sirius/bin/sirius --loglevel=SEVERE --version 2>1 | grep -oP -m 1 '([0-9][.][0-9][.][0-9])' &> v_sirius.txt\n\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "RASH"
        ],
        "tools_url": [
            "https://bio.tools/RASH"
        ],
        "tools_dico": [
            {
                "name": "RASH",
                "uri": "https://bio.tools/RASH",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Mathematics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Maths"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3778",
                                    "term": "Text annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Essential dynamics"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "PCA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Principal modes"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "ED"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "a Web-first format for HTML-based scholarly articles.\n\nResearch Articles in Simplified HTML (RASH) Framework includes a markup language defined as a subset of HTML+RDF for writing scientific articles, and related tools to convert it into different formats, to extract data from it, etc.\n\nHow to cite: Peroni, S., Osborne, F., Di Iorio, A., Nuzzolese, A. G., Poggi, F., Vitali, F., Motta, E. (2017). Research Articles in Simplified HTML: a Web-first format for HTML-based scholarly articles. PeerJ Computer Science 3: e132. e2513. DOI: https://doi.org/10.7717/peerj-cs.132.\n\n# rash-check.sh - fully check RASH documents.\n\nThe odt2rash.jar executable converts an ODT file into the RASH format.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Research Articles Simplified HTML', 'SAVE-SD'",
                "homepage": "https://w3id.org/people/essepuntato/papers/rash-peerj2016.html"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ch_software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode , saveAs: { filename -> if (filename.indexOf('.csv') > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    },
    "process_peak_picker_pos_openms": {
        "name_process": "process_peak_picker_pos_openms",
        "string_process": " process process_peak_picker_pos_openms  {\n            label 'openms'\n                                 \n            tag \"$mzMLFile\"\n            publishDir \"${params.outdir}/process_peak_picker_pos_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n            stageInMode 'copy'\n\n            input:\n            file mzMLFile from quant_mzml_files_pos\n            each file(setting_file) from peakpicker_ini_file_pos_openms\n\n            output:\n            file \"${mzMLFile}\" into masstrace_detection_process_pos, param_detection_process_pos\n\n            \"\"\"\n            PeakPickerHiRes -in $mzMLFile -out $mzMLFile -ini $setting_file\n            \"\"\"\n        }",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n            PeakPickerHiRes -in $mzMLFile -out $mzMLFile -ini $setting_file\n            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "quant_mzml_files_pos",
            "peakpicker_ini_file_pos_openms"
        ],
        "nb_inputs": 2,
        "outputs": [
            "masstrace_detection_process_pos",
            "param_detection_process_pos"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'openms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_peak_picker_pos_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_masstrace_detection_pos_openms": {
        "name_process": "process_masstrace_detection_pos_openms",
        "string_process": " process process_masstrace_detection_pos_openms  {\n                label 'openms'\n                                     \n                tag \"$mzMLFile\"\n                publishDir \"${params.outdir}/process_masstrace_detection_pos_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file mzMLFile from masstrace_detection_process_pos_openms\n                each file(setting_file) from featurefinder_ini_pos_openms\n\n                output:\n                file \"${mzMLFile.baseName}.featureXML\" into openms_to_xcms_conversion\n                file \"${mzMLFile.baseName}.mzML\" into rt_rdata_pos_xcms, openms_to_xcms_conversion_raw_pos\n\n                \"\"\"\n                FeatureFinderMetabo -in $mzMLFile -out ${mzMLFile.baseName}.featureXML -ini $setting_file\n                \"\"\"\n            }",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n                FeatureFinderMetabo -in $mzMLFile -out ${mzMLFile.baseName}.featureXML -ini $setting_file\n                \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "masstrace_detection_process_pos_openms",
            "featurefinder_ini_pos_openms"
        ],
        "nb_inputs": 2,
        "outputs": [
            "openms_to_xcms_conversion",
            "rt_rdata_pos_xcms",
            "openms_to_xcms_conversion_raw_pos"
        ],
        "nb_outputs": 3,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'openms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_masstrace_detection_pos_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_openms_to_xcms_conversion_pos": {
        "name_process": "process_openms_to_xcms_conversion_pos",
        "string_process": " process process_openms_to_xcms_conversion_pos  {\n                label 'xcmsconvert'\n                                     \n                tag \"$mzMLFile\"\n                publishDir \"${params.outdir}/process_openms_to_xcms_conversion_pos\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n\n\n                input:\n                file mzMLFile from openms_to_xcms_conversion\n                file mzMLFile2 from openms_to_xcms_conversion_raw_pos\n                each file(phenotype_file) from phenotype_design_pos\n\n                output:\n                file \"${mzMLFile.baseName}.rdata\" into collect_rdata_pos_xcms\n\n                \"\"\"\n                featurexmlToCamera.r \\\\\n                    input=$mzMLFile \\\\\n                    realFileName=$mzMLFile \\\\\n                    mzMLfiles=\\$PWD/$mzMLFile2 \\\\\n                    polarity=positive \\\\\n                    output=${mzMLFile.baseName}.rdata \\\\\n                    phenoFile=$phenotype_file  \\\\\n                    phenoDataColumn=$params.phenodatacolumn_quant_pos \\\\\n                    sampleClass=$params.sampleclass_quant_pos_xcms \\\\\n                    changeNameTO=${mzMLFile.baseName}.mzML\n                \"\"\"\n            }",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n                featurexmlToCamera.r \\\\\n                    input=$mzMLFile \\\\\n                    realFileName=$mzMLFile \\\\\n                    mzMLfiles=\\$PWD/$mzMLFile2 \\\\\n                    polarity=positive \\\\\n                    output=${mzMLFile.baseName}.rdata \\\\\n                    phenoFile=$phenotype_file  \\\\\n                    phenoDataColumn=$params.phenodatacolumn_quant_pos \\\\\n                    sampleClass=$params.sampleclass_quant_pos_xcms \\\\\n                    changeNameTO=${mzMLFile.baseName}.mzML\n                \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "openms_to_xcms_conversion",
            "openms_to_xcms_conversion_raw_pos",
            "phenotype_design_pos"
        ],
        "nb_inputs": 3,
        "outputs": [
            "collect_rdata_pos_xcms"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcmsconvert'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_openms_to_xcms_conversion_pos\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_ipo_param_pos_ipo": {
        "name_process": "process_ipo_param_pos_ipo",
        "string_process": " process process_ipo_param_pos_ipo {\n                    label 'ipo'\n                                         \n                    tag \"A collection of files\"\n                    publishDir \"${params.outdir}/process_ipo_param_pos_ipo\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                    input:\n                    file mzMLFile from param_detection_process_pos_ipo.collect()\n                    each file(phenotype_file) from phenotype_design_pos_param\n\n                    output:\n                    file \"quant_params_pos.json\" into param_to_detection_process_pos\n                    file \"rt_params_pos.json\" into param_to_rt_process_pos\n\n                    script:\n                    def inputs_aggregated = mzMLFile.collect{ \"$it\" }.join(\",\")\n\n                    \"\"\"\n                    touch quant_params_pos.json\n                    touch rt_params_pos.json\n\n                    ipo.r \\\\\n                        input=$inputs_aggregated \\\\\n                        quantOnly=$ipo_pos_globalAvoidRT \\\\\n                        allSamples=$params.ipo_allSamples_pos \\\\\n                        columnToSelect=$params.ipo_columnToSelect_pos  \\\\\n                        valueToSelect=$params.ipo_valueToSelect_pos \\\\\n                        phenoFile=$phenotype_file  \\\\\n                        methodXset=$params.ipo_methodXset_pos \\\\\n                        methodRT=$params.ipo_methodRT_pos \\\\\n                        noise_l=$params.ipo_noise_l_pos  \\\\\n                        noise_h=$params.ipo_noise_h_pos \\\\\n                        prefilter_l_l=$params.ipo_prefilter_l_l_pos \\\\\n                        prefilter_l_h=$params.ipo_prefilter_l_h_pos  \\\\\n                        prefilter_h_l=$params.ipo_prefilter_h_l_pos \\\\\n                        prefilter_h_h=$params.ipo_prefilter_h_h_pos  \\\\\n                        snthresh_l=$params.ipo_snthresh_l_pos \\\\\n                        snthresh_h=$params.ipo_snthresh_h_pos \\\\\n                        mzCenterFun=$params.ipo_mzCenterFun_pos  \\\\\n                        integrate=$params.ipo_integrate_pos \\\\\n                        fitgauss=$params.ipo_fitgauss_pos \\\\\n                        ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_pos  \\\\\n                        ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_pos \\\\\n                        ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_pos \\\\\n                        ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_pos \\\\\n                        ipo_ppm_l=$params.ipo_ppm_l_pos  \\\\\n                        ipo_ppm_h=$params.ipo_ppm_h_pos \\\\\n                        ipo_mzdiff_l=$params.ipo_mzdiff_l_pos \\\\\n                        ipo_mzdiff_h=$params.ipo_mzdiff_h_pos \\\\\n                        ipo_charge_camera=$params.ipo_charge_camera_pos \\\\\n                        ipo_max_ppm_camera=$params.ipo_max_ppm_camera_pos  \\\\\n                        response_l=$params.ipo_response_l_pos \\\\\n                        response_h=$params.ipo_response_h_pos \\\\\n                        distFunc=$params.ipo_distFunc_pos \\\\\n                        factorDiag_l=$params.ipo_factorDiag_l_pos \\\\\n                        factorDiag_h=$params.ipo_factorDiag_h_pos \\\\\n                        factorGap_l=$params.ipo_factorGap_l_pos  \\\\\n                        factorGap_h=$params.ipo_factorGap_h_pos \\\\\n                        localAlignment=$params.ipo_localAlignment_pos \\\\\n                        ipo_gapInit_l=$params.ipo_gapInit_l_pos \\\\\n                        ipo_gapInit_h=$params.ipo_gapInit_h_pos \\\\\n                        ipo_gapExtend_l=$params.ipo_gapExtend_l_pos  \\\\\n                        ipo_gapExtend_h=$params.ipo_gapExtend_h_pos \\\\\n                        ipo_profStep_l=$params.ipo_profStep_l_pos \\\\\n                        ipo_profStep_h=$params.ipo_profStep_h_pos \\\\\n                        bw_l=$params.ipo_bw_l_pos \\\\\n                        bw_h=$params.ipo_bw_h_pos \\\\\n                        minfrac_l=$params.ipo_minfrac_l_pos  \\\\\n                        minfrac_h=$params.ipo_minfrac_h_pos \\\\\n                        mzwid_l=$params.ipo_mzwid_l_pos \\\\\n                        mzwid_h=$params.ipo_mzwid_h_pos \\\\\n                        minsamp_l=$params.ipo_minsamp_l_pos  \\\\\n                        minsamp_h=$params.ipo_minsamp_h_pos \\\\\n                        max_l=$params.ipo_max_l_pos \\\\\n                        max_h=$params.ipo_max_h_pos \\\\\n                        ncores=$params.ipo_ncores_pos \\\\\n                        outputxset=quant_params_pos.json \\\\\n                        outputrt=rt_params_pos.json\n                    \"\"\"\n                }",
        "nb_lignes_process": 78,
        "string_script": "                    def inputs_aggregated = mzMLFile.collect{ \"$it\" }.join(\",\")\n\n                    \"\"\"\n                    touch quant_params_pos.json\n                    touch rt_params_pos.json\n\n                    ipo.r \\\\\n                        input=$inputs_aggregated \\\\\n                        quantOnly=$ipo_pos_globalAvoidRT \\\\\n                        allSamples=$params.ipo_allSamples_pos \\\\\n                        columnToSelect=$params.ipo_columnToSelect_pos  \\\\\n                        valueToSelect=$params.ipo_valueToSelect_pos \\\\\n                        phenoFile=$phenotype_file  \\\\\n                        methodXset=$params.ipo_methodXset_pos \\\\\n                        methodRT=$params.ipo_methodRT_pos \\\\\n                        noise_l=$params.ipo_noise_l_pos  \\\\\n                        noise_h=$params.ipo_noise_h_pos \\\\\n                        prefilter_l_l=$params.ipo_prefilter_l_l_pos \\\\\n                        prefilter_l_h=$params.ipo_prefilter_l_h_pos  \\\\\n                        prefilter_h_l=$params.ipo_prefilter_h_l_pos \\\\\n                        prefilter_h_h=$params.ipo_prefilter_h_h_pos  \\\\\n                        snthresh_l=$params.ipo_snthresh_l_pos \\\\\n                        snthresh_h=$params.ipo_snthresh_h_pos \\\\\n                        mzCenterFun=$params.ipo_mzCenterFun_pos  \\\\\n                        integrate=$params.ipo_integrate_pos \\\\\n                        fitgauss=$params.ipo_fitgauss_pos \\\\\n                        ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_pos  \\\\\n                        ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_pos \\\\\n                        ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_pos \\\\\n                        ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_pos \\\\\n                        ipo_ppm_l=$params.ipo_ppm_l_pos  \\\\\n                        ipo_ppm_h=$params.ipo_ppm_h_pos \\\\\n                        ipo_mzdiff_l=$params.ipo_mzdiff_l_pos \\\\\n                        ipo_mzdiff_h=$params.ipo_mzdiff_h_pos \\\\\n                        ipo_charge_camera=$params.ipo_charge_camera_pos \\\\\n                        ipo_max_ppm_camera=$params.ipo_max_ppm_camera_pos  \\\\\n                        response_l=$params.ipo_response_l_pos \\\\\n                        response_h=$params.ipo_response_h_pos \\\\\n                        distFunc=$params.ipo_distFunc_pos \\\\\n                        factorDiag_l=$params.ipo_factorDiag_l_pos \\\\\n                        factorDiag_h=$params.ipo_factorDiag_h_pos \\\\\n                        factorGap_l=$params.ipo_factorGap_l_pos  \\\\\n                        factorGap_h=$params.ipo_factorGap_h_pos \\\\\n                        localAlignment=$params.ipo_localAlignment_pos \\\\\n                        ipo_gapInit_l=$params.ipo_gapInit_l_pos \\\\\n                        ipo_gapInit_h=$params.ipo_gapInit_h_pos \\\\\n                        ipo_gapExtend_l=$params.ipo_gapExtend_l_pos  \\\\\n                        ipo_gapExtend_h=$params.ipo_gapExtend_h_pos \\\\\n                        ipo_profStep_l=$params.ipo_profStep_l_pos \\\\\n                        ipo_profStep_h=$params.ipo_profStep_h_pos \\\\\n                        bw_l=$params.ipo_bw_l_pos \\\\\n                        bw_h=$params.ipo_bw_h_pos \\\\\n                        minfrac_l=$params.ipo_minfrac_l_pos  \\\\\n                        minfrac_h=$params.ipo_minfrac_h_pos \\\\\n                        mzwid_l=$params.ipo_mzwid_l_pos \\\\\n                        mzwid_h=$params.ipo_mzwid_h_pos \\\\\n                        minsamp_l=$params.ipo_minsamp_l_pos  \\\\\n                        minsamp_h=$params.ipo_minsamp_h_pos \\\\\n                        max_l=$params.ipo_max_l_pos \\\\\n                        max_h=$params.ipo_max_h_pos \\\\\n                        ncores=$params.ipo_ncores_pos \\\\\n                        outputxset=quant_params_pos.json \\\\\n                        outputrt=rt_params_pos.json\n                    \"\"\"",
        "nb_lignes_script": 63,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "param_detection_process_pos_ipo",
            "phenotype_design_pos_param"
        ],
        "nb_inputs": 2,
        "outputs": [
            "param_to_detection_process_pos",
            "param_to_rt_process_pos"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'ipo'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_ipo_param_pos_ipo\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_masstrace_detection_pos_xcms": {
        "name_process": "process_masstrace_detection_pos_xcms",
        "string_process": " process process_masstrace_detection_pos_xcms {\n                label 'xcms'\n                                     \n                tag \"$mzMLFile\"\n                publishDir \"${params.outdir}/process_masstrace_detection_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file mzMLFile from masstrace_detection_process_pos_openms\n                each file(phenotype_file) from phenotype_design_pos\n                each file(paramsQ) from param_target_to_detection_process_pos\n\n                output:\n                file \"${mzMLFile.baseName}.rdata\" into collect_rdata_pos_xcms\n                file \"${mzMLFile.baseName}.mzML\" into rt_rdata_pos_xcms\n\n                script:\n                def filter_argument = paramsQ.name == 'quant_params_pos.json' ? \"ipo_in=${paramsQ}\" : ''\n                \"\"\"\n                findPeaks.r \\\\\n                    input=\\$PWD/$mzMLFile \\\\\n                    output=\\$PWD/${mzMLFile.baseName}.rdata \\\\\n                    ppm=$params.masstrace_ppm_pos_xcms \\\\\n                    peakwidthLow=$params.peakwidthlow_quant_pos_xcms  \\\\\n                    peakwidthHigh=$params.peakwidthhigh_quant_pos_xcms \\\\\n                    noise=$params.noise_quant_pos_xcms \\\\\n                    polarity=positive \\\\\n                    realFileName=$mzMLFile \\\\\n                    phenoFile=$phenotype_file  \\\\\n                    phenoDataColumn=$params.phenodatacolumn_quant_pos \\\\\n                    sampleClass=$params.sampleclass_quant_pos_xcms \\\\\n                    mzdiff=$params.mzdiff_quant_pos_xcms \\\\\n                    snthresh=$params.snthresh_quant_pos_xcms  \\\\\n                    prefilter_l=$params.prefilter_quant_pos_xcms \\\\\n                    prefilter_h=$params.value_of_prefilter_quant_pos_xcms \\\\\n                    mzCenterFun=$params.mzCenterFun_quant_pos_xcms \\\\\n                    integrate=$params.integrate_quant_pos_xcms  \\\\\n                    fitgauss=$params.fitgauss_quant_pos_xcms \\\\\n                    methodXset=$params.ipo_methodXset_pos \\\\\n                    methodRT=$params.ipo_methodRT_pos \\\\\n                    noise_l=$params.ipo_noise_l_pos  \\\\\n                    noise_h=$params.ipo_noise_h_pos \\\\\n                    prefilter_l_l=$params.ipo_prefilter_l_l_pos \\\\\n                    prefilter_l_h=$params.ipo_prefilter_l_h_pos  \\\\\n                    prefilter_h_l=$params.ipo_prefilter_h_l_pos \\\\\n                    prefilter_h_h=$params.ipo_prefilter_h_h_pos \\\\\n                    snthresh_l=$params.ipo_snthresh_l_pos \\\\\n                    snthresh_h=$params.ipo_snthresh_h_pos  \\\\\n                    mzCenterFun=$params.ipo_mzCenterFun_pos \\\\\n                    integrate=$params.ipo_integrate_pos \\\\\n                    fitgauss=$params.ipo_fitgauss_pos \\\\\n                    ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_pos  \\\\\n                    ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_pos \\\\\n                    ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_pos \\\\\n                    ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_pos \\\\\n                    ipo_ppm_l=$params.ipo_ppm_l_pos  \\\\\n                    ipo_ppm_h=$params.ipo_ppm_h_pos \\\\\n                    ipo_mzdiff_l=$params.ipo_mzdiff_l_pos \\\\\n                    ipo_mzdiff_h=$params.ipo_mzdiff_h_pos \\\\\n                    ipo_charge_camera=$params.ipo_charge_camera_pos \\\\\n                    ipo_max_ppm_camera=$params.ipo_max_ppm_camera_pos  \\\\\n                    ipo_inv=$ipo_pos_localQ \\\\\n                    $filter_argument\n                \"\"\"\n            }",
        "nb_lignes_process": 62,
        "string_script": "                def filter_argument = paramsQ.name == 'quant_params_pos.json' ? \"ipo_in=${paramsQ}\" : ''\n                \"\"\"\n                findPeaks.r \\\\\n                    input=\\$PWD/$mzMLFile \\\\\n                    output=\\$PWD/${mzMLFile.baseName}.rdata \\\\\n                    ppm=$params.masstrace_ppm_pos_xcms \\\\\n                    peakwidthLow=$params.peakwidthlow_quant_pos_xcms  \\\\\n                    peakwidthHigh=$params.peakwidthhigh_quant_pos_xcms \\\\\n                    noise=$params.noise_quant_pos_xcms \\\\\n                    polarity=positive \\\\\n                    realFileName=$mzMLFile \\\\\n                    phenoFile=$phenotype_file  \\\\\n                    phenoDataColumn=$params.phenodatacolumn_quant_pos \\\\\n                    sampleClass=$params.sampleclass_quant_pos_xcms \\\\\n                    mzdiff=$params.mzdiff_quant_pos_xcms \\\\\n                    snthresh=$params.snthresh_quant_pos_xcms  \\\\\n                    prefilter_l=$params.prefilter_quant_pos_xcms \\\\\n                    prefilter_h=$params.value_of_prefilter_quant_pos_xcms \\\\\n                    mzCenterFun=$params.mzCenterFun_quant_pos_xcms \\\\\n                    integrate=$params.integrate_quant_pos_xcms  \\\\\n                    fitgauss=$params.fitgauss_quant_pos_xcms \\\\\n                    methodXset=$params.ipo_methodXset_pos \\\\\n                    methodRT=$params.ipo_methodRT_pos \\\\\n                    noise_l=$params.ipo_noise_l_pos  \\\\\n                    noise_h=$params.ipo_noise_h_pos \\\\\n                    prefilter_l_l=$params.ipo_prefilter_l_l_pos \\\\\n                    prefilter_l_h=$params.ipo_prefilter_l_h_pos  \\\\\n                    prefilter_h_l=$params.ipo_prefilter_h_l_pos \\\\\n                    prefilter_h_h=$params.ipo_prefilter_h_h_pos \\\\\n                    snthresh_l=$params.ipo_snthresh_l_pos \\\\\n                    snthresh_h=$params.ipo_snthresh_h_pos  \\\\\n                    mzCenterFun=$params.ipo_mzCenterFun_pos \\\\\n                    integrate=$params.ipo_integrate_pos \\\\\n                    fitgauss=$params.ipo_fitgauss_pos \\\\\n                    ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_pos  \\\\\n                    ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_pos \\\\\n                    ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_pos \\\\\n                    ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_pos \\\\\n                    ipo_ppm_l=$params.ipo_ppm_l_pos  \\\\\n                    ipo_ppm_h=$params.ipo_ppm_h_pos \\\\\n                    ipo_mzdiff_l=$params.ipo_mzdiff_l_pos \\\\\n                    ipo_mzdiff_h=$params.ipo_mzdiff_h_pos \\\\\n                    ipo_charge_camera=$params.ipo_charge_camera_pos \\\\\n                    ipo_max_ppm_camera=$params.ipo_max_ppm_camera_pos  \\\\\n                    ipo_inv=$ipo_pos_localQ \\\\\n                    $filter_argument\n                \"\"\"",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "masstrace_detection_process_pos_openms",
            "phenotype_design_pos",
            "param_target_to_detection_process_pos"
        ],
        "nb_inputs": 3,
        "outputs": [
            "collect_rdata_pos_xcms",
            "rt_rdata_pos_xcms"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_masstrace_detection_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_collect_rdata_pos_xcms": {
        "name_process": "process_collect_rdata_pos_xcms",
        "string_process": " process process_collect_rdata_pos_xcms {\n        label 'xcms'\n                                     \n        tag \"A collection of files\"\n        publishDir \"${params.outdir}/process_collect_rdata_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from collect_rdata_pos_xcms.collect()\n\n        output:\n        file \"collection_pos.rdata\" into align_rdata_pos_xcms\n\n        script:\n        def inputs_aggregated = rdata_files.collect{ \"$it\" }.join(\",\")\n        \"\"\"\n        nextFlowDIR=\\$PWD\n        xcmsCollect.r input=$inputs_aggregated output=collection_pos.rdata\n        \"\"\"\n    }",
        "nb_lignes_process": 17,
        "string_script": "        def inputs_aggregated = rdata_files.collect{ \"$it\" }.join(\",\")\n        \"\"\"\n        nextFlowDIR=\\$PWD\n        xcmsCollect.r input=$inputs_aggregated output=collection_pos.rdata\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "collect_rdata_pos_xcms"
        ],
        "nb_inputs": 1,
        "outputs": [
            "align_rdata_pos_xcms"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_collect_rdata_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_align_peaks_pos_xcms": {
        "name_process": "process_align_peaks_pos_xcms",
        "string_process": " process process_align_peaks_pos_xcms {\n        label 'xcms'\n                                     \n        tag \"$rdata_files\"\n        publishDir \"${params.outdir}/process_align_peaks_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from align_rdata_pos_xcms\n        file rd from rt_rdata_pos_xcms.collect()\n        each file(paramsRT) from param_target_to_rt_process_pos\n\n        output:\n        file \"RTcorrected_pos.rdata\" into group_peaks_pos_N1_xcms\n\n        script:\n        def inputs_aggregated = rd.collect{ \"$it\" }.join(\",\")\n        def filter_argument = paramsRT.name == 'rt_params_pos.json' ? \"ipo_in=${paramsRT}\" : ''\n        \"\"\"\n        retCor.r \\\\\n            input=\\$PWD/$rdata_files \\\\\n            output=RTcorrected_pos.rdata \\\\\n            method=obiwarp \\\\\n            response_l=$params.ipo_response_l_pos \\\\\n            response_h=$params.ipo_response_h_pos \\\\\n            distFunc=$params.ipo_distFunc_pos  \\\\\n            factorDiag_l=$params.ipo_factorDiag_l_pos \\\\\n            factorDiag_h=$params.ipo_factorDiag_h_pos \\\\\n            factorGap_l=$params.ipo_factorGap_l_pos  \\\\\n            factorGap_h=$params.ipo_factorGap_h_pos \\\\\n            localAlignment=$params.ipo_localAlignment_pos \\\\\n            ipo_gapInit_l=$params.ipo_gapInit_l_pos \\\\\n            ipo_gapInit_h=$params.ipo_gapInit_h_pos \\\\\n            ipo_gapExtend_l=$params.ipo_gapExtend_l_pos  \\\\\n            ipo_gapExtend_h=$params.ipo_gapExtend_h_pos \\\\\n            ipo_profStep_l=$params.ipo_profStep_l_pos \\\\\n            ipo_profStep_h=$params.ipo_profStep_h_pos \\\\\n            bw_l=$params.ipo_bw_l_pos \\\\\n            bw_h=$params.ipo_bw_h_pos \\\\\n            minfrac_l=$params.ipo_minfrac_l_pos  \\\\\n            minfrac_h=$params.ipo_minfrac_h_pos \\\\\n            mzwid_l=$params.ipo_mzwid_l_pos \\\\\n            mzwid_h=$params.ipo_mzwid_h_pos \\\\\n            minsamp_l=$params.ipo_minsamp_l_pos  \\\\\n            minsamp_h=$params.ipo_minsamp_h_pos \\\\\n            max_l=$params.ipo_max_l_pos \\\\\n            max_h=$params.ipo_max_h_pos \\\\\n            ipo_inv=$ipo_pos_localRT \\\\\n            ncores=$params.ipo_ncores_pos  \\\\\n            profStep=$params.profStep_align_N1_pos_xcms \\\\\n            center=$params.center_align_N1_pos_xcms \\\\\n            response=$params.response_align_N1_pos_xcms  \\\\\n            distFunc=$params.distFunc_align_N1_pos_xcms \\\\\n            gapInit=$params.gapInit_align_N1_pos_xcms \\\\\n            gapExtend=$params.gapExtend_align_N1_pos_xcms  \\\\\n            factorDiag=$params.factorDiag_align_N1_pos_xcms \\\\\n            factorGap=$params.factorGap_align_N1_pos_xcms \\\\\n            localAlignment=$params.localAlignment_align_N1_pos_xcms \\\\\n            $filter_argument \\\\\n            inputraw=$inputs_aggregated\n\n        \"\"\"\n    }",
        "nb_lignes_process": 60,
        "string_script": "        def inputs_aggregated = rd.collect{ \"$it\" }.join(\",\")\n        def filter_argument = paramsRT.name == 'rt_params_pos.json' ? \"ipo_in=${paramsRT}\" : ''\n        \"\"\"\n        retCor.r \\\\\n            input=\\$PWD/$rdata_files \\\\\n            output=RTcorrected_pos.rdata \\\\\n            method=obiwarp \\\\\n            response_l=$params.ipo_response_l_pos \\\\\n            response_h=$params.ipo_response_h_pos \\\\\n            distFunc=$params.ipo_distFunc_pos  \\\\\n            factorDiag_l=$params.ipo_factorDiag_l_pos \\\\\n            factorDiag_h=$params.ipo_factorDiag_h_pos \\\\\n            factorGap_l=$params.ipo_factorGap_l_pos  \\\\\n            factorGap_h=$params.ipo_factorGap_h_pos \\\\\n            localAlignment=$params.ipo_localAlignment_pos \\\\\n            ipo_gapInit_l=$params.ipo_gapInit_l_pos \\\\\n            ipo_gapInit_h=$params.ipo_gapInit_h_pos \\\\\n            ipo_gapExtend_l=$params.ipo_gapExtend_l_pos  \\\\\n            ipo_gapExtend_h=$params.ipo_gapExtend_h_pos \\\\\n            ipo_profStep_l=$params.ipo_profStep_l_pos \\\\\n            ipo_profStep_h=$params.ipo_profStep_h_pos \\\\\n            bw_l=$params.ipo_bw_l_pos \\\\\n            bw_h=$params.ipo_bw_h_pos \\\\\n            minfrac_l=$params.ipo_minfrac_l_pos  \\\\\n            minfrac_h=$params.ipo_minfrac_h_pos \\\\\n            mzwid_l=$params.ipo_mzwid_l_pos \\\\\n            mzwid_h=$params.ipo_mzwid_h_pos \\\\\n            minsamp_l=$params.ipo_minsamp_l_pos  \\\\\n            minsamp_h=$params.ipo_minsamp_h_pos \\\\\n            max_l=$params.ipo_max_l_pos \\\\\n            max_h=$params.ipo_max_h_pos \\\\\n            ipo_inv=$ipo_pos_localRT \\\\\n            ncores=$params.ipo_ncores_pos  \\\\\n            profStep=$params.profStep_align_N1_pos_xcms \\\\\n            center=$params.center_align_N1_pos_xcms \\\\\n            response=$params.response_align_N1_pos_xcms  \\\\\n            distFunc=$params.distFunc_align_N1_pos_xcms \\\\\n            gapInit=$params.gapInit_align_N1_pos_xcms \\\\\n            gapExtend=$params.gapExtend_align_N1_pos_xcms  \\\\\n            factorDiag=$params.factorDiag_align_N1_pos_xcms \\\\\n            factorGap=$params.factorGap_align_N1_pos_xcms \\\\\n            localAlignment=$params.localAlignment_align_N1_pos_xcms \\\\\n            $filter_argument \\\\\n            inputraw=$inputs_aggregated\n\n        \"\"\"",
        "nb_lignes_script": 45,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "align_rdata_pos_xcms",
            "rt_rdata_pos_xcms",
            "param_target_to_rt_process_pos"
        ],
        "nb_inputs": 3,
        "outputs": [
            "group_peaks_pos_N1_xcms"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_align_peaks_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_group_peaks_pos_N1_xcms": {
        "name_process": "process_group_peaks_pos_N1_xcms",
        "string_process": " process process_group_peaks_pos_N1_xcms {\n        label 'xcms'\n                             \n        tag \"$rdata_files\"\n        publishDir \"${params.outdir}/process_group_peaks_pos_N1_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from group_peaks_pos_N1_xcms\n\n        output:\n        file \"groupN1_pos.rdata\" into temp_unfiltered_channel_pos_1\n\n        \"\"\"\n        group.r \\\\\n            input=$rdata_files \\\\\n            output=groupN1_pos.rdata \\\\\n            bandwidth=$params.bandwidth_group_N1_pos_xcms \\\\\n            minfrac=$params.minfrac_group_N1_pos_xcms \\\\\n            minsamp=$params.minsamp_group_N1_pos_xcms \\\\\n            max=$params.max_group_N1_pos_xcms  \\\\\n            mzwid=$params.mzwid_group_N1_pos_xcms\n        \"\"\"\n    }",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n        group.r \\\\\n            input=$rdata_files \\\\\n            output=groupN1_pos.rdata \\\\\n            bandwidth=$params.bandwidth_group_N1_pos_xcms \\\\\n            minfrac=$params.minfrac_group_N1_pos_xcms \\\\\n            minsamp=$params.minsamp_group_N1_pos_xcms \\\\\n            max=$params.max_group_N1_pos_xcms  \\\\\n            mzwid=$params.mzwid_group_N1_pos_xcms\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "group_peaks_pos_N1_xcms"
        ],
        "nb_inputs": 1,
        "outputs": [
            "temp_unfiltered_channel_pos_1"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_group_peaks_pos_N1_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_blank_filter_pos_xcms": {
        "name_process": "process_blank_filter_pos_xcms",
        "string_process": " process process_blank_filter_pos_xcms {\n            label 'xcms'\n                                 \n            tag \"$rdata_files\"\n            publishDir \"${params.outdir}/process_blank_filter_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file rdata_files from blankfilter_rdata_pos_xcms\n\n            output:\n            file \"blankFiltered_pos.rdata\" into temp_unfiltered_channel_pos_2\n\n            \"\"\"\n            blankfilter.r \\\\\n                input=$rdata_files \\\\\n                output=blankFiltered_pos.rdata \\\\\n                method=$params.method_blankfilter_pos_xcms \\\\\n                blank=$params.blank_blankfilter_pos_xcms \\\\\n                sample=$params.sample_blankfilter_pos_xcms \\\\\n                rest=$params.rest_blankfilter_pos_xcms\n            \"\"\"\n        }",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n            blankfilter.r \\\\\n                input=$rdata_files \\\\\n                output=blankFiltered_pos.rdata \\\\\n                method=$params.method_blankfilter_pos_xcms \\\\\n                blank=$params.blank_blankfilter_pos_xcms \\\\\n                sample=$params.sample_blankfilter_pos_xcms \\\\\n                rest=$params.rest_blankfilter_pos_xcms\n            \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blankfilter_rdata_pos_xcms"
        ],
        "nb_inputs": 1,
        "outputs": [
            "temp_unfiltered_channel_pos_2"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_blank_filter_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_dilution_filter_pos_xcms": {
        "name_process": "process_dilution_filter_pos_xcms",
        "string_process": " process process_dilution_filter_pos_xcms {\n            label 'xcms'\n                                 \n            tag \"$rdata_files\"\n            publishDir \"${params.outdir}/process_dilution_filter_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file rdata_files from dilutionfilter_rdata_pos_xcms\n\n            output:\n            file \"dilutionFiltered_pos.rdata\" into temp_unfiltered_channel_pos_3\n\n            \"\"\"\n            dilutionfilter.r \\\\\n                input=$rdata_files \\\\\n                output=dilutionFiltered_pos.rdata \\\\\n                Corto=$params.corto_dilutionfilter_pos_xcms  \\\\\n                dilution=$params.dilution_dilutionfilter_pos_xcms \\\\\n                pvalue=$params.pvalue_dilutionfilter_pos_xcms \\\\\n                corcut=$params.corcut_dilutionfilter_pos_xcms \\\\\n                abs=$params.abs_dilutionfilter_pos_xcms\n            \"\"\"\n        }",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n            dilutionfilter.r \\\\\n                input=$rdata_files \\\\\n                output=dilutionFiltered_pos.rdata \\\\\n                Corto=$params.corto_dilutionfilter_pos_xcms  \\\\\n                dilution=$params.dilution_dilutionfilter_pos_xcms \\\\\n                pvalue=$params.pvalue_dilutionfilter_pos_xcms \\\\\n                corcut=$params.corcut_dilutionfilter_pos_xcms \\\\\n                abs=$params.abs_dilutionfilter_pos_xcms\n            \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dilutionfilter_rdata_pos_xcms"
        ],
        "nb_inputs": 1,
        "outputs": [
            "temp_unfiltered_channel_pos_3"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_dilution_filter_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_cv_filter_pos_xcms": {
        "name_process": "process_cv_filter_pos_xcms",
        "string_process": " process process_cv_filter_pos_xcms {\n            label 'xcms'\n                                 \n            tag \"$rdata_files\"\n            publishDir \"${params.outdir}/process_cv_filter_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file rdata_files from cvfilter_rdata_pos_xcms\n\n            output:\n            file \"cvFiltered_pos.rdata\" into temp_unfiltered_channel_pos_4\n\n            \"\"\"\n            cvfilter.r \\\\\n                input=$rdata_files \\\\\n                output=cvFiltered_pos.rdata \\\\\n                qc=$params.qc_cvfilter_pos_xcms \\\\\n                cvcut=$params.cvcut_cvfilter_pos_xcms\n            \"\"\"\n        }",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n            cvfilter.r \\\\\n                input=$rdata_files \\\\\n                output=cvFiltered_pos.rdata \\\\\n                qc=$params.qc_cvfilter_pos_xcms \\\\\n                cvcut=$params.cvcut_cvfilter_pos_xcms\n            \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cvfilter_rdata_pos_xcms"
        ],
        "nb_inputs": 1,
        "outputs": [
            "temp_unfiltered_channel_pos_4"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_cv_filter_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_annotate_peaks_pos_camera": {
        "name_process": "process_annotate_peaks_pos_camera",
        "string_process": " process process_annotate_peaks_pos_camera {\n        label 'camera'\n                             \n        tag \"$rdata_files\"\n        publishDir \"${params.outdir}/process_annotate_peaks_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from annotation_rdata_pos_camera\n\n        output:\n        file \"CameraAnnotatePeaks_pos.rdata\" into group_rdata_pos_camera\n\n        \"\"\"\n        xsAnnotate.r  input=$rdata_files output=CameraAnnotatePeaks_pos.rdata\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n        xsAnnotate.r  input=$rdata_files output=CameraAnnotatePeaks_pos.rdata\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annotation_rdata_pos_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "group_rdata_pos_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_annotate_peaks_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_group_peaks_pos_camera": {
        "name_process": "process_group_peaks_pos_camera",
        "string_process": " process process_group_peaks_pos_camera {\n        label 'camera'\n                             \n        tag \"$rdata_files\"\n        publishDir \"${params.outdir}/process_group_peaks_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from group_rdata_pos_camera\n\n        output:\n        file \"CameraGroup_pos.rdata\" into findaddcuts_rdata_pos_camera\n\n        \"\"\"\n        groupFWHM.r \\\\\n            input=$rdata_files \\\\\n            output=CameraGroup_pos.rdata \\\\\n            sigma=$params.sigma_group_pos_camera \\\\\n            perfwhm=$params.perfwhm_group_pos_camera \\\\\n            intval=$params.intval_group_pos_camera\n        \"\"\"\n    }",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n        groupFWHM.r \\\\\n            input=$rdata_files \\\\\n            output=CameraGroup_pos.rdata \\\\\n            sigma=$params.sigma_group_pos_camera \\\\\n            perfwhm=$params.perfwhm_group_pos_camera \\\\\n            intval=$params.intval_group_pos_camera\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "group_rdata_pos_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "findaddcuts_rdata_pos_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_group_peaks_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_find_addcuts_pos_camera": {
        "name_process": "process_find_addcuts_pos_camera",
        "string_process": " process process_find_addcuts_pos_camera {\n        label 'camera'\n                             \n        tag \"$rdata_files\"\n        publishDir \"${params.outdir}/process_find_addcuts_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from findaddcuts_rdata_pos_camera\n\n        output:\n        file \"CameraFindAdducts_pos.rdata\" into findisotopes_rdata_pos_camera\n\n\n        \"\"\"\n        findAdducts.r \\\\\n            input=$rdata_files \\\\\n            output=CameraFindAdducts_pos.rdata \\\\\n            ppm=$params.ppm_findaddcuts_pos_camera \\\\\n            polarity=$params.polarity_findaddcuts_pos_camera\n        \"\"\"\n    }",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n        findAdducts.r \\\\\n            input=$rdata_files \\\\\n            output=CameraFindAdducts_pos.rdata \\\\\n            ppm=$params.ppm_findaddcuts_pos_camera \\\\\n            polarity=$params.polarity_findaddcuts_pos_camera\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "findaddcuts_rdata_pos_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "findisotopes_rdata_pos_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_find_addcuts_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_find_isotopes_pos_camera": {
        "name_process": "process_find_isotopes_pos_camera",
        "string_process": " process process_find_isotopes_pos_camera {\n        label 'camera'\n                             \n        tag \"$rdata_files\"\n        publishDir \"${params.outdir}/process_find_isotopes_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from findisotopes_rdata_pos_camera\n\n        output:\n        file \"CameraFindIsotopes_pos.rdata\" into mapmsmstocamera_rdata_pos_camera,mapmsmstoparam_rdata_pos_camera,prepareoutput_rdata_pos_camera_csifingerid, prepareoutput_rdata_pos_camera_cfmid, prepareoutput_rdata_pos_camera_metfrag, prepareoutput_rdata_pos_camera_library, prepareoutput_rdata_pos_camera_noid\n\n        \"\"\"\n        findIsotopes.r \\\\\n            input=$rdata_files \\\\\n            output=CameraFindIsotopes_pos.rdata \\\\\n            maxcharge=$params.maxcharge_findisotopes_pos_camera\n        \"\"\"\n    }",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n        findIsotopes.r \\\\\n            input=$rdata_files \\\\\n            output=CameraFindIsotopes_pos.rdata \\\\\n            maxcharge=$params.maxcharge_findisotopes_pos_camera\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "findisotopes_rdata_pos_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapmsmstocamera_rdata_pos_camera",
            "mapmsmstoparam_rdata_pos_camera",
            "prepareoutput_rdata_pos_camera_csifingerid",
            "prepareoutput_rdata_pos_camera_cfmid",
            "prepareoutput_rdata_pos_camera_metfrag",
            "prepareoutput_rdata_pos_camera_library",
            "prepareoutput_rdata_pos_camera_noid"
        ],
        "nb_outputs": 7,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_find_isotopes_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_peak_picker_msms_pos_openms": {
        "name_process": "process_peak_picker_msms_pos_openms",
        "string_process": " process process_peak_picker_msms_pos_openms  {\n              label 'openms'\n                                   \n              tag \"$mzMLFile\"\n              publishDir \"${params.outdir}/process_peak_picker_msms_pos_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n              stageInMode 'copy'\n\n              input:\n              file mzMLFile from id_mzml_files_pos\n              each file(setting_file) from peakpicker_ini_file_msms_pos_openms\n\n              output:\n              file \"${mzMLFile}\" into id_mzml_files_pos_msnbase\n\n              \"\"\"\n              PeakPickerHiRes -in $mzMLFile -out $mzMLFile -ini $setting_file\n              \"\"\"\n          }",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n              PeakPickerHiRes -in $mzMLFile -out $mzMLFile -ini $setting_file\n              \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id_mzml_files_pos",
            "peakpicker_ini_file_msms_pos_openms"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id_mzml_files_pos_msnbase"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'openms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_peak_picker_msms_pos_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_read_MS2_pos_msnbase": {
        "name_process": "process_read_MS2_pos_msnbase",
        "string_process": " process process_read_MS2_pos_msnbase {\n            label 'msnbase'\n                                 \n            tag \"$mzMLFile\"\n            publishDir \"${params.outdir}/process_read_MS2_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file mzMLFile from id_mzml_files_pos_msnbase\n\n            output:\n            file \"${mzMLFile.baseName}.rdata\" into mapmsmstocamera_rdata_pos_msnbase\n\n            \"\"\"\n            readMS2MSnBase.r \\\\\n                input=$mzMLFile \\\\\n                output=${mzMLFile.baseName}.rdata \\\\\n                inputname=${mzMLFile.baseName}\n            \"\"\"\n        }",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n            readMS2MSnBase.r \\\\\n                input=$mzMLFile \\\\\n                output=${mzMLFile.baseName}.rdata \\\\\n                inputname=${mzMLFile.baseName}\n            \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id_mzml_files_pos_msnbase"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapmsmstocamera_rdata_pos_msnbase"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_read_MS2_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_mapmsms_tocamera_pos_msnbase": {
        "name_process": "process_mapmsms_tocamera_pos_msnbase",
        "string_process": " process process_mapmsms_tocamera_pos_msnbase {\n            label 'msnbase'\n                                 \n            tag \"A collection of files\"\n            publishDir \"${params.outdir}/process_mapmsms_tocamera_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file rdata_files_ms2 from mapmsmstocamera_rdata_pos_msnbase.collect()\n            file rdata_files_ms1 from mapmsmstocamera_rdata_pos_camera\n\n            output:\n            file \"MapMsms2Camera_pos.rdata\" into mapmsmstoparam_rdata_pos_msnbase\n\n            script:\n            def input_args = rdata_files_ms2.collect{ \"$it\" }.join(\",\")\n            \"\"\"\n            mapMS2ToCamera.r \\\\\n                inputCAMERA=$rdata_files_ms1 \\\\\n                inputMS2=$input_args \\\\\n                output=MapMsms2Camera_pos.rdata \\\\\n                ppm=$params.ppm_mapmsmstocamera_pos_msnbase \\\\\n                rt=$params.rt_mapmsmstocamera_pos_msnbase \\\\\n                preprocess_ms2=$params.preprocess_msms_pos_msnbase \\\\\n                preprocess_msms_centroid=$params.preprocess_msms_centroid_pos_msnbase \\\\\n                preprocess_msms_merge=$params.preprocess_msms_merge_pos_msnbase \\\\\n                preprocess_msms_centroid_after_merge=$params.preprocess_msms_centroid_after_merge_pos_msnbase \\\\\n                preprocess_msms_ppm=$params.preprocess_msms_ppm_pos_msnbase \\\\\n                preprocess_msms_ppm_precursor=$params.preprocess_msms_ppm_precursor_pos_msnbase \\\\\n                preprocess_msms_abs_mz=$params.preprocess_msms_abs_mz_pos_msnbase \\\\\n                preprocess_msms_abs_mz_precursor=$params.preprocess_msms_abs_mz_precursor_pos_msnbase \\\\\n                preprocess_msms_rt=$params.preprocess_msms_rt_pos_msnbase \\\\\n                preprocess_msms_centroid_onlymapped=$params.preprocess_msms_centroid_onlymapped_pos_msnbase \\\\\n                preprocess_msms_merge_onlymapped=$params.preprocess_msms_merge_onlymapped_pos_msnbase \\\\\n                preprocess_msms_int_threshold=$params.preprocess_msms_int_threshold_pos_msnbase asd=ttt\n            \"\"\"\n        }",
        "nb_lignes_process": 34,
        "string_script": "            def input_args = rdata_files_ms2.collect{ \"$it\" }.join(\",\")\n            \"\"\"\n            mapMS2ToCamera.r \\\\\n                inputCAMERA=$rdata_files_ms1 \\\\\n                inputMS2=$input_args \\\\\n                output=MapMsms2Camera_pos.rdata \\\\\n                ppm=$params.ppm_mapmsmstocamera_pos_msnbase \\\\\n                rt=$params.rt_mapmsmstocamera_pos_msnbase \\\\\n                preprocess_ms2=$params.preprocess_msms_pos_msnbase \\\\\n                preprocess_msms_centroid=$params.preprocess_msms_centroid_pos_msnbase \\\\\n                preprocess_msms_merge=$params.preprocess_msms_merge_pos_msnbase \\\\\n                preprocess_msms_centroid_after_merge=$params.preprocess_msms_centroid_after_merge_pos_msnbase \\\\\n                preprocess_msms_ppm=$params.preprocess_msms_ppm_pos_msnbase \\\\\n                preprocess_msms_ppm_precursor=$params.preprocess_msms_ppm_precursor_pos_msnbase \\\\\n                preprocess_msms_abs_mz=$params.preprocess_msms_abs_mz_pos_msnbase \\\\\n                preprocess_msms_abs_mz_precursor=$params.preprocess_msms_abs_mz_precursor_pos_msnbase \\\\\n                preprocess_msms_rt=$params.preprocess_msms_rt_pos_msnbase \\\\\n                preprocess_msms_centroid_onlymapped=$params.preprocess_msms_centroid_onlymapped_pos_msnbase \\\\\n                preprocess_msms_merge_onlymapped=$params.preprocess_msms_merge_onlymapped_pos_msnbase \\\\\n                preprocess_msms_int_threshold=$params.preprocess_msms_int_threshold_pos_msnbase asd=ttt\n            \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mapmsmstocamera_rdata_pos_msnbase",
            "mapmsmstocamera_rdata_pos_camera"
        ],
        "nb_inputs": 2,
        "outputs": [
            "mapmsmstoparam_rdata_pos_msnbase"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_mapmsms_tocamera_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_mapmsms_toparam_pos_msnbase": {
        "name_process": "process_mapmsms_toparam_pos_msnbase",
        "string_process": " process process_mapmsms_toparam_pos_msnbase {\n            label 'msnbase'\n                                    \n            tag \"$rdata_files_ms1\"\n            publishDir \"${params.outdir}/process_mapmsms_toparam_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file rdata_files_ms2 from mapmsmstoparam_rdata_pos_msnbase\n            file rdata_files_ms1 from mapmsmstoparam_rdata_pos_camera\n\n            output:\n            file \"*.zip\" into csifingerid_txt_pos_msnbase, addcutremove_txt_pos_msnbase, metfrag_txt_pos_msnbase, cfmidin_txt_pos_msnbase\n\n            \"\"\"\n            mkdir out\n\n            MS2ToMetFrag.r \\\\\n                inputCAMERA=$rdata_files_ms1 \\\\\n                inputMS2=$rdata_files_ms2 \\\\\n                output=out  \\\\\n                precursorppm=$params.precursorppm_msmstoparam_pos_msnbase \\\\\n                fragmentppm=$params.fragmentppm_msmstoparam_pos_msnbase \\\\\n                fragmentabs=$params.fragmentabs_msmstoparam_pos_msnbase  \\\\\n                database=$params.database_msmstoparam_pos_msnbase \\\\\n                mode=$params.mode_msmstoparam_pos_msnbase \\\\\n                adductRules=$params.adductRules_msmstoparam_pos_msnbase \\\\\n                minPeaks=$params.minPeaks_msmstoparam_pos_msnbase\n\n            ls out/ -A -1  | cut -d'_' -f4- | tr ' ' '\\n' | sort -u | xargs -I %  find out/ -type f -iname *% -exec zip %.zip {} +\n            \"\"\"\n        }",
        "nb_lignes_process": 29,
        "string_script": "\"\"\"\n            mkdir out\n\n            MS2ToMetFrag.r \\\\\n                inputCAMERA=$rdata_files_ms1 \\\\\n                inputMS2=$rdata_files_ms2 \\\\\n                output=out  \\\\\n                precursorppm=$params.precursorppm_msmstoparam_pos_msnbase \\\\\n                fragmentppm=$params.fragmentppm_msmstoparam_pos_msnbase \\\\\n                fragmentabs=$params.fragmentabs_msmstoparam_pos_msnbase  \\\\\n                database=$params.database_msmstoparam_pos_msnbase \\\\\n                mode=$params.mode_msmstoparam_pos_msnbase \\\\\n                adductRules=$params.adductRules_msmstoparam_pos_msnbase \\\\\n                minPeaks=$params.minPeaks_msmstoparam_pos_msnbase\n\n            ls out/ -A -1  | cut -d'_' -f4- | tr ' ' '\\n' | sort -u | xargs -I %  find out/ -type f -iname *% -exec zip %.zip {} +\n            \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mapmsmstoparam_rdata_pos_msnbase",
            "mapmsmstoparam_rdata_pos_camera"
        ],
        "nb_inputs": 2,
        "outputs": [
            "csifingerid_txt_pos_msnbase",
            "addcutremove_txt_pos_msnbase",
            "metfrag_txt_pos_msnbase",
            "cfmidin_txt_pos_msnbase"
        ],
        "nb_outputs": 4,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$rdata_files_ms1\"",
            "publishDir \"${params.outdir}/process_mapmsms_toparam_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_ms2_identification_pos_csifingerid": {
        "name_process": "process_ms2_identification_pos_csifingerid",
        "string_process": " process process_ms2_identification_pos_csifingerid {\n                label 'csifingerid'\n                label 'process_verylong'\n                tag \"$parameters\"\n                publishDir \"${params.outdir}/process_ms2_identification_pos_csifingerid\", mode: params.publish_dir_mode\n\n                input:\n                file parameters from csifingerid_txt_pos_msnbase_flatten\n\n                output:\n                file \"${parameters.baseName}_Csifingerid_pos.zip\" into aggregateID_csv_pos_csifingerid\n                file \"${parameters.baseName}_class_Csifingerid_pos.csv\" into aggregateClass_csv_pos_csifingerid\n\n                \"\"\"\n                mkdir inputs\n                mkdir outputs\n                unzip  -j $parameters -d inputs/\n                touch ${parameters.baseName}_class_Csifingerid_pos.csv\n\n                fingerID.r \\\\\n                    input=\\$PWD/inputs \\\\\n                    database=$params.database_csifingerid_pos_csifingerid \\\\\n                    tryOffline=T  \\\\\n                    output=\\$PWD/outputs/ \\\\\n                    ncores=$params.ncore_csifingerid_pos_csifingerid \\\\\n                    timeout=$params.timeout_csifingerid_pos_csifingerid \\\\\n                    timeoutTree=$params.timeoutTree_csifingerid_pos_csifingerid \\\\\n                    UseHeuristic=$params.useheuristic_csifingerid_pos_csifingerid \\\\\n                    mzToUseHeuristicOnly=$params.mztouseheuristiconly_csifingerid_pos_csifingerid \\\\\n                    mzToUseHeuristic=$params.mztouseheuristic_csifingerid_pos_csifingerid \\\\\n                    canopus=T \\\\\n                    canopusOutput=\\$PWD/${parameters.baseName}_class_Csifingerid_pos.csv\n\n\n                    if [ -z \"\\$(ls -A outputs/)\" ]; then\n                    printf '%s\\n' \"No metabolites were identified. Check your settings\"\n                    #exit 1\n                    touch outputs/empty.csv\n                    zip -j -r ${parameters.baseName}_Csifingerid_pos.zip outputs/*.csv\n                    else\n                       zip -j -r ${parameters.baseName}_Csifingerid_pos.zip outputs/*.csv\n                    fi\n\n                \"\"\"\n            }",
        "nb_lignes_process": 43,
        "string_script": "\"\"\"\n                mkdir inputs\n                mkdir outputs\n                unzip  -j $parameters -d inputs/\n                touch ${parameters.baseName}_class_Csifingerid_pos.csv\n\n                fingerID.r \\\\\n                    input=\\$PWD/inputs \\\\\n                    database=$params.database_csifingerid_pos_csifingerid \\\\\n                    tryOffline=T  \\\\\n                    output=\\$PWD/outputs/ \\\\\n                    ncores=$params.ncore_csifingerid_pos_csifingerid \\\\\n                    timeout=$params.timeout_csifingerid_pos_csifingerid \\\\\n                    timeoutTree=$params.timeoutTree_csifingerid_pos_csifingerid \\\\\n                    UseHeuristic=$params.useheuristic_csifingerid_pos_csifingerid \\\\\n                    mzToUseHeuristicOnly=$params.mztouseheuristiconly_csifingerid_pos_csifingerid \\\\\n                    mzToUseHeuristic=$params.mztouseheuristic_csifingerid_pos_csifingerid \\\\\n                    canopus=T \\\\\n                    canopusOutput=\\$PWD/${parameters.baseName}_class_Csifingerid_pos.csv\n\n\n                    if [ -z \"\\$(ls -A outputs/)\" ]; then\n                    printf '%s\\n' \"No metabolites were identified. Check your settings\"\n                    #exit 1\n                    touch outputs/empty.csv\n                    zip -j -r ${parameters.baseName}_Csifingerid_pos.zip outputs/*.csv\n                    else\n                       zip -j -r ${parameters.baseName}_Csifingerid_pos.zip outputs/*.csv\n                    fi\n\n                \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [
            "listinputs"
        ],
        "tools_url": [
            "https://bio.tools/listinputs"
        ],
        "tools_dico": [
            {
                "name": "listinputs",
                "uri": "https://bio.tools/listinputs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Give a list of input files from different conditions/groups for DESeq analysis, DESeq can then charge these input files from the given list.",
                "homepage": "https://urgi.versailles.inra.fr/Tools/REPET"
            }
        ],
        "inputs": [
            "csifingerid_txt_pos_msnbase_flatten"
        ],
        "nb_inputs": 1,
        "outputs": [
            "aggregateID_csv_pos_csifingerid",
            "aggregateClass_csv_pos_csifingerid"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'csifingerid'",
            "label 'process_verylong'",
            "tag \"$parameters\"",
            "publishDir \"${params.outdir}/process_ms2_identification_pos_csifingerid\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_identification_aggregate_pos_csifingerid": {
        "name_process": "process_identification_aggregate_pos_csifingerid",
        "string_process": " process process_identification_aggregate_pos_csifingerid {\n                label 'msnbase'\n                                     \n                tag \"A collection of files\"\n                publishDir \"${params.outdir}/process_identification_aggregate_pos_csifingerid\", mode: params.publish_dir_mode\n\n                input:\n                file identification_result from aggregateID_csv_pos_csifingerid.collect()\n\n                output:\n                file \"aggregated_identification_csifingerid_pos.csv\" into csifingerid_tsv_pos_passatutto\n\n                \"\"\"\n                ulimit -s unlimited\n                mkdir all\n                for x in *.zip ; do unzip -d all -o -u \\$x ; done\n                zip -r Csifingerid_pos.zip all\n\n                aggregateMetfrag.r \\\\\n                    inputs=Csifingerid_pos.zip \\\\\n                    realNames=Csifingerid_pos.zip \\\\\n                    output=aggregated_identification_csifingerid_pos.csv \\\\\n                    filetype=zip \\\\\n                    outTable=T\n\n                sed -i '/^\\$/d' aggregated_identification_csifingerid_pos.csv\n                \"\"\"\n            }",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n                ulimit -s unlimited\n                mkdir all\n                for x in *.zip ; do unzip -d all -o -u \\$x ; done\n                zip -r Csifingerid_pos.zip all\n\n                aggregateMetfrag.r \\\\\n                    inputs=Csifingerid_pos.zip \\\\\n                    realNames=Csifingerid_pos.zip \\\\\n                    output=aggregated_identification_csifingerid_pos.csv \\\\\n                    filetype=zip \\\\\n                    outTable=T\n\n                sed -i '/^\\$/d' aggregated_identification_csifingerid_pos.csv\n                \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aggregateID_csv_pos_csifingerid"
        ],
        "nb_inputs": 1,
        "outputs": [
            "csifingerid_tsv_pos_passatutto"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_identification_aggregate_pos_csifingerid\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_pepcalculation_csifingerid_pos_passatutto": {
        "name_process": "process_pepcalculation_csifingerid_pos_passatutto",
        "string_process": " process process_pepcalculation_csifingerid_pos_passatutto {\n                label 'passatutto'\n                                     \n                tag \"$identification_result\"\n                publishDir \"${params.outdir}/process_pepcalculation_csifingerid_pos_passatutto\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file identification_result from csifingerid_tsv_pos_passatutto\n\n                output:\n                file \"pep_identification_csifingerid_pos.csv\" into csifingerid_tsv_pos_output\n\n                \"\"\"\n                if [ -s $identification_result ]; then\n                    metfragPEP.r \\\\\n                        input=$identification_result \\\\\n                        score=score \\\\\n                        output=pep_identification_csifingerid_pos.csv \\\\\n                        readTable=T\n                else\n                    touch pep_identification_csifingerid_pos.csv\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n                if [ -s $identification_result ]; then\n                    metfragPEP.r \\\\\n                        input=$identification_result \\\\\n                        score=score \\\\\n                        output=pep_identification_csifingerid_pos.csv \\\\\n                        readTable=T\n                else\n                    touch pep_identification_csifingerid_pos.csv\n                fi\n                \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "csifingerid_tsv_pos_passatutto"
        ],
        "nb_inputs": 1,
        "outputs": [
            "csifingerid_tsv_pos_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'passatutto'",
            "tag \"$identification_result\"",
            "publishDir \"${params.outdir}/process_pepcalculation_csifingerid_pos_passatutto\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_output_quantid_pos_camera_csifingerid": {
        "name_process": "process_output_quantid_pos_camera_csifingerid",
        "string_process": " process process_output_quantid_pos_camera_csifingerid {\n                label 'camera'\n                                        \n                tag \"$camera_input_quant\"\n                publishDir \"${params.outdir}/process_output_quantid_pos_camera_csifingerid\", mode: params.publish_dir_mode\n\n                input:\n                file phenotype_file from phenotype_design_pos_csifingerid\n                file camera_input_quant from prepareoutput_rdata_pos_camera_csifingerid\n                file csifingerid_input_identification from csifingerid_tsv_pos_output\n\n                output:\n                file \"*.txt\" into csifingerid_pos_finished\n\n                \"\"\"\n                if [ -s $csifingerid_input_identification ]; then\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputscores=$csifingerid_input_identification \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera  \\\\\n                        rt=$params.rt_output_pos_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=score \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera  \\\\\n                        selectedType=$params.selected_type_output_pos_camera \\\\\n                        rename=$params.rename_output_pos_camera \\\\\n                        renameCol=$params.rename_col_output_pos_camera  \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera  \\\\\n                        outputPeakTable=peaktablePOSout_pos_csifingerid.txt \\\\\n                        outputVariables=varsPOSout_pos_csifingerid.txt \\\\\n                        outputMetaData=metadataPOSout_pos_csifingerid.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                else\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera \\\\\n                        rt=$params.rt_output_pos_camera  \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=score \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera \\\\\n                        selectedType=$params.selected_type_output_pos_camera  \\\\\n                        rename=$params.rename_output_pos_camera \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera \\\\\n                        outputPeakTable=peaktablePOSout_pos_csifingerid.txt  \\\\\n                        outputVariables=varsPOSout_pos_csifingerid.txt \\\\\n                        outputMetaData=metadataPOSout_pos_csifingerid.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 65,
        "string_script": "\"\"\"\n                if [ -s $csifingerid_input_identification ]; then\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputscores=$csifingerid_input_identification \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera  \\\\\n                        rt=$params.rt_output_pos_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=score \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera  \\\\\n                        selectedType=$params.selected_type_output_pos_camera \\\\\n                        rename=$params.rename_output_pos_camera \\\\\n                        renameCol=$params.rename_col_output_pos_camera  \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera  \\\\\n                        outputPeakTable=peaktablePOSout_pos_csifingerid.txt \\\\\n                        outputVariables=varsPOSout_pos_csifingerid.txt \\\\\n                        outputMetaData=metadataPOSout_pos_csifingerid.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                else\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera \\\\\n                        rt=$params.rt_output_pos_camera  \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=score \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera \\\\\n                        selectedType=$params.selected_type_output_pos_camera  \\\\\n                        rename=$params.rename_output_pos_camera \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera \\\\\n                        outputPeakTable=peaktablePOSout_pos_csifingerid.txt  \\\\\n                        outputVariables=varsPOSout_pos_csifingerid.txt \\\\\n                        outputMetaData=metadataPOSout_pos_csifingerid.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                fi\n                \"\"\"",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype_design_pos_csifingerid",
            "prepareoutput_rdata_pos_camera_csifingerid",
            "csifingerid_tsv_pos_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "csifingerid_pos_finished"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$camera_input_quant\"",
            "publishDir \"${params.outdir}/process_output_quantid_pos_camera_csifingerid\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_ms2_identification_pos_metfrag": {
        "name_process": "process_ms2_identification_pos_metfrag",
        "string_process": " process process_ms2_identification_pos_metfrag {\n                label 'metfrag'\n                label 'process_verylong'\n                tag \"$parameters\"\n                publishDir \"${params.outdir}/process_ms2_identification_pos_metfrag\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file parameters from metfrag_txt_pos_msnbase_flatten\n                each file(metfrag_database) from database_csv_files_pos_metfrag\n\n                output:\n                file \"${parameters.baseName}_metfrag_pos.zip\" into aggregateID_csv_pos_metfrag\n                \"\"\"\n                mkdir inputs\n                mkdir outputs\n                unzip  -j $parameters -d inputs/\n                touch ${parameters.baseName}.csv\n                find \"\\$PWD/inputs\" -type f | \\\\\n                    parallel \\\\\n                        -j $params.ncore_pos_metfrag \\\\\n                        run_metfrag.sh \\\\\n                        -p {} \\\\\n                        -f \\$PWD/outputs/{/.}.csv \\\\\n                        -l \"\\$PWD/$metfrag_database\" \\\\\n                        -s \"OfflineMetFusionScore\"\n\n\n                if [ -z \"\\$(ls -A outputs/)\" ]; then\n                printf '%s\\n' \"No metabolites were identified. Check your settings\"\n                #exit 1\n                touch outputs/empty.csv\n                zip -j -r ${parameters.baseName}_metfrag_pos.zip outputs/*.csv\n                else\n                zip -j -r ${parameters.baseName}_metfrag_pos.zip outputs/*.csv\n                fi\n\n                \"\"\"\n            }",
        "nb_lignes_process": 36,
        "string_script": "\"\"\"\n                mkdir inputs\n                mkdir outputs\n                unzip  -j $parameters -d inputs/\n                touch ${parameters.baseName}.csv\n                find \"\\$PWD/inputs\" -type f | \\\\\n                    parallel \\\\\n                        -j $params.ncore_pos_metfrag \\\\\n                        run_metfrag.sh \\\\\n                        -p {} \\\\\n                        -f \\$PWD/outputs/{/.}.csv \\\\\n                        -l \"\\$PWD/$metfrag_database\" \\\\\n                        -s \"OfflineMetFusionScore\"\n\n\n                if [ -z \"\\$(ls -A outputs/)\" ]; then\n                printf '%s\\n' \"No metabolites were identified. Check your settings\"\n                #exit 1\n                touch outputs/empty.csv\n                zip -j -r ${parameters.baseName}_metfrag_pos.zip outputs/*.csv\n                else\n                zip -j -r ${parameters.baseName}_metfrag_pos.zip outputs/*.csv\n                fi\n\n                \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "parallelGWAS"
        ],
        "tools_url": [
            "https://bio.tools/parallelgwas"
        ],
        "tools_dico": [
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            }
        ],
        "inputs": [
            "metfrag_txt_pos_msnbase_flatten",
            "database_csv_files_pos_metfrag"
        ],
        "nb_inputs": 2,
        "outputs": [
            "aggregateID_csv_pos_metfrag"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'metfrag'",
            "label 'process_verylong'",
            "tag \"$parameters\"",
            "publishDir \"${params.outdir}/process_ms2_identification_pos_metfrag\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_identification_aggregate_pos_metfrag": {
        "name_process": "process_identification_aggregate_pos_metfrag",
        "string_process": " process process_identification_aggregate_pos_metfrag {\n                label 'msnbase'\n                                     \n                tag \"A collection of files\"\n                publishDir \"${params.outdir}/process_identification_aggregate_pos_metfrag\", mode: params.publish_dir_mode\n\n                input:\n                file identification_result from aggregateID_csv_pos_metfrag.collect()\n\n                output:\n                file \"aggregated_identification_metfrag_pos.csv\" into metfrag_tsv_pos_passatutto\n\n                \"\"\"\n                ulimit -s unlimited\n                mkdir all\n                for x in *.zip ; do unzip -d all -o -u \\$x ; done\n                zip -r metfrag_pos.zip all\n\n                aggregateMetfrag.r \\\\\n                    inputs=metfrag_pos.zip \\\\\n                    realNames=metfrag_pos.zip \\\\\n                    output=aggregated_identification_metfrag_pos.csv \\\\\n                    filetype=zip \\\\\n                    outTable=T\n\n                sed -i '/^\\$/d' aggregated_identification_metfrag_pos.csv\n                \"\"\"\n            }",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n                ulimit -s unlimited\n                mkdir all\n                for x in *.zip ; do unzip -d all -o -u \\$x ; done\n                zip -r metfrag_pos.zip all\n\n                aggregateMetfrag.r \\\\\n                    inputs=metfrag_pos.zip \\\\\n                    realNames=metfrag_pos.zip \\\\\n                    output=aggregated_identification_metfrag_pos.csv \\\\\n                    filetype=zip \\\\\n                    outTable=T\n\n                sed -i '/^\\$/d' aggregated_identification_metfrag_pos.csv\n                \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aggregateID_csv_pos_metfrag"
        ],
        "nb_inputs": 1,
        "outputs": [
            "metfrag_tsv_pos_passatutto"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_identification_aggregate_pos_metfrag\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_pepcalculation_metfrag_pos_passatutto": {
        "name_process": "process_pepcalculation_metfrag_pos_passatutto",
        "string_process": " process process_pepcalculation_metfrag_pos_passatutto {\n                label 'passatutto'\n                                     \n                tag \"$identification_result\"\n                publishDir \"${params.outdir}/process_pepcalculation_metfrag_pos_passatutto\", mode: params.publish_dir_mode\n\n                input:\n                file identification_result from metfrag_tsv_pos_passatutto\n\n                output:\n                file \"pep_identification_metfrag_pos.csv\" into metfrag_tsv_pos_output\n\n                \"\"\"\n                if [ -s $identification_result ];then\n                    metfragPEP.r \\\\\n                        input=$identification_result \\\\\n                        score=FragmenterScore \\\\\n                        output=pep_identification_metfrag_pos.csv \\\\\n                        readTable=T\n                else\n                    touch pep_identification_metfrag_pos.csv\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n                if [ -s $identification_result ];then\n                    metfragPEP.r \\\\\n                        input=$identification_result \\\\\n                        score=FragmenterScore \\\\\n                        output=pep_identification_metfrag_pos.csv \\\\\n                        readTable=T\n                else\n                    touch pep_identification_metfrag_pos.csv\n                fi\n                \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "metfrag_tsv_pos_passatutto"
        ],
        "nb_inputs": 1,
        "outputs": [
            "metfrag_tsv_pos_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'passatutto'",
            "tag \"$identification_result\"",
            "publishDir \"${params.outdir}/process_pepcalculation_metfrag_pos_passatutto\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_output_quantid_pos_camera_metfrag": {
        "name_process": "process_output_quantid_pos_camera_metfrag",
        "string_process": " process process_output_quantid_pos_camera_metfrag {\n                label 'camera'\n                                        \n                tag \"$camera_input_quant\"\n                publishDir \"${params.outdir}/process_output_quantid_pos_camera_metfrag\", mode: params.publish_dir_mode\n\n                input:\n                file phenotype_file from phenotype_design_pos_metfrag\n                file camera_input_quant from prepareoutput_rdata_pos_camera_metfrag\n                file metfrag_input_identification from metfrag_tsv_pos_output\n\n                output:\n                file \"*.txt\" into metfrag_pos_finished\n\n                \"\"\"\n                if [ -s $metfrag_input_identification ]; then\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputscores=$metfrag_input_identification \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera  \\\\\n                        rt=$params.rt_output_pos_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=FragmenterScore \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera  \\\\\n                        selectedType=$params.selected_type_output_pos_camera \\\\\n                        rename=$params.rename_output_pos_camera \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera  \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera  \\\\\n                        outputPeakTable=peaktablePOSout_pos_metfrag.txt \\\\\n                        outputVariables=varsPOSout_pos_metfrag.txt \\\\\n                        outputMetaData=metadataPOSout_pos_metfrag.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                else\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera \\\\\n                        rt=$params.rt_output_pos_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=FragmenterScore  \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera \\\\\n                        selectedType=$params.selected_type_output_pos_camera \\\\\n                        rename=$params.rename_output_pos_camera  \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera  \\\\\n                        outputPeakTable=peaktablePOSout_pos_metfrag.txt \\\\\n                        outputVariables=varsPOSout_pos_metfrag.txt \\\\\n                        outputMetaData=metadataPOSout_pos_metfrag.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 65,
        "string_script": "\"\"\"\n                if [ -s $metfrag_input_identification ]; then\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputscores=$metfrag_input_identification \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera  \\\\\n                        rt=$params.rt_output_pos_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=FragmenterScore \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera  \\\\\n                        selectedType=$params.selected_type_output_pos_camera \\\\\n                        rename=$params.rename_output_pos_camera \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera  \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera  \\\\\n                        outputPeakTable=peaktablePOSout_pos_metfrag.txt \\\\\n                        outputVariables=varsPOSout_pos_metfrag.txt \\\\\n                        outputMetaData=metadataPOSout_pos_metfrag.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                else\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera \\\\\n                        rt=$params.rt_output_pos_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=FragmenterScore  \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera \\\\\n                        selectedType=$params.selected_type_output_pos_camera \\\\\n                        rename=$params.rename_output_pos_camera  \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera  \\\\\n                        outputPeakTable=peaktablePOSout_pos_metfrag.txt \\\\\n                        outputVariables=varsPOSout_pos_metfrag.txt \\\\\n                        outputMetaData=metadataPOSout_pos_metfrag.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                fi\n                \"\"\"",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype_design_pos_metfrag",
            "prepareoutput_rdata_pos_camera_metfrag",
            "metfrag_tsv_pos_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "metfrag_pos_finished"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$camera_input_quant\"",
            "publishDir \"${params.outdir}/process_output_quantid_pos_camera_metfrag\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_ms2_identification_pos_cfmid": {
        "name_process": "process_ms2_identification_pos_cfmid",
        "string_process": " process process_ms2_identification_pos_cfmid {\n                label 'cfmid'\n                label 'process_verylong'\n                tag \"$parameters\"\n                publishDir \"${params.outdir}/process_ms2_identification_pos_cfmid\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file parameters from cfmid_txt_pos_msnbase_flatten\n                each file(cfmid_database) from database_csv_files_pos_cfmid\n\n                output:\n                file \"${parameters.baseName}_cfmid_pos.zip\" into aggregateID_csv_pos_cfmid\n\n                \"\"\"\n                mkdir inputs\n                mkdir outputs\n                unzip  -j $parameters -d inputs/\n                touch ${parameters.baseName}.csv\n                find \"\\$PWD/inputs\" -type f | \\\\\n                    parallel \\\\\n                        -j $params.ncore_pos_cfmid cfmid.r \\\\\n                        input={} \\\\\n                        realName={/} \\\\\n                        databaseFile=\\$PWD/$cfmid_database  \\\\\n                        output=\\$PWD/outputs/{/.}.csv \\\\\n                        candidate_id=$params.candidate_id_identification_pos_cfmid \\\\\n                        candidate_inchi_smiles=$params.candidate_inchi_smiles_identification_pos_cfmid \\\\\n                        candidate_mass=$params.candidate_mass_identification_pos_cfmid \\\\\n                        databaseNameColumn=$params.database_name_column_identification_pos_cfmid \\\\\n                        databaseInChIColumn=$params.database_inchI_column_identification_pos_cfmid \\\\\n                        scoreType=Jaccard\n\n\n                if [ -z \"\\$(ls -A outputs/)\" ]; then\n                printf '%s\\n' \"No metabolites were identified. Check your settings\"\n                #exit 1\n                touch outputs/empty.csv\n                zip -j -r ${parameters.baseName}_cfmid_pos.zip outputs/*.csv\n                else\n                zip -j -r ${parameters.baseName}_cfmid_pos.zip outputs/*.csv\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 41,
        "string_script": "\"\"\"\n                mkdir inputs\n                mkdir outputs\n                unzip  -j $parameters -d inputs/\n                touch ${parameters.baseName}.csv\n                find \"\\$PWD/inputs\" -type f | \\\\\n                    parallel \\\\\n                        -j $params.ncore_pos_cfmid cfmid.r \\\\\n                        input={} \\\\\n                        realName={/} \\\\\n                        databaseFile=\\$PWD/$cfmid_database  \\\\\n                        output=\\$PWD/outputs/{/.}.csv \\\\\n                        candidate_id=$params.candidate_id_identification_pos_cfmid \\\\\n                        candidate_inchi_smiles=$params.candidate_inchi_smiles_identification_pos_cfmid \\\\\n                        candidate_mass=$params.candidate_mass_identification_pos_cfmid \\\\\n                        databaseNameColumn=$params.database_name_column_identification_pos_cfmid \\\\\n                        databaseInChIColumn=$params.database_inchI_column_identification_pos_cfmid \\\\\n                        scoreType=Jaccard\n\n\n                if [ -z \"\\$(ls -A outputs/)\" ]; then\n                printf '%s\\n' \"No metabolites were identified. Check your settings\"\n                #exit 1\n                touch outputs/empty.csv\n                zip -j -r ${parameters.baseName}_cfmid_pos.zip outputs/*.csv\n                else\n                zip -j -r ${parameters.baseName}_cfmid_pos.zip outputs/*.csv\n                fi\n                \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "parallelGWAS"
        ],
        "tools_url": [
            "https://bio.tools/parallelgwas"
        ],
        "tools_dico": [
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            }
        ],
        "inputs": [
            "cfmid_txt_pos_msnbase_flatten",
            "database_csv_files_pos_cfmid"
        ],
        "nb_inputs": 2,
        "outputs": [
            "aggregateID_csv_pos_cfmid"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'cfmid'",
            "label 'process_verylong'",
            "tag \"$parameters\"",
            "publishDir \"${params.outdir}/process_ms2_identification_pos_cfmid\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_identification_aggregate_pos_cfmid": {
        "name_process": "process_identification_aggregate_pos_cfmid",
        "string_process": " process process_identification_aggregate_pos_cfmid {\n                label 'msnbase'\n                                     \n                tag \"A collection of files\"\n                publishDir \"${params.outdir}/process_identification_aggregate_pos_cfmid\", mode: params.publish_dir_mode\n\n                input:\n                file identification_result from aggregateID_csv_pos_cfmid.collect()\n\n                output:\n                file \"aggregated_identification_cfmid_pos.csv\" into cfmid_tsv_pos_passatutto\n\n                \"\"\"\n                ulimit -s unlimited\n                mkdir all\n                for x in *.zip ; do unzip -d all -o -u \\$x ; done\n                zip -r cfmid_pos.zip all\n\n                aggregateMetfrag.r \\\\\n                    inputs=cfmid_pos.zip \\\\\n                    realNames=cfmid_pos.zip \\\\\n                    output=aggregated_identification_cfmid_pos.csv \\\\\n                    filetype=zip \\\\\n                    outTable=T\n\n                sed -i '/^\\$/d' aggregated_identification_cfmid_pos.csv\n                \"\"\"\n            }",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n                ulimit -s unlimited\n                mkdir all\n                for x in *.zip ; do unzip -d all -o -u \\$x ; done\n                zip -r cfmid_pos.zip all\n\n                aggregateMetfrag.r \\\\\n                    inputs=cfmid_pos.zip \\\\\n                    realNames=cfmid_pos.zip \\\\\n                    output=aggregated_identification_cfmid_pos.csv \\\\\n                    filetype=zip \\\\\n                    outTable=T\n\n                sed -i '/^\\$/d' aggregated_identification_cfmid_pos.csv\n                \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aggregateID_csv_pos_cfmid"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cfmid_tsv_pos_passatutto"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_identification_aggregate_pos_cfmid\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_pepcalculation_cfmid_pos_passatutto": {
        "name_process": "process_pepcalculation_cfmid_pos_passatutto",
        "string_process": " process process_pepcalculation_cfmid_pos_passatutto {\n                label 'passatutto'\n                                     \n                tag \"$identification_result\"\n                publishDir \"${params.outdir}/process_pepcalculation_cfmid_pos_passatutto\", mode: params.publish_dir_mode\n\n                input:\n                file identification_result from cfmid_tsv_pos_passatutto\n\n                output:\n                file \"pep_identification_cfmid_pos.csv\" into cfmid_tsv_pos_output\n\n                \"\"\"\n                if [ -s $identification_result ]; then\n                    metfragPEP.r \\\\\n                        input=$identification_result \\\\\n                        score=Jaccard_Score \\\\\n                        output=pep_identification_cfmid_pos.csv \\\\\n                        readTable=T\n                else\n                    touch pep_identification_cfmid_pos.csv\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n                if [ -s $identification_result ]; then\n                    metfragPEP.r \\\\\n                        input=$identification_result \\\\\n                        score=Jaccard_Score \\\\\n                        output=pep_identification_cfmid_pos.csv \\\\\n                        readTable=T\n                else\n                    touch pep_identification_cfmid_pos.csv\n                fi\n                \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cfmid_tsv_pos_passatutto"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cfmid_tsv_pos_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'passatutto'",
            "tag \"$identification_result\"",
            "publishDir \"${params.outdir}/process_pepcalculation_cfmid_pos_passatutto\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_output_quantid_pos_camera_cfmid": {
        "name_process": "process_output_quantid_pos_camera_cfmid",
        "string_process": " process process_output_quantid_pos_camera_cfmid {\n                label 'camera'\n                                        \n                tag \"$camera_input_quant\"\n                publishDir \"${params.outdir}/process_output_quantid_pos_camera_cfmid\", mode: params.publish_dir_mode\n\n                input:\n                file phenotype_file from phenotype_design_pos_cfmid\n                file camera_input_quant from prepareoutput_rdata_pos_camera_cfmid\n                file cfmid_input_identification from cfmid_tsv_pos_output\n\n                output:\n                file \"*.txt\" into cfmid_pos_finished\n\n                \"\"\"\n                if [ -s $cfmid_input_identification ]; then\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputscores=$cfmid_input_identification \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera \\\\\n                        rt=$params.rt_output_pos_camera  \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=Jaccard_Score \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera \\\\\n                        selectedType=$params.selected_type_output_pos_camera  \\\\\n                        rename=$params.rename_output_pos_camera \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera  \\\\\n                        outputPeakTable=peaktablePOSout_pos_cfmid.txt \\\\\n                        outputVariables=varsPOSout_pos_cfmid.txt \\\\\n                        outputMetaData=metadataPOSout_pos_cfmid.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                else\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera \\\\\n                        rt=$params.rt_output_pos_camera  \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=Jaccard_Score \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera \\\\\n                        selectedType=$params.selected_type_output_pos_camera  \\\\\n                        rename=$params.rename_output_pos_camera \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera \\\\\n                        outputPeakTable=peaktablePOSout_pos_cfmid.txt  \\\\\n                        outputVariables=varsPOSout_pos_cfmid.txt \\\\\n                        outputMetaData=metadataPOSout_pos_cfmid.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 65,
        "string_script": "\"\"\"\n                if [ -s $cfmid_input_identification ]; then\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputscores=$cfmid_input_identification \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera \\\\\n                        rt=$params.rt_output_pos_camera  \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=Jaccard_Score \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera \\\\\n                        selectedType=$params.selected_type_output_pos_camera  \\\\\n                        rename=$params.rename_output_pos_camera \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera  \\\\\n                        outputPeakTable=peaktablePOSout_pos_cfmid.txt \\\\\n                        outputVariables=varsPOSout_pos_cfmid.txt \\\\\n                        outputMetaData=metadataPOSout_pos_cfmid.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                else\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera \\\\\n                        rt=$params.rt_output_pos_camera  \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=Jaccard_Score \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera \\\\\n                        selectedType=$params.selected_type_output_pos_camera  \\\\\n                        rename=$params.rename_output_pos_camera \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera \\\\\n                        outputPeakTable=peaktablePOSout_pos_cfmid.txt  \\\\\n                        outputVariables=varsPOSout_pos_cfmid.txt \\\\\n                        outputMetaData=metadataPOSout_pos_cfmid.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                fi\n                \"\"\"",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype_design_pos_cfmid",
            "prepareoutput_rdata_pos_camera_cfmid",
            "cfmid_tsv_pos_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "cfmid_pos_finished"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$camera_input_quant\"",
            "publishDir \"${params.outdir}/process_output_quantid_pos_camera_cfmid\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_peak_picker_library_pos_openms": {
        "name_process": "process_peak_picker_library_pos_openms",
        "string_process": " process process_peak_picker_library_pos_openms  {\n                        label 'openms'\n                                             \n                        tag \"$mzMLFile\"\n                        publishDir \"${params.outdir}/process_peak_picker_library_pos_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n                        stageInMode 'copy'\n\n                        input:\n                        file mzMLFile from quant_library_mzml_files_pos\n                        each file(setting_file) from peakpicker_ini_file_library_pos_openms\n\n                        output:\n                        file mzMLFile into masstrace_detection_process_library_pos, param_detection_process_library_pos\n\n                        \"\"\"\n                        PeakPickerHiRes -in $mzMLFile -out $mzMLFile -ini $setting_file\n                        \"\"\"\n                    }",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n                        PeakPickerHiRes -in $mzMLFile -out $mzMLFile -ini $setting_file\n                        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "quant_library_mzml_files_pos",
            "peakpicker_ini_file_library_pos_openms"
        ],
        "nb_inputs": 2,
        "outputs": [
            "masstrace_detection_process_library_pos",
            "param_detection_process_library_pos"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'openms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_peak_picker_library_pos_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_masstrace_detection_library_pos_openms": {
        "name_process": "process_masstrace_detection_library_pos_openms",
        "string_process": " process process_masstrace_detection_library_pos_openms  {\n                            label 'openms'\n                                                 \n                            tag \"$mzMLFile\"\n                            publishDir \"${params.outdir}/process_masstrace_detection_library_pos_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                            input:\n                            file mzMLFile from masstrace_detection_process_library_pos_openms\n                            each file(setting_file) from featurefinder_ini_library_pos_openms\n\n                            output:\n                            file \"${mzMLFile.baseName}.featureXML\" into openms_to_xcms_conversion\n                            file mzMLFile into openms_to_xcms_conversion_raw_pos_library\n\n                            \"\"\"\n                            FeatureFinderMetabo -in $mzMLFile -out ${mzMLFile.baseName}.featureXML -ini $setting_file\n                            \"\"\"\n                        }",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n                            FeatureFinderMetabo -in $mzMLFile -out ${mzMLFile.baseName}.featureXML -ini $setting_file\n                            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "masstrace_detection_process_library_pos_openms",
            "featurefinder_ini_library_pos_openms"
        ],
        "nb_inputs": 2,
        "outputs": [
            "openms_to_xcms_conversion",
            "openms_to_xcms_conversion_raw_pos_library"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'openms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_masstrace_detection_library_pos_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_openms_to_xcms_conversion_library_pos": {
        "name_process": "process_openms_to_xcms_conversion_library_pos",
        "string_process": " process process_openms_to_xcms_conversion_library_pos  {\n                            label 'xcmsconvert'\n                                                 \n                            tag \"$mzMLFile\"\n                            publishDir \"${params.outdir}/process_openms_to_xcms_conversion_library_pos\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                            input:\n                            file mzMLFile from openms_to_xcms_conversion\n                            file mzMLFile2 from openms_to_xcms_conversion_raw_pos_library\n                                                                                         \n\n                            output:\n                            file \"${mzMLFile.baseName}.rdata\" into annotation_rdata_library_pos_camera\n\n                            \"\"\"\n                            featurexmlToCamera.r \\\\\n                                input=$mzMLFile \\\\\n                                realFileName=$mzMLFile \\\\\n                                mzMLfiles=\\$PWD/$mzMLFile2 \\\\\n                                polarity=positive \\\\\n                                output=${mzMLFile.baseName}.rdata \\\\\n                                sampleClass=library \\\\\n                                changeNameTO=${mzMLFile.baseName}.mzML\n                            \"\"\"\n                        }",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n                            featurexmlToCamera.r \\\\\n                                input=$mzMLFile \\\\\n                                realFileName=$mzMLFile \\\\\n                                mzMLfiles=\\$PWD/$mzMLFile2 \\\\\n                                polarity=positive \\\\\n                                output=${mzMLFile.baseName}.rdata \\\\\n                                sampleClass=library \\\\\n                                changeNameTO=${mzMLFile.baseName}.mzML\n                            \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "openms_to_xcms_conversion",
            "openms_to_xcms_conversion_raw_pos_library"
        ],
        "nb_inputs": 2,
        "outputs": [
            "annotation_rdata_library_pos_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcmsconvert'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_openms_to_xcms_conversion_library_pos\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_ipo_param_library_pos_ipo": {
        "name_process": "process_ipo_param_library_pos_ipo",
        "string_process": " process process_ipo_param_library_pos_ipo {\n                                label 'ipo'\n                                                      \n                                tag \"A collection of files\"\n                                publishDir \"${params.outdir}/process_ipo_param_library_pos_ipo\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                                input:\n                                file mzMLFile from param_detection_process_library_pos_ipo.collect()\n\n                                output:\n                                file \"quant_params_library_pos.json\" into param_to_detection_process_library_pos\n                                file \"rt_params_library_pos.json\" into param_to_rt_process_library_pos\n\n                                script:\n                                def inputs_aggregated = mzMLFile.collect{ \"$it\" }.join(\",\")\n                                \"\"\"\n                                touch quant_params_library_pos.json\n                                touch rt_params_library_pos.json\n\n                                ipo.r \\\\\n                                    input=$inputs_aggregated \\\\\n                                    quantOnly=TRUE \\\\\n                                    allSamples=TRUE  \\\\\n                                    methodXset=$params.ipo_methodXset_library_pos \\\\\n                                    methodRT=$params.ipo_methodRT_library_pos \\\\\n                                    noise_l=$params.ipo_noise_l_library_pos  \\\\\n                                    noise_h=$params.ipo_noise_h_library_pos \\\\\n                                    prefilter_l_l=$params.ipo_prefilter_l_l_library_pos \\\\\n                                    prefilter_l_h=$params.ipo_prefilter_l_h_library_pos  \\\\\n                                    prefilter_h_l=$params.ipo_prefilter_h_l_library_pos \\\\\n                                    prefilter_h_h=$params.ipo_prefilter_h_h_library_pos  \\\\\n                                    snthresh_l=$params.ipo_snthresh_l_library_pos \\\\\n                                    snthresh_h=$params.ipo_snthresh_h_library_pos \\\\\n                                    mzCenterFun=$params.ipo_mzCenterFun_library_pos  \\\\\n                                    integrate=$params.ipo_integrate_library_pos \\\\\n                                    fitgauss=$params.ipo_fitgauss_library_pos \\\\\n                                    ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_library_pos  \\\\\n                                    ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_library_pos \\\\\n                                    ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_library_pos \\\\\n                                    ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_library_pos \\\\\n                                    ipo_ppm_l=$params.ipo_ppm_l_library_pos  \\\\\n                                    ipo_ppm_h=$params.ipo_ppm_h_library_pos \\\\\n                                    ipo_mzdiff_l=$params.ipo_mzdiff_l_library_pos \\\\\n                                    ipo_mzdiff_h=$params.ipo_mzdiff_h_library_pos \\\\\n                                    ipo_charge_camera=$params.ipo_charge_camera_library_pos \\\\\n                                    ipo_max_ppm_camera=$params.ipo_max_ppm_camera_library_pos  \\\\\n                                    response_l=$params.ipo_response_l_library_pos \\\\\n                                    response_h=$params.ipo_response_h_library_pos \\\\\n                                    distFunc=$params.ipo_distFunc_library_pos \\\\\n                                    factorDiag_l=$params.ipo_factorDiag_l_library_pos \\\\\n                                    factorDiag_h=$params.ipo_factorDiag_h_library_pos \\\\\n                                    factorGap_l=$params.ipo_factorGap_l_library_pos  \\\\\n                                    factorGap_h=$params.ipo_factorGap_h_library_pos \\\\\n                                    localAlignment=$params.ipo_localAlignment_library_pos \\\\\n                                    ipo_gapInit_l=$params.ipo_gapInit_l_library_pos \\\\\n                                    ipo_gapInit_h=$params.ipo_gapInit_h_library_pos \\\\\n                                    ipo_gapExtend_l=$params.ipo_gapExtend_l_library_pos  \\\\\n                                    ipo_gapExtend_h=$params.ipo_gapExtend_h_library_pos \\\\\n                                    ipo_profStep_l=$params.ipo_profStep_l_library_pos \\\\\n                                    ipo_profStep_h=$params.ipo_profStep_h_library_pos \\\\\n                                    bw_l=$params.ipo_bw_l_library_pos \\\\\n                                    bw_h=$params.ipo_bw_h_library_pos \\\\\n                                    minfrac_l=$params.ipo_minfrac_l_library_pos  \\\\\n                                    minfrac_h=$params.ipo_minfrac_h_library_pos \\\\\n                                    mzwid_l=$params.ipo_mzwid_l_library_pos \\\\\n                                    mzwid_h=$params.ipo_mzwid_h_library_pos \\\\\n                                    minsamp_l=$params.ipo_minsamp_l_library_pos  \\\\\n                                    minsamp_h=$params.ipo_minsamp_h_library_pos \\\\\n                                    max_l=$params.ipo_max_l_library_pos \\\\\n                                    max_h=$params.ipo_max_h_library_pos \\\\\n                                    ncores=$params.ipo_ncores_library_pos \\\\\n                                    outputxset=quant_params_library_pos.json \\\\\n                                    outputrt=rt_params_library_pos.json\n                                \"\"\"\n                            }",
        "nb_lignes_process": 73,
        "string_script": "                                def inputs_aggregated = mzMLFile.collect{ \"$it\" }.join(\",\")\n                                \"\"\"\n                                touch quant_params_library_pos.json\n                                touch rt_params_library_pos.json\n\n                                ipo.r \\\\\n                                    input=$inputs_aggregated \\\\\n                                    quantOnly=TRUE \\\\\n                                    allSamples=TRUE  \\\\\n                                    methodXset=$params.ipo_methodXset_library_pos \\\\\n                                    methodRT=$params.ipo_methodRT_library_pos \\\\\n                                    noise_l=$params.ipo_noise_l_library_pos  \\\\\n                                    noise_h=$params.ipo_noise_h_library_pos \\\\\n                                    prefilter_l_l=$params.ipo_prefilter_l_l_library_pos \\\\\n                                    prefilter_l_h=$params.ipo_prefilter_l_h_library_pos  \\\\\n                                    prefilter_h_l=$params.ipo_prefilter_h_l_library_pos \\\\\n                                    prefilter_h_h=$params.ipo_prefilter_h_h_library_pos  \\\\\n                                    snthresh_l=$params.ipo_snthresh_l_library_pos \\\\\n                                    snthresh_h=$params.ipo_snthresh_h_library_pos \\\\\n                                    mzCenterFun=$params.ipo_mzCenterFun_library_pos  \\\\\n                                    integrate=$params.ipo_integrate_library_pos \\\\\n                                    fitgauss=$params.ipo_fitgauss_library_pos \\\\\n                                    ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_library_pos  \\\\\n                                    ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_library_pos \\\\\n                                    ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_library_pos \\\\\n                                    ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_library_pos \\\\\n                                    ipo_ppm_l=$params.ipo_ppm_l_library_pos  \\\\\n                                    ipo_ppm_h=$params.ipo_ppm_h_library_pos \\\\\n                                    ipo_mzdiff_l=$params.ipo_mzdiff_l_library_pos \\\\\n                                    ipo_mzdiff_h=$params.ipo_mzdiff_h_library_pos \\\\\n                                    ipo_charge_camera=$params.ipo_charge_camera_library_pos \\\\\n                                    ipo_max_ppm_camera=$params.ipo_max_ppm_camera_library_pos  \\\\\n                                    response_l=$params.ipo_response_l_library_pos \\\\\n                                    response_h=$params.ipo_response_h_library_pos \\\\\n                                    distFunc=$params.ipo_distFunc_library_pos \\\\\n                                    factorDiag_l=$params.ipo_factorDiag_l_library_pos \\\\\n                                    factorDiag_h=$params.ipo_factorDiag_h_library_pos \\\\\n                                    factorGap_l=$params.ipo_factorGap_l_library_pos  \\\\\n                                    factorGap_h=$params.ipo_factorGap_h_library_pos \\\\\n                                    localAlignment=$params.ipo_localAlignment_library_pos \\\\\n                                    ipo_gapInit_l=$params.ipo_gapInit_l_library_pos \\\\\n                                    ipo_gapInit_h=$params.ipo_gapInit_h_library_pos \\\\\n                                    ipo_gapExtend_l=$params.ipo_gapExtend_l_library_pos  \\\\\n                                    ipo_gapExtend_h=$params.ipo_gapExtend_h_library_pos \\\\\n                                    ipo_profStep_l=$params.ipo_profStep_l_library_pos \\\\\n                                    ipo_profStep_h=$params.ipo_profStep_h_library_pos \\\\\n                                    bw_l=$params.ipo_bw_l_library_pos \\\\\n                                    bw_h=$params.ipo_bw_h_library_pos \\\\\n                                    minfrac_l=$params.ipo_minfrac_l_library_pos  \\\\\n                                    minfrac_h=$params.ipo_minfrac_h_library_pos \\\\\n                                    mzwid_l=$params.ipo_mzwid_l_library_pos \\\\\n                                    mzwid_h=$params.ipo_mzwid_h_library_pos \\\\\n                                    minsamp_l=$params.ipo_minsamp_l_library_pos  \\\\\n                                    minsamp_h=$params.ipo_minsamp_h_library_pos \\\\\n                                    max_l=$params.ipo_max_l_library_pos \\\\\n                                    max_h=$params.ipo_max_h_library_pos \\\\\n                                    ncores=$params.ipo_ncores_library_pos \\\\\n                                    outputxset=quant_params_library_pos.json \\\\\n                                    outputrt=rt_params_library_pos.json\n                                \"\"\"",
        "nb_lignes_script": 59,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "param_detection_process_library_pos_ipo"
        ],
        "nb_inputs": 1,
        "outputs": [
            "param_to_detection_process_library_pos",
            "param_to_rt_process_library_pos"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'ipo'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_ipo_param_library_pos_ipo\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_masstrace_detection_library_pos_xcms": {
        "name_process": "process_masstrace_detection_library_pos_xcms",
        "string_process": " process process_masstrace_detection_library_pos_xcms {\n                            label 'xcms'\n                                                 \n                            tag \"$mzMLFile\"\n                            publishDir \"${params.outdir}/process_masstrace_detection_library_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                            input:\n                            file mzMLFile from masstrace_detection_process_library_pos_openms\n                            each file(paramsQ) from param_target_to_detection_process_library_pos\n\n                            output:\n                            file \"${mzMLFile.baseName}.rdata\" into annotation_rdata_library_pos_camera\n\n                            script:\n                            def filter_argument = paramsQ.name == 'quant_params_library_pos.json' ? \"ipo_in ${paramsQ}\" : ''\n                            \"\"\"\n                            findPeaks.r \\\\\n                                input=\\$PWD/$mzMLFile \\\\\n                                output=\\$PWD/${mzMLFile.baseName}.rdata \\\\\n                                ppm=$params.masstrace_ppm_library_pos_xcms \\\\\n                                peakwidthLow=$params.peakwidthlow_quant_library_pos_xcms  \\\\\n                                peakwidthHigh=$params.peakwidthhigh_quant_library_pos_xcms \\\\\n                                noise=$params.noise_quant_library_pos_xcms \\\\\n                                polarity=positive \\\\\n                                realFileName=$mzMLFile \\\\\n                                sampleClass=$params.sampleclass_quant_library_pos_xcms  \\\\\n                                mzdiff=$params.mzdiff_quant_library_pos_xcms \\\\\n                                snthresh=$params.snthresh_quant_library_pos_xcms \\\\\n                                prefilter_l=$params.prefilter_quant_library_pos_xcms \\\\\n                                prefilter_h=$params.value_of_prefilter_quant_library_pos_xcms  \\\\\n                                mzCenterFun=$params.mzCenterFun_quant_library_pos_xcms \\\\\n                                integrate=$params.integrate_quant_library_pos_xcms \\\\\n                                fitgauss=$params.fitgauss_quant_library_pos_xcms  \\\\\n                                methodXset=$params.ipo_methodXset_library_pos \\\\\n                                methodRT=$params.ipo_methodRT_library_pos \\\\\n                                noise_l=$params.ipo_noise_l_library_pos  \\\\\n                                noise_h=$params.ipo_noise_h_library_pos \\\\\n                                prefilter_l_l=$params.ipo_prefilter_l_l_library_pos \\\\\n                                prefilter_l_h=$params.ipo_prefilter_l_h_library_pos  \\\\\n                                prefilter_h_l=$params.ipo_prefilter_h_l_library_pos \\\\\n                                prefilter_h_h=$params.ipo_prefilter_h_h_library_pos  \\\\\n                                snthresh_l=$params.ipo_snthresh_l_library_pos \\\\\n                                snthresh_h=$params.ipo_snthresh_h_library_pos \\\\\n                                mzCenterFun=$params.ipo_mzCenterFun_library_pos  \\\\\n                                integrate=$params.ipo_integrate_library_pos \\\\\n                                fitgauss=$params.ipo_fitgauss_library_pos \\\\\n                                ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_library_pos  \\\\\n                                ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_library_pos \\\\\n                                ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_library_pos \\\\\n                                ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_library_pos \\\\\n                                ipo_ppm_l=$params.ipo_ppm_l_library_pos  \\\\\n                                ipo_ppm_h=$params.ipo_ppm_h_library_pos \\\\\n                                ipo_mzdiff_l=$params.ipo_mzdiff_l_library_pos \\\\\n                                ipo_mzdiff_h=$params.ipo_mzdiff_h_library_pos \\\\\n                                ipo_charge_camera=$params.ipo_charge_camera_library_pos  \\\\\n                                ipo_max_ppm_camera=$params.ipo_max_ppm_camera_library_pos  \\\\\n                                ipo_inv=$ipo_library_pos_localQ \\\\\n                                $filter_argument\n                            \"\"\"\n                        }",
        "nb_lignes_process": 58,
        "string_script": "                            def filter_argument = paramsQ.name == 'quant_params_library_pos.json' ? \"ipo_in ${paramsQ}\" : ''\n                            \"\"\"\n                            findPeaks.r \\\\\n                                input=\\$PWD/$mzMLFile \\\\\n                                output=\\$PWD/${mzMLFile.baseName}.rdata \\\\\n                                ppm=$params.masstrace_ppm_library_pos_xcms \\\\\n                                peakwidthLow=$params.peakwidthlow_quant_library_pos_xcms  \\\\\n                                peakwidthHigh=$params.peakwidthhigh_quant_library_pos_xcms \\\\\n                                noise=$params.noise_quant_library_pos_xcms \\\\\n                                polarity=positive \\\\\n                                realFileName=$mzMLFile \\\\\n                                sampleClass=$params.sampleclass_quant_library_pos_xcms  \\\\\n                                mzdiff=$params.mzdiff_quant_library_pos_xcms \\\\\n                                snthresh=$params.snthresh_quant_library_pos_xcms \\\\\n                                prefilter_l=$params.prefilter_quant_library_pos_xcms \\\\\n                                prefilter_h=$params.value_of_prefilter_quant_library_pos_xcms  \\\\\n                                mzCenterFun=$params.mzCenterFun_quant_library_pos_xcms \\\\\n                                integrate=$params.integrate_quant_library_pos_xcms \\\\\n                                fitgauss=$params.fitgauss_quant_library_pos_xcms  \\\\\n                                methodXset=$params.ipo_methodXset_library_pos \\\\\n                                methodRT=$params.ipo_methodRT_library_pos \\\\\n                                noise_l=$params.ipo_noise_l_library_pos  \\\\\n                                noise_h=$params.ipo_noise_h_library_pos \\\\\n                                prefilter_l_l=$params.ipo_prefilter_l_l_library_pos \\\\\n                                prefilter_l_h=$params.ipo_prefilter_l_h_library_pos  \\\\\n                                prefilter_h_l=$params.ipo_prefilter_h_l_library_pos \\\\\n                                prefilter_h_h=$params.ipo_prefilter_h_h_library_pos  \\\\\n                                snthresh_l=$params.ipo_snthresh_l_library_pos \\\\\n                                snthresh_h=$params.ipo_snthresh_h_library_pos \\\\\n                                mzCenterFun=$params.ipo_mzCenterFun_library_pos  \\\\\n                                integrate=$params.ipo_integrate_library_pos \\\\\n                                fitgauss=$params.ipo_fitgauss_library_pos \\\\\n                                ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_library_pos  \\\\\n                                ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_library_pos \\\\\n                                ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_library_pos \\\\\n                                ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_library_pos \\\\\n                                ipo_ppm_l=$params.ipo_ppm_l_library_pos  \\\\\n                                ipo_ppm_h=$params.ipo_ppm_h_library_pos \\\\\n                                ipo_mzdiff_l=$params.ipo_mzdiff_l_library_pos \\\\\n                                ipo_mzdiff_h=$params.ipo_mzdiff_h_library_pos \\\\\n                                ipo_charge_camera=$params.ipo_charge_camera_library_pos  \\\\\n                                ipo_max_ppm_camera=$params.ipo_max_ppm_camera_library_pos  \\\\\n                                ipo_inv=$ipo_library_pos_localQ \\\\\n                                $filter_argument\n                            \"\"\"",
        "nb_lignes_script": 44,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "masstrace_detection_process_library_pos_openms",
            "param_target_to_detection_process_library_pos"
        ],
        "nb_inputs": 2,
        "outputs": [
            "annotation_rdata_library_pos_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_masstrace_detection_library_pos_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_annotate_peaks_library_pos_camera": {
        "name_process": "process_annotate_peaks_library_pos_camera",
        "string_process": " process process_annotate_peaks_library_pos_camera {\n                    label 'camera'\n                                         \n                    tag \"$rdata_files\"\n                    publishDir \"${params.outdir}/process_annotate_peaks_library_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n                    stageInMode 'copy'\n\n                    input:\n                    file rdata_files from annotation_rdata_library_pos_camera\n\n                    output:\n                    file \"${rdata_files.baseName}.rdata\" into group_rdata_library_pos_camera\n\n                    \"\"\"\n                    xsAnnotate.r input=$rdata_files output=${rdata_files.baseName}.rdata\n                    \"\"\"\n                }",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n                    xsAnnotate.r input=$rdata_files output=${rdata_files.baseName}.rdata\n                    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annotation_rdata_library_pos_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "group_rdata_library_pos_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_annotate_peaks_library_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_group_peaks_library_pos_camera": {
        "name_process": "process_group_peaks_library_pos_camera",
        "string_process": " process process_group_peaks_library_pos_camera {\n                    label 'camera'\n                                         \n                    tag \"$rdata_files\"\n                    publishDir \"${params.outdir}/process_group_peaks_library_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n                    stageInMode 'copy'\n\n                    input:\n                    file rdata_files from group_rdata_library_pos_camera\n\n                    output:\n                    file \"${rdata_files.baseName}.rdata\" into findaddcuts_rdata_library_pos_camera\n\n                    \"\"\"\n                    groupFWHM.r \\\\\n                        input=$rdata_files \\\\\n                        output=${rdata_files.baseName}.rdata \\\\\n                        sigma=$params.sigma_group_library_pos_camera \\\\\n                        perfwhm=$params.perfwhm_group_library_pos_camera \\\\\n                        intval=$params.intval_group_library_pos_camera\n                    \"\"\"\n                }",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n                    groupFWHM.r \\\\\n                        input=$rdata_files \\\\\n                        output=${rdata_files.baseName}.rdata \\\\\n                        sigma=$params.sigma_group_library_pos_camera \\\\\n                        perfwhm=$params.perfwhm_group_library_pos_camera \\\\\n                        intval=$params.intval_group_library_pos_camera\n                    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "group_rdata_library_pos_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "findaddcuts_rdata_library_pos_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_group_peaks_library_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_find_addcuts_library_pos_camera": {
        "name_process": "process_find_addcuts_library_pos_camera",
        "string_process": " process process_find_addcuts_library_pos_camera {\n                    label 'camera'\n                                         \n                    tag \"$rdata_files\"\n                    publishDir \"${params.outdir}/process_find_addcuts_library_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n                    stageInMode 'copy'\n\n                    input:\n                    file rdata_files from findaddcuts_rdata_library_pos_camera\n\n                    output:\n                    file \"${rdata_files.baseName}.rdata\" into findisotopes_rdata_library_pos_camera\n\n                    \"\"\"\n                    findAdducts.r \\\\\n                        input=$rdata_files \\\\\n                        output=${rdata_files.baseName}.rdata \\\\\n                        ppm=$params.ppm_findaddcuts_library_pos_camera \\\\\n                        polarity=$params.polarity_findaddcuts_library_pos_camera\n                    \"\"\"\n                }",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n                    findAdducts.r \\\\\n                        input=$rdata_files \\\\\n                        output=${rdata_files.baseName}.rdata \\\\\n                        ppm=$params.ppm_findaddcuts_library_pos_camera \\\\\n                        polarity=$params.polarity_findaddcuts_library_pos_camera\n                    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "findaddcuts_rdata_library_pos_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "findisotopes_rdata_library_pos_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_find_addcuts_library_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_find_isotopes_library_pos_camera": {
        "name_process": "process_find_isotopes_library_pos_camera",
        "string_process": " process process_find_isotopes_library_pos_camera {\n                    label 'camera'\n                                         \n                    tag \"$rdata_files\"\n                    publishDir \"${params.outdir}/process_find_isotopes_library_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n                    stageInMode 'copy'\n\n                    input:\n                    file rdata_files from findisotopes_rdata_library_pos_camera\n\n                    output:\n                    file \"${rdata_files.baseName}.rdata\" into mapmsmstocamera_rdata_library_pos_camera,mapmsmstoparam_rdata_library_pos_camera_tmp, prepareoutput_rdata_library_pos_camera_cfmid\n\n                    \"\"\"\n                    findIsotopes.r \\\\\n                        input=$rdata_files \\\\\n                        output=${rdata_files.baseName}.rdata \\\\\n                        maxcharge=$params.maxcharge_findisotopes_library_pos_camera\n                    \"\"\"\n                }",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n                    findIsotopes.r \\\\\n                        input=$rdata_files \\\\\n                        output=${rdata_files.baseName}.rdata \\\\\n                        maxcharge=$params.maxcharge_findisotopes_library_pos_camera\n                    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "findisotopes_rdata_library_pos_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapmsmstocamera_rdata_library_pos_camera",
            "mapmsmstoparam_rdata_library_pos_camera_tmp",
            "prepareoutput_rdata_library_pos_camera_cfmid"
        ],
        "nb_outputs": 3,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_find_isotopes_library_pos_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_read_MS2_library_pos_msnbase": {
        "name_process": "process_read_MS2_library_pos_msnbase",
        "string_process": " process process_read_MS2_library_pos_msnbase {\n                    label 'msnbase'\n                                            \n                    tag \"$mzMLFile\"\n                    publishDir \"${params.outdir}/process_read_MS2_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                    input:\n                    file mzMLFile from id_library_mzml_files_pos\n\n                    output:\n                    file \"${mzMLFile.baseName}_ReadMsmsLibrary.rdata\" into mapmsmstocamera_rdata_library_pos_msnbase\n\n                    \"\"\"\n                    readMS2MSnBase.r \\\\\n                        input=$mzMLFile \\\\\n                        output=${mzMLFile.baseName}_ReadMsmsLibrary.rdata \\\\\n                        inputname=${mzMLFile.baseName}\n                    \"\"\"\n                }",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n                    readMS2MSnBase.r \\\\\n                        input=$mzMLFile \\\\\n                        output=${mzMLFile.baseName}_ReadMsmsLibrary.rdata \\\\\n                        inputname=${mzMLFile.baseName}\n                    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id_library_mzml_files_pos"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapmsmstocamera_rdata_library_pos_msnbase"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_read_MS2_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_mapmsms_tocamera_library_pos_msnbase": {
        "name_process": "process_mapmsms_tocamera_library_pos_msnbase",
        "string_process": " process process_mapmsms_tocamera_library_pos_msnbase {\n                    label 'msnbase'\n                                            \n                    tag \"$rdata_files_ms1\"\n                    publishDir \"${params.outdir}/process_mapmsms_tocamera_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                    input:\n                    set val(name), file(rdata_files_ms1), file(rdata_files_ms2) from mapmsmstocamera_rdata_library_pos_camerams2\n\n                    output:\n                    file \"${rdata_files_ms1.baseName}_MapMsms2Camera_library_pos.rdata\" into createlibrary_rdata_library_pos_msnbase_tmp\n\n                    script:\n                    \"\"\"\n                    mapMS2ToCamera.r \\\\\n                        inputCAMERA=$rdata_files_ms1 \\\\\n                        inputMS2=$rdata_files_ms2 \\\\\n                        output=${rdata_files_ms1.baseName}_MapMsms2Camera_library_pos.rdata  \\\\\n                        ppm=$params.ppm_mapmsmstocamera_library_pos_msnbase \\\\\n                        rt=$params.rt_mapmsmstocamera_library_pos_msnbase \\\\\n                        preprocess_ms2=$params.preprocess_msms_library_pos_msnbase \\\\\n                        preprocess_msms_centroid=$params.preprocess_msms_centroid_library_pos_msnbase \\\\\n                        preprocess_msms_merge=$params.preprocess_msms_merge_library_pos_msnbase \\\\\n                        preprocess_msms_centroid_after_merge=$params.preprocess_msms_centroid_after_merge_library_pos_msnbase \\\\\n                        preprocess_msms_ppm=$params.preprocess_msms_ppm_library_pos_msnbase \\\\\n                        preprocess_msms_ppm_precursor=$params.preprocess_msms_ppm_precursor_library_pos_msnbase \\\\\n                        preprocess_msms_abs_mz=$params.preprocess_msms_abs_mz_library_pos_msnbase \\\\\n                        preprocess_msms_abs_mz_precursor=$params.preprocess_msms_abs_mz_precursor_library_pos_msnbase \\\\\n                        preprocess_msms_rt=$params.preprocess_msms_rt_library_pos_msnbase \\\\\n                        preprocess_msms_centroid_onlymapped=$params.preprocess_msms_centroid_onlymapped_library_pos_msnbase \\\\\n                        preprocess_msms_merge_onlymapped=$params.preprocess_msms_merge_onlymapped_library_pos_msnbase \\\\\n                        preprocess_msms_int_threshold=$params.preprocess_msms_int_threshold_library_pos_msnbase\n                    \"\"\"\n                }",
        "nb_lignes_process": 32,
        "string_script": "                    \"\"\"\n                    mapMS2ToCamera.r \\\\\n                        inputCAMERA=$rdata_files_ms1 \\\\\n                        inputMS2=$rdata_files_ms2 \\\\\n                        output=${rdata_files_ms1.baseName}_MapMsms2Camera_library_pos.rdata  \\\\\n                        ppm=$params.ppm_mapmsmstocamera_library_pos_msnbase \\\\\n                        rt=$params.rt_mapmsmstocamera_library_pos_msnbase \\\\\n                        preprocess_ms2=$params.preprocess_msms_library_pos_msnbase \\\\\n                        preprocess_msms_centroid=$params.preprocess_msms_centroid_library_pos_msnbase \\\\\n                        preprocess_msms_merge=$params.preprocess_msms_merge_library_pos_msnbase \\\\\n                        preprocess_msms_centroid_after_merge=$params.preprocess_msms_centroid_after_merge_library_pos_msnbase \\\\\n                        preprocess_msms_ppm=$params.preprocess_msms_ppm_library_pos_msnbase \\\\\n                        preprocess_msms_ppm_precursor=$params.preprocess_msms_ppm_precursor_library_pos_msnbase \\\\\n                        preprocess_msms_abs_mz=$params.preprocess_msms_abs_mz_library_pos_msnbase \\\\\n                        preprocess_msms_abs_mz_precursor=$params.preprocess_msms_abs_mz_precursor_library_pos_msnbase \\\\\n                        preprocess_msms_rt=$params.preprocess_msms_rt_library_pos_msnbase \\\\\n                        preprocess_msms_centroid_onlymapped=$params.preprocess_msms_centroid_onlymapped_library_pos_msnbase \\\\\n                        preprocess_msms_merge_onlymapped=$params.preprocess_msms_merge_onlymapped_library_pos_msnbase \\\\\n                        preprocess_msms_int_threshold=$params.preprocess_msms_int_threshold_library_pos_msnbase\n                    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mapmsmstocamera_rdata_library_pos_camerams2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "createlibrary_rdata_library_pos_msnbase_tmp"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$rdata_files_ms1\"",
            "publishDir \"${params.outdir}/process_mapmsms_tocamera_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_create_library_pos_msnbase": {
        "name_process": "process_create_library_pos_msnbase",
        "string_process": " process process_create_library_pos_msnbase {\n                    label 'msnbase'\n                                            \n                    tag \"$rdata_camera\"\n                    publishDir \"${params.outdir}/process_create_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                    input:\n                    set val(name), file(rdata_camera), file(ms2_data) from msmsandquant_rdata_library_pos_camera\n                    each file(library_desc) from library_description_pos\n\n                    output:\n                    file \"${rdata_camera.baseName}.csv\" into collectlibrary_rdata_library_pos_msnbase\n\n                    \"\"\"\n                    mkdir out\n\n                    createLibrary.r \\\\\n                        inputCAMERA=$rdata_camera \\\\\n                        precursorppm=$params.ppm_create_library_pos_msnbase \\\\\n                        inputMS2=$ms2_data \\\\\n                        output=${rdata_camera.baseName}.csv \\\\\n                        inputLibrary=$library_desc  \\\\\n                        rawFileName=$params.raw_file_name_preparelibrary_pos_msnbase \\\\\n                        compundID=$params.compund_id_preparelibrary_pos_msnbase \\\\\n                        compoundName=$params.compound_name_preparelibrary_pos_msnbase  \\\\\n                        mzCol=$params.mz_col_preparelibrary_pos_msnbase \\\\\n                        whichmz=$params.which_mz_preparelibrary_pos_msnbase\n                    \"\"\"\n                }",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n                    mkdir out\n\n                    createLibrary.r \\\\\n                        inputCAMERA=$rdata_camera \\\\\n                        precursorppm=$params.ppm_create_library_pos_msnbase \\\\\n                        inputMS2=$ms2_data \\\\\n                        output=${rdata_camera.baseName}.csv \\\\\n                        inputLibrary=$library_desc  \\\\\n                        rawFileName=$params.raw_file_name_preparelibrary_pos_msnbase \\\\\n                        compundID=$params.compund_id_preparelibrary_pos_msnbase \\\\\n                        compoundName=$params.compound_name_preparelibrary_pos_msnbase  \\\\\n                        mzCol=$params.mz_col_preparelibrary_pos_msnbase \\\\\n                        whichmz=$params.which_mz_preparelibrary_pos_msnbase\n                    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "msmsandquant_rdata_library_pos_camera",
            "library_description_pos"
        ],
        "nb_inputs": 2,
        "outputs": [
            "collectlibrary_rdata_library_pos_msnbase"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$rdata_camera\"",
            "publishDir \"${params.outdir}/process_create_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_collect_library_pos_msnbase": {
        "name_process": "process_collect_library_pos_msnbase",
        "string_process": " process process_collect_library_pos_msnbase {\n                    label 'msnbase'\n                                         \n                    tag \"A collection of files\"\n                    publishDir \"${params.outdir}/process_collect_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                    input:\n                    file rdata_files from collectlibrary_rdata_library_pos_msnbase.collect()\n\n                    output:\n                    file \"library_pos.csv\" into librarysearchengine_rdata_library_pos_msnbase\n\n                    script:\n                    def aggregatecdlibrary = rdata_files.collect{ \"$it\" }.join(\",\")\n                    \"\"\"\n                    collectLibrary.r \\\\\n                        inputs=$aggregatecdlibrary \\\\\n                        realNames=$aggregatecdlibrary \\\\\n                        output=library_pos.csv\n                    \"\"\"\n                }",
        "nb_lignes_process": 19,
        "string_script": "                    def aggregatecdlibrary = rdata_files.collect{ \"$it\" }.join(\",\")\n                    \"\"\"\n                    collectLibrary.r \\\\\n                        inputs=$aggregatecdlibrary \\\\\n                        realNames=$aggregatecdlibrary \\\\\n                        output=library_pos.csv\n                    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "collectlibrary_rdata_library_pos_msnbase"
        ],
        "nb_inputs": 1,
        "outputs": [
            "librarysearchengine_rdata_library_pos_msnbase"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_collect_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_remove_adducts_library_pos_msnbase": {
        "name_process": "process_remove_adducts_library_pos_msnbase",
        "string_process": " process process_remove_adducts_library_pos_msnbase {\n                    label 'msnbase'\n                                         \n                    tag \"A collection of files\"\n                    publishDir \"${params.outdir}/process_remove_adducts_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                    input:\n                    file txt_files from addcutremove_txt_pos_msnbase.collect()\n\n                    output:\n                    file \"mappedtometfrag_pos.zip\" into librarysearchengine_txt_pos_msnbase_tmp\n\n                    script:\n                    \"\"\"\n                    #!env Rscript\n                    Files<-list.files(,pattern = \"zip\",full.names=T)\n                    Files_org<-list.files(,pattern = \"zip\")\n                    for(f in Files){\n                        zip::unzip(zipfile = f,junkpaths = T)\n                    }\n                    Files<-list.files(,pattern = \"txt\",full.names=T)\n                    FilesTMP<-sapply(strsplit(split = \"_\",fixed = T,x = basename(Files)),function(x){paste(x[-1],collapse = \"_\")})\n                        FileDub<-Files[duplicated(FilesTMP)]\n                    for(x in FileDub){\n                        file.remove(x)\n                    }\n                    files_to_pass<-list.files(pattern=\"txt\")\n                    files_to_pass<-files_to_pass[!files_to_pass%in%Files_org]\n                    zip::zip(zipfile=\"mappedtometfrag_pos.zip\",files=files_to_pass)\n                    \"\"\"\n                }",
        "nb_lignes_process": 29,
        "string_script": "                    \"\"\"\n                    #!env Rscript\n                    Files<-list.files(,pattern = \"zip\",full.names=T)\n                    Files_org<-list.files(,pattern = \"zip\")\n                    for(f in Files){\n                        zip::unzip(zipfile = f,junkpaths = T)\n                    }\n                    Files<-list.files(,pattern = \"txt\",full.names=T)\n                    FilesTMP<-sapply(strsplit(split = \"_\",fixed = T,x = basename(Files)),function(x){paste(x[-1],collapse = \"_\")})\n                        FileDub<-Files[duplicated(FilesTMP)]\n                    for(x in FileDub){\n                        file.remove(x)\n                    }\n                    files_to_pass<-list.files(pattern=\"txt\")\n                    files_to_pass<-files_to_pass[!files_to_pass%in%Files_org]\n                    zip::zip(zipfile=\"mappedtometfrag_pos.zip\",files=files_to_pass)\n                    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "addcutremove_txt_pos_msnbase"
        ],
        "nb_inputs": 1,
        "outputs": [
            "librarysearchengine_txt_pos_msnbase_tmp"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_remove_adducts_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_search_engine_library_pos_msnbase_nolibcharac": {
        "name_process": "process_search_engine_library_pos_msnbase_nolibcharac",
        "string_process": " process process_search_engine_library_pos_msnbase_nolibcharac {\n                    label 'msnbase'\n                                          \n                    tag \"$parameters\"\n                    publishDir \"${params.outdir}/process_search_engine_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                    input:\n                    file parameters from librarysearchengine_txt_pos_msnbase\n                    each file(libraryFile) from librarysearchengine_rdata_library_pos_msnbase\n\n                    output:\n                    file \"aggregated_identification_library_pos.csv\" into library_tsv_pos_passatutto\n\n                    \"\"\"\n                    librarySearchEngine.r \\\\\n                        -l $libraryFile \\\\\n                        -i $parameters \\\\\n                        -out aggregated_identification_library_pos.csv \\\\\n                        -th \"-1\" \\\\\n                        -im pos \\\\\n                        -ts Scoredotproduct \\\\\n                        -rs 1000 \\\\\n                        -ncore $params.ncore_searchengine_library_pos_msnbase \\\\\n                        -rt $params.rtsec_msmstoparam_pos_msnbase \\\\\n                        -outT\n\n                    sed -i '/^\\$/d' aggregated_identification_library_pos.csv\n                    \"\"\"\n                }",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n                    librarySearchEngine.r \\\\\n                        -l $libraryFile \\\\\n                        -i $parameters \\\\\n                        -out aggregated_identification_library_pos.csv \\\\\n                        -th \"-1\" \\\\\n                        -im pos \\\\\n                        -ts Scoredotproduct \\\\\n                        -rs 1000 \\\\\n                        -ncore $params.ncore_searchengine_library_pos_msnbase \\\\\n                        -rt $params.rtsec_msmstoparam_pos_msnbase \\\\\n                        -outT\n\n                    sed -i '/^\\$/d' aggregated_identification_library_pos.csv\n                    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "librarysearchengine_txt_pos_msnbase",
            "librarysearchengine_rdata_library_pos_msnbase"
        ],
        "nb_inputs": 2,
        "outputs": [
            "library_tsv_pos_passatutto"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$parameters\"",
            "publishDir \"${params.outdir}/process_search_engine_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_search_engine_library_pos_msnbase_libcharac": {
        "name_process": "process_search_engine_library_pos_msnbase_libcharac",
        "string_process": " process process_search_engine_library_pos_msnbase_libcharac {\n                    label 'msnbase'\n                                          \n                    tag \"$parameters\"\n                    publishDir \"${params.outdir}/process_search_engine_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                    input:\n                    file parameters from librarysearchengine_txt_pos_msnbase\n                    each file(libraryFile) from library_charactrization_file_pos\n\n                    output:\n                    file \"aggregated_identification_library_pos.csv\" into library_tsv_pos_passatutto\n\n                    \"\"\"\n                    librarySearchEngine.r \\\\\n                        -l $libraryFile \\\\\n                        -i $parameters \\\\\n                        -out aggregated_identification_library_pos.csv \\\\\n                        -th \"-1\" \\\\\n                        -im pos \\\\\n                        -ts Scoredotproduct \\\\\n                        -rs 1000 \\\\\n                        -ncore $params.ncore_searchengine_library_pos_msnbase \\\\\n                        -rt $params.rtsec_msmstoparam_pos_msnbase \\\\\n                        -outT\n\n                    sed -i '/^\\$/d' aggregated_identification_library_pos.csv\n                    \"\"\"\n                }",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n                    librarySearchEngine.r \\\\\n                        -l $libraryFile \\\\\n                        -i $parameters \\\\\n                        -out aggregated_identification_library_pos.csv \\\\\n                        -th \"-1\" \\\\\n                        -im pos \\\\\n                        -ts Scoredotproduct \\\\\n                        -rs 1000 \\\\\n                        -ncore $params.ncore_searchengine_library_pos_msnbase \\\\\n                        -rt $params.rtsec_msmstoparam_pos_msnbase \\\\\n                        -outT\n\n                    sed -i '/^\\$/d' aggregated_identification_library_pos.csv\n                    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "librarysearchengine_txt_pos_msnbase",
            "library_charactrization_file_pos"
        ],
        "nb_inputs": 2,
        "outputs": [
            "library_tsv_pos_passatutto"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$parameters\"",
            "publishDir \"${params.outdir}/process_search_engine_library_pos_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_pepcalculation_library_pos_passatutto": {
        "name_process": "process_pepcalculation_library_pos_passatutto",
        "string_process": " process process_pepcalculation_library_pos_passatutto {\n                label 'passatutto'\n                                     \n                tag \"$identification_result\"\n                publishDir \"${params.outdir}/process_pepcalculation_library_pos_passatutto\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file identification_result from library_tsv_pos_passatutto\n\n                output:\n                file \"pep_identification_library_pos.csv\" into library_tsv_pos_output\n\n                \"\"\"\n                if [ -s $identification_result ]; then\n                    metfragPEP.r \\\\\n                        input=$identification_result \\\\\n                        score=score \\\\\n                        output=pep_identification_library_pos.csv \\\\\n                        readTable=T\n                else\n                    touch pep_identification_library_pos.csv\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n                if [ -s $identification_result ]; then\n                    metfragPEP.r \\\\\n                        input=$identification_result \\\\\n                        score=score \\\\\n                        output=pep_identification_library_pos.csv \\\\\n                        readTable=T\n                else\n                    touch pep_identification_library_pos.csv\n                fi\n                \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library_tsv_pos_passatutto"
        ],
        "nb_inputs": 1,
        "outputs": [
            "library_tsv_pos_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'passatutto'",
            "tag \"$identification_result\"",
            "publishDir \"${params.outdir}/process_pepcalculation_library_pos_passatutto\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_output_quantid_pos_camera_library": {
        "name_process": "process_output_quantid_pos_camera_library",
        "string_process": " process process_output_quantid_pos_camera_library {\n                label 'camera'\n                                      \n                tag \"$camera_input_quant\"\n                publishDir \"${params.outdir}/process_output_quantid_pos_camera_library\", mode: params.publish_dir_mode\n\n                input:\n                file phenotype_file from phenotype_design_pos_library\n                file camera_input_quant from prepareoutput_rdata_pos_camera_library\n                file library_input_identification from library_tsv_pos_output\n\n                output:\n                file \"*.txt\" into library_pos_finished\n\n                \"\"\"\n                if [ -s $library_input_identification ]; then\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputscores=$library_input_identification \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera  \\\\\n                        rt=$params.rt_output_pos_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=score \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera  \\\\\n                        selectedType=$params.selected_type_output_pos_camera \\\\\n                        rename=$params.rename_output_pos_camera \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera  \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera  \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera \\\\\n                        outputPeakTable=peaktablePOSout_pos_library.txt \\\\\n                        outputVariables=varsPOSout_pos_library.txt \\\\\n                        outputMetaData=metadataPOSout_pos_library.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                else\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera \\\\\n                        rt=$params.rt_output_pos_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=score  \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera \\\\\n                        selectedType=$params.selected_type_output_pos_camera \\\\\n                        rename=$params.rename_output_pos_camera  \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera  \\\\\n                        outputPeakTable=peaktablePOSout_pos_library.txt \\\\\n                        outputVariables=varsPOSout_pos_library.txt \\\\\n                        outputMetaData=metadataPOSout_pos_library.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 65,
        "string_script": "\"\"\"\n                if [ -s $library_input_identification ]; then\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputscores=$library_input_identification \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera  \\\\\n                        rt=$params.rt_output_pos_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=score \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera  \\\\\n                        selectedType=$params.selected_type_output_pos_camera \\\\\n                        rename=$params.rename_output_pos_camera \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera  \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera  \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera \\\\\n                        outputPeakTable=peaktablePOSout_pos_library.txt \\\\\n                        outputVariables=varsPOSout_pos_library.txt \\\\\n                        outputMetaData=metadataPOSout_pos_library.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                else\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_pos_camera \\\\\n                        rt=$params.rt_output_pos_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=score  \\\\\n                        impute=$params.impute_output_pos_camera \\\\\n                        typeColumn=$params.type_column_output_pos_camera \\\\\n                        selectedType=$params.selected_type_output_pos_camera \\\\\n                        rename=$params.rename_output_pos_camera  \\\\\n                        renameCol=$params.rename_col_output_pos_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_pos_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_pos_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                        log=$params.log_output_pos_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_pos_camera  \\\\\n                        outputPeakTable=peaktablePOSout_pos_library.txt \\\\\n                        outputVariables=varsPOSout_pos_library.txt \\\\\n                        outputMetaData=metadataPOSout_pos_library.txt \\\\\n                        Ifnormalize=$params.normalize_output_pos_camera\n\n                fi\n                \"\"\"",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype_design_pos_library",
            "prepareoutput_rdata_pos_camera_library",
            "library_tsv_pos_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "library_pos_finished"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$camera_input_quant\"",
            "publishDir \"${params.outdir}/process_output_quantid_pos_camera_library\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_output_quantid_pos_camera_noid": {
        "name_process": "process_output_quantid_pos_camera_noid",
        "string_process": " process process_output_quantid_pos_camera_noid {\n            label 'camera'\n                                  \n            tag \"$camera_input_quant\"\n            publishDir \"${params.outdir}/process_output_quantid_pos_camera_noid\", mode: params.publish_dir_mode\n\n            input:\n            file phenotype_file from phenotype_design_pos_noid\n            file camera_input_quant from prepareoutput_rdata_pos_camera_noid\n\n            output:\n            file \"*.txt\" into noid_pos_finished\n\n            \"\"\"\n            prepareOutput.r \\\\\n                inputcamera=$camera_input_quant \\\\\n                inputpheno=$phenotype_file \\\\\n                ppm=$params.ppm_output_pos_camera \\\\\n                rt=$params.rt_output_pos_camera  \\\\\n                higherTheBetter=true \\\\\n                scoreColumn=score \\\\\n                impute=$params.impute_output_pos_camera \\\\\n                typeColumn=$params.type_column_output_pos_camera \\\\\n                selectedType=$params.selected_type_output_pos_camera  \\\\\n                rename=$params.rename_output_pos_camera \\\\\n                renameCol=$params.rename_col_output_pos_camera \\\\\n                onlyReportWithID=$params.only_report_with_id_output_pos_camera  \\\\\n                combineReplicate=$params.combine_replicate_output_pos_camera \\\\\n                combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                log=$params.log_output_pos_camera  \\\\\n                sampleCoverage=$params.sample_coverage_output_pos_camera \\\\\n                outputPeakTable=peaktablePOSout_POS_noid.txt \\\\\n                outputVariables=varsPOSout_pos_noid.txt \\\\\n                outputMetaData=metadataPOSout_pos_noid.txt \\\\\n                Ifnormalize=$params.normalize_output_pos_camera\n            \"\"\"\n        }",
        "nb_lignes_process": 35,
        "string_script": "\"\"\"\n            prepareOutput.r \\\\\n                inputcamera=$camera_input_quant \\\\\n                inputpheno=$phenotype_file \\\\\n                ppm=$params.ppm_output_pos_camera \\\\\n                rt=$params.rt_output_pos_camera  \\\\\n                higherTheBetter=true \\\\\n                scoreColumn=score \\\\\n                impute=$params.impute_output_pos_camera \\\\\n                typeColumn=$params.type_column_output_pos_camera \\\\\n                selectedType=$params.selected_type_output_pos_camera  \\\\\n                rename=$params.rename_output_pos_camera \\\\\n                renameCol=$params.rename_col_output_pos_camera \\\\\n                onlyReportWithID=$params.only_report_with_id_output_pos_camera  \\\\\n                combineReplicate=$params.combine_replicate_output_pos_camera \\\\\n                combineReplicateColumn=$params.combine_replicate_column_output_pos_camera \\\\\n                log=$params.log_output_pos_camera  \\\\\n                sampleCoverage=$params.sample_coverage_output_pos_camera \\\\\n                outputPeakTable=peaktablePOSout_POS_noid.txt \\\\\n                outputVariables=varsPOSout_pos_noid.txt \\\\\n                outputMetaData=metadataPOSout_pos_noid.txt \\\\\n                Ifnormalize=$params.normalize_output_pos_camera\n            \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype_design_pos_noid",
            "prepareoutput_rdata_pos_camera_noid"
        ],
        "nb_inputs": 2,
        "outputs": [
            "noid_pos_finished"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$camera_input_quant\"",
            "publishDir \"${params.outdir}/process_output_quantid_pos_camera_noid\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_peak_picker_neg_openms": {
        "name_process": "process_peak_picker_neg_openms",
        "string_process": " process process_peak_picker_neg_openms {\n            label 'openms'\n                                 \n            tag \"$mzMLFile\"\n            publishDir \"${params.outdir}/process_peak_picker_neg_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n            stageInMode 'copy'\n\n            input:\n            file mzMLFile from quant_mzml_files_neg\n            each file(setting_file) from peakpicker_ini_file_neg_openms\n\n            output:\n            file \"${mzMLFile}\" into masstrace_detection_process_neg, param_detection_process_neg\n\n            \"\"\"\n            PeakPickerHiRes -in $mzMLFile -out $mzMLFile -ini $setting_file\n            \"\"\"\n        }",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n            PeakPickerHiRes -in $mzMLFile -out $mzMLFile -ini $setting_file\n            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "quant_mzml_files_neg",
            "peakpicker_ini_file_neg_openms"
        ],
        "nb_inputs": 2,
        "outputs": [
            "masstrace_detection_process_neg",
            "param_detection_process_neg"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'openms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_peak_picker_neg_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_masstrace_detection_neg_openms": {
        "name_process": "process_masstrace_detection_neg_openms",
        "string_process": " process process_masstrace_detection_neg_openms  {\n                label 'openms'\n                                     \n                tag \"$mzMLFile\"\n                publishDir \"${params.outdir}/process_masstrace_detection_neg_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file mzMLFile from masstrace_detection_process_neg_openms\n                each file(setting_file) from featurefinder_ini_neg_openms\n\n                output:\n                file \"${mzMLFile.baseName}.featureXML\" into openms_to_xcms_neg_conversion\n                file \"${mzMLFile.baseName}.mzML\" into rt_rdata_neg_xcms, openms_to_xcms_conversion_raw_neg\n\n                \"\"\"\n                FeatureFinderMetabo -in $mzMLFile -out ${mzMLFile.baseName}.featureXML -ini $setting_file\n                \"\"\"\n            }",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n                FeatureFinderMetabo -in $mzMLFile -out ${mzMLFile.baseName}.featureXML -ini $setting_file\n                \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "masstrace_detection_process_neg_openms",
            "featurefinder_ini_neg_openms"
        ],
        "nb_inputs": 2,
        "outputs": [
            "openms_to_xcms_neg_conversion",
            "rt_rdata_neg_xcms",
            "openms_to_xcms_conversion_raw_neg"
        ],
        "nb_outputs": 3,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'openms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_masstrace_detection_neg_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_openms_to_xcms_conversion_neg": {
        "name_process": "process_openms_to_xcms_conversion_neg",
        "string_process": " process process_openms_to_xcms_conversion_neg  {\n                label 'xcmsconvert'\n                                     \n                tag \"$mzMLFile\"\n                publishDir \"${params.outdir}/process_openms_to_xcms_conversion_neg\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file mzMLFile from openms_to_xcms_neg_conversion\n                file mzMLFile2 from openms_to_xcms_conversion_raw_neg\n                each file(phenotype_file) from phenotype_design_neg\n\n                output:\n                file \"${mzMLFile.baseName}.rdata\" into collect_rdata_neg_xcms\n\n                \"\"\"\n                featurexmlToCamera.r \\\\\n                    input=$mzMLFile \\\\\n                    realFileName=$mzMLFile \\\\\n                    mzMLfiles=\\$PWD/$mzMLFile2 \\\\\n                    polarity=negative \\\\\n                    output=${mzMLFile.baseName}.rdata \\\\\n                    phenoFile=$phenotype_file  \\\\\n                    phenoDataColumn=$params.phenodatacolumn_quant_neg \\\\\n                    sampleClass=$params.sampleclass_quant_neg_xcms \\\\\n                    changeNameTO=${mzMLFile.baseName}.mzML\n                \"\"\"\n            }",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n                featurexmlToCamera.r \\\\\n                    input=$mzMLFile \\\\\n                    realFileName=$mzMLFile \\\\\n                    mzMLfiles=\\$PWD/$mzMLFile2 \\\\\n                    polarity=negative \\\\\n                    output=${mzMLFile.baseName}.rdata \\\\\n                    phenoFile=$phenotype_file  \\\\\n                    phenoDataColumn=$params.phenodatacolumn_quant_neg \\\\\n                    sampleClass=$params.sampleclass_quant_neg_xcms \\\\\n                    changeNameTO=${mzMLFile.baseName}.mzML\n                \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "openms_to_xcms_neg_conversion",
            "openms_to_xcms_conversion_raw_neg",
            "phenotype_design_neg"
        ],
        "nb_inputs": 3,
        "outputs": [
            "collect_rdata_neg_xcms"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcmsconvert'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_openms_to_xcms_conversion_neg\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_ipo_param_neg_ipo": {
        "name_process": "process_ipo_param_neg_ipo",
        "string_process": " process process_ipo_param_neg_ipo {\n                    label 'ipo'\n                                          \n                    tag \"A collection of files\"\n                    publishDir \"${params.outdir}/process_ipo_param_neg_ipo\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                    input:\n                    file mzMLFile from param_detection_process_neg_ipo.collect()\n                    each file(phenotype_file) from phenotype_design_neg_param\n\n                    output:\n                    file \"quant_params_neg.json\" into param_to_detection_process_neg\n                    file \"rt_params_neg.json\" into param_to_rt_process_neg\n\n                    script:\n                    def inputs_aggregated = mzMLFile.collect{ \"$it\" }.join(\",\")\n                    \"\"\"\n                    touch quant_params_neg.json\n                    touch rt_params_neg.json\n\n                    ipo.r \\\\\n                        input=$inputs_aggregated \\\\\n                        quantOnly=$ipo_neg_globalAvoidRT \\\\\n                        allSamples=$params.ipo_allSamples_neg \\\\\n                        columnToSelect=$params.ipo_columnToSelect_neg  \\\\\n                        valueToSelect=$params.ipo_valueToSelect_neg \\\\\n                        phenoFile=$phenotype_file  \\\\\n                        methodXset=$params.ipo_methodXset_neg \\\\\n                        methodRT=$params.ipo_methodRT_neg \\\\\n                        noise_l=$params.ipo_noise_l_neg  \\\\\n                        noise_h=$params.ipo_noise_h_neg \\\\\n                        prefilter_l_l=$params.ipo_prefilter_l_l_neg \\\\\n                        prefilter_l_h=$params.ipo_prefilter_l_h_neg  \\\\\n                        prefilter_h_l=$params.ipo_prefilter_h_l_neg \\\\\n                        prefilter_h_h=$params.ipo_prefilter_h_h_neg  \\\\\n                        snthresh_l=$params.ipo_snthresh_l_neg \\\\\n                        snthresh_h=$params.ipo_snthresh_h_neg \\\\\n                        mzCenterFun=$params.ipo_mzCenterFun_neg  \\\\\n                        integrate=$params.ipo_integrate_neg \\\\\n                        fitgauss=$params.ipo_fitgauss_neg \\\\\n                        ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_neg  \\\\\n                        ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_neg \\\\\n                        ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_neg \\\\\n                        ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_neg \\\\\n                        ipo_ppm_l=$params.ipo_ppm_l_neg  \\\\\n                        ipo_ppm_h=$params.ipo_ppm_h_neg \\\\\n                        ipo_mzdiff_l=$params.ipo_mzdiff_l_neg \\\\\n                        ipo_mzdiff_h=$params.ipo_mzdiff_h_neg \\\\\n                        ipo_charge_camera=$params.ipo_charge_camera_neg \\\\\n                        ipo_max_ppm_camera=$params.ipo_max_ppm_camera_neg  \\\\\n                        response_l=$params.ipo_response_l_neg \\\\\n                        response_h=$params.ipo_response_h_neg \\\\\n                        distFunc=$params.ipo_distFunc_neg \\\\\n                        factorDiag_l=$params.ipo_factorDiag_l_neg \\\\\n                        factorDiag_h=$params.ipo_factorDiag_h_neg \\\\\n                        factorGap_l=$params.ipo_factorGap_l_neg  \\\\\n                        factorGap_h=$params.ipo_factorGap_h_neg \\\\\n                        localAlignment=$params.ipo_localAlignment_neg \\\\\n                        ipo_gapInit_l=$params.ipo_gapInit_l_neg \\\\\n                        ipo_gapInit_h=$params.ipo_gapInit_h_neg \\\\\n                        ipo_gapExtend_l=$params.ipo_gapExtend_l_neg  \\\\\n                        ipo_gapExtend_h=$params.ipo_gapExtend_h_neg \\\\\n                        ipo_profStep_l=$params.ipo_profStep_l_neg \\\\\n                        ipo_profStep_h=$params.ipo_profStep_h_neg \\\\\n                        bw_l=$params.ipo_bw_l_neg \\\\\n                        bw_h=$params.ipo_bw_h_neg \\\\\n                        minfrac_l=$params.ipo_minfrac_l_neg  \\\\\n                        minfrac_h=$params.ipo_minfrac_h_neg \\\\\n                        mzwid_l=$params.ipo_mzwid_l_neg \\\\\n                        mzwid_h=$params.ipo_mzwid_h_neg \\\\\n                        minsamp_l=$params.ipo_minsamp_l_neg  \\\\\n                        minsamp_h=$params.ipo_minsamp_h_neg \\\\\n                        max_l=$params.ipo_max_l_neg \\\\\n                        max_h=$params.ipo_max_h_neg \\\\\n                        ncores=$params.ipo_ncores_neg \\\\\n                        outputxset=quant_params_neg.json \\\\\n                        outputrt=rt_params_neg.json\n                    \"\"\"\n                }",
        "nb_lignes_process": 77,
        "string_script": "                    def inputs_aggregated = mzMLFile.collect{ \"$it\" }.join(\",\")\n                    \"\"\"\n                    touch quant_params_neg.json\n                    touch rt_params_neg.json\n\n                    ipo.r \\\\\n                        input=$inputs_aggregated \\\\\n                        quantOnly=$ipo_neg_globalAvoidRT \\\\\n                        allSamples=$params.ipo_allSamples_neg \\\\\n                        columnToSelect=$params.ipo_columnToSelect_neg  \\\\\n                        valueToSelect=$params.ipo_valueToSelect_neg \\\\\n                        phenoFile=$phenotype_file  \\\\\n                        methodXset=$params.ipo_methodXset_neg \\\\\n                        methodRT=$params.ipo_methodRT_neg \\\\\n                        noise_l=$params.ipo_noise_l_neg  \\\\\n                        noise_h=$params.ipo_noise_h_neg \\\\\n                        prefilter_l_l=$params.ipo_prefilter_l_l_neg \\\\\n                        prefilter_l_h=$params.ipo_prefilter_l_h_neg  \\\\\n                        prefilter_h_l=$params.ipo_prefilter_h_l_neg \\\\\n                        prefilter_h_h=$params.ipo_prefilter_h_h_neg  \\\\\n                        snthresh_l=$params.ipo_snthresh_l_neg \\\\\n                        snthresh_h=$params.ipo_snthresh_h_neg \\\\\n                        mzCenterFun=$params.ipo_mzCenterFun_neg  \\\\\n                        integrate=$params.ipo_integrate_neg \\\\\n                        fitgauss=$params.ipo_fitgauss_neg \\\\\n                        ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_neg  \\\\\n                        ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_neg \\\\\n                        ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_neg \\\\\n                        ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_neg \\\\\n                        ipo_ppm_l=$params.ipo_ppm_l_neg  \\\\\n                        ipo_ppm_h=$params.ipo_ppm_h_neg \\\\\n                        ipo_mzdiff_l=$params.ipo_mzdiff_l_neg \\\\\n                        ipo_mzdiff_h=$params.ipo_mzdiff_h_neg \\\\\n                        ipo_charge_camera=$params.ipo_charge_camera_neg \\\\\n                        ipo_max_ppm_camera=$params.ipo_max_ppm_camera_neg  \\\\\n                        response_l=$params.ipo_response_l_neg \\\\\n                        response_h=$params.ipo_response_h_neg \\\\\n                        distFunc=$params.ipo_distFunc_neg \\\\\n                        factorDiag_l=$params.ipo_factorDiag_l_neg \\\\\n                        factorDiag_h=$params.ipo_factorDiag_h_neg \\\\\n                        factorGap_l=$params.ipo_factorGap_l_neg  \\\\\n                        factorGap_h=$params.ipo_factorGap_h_neg \\\\\n                        localAlignment=$params.ipo_localAlignment_neg \\\\\n                        ipo_gapInit_l=$params.ipo_gapInit_l_neg \\\\\n                        ipo_gapInit_h=$params.ipo_gapInit_h_neg \\\\\n                        ipo_gapExtend_l=$params.ipo_gapExtend_l_neg  \\\\\n                        ipo_gapExtend_h=$params.ipo_gapExtend_h_neg \\\\\n                        ipo_profStep_l=$params.ipo_profStep_l_neg \\\\\n                        ipo_profStep_h=$params.ipo_profStep_h_neg \\\\\n                        bw_l=$params.ipo_bw_l_neg \\\\\n                        bw_h=$params.ipo_bw_h_neg \\\\\n                        minfrac_l=$params.ipo_minfrac_l_neg  \\\\\n                        minfrac_h=$params.ipo_minfrac_h_neg \\\\\n                        mzwid_l=$params.ipo_mzwid_l_neg \\\\\n                        mzwid_h=$params.ipo_mzwid_h_neg \\\\\n                        minsamp_l=$params.ipo_minsamp_l_neg  \\\\\n                        minsamp_h=$params.ipo_minsamp_h_neg \\\\\n                        max_l=$params.ipo_max_l_neg \\\\\n                        max_h=$params.ipo_max_h_neg \\\\\n                        ncores=$params.ipo_ncores_neg \\\\\n                        outputxset=quant_params_neg.json \\\\\n                        outputrt=rt_params_neg.json\n                    \"\"\"",
        "nb_lignes_script": 62,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "param_detection_process_neg_ipo",
            "phenotype_design_neg_param"
        ],
        "nb_inputs": 2,
        "outputs": [
            "param_to_detection_process_neg",
            "param_to_rt_process_neg"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'ipo'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_ipo_param_neg_ipo\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_masstrace_detection_neg_xcms": {
        "name_process": "process_masstrace_detection_neg_xcms",
        "string_process": " process process_masstrace_detection_neg_xcms {\n                label 'xcms'\n                                     \n                tag \"$mzMLFile\"\n                publishDir \"${params.outdir}/process_masstrace_detection_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file mzMLFile from masstrace_detection_process_neg_openms\n                each file(phenotype_file) from phenotype_design_neg\n                each file(paramsQ) from param_target_to_detection_process_neg\n\n                output:\n                file \"${mzMLFile.baseName}.rdata\" into collect_rdata_neg_xcms\n                file \"${mzMLFile.baseName}.mzML\" into rt_rdata_neg_xcms\n\n                script:\n                def filter_argument = paramsQ.name == 'quant_params_neg.json' ? \"ipo_in=${paramsQ}\" : ''\n                \"\"\"\n                findPeaks.r \\\\\n                    input=\\$PWD/$mzMLFile \\\\\n                    output=\\$PWD/${mzMLFile.baseName}.rdata \\\\\n                    ppm=$params.masstrace_ppm_neg_xcms \\\\\n                    peakwidthLow=$params.peakwidthlow_quant_neg_xcms  \\\\\n                    peakwidthHigh=$params.peakwidthhigh_quant_neg_xcms \\\\\n                    noise=$params.noise_quant_neg_xcms \\\\\n                    polarity=negative \\\\\n                    realFileName=$mzMLFile \\\\\n                    phenoFile=$phenotype_file \\\\\n                    phenoDataColumn=$params.phenodatacolumn_quant_neg  \\\\\n                    sampleClass=$params.sampleclass_quant_neg_xcms \\\\\n                    mzdiff=$params.mzdiff_quant_neg_xcms \\\\\n                    snthresh=$params.snthresh_quant_neg_xcms \\\\\n                    prefilter_l=$params.prefilter_quant_neg_xcms  \\\\\n                    prefilter_h=$params.value_of_prefilter_quant_neg_xcms \\\\\n                    mzCenterFun=$params.mzCenterFun_quant_neg_xcms \\\\\n                    integrate=$params.integrate_quant_neg_xcms \\\\\n                    fitgauss=$params.fitgauss_quant_neg_xcms  \\\\\n                    methodXset=$params.ipo_methodXset_neg \\\\\n                    methodRT=$params.ipo_methodRT_neg \\\\\n                    noise_l=$params.ipo_noise_l_neg  \\\\\n                    noise_h=$params.ipo_noise_h_neg \\\\\n                    prefilter_l_l=$params.ipo_prefilter_l_l_neg \\\\\n                    prefilter_l_h=$params.ipo_prefilter_l_h_neg  \\\\\n                    prefilter_h_l=$params.ipo_prefilter_h_l_neg \\\\\n                    prefilter_h_h=$params.ipo_prefilter_h_h_neg  \\\\\n                    snthresh_l=$params.ipo_snthresh_l_neg \\\\\n                    snthresh_h=$params.ipo_snthresh_h_neg \\\\\n                    mzCenterFun=$params.ipo_mzCenterFun_neg  \\\\\n                    integrate=$params.ipo_integrate_neg \\\\\n                    fitgauss=$params.ipo_fitgauss_neg \\\\\n                    ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_neg  \\\\\n                    ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_neg \\\\\n                    ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_neg \\\\\n                    ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_neg \\\\\n                    ipo_ppm_l=$params.ipo_ppm_l_neg  \\\\\n                    ipo_ppm_h=$params.ipo_ppm_h_neg \\\\\n                    ipo_mzdiff_l=$params.ipo_mzdiff_l_neg \\\\\n                    ipo_mzdiff_h=$params.ipo_mzdiff_h_neg \\\\\n                    ipo_charge_camera=$params.ipo_charge_camera_neg \\\\\n                    ipo_max_ppm_camera=$params.ipo_max_ppm_camera_neg  \\\\\n                    ipo_inv=$ipo_neg_localQ \\\\\n                    $filter_argument\n                \"\"\"\n            }",
        "nb_lignes_process": 62,
        "string_script": "                def filter_argument = paramsQ.name == 'quant_params_neg.json' ? \"ipo_in=${paramsQ}\" : ''\n                \"\"\"\n                findPeaks.r \\\\\n                    input=\\$PWD/$mzMLFile \\\\\n                    output=\\$PWD/${mzMLFile.baseName}.rdata \\\\\n                    ppm=$params.masstrace_ppm_neg_xcms \\\\\n                    peakwidthLow=$params.peakwidthlow_quant_neg_xcms  \\\\\n                    peakwidthHigh=$params.peakwidthhigh_quant_neg_xcms \\\\\n                    noise=$params.noise_quant_neg_xcms \\\\\n                    polarity=negative \\\\\n                    realFileName=$mzMLFile \\\\\n                    phenoFile=$phenotype_file \\\\\n                    phenoDataColumn=$params.phenodatacolumn_quant_neg  \\\\\n                    sampleClass=$params.sampleclass_quant_neg_xcms \\\\\n                    mzdiff=$params.mzdiff_quant_neg_xcms \\\\\n                    snthresh=$params.snthresh_quant_neg_xcms \\\\\n                    prefilter_l=$params.prefilter_quant_neg_xcms  \\\\\n                    prefilter_h=$params.value_of_prefilter_quant_neg_xcms \\\\\n                    mzCenterFun=$params.mzCenterFun_quant_neg_xcms \\\\\n                    integrate=$params.integrate_quant_neg_xcms \\\\\n                    fitgauss=$params.fitgauss_quant_neg_xcms  \\\\\n                    methodXset=$params.ipo_methodXset_neg \\\\\n                    methodRT=$params.ipo_methodRT_neg \\\\\n                    noise_l=$params.ipo_noise_l_neg  \\\\\n                    noise_h=$params.ipo_noise_h_neg \\\\\n                    prefilter_l_l=$params.ipo_prefilter_l_l_neg \\\\\n                    prefilter_l_h=$params.ipo_prefilter_l_h_neg  \\\\\n                    prefilter_h_l=$params.ipo_prefilter_h_l_neg \\\\\n                    prefilter_h_h=$params.ipo_prefilter_h_h_neg  \\\\\n                    snthresh_l=$params.ipo_snthresh_l_neg \\\\\n                    snthresh_h=$params.ipo_snthresh_h_neg \\\\\n                    mzCenterFun=$params.ipo_mzCenterFun_neg  \\\\\n                    integrate=$params.ipo_integrate_neg \\\\\n                    fitgauss=$params.ipo_fitgauss_neg \\\\\n                    ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_neg  \\\\\n                    ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_neg \\\\\n                    ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_neg \\\\\n                    ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_neg \\\\\n                    ipo_ppm_l=$params.ipo_ppm_l_neg  \\\\\n                    ipo_ppm_h=$params.ipo_ppm_h_neg \\\\\n                    ipo_mzdiff_l=$params.ipo_mzdiff_l_neg \\\\\n                    ipo_mzdiff_h=$params.ipo_mzdiff_h_neg \\\\\n                    ipo_charge_camera=$params.ipo_charge_camera_neg \\\\\n                    ipo_max_ppm_camera=$params.ipo_max_ppm_camera_neg  \\\\\n                    ipo_inv=$ipo_neg_localQ \\\\\n                    $filter_argument\n                \"\"\"",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "masstrace_detection_process_neg_openms",
            "phenotype_design_neg",
            "param_target_to_detection_process_neg"
        ],
        "nb_inputs": 3,
        "outputs": [
            "collect_rdata_neg_xcms",
            "rt_rdata_neg_xcms"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_masstrace_detection_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_collect_rdata_neg_xcms": {
        "name_process": "process_collect_rdata_neg_xcms",
        "string_process": " process process_collect_rdata_neg_xcms {\n        label 'xcms'\n                             \n        tag \"A collection of files\"\n        publishDir \"${params.outdir}/process_collect_rdata_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from collect_rdata_neg_xcms.collect()\n\n        output:\n        file \"collection_neg.rdata\" into align_rdata_neg_xcms\n\n        script:\n        def inputs_aggregated = rdata_files.collect{ \"$it\" }.join(\",\")\n        \"\"\"\n        nextFlowDIR=\\$PWD\n        xcmsCollect.r input=$inputs_aggregated output=collection_neg.rdata\n        \"\"\"\n    }",
        "nb_lignes_process": 17,
        "string_script": "        def inputs_aggregated = rdata_files.collect{ \"$it\" }.join(\",\")\n        \"\"\"\n        nextFlowDIR=\\$PWD\n        xcmsCollect.r input=$inputs_aggregated output=collection_neg.rdata\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "collect_rdata_neg_xcms"
        ],
        "nb_inputs": 1,
        "outputs": [
            "align_rdata_neg_xcms"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_collect_rdata_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_align_peaks_neg_xcms": {
        "name_process": "process_align_peaks_neg_xcms",
        "string_process": " process process_align_peaks_neg_xcms {\n        label 'xcms'\n                             \n        tag \"$rdata_files\"\n        publishDir \"${params.outdir}/process_align_peaks_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from align_rdata_neg_xcms\n        file rd from rt_rdata_neg_xcms.collect()\n        each file(paramsRT) from param_target_to_rt_process_neg\n\n        output:\n        file \"RTcorrected_neg.rdata\" into group_peaks_neg_N1_xcms\n\n        script:\n        def inputs_aggregated = rd.collect{ \"$it\" }.join(\",\")\n        def filter_argument = paramsRT.name == 'rt_params_neg.json' ? \"ipo_in=$paramsRT\" : ''\n        \"\"\"\n        retCor.r \\\\\n            input=\\$PWD/$rdata_files \\\\\n            output=RTcorrected_neg.rdata \\\\\n            method=obiwarp \\\\\n            response_l=$params.ipo_response_l_neg \\\\\n            response_h=$params.ipo_response_h_neg \\\\\n            distFunc=$params.ipo_distFunc_neg \\\\\n            factorDiag_l=$params.ipo_factorDiag_l_neg \\\\\n            factorDiag_h=$params.ipo_factorDiag_h_neg \\\\\n            factorGap_l=$params.ipo_factorGap_l_neg  \\\\\n            factorGap_h=$params.ipo_factorGap_h_neg \\\\\n            localAlignment=$params.ipo_localAlignment_neg \\\\\n            ipo_gapInit_l=$params.ipo_gapInit_l_neg \\\\\n            ipo_gapInit_h=$params.ipo_gapInit_h_neg \\\\\n            ipo_gapExtend_l=$params.ipo_gapExtend_l_neg  \\\\\n            ipo_gapExtend_h=$params.ipo_gapExtend_h_neg \\\\\n            ipo_profStep_l=$params.ipo_profStep_l_neg \\\\\n            ipo_profStep_h=$params.ipo_profStep_h_neg \\\\\n            bw_l=$params.ipo_bw_l_neg \\\\\n            bw_h=$params.ipo_bw_h_neg \\\\\n            minfrac_l=$params.ipo_minfrac_l_neg  \\\\\n            minfrac_h=$params.ipo_minfrac_h_neg \\\\\n            mzwid_l=$params.ipo_mzwid_l_neg \\\\\n            mzwid_h=$params.ipo_mzwid_h_neg \\\\\n            minsamp_l=$params.ipo_minsamp_l_neg  \\\\\n            minsamp_h=$params.ipo_minsamp_h_neg \\\\\n            max_l=$params.ipo_max_l_neg \\\\\n            max_h=$params.ipo_max_h_neg \\\\\n            ipo_inv=$ipo_neg_localRT \\\\\n            ncores=$params.ipo_ncores_neg  \\\\\n            profStep=$params.profStep_align_N1_neg_xcms \\\\\n            center=$params.center_align_N1_neg_xcms \\\\\n            response=$params.response_align_N1_neg_xcms  \\\\\n            distFunc=$params.distFunc_align_N1_neg_xcms \\\\\n            gapInit=$params.gapInit_align_N1_neg_xcms \\\\\n            gapExtend=$params.gapExtend_align_N1_neg_xcms  \\\\\n            factorDiag=$params.factorDiag_align_N1_neg_xcms \\\\\n            factorGap=$params.factorGap_align_N1_neg_xcms \\\\\n            localAlignment=$params.localAlignment_align_N1_neg_xcms \\\\\n            $filter_argument \\\\\n            inputraw=$inputs_aggregated\n        \"\"\"\n    }",
        "nb_lignes_process": 59,
        "string_script": "        def inputs_aggregated = rd.collect{ \"$it\" }.join(\",\")\n        def filter_argument = paramsRT.name == 'rt_params_neg.json' ? \"ipo_in=$paramsRT\" : ''\n        \"\"\"\n        retCor.r \\\\\n            input=\\$PWD/$rdata_files \\\\\n            output=RTcorrected_neg.rdata \\\\\n            method=obiwarp \\\\\n            response_l=$params.ipo_response_l_neg \\\\\n            response_h=$params.ipo_response_h_neg \\\\\n            distFunc=$params.ipo_distFunc_neg \\\\\n            factorDiag_l=$params.ipo_factorDiag_l_neg \\\\\n            factorDiag_h=$params.ipo_factorDiag_h_neg \\\\\n            factorGap_l=$params.ipo_factorGap_l_neg  \\\\\n            factorGap_h=$params.ipo_factorGap_h_neg \\\\\n            localAlignment=$params.ipo_localAlignment_neg \\\\\n            ipo_gapInit_l=$params.ipo_gapInit_l_neg \\\\\n            ipo_gapInit_h=$params.ipo_gapInit_h_neg \\\\\n            ipo_gapExtend_l=$params.ipo_gapExtend_l_neg  \\\\\n            ipo_gapExtend_h=$params.ipo_gapExtend_h_neg \\\\\n            ipo_profStep_l=$params.ipo_profStep_l_neg \\\\\n            ipo_profStep_h=$params.ipo_profStep_h_neg \\\\\n            bw_l=$params.ipo_bw_l_neg \\\\\n            bw_h=$params.ipo_bw_h_neg \\\\\n            minfrac_l=$params.ipo_minfrac_l_neg  \\\\\n            minfrac_h=$params.ipo_minfrac_h_neg \\\\\n            mzwid_l=$params.ipo_mzwid_l_neg \\\\\n            mzwid_h=$params.ipo_mzwid_h_neg \\\\\n            minsamp_l=$params.ipo_minsamp_l_neg  \\\\\n            minsamp_h=$params.ipo_minsamp_h_neg \\\\\n            max_l=$params.ipo_max_l_neg \\\\\n            max_h=$params.ipo_max_h_neg \\\\\n            ipo_inv=$ipo_neg_localRT \\\\\n            ncores=$params.ipo_ncores_neg  \\\\\n            profStep=$params.profStep_align_N1_neg_xcms \\\\\n            center=$params.center_align_N1_neg_xcms \\\\\n            response=$params.response_align_N1_neg_xcms  \\\\\n            distFunc=$params.distFunc_align_N1_neg_xcms \\\\\n            gapInit=$params.gapInit_align_N1_neg_xcms \\\\\n            gapExtend=$params.gapExtend_align_N1_neg_xcms  \\\\\n            factorDiag=$params.factorDiag_align_N1_neg_xcms \\\\\n            factorGap=$params.factorGap_align_N1_neg_xcms \\\\\n            localAlignment=$params.localAlignment_align_N1_neg_xcms \\\\\n            $filter_argument \\\\\n            inputraw=$inputs_aggregated\n        \"\"\"",
        "nb_lignes_script": 44,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "align_rdata_neg_xcms",
            "rt_rdata_neg_xcms",
            "param_target_to_rt_process_neg"
        ],
        "nb_inputs": 3,
        "outputs": [
            "group_peaks_neg_N1_xcms"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_align_peaks_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_group_peaks_neg_N1_xcms": {
        "name_process": "process_group_peaks_neg_N1_xcms",
        "string_process": " process process_group_peaks_neg_N1_xcms {\n        label 'xcms'\n                             \n        tag \"$rdata_files\"\n        publishDir \"${params.outdir}/process_group_peaks_neg_N1_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from group_peaks_neg_N1_xcms\n\n        output:\n        file \"groupN1_neg.rdata\" into temp_unfiltered_channel_neg_1\n\n        \"\"\"\n        group.r \\\\\n            input=$rdata_files \\\\\n            output=groupN1_neg.rdata \\\\\n            bandwidth=$params.bandwidth_group_N1_neg_xcms \\\\\n            minfrac=$params.minfrac_group_N1_neg_xcms \\\\\n            minsamp=$params.minsamp_group_N1_neg_xcms \\\\\n            max=$params.max_group_N1_neg_xcms  \\\\\n            mzwid=$params.mzwid_group_N1_neg_xcms\n        \"\"\"\n    }",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n        group.r \\\\\n            input=$rdata_files \\\\\n            output=groupN1_neg.rdata \\\\\n            bandwidth=$params.bandwidth_group_N1_neg_xcms \\\\\n            minfrac=$params.minfrac_group_N1_neg_xcms \\\\\n            minsamp=$params.minsamp_group_N1_neg_xcms \\\\\n            max=$params.max_group_N1_neg_xcms  \\\\\n            mzwid=$params.mzwid_group_N1_neg_xcms\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "group_peaks_neg_N1_xcms"
        ],
        "nb_inputs": 1,
        "outputs": [
            "temp_unfiltered_channel_neg_1"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_group_peaks_neg_N1_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_blank_filter_neg_xcms": {
        "name_process": "process_blank_filter_neg_xcms",
        "string_process": " process process_blank_filter_neg_xcms {\n            label 'xcms'\n                                 \n            tag \"$rdata_files\"\n            publishDir \"${params.outdir}/process_blank_filter_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file rdata_files from blankfilter_rdata_neg_xcms\n\n            output:\n            file \"blankFiltered_neg.rdata\" into temp_unfiltered_channel_neg_2\n\n            \"\"\"\n            blankfilter.r \\\\\n                input=$rdata_files \\\\\n                output=blankFiltered_neg.rdata \\\\\n                method=$params.method_blankfilter_neg_xcms \\\\\n                blank=$params.blank_blankfilter_neg_xcms \\\\\n                sample=$params.sample_blankfilter_neg_xcms \\\\\n                rest=$params.rest_blankfilter_neg_xcms\n            \"\"\"\n        }",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n            blankfilter.r \\\\\n                input=$rdata_files \\\\\n                output=blankFiltered_neg.rdata \\\\\n                method=$params.method_blankfilter_neg_xcms \\\\\n                blank=$params.blank_blankfilter_neg_xcms \\\\\n                sample=$params.sample_blankfilter_neg_xcms \\\\\n                rest=$params.rest_blankfilter_neg_xcms\n            \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blankfilter_rdata_neg_xcms"
        ],
        "nb_inputs": 1,
        "outputs": [
            "temp_unfiltered_channel_neg_2"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_blank_filter_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_dilution_filter_neg_xcms": {
        "name_process": "process_dilution_filter_neg_xcms",
        "string_process": " process process_dilution_filter_neg_xcms {\n            label 'xcms'\n                                 \n            tag \"$rdata_files\"\n            publishDir \"${params.outdir}/process_dilution_filter_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file rdata_files from dilutionfilter_rdata_neg_xcms\n\n            output:\n            file \"dilutionFiltered_neg.rdata\" into temp_unfiltered_channel_neg_3\n\n            \"\"\"\n            dilutionfilter.r \\\\\n                input=$rdata_files \\\\\n                output=dilutionFiltered_neg.rdata \\\\\n                Corto=$params.corto_dilutionfilter_neg_xcms  \\\\\n                dilution=$params.dilution_dilutionfilter_neg_xcms \\\\\n                pvalue=$params.pvalue_dilutionfilter_neg_xcms \\\\\n                corcut=$params.corcut_dilutionfilter_neg_xcms \\\\\n                abs=$params.abs_dilutionfilter_neg_xcms\n            \"\"\"\n        }",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n            dilutionfilter.r \\\\\n                input=$rdata_files \\\\\n                output=dilutionFiltered_neg.rdata \\\\\n                Corto=$params.corto_dilutionfilter_neg_xcms  \\\\\n                dilution=$params.dilution_dilutionfilter_neg_xcms \\\\\n                pvalue=$params.pvalue_dilutionfilter_neg_xcms \\\\\n                corcut=$params.corcut_dilutionfilter_neg_xcms \\\\\n                abs=$params.abs_dilutionfilter_neg_xcms\n            \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dilutionfilter_rdata_neg_xcms"
        ],
        "nb_inputs": 1,
        "outputs": [
            "temp_unfiltered_channel_neg_3"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_dilution_filter_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_cv_filter_neg_xcms": {
        "name_process": "process_cv_filter_neg_xcms",
        "string_process": " process process_cv_filter_neg_xcms {\n            label 'xcms'\n                                 \n            tag \"$rdata_files\"\n            publishDir \"${params.outdir}/process_cv_filter_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file rdata_files from cvfilter_rdata_neg_xcms\n\n            output:\n            file \"cvFiltered_neg.rdata\" into temp_unfiltered_channel_neg_4\n\n            \"\"\"\n            cvfilter.r \\\\\n                input=$rdata_files \\\\\n                output=cvFiltered_neg.rdata \\\\\n                qc=$params.qc_cvfilter_neg_xcms \\\\\n                cvcut=$params.cvcut_cvfilter_neg_xcms\n            \"\"\"\n        }",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n            cvfilter.r \\\\\n                input=$rdata_files \\\\\n                output=cvFiltered_neg.rdata \\\\\n                qc=$params.qc_cvfilter_neg_xcms \\\\\n                cvcut=$params.cvcut_cvfilter_neg_xcms\n            \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cvfilter_rdata_neg_xcms"
        ],
        "nb_inputs": 1,
        "outputs": [
            "temp_unfiltered_channel_neg_4"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_cv_filter_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_annotate_peaks_neg_camera": {
        "name_process": "process_annotate_peaks_neg_camera",
        "string_process": " process process_annotate_peaks_neg_camera {\n        label 'camera'\n                             \n        tag \"$rdata_files\"\n        publishDir \"${params.outdir}/process_annotate_peaks_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from annotation_rdata_neg_camera\n\n        output:\n        file \"CameraAnnotatePeaks_neg.rdata\" into group_rdata_neg_camera\n\n        \"\"\"\n        xsAnnotate.r input=$rdata_files output=CameraAnnotatePeaks_neg.rdata\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n        xsAnnotate.r input=$rdata_files output=CameraAnnotatePeaks_neg.rdata\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annotation_rdata_neg_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "group_rdata_neg_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_annotate_peaks_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_group_peaks_neg_camera": {
        "name_process": "process_group_peaks_neg_camera",
        "string_process": " process process_group_peaks_neg_camera {\n        label 'camera'\n                             \n        tag \"$rdata_files\"\n        publishDir \"${params.outdir}/process_group_peaks_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from group_rdata_neg_camera\n\n        output:\n        file \"CameraGroup_neg.rdata\" into findaddcuts_rdata_neg_camera\n\n        \"\"\"\n        groupFWHM.r \\\\\n            input=$rdata_files \\\\\n            output=CameraGroup_neg.rdata \\\\\n            sigma=$params.sigma_group_neg_camera \\\\\n            perfwhm=$params.perfwhm_group_neg_camera \\\\\n            intval=$params.intval_group_neg_camera\n        \"\"\"\n    }",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n        groupFWHM.r \\\\\n            input=$rdata_files \\\\\n            output=CameraGroup_neg.rdata \\\\\n            sigma=$params.sigma_group_neg_camera \\\\\n            perfwhm=$params.perfwhm_group_neg_camera \\\\\n            intval=$params.intval_group_neg_camera\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "group_rdata_neg_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "findaddcuts_rdata_neg_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_group_peaks_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_find_addcuts_neg_camera": {
        "name_process": "process_find_addcuts_neg_camera",
        "string_process": " process process_find_addcuts_neg_camera {\n        label 'camera'\n                             \n        tag \"$rdata_files\"\n        publishDir \"${params.outdir}/process_find_addcuts_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from findaddcuts_rdata_neg_camera\n\n        output:\n        file \"CameraFindAdducts_neg.rdata\" into findisotopes_rdata_neg_camera\n\n        \"\"\"\n        findAdducts.r \\\\\n            input=$rdata_files \\\\\n            output=CameraFindAdducts_neg.rdata \\\\\n            ppm=$params.ppm_findaddcuts_neg_camera \\\\\n            polarity=$params.polarity_findaddcuts_neg_camera\n        \"\"\"\n    }",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n        findAdducts.r \\\\\n            input=$rdata_files \\\\\n            output=CameraFindAdducts_neg.rdata \\\\\n            ppm=$params.ppm_findaddcuts_neg_camera \\\\\n            polarity=$params.polarity_findaddcuts_neg_camera\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "findaddcuts_rdata_neg_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "findisotopes_rdata_neg_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_find_addcuts_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_find_isotopes_neg_camera": {
        "name_process": "process_find_isotopes_neg_camera",
        "string_process": " process process_find_isotopes_neg_camera {\n        label 'camera'\n                             \n        tag \"$rdata_files\"\n        publishDir \"${params.outdir}/process_find_isotopes_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n        input:\n        file rdata_files from findisotopes_rdata_neg_camera\n\n        output:\n        file \"CameraFindIsotopes_neg.rdata\" into mapmsmstocamera_rdata_neg_camera,mapmsmstoparam_rdata_neg_camera,prepareoutput_rdata_neg_camera_csifingerid, prepareoutput_rdata_neg_camera_cfmid, prepareoutput_rdata_neg_camera_metfrag, prepareoutput_rdata_neg_camera_library, prepareoutput_rdata_neg_camera_noid\n\n        \"\"\"\n        findIsotopes.r \\\\\n            input=$rdata_files \\\\\n            output=CameraFindIsotopes_neg.rdata \\\\\n            maxcharge=$params.maxcharge_findisotopes_neg_camera\n        \"\"\"\n    }",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n        findIsotopes.r \\\\\n            input=$rdata_files \\\\\n            output=CameraFindIsotopes_neg.rdata \\\\\n            maxcharge=$params.maxcharge_findisotopes_neg_camera\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "findisotopes_rdata_neg_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapmsmstocamera_rdata_neg_camera",
            "mapmsmstoparam_rdata_neg_camera",
            "prepareoutput_rdata_neg_camera_csifingerid",
            "prepareoutput_rdata_neg_camera_cfmid",
            "prepareoutput_rdata_neg_camera_metfrag",
            "prepareoutput_rdata_neg_camera_library",
            "prepareoutput_rdata_neg_camera_noid"
        ],
        "nb_outputs": 7,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_find_isotopes_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_peak_picker_msms_neg_openms": {
        "name_process": "process_peak_picker_msms_neg_openms",
        "string_process": " process process_peak_picker_msms_neg_openms  {\n                 label 'openms'\n                                      \n                 tag \"$mzMLFile\"\n                 publishDir \"${params.outdir}/process_peak_picker_msms_neg_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n                 stageInMode 'copy'\n\n                 input:\n                 file mzMLFile from id_mzml_files_neg\n                 each file(setting_file) from peakpicker_ini_file_msms_neg_openms\n\n                 output:\n                 file \"${mzMLFile}\" into id_mzml_files_neg_msnbase\n\n                 \"\"\"\n                 PeakPickerHiRes -in $mzMLFile -out $mzMLFile -ini $setting_file\n                 \"\"\"\n             }",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n                 PeakPickerHiRes -in $mzMLFile -out $mzMLFile -ini $setting_file\n                 \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id_mzml_files_neg",
            "peakpicker_ini_file_msms_neg_openms"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id_mzml_files_neg_msnbase"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'openms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_peak_picker_msms_neg_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_read_MS2_neg_msnbase": {
        "name_process": "process_read_MS2_neg_msnbase",
        "string_process": " process process_read_MS2_neg_msnbase {\n            label 'msnbase'\n                                 \n            tag \"$mzMLFile\"\n            publishDir \"${params.outdir}/process_read_MS2_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file mzMLFile from id_mzml_files_neg_msnbase\n\n            output:\n            file \"${mzMLFile.baseName}.rdata\" into mapmsmstocamera_rdata_neg_msnbase\n\n            \"\"\"\n            readMS2MSnBase.r \\\\\n                input=$mzMLFile \\\\\n                output=${mzMLFile.baseName}.rdata \\\\\n                inputname=${mzMLFile.baseName}\n            \"\"\"\n        }",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n            readMS2MSnBase.r \\\\\n                input=$mzMLFile \\\\\n                output=${mzMLFile.baseName}.rdata \\\\\n                inputname=${mzMLFile.baseName}\n            \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id_mzml_files_neg_msnbase"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapmsmstocamera_rdata_neg_msnbase"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_read_MS2_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_mapmsms_tocamera_neg_msnbase": {
        "name_process": "process_mapmsms_tocamera_neg_msnbase",
        "string_process": " process process_mapmsms_tocamera_neg_msnbase {\n            label 'msnbase'\n                                    \n            tag \"A collection of files\"\n            publishDir \"${params.outdir}/process_mapmsms_tocamera_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file rdata_files_ms2 from mapmsmstocamera_rdata_neg_msnbase.collect()\n            file rdata_files_ms1 from mapmsmstocamera_rdata_neg_camera\n\n            output:\n            file \"MapMsms2Camera_neg.rdata\" into mapmsmstoparam_rdata_neg_msnbase\n\n            script:\n            def input_args = rdata_files_ms2.collect{ \"$it\" }.join(\",\")\n            \"\"\"\n            mapMS2ToCamera.r \\\\\n                inputCAMERA=$rdata_files_ms1 \\\\\n                inputMS2=$input_args \\\\\n                output=MapMsms2Camera_neg.rdata  \\\\\n                ppm=$params.ppm_mapmsmstocamera_neg_msnbase \\\\\n                rt=$params.rt_mapmsmstocamera_neg_msnbase \\\\\n                preprocess_ms2=$params.preprocess_msms_neg_msnbase \\\\\n                preprocess_msms_centroid=$params.preprocess_msms_centroid_neg_msnbase \\\\\n                preprocess_msms_merge=$params.preprocess_msms_merge_neg_msnbase \\\\\n                preprocess_msms_centroid_after_merge=$params.preprocess_msms_centroid_after_merge_neg_msnbase \\\\\n                preprocess_msms_ppm=$params.preprocess_msms_ppm_neg_msnbase \\\\\n                preprocess_msms_ppm_precursor=$params.preprocess_msms_ppm_precursor_neg_msnbase \\\\\n                preprocess_msms_abs_mz=$params.preprocess_msms_abs_mz_neg_msnbase \\\\\n                preprocess_msms_abs_mz_precursor=$params.preprocess_msms_abs_mz_precursor_neg_msnbase \\\\\n                preprocess_msms_rt=$params.preprocess_msms_rt_neg_msnbase \\\\\n                preprocess_msms_centroid_onlymapped=$params.preprocess_msms_centroid_onlymapped_neg_msnbase \\\\\n                preprocess_msms_merge_onlymapped=$params.preprocess_msms_merge_onlymapped_neg_msnbase \\\\\n                preprocess_msms_int_threshold=$params.preprocess_msms_int_threshold_neg_msnbase\n            \"\"\"\n        }",
        "nb_lignes_process": 34,
        "string_script": "            def input_args = rdata_files_ms2.collect{ \"$it\" }.join(\",\")\n            \"\"\"\n            mapMS2ToCamera.r \\\\\n                inputCAMERA=$rdata_files_ms1 \\\\\n                inputMS2=$input_args \\\\\n                output=MapMsms2Camera_neg.rdata  \\\\\n                ppm=$params.ppm_mapmsmstocamera_neg_msnbase \\\\\n                rt=$params.rt_mapmsmstocamera_neg_msnbase \\\\\n                preprocess_ms2=$params.preprocess_msms_neg_msnbase \\\\\n                preprocess_msms_centroid=$params.preprocess_msms_centroid_neg_msnbase \\\\\n                preprocess_msms_merge=$params.preprocess_msms_merge_neg_msnbase \\\\\n                preprocess_msms_centroid_after_merge=$params.preprocess_msms_centroid_after_merge_neg_msnbase \\\\\n                preprocess_msms_ppm=$params.preprocess_msms_ppm_neg_msnbase \\\\\n                preprocess_msms_ppm_precursor=$params.preprocess_msms_ppm_precursor_neg_msnbase \\\\\n                preprocess_msms_abs_mz=$params.preprocess_msms_abs_mz_neg_msnbase \\\\\n                preprocess_msms_abs_mz_precursor=$params.preprocess_msms_abs_mz_precursor_neg_msnbase \\\\\n                preprocess_msms_rt=$params.preprocess_msms_rt_neg_msnbase \\\\\n                preprocess_msms_centroid_onlymapped=$params.preprocess_msms_centroid_onlymapped_neg_msnbase \\\\\n                preprocess_msms_merge_onlymapped=$params.preprocess_msms_merge_onlymapped_neg_msnbase \\\\\n                preprocess_msms_int_threshold=$params.preprocess_msms_int_threshold_neg_msnbase\n            \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mapmsmstocamera_rdata_neg_msnbase",
            "mapmsmstocamera_rdata_neg_camera"
        ],
        "nb_inputs": 2,
        "outputs": [
            "mapmsmstoparam_rdata_neg_msnbase"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_mapmsms_tocamera_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_mapmsms_toparam_neg_msnbase": {
        "name_process": "process_mapmsms_toparam_neg_msnbase",
        "string_process": " process process_mapmsms_toparam_neg_msnbase {\n            label 'msnbase'\n                                    \n            tag \"$rdata_files_ms2\"\n            publishDir \"${params.outdir}/process_mapmsms_toparam_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file rdata_files_ms2 from mapmsmstoparam_rdata_neg_msnbase\n            file rdata_files_ms1 from mapmsmstoparam_rdata_neg_camera\n\n            output:\n            file \"*.zip\" into csifingerid_txt_neg_msnbase, addcutremove_txt_neg_msnbase, metfrag_txt_neg_msnbase, cfmidin_txt_neg_msnbase\n\n            \"\"\"\n            mkdir out\n\n            MS2ToMetFrag.r \\\\\n                inputCAMERA=$rdata_files_ms1 \\\\\n                inputMS2=$rdata_files_ms2 \\\\\n                output=out \\\\\n                precursorppm=$params.precursorppm_msmstoparam_neg_msnbase  \\\\\n                fragmentppm=$params.fragmentppm_msmstoparam_neg_msnbase \\\\\n                fragmentabs=$params.fragmentabs_msmstoparam_neg_msnbase \\\\\n                database=$params.database_msmstoparam_neg_msnbase  \\\\\n                mode=$params.mode_msmstoparam_neg_msnbase \\\\\n                adductRules=$params.adductRules_msmstoparam_neg_msnbase \\\\\n                minPeaks=$params.minPeaks_msmstoparam_neg_msnbase\n\n            ls out/ -A -1  | cut -d'_' -f4- | tr ' ' '\\n' | sort -u | xargs -I %  find out/ -type f -iname *% -exec zip %.zip {} +\n            \"\"\"\n        }",
        "nb_lignes_process": 29,
        "string_script": "\"\"\"\n            mkdir out\n\n            MS2ToMetFrag.r \\\\\n                inputCAMERA=$rdata_files_ms1 \\\\\n                inputMS2=$rdata_files_ms2 \\\\\n                output=out \\\\\n                precursorppm=$params.precursorppm_msmstoparam_neg_msnbase  \\\\\n                fragmentppm=$params.fragmentppm_msmstoparam_neg_msnbase \\\\\n                fragmentabs=$params.fragmentabs_msmstoparam_neg_msnbase \\\\\n                database=$params.database_msmstoparam_neg_msnbase  \\\\\n                mode=$params.mode_msmstoparam_neg_msnbase \\\\\n                adductRules=$params.adductRules_msmstoparam_neg_msnbase \\\\\n                minPeaks=$params.minPeaks_msmstoparam_neg_msnbase\n\n            ls out/ -A -1  | cut -d'_' -f4- | tr ' ' '\\n' | sort -u | xargs -I %  find out/ -type f -iname *% -exec zip %.zip {} +\n            \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mapmsmstoparam_rdata_neg_msnbase",
            "mapmsmstoparam_rdata_neg_camera"
        ],
        "nb_inputs": 2,
        "outputs": [
            "csifingerid_txt_neg_msnbase",
            "addcutremove_txt_neg_msnbase",
            "metfrag_txt_neg_msnbase",
            "cfmidin_txt_neg_msnbase"
        ],
        "nb_outputs": 4,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$rdata_files_ms2\"",
            "publishDir \"${params.outdir}/process_mapmsms_toparam_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_ms2_identification_neg_csifingerid": {
        "name_process": "process_ms2_identification_neg_csifingerid",
        "string_process": " process process_ms2_identification_neg_csifingerid {\n                label 'csifingerid'\n                label 'process_verylong'\n                tag \"$parameters\"\n                publishDir \"${params.outdir}/process_ms2_identification_neg_csifingerid\", mode: params.publish_dir_mode\n\n                input:\n                file parameters from csifingerid_txt_neg_msnbase_flatten\n\n                output:\n                file \"${parameters.baseName}_Csifingerid_neg.zip\" into aggregateID_csv_neg_csifingerid\n                file \"${parameters.baseName}_class_Csifingerid_neg.csv\" into aggregateClass_csv_neg_csifingerid\n\n                \"\"\"\n                mkdir inputs\n                mkdir outputs\n                unzip  -j $parameters -d inputs/\n                touch ${parameters.baseName}_class_Csifingerid_neg.csv\n\n                fingerID.r \\\\\n                    input=\\$PWD/inputs \\\\\n                    database=$params.database_csifingerid_neg_csifingerid \\\\\n                    tryOffline=T \\\\\n                    output=\\$PWD/outputs/ \\\\\n                    ncores=$params.ncore_csifingerid_neg_csifingerid  \\\\\n                    timeout=$params.timeout_csifingerid_neg_csifingerid \\\\\n                    timeoutTree=$params.timeoutTree_csifingerid_neg_csifingerid \\\\\n                    UseHeuristic=$params.useheuristic_csifingerid_neg_csifingerid \\\\\n                    mzToUseHeuristicOnly=$params.mztouseheuristiconly_csifingerid_neg_csifingerid \\\\\n                    mzToUseHeuristic=$params.mztouseheuristic_csifingerid_neg_csifingerid \\\\\n                    canopus=T \\\\\n                    canopusOutput=\\$PWD/${parameters.baseName}_class_Csifingerid_neg.csv\n\n                    if [ -z \"\\$(ls -A outputs/)\" ]; then\n                    printf '%s\\n' \"No metabolites were identified. Check your settings\"\n                    #exit 1\n                    touch outputs/empty.csv\n                    zip -j -r ${parameters.baseName}_Csifingerid_neg.zip outputs/*.csv\n                    else\n                       zip -j -r ${parameters.baseName}_Csifingerid_neg.zip outputs/*.csv\n                    fi\n\n                \"\"\"\n            }",
        "nb_lignes_process": 42,
        "string_script": "\"\"\"\n                mkdir inputs\n                mkdir outputs\n                unzip  -j $parameters -d inputs/\n                touch ${parameters.baseName}_class_Csifingerid_neg.csv\n\n                fingerID.r \\\\\n                    input=\\$PWD/inputs \\\\\n                    database=$params.database_csifingerid_neg_csifingerid \\\\\n                    tryOffline=T \\\\\n                    output=\\$PWD/outputs/ \\\\\n                    ncores=$params.ncore_csifingerid_neg_csifingerid  \\\\\n                    timeout=$params.timeout_csifingerid_neg_csifingerid \\\\\n                    timeoutTree=$params.timeoutTree_csifingerid_neg_csifingerid \\\\\n                    UseHeuristic=$params.useheuristic_csifingerid_neg_csifingerid \\\\\n                    mzToUseHeuristicOnly=$params.mztouseheuristiconly_csifingerid_neg_csifingerid \\\\\n                    mzToUseHeuristic=$params.mztouseheuristic_csifingerid_neg_csifingerid \\\\\n                    canopus=T \\\\\n                    canopusOutput=\\$PWD/${parameters.baseName}_class_Csifingerid_neg.csv\n\n                    if [ -z \"\\$(ls -A outputs/)\" ]; then\n                    printf '%s\\n' \"No metabolites were identified. Check your settings\"\n                    #exit 1\n                    touch outputs/empty.csv\n                    zip -j -r ${parameters.baseName}_Csifingerid_neg.zip outputs/*.csv\n                    else\n                       zip -j -r ${parameters.baseName}_Csifingerid_neg.zip outputs/*.csv\n                    fi\n\n                \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "listinputs"
        ],
        "tools_url": [
            "https://bio.tools/listinputs"
        ],
        "tools_dico": [
            {
                "name": "listinputs",
                "uri": "https://bio.tools/listinputs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Give a list of input files from different conditions/groups for DESeq analysis, DESeq can then charge these input files from the given list.",
                "homepage": "https://urgi.versailles.inra.fr/Tools/REPET"
            }
        ],
        "inputs": [
            "csifingerid_txt_neg_msnbase_flatten"
        ],
        "nb_inputs": 1,
        "outputs": [
            "aggregateID_csv_neg_csifingerid",
            "aggregateClass_csv_neg_csifingerid"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'csifingerid'",
            "label 'process_verylong'",
            "tag \"$parameters\"",
            "publishDir \"${params.outdir}/process_ms2_identification_neg_csifingerid\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_identification_aggregate_neg_csifingerid": {
        "name_process": "process_identification_aggregate_neg_csifingerid",
        "string_process": " process process_identification_aggregate_neg_csifingerid {\n                label 'msnbase'\n                                     \n                publishDir \"${params.outdir}/process_identification_aggregate_neg_csifingerid\", mode: params.publish_dir_mode\n\n                input:\n                file identification_result from aggregateID_csv_neg_csifingerid.collect()\n\n                output:\n                file \"aggregated_identification_csifingerid_neg.csv\" into csifingerid_tsv_neg_passatutto\n\n                \"\"\"\n                ulimit -s unlimited\n                mkdir all\n                for x in *.zip ; do unzip -d all -o -u \\$x ; done\n                zip -r Csifingerid_neg.zip all\n\n                aggregateMetfrag.r \\\\\n                    inputs=Csifingerid_neg.zip \\\\\n                    realNames=Csifingerid_neg.zip \\\\\n                    output=aggregated_identification_csifingerid_neg.csv \\\\\n                    filetype=zip \\\\\n                    outTable=T\n\n                sed -i '/^\\$/d' aggregated_identification_csifingerid_neg.csv\n                \"\"\"\n            }",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n                ulimit -s unlimited\n                mkdir all\n                for x in *.zip ; do unzip -d all -o -u \\$x ; done\n                zip -r Csifingerid_neg.zip all\n\n                aggregateMetfrag.r \\\\\n                    inputs=Csifingerid_neg.zip \\\\\n                    realNames=Csifingerid_neg.zip \\\\\n                    output=aggregated_identification_csifingerid_neg.csv \\\\\n                    filetype=zip \\\\\n                    outTable=T\n\n                sed -i '/^\\$/d' aggregated_identification_csifingerid_neg.csv\n                \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aggregateID_csv_neg_csifingerid"
        ],
        "nb_inputs": 1,
        "outputs": [
            "csifingerid_tsv_neg_passatutto"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "publishDir \"${params.outdir}/process_identification_aggregate_neg_csifingerid\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_pepcalculation_csifingerid_neg_passatutto": {
        "name_process": "process_pepcalculation_csifingerid_neg_passatutto",
        "string_process": " process process_pepcalculation_csifingerid_neg_passatutto {\n                label 'passatutto'\n                                     \n                tag \"$identification_result\"\n                publishDir \"${params.outdir}/process_pepcalculation_csifingerid_neg_passatutto\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file identification_result from csifingerid_tsv_neg_passatutto\n\n                output:\n                file \"pep_identification_csifingerid_neg.csv\" into csifingerid_tsv_neg_output\n\n                \"\"\"\n                if [ -s $identification_result ]; then\n                    metfragPEP.r \\\\\n                        input=$identification_result \\\\\n                        score=score \\\\\n                        output=pep_identification_csifingerid_neg.csv \\\\\n                        readTable=T\n                else\n                    touch pep_identification_csifingerid_neg.csv\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n                if [ -s $identification_result ]; then\n                    metfragPEP.r \\\\\n                        input=$identification_result \\\\\n                        score=score \\\\\n                        output=pep_identification_csifingerid_neg.csv \\\\\n                        readTable=T\n                else\n                    touch pep_identification_csifingerid_neg.csv\n                fi\n                \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "csifingerid_tsv_neg_passatutto"
        ],
        "nb_inputs": 1,
        "outputs": [
            "csifingerid_tsv_neg_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'passatutto'",
            "tag \"$identification_result\"",
            "publishDir \"${params.outdir}/process_pepcalculation_csifingerid_neg_passatutto\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_output_quantid_neg_camera_csifingerid": {
        "name_process": "process_output_quantid_neg_camera_csifingerid",
        "string_process": " process process_output_quantid_neg_camera_csifingerid {\n                label 'camera'\n                                      \n                tag \"$camera_input_quant\"\n                publishDir \"${params.outdir}/process_output_quantid_neg_camera_csifingerid\", mode: params.publish_dir_mode\n\n                input:\n                file phenotype_file from phenotype_design_neg_csifingerid\n                file camera_input_quant from prepareoutput_rdata_neg_camera_csifingerid\n                file csifingerid_input_identification from csifingerid_tsv_neg_output\n\n                output:\n                file \"*.txt\" into csifingerid_neg_finished\n\n                \"\"\"\n                if [ -s $csifingerid_input_identification ]; then\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputscores=$csifingerid_input_identification \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_neg_camera  \\\\\n                        rt=$params.rt_output_neg_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=score \\\\\n                        impute=$params.impute_output_neg_camera \\\\\n                        typeColumn=$params.type_column_output_neg_camera \\\\\n                        selectedType=$params.selected_type_output_neg_camera  \\\\\n                        rename=$params.rename_output_neg_camera \\\\\n                        renameCol=$params.rename_col_output_neg_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_neg_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n                        log=$params.log_output_neg_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                        outputPeakTable=peaktableNEGout_neg_csifingerid.txt  \\\\\n                        outputVariables=varsNEGout_neg_csifingerid.txt \\\\\n                        outputMetaData=metadataNEGout_neg_csifingerid.txt \\\\\n                        Ifnormalize=$params.normalize_output_neg_camera\n\n                else\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_neg_camera \\\\\n                        rt=$params.rt_output_neg_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=score  \\\\\n                        impute=$params.impute_output_neg_camera \\\\\n                        typeColumn=$params.type_column_output_neg_camera \\\\\n                        selectedType=$params.selected_type_output_neg_camera \\\\\n                        rename=$params.rename_output_neg_camera \\\\\n                        renameCol=$params.rename_col_output_neg_camera  \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_neg_camera \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_neg_camera  \\\\\n                        log=$params.log_output_neg_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                        outputPeakTable=peaktableNEGout_neg_csifingerid.txt \\\\\n                        outputVariables=varsNEGout_neg_csifingerid.txt  \\\\\n                        outputMetaData=metadataNEGout_neg_csifingerid.txt \\\\\n                        Ifnormalize=$params.normalize_output_neg_camera\n\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 65,
        "string_script": "\"\"\"\n                if [ -s $csifingerid_input_identification ]; then\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputscores=$csifingerid_input_identification \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_neg_camera  \\\\\n                        rt=$params.rt_output_neg_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=score \\\\\n                        impute=$params.impute_output_neg_camera \\\\\n                        typeColumn=$params.type_column_output_neg_camera \\\\\n                        selectedType=$params.selected_type_output_neg_camera  \\\\\n                        rename=$params.rename_output_neg_camera \\\\\n                        renameCol=$params.rename_col_output_neg_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_neg_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n                        log=$params.log_output_neg_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                        outputPeakTable=peaktableNEGout_neg_csifingerid.txt  \\\\\n                        outputVariables=varsNEGout_neg_csifingerid.txt \\\\\n                        outputMetaData=metadataNEGout_neg_csifingerid.txt \\\\\n                        Ifnormalize=$params.normalize_output_neg_camera\n\n                else\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_neg_camera \\\\\n                        rt=$params.rt_output_neg_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=score  \\\\\n                        impute=$params.impute_output_neg_camera \\\\\n                        typeColumn=$params.type_column_output_neg_camera \\\\\n                        selectedType=$params.selected_type_output_neg_camera \\\\\n                        rename=$params.rename_output_neg_camera \\\\\n                        renameCol=$params.rename_col_output_neg_camera  \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_neg_camera \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_neg_camera  \\\\\n                        log=$params.log_output_neg_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                        outputPeakTable=peaktableNEGout_neg_csifingerid.txt \\\\\n                        outputVariables=varsNEGout_neg_csifingerid.txt  \\\\\n                        outputMetaData=metadataNEGout_neg_csifingerid.txt \\\\\n                        Ifnormalize=$params.normalize_output_neg_camera\n\n                fi\n                \"\"\"",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype_design_neg_csifingerid",
            "prepareoutput_rdata_neg_camera_csifingerid",
            "csifingerid_tsv_neg_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "csifingerid_neg_finished"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$camera_input_quant\"",
            "publishDir \"${params.outdir}/process_output_quantid_neg_camera_csifingerid\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_ms2_identification_neg_metfrag": {
        "name_process": "process_ms2_identification_neg_metfrag",
        "string_process": " process process_ms2_identification_neg_metfrag {\n                label 'metfrag'\n                label 'process_verylong'\n                tag \"$parameters\"\n                publishDir \"${params.outdir}/process_ms2_identification_neg_metfrag\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file parameters from metfrag_txt_neg_msnbase_flatten\n                each file(metfrag_database) from database_csv_files_neg_metfrag\n\n                output:\n                file \"${parameters.baseName}_metfrag_neg.zip\" into aggregateID_csv_neg_metfrag\n\n                \"\"\"\n                mkdir inputs\n                mkdir outputs\n                unzip  -j $parameters -d inputs/\n                touch ${parameters.baseName}.csv\n                find \"\\$PWD/inputs\" -type f | \\\\\n                    parallel \\\\\n                        -j $params.ncore_neg_metfrag \\\\\n                        run_metfrag.sh  \\\\\n                        -p {} \\\\\n                        -f \\$PWD/outputs/{/.}.csv \\\\\n                        -l \"\\$PWD/$metfrag_database\" \\\\\n                        -s \"OfflineMetFusionScore\"\n\n                if [ -z \"\\$(ls -A outputs/)\" ]; then\n                printf '%s\\n' \"No metabolites were identified. Check your settings\"\n                #exit 1\n                touch outputs/empty.csv\n                zip -j -r ${parameters.baseName}_metfrag_neg.zip outputs/*.csv\n                else\n                zip -j -r ${parameters.baseName}_metfrag_neg.zip outputs/*.csv\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 35,
        "string_script": "\"\"\"\n                mkdir inputs\n                mkdir outputs\n                unzip  -j $parameters -d inputs/\n                touch ${parameters.baseName}.csv\n                find \"\\$PWD/inputs\" -type f | \\\\\n                    parallel \\\\\n                        -j $params.ncore_neg_metfrag \\\\\n                        run_metfrag.sh  \\\\\n                        -p {} \\\\\n                        -f \\$PWD/outputs/{/.}.csv \\\\\n                        -l \"\\$PWD/$metfrag_database\" \\\\\n                        -s \"OfflineMetFusionScore\"\n\n                if [ -z \"\\$(ls -A outputs/)\" ]; then\n                printf '%s\\n' \"No metabolites were identified. Check your settings\"\n                #exit 1\n                touch outputs/empty.csv\n                zip -j -r ${parameters.baseName}_metfrag_neg.zip outputs/*.csv\n                else\n                zip -j -r ${parameters.baseName}_metfrag_neg.zip outputs/*.csv\n                fi\n                \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "parallelGWAS"
        ],
        "tools_url": [
            "https://bio.tools/parallelgwas"
        ],
        "tools_dico": [
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            }
        ],
        "inputs": [
            "metfrag_txt_neg_msnbase_flatten",
            "database_csv_files_neg_metfrag"
        ],
        "nb_inputs": 2,
        "outputs": [
            "aggregateID_csv_neg_metfrag"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'metfrag'",
            "label 'process_verylong'",
            "tag \"$parameters\"",
            "publishDir \"${params.outdir}/process_ms2_identification_neg_metfrag\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_identification_aggregate_neg_metfrag": {
        "name_process": "process_identification_aggregate_neg_metfrag",
        "string_process": " process process_identification_aggregate_neg_metfrag {\n                label 'msnbase'\n                                     \n                tag \"A collection of files\"\n                publishDir \"${params.outdir}/process_identification_aggregate_neg_metfrag\", mode: params.publish_dir_mode\n\n                input:\n                file identification_result from aggregateID_csv_neg_metfrag.collect()\n\n                output:\n                file \"aggregated_identification_metfrag_neg.csv\" into metfrag_tsv_neg_passatutto\n\n                \"\"\"\n                ulimit -s unlimited\n                mkdir all\n                for x in *.zip ; do unzip -d all -o -u \\$x ; done\n                zip -r metfrag_neg.zip all\n\n                aggregateMetfrag.r \\\\\n                    inputs=metfrag_neg.zip \\\\\n                    realNames=metfrag_neg.zip \\\\\n                    output=aggregated_identification_metfrag_neg.csv \\\\\n                    filetype=zip \\\\\n                    outTable=T\n\n                sed -i '/^\\$/d' aggregated_identification_metfrag_neg.csv\n                \"\"\"\n            }",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n                ulimit -s unlimited\n                mkdir all\n                for x in *.zip ; do unzip -d all -o -u \\$x ; done\n                zip -r metfrag_neg.zip all\n\n                aggregateMetfrag.r \\\\\n                    inputs=metfrag_neg.zip \\\\\n                    realNames=metfrag_neg.zip \\\\\n                    output=aggregated_identification_metfrag_neg.csv \\\\\n                    filetype=zip \\\\\n                    outTable=T\n\n                sed -i '/^\\$/d' aggregated_identification_metfrag_neg.csv\n                \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aggregateID_csv_neg_metfrag"
        ],
        "nb_inputs": 1,
        "outputs": [
            "metfrag_tsv_neg_passatutto"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_identification_aggregate_neg_metfrag\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_pepcalculation_metfrag_neg_passatutto": {
        "name_process": "process_pepcalculation_metfrag_neg_passatutto",
        "string_process": " process process_pepcalculation_metfrag_neg_passatutto {\n                label 'passatutto'\n                                     \n                tag \"$identification_result\"\n                publishDir \"${params.outdir}/process_pepcalculation_metfrag_neg_passatutto\", mode: params.publish_dir_mode\n\n                input:\n                file identification_result from metfrag_tsv_neg_passatutto\n\n                output:\n                file \"pep_identification_metfrag_neg.csv\" into metfrag_tsv_neg_output\n\n                \"\"\"\n                if [ -s $identification_result ]; then\n                    metfragPEP.r \\\\\n                        input=$identification_result \\\\\n                        score=FragmenterScore \\\\\n                        output=pep_identification_metfrag_neg.csv \\\\\n                        readTable=T\n                else\n                    touch pep_identification_metfrag_neg.csv\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n                if [ -s $identification_result ]; then\n                    metfragPEP.r \\\\\n                        input=$identification_result \\\\\n                        score=FragmenterScore \\\\\n                        output=pep_identification_metfrag_neg.csv \\\\\n                        readTable=T\n                else\n                    touch pep_identification_metfrag_neg.csv\n                fi\n                \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "metfrag_tsv_neg_passatutto"
        ],
        "nb_inputs": 1,
        "outputs": [
            "metfrag_tsv_neg_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'passatutto'",
            "tag \"$identification_result\"",
            "publishDir \"${params.outdir}/process_pepcalculation_metfrag_neg_passatutto\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_output_quantid_neg_camera_metfrag": {
        "name_process": "process_output_quantid_neg_camera_metfrag",
        "string_process": " process process_output_quantid_neg_camera_metfrag {\n                label 'camera'\n                                      \n                tag \"$camera_input_quant\"\n                publishDir \"${params.outdir}/process_output_quantid_neg_camera_metfrag\", mode: params.publish_dir_mode\n\n                input:\n                file phenotype_file from phenotype_design_neg_metfrag\n                file camera_input_quant from prepareoutput_rdata_neg_camera_metfrag\n                file metfrag_input_identification from metfrag_tsv_neg_output\n\n                output:\n                file \"*.txt\" into metfrag_neg_finished\n\n                \"\"\"\n                if [ -s $metfrag_input_identification ]; then\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputscores=$metfrag_input_identification \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_neg_camera \\\\\n                        rt=$params.rt_output_neg_camera  \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=FragmenterScore \\\\\n                        impute=$params.impute_output_neg_camera \\\\\n                        typeColumn=$params.type_column_output_neg_camera \\\\\n                        selectedType=$params.selected_type_output_neg_camera  \\\\\n                        rename=$params.rename_output_neg_camera \\\\\n                        renameCol=$params.rename_col_output_neg_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_neg_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n                        log=$params.log_output_neg_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                        outputPeakTable=peaktableNEGout_neg_metfrag.txt  \\\\\n                        outputVariables=varsNEGout_neg_metfrag.txt \\\\\n                        outputMetaData=metadataNEGout_neg_metfrag.txt \\\\\n                        Ifnormalize=$params.normalize_output_neg_camera\n\n                else\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_neg_camera \\\\\n                        rt=$params.rt_output_neg_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=FragmenterScore  \\\\\n                        impute=$params.impute_output_neg_camera \\\\\n                        typeColumn=$params.type_column_output_neg_camera \\\\\n                        selectedType=$params.selected_type_output_neg_camera \\\\\n                        rename=$params.rename_output_neg_camera \\\\\n                        renameCol=$params.rename_col_output_neg_camera  \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_neg_camera \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n                        log=$params.log_output_neg_camera  \\\\\n                        sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                        outputPeakTable=peaktableNEGout_neg_metfrag.txt \\\\\n                        outputVariables=varsNEGout_neg_metfrag.txt \\\\\n                        outputMetaData=metadataNEGout_neg_metfrag.txt \\\\\n                        Ifnormalize=$params.normalize_output_neg_camera\n\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 65,
        "string_script": "\"\"\"\n                if [ -s $metfrag_input_identification ]; then\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputscores=$metfrag_input_identification \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_neg_camera \\\\\n                        rt=$params.rt_output_neg_camera  \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=FragmenterScore \\\\\n                        impute=$params.impute_output_neg_camera \\\\\n                        typeColumn=$params.type_column_output_neg_camera \\\\\n                        selectedType=$params.selected_type_output_neg_camera  \\\\\n                        rename=$params.rename_output_neg_camera \\\\\n                        renameCol=$params.rename_col_output_neg_camera \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_neg_camera  \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n                        log=$params.log_output_neg_camera \\\\\n                        sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                        outputPeakTable=peaktableNEGout_neg_metfrag.txt  \\\\\n                        outputVariables=varsNEGout_neg_metfrag.txt \\\\\n                        outputMetaData=metadataNEGout_neg_metfrag.txt \\\\\n                        Ifnormalize=$params.normalize_output_neg_camera\n\n                else\n\n                    prepareOutput.r \\\\\n                        inputcamera=$camera_input_quant \\\\\n                        inputpheno=$phenotype_file \\\\\n                        ppm=$params.ppm_output_neg_camera \\\\\n                        rt=$params.rt_output_neg_camera \\\\\n                        higherTheBetter=true \\\\\n                        scoreColumn=FragmenterScore  \\\\\n                        impute=$params.impute_output_neg_camera \\\\\n                        typeColumn=$params.type_column_output_neg_camera \\\\\n                        selectedType=$params.selected_type_output_neg_camera \\\\\n                        rename=$params.rename_output_neg_camera \\\\\n                        renameCol=$params.rename_col_output_neg_camera  \\\\\n                        onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                        combineReplicate=$params.combine_replicate_output_neg_camera \\\\\n                        combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n                        log=$params.log_output_neg_camera  \\\\\n                        sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                        outputPeakTable=peaktableNEGout_neg_metfrag.txt \\\\\n                        outputVariables=varsNEGout_neg_metfrag.txt \\\\\n                        outputMetaData=metadataNEGout_neg_metfrag.txt \\\\\n                        Ifnormalize=$params.normalize_output_neg_camera\n\n                fi\n                \"\"\"",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype_design_neg_metfrag",
            "prepareoutput_rdata_neg_camera_metfrag",
            "metfrag_tsv_neg_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "metfrag_neg_finished"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$camera_input_quant\"",
            "publishDir \"${params.outdir}/process_output_quantid_neg_camera_metfrag\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_ms2_identification_neg_cfmid": {
        "name_process": "process_ms2_identification_neg_cfmid",
        "string_process": " process process_ms2_identification_neg_cfmid {\n                label 'cfmid'\n                label 'process_verylong'\n                tag \"$parameters\"\n                publishDir \"${params.outdir}/process_ms2_identification_neg_cfmid\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file parameters from cfmid_txt_neg_msnbase_flatten\n                each file(cfmid_database) from database_csv_files_neg_cfmid\n\n                output:\n                file \"${parameters.baseName}_cfmid_neg.zip\" into aggregateID_csv_neg_cfmid\n\n                \"\"\"\n                mkdir inputs\n                mkdir outputs\n                unzip  -j $parameters -d inputs/\n                touch ${parameters.baseName}.csv\n\n                find \"\\$PWD/inputs\" -type f | \\\\\n                    parallel \\\\\n                        -j $params.ncore_neg_cfmid \\\\\n                        cfmid.r \\\\\n                        input={} \\\\\n                        realName={/} \\\\\n                        databaseFile=\\$PWD/$cfmid_database \\\\\n                        output=\\$PWD/outputs/{/.}.csv \\\\\n                        candidate_id=$params.candidate_id_identification_neg_cfmid \\\\\n                        candidate_inchi_smiles=$params.candidate_inchi_smiles_identification_neg_cfmid  \\\\\n                        candidate_mass=$params.candidate_mass_identification_neg_cfmid \\\\\n                        databaseNameColumn=$params.database_name_column_identification_neg_cfmid \\\\\n                        databaseInChIColumn=$params.database_inchI_column_identification_neg_cfmid \\\\\n                        scoreType=Jaccard\n\n\n                if [ -z \"\\$(ls -A outputs/)\" ]; then\n                printf '%s\\n' \"No metabolites were identified. Check your settings\"\n                #exit 1\n                touch outputs/empty.csv\n                zip -j -r ${parameters.baseName}_cfmid_neg.zip outputs/*.csv\n                else\n                zip -j -r ${parameters.baseName}_cfmid_neg.zip outputs/*.csv\n                fi\n                \"\"\"\n            }",
        "nb_lignes_process": 43,
        "string_script": "\"\"\"\n                mkdir inputs\n                mkdir outputs\n                unzip  -j $parameters -d inputs/\n                touch ${parameters.baseName}.csv\n\n                find \"\\$PWD/inputs\" -type f | \\\\\n                    parallel \\\\\n                        -j $params.ncore_neg_cfmid \\\\\n                        cfmid.r \\\\\n                        input={} \\\\\n                        realName={/} \\\\\n                        databaseFile=\\$PWD/$cfmid_database \\\\\n                        output=\\$PWD/outputs/{/.}.csv \\\\\n                        candidate_id=$params.candidate_id_identification_neg_cfmid \\\\\n                        candidate_inchi_smiles=$params.candidate_inchi_smiles_identification_neg_cfmid  \\\\\n                        candidate_mass=$params.candidate_mass_identification_neg_cfmid \\\\\n                        databaseNameColumn=$params.database_name_column_identification_neg_cfmid \\\\\n                        databaseInChIColumn=$params.database_inchI_column_identification_neg_cfmid \\\\\n                        scoreType=Jaccard\n\n\n                if [ -z \"\\$(ls -A outputs/)\" ]; then\n                printf '%s\\n' \"No metabolites were identified. Check your settings\"\n                #exit 1\n                touch outputs/empty.csv\n                zip -j -r ${parameters.baseName}_cfmid_neg.zip outputs/*.csv\n                else\n                zip -j -r ${parameters.baseName}_cfmid_neg.zip outputs/*.csv\n                fi\n                \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [
            "parallelGWAS"
        ],
        "tools_url": [
            "https://bio.tools/parallelgwas"
        ],
        "tools_dico": [
            {
                "name": "parallelGWAS",
                "uri": "https://bio.tools/parallelgwas",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0487",
                                    "term": "Haplotype inference"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Developing parallel computing tools for genome-wide association studies.",
                "homepage": "https://en.osdn.jp/projects/parallelgwas/"
            }
        ],
        "inputs": [
            "cfmid_txt_neg_msnbase_flatten",
            "database_csv_files_neg_cfmid"
        ],
        "nb_inputs": 2,
        "outputs": [
            "aggregateID_csv_neg_cfmid"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'cfmid'",
            "label 'process_verylong'",
            "tag \"$parameters\"",
            "publishDir \"${params.outdir}/process_ms2_identification_neg_cfmid\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_identification_aggregate_neg_cfmid": {
        "name_process": "process_identification_aggregate_neg_cfmid",
        "string_process": " process process_identification_aggregate_neg_cfmid {\n            label 'msnbase'\n                                 \n            tag \"A collection of files\"\n            publishDir \"${params.outdir}/process_identification_aggregate_neg_cfmid\", mode: params.publish_dir_mode\n\n            input:\n            file identification_result from aggregateID_csv_neg_cfmid.collect()\n\n            output:\n            file \"aggregated_identification_cfmid_neg.csv\" into cfmid_tsv_neg_passatutto\n\n            \"\"\"\n            ulimit -s unlimited\n            mkdir all\n            for x in *.zip ; do unzip -d all -o -u \\$x ; done\n            zip -r cfmid_neg.zip all\n\n            aggregateMetfrag.r \\\\\n                inputs=cfmid_neg.zip \\\\\n                realNames=cfmid_neg.zip \\\\\n                output=aggregated_identification_cfmid_neg.csv \\\\\n                filetype=zip \\\\\n                outTable=T\n\n            sed -i '/^\\$/d' aggregated_identification_cfmid_neg.csv\n            \"\"\"\n        }",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n            ulimit -s unlimited\n            mkdir all\n            for x in *.zip ; do unzip -d all -o -u \\$x ; done\n            zip -r cfmid_neg.zip all\n\n            aggregateMetfrag.r \\\\\n                inputs=cfmid_neg.zip \\\\\n                realNames=cfmid_neg.zip \\\\\n                output=aggregated_identification_cfmid_neg.csv \\\\\n                filetype=zip \\\\\n                outTable=T\n\n            sed -i '/^\\$/d' aggregated_identification_cfmid_neg.csv\n            \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aggregateID_csv_neg_cfmid"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cfmid_tsv_neg_passatutto"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_identification_aggregate_neg_cfmid\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_pepcalculation_cfmid_neg_passatutto": {
        "name_process": "process_pepcalculation_cfmid_neg_passatutto",
        "string_process": " process process_pepcalculation_cfmid_neg_passatutto {\n            label 'passatutto'\n                                 \n            tag \"$identification_result\"\n            publishDir \"${params.outdir}/process_pepcalculation_cfmid_neg_passatutto\", mode: params.publish_dir_mode\n\n            input:\n            file identification_result from cfmid_tsv_neg_passatutto\n\n            output:\n            file \"pep_identification_cfmid_neg.csv\" into cfmid_tsv_neg_output\n\n\n            \"\"\"\n            if [ -s $identification_result ]; then\n                metfragPEP.r \\\\\n                    input=$identification_result \\\\\n                    score=Jaccard_Score \\\\\n                    output=pep_identification_cfmid_neg.csv \\\\\n                    readTable=T\n            else\n                touch pep_identification_cfmid_neg.csv\n            fi\n            \"\"\"\n        }",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n            if [ -s $identification_result ]; then\n                metfragPEP.r \\\\\n                    input=$identification_result \\\\\n                    score=Jaccard_Score \\\\\n                    output=pep_identification_cfmid_neg.csv \\\\\n                    readTable=T\n            else\n                touch pep_identification_cfmid_neg.csv\n            fi\n            \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cfmid_tsv_neg_passatutto"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cfmid_tsv_neg_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'passatutto'",
            "tag \"$identification_result\"",
            "publishDir \"${params.outdir}/process_pepcalculation_cfmid_neg_passatutto\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_output_quantid_neg_camera_cfmid": {
        "name_process": "process_output_quantid_neg_camera_cfmid",
        "string_process": " process process_output_quantid_neg_camera_cfmid {\n            label 'camera'\n                                                                           \n            tag \"$camera_input_quant\"\n            publishDir \"${params.outdir}/process_output_quantid_neg_camera_cfmid\", mode: params.publish_dir_mode\n\n            input:\n            file phenotype_file from phenotype_design_neg_cfmid\n            file camera_input_quant from prepareoutput_rdata_neg_camera_cfmid\n            file cfmid_input_identification from cfmid_tsv_neg_output\n\n            output:\n            file \"*.txt\" into cfmid_neg_finished\n\n            \"\"\"\n            if [ -s $cfmid_input_identification ]; then\n                prepareOutput.r \\\\\n                    inputcamera=$camera_input_quant \\\\\n                    inputscores=$cfmid_input_identification \\\\\n                    inputpheno=$phenotype_file \\\\\n                    ppm=$params.ppm_output_neg_camera \\\\\n                    rt=$params.rt_output_neg_camera  \\\\\n                    higherTheBetter=true \\\\\n                    scoreColumn=Jaccard_Score \\\\\n                    impute=$params.impute_output_neg_camera \\\\\n                    typeColumn=$params.type_column_output_neg_camera \\\\\n                    selectedType=$params.selected_type_output_neg_camera  \\\\\n                    rename=$params.rename_output_neg_camera \\\\\n                    renameCol=$params.rename_col_output_neg_camera \\\\\n                    onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                    combineReplicate=$params.combine_replicate_output_neg_camera  \\\\\n                    combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n                    log=$params.log_output_neg_camera \\\\\n                    sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                    outputPeakTable=peaktableNEGout_neg_cfmid.txt  \\\\\n                    outputVariables=varsNEGout_neg_cfmid.txt \\\\\n                    outputMetaData=metadataNEGout_neg_cfmid.txt \\\\\n                    Ifnormalize=$params.normalize_output_neg_camera\n\n            else\n\n                prepareOutput.r \\\\\n                    inputcamera=$camera_input_quant \\\\\n                    inputpheno=$phenotype_file \\\\\n                    ppm=$params.ppm_output_neg_camera \\\\\n                    rt=$params.rt_output_neg_camera \\\\\n                    higherTheBetter=true \\\\\n                    scoreColumn=Jaccard_Score  \\\\\n                    impute=$params.impute_output_neg_camera \\\\\n                    typeColumn=$params.type_column_output_neg_camera \\\\\n                    selectedType=$params.selected_type_output_neg_camera \\\\\n                    rename=$params.rename_output_neg_camera \\\\\n                    renameCol=$params.rename_col_output_neg_camera  \\\\\n                    onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                    combineReplicate=$params.combine_replicate_output_neg_camera \\\\\n                    combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n                    log=$params.log_output_neg_camera  \\\\\n                    sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                    outputPeakTable=peaktableNEGout_neg_cfmid.txt \\\\\n                    outputVariables=varsNEGout_neg_cfmid.txt \\\\\n                    outputMetaData=metadataNEGout_neg_cfmid.txt \\\\\n                    Ifnormalize=$params.normalize_output_neg_camera\n\n            fi\n            \"\"\"\n        }",
        "nb_lignes_process": 64,
        "string_script": "\"\"\"\n            if [ -s $cfmid_input_identification ]; then\n                prepareOutput.r \\\\\n                    inputcamera=$camera_input_quant \\\\\n                    inputscores=$cfmid_input_identification \\\\\n                    inputpheno=$phenotype_file \\\\\n                    ppm=$params.ppm_output_neg_camera \\\\\n                    rt=$params.rt_output_neg_camera  \\\\\n                    higherTheBetter=true \\\\\n                    scoreColumn=Jaccard_Score \\\\\n                    impute=$params.impute_output_neg_camera \\\\\n                    typeColumn=$params.type_column_output_neg_camera \\\\\n                    selectedType=$params.selected_type_output_neg_camera  \\\\\n                    rename=$params.rename_output_neg_camera \\\\\n                    renameCol=$params.rename_col_output_neg_camera \\\\\n                    onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                    combineReplicate=$params.combine_replicate_output_neg_camera  \\\\\n                    combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n                    log=$params.log_output_neg_camera \\\\\n                    sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                    outputPeakTable=peaktableNEGout_neg_cfmid.txt  \\\\\n                    outputVariables=varsNEGout_neg_cfmid.txt \\\\\n                    outputMetaData=metadataNEGout_neg_cfmid.txt \\\\\n                    Ifnormalize=$params.normalize_output_neg_camera\n\n            else\n\n                prepareOutput.r \\\\\n                    inputcamera=$camera_input_quant \\\\\n                    inputpheno=$phenotype_file \\\\\n                    ppm=$params.ppm_output_neg_camera \\\\\n                    rt=$params.rt_output_neg_camera \\\\\n                    higherTheBetter=true \\\\\n                    scoreColumn=Jaccard_Score  \\\\\n                    impute=$params.impute_output_neg_camera \\\\\n                    typeColumn=$params.type_column_output_neg_camera \\\\\n                    selectedType=$params.selected_type_output_neg_camera \\\\\n                    rename=$params.rename_output_neg_camera \\\\\n                    renameCol=$params.rename_col_output_neg_camera  \\\\\n                    onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                    combineReplicate=$params.combine_replicate_output_neg_camera \\\\\n                    combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n                    log=$params.log_output_neg_camera  \\\\\n                    sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                    outputPeakTable=peaktableNEGout_neg_cfmid.txt \\\\\n                    outputVariables=varsNEGout_neg_cfmid.txt \\\\\n                    outputMetaData=metadataNEGout_neg_cfmid.txt \\\\\n                    Ifnormalize=$params.normalize_output_neg_camera\n\n            fi\n            \"\"\"",
        "nb_lignes_script": 50,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype_design_neg_cfmid",
            "prepareoutput_rdata_neg_camera_cfmid",
            "cfmid_tsv_neg_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "cfmid_neg_finished"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$camera_input_quant\"",
            "publishDir \"${params.outdir}/process_output_quantid_neg_camera_cfmid\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_peak_picker_library_neg_openms": {
        "name_process": "process_peak_picker_library_neg_openms",
        "string_process": " process process_peak_picker_library_neg_openms  {\n                    label 'openms'\n                                         \n                    tag \"$mzMLFile\"\n                    publishDir \"${params.outdir}/process_peak_picker_library_neg_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n                    stageInMode 'copy'\n\n                    input:\n                    file mzMLFile from quant_library_mzml_files_neg\n                    each file(setting_file) from peakpicker_ini_file_library_neg_openms\n\n                    output:\n                    file \"${mzMLFile}\" into masstrace_detection_process_library_neg, param_detection_process_library_neg\n\n                    \"\"\"\n                    PeakPickerHiRes -in $mzMLFile -out $mzMLFile -ini $setting_file\n                    \"\"\"\n                }",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n                    PeakPickerHiRes -in $mzMLFile -out $mzMLFile -ini $setting_file\n                    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "quant_library_mzml_files_neg",
            "peakpicker_ini_file_library_neg_openms"
        ],
        "nb_inputs": 2,
        "outputs": [
            "masstrace_detection_process_library_neg",
            "param_detection_process_library_neg"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'openms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_peak_picker_library_neg_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_masstrace_detection_library_neg_openms": {
        "name_process": "process_masstrace_detection_library_neg_openms",
        "string_process": " process process_masstrace_detection_library_neg_openms  {\n                        label 'openms'\n                                             \n                        tag \"$mzMLFile\"\n                        publishDir \"${params.outdir}/process_masstrace_detection_library_neg_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                        input:\n                        file mzMLFile from masstrace_detection_process_library_neg_openms\n                        each file(setting_file) from featurefinder_ini_library_neg_openms\n\n                        output:\n                        file \"${mzMLFile.baseName}.featureXML\" into openms_to_xcms_conversion\n                        file \"$mzMLFile\" into openms_to_xcms_conversion_raw_neg_library\n\n                        \"\"\"\n                        FeatureFinderMetabo -in $mzMLFile -out ${mzMLFile.baseName}.featureXML -ini $setting_file\n                        \"\"\"\n                    }",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n                        FeatureFinderMetabo -in $mzMLFile -out ${mzMLFile.baseName}.featureXML -ini $setting_file\n                        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "masstrace_detection_process_library_neg_openms",
            "featurefinder_ini_library_neg_openms"
        ],
        "nb_inputs": 2,
        "outputs": [
            "openms_to_xcms_conversion",
            "openms_to_xcms_conversion_raw_neg_library"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'openms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_masstrace_detection_library_neg_openms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_openms_to_xcms_conversion_library_neg": {
        "name_process": "process_openms_to_xcms_conversion_library_neg",
        "string_process": " process process_openms_to_xcms_conversion_library_neg  {\n                        label 'xcmsconvert'\n                                             \n                        tag \"$mzMLFile\"\n                        publishDir \"${params.outdir}/process_openms_to_xcms_conversion_library_neg\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                        input:\n                        file mzMLFile from openms_to_xcms_conversion\n                        file mzMLFile2 from openms_to_xcms_conversion_raw_neg_library\n\n                        output:\n                        file \"${mzMLFile.baseName}.rdata\" into annotation_rdata_library_neg_camera\n\n                        \"\"\"\n                        featurexmlToCamera.r \\\\\n                            input=$mzMLFile \\\\\n                            realFileName=$mzMLFile \\\\\n                            mzMLfiles=\\$PWD/$mzMLFile2 \\\\\n                            polarity=negative \\\\\n                            output=${mzMLFile.baseName}.rdata \\\\\n                            sampleClass=library \\\\\n                            changeNameTO=${mzMLFile.baseName}.mzML\n                        \"\"\"\n                    }",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n                        featurexmlToCamera.r \\\\\n                            input=$mzMLFile \\\\\n                            realFileName=$mzMLFile \\\\\n                            mzMLfiles=\\$PWD/$mzMLFile2 \\\\\n                            polarity=negative \\\\\n                            output=${mzMLFile.baseName}.rdata \\\\\n                            sampleClass=library \\\\\n                            changeNameTO=${mzMLFile.baseName}.mzML\n                        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "openms_to_xcms_conversion",
            "openms_to_xcms_conversion_raw_neg_library"
        ],
        "nb_inputs": 2,
        "outputs": [
            "annotation_rdata_library_neg_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcmsconvert'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_openms_to_xcms_conversion_library_neg\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_ipo_param_library_neg_ipo": {
        "name_process": "process_ipo_param_library_neg_ipo",
        "string_process": " process process_ipo_param_library_neg_ipo {\n                            label 'ipo'\n                                                  \n                            tag \"A collection of files\"\n                            publishDir \"${params.outdir}/process_ipo_param_library_neg_ipo\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                            input:\n                            file mzMLFile from param_detection_process_library_neg_ipo.collect()\n\n                            output:\n                            file \"quant_params_library_neg.json\" into param_to_detection_process_library_neg\n                            file \"rt_params_library_neg.json\" into param_to_rt_process_library_neg\n\n                            script:\n                            def inputs_aggregated = mzMLFile.collect{ \"$it\" }.join(\",\")\n                            \"\"\"\n                            touch quant_params_library_neg.json\n                            touch rt_params_library_neg.json\n\n                            ipo.r \\\\\n                                input=$inputs_aggregated \\\\\n                                quantOnly=TRUE \\\\\n                                allSamples=TRUE  \\\\\n                                methodXset=$params.ipo_methodXset_library_neg \\\\\n                                methodRT=$params.ipo_methodRT_library_neg \\\\\n                                noise_l=$params.ipo_noise_l_library_neg  \\\\\n                                noise_h=$params.ipo_noise_h_library_neg \\\\\n                                prefilter_l_l=$params.ipo_prefilter_l_l_library_neg \\\\\n                                prefilter_l_h=$params.ipo_prefilter_l_h_library_neg  \\\\\n                                prefilter_h_l=$params.ipo_prefilter_h_l_library_neg \\\\\n                                prefilter_h_h=$params.ipo_prefilter_h_h_library_neg  \\\\\n                                snthresh_l=$params.ipo_snthresh_l_library_neg \\\\\n                                snthresh_h=$params.ipo_snthresh_h_library_neg \\\\\n                                mzCenterFun=$params.ipo_mzCenterFun_library_neg  \\\\\n                                integrate=$params.ipo_integrate_library_neg \\\\\n                                fitgauss=$params.ipo_fitgauss_library_neg \\\\\n                                ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_library_neg  \\\\\n                                ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_library_neg \\\\\n                                ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_library_neg \\\\\n                                ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_library_neg \\\\\n                                ipo_ppm_l=$params.ipo_ppm_l_library_neg  \\\\\n                                ipo_ppm_h=$params.ipo_ppm_h_library_neg \\\\\n                                ipo_mzdiff_l=$params.ipo_mzdiff_l_library_neg \\\\\n                                ipo_mzdiff_h=$params.ipo_mzdiff_h_library_neg \\\\\n                                ipo_charge_camera=$params.ipo_charge_camera_library_neg \\\\\n                                ipo_max_ppm_camera=$params.ipo_max_ppm_camera_library_neg  \\\\\n                                response_l=$params.ipo_response_l_library_neg \\\\\n                                response_h=$params.ipo_response_h_library_neg \\\\\n                                distFunc=$params.ipo_distFunc_library_neg \\\\\n                                factorDiag_l=$params.ipo_factorDiag_l_library_neg \\\\\n                                factorDiag_h=$params.ipo_factorDiag_h_library_neg \\\\\n                                factorGap_l=$params.ipo_factorGap_l_library_neg  \\\\\n                                factorGap_h=$params.ipo_factorGap_h_library_neg \\\\\n                                localAlignment=$params.ipo_localAlignment_library_neg \\\\\n                                ipo_gapInit_l=$params.ipo_gapInit_l_library_neg \\\\\n                                ipo_gapInit_h=$params.ipo_gapInit_h_library_neg \\\\\n                                ipo_gapExtend_l=$params.ipo_gapExtend_l_library_neg  \\\\\n                                ipo_gapExtend_h=$params.ipo_gapExtend_h_library_neg \\\\\n                                ipo_profStep_l=$params.ipo_profStep_l_library_neg \\\\\n                                ipo_profStep_h=$params.ipo_profStep_h_library_neg \\\\\n                                bw_l=$params.ipo_bw_l_library_neg \\\\\n                                bw_h=$params.ipo_bw_h_library_neg \\\\\n                                minfrac_l=$params.ipo_minfrac_l_library_neg  \\\\\n                                minfrac_h=$params.ipo_minfrac_h_library_neg \\\\\n                                mzwid_l=$params.ipo_mzwid_l_library_neg \\\\\n                                mzwid_h=$params.ipo_mzwid_h_library_neg \\\\\n                                minsamp_l=$params.ipo_minsamp_l_library_neg  \\\\\n                                minsamp_h=$params.ipo_minsamp_h_library_neg \\\\\n                                max_l=$params.ipo_max_l_library_neg \\\\\n                                max_h=$params.ipo_max_h_library_neg \\\\\n                                ncores=$params.ipo_ncores_library_neg \\\\\n                                outputxset=quant_params_library_neg.json \\\\\n                                outputrt=rt_params_library_neg.json\n                            \"\"\"\n                        }",
        "nb_lignes_process": 73,
        "string_script": "                            def inputs_aggregated = mzMLFile.collect{ \"$it\" }.join(\",\")\n                            \"\"\"\n                            touch quant_params_library_neg.json\n                            touch rt_params_library_neg.json\n\n                            ipo.r \\\\\n                                input=$inputs_aggregated \\\\\n                                quantOnly=TRUE \\\\\n                                allSamples=TRUE  \\\\\n                                methodXset=$params.ipo_methodXset_library_neg \\\\\n                                methodRT=$params.ipo_methodRT_library_neg \\\\\n                                noise_l=$params.ipo_noise_l_library_neg  \\\\\n                                noise_h=$params.ipo_noise_h_library_neg \\\\\n                                prefilter_l_l=$params.ipo_prefilter_l_l_library_neg \\\\\n                                prefilter_l_h=$params.ipo_prefilter_l_h_library_neg  \\\\\n                                prefilter_h_l=$params.ipo_prefilter_h_l_library_neg \\\\\n                                prefilter_h_h=$params.ipo_prefilter_h_h_library_neg  \\\\\n                                snthresh_l=$params.ipo_snthresh_l_library_neg \\\\\n                                snthresh_h=$params.ipo_snthresh_h_library_neg \\\\\n                                mzCenterFun=$params.ipo_mzCenterFun_library_neg  \\\\\n                                integrate=$params.ipo_integrate_library_neg \\\\\n                                fitgauss=$params.ipo_fitgauss_library_neg \\\\\n                                ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_library_neg  \\\\\n                                ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_library_neg \\\\\n                                ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_library_neg \\\\\n                                ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_library_neg \\\\\n                                ipo_ppm_l=$params.ipo_ppm_l_library_neg  \\\\\n                                ipo_ppm_h=$params.ipo_ppm_h_library_neg \\\\\n                                ipo_mzdiff_l=$params.ipo_mzdiff_l_library_neg \\\\\n                                ipo_mzdiff_h=$params.ipo_mzdiff_h_library_neg \\\\\n                                ipo_charge_camera=$params.ipo_charge_camera_library_neg \\\\\n                                ipo_max_ppm_camera=$params.ipo_max_ppm_camera_library_neg  \\\\\n                                response_l=$params.ipo_response_l_library_neg \\\\\n                                response_h=$params.ipo_response_h_library_neg \\\\\n                                distFunc=$params.ipo_distFunc_library_neg \\\\\n                                factorDiag_l=$params.ipo_factorDiag_l_library_neg \\\\\n                                factorDiag_h=$params.ipo_factorDiag_h_library_neg \\\\\n                                factorGap_l=$params.ipo_factorGap_l_library_neg  \\\\\n                                factorGap_h=$params.ipo_factorGap_h_library_neg \\\\\n                                localAlignment=$params.ipo_localAlignment_library_neg \\\\\n                                ipo_gapInit_l=$params.ipo_gapInit_l_library_neg \\\\\n                                ipo_gapInit_h=$params.ipo_gapInit_h_library_neg \\\\\n                                ipo_gapExtend_l=$params.ipo_gapExtend_l_library_neg  \\\\\n                                ipo_gapExtend_h=$params.ipo_gapExtend_h_library_neg \\\\\n                                ipo_profStep_l=$params.ipo_profStep_l_library_neg \\\\\n                                ipo_profStep_h=$params.ipo_profStep_h_library_neg \\\\\n                                bw_l=$params.ipo_bw_l_library_neg \\\\\n                                bw_h=$params.ipo_bw_h_library_neg \\\\\n                                minfrac_l=$params.ipo_minfrac_l_library_neg  \\\\\n                                minfrac_h=$params.ipo_minfrac_h_library_neg \\\\\n                                mzwid_l=$params.ipo_mzwid_l_library_neg \\\\\n                                mzwid_h=$params.ipo_mzwid_h_library_neg \\\\\n                                minsamp_l=$params.ipo_minsamp_l_library_neg  \\\\\n                                minsamp_h=$params.ipo_minsamp_h_library_neg \\\\\n                                max_l=$params.ipo_max_l_library_neg \\\\\n                                max_h=$params.ipo_max_h_library_neg \\\\\n                                ncores=$params.ipo_ncores_library_neg \\\\\n                                outputxset=quant_params_library_neg.json \\\\\n                                outputrt=rt_params_library_neg.json\n                            \"\"\"",
        "nb_lignes_script": 59,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "param_detection_process_library_neg_ipo"
        ],
        "nb_inputs": 1,
        "outputs": [
            "param_to_detection_process_library_neg",
            "param_to_rt_process_library_neg"
        ],
        "nb_outputs": 2,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'ipo'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_ipo_param_library_neg_ipo\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_masstrace_detection_library_neg_xcms": {
        "name_process": "process_masstrace_detection_library_neg_xcms",
        "string_process": " process process_masstrace_detection_library_neg_xcms {\n                        label 'xcms'\n                                             \n                        tag \"$mzMLFile\"\n                        publishDir \"${params.outdir}/process_masstrace_detection_library_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                        input:\n                        file mzMLFile from masstrace_detection_process_library_neg_openms\n                        each file(paramsQ) from param_target_to_detection_process_library_neg\n\n                        output:\n                        file \"${mzMLFile.baseName}.rdata\" into annotation_rdata_library_neg_camera\n\n                        script:\n                        def filter_argument = paramsQ.name == 'quant_params_library_neg.json' ? \"ipo_in ${paramsQ}\" : ''\n                        \"\"\"\n                        findPeaks.r \\\\\n                            input=\\$PWD/$mzMLFile \\\\\n                            output=\\$PWD/${mzMLFile.baseName}.rdata \\\\\n                            ppm=$params.masstrace_ppm_library_neg_xcms \\\\\n                            peakwidthLow=$params.peakwidthlow_quant_library_neg_xcms  \\\\\n                            peakwidthHigh=$params.peakwidthhigh_quant_library_neg_xcms \\\\\n                            noise=$params.noise_quant_library_neg_xcms \\\\\n                            polarity=negative \\\\\n                            realFileName=$mzMLFile \\\\\n                            sampleClass=$params.sampleclass_quant_library_neg_xcms  \\\\\n                            mzdiff=$params.mzdiff_quant_library_neg_xcms \\\\\n                            snthresh=$params.snthresh_quant_library_neg_xcms \\\\\n                            prefilter_l=$params.prefilter_quant_library_neg_xcms \\\\\n                            prefilter_h=$params.value_of_prefilter_quant_library_neg_xcms  \\\\\n                            mzCenterFun=$params.mzCenterFun_quant_library_neg_xcms \\\\\n                            integrate=$params.integrate_quant_library_neg_xcms \\\\\n                            fitgauss=$params.fitgauss_quant_library_neg_xcms  \\\\\n                            methodXset=$params.ipo_methodXset_library_neg \\\\\n                            methodRT=$params.ipo_methodRT_library_neg \\\\\n                            noise_l=$params.ipo_noise_l_library_neg  \\\\\n                            noise_h=$params.ipo_noise_h_library_neg \\\\\n                            prefilter_l_l=$params.ipo_prefilter_l_l_library_neg \\\\\n                            prefilter_l_h=$params.ipo_prefilter_l_h_library_neg  \\\\\n                            prefilter_h_l=$params.ipo_prefilter_h_l_library_neg \\\\\n                            prefilter_h_h=$params.ipo_prefilter_h_h_library_neg  \\\\\n                            snthresh_l=$params.ipo_snthresh_l_library_neg \\\\\n                            snthresh_h=$params.ipo_snthresh_h_library_neg \\\\\n                            mzCenterFun=$params.ipo_mzCenterFun_library_neg  \\\\\n                            integrate=$params.ipo_integrate_library_neg \\\\\n                            fitgauss=$params.ipo_fitgauss_library_neg \\\\\n                            ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_library_neg  \\\\\n                            ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_library_neg \\\\\n                            ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_library_neg \\\\\n                            ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_library_neg \\\\\n                            ipo_ppm_l=$params.ipo_ppm_l_library_neg  \\\\\n                            ipo_ppm_h=$params.ipo_ppm_h_library_neg \\\\\n                            ipo_mzdiff_l=$params.ipo_mzdiff_l_library_neg \\\\\n                            ipo_mzdiff_h=$params.ipo_mzdiff_h_library_neg \\\\\n                            ipo_charge_camera=$params.ipo_charge_camera_library_neg  \\\\\n                            ipo_max_ppm_camera=$params.ipo_max_ppm_camera_library_neg  \\\\\n                            ipo_inv=$ipo_library_neg_localQ \\\\\n                            $filter_argument\n                        \"\"\"\n                    }",
        "nb_lignes_process": 58,
        "string_script": "                        def filter_argument = paramsQ.name == 'quant_params_library_neg.json' ? \"ipo_in ${paramsQ}\" : ''\n                        \"\"\"\n                        findPeaks.r \\\\\n                            input=\\$PWD/$mzMLFile \\\\\n                            output=\\$PWD/${mzMLFile.baseName}.rdata \\\\\n                            ppm=$params.masstrace_ppm_library_neg_xcms \\\\\n                            peakwidthLow=$params.peakwidthlow_quant_library_neg_xcms  \\\\\n                            peakwidthHigh=$params.peakwidthhigh_quant_library_neg_xcms \\\\\n                            noise=$params.noise_quant_library_neg_xcms \\\\\n                            polarity=negative \\\\\n                            realFileName=$mzMLFile \\\\\n                            sampleClass=$params.sampleclass_quant_library_neg_xcms  \\\\\n                            mzdiff=$params.mzdiff_quant_library_neg_xcms \\\\\n                            snthresh=$params.snthresh_quant_library_neg_xcms \\\\\n                            prefilter_l=$params.prefilter_quant_library_neg_xcms \\\\\n                            prefilter_h=$params.value_of_prefilter_quant_library_neg_xcms  \\\\\n                            mzCenterFun=$params.mzCenterFun_quant_library_neg_xcms \\\\\n                            integrate=$params.integrate_quant_library_neg_xcms \\\\\n                            fitgauss=$params.fitgauss_quant_library_neg_xcms  \\\\\n                            methodXset=$params.ipo_methodXset_library_neg \\\\\n                            methodRT=$params.ipo_methodRT_library_neg \\\\\n                            noise_l=$params.ipo_noise_l_library_neg  \\\\\n                            noise_h=$params.ipo_noise_h_library_neg \\\\\n                            prefilter_l_l=$params.ipo_prefilter_l_l_library_neg \\\\\n                            prefilter_l_h=$params.ipo_prefilter_l_h_library_neg  \\\\\n                            prefilter_h_l=$params.ipo_prefilter_h_l_library_neg \\\\\n                            prefilter_h_h=$params.ipo_prefilter_h_h_library_neg  \\\\\n                            snthresh_l=$params.ipo_snthresh_l_library_neg \\\\\n                            snthresh_h=$params.ipo_snthresh_h_library_neg \\\\\n                            mzCenterFun=$params.ipo_mzCenterFun_library_neg  \\\\\n                            integrate=$params.ipo_integrate_library_neg \\\\\n                            fitgauss=$params.ipo_fitgauss_library_neg \\\\\n                            ipo_min_peakwidth_l=$params.ipo_min_peakwidth_l_library_neg  \\\\\n                            ipo_min_peakwidth_h=$params.ipo_min_peakwidth_h_library_neg \\\\\n                            ipo_max_peakwidth_l=$params.ipo_max_peakwidth_l_library_neg \\\\\n                            ipo_max_peakwidth_h=$params.ipo_max_peakwidth_h_library_neg \\\\\n                            ipo_ppm_l=$params.ipo_ppm_l_library_neg  \\\\\n                            ipo_ppm_h=$params.ipo_ppm_h_library_neg \\\\\n                            ipo_mzdiff_l=$params.ipo_mzdiff_l_library_neg \\\\\n                            ipo_mzdiff_h=$params.ipo_mzdiff_h_library_neg \\\\\n                            ipo_charge_camera=$params.ipo_charge_camera_library_neg  \\\\\n                            ipo_max_ppm_camera=$params.ipo_max_ppm_camera_library_neg  \\\\\n                            ipo_inv=$ipo_library_neg_localQ \\\\\n                            $filter_argument\n                        \"\"\"",
        "nb_lignes_script": 44,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "masstrace_detection_process_library_neg_openms",
            "param_target_to_detection_process_library_neg"
        ],
        "nb_inputs": 2,
        "outputs": [
            "annotation_rdata_library_neg_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'xcms'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_masstrace_detection_library_neg_xcms\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_annotate_peaks_library_neg_camera": {
        "name_process": "process_annotate_peaks_library_neg_camera",
        "string_process": " process process_annotate_peaks_library_neg_camera {\n                label 'camera'\n                                     \n                tag \"$rdata_files\"\n                publishDir \"${params.outdir}/process_annotate_peaks_library_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n                stageInMode 'copy'\n\n                input:\n                file rdata_files from annotation_rdata_library_neg_camera\n\n                output:\n                file \"${rdata_files.baseName}.rdata\" into group_rdata_library_neg_camera\n\n                \"\"\"\n                xsAnnotate.r input=$rdata_files output=${rdata_files.baseName}.rdata\n                \"\"\"\n            }",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n                xsAnnotate.r input=$rdata_files output=${rdata_files.baseName}.rdata\n                \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annotation_rdata_library_neg_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "group_rdata_library_neg_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_annotate_peaks_library_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_group_peaks_library_neg_camera": {
        "name_process": "process_group_peaks_library_neg_camera",
        "string_process": " process process_group_peaks_library_neg_camera {\n                label 'camera'\n                                     \n                tag \"$rdata_files\"\n                publishDir \"${params.outdir}/process_group_peaks_library_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n                stageInMode 'copy'\n\n                input:\n                file rdata_files from group_rdata_library_neg_camera\n\n                output:\n                file \"${rdata_files.baseName}.rdata\" into findaddcuts_rdata_library_neg_camera\n\n                \"\"\"\n                groupFWHM.r \\\\\n                    input=$rdata_files \\\\\n                    output=${rdata_files.baseName}.rdata \\\\\n                    sigma=$params.sigma_group_library_neg_camera \\\\\n                    perfwhm=$params.perfwhm_group_library_neg_camera \\\\\n                    intval=$params.intval_group_library_neg_camera\n                \"\"\"\n            }",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n                groupFWHM.r \\\\\n                    input=$rdata_files \\\\\n                    output=${rdata_files.baseName}.rdata \\\\\n                    sigma=$params.sigma_group_library_neg_camera \\\\\n                    perfwhm=$params.perfwhm_group_library_neg_camera \\\\\n                    intval=$params.intval_group_library_neg_camera\n                \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "group_rdata_library_neg_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "findaddcuts_rdata_library_neg_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_group_peaks_library_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_find_addcuts_library_neg_camera": {
        "name_process": "process_find_addcuts_library_neg_camera",
        "string_process": " process process_find_addcuts_library_neg_camera {\n                label 'camera'\n                                     \n                tag \"$rdata_files\"\n                publishDir \"${params.outdir}/process_find_addcuts_library_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n                stageInMode 'copy'\n\n                input:\n                file rdata_files from findaddcuts_rdata_library_neg_camera\n\n                output:\n                file \"${rdata_files.baseName}.rdata\" into findisotopes_rdata_library_neg_camera\n\n                \"\"\"\n                findAdducts.r \\\\\n                    input=$rdata_files \\\\\n                    output=${rdata_files.baseName}.rdata \\\\\n                    ppm=$params.ppm_findaddcuts_library_neg_camera \\\\\n                    polarity=$params.polarity_findaddcuts_library_neg_camera\n                \"\"\"\n            }",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n                findAdducts.r \\\\\n                    input=$rdata_files \\\\\n                    output=${rdata_files.baseName}.rdata \\\\\n                    ppm=$params.ppm_findaddcuts_library_neg_camera \\\\\n                    polarity=$params.polarity_findaddcuts_library_neg_camera\n                \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "findaddcuts_rdata_library_neg_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "findisotopes_rdata_library_neg_camera"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_find_addcuts_library_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_find_isotopes_library_neg_camera": {
        "name_process": "process_find_isotopes_library_neg_camera",
        "string_process": " process process_find_isotopes_library_neg_camera {\n                label 'camera'\n                                     \n                tag \"$rdata_files\"\n                publishDir \"${params.outdir}/process_find_isotopes_library_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n                stageInMode 'copy'\n\n                input:\n                file rdata_files from findisotopes_rdata_library_neg_camera\n\n                output:\n                file \"${rdata_files.baseName}.rdata\" into mapmsmstocamera_rdata_library_neg_camera,mapmsmstoparam_rdata_library_neg_camera_tmp, prepareoutput_rdata_library_neg_camera_cfmid\n\n                \"\"\"\n                findIsotopes.r \\\\\n                    input=$rdata_files \\\\\n                    output=${rdata_files.baseName}.rdata \\\\\n                    maxcharge=$params.maxcharge_findisotopes_library_neg_camera\n                \"\"\"\n            }",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n                findIsotopes.r \\\\\n                    input=$rdata_files \\\\\n                    output=${rdata_files.baseName}.rdata \\\\\n                    maxcharge=$params.maxcharge_findisotopes_library_neg_camera\n                \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "findisotopes_rdata_library_neg_camera"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapmsmstocamera_rdata_library_neg_camera",
            "mapmsmstoparam_rdata_library_neg_camera_tmp",
            "prepareoutput_rdata_library_neg_camera_cfmid"
        ],
        "nb_outputs": 3,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$rdata_files\"",
            "publishDir \"${params.outdir}/process_find_isotopes_library_neg_camera\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate",
            "stageInMode 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "process_read_MS2_library_neg_msnbase": {
        "name_process": "process_read_MS2_library_neg_msnbase",
        "string_process": " process process_read_MS2_library_neg_msnbase {\n                label 'msnbase'\n                                     \n                tag \"$mzMLFile\"\n                publishDir \"${params.outdir}/process_read_MS2_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file mzMLFile from id_library_mzml_files_neg\n\n                output:\n                file \"${mzMLFile.baseName}_ReadMsmsLibrary.rdata\" into mapmsmstocamera_rdata_library_neg_msnbase\n\n                \"\"\"\n                readMS2MSnBase.r \\\\\n                    input=$mzMLFile \\\\\n                    output=${mzMLFile.baseName}_ReadMsmsLibrary.rdata \\\\\n                    inputname=${mzMLFile.baseName}\n                \"\"\"\n            }",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n                readMS2MSnBase.r \\\\\n                    input=$mzMLFile \\\\\n                    output=${mzMLFile.baseName}_ReadMsmsLibrary.rdata \\\\\n                    inputname=${mzMLFile.baseName}\n                \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id_library_mzml_files_neg"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapmsmstocamera_rdata_library_neg_msnbase"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$mzMLFile\"",
            "publishDir \"${params.outdir}/process_read_MS2_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_mapmsms_tocamera_library_neg_msnbase": {
        "name_process": "process_mapmsms_tocamera_library_neg_msnbase",
        "string_process": " process process_mapmsms_tocamera_library_neg_msnbase {\n                label 'msnbase'\n                                        \n                tag \"$rdata_files_ms1\"\n                publishDir \"${params.outdir}/process_mapmsms_tocamera_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                set val(name), file(rdata_files_ms1), file(rdata_files_ms2) from mapmsmstocamera_rdata_library_neg_camerams2\n\n                output:\n                file \"${rdata_files_ms1.baseName}_MapMsms2Camera_library_neg.rdata\" into createlibrary_rdata_library_neg_msnbase_tmp\n\n                script:\n                \"\"\"\n                mapMS2ToCamera.r \\\\\n                    inputCAMERA=$rdata_files_ms1 \\\\\n                    inputMS2=$rdata_files_ms2 \\\\\n                    output=${rdata_files_ms1.baseName}_MapMsms2Camera_library_neg.rdata  \\\\\n                    ppm=$params.ppm_mapmsmstocamera_library_neg_msnbase \\\\\n                    rt=$params.rt_mapmsmstocamera_library_neg_msnbase \\\\\n                    preprocess_ms2=$params.preprocess_msms_library_neg_msnbase \\\\\n                    preprocess_msms_centroid=$params.preprocess_msms_centroid_library_neg_msnbase \\\\\n                    preprocess_msms_merge=$params.preprocess_msms_merge_library_neg_msnbase \\\\\n                    preprocess_msms_centroid_after_merge=$params.preprocess_msms_centroid_after_merge_library_neg_msnbase \\\\\n                    preprocess_msms_ppm=$params.preprocess_msms_ppm_library_neg_msnbase \\\\\n                    preprocess_msms_ppm_precursor=$params.preprocess_msms_ppm_precursor_library_neg_msnbase \\\\\n                    preprocess_msms_abs_mz=$params.preprocess_msms_abs_mz_library_neg_msnbase \\\\\n                    preprocess_msms_abs_mz_precursor=$params.preprocess_msms_abs_mz_precursor_library_neg_msnbase \\\\\n                    preprocess_msms_rt=$params.preprocess_msms_rt_library_neg_msnbase \\\\\n                    preprocess_msms_centroid_onlymapped=$params.preprocess_msms_centroid_onlymapped_library_neg_msnbase \\\\\n                    preprocess_msms_merge_onlymapped=$params.preprocess_msms_merge_onlymapped_library_neg_msnbase \\\\\n                    preprocess_msms_int_threshold=$params.preprocess_msms_int_threshold_library_neg_msnbase\n                \"\"\"\n            }",
        "nb_lignes_process": 32,
        "string_script": "                \"\"\"\n                mapMS2ToCamera.r \\\\\n                    inputCAMERA=$rdata_files_ms1 \\\\\n                    inputMS2=$rdata_files_ms2 \\\\\n                    output=${rdata_files_ms1.baseName}_MapMsms2Camera_library_neg.rdata  \\\\\n                    ppm=$params.ppm_mapmsmstocamera_library_neg_msnbase \\\\\n                    rt=$params.rt_mapmsmstocamera_library_neg_msnbase \\\\\n                    preprocess_ms2=$params.preprocess_msms_library_neg_msnbase \\\\\n                    preprocess_msms_centroid=$params.preprocess_msms_centroid_library_neg_msnbase \\\\\n                    preprocess_msms_merge=$params.preprocess_msms_merge_library_neg_msnbase \\\\\n                    preprocess_msms_centroid_after_merge=$params.preprocess_msms_centroid_after_merge_library_neg_msnbase \\\\\n                    preprocess_msms_ppm=$params.preprocess_msms_ppm_library_neg_msnbase \\\\\n                    preprocess_msms_ppm_precursor=$params.preprocess_msms_ppm_precursor_library_neg_msnbase \\\\\n                    preprocess_msms_abs_mz=$params.preprocess_msms_abs_mz_library_neg_msnbase \\\\\n                    preprocess_msms_abs_mz_precursor=$params.preprocess_msms_abs_mz_precursor_library_neg_msnbase \\\\\n                    preprocess_msms_rt=$params.preprocess_msms_rt_library_neg_msnbase \\\\\n                    preprocess_msms_centroid_onlymapped=$params.preprocess_msms_centroid_onlymapped_library_neg_msnbase \\\\\n                    preprocess_msms_merge_onlymapped=$params.preprocess_msms_merge_onlymapped_library_neg_msnbase \\\\\n                    preprocess_msms_int_threshold=$params.preprocess_msms_int_threshold_library_neg_msnbase\n                \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mapmsmstocamera_rdata_library_neg_camerams2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "createlibrary_rdata_library_neg_msnbase_tmp"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$rdata_files_ms1\"",
            "publishDir \"${params.outdir}/process_mapmsms_tocamera_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_create_library_neg_msnbase": {
        "name_process": "process_create_library_neg_msnbase",
        "string_process": " process process_create_library_neg_msnbase {\n                label 'msnbase'\n                                        \n                tag \"$rdata_camera\"\n                publishDir \"${params.outdir}/process_create_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                set val(name), file(rdata_camera), file(ms2_data) from msmsandquant_rdata_library_neg_camera\n                each file(library_desc) from library_description_neg\n\n                output:\n                file \"${rdata_camera.baseName}.csv\" into collectlibrary_rdata_library_neg_msnbase\n\n                \"\"\"\n                mkdir out\n                createLibrary.r \\\\\n                    inputCAMERA=$rdata_camera \\\\\n                    precursorppm=$params.ppm_create_library_neg_msnbase \\\\\n                    inputMS2=$ms2_data \\\\\n                    output=${rdata_camera.baseName}.csv  \\\\\n                    inputLibrary=$library_desc \\\\\n                    rawFileName=$params.raw_file_name_preparelibrary_neg_msnbase \\\\\n                    compundID=$params.compund_id_preparelibrary_neg_msnbase  \\\\\n                    compoundName=$params.compound_name_preparelibrary_neg_msnbase \\\\\n                    mzCol=$params.mz_col_preparelibrary_neg_msnbase \\\\\n                    whichmz=$params.which_mz_preparelibrary_neg_msnbase\n                \"\"\"\n            }",
        "nb_lignes_process": 26,
        "string_script": "\"\"\"\n                mkdir out\n                createLibrary.r \\\\\n                    inputCAMERA=$rdata_camera \\\\\n                    precursorppm=$params.ppm_create_library_neg_msnbase \\\\\n                    inputMS2=$ms2_data \\\\\n                    output=${rdata_camera.baseName}.csv  \\\\\n                    inputLibrary=$library_desc \\\\\n                    rawFileName=$params.raw_file_name_preparelibrary_neg_msnbase \\\\\n                    compundID=$params.compund_id_preparelibrary_neg_msnbase  \\\\\n                    compoundName=$params.compound_name_preparelibrary_neg_msnbase \\\\\n                    mzCol=$params.mz_col_preparelibrary_neg_msnbase \\\\\n                    whichmz=$params.which_mz_preparelibrary_neg_msnbase\n                \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "msmsandquant_rdata_library_neg_camera",
            "library_description_neg"
        ],
        "nb_inputs": 2,
        "outputs": [
            "collectlibrary_rdata_library_neg_msnbase"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$rdata_camera\"",
            "publishDir \"${params.outdir}/process_create_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_collect_library_neg_msnbase": {
        "name_process": "process_collect_library_neg_msnbase",
        "string_process": " process process_collect_library_neg_msnbase {\n                label 'msnbase'\n                                     \n                tag \"A collection of files\"\n                publishDir \"${params.outdir}/process_collect_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file rdata_files from collectlibrary_rdata_library_neg_msnbase.collect()\n\n                output:\n                file \"library_neg.csv\" into librarysearchengine_rdata_library_neg_msnbase\n\n                script:\n                def aggregatecdlibrary = rdata_files.collect{ \"$it\" }.join(\",\")\n                \"\"\"\n                collectLibrary.r \\\\\n                    inputs=$aggregatecdlibrary \\\\\n                    realNames=$aggregatecdlibrary \\\\\n                    output=library_neg.csv\n                \"\"\"\n            }",
        "nb_lignes_process": 19,
        "string_script": "                def aggregatecdlibrary = rdata_files.collect{ \"$it\" }.join(\",\")\n                \"\"\"\n                collectLibrary.r \\\\\n                    inputs=$aggregatecdlibrary \\\\\n                    realNames=$aggregatecdlibrary \\\\\n                    output=library_neg.csv\n                \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "collectlibrary_rdata_library_neg_msnbase"
        ],
        "nb_inputs": 1,
        "outputs": [
            "librarysearchengine_rdata_library_neg_msnbase"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_collect_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_remove_adducts_library_neg_msnbase": {
        "name_process": "process_remove_adducts_library_neg_msnbase",
        "string_process": " process process_remove_adducts_library_neg_msnbase {\n                label 'msnbase'\n                                     \n                tag \"A collection of files\"\n                publishDir \"${params.outdir}/process_remove_adducts_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file txt_files from addcutremove_txt_neg_msnbase.collect()\n\n                output:\n                file \"mappedtometfrag_neg.zip\" into librarysearchengine_txt_neg_msnbase_tmp\n\n                script:\n                \"\"\"\n                #!env Rscript\n                Files<-list.files(,pattern = \"zip\",full.names=T)\n                Files_org<-list.files(,pattern = \"zip\")\n                for(f in Files){\n                    zip::unzip(zipfile = f,junkpaths = T)\n                }\n                Files<-list.files(,pattern = \"txt\",full.names=T)\n                FilesTMP<-sapply(strsplit(split = \"_\",fixed = T,x = basename(Files)),function(x){paste(x[-1],collapse = \"_\")})\n                FileDub<-Files[duplicated(FilesTMP)]\n                for(x in FileDub){\n                    file.remove(x)\n                }\n                files_to_pass<-list.files(pattern=\"txt\")\n                files_to_pass<-files_to_pass[!files_to_pass%in%Files_org]\n                zip::zip(zipfile=\"mappedtometfrag_neg.zip\",files=files_to_pass)\n                \"\"\"\n            }",
        "nb_lignes_process": 29,
        "string_script": "                \"\"\"\n                #!env Rscript\n                Files<-list.files(,pattern = \"zip\",full.names=T)\n                Files_org<-list.files(,pattern = \"zip\")\n                for(f in Files){\n                    zip::unzip(zipfile = f,junkpaths = T)\n                }\n                Files<-list.files(,pattern = \"txt\",full.names=T)\n                FilesTMP<-sapply(strsplit(split = \"_\",fixed = T,x = basename(Files)),function(x){paste(x[-1],collapse = \"_\")})\n                FileDub<-Files[duplicated(FilesTMP)]\n                for(x in FileDub){\n                    file.remove(x)\n                }\n                files_to_pass<-list.files(pattern=\"txt\")\n                files_to_pass<-files_to_pass[!files_to_pass%in%Files_org]\n                zip::zip(zipfile=\"mappedtometfrag_neg.zip\",files=files_to_pass)\n                \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "addcutremove_txt_neg_msnbase"
        ],
        "nb_inputs": 1,
        "outputs": [
            "librarysearchengine_txt_neg_msnbase_tmp"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"A collection of files\"",
            "publishDir \"${params.outdir}/process_remove_adducts_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_search_engine_library_neg_msnbase_nolibcharac": {
        "name_process": "process_search_engine_library_neg_msnbase_nolibcharac",
        "string_process": " process process_search_engine_library_neg_msnbase_nolibcharac {\n                label 'msnbase'\n                                      \n                tag \"$parameters\"\n                publishDir \"${params.outdir}/process_search_engine_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n\n                input:\n                file parameters from librarysearchengine_txt_neg_msnbase\n                each file(libraryFile) from librarysearchengine_rdata_library_neg_msnbase\n\n                output:\n                file \"aggregated_identification_library_neg.csv\" into library_tsv_neg_passatutto\n\n                \"\"\"\n                librarySearchEngine.r \\\\\n                    -l $libraryFile \\\\\n                    -i $parameters  \\\\\n                    -out aggregated_identification_library_neg.csv \\\\\n                    -th \"-1\" \\\\\n                    -im neg  \\\\\n                    -ts Scoredotproduct \\\\\n                    -rs 1000 \\\\\n                    -ncore $params.ncore_searchengine_library_neg_msnbase \\\\\n                    -rt $params.rtsec_msmstoparam_neg_msnbase \\\\\n                    -outT\n\n                sed -i '/^\\$/d' aggregated_identification_library_neg.csv\n                \"\"\"\n            }",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n                librarySearchEngine.r \\\\\n                    -l $libraryFile \\\\\n                    -i $parameters  \\\\\n                    -out aggregated_identification_library_neg.csv \\\\\n                    -th \"-1\" \\\\\n                    -im neg  \\\\\n                    -ts Scoredotproduct \\\\\n                    -rs 1000 \\\\\n                    -ncore $params.ncore_searchengine_library_neg_msnbase \\\\\n                    -rt $params.rtsec_msmstoparam_neg_msnbase \\\\\n                    -outT\n\n                sed -i '/^\\$/d' aggregated_identification_library_neg.csv\n                \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "librarysearchengine_txt_neg_msnbase",
            "librarysearchengine_rdata_library_neg_msnbase"
        ],
        "nb_inputs": 2,
        "outputs": [
            "library_tsv_neg_passatutto"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$parameters\"",
            "publishDir \"${params.outdir}/process_search_engine_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_search_engine_library_neg_msnbase_libcharac": {
        "name_process": "process_search_engine_library_neg_msnbase_libcharac",
        "string_process": " process process_search_engine_library_neg_msnbase_libcharac {\n                label 'msnbase'\n                                      \n                tag \"$parameters\"\n                publishDir \"${params.outdir}/process_search_engine_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n                input:\n                file parameters from librarysearchengine_txt_neg_msnbase\n                each file(libraryFile) from library_charactrization_file_neg\n\n                output:\n                file \"aggregated_identification_library_neg.csv\" into library_tsv_neg_passatutto\n\n                \"\"\"\n                librarySearchEngine.r \\\\\n                    -l $libraryFile \\\\\n                    -i $parameters \\\\\n                    -out aggregated_identification_library_neg.csv \\\\\n                    -th \"-1\" \\\\\n                    -im neg \\\\\n                    -ts Scoredotproduct \\\\\n                    -rs 1000 \\\\\n                    -ncore $params.ncore_searchengine_library_neg_msnbase \\\\\n                    -rt $params.rtsec_msmstoparam_neg_msnbase \\\\\n                    -outT\n\n                sed -i '/^\\$/d' aggregated_identification_library_neg.csv\n                \"\"\"\n            }",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n                librarySearchEngine.r \\\\\n                    -l $libraryFile \\\\\n                    -i $parameters \\\\\n                    -out aggregated_identification_library_neg.csv \\\\\n                    -th \"-1\" \\\\\n                    -im neg \\\\\n                    -ts Scoredotproduct \\\\\n                    -rs 1000 \\\\\n                    -ncore $params.ncore_searchengine_library_neg_msnbase \\\\\n                    -rt $params.rtsec_msmstoparam_neg_msnbase \\\\\n                    -outT\n\n                sed -i '/^\\$/d' aggregated_identification_library_neg.csv\n                \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "librarysearchengine_txt_neg_msnbase",
            "library_charactrization_file_neg"
        ],
        "nb_inputs": 2,
        "outputs": [
            "library_tsv_neg_passatutto"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'msnbase'",
            "tag \"$parameters\"",
            "publishDir \"${params.outdir}/process_search_engine_library_neg_msnbase\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_pepcalculation_library_neg_passatutto": {
        "name_process": "process_pepcalculation_library_neg_passatutto",
        "string_process": " process process_pepcalculation_library_neg_passatutto {\n            label 'passatutto'\n                                 \n            tag \"$identification_result\"\n            publishDir \"${params.outdir}/process_pepcalculation_library_neg_passatutto\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate\n\n            input:\n            file identification_result from library_tsv_neg_passatutto\n\n            output:\n            file \"pep_identification_library_neg.csv\" into library_tsv_neg_output\n\n            \"\"\"\n            if [ -s $identification_result ]; then\n                metfragPEP.r \\\\\n                    input=$identification_result \\\\\n                    score=score \\\\\n                    output=pep_identification_library_neg.csv \\\\\n                    readTable=T\n            else\n                touch pep_identification_library_neg.csv\n            fi\n            \"\"\"\n        }",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n            if [ -s $identification_result ]; then\n                metfragPEP.r \\\\\n                    input=$identification_result \\\\\n                    score=score \\\\\n                    output=pep_identification_library_neg.csv \\\\\n                    readTable=T\n            else\n                touch pep_identification_library_neg.csv\n            fi\n            \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "library_tsv_neg_passatutto"
        ],
        "nb_inputs": 1,
        "outputs": [
            "library_tsv_neg_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'passatutto'",
            "tag \"$identification_result\"",
            "publishDir \"${params.outdir}/process_pepcalculation_library_neg_passatutto\", mode: params.publish_dir_mode, enabled: params.publishDir_intermediate"
        ],
        "when": "",
        "stub": ""
    },
    "process_output_quantid_neg_camera_library": {
        "name_process": "process_output_quantid_neg_camera_library",
        "string_process": " process process_output_quantid_neg_camera_library {\n            label 'camera'\n                                  \n            tag \"$camera_input_quant\"\n            publishDir \"${params.outdir}/process_output_quantid_neg_camera_library\", mode: params.publish_dir_mode\n\n            input:\n            file phenotype_file from phenotype_design_neg_library\n            file camera_input_quant from prepareoutput_rdata_neg_camera_library\n            file library_input_identification from library_tsv_neg_output\n\n            output:\n            file \"*.txt\" into library_neg_finished\n\n            \"\"\"\n            if [ -s $library_input_identification ]; then\n\n                prepareOutput.r \\\\\n                    inputcamera=$camera_input_quant \\\\\n                    inputscores=$library_input_identification \\\\\n                    inputpheno=$phenotype_file \\\\\n                    ppm=$params.ppm_output_neg_camera  \\\\\n                    rt=$params.rt_output_neg_camera \\\\\n                    higherTheBetter=true \\\\\n                    scoreColumn=score \\\\\n                    impute=$params.impute_output_neg_camera \\\\\n                    typeColumn=$params.type_column_output_neg_camera \\\\\n                    selectedType=$params.selected_type_output_neg_camera  \\\\\n                    rename=$params.rename_output_neg_camera \\\\\n                    renameCol=$params.rename_col_output_neg_camera \\\\\n                    onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                    combineReplicate=$params.combine_replicate_output_neg_camera  \\\\\n                    combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n                    log=$params.log_output_neg_camera \\\\\n                    sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                    outputPeakTable=peaktableNEGout_neg_library.txt  \\\\\n                    outputVariables=varsNEGout_neg_library.txt \\\\\n                    outputMetaData=metadataNEGout_neg_library.txt \\\\\n                    Ifnormalize=$params.normalize_output_neg_camera\n\n            else\n\n                prepareOutput.r \\\\\n                    inputcamera=$camera_input_quant \\\\\n                    inputpheno=$phenotype_file  \\\\\n                    ppm=$params.ppm_output_neg_camera \\\\\n                    rt=$params.rt_output_neg_camera \\\\\n                    higherTheBetter=true  \\\\\n                    scoreColumn=score \\\\\n                    impute=$params.impute_output_neg_camera \\\\\n                    typeColumn=$params.type_column_output_neg_camera  \\\\\n                    selectedType=$params.selected_type_output_neg_camera \\\\\n                    rename=$params.rename_output_neg_camera  \\\\\n                    renameCol=$params.rename_col_output_neg_camera \\\\\n                    onlyReportWithID=$params.only_report_with_id_output_neg_camera  \\\\\n                    combineReplicate=$params.combine_replicate_output_neg_camera \\\\\n                    combineReplicateColumn=$params.combine_replicate_column_output_neg_camera  \\\\\n                    log=$params.log_output_neg_camera \\\\\n                    sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                    outputPeakTable=peaktableNEGout_neg_library.txt  \\\\\n                    outputVariables=varsNEGout_neg_library.txt \\\\\n                    outputMetaData=metadataNEGout_neg_library.txt \\\\\n                    Ifnormalize=$params.normalize_output_neg_camera\n\n            fi\n            \"\"\"\n        }",
        "nb_lignes_process": 65,
        "string_script": "\"\"\"\n            if [ -s $library_input_identification ]; then\n\n                prepareOutput.r \\\\\n                    inputcamera=$camera_input_quant \\\\\n                    inputscores=$library_input_identification \\\\\n                    inputpheno=$phenotype_file \\\\\n                    ppm=$params.ppm_output_neg_camera  \\\\\n                    rt=$params.rt_output_neg_camera \\\\\n                    higherTheBetter=true \\\\\n                    scoreColumn=score \\\\\n                    impute=$params.impute_output_neg_camera \\\\\n                    typeColumn=$params.type_column_output_neg_camera \\\\\n                    selectedType=$params.selected_type_output_neg_camera  \\\\\n                    rename=$params.rename_output_neg_camera \\\\\n                    renameCol=$params.rename_col_output_neg_camera \\\\\n                    onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n                    combineReplicate=$params.combine_replicate_output_neg_camera  \\\\\n                    combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n                    log=$params.log_output_neg_camera \\\\\n                    sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                    outputPeakTable=peaktableNEGout_neg_library.txt  \\\\\n                    outputVariables=varsNEGout_neg_library.txt \\\\\n                    outputMetaData=metadataNEGout_neg_library.txt \\\\\n                    Ifnormalize=$params.normalize_output_neg_camera\n\n            else\n\n                prepareOutput.r \\\\\n                    inputcamera=$camera_input_quant \\\\\n                    inputpheno=$phenotype_file  \\\\\n                    ppm=$params.ppm_output_neg_camera \\\\\n                    rt=$params.rt_output_neg_camera \\\\\n                    higherTheBetter=true  \\\\\n                    scoreColumn=score \\\\\n                    impute=$params.impute_output_neg_camera \\\\\n                    typeColumn=$params.type_column_output_neg_camera  \\\\\n                    selectedType=$params.selected_type_output_neg_camera \\\\\n                    rename=$params.rename_output_neg_camera  \\\\\n                    renameCol=$params.rename_col_output_neg_camera \\\\\n                    onlyReportWithID=$params.only_report_with_id_output_neg_camera  \\\\\n                    combineReplicate=$params.combine_replicate_output_neg_camera \\\\\n                    combineReplicateColumn=$params.combine_replicate_column_output_neg_camera  \\\\\n                    log=$params.log_output_neg_camera \\\\\n                    sampleCoverage=$params.sample_coverage_output_neg_camera \\\\\n                    outputPeakTable=peaktableNEGout_neg_library.txt  \\\\\n                    outputVariables=varsNEGout_neg_library.txt \\\\\n                    outputMetaData=metadataNEGout_neg_library.txt \\\\\n                    Ifnormalize=$params.normalize_output_neg_camera\n\n            fi\n            \"\"\"",
        "nb_lignes_script": 51,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype_design_neg_library",
            "prepareoutput_rdata_neg_camera_library",
            "library_tsv_neg_output"
        ],
        "nb_inputs": 3,
        "outputs": [
            "library_neg_finished"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$camera_input_quant\"",
            "publishDir \"${params.outdir}/process_output_quantid_neg_camera_library\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "process_output_quantid_neg_camera_noid": {
        "name_process": "process_output_quantid_neg_camera_noid",
        "string_process": " process process_output_quantid_neg_camera_noid {\n        label 'camera'\n                              \n        tag \"$camera_input_quant\"\n        publishDir \"${params.outdir}/process_output_quantid_neg_camera_noid\", mode: params.publish_dir_mode\n\n        input:\n        file phenotype_file from phenotype_design_neg_noid\n        file camera_input_quant from prepareoutput_rdata_neg_camera_noid\n\n        output:\n        file \"*.txt\" into noid_neg_finished\n\n        \"\"\"\n        prepareOutput.r \\\\\n            inputcamera=$camera_input_quant \\\\\n            inputpheno=$phenotype_file \\\\\n            ppm=$params.ppm_output_neg_camera \\\\\n            rt=$params.rt_output_neg_camera \\\\\n            higherTheBetter=true \\\\\n            scoreColumn=score  \\\\\n            impute=$params.impute_output_neg_camera \\\\\n            typeColumn=$params.type_column_output_neg_camera \\\\\n            selectedType=$params.selected_type_output_neg_camera \\\\\n            rename=$params.rename_output_neg_camera  \\\\\n            renameCol=$params.rename_col_output_neg_camera \\\\\n            onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n            combineReplicate=$params.combine_replicate_output_neg_camera  \\\\\n            combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n            log=$params.log_output_neg_camera \\\\\n            sampleCoverage=$params.sample_coverage_output_neg_camera  \\\\\n            outputPeakTable=peaktableNEGout_NEG_noid.txt \\\\\n            outputVariables=varsNEGout_neg_noid.txt \\\\\n            outputMetaData=metadataNEGout_neg_noid.txt \\\\\n            Ifnormalize=$params.normalize_output_neg_camera\n        \"\"\"\n    }",
        "nb_lignes_process": 35,
        "string_script": "\"\"\"\n        prepareOutput.r \\\\\n            inputcamera=$camera_input_quant \\\\\n            inputpheno=$phenotype_file \\\\\n            ppm=$params.ppm_output_neg_camera \\\\\n            rt=$params.rt_output_neg_camera \\\\\n            higherTheBetter=true \\\\\n            scoreColumn=score  \\\\\n            impute=$params.impute_output_neg_camera \\\\\n            typeColumn=$params.type_column_output_neg_camera \\\\\n            selectedType=$params.selected_type_output_neg_camera \\\\\n            rename=$params.rename_output_neg_camera  \\\\\n            renameCol=$params.rename_col_output_neg_camera \\\\\n            onlyReportWithID=$params.only_report_with_id_output_neg_camera \\\\\n            combineReplicate=$params.combine_replicate_output_neg_camera  \\\\\n            combineReplicateColumn=$params.combine_replicate_column_output_neg_camera \\\\\n            log=$params.log_output_neg_camera \\\\\n            sampleCoverage=$params.sample_coverage_output_neg_camera  \\\\\n            outputPeakTable=peaktableNEGout_NEG_noid.txt \\\\\n            outputVariables=varsNEGout_neg_noid.txt \\\\\n            outputMetaData=metadataNEGout_neg_noid.txt \\\\\n            Ifnormalize=$params.normalize_output_neg_camera\n        \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "phenotype_design_neg_noid",
            "prepareoutput_rdata_neg_camera_noid"
        ],
        "nb_inputs": 2,
        "outputs": [
            "noid_neg_finished"
        ],
        "nb_outputs": 1,
        "name_workflow": "MetaboIGNITER__metaboigniter",
        "directive": [
            "label 'camera'",
            "tag \"$camera_input_quant\"",
            "publishDir \"${params.outdir}/process_output_quantid_neg_camera_noid\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "MULTIQC_generate_report": {
        "name_process": "MULTIQC_generate_report",
        "string_process": "process MULTIQC_generate_report {\n\n  label 'memory_8'\n\n  publishDir = [\n    path: 'results' + '/control',\n    mode: 'copy'\n  ]\n\n  input:\n    path(reports)\n    path(config)\n    path(images, stageAs: 'custom_images.tsv')\n    path(metadata, stageAs: 'metadata_mqc.tsv')\n\n  output:\n    path('multiqc_report.html')\n\n  shell:\n    '''\n    for report in !{reports}; do\n      [[ -f \"$report\" && \"${report##*.}\" == tsv ]] || continue\n      mv \"$report\" \"${report%.*}\"_mqc.\"${report##*.}\"\n    done\n\n    multiqc --config !{config} .\n    '''\n}",
        "nb_lignes_process": 26,
        "string_script": "    '''\n    for report in !{reports}; do\n      [[ -f \"$report\" && \"${report##*.}\" == tsv ]] || continue\n      mv \"$report\" \"${report%.*}\"_mqc.\"${report##*.}\"\n    done\n\n    multiqc --config !{config} .\n    '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "reports",
            "config",
            "images",
            "metadata"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sguizard__nf-feelnc",
        "directive": [
            "label 'memory_8'",
            "publishDir = [ path: 'results' + '/control' , mode: 'copy' ]"
        ],
        "when": "",
        "stub": ""
    },
    "GZIP_decompress": {
        "name_process": "GZIP_decompress",
        "string_process": "process GZIP_decompress {\n\n  input:\n    path(compressed)\n\n  output:\n    path(decompressed)\n\n  shell:\n    match = (compressed.getName() =~ /^(.+?)((\\.tar)?(\\.gz)?)$/)\n    decompressed = match[0][1]\n    compression = match[0][2]\n    if (compression.startsWith('.tar'))\n      '''\n      tar -xf !{compressed} -C '!{decompressed}'\n      '''\n    else if (compression.startsWith('.gz'))\n      '''\n      gzip -c -d !{compressed} > '!{decompressed}'\n      '''\n    else\n      '''\n      '''\n}",
        "nb_lignes_process": 22,
        "string_script": "    match = (compressed.getName() =~ /^(.+?)((\\.tar)?(\\.gz)?)$/)\n    decompressed = match[0][1]\n    compression = match[0][2]\n    if (compression.startsWith('.tar'))\n      '''\n      tar -xf !{compressed} -C '!{decompressed}'\n      '''\n    else if (compression.startsWith('.gz'))\n      '''\n      gzip -c -d !{compressed} > '!{decompressed}'\n      '''\n    else\n      '''\n      '''",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "Match"
        ],
        "tools_url": [
            "https://bio.tools/match"
        ],
        "tools_dico": [
            {
                "name": "Match",
                "uri": "https://bio.tools/match",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3511",
                            "term": "Nucleic acid sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3125",
                            "term": "DNA binding sites"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0438",
                                    "term": "Transcriptional regulatory element prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0372",
                                    "term": "DNA transcription"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0445",
                                    "term": "Transcription factor binding site prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0438",
                                    "term": "Regulatory element prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0438",
                                    "term": "Transcription regulatory element prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Weight matrix-based tool which searches for putative transcription factor binding sites (TFBS) in DNA sequences. Registration at the site is free and is required to use it.",
                "homepage": "http://www.gene-regulation.com/pub/programs.html#match"
            }
        ],
        "inputs": [
            "compressed"
        ],
        "nb_inputs": 1,
        "outputs": [
            "decompressed"
        ],
        "nb_outputs": 1,
        "name_workflow": "sguizard__nf-feelnc",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "FEELNC_classify_transcripts": {
        "name_process": "FEELNC_classify_transcripts",
        "string_process": "process FEELNC_classify_transcripts {\n\n  label 'memory_16'\n\n  publishDir = [\n    path: 'results',\n    mode: 'copy',\n    overwrite: true,\n    saveAs: { filename ->\n      if (filename == 'novel.gtf')\n        'annotation/' + filename\n      else if (filename == 'lncRNA_classes.txt')\n        'annotation/lnc_classification/' + filename\n      else if (filename.endsWith('.gtf'))\n        'annotation/lnc_classification/' + filename\n      else if (filename == 'feelnc_classification_summary.txt')\n        'control/lnc/' + filename\n      else if (filename.endsWith('.feelncclassifier.log'))\n        'control/lnc/' + filename\n    }\n  ]\n\n  input:\n    path(genome, stageAs: 'genome.input.fa')\n    path(reference_annotation, stageAs: 'reference.input.gtf')\n    path(novel_annotation, stageAs: 'novel.input.gtf')\n\n  output:\n    path('novel.gtf')\n    path('exons.*.gtf')\n    path('*.{txt,log}'), emit: reports\n\n  shell:\n    '''\n    script=$(which FEELnc_codpot.pl)\n    export FEELNCPATH=${script%/*}/..\n\n    FEELnc_filter.pl \\\\\n      --mRNAfile !{reference_annotation} \\\\\n      --infile !{novel_annotation} \\\\\n      --biotype transcript_biotype=protein_coding \\\\\n      > candidate_transcripts.gtf\n\n    FEELnc_codpot.pl \\\\\n      --genome !{genome} \\\\\n      --mRNAfile !{reference_annotation} \\\\\n      --infile candidate_transcripts.gtf \\\\\n      --biotype transcript_biotype=protein_coding \\\\\n      --numtx 5000,5000 \\\\\n      --kmer 1,2,3,6,9,12 \\\\\n      --outdir . \\\\\n      --outname exons \\\\\n      --mode shuffle \\\\\n      --spethres=0.98,0.98 \\\\\n      '!{params.feelnc_args}'\n\n    # Update annotation with new biotypes\n    cp \"$(readlink -m !{novel_annotation})\" updated.gtf\n    for biotype in lncRNA mRNA noORF TUCp; do\n      [[ -f exons.\"$biotype\".gtf ]] || continue\n\n      awk \\\\\n        -v biotype=$biotype \\\\\n        'BEGIN {\n          FS = \"\\\\t\"\n        }\n        NR == FNR {\n          match($9, /transcript_id \"([^;]*)\";*/, tId)\n          transcripts[tId[1]] = 0\n          next\n        }\n        {\n          match($9, /transcript_id \"([^;]*)\";*/, tId)\n          if (tId[1] in transcripts) {\n            # Check if there is already a biotype in the annotation\n            match($9, /biotype=([^;]*)*/, oldBiotype)\n            if (oldBiotype[1]) {\n              print $0\n            } else {\n              print $0 \" feelnc_biotype \\\\\"\" biotype \"\\\\\";\"\n            }\n          } else {\n            print $0\n          }\n        }' \\\\\n        exons.\"$biotype\".gtf \\\\\n        updated.gtf \\\\\n        > temp.gtf\n\n      mv temp.gtf updated.gtf\n    done\n\n    # Write FEELnc classification summary\n    awk \\\\\n      'BEGIN {\n        FS = OFS = \"\\\\t\"\n        feelnc_classes[\"lncRNA\"] = 0\n        feelnc_classes[\"noORF\"] = 0\n        feelnc_classes[\"mRNA\"] = 0\n        feelnc_classes[\"TUCp\"] = 0\n        feelnc_classes[\"\"] = 0\n      }\n      $3 == \"transcript\" {\n        ++nb_transcripts\n        match($9, /feelnc_biotype \"([^;]*)\";*/, feelnc_biotype)\n        ++feelnc_classes[feelnc_biotype[1]]\n      }\n      END {\n        print \"Lnc transcripts\",feelnc_classes[\"lncRNA\"]\n        print \"Coding transcripts from FEELnc classification\",feelnc_classes[\"mRNA\"]\n        print \"Transcripts with no ORF\",feelnc_classes[\"noORF\"]\n        print \"Transcripts of unknown coding potential\",feelnc_classes[\"TUCp\"]\n      }' \\\\\n      updated.gtf \\\\\n      > feelnc_classification_summary.txt\n\n    # Filter coding transcripts for lnc-messenger interactions\n    grep \\\\\n      -E '#|transcript_biotype \"protein_coding\"|feelnc_biotype \"mRNA\"' \\\\\n      !{reference_annotation} \\\\\n      > coding_transcripts.gtf\n\n    ## Filter coding transcripts for lnc-messenger interactions\n    #grep \\\\\n    #  -E '#|transcript_biotype \"protein_coding\"|feelnc_biotype \"mRNA\"' \\\\\n    #  !{novel_annotation} \\\\\n    #  > coding_transcripts.gtf\n\n    FEELnc_classifier.pl \\\\\n      --mrna coding_transcripts.gtf \\\\\n      --lncrna exons.lncRNA.gtf \\\\\n      > lncRNA_classes.txt\n\n    mv updated.gtf novel.gtf\n    '''\n}",
        "nb_lignes_process": 134,
        "string_script": "    '''\n    script=$(which FEELnc_codpot.pl)\n    export FEELNCPATH=${script%/*}/..\n\n    FEELnc_filter.pl \\\\\n      --mRNAfile !{reference_annotation} \\\\\n      --infile !{novel_annotation} \\\\\n      --biotype transcript_biotype=protein_coding \\\\\n      > candidate_transcripts.gtf\n\n    FEELnc_codpot.pl \\\\\n      --genome !{genome} \\\\\n      --mRNAfile !{reference_annotation} \\\\\n      --infile candidate_transcripts.gtf \\\\\n      --biotype transcript_biotype=protein_coding \\\\\n      --numtx 5000,5000 \\\\\n      --kmer 1,2,3,6,9,12 \\\\\n      --outdir . \\\\\n      --outname exons \\\\\n      --mode shuffle \\\\\n      --spethres=0.98,0.98 \\\\\n      '!{params.feelnc_args}'\n\n    # Update annotation with new biotypes\n    cp \"$(readlink -m !{novel_annotation})\" updated.gtf\n    for biotype in lncRNA mRNA noORF TUCp; do\n      [[ -f exons.\"$biotype\".gtf ]] || continue\n\n      awk \\\\\n        -v biotype=$biotype \\\\\n        'BEGIN {\n          FS = \"\\\\t\"\n        }\n        NR == FNR {\n          match($9, /transcript_id \"([^;]*)\";*/, tId)\n          transcripts[tId[1]] = 0\n          next\n        }\n        {\n          match($9, /transcript_id \"([^;]*)\";*/, tId)\n          if (tId[1] in transcripts) {\n            # Check if there is already a biotype in the annotation\n            match($9, /biotype=([^;]*)*/, oldBiotype)\n            if (oldBiotype[1]) {\n              print $0\n            } else {\n              print $0 \" feelnc_biotype \\\\\"\" biotype \"\\\\\";\"\n            }\n          } else {\n            print $0\n          }\n        }' \\\\\n        exons.\"$biotype\".gtf \\\\\n        updated.gtf \\\\\n        > temp.gtf\n\n      mv temp.gtf updated.gtf\n    done\n\n    # Write FEELnc classification summary\n    awk \\\\\n      'BEGIN {\n        FS = OFS = \"\\\\t\"\n        feelnc_classes[\"lncRNA\"] = 0\n        feelnc_classes[\"noORF\"] = 0\n        feelnc_classes[\"mRNA\"] = 0\n        feelnc_classes[\"TUCp\"] = 0\n        feelnc_classes[\"\"] = 0\n      }\n      $3 == \"transcript\" {\n        ++nb_transcripts\n        match($9, /feelnc_biotype \"([^;]*)\";*/, feelnc_biotype)\n        ++feelnc_classes[feelnc_biotype[1]]\n      }\n      END {\n        print \"Lnc transcripts\",feelnc_classes[\"lncRNA\"]\n        print \"Coding transcripts from FEELnc classification\",feelnc_classes[\"mRNA\"]\n        print \"Transcripts with no ORF\",feelnc_classes[\"noORF\"]\n        print \"Transcripts of unknown coding potential\",feelnc_classes[\"TUCp\"]\n      }' \\\\\n      updated.gtf \\\\\n      > feelnc_classification_summary.txt\n\n    # Filter coding transcripts for lnc-messenger interactions\n    grep \\\\\n      -E '#|transcript_biotype \"protein_coding\"|feelnc_biotype \"mRNA\"' \\\\\n      !{reference_annotation} \\\\\n      > coding_transcripts.gtf\n\n    ## Filter coding transcripts for lnc-messenger interactions\n    #grep \\\\\n    #  -E '#|transcript_biotype \"protein_coding\"|feelnc_biotype \"mRNA\"' \\\\\n    #  !{novel_annotation} \\\\\n    #  > coding_transcripts.gtf\n\n    FEELnc_classifier.pl \\\\\n      --mrna coding_transcripts.gtf \\\\\n      --lncrna exons.lncRNA.gtf \\\\\n      > lncRNA_classes.txt\n\n    mv updated.gtf novel.gtf\n    '''",
        "nb_lignes_script": 101,
        "language_script": "bash",
        "tools": [
            "NextSV",
            "ENdb"
        ],
        "tools_url": [
            "https://bio.tools/nextsv",
            "https://bio.tools/ENdb"
        ],
        "tools_dico": [
            {
                "name": "NextSV",
                "uri": "https://bio.tools/nextsv",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A meta SV caller and a computational pipeline to perform SV calling from low coverage long-read sequencing data. It integrates three aligners and three SV callers and generates two integrated call sets (sensitive/stringent) for different analysis purpose.",
                "homepage": "http://github.com/Nextomics/NextSV"
            },
            {
                "name": "ENdb",
                "uri": "https://bio.tools/ENdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0440",
                                    "term": "Promoter prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A manually curated database of experimentally supported enhancers for human and mouse. Enhancers are a class of cis-regulatory elements that can increase gene transcription by forming loops in intergenic regions, introns and exons",
                "homepage": "http://www.licpathway.net/ENdb"
            }
        ],
        "inputs": [
            "genome",
            "reference_annotation",
            "novel_annotation"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "sguizard__nf-feelnc",
        "directive": [
            "label 'memory_16'",
            "publishDir = [ path: 'results' , mode: 'copy' , overwrite: true , saveAs: { filename -> if (filename == 'novel.gtf') 'annotation/' + filename else if (filename == 'lncRNA_classes.txt') 'annotation/lnc_classification/' + filename else if (filename.endsWith('.gtf')) 'annotation/lnc_classification/' + filename else if (filename == 'feelnc_classification_summary.txt') 'control/lnc/' + filename else if (filename.endsWith('.feelncclassifier.log')) 'control/lnc/' + filename } ]"
        ],
        "when": "",
        "stub": ""
    }
}
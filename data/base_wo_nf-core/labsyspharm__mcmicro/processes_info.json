{
    "worker": {
        "name_process": "worker",
        "string_process": "\nprocess worker {\n    container \"${params.contPfx}${module.container}:${module.version}\"\n    tag \"${module.name}-${task.index}\"\n    \n                                                                                   \n    publishDir \"${pubDir}\", mode: 'copy',\n      pattern: \"$outfmt\", saveAs: {fn -> fnOut != '' ? fnOut : fn}\n    publishDir \"${pubDir}\", mode: 'copy', pattern: 'plots/**'\n\n         \n    publishDir \"${params.path_qc}/${module.name}\", mode: \"${params.qcFiles}\",\n      pattern: 'qc/**', saveAs: { fn -> fn.replaceFirst(\"qc/\",\"\") }\n    \n                 \n    publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.sh',\n      saveAs: {fn -> \"${task.name}.sh\"}\n    publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.log',\n      saveAs: {fn -> \"${task.name}.log\"}\n\n    input:\n        tuple val(tag), val(module), file(model), path(inp), val(pubDir), val(fnOut)\n        val(outfmt)\n        val(idxStep)\n\n    output:\n\n                                                            \n                                                                     \n    tuple val(tag), val(\"${module.name}\"), path(\"$outfmt\"), emit: res\n\n                                                                              \n                                                                                   \n    path('plots/**') optional true\n    path('qc/**') optional true\n\n                 \n    tuple path('.command.sh'), path('.command.log')\n\n    when:\n\tparams.idxStart <= idxStep && params.idxStop >= idxStep\n    \n                                                                                     \n                                                                                       \n                                             \n    script:\n\n                                                            \n    def mparam = params.\"${module.name}Opts\"\n    def cmd = \"${module.cmd} ${module.input} $inp $mparam\"\n    String m = \"${module.name}Model\"\n\n    if( params.containsKey(m) ) {\n\tdef mdlcp = \"cp-${model.name}\"\n        \"\"\"\n        cp $model $mdlcp\n        $cmd ${module.model} $mdlcp    \n        \"\"\"\n    } else {\n        \"\"\"\n        $cmd\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 62,
        "string_script": "    def mparam = params.\"${module.name}Opts\"\n    def cmd = \"${module.cmd} ${module.input} $inp $mparam\"\n    String m = \"${module.name}Model\"\n\n    if( params.containsKey(m) ) {\n\tdef mdlcp = \"cp-${model.name}\"\n        \"\"\"\n        cp $model $mdlcp\n        $cmd ${module.model} $mdlcp    \n        \"\"\"\n    } else {\n        \"\"\"\n        $cmd\n        \"\"\"\n    }",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "STRING"
        ],
        "tools_url": [
            "https://bio.tools/string"
        ],
        "tools_dico": [
            {
                "name": "STRING",
                "uri": "https://bio.tools/string",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0276",
                                    "term": "Protein interaction network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A database of known and predicted protein-protein interactions. The database contains information from numerous sources, including experimental repositories, computational prediction methods and public text collections. STRING is regularly updated and gives a comprehensive view on protein-protein interactions currently available.",
                "homepage": "http://string-db.org/"
            }
        ],
        "inputs": [
            "tag",
            "module",
            "pubDir",
            "fnOut",
            "model",
            "inp",
            "outfmt",
            "idxStep"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "labsyspharm__mcmicro",
        "directive": [
            "container \"${params.contPfx}${module.container}:${module.version}\"",
            "tag \"${module.name}-${task.index}\"",
            "publishDir \"${pubDir}\", mode: 'copy' , pattern: \"$outfmt\", saveAs: {fn -> fnOut != '' ? fnOut : fn}",
            "publishDir \"${pubDir}\", mode: 'copy', pattern: 'plots/**'",
            "publishDir \"${params.path_qc}/${module.name}\", mode: \"${params.qcFiles}\" , pattern: 'qc/**', saveAs: { fn -> fn.replaceFirst(\"qc/\",\"\") }",
            "publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.sh' , saveAs: {fn -> \"${task.name}.sh\"}",
            "publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.log' , saveAs: {fn -> \"${task.name}.log\"}"
        ],
        "when": "params.idxStart <= idxStep && params.idxStop >= idxStep",
        "stub": ""
    },
    "illumination": {
        "name_process": "illumination",
        "string_process": "\nprocess illumination {\n    container \"${params.contPfx}${module.container}:${module.version}\"\n\n                      \n    publishDir params.pubDir, mode: 'copy', pattern: '*.tif'\n\n                 \n    publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.sh',\n      saveAs: {fn -> \"${task.name}.sh\"}\n    publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.log',\n      saveAs: {fn -> \"${task.name}.log\"}\n    \n    input:\n      val module\n      tuple path(raw), val(relPath)                                                  \n    output:\n      path '*-dfp.tif', emit: dfp\n      path '*-ffp.tif', emit: ffp\n      tuple path('.command.sh'), path('.command.log')\n\n    when: params.idxStart <= 1 && params.idxStop >= 1\n    \n    script:\n    def fn = escapeForImagej(relPath)\n    def xpn = escapeForImagej(relPath.subpath(0, 1).toString().tokenize(\".\")[0])\n    def macroParams = Util.escapeForShell(\n        \"\"\"filename=$fn,output_dir=\".\",experiment_name=$xpn\"\"\"\n    )\n    \"\"\"\n    /opt/fiji/Fiji.app/ImageJ-linux64 --ij2 --headless \\\n      --run /opt/fiji/imagej_basic_ashlar.py \\\n      $macroParams\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def fn = escapeForImagej(relPath)\n    def xpn = escapeForImagej(relPath.subpath(0, 1).toString().tokenize(\".\")[0])\n    def macroParams = Util.escapeForShell(\n        \"\"\"filename=$fn,output_dir=\".\",experiment_name=$xpn\"\"\"\n    )\n    \"\"\"\n    /opt/fiji/Fiji.app/ImageJ-linux64 --ij2 --headless \\\n      --run /opt/fiji/imagej_basic_ashlar.py \\\n      $macroParams\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "module",
            "relPath",
            "raw"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "labsyspharm__mcmicro",
        "directive": [
            "container \"${params.contPfx}${module.container}:${module.version}\"",
            "publishDir params.pubDir, mode: 'copy', pattern: '*.tif'",
            "publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.sh' , saveAs: {fn -> \"${task.name}.sh\"}",
            "publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.log' , saveAs: {fn -> \"${task.name}.log\"}"
        ],
        "when": "",
        "stub": ""
    },
    "O2ext": {
        "name_process": "O2ext",
        "string_process": "process O2ext {\n    executor 'local'\n    \n    '''\n    rm -rf $HOME/.mcmicro\n    mkdir -p $HOME/.mcmicro\n    ln -s /n/groups/lsp/mcmicro/singularity/* $HOME/.mcmicro\n    '''\n}",
        "nb_lignes_process": 7,
        "string_script": "'''\n    rm -rf $HOME/.mcmicro\n    mkdir -p $HOME/.mcmicro\n    ln -s /n/groups/lsp/mcmicro/singularity/* $HOME/.mcmicro\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "labsyspharm__mcmicro",
        "directive": [
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "coreograph": {
        "name_process": "coreograph",
        "string_process": "process coreograph {\n    container \"${params.contPfx}${module.container}:${module.version}\"\n    \n             \n    publishDir params.pubDir, mode: 'copy', pattern: '**{[0-9],mask}.tif'\n\n         \n    publishDir \"${params.path_qc}/coreo\", mode: \"${params.qcFiles}\",\n      pattern: 'TMA_MAP.tif'\n    publishDir \"${params.path_qc}/coreo\", mode: \"${params.qcFiles}\",\n      pattern: 'centroidsY-X.txt'\n    \n                 \n    publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.sh',\n      saveAs: {fn -> \"${task.name}.sh\"}\n    publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.log',\n      saveAs: {fn -> \"${task.name}.log\"}\n    \n    input:\n      val module\n      path s\n    \n    output:\n      path \"**{,[A-Z],[A-Z][A-Z]}{[0-9],[0-9][0-9]}.tif\", emit: cores\n      path \"**_mask.tif\", emit: masks\n      path \"TMA_MAP.tif\"\n      path \"centroidsY-X.txt\"\n      tuple path('.command.sh'), path('.command.log')    \n\n    when: params.idxStart <= 3 && params.idxStop >= 3 && params.tma\n\n    \"\"\"\n    python /app/UNetCoreograph.py ${params.coreOpts}\\\n      --imagePath $s --outputPath .\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "\"\"\"\n    python /app/UNetCoreograph.py ${params.coreOpts}\\\n      --imagePath $s --outputPath .\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "module",
            "s"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "labsyspharm__mcmicro",
        "directive": [
            "container \"${params.contPfx}${module.container}:${module.version}\"",
            "publishDir params.pubDir, mode: 'copy', pattern: '**{[0-9],mask}.tif'",
            "publishDir \"${params.path_qc}/coreo\", mode: \"${params.qcFiles}\" , pattern: 'TMA_MAP.tif'",
            "publishDir \"${params.path_qc}/coreo\", mode: \"${params.qcFiles}\" , pattern: 'centroidsY-X.txt'",
            "publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.sh' , saveAs: {fn -> \"${task.name}.sh\"}",
            "publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.log' , saveAs: {fn -> \"${task.name}.log\"}"
        ],
        "when": "",
        "stub": ""
    },
    "mcquant": {
        "name_process": "mcquant",
        "string_process": "process mcquant {\n    container \"${params.contPfx}${module.container}:${module.version}\"\n\n             \n    publishDir params.pubDir, mode: 'copy', pattern: '*.csv'\n\n                 \n    publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.sh',\n      saveAs: {fn -> \"${task.name}.sh\"}\n    publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.log',\n      saveAs: {fn -> \"${task.name}.log\"}\n    \n    input:\n\tval module\n\ttuple val(tag), path(\"$tag\"), path(masks), path(ch)\n    output:\n\tpath '*.csv', emit: tables\n        tuple path('.command.sh'), path('.command.log')\n\n    when: params.idxStart <= 6 && params.idxStop >= 6\n\n    \"\"\"\n    python /app/CommandSingleCellExtraction.py --image $tag \\\n    ${params.quantOpts} --output . --channel_names $ch\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n    python /app/CommandSingleCellExtraction.py --image $tag \\\n    ${params.quantOpts} --output . --channel_names $ch\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "module",
            "tag",
            "masks",
            "ch"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "labsyspharm__mcmicro",
        "directive": [
            "container \"${params.contPfx}${module.container}:${module.version}\"",
            "publishDir params.pubDir, mode: 'copy', pattern: '*.csv'",
            "publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.sh' , saveAs: {fn -> \"${task.name}.sh\"}",
            "publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.log' , saveAs: {fn -> \"${task.name}.log\"}"
        ],
        "when": "",
        "stub": ""
    },
    "getImages": {
        "name_process": "getImages",
        "string_process": "\nprocess getImages {\n    publishDir \"${params.path}/${params.name}\", mode: 'move'\n\n    input:\n        val name\n        val loc\n    output:\tfile '**'\n    \n    script:\n    def img = \"${loc}/${name}.ome.tiff\"\n    \"\"\"\n    mkdir ${loc}\n    curl -f -o ${img} ${url}/${img}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    def img = \"${loc}/${name}.ome.tiff\"\n    \"\"\"\n    mkdir ${loc}\n    curl -f -o ${img} ${url}/${img}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [
            "name",
            "loc"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "labsyspharm__mcmicro",
        "directive": [
            "publishDir \"${params.path}/${params.name}\", mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "getIllumination": {
        "name_process": "getIllumination",
        "string_process": "\nprocess getIllumination {\n    publishDir \"${params.path}/${params.name}\", mode: 'move'\n\n    input: val name\n    output:\tfile '**'\n\n    script:\n    def ilp = 'illumination'\n    def dfp = \"${ilp}/${name}-dfp.tif\"\n    def ffp = \"${ilp}/${name}-ffp.tif\"\n    \"\"\"\n    mkdir $ilp\n    curl -f -o $dfp ${url}/$dfp\n    curl -f -o $ffp ${url}/$ffp\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    def ilp = 'illumination'\n    def dfp = \"${ilp}/${name}-dfp.tif\"\n    def ffp = \"${ilp}/${name}-ffp.tif\"\n    \"\"\"\n    mkdir $ilp\n    curl -f -o $dfp ${url}/$dfp\n    curl -f -o $ffp ${url}/$ffp\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "labsyspharm__mcmicro",
        "directive": [
            "publishDir \"${params.path}/${params.name}\", mode: 'move' input: val name output: file '**'"
        ],
        "when": "",
        "stub": ""
    },
    "getMarkers": {
        "name_process": "getMarkers",
        "string_process": "\nprocess getMarkers {\n    publishDir \"${params.path}/${params.name}\", mode: 'move'\n\n    input: val post\n    output: file 'markers.csv'\n\n    \"\"\"\n    curl -f \"${url}/markers.csv\" ${post} > markers.csv\n    \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "\"\"\"\n    curl -f \"${url}/markers.csv\" ${post} > markers.csv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "labsyspharm__mcmicro",
        "directive": [
            "publishDir \"${params.path}/${params.name}\", mode: 'move' input: val post output: file 'markers.csv'"
        ],
        "when": "",
        "stub": ""
    },
    "ashlar": {
        "name_process": "ashlar",
        "string_process": "\nprocess ashlar {\n    container \"${params.contPfx}${module.container}:${module.version}\"\n    publishDir params.pubDir, mode: 'copy', pattern: '*.tif'\n    \n                 \n    publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.sh',\n      saveAs: {fn -> \"${task.name}.sh\"}\n    publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.log',\n      saveAs: {fn -> \"${task.name}.log\"}\n    \n    input:\n      val module\n      path lraw                       \n      val lrelPath                      \n      path lffp\n      path ldfp\n\n    output:\n\tpath \"${params.sampleName}.ome.tif\", emit: img\n        tuple path('.command.sh'), path('.command.log')\n\n    when: params.idxStart <= 2 && params.idxStop >= 2\n    \n    script:\n    def imgs = lrelPath.collect{ Util.escapeForShell(it) }.join(\" \")\n    def ilp = \"--ffp $lffp --dfp $ldfp\"\n    if (ilp == '--ffp  --dfp ') ilp = ''  // Don't supply empty --ffp --dfp\n    \"ashlar $imgs ${params.ashlarOpts} $ilp -o ${params.sampleName}.ome.tif\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def imgs = lrelPath.collect{ Util.escapeForShell(it) }.join(\" \")\n    def ilp = \"--ffp $lffp --dfp $ldfp\"\n    if (ilp == '--ffp  --dfp ') ilp = ''  // Don't supply empty --ffp --dfp\n    \"ashlar $imgs ${params.ashlarOpts} $ilp -o ${params.sampleName}.ome.tif\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "ASHLAR"
        ],
        "tools_url": [
            "https://bio.tools/ASHLAR"
        ],
        "tools_dico": [
            {
                "name": "ASHLAR",
                "uri": "https://bio.tools/ASHLAR",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3400",
                            "term": "Allergy, clinical immunology and immunotherapeutics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3382",
                            "term": "Imaging"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3360",
                            "term": "Biomarkers"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3360",
                            "term": "Diagnostic markers"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3443",
                                    "term": "Image analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment by Simultaneous Harmonization of Layer/Adjacency Registration.\nHighly multiplexed immunofluorescence images and single-cell data of immune markers in tonsil and lung cancer.",
                "homepage": "https://github.com/jmuhlich/ashlar"
            }
        ],
        "inputs": [
            "module",
            "lraw",
            "lrelPath",
            "lffp",
            "ldfp"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "labsyspharm__mcmicro",
        "directive": [
            "container \"${params.contPfx}${module.container}:${module.version}\"",
            "publishDir params.pubDir, mode: 'copy', pattern: '*.tif'",
            "publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.sh' , saveAs: {fn -> \"${task.name}.sh\"}",
            "publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.log' , saveAs: {fn -> \"${task.name}.log\"}"
        ],
        "when": "",
        "stub": ""
    },
    "s3seg": {
        "name_process": "s3seg",
        "string_process": "process s3seg {\n    container \"${params.contPfx}${module.container}:${module.version}\"\n\n             \n    publishDir \"${pubDir}/$tag\",\n      mode: 'copy', pattern: '*/*.ome.tif', saveAs: {f -> file(f).name}\n\n         \n    publishDir \"${params.path_qc}/s3seg/$tag\", mode: \"${params.qcFiles}\",\n      pattern: '*/qc/**', saveAs: {f -> file(f).name}\n\n                 \n    publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.sh',\n      saveAs: {fn -> \"${task.name}.sh\"}\n    publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.log',\n      saveAs: {fn -> \"${task.name}.log\"}\n    \n    input:\n\n    val module\n    tuple val(tag), path(core), file('mask.tif'), path(probs), val(bypass)\n    val pubDir\n\n    output:\n\t                            \n        tuple val(tag), path(\"*/*.ome.tif\"), emit: segmasks\n\n                            \n        path('*/qc/**') optional true\n        tuple path('.command.sh'), path('.command.log')\n\n    when: params.idxStart <= 5 && params.idxStop >= 5\n    \n    script:\n\tdef crop = params.tma ?\n\t'--crop dearray --maskPath mask.tif' :\n\t''\n    \"\"\"\n    python /app/S3segmenter.py $crop \\\n       --imagePath $core --stackProbPath $probs \\\n       $bypass ${params.s3segOpts} --outputPath .\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "\tdef crop = params.tma ?\n\t'--crop dearray --maskPath mask.tif' :\n\t''\n    \"\"\"\n    python /app/S3segmenter.py $crop \\\n       --imagePath $core --stackProbPath $probs \\\n       $bypass ${params.s3segOpts} --outputPath .\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "module",
            "tag",
            "bypass",
            "core",
            "probs",
            "pubDir"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "labsyspharm__mcmicro",
        "directive": [
            "container \"${params.contPfx}${module.container}:${module.version}\"",
            "publishDir \"${pubDir}/$tag\" , mode: 'copy', pattern: '*/*.ome.tif', saveAs: {f -> file(f).name}",
            "publishDir \"${params.path_qc}/s3seg/$tag\", mode: \"${params.qcFiles}\" , pattern: '*/qc/**', saveAs: {f -> file(f).name}",
            "publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.sh' , saveAs: {fn -> \"${task.name}.sh\"}",
            "publishDir \"${params.path_prov}\", mode: 'copy', pattern: '.command.log' , saveAs: {fn -> \"${task.name}.log\"}"
        ],
        "when": "",
        "stub": ""
    }
}
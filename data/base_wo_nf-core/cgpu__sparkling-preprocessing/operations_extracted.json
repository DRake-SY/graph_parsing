{
    "OPERATION_1": {
        "string": "Channel.fromPath(params.fasta)\n           .ifEmpty { exit 1, \"fasta annotation file not found: ${params.fasta}\" }\n           .into { fasta_scatter_intervals; fasta_bwa; fasta_baserecalibrator; fasta_haplotypecaller; fasta_genotypegvcfs; fasta_variantrecalibrator_snps; fasta_variantrecalibrator_tranches; fasta_variant_eval; fasta_structural_variantcaller }",
        "origin": [
            [
                "params.fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "fasta_scatter_intervals",
                "P"
            ],
            [
                "fasta_bwa",
                "P"
            ],
            [
                "fasta_baserecalibrator",
                "P"
            ],
            [
                "fasta_haplotypecaller",
                "P"
            ],
            [
                "fasta_genotypegvcfs",
                "P"
            ],
            [
                "fasta_variantrecalibrator_snps",
                "P"
            ],
            [
                "fasta_variantrecalibrator_tranches",
                "P"
            ],
            [
                "fasta_variant_eval",
                "P"
            ],
            [
                "fasta_structural_variantcaller",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.fromPath(params.fai)\n           .ifEmpty { exit 1, \"fai annotation file not found: ${params.fai}\" }\n           .into { fai_scatter_intervals; fai_bwa; fai_baserecalibrator; fai_haplotypecaller; fai_genotypegvcfs; fai_variantrecalibrator_snps; fai_variantrecalibrator_tranches; fai_variant_eval; fai_structural_variantcaller }",
        "origin": [
            [
                "params.fai",
                "A"
            ]
        ],
        "gives": [
            [
                "fai_scatter_intervals",
                "P"
            ],
            [
                "fai_bwa",
                "P"
            ],
            [
                "fai_baserecalibrator",
                "P"
            ],
            [
                "fai_haplotypecaller",
                "P"
            ],
            [
                "fai_genotypegvcfs",
                "P"
            ],
            [
                "fai_variantrecalibrator_snps",
                "P"
            ],
            [
                "fai_variantrecalibrator_tranches",
                "P"
            ],
            [
                "fai_variant_eval",
                "P"
            ],
            [
                "fai_structural_variantcaller",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(params.dict)\n           .ifEmpty { exit 1, \"dict annotation file not found: ${params.dict}\" }\n           .into { dict_scatter_intervals; dict_bwa; dict_baserecalibrator; dict_haplotypecaller; dict_genotypegvcfs; dict_variantrecalibrator_snps; dict_variantrecalibrator_tranches; dict_variant_eval }",
        "origin": [
            [
                "params.dict",
                "A"
            ]
        ],
        "gives": [
            [
                "dict_scatter_intervals",
                "P"
            ],
            [
                "dict_bwa",
                "P"
            ],
            [
                "dict_baserecalibrator",
                "P"
            ],
            [
                "dict_haplotypecaller",
                "P"
            ],
            [
                "dict_genotypegvcfs",
                "P"
            ],
            [
                "dict_variantrecalibrator_snps",
                "P"
            ],
            [
                "dict_variantrecalibrator_tranches",
                "P"
            ],
            [
                "dict_variant_eval",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath(params.dbsnp_gz)\n           .ifEmpty { exit 1, \"dbsnp annotation file not found: ${params.dbsnp_gz}\" }\n           .set { dbsnp_gz}",
        "origin": [
            [
                "params.dbsnp_gz",
                "A"
            ]
        ],
        "gives": [
            [
                "dbsnp_gz",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath(params.dbsnp_idx_gz)\n           .ifEmpty { exit 1, \"dbsnp_idx_gz annotation file not found: ${params.dbsnp_idx_gz}\" }\n           .set { dbsnp_idx_gz}",
        "origin": [
            [
                "params.dbsnp_idx_gz",
                "A"
            ]
        ],
        "gives": [
            [
                "dbsnp_idx_gz",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.fromPath(params.golden_indel_gz)\n           .ifEmpty { exit 1, \"golden_indel_gz annotation file not found: ${params.golden_indel_gz}\" }\n           .set { golden_indel_gz }",
        "origin": [
            [
                "params.golden_indel_gz",
                "A"
            ]
        ],
        "gives": [
            [
                "golden_indel_gz",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel.fromPath(params.golden_indel_idx_gz)\n           .ifEmpty { exit 1, \"golden_indel_idx_gz annotation file not found: ${params.golden_indel_idx_gz}\" }\n           .set { golden_indel_idx_gz }",
        "origin": [
            [
                "params.golden_indel_idx_gz",
                "A"
            ]
        ],
        "gives": [
            [
                "golden_indel_idx_gz",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel.fromPath(params.bwa_index_amb)\n           .ifEmpty { exit 1, \"bwa_index_amb annotation file not found: ${params.bwa_index_amb}\" }\n           .set { bwa_index_amb }",
        "origin": [
            [
                "params.bwa_index_amb",
                "A"
            ]
        ],
        "gives": [
            [
                "bwa_index_amb",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel.fromPath(params.bwa_index_ann)\n           .ifEmpty { exit 1, \"bwa_index_ann annotation file not found: ${params.bwa_index_ann}\" }\n           .set { bwa_index_ann }",
        "origin": [
            [
                "params.bwa_index_ann",
                "A"
            ]
        ],
        "gives": [
            [
                "bwa_index_ann",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel.fromPath(params.bwa_index_bwt)\n           .ifEmpty { exit 1, \"bwa_index_bwt annotation file not found: ${params.bwa_index_bwt}\" }\n           .set { bwa_index_bwt }",
        "origin": [
            [
                "params.bwa_index_bwt",
                "A"
            ]
        ],
        "gives": [
            [
                "bwa_index_bwt",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel.fromPath(params.bwa_index_pac)\n           .ifEmpty { exit 1, \"bwa_index_pac annotation file not found: ${params.bwa_index_pac}\" }\n           .set { bwa_index_pac }",
        "origin": [
            [
                "params.bwa_index_pac",
                "A"
            ]
        ],
        "gives": [
            [
                "bwa_index_pac",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel.fromPath(params.bwa_index_sa)\n           .ifEmpty { exit 1, \"bwa_index_sa annotation file not found: ${params.bwa_index_sa}\" }\n           .set { bwa_index_sa }",
        "origin": [
            [
                "params.bwa_index_sa",
                "A"
            ]
        ],
        "gives": [
            [
                "bwa_index_sa",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "Channel.fromPath(params.intervals)\n           .ifEmpty { exit 1, \"Interval list file for HaplotypeCaller not found: ${params.intervals}\" }\n           .set { intervals_input }",
        "origin": [
            [
                "params.intervals",
                "A"
            ]
        ],
        "gives": [
            [
                "intervals_input",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel.fromPath(params.bai)\n           .ifEmpty { exit 1, \"BAM index file not found: ${params.bai}\" }\n           .set { bai }",
        "origin": [
            [
                "params.bai",
                "A"
            ]
        ],
        "gives": [
            [
                "bai",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "Channel\n      .fromPath(params.reads)\n      .map { file -> tuple(file.baseName, file) }\n      .ifEmpty { exit 1, \"Cannot find any reads matching: ${reads}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n      .into { reads_fastqc; reads_files }",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "reads_fastqc",
                "P"
            ],
            [
                "reads_files",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "Channel\n      .fromFilePairs(reads, size: 2)\n      .ifEmpty { exit 1, \"Cannot find any reads matching: ${reads}\\nNB: Path needs to be enclosed in quotes!\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n      .into { reads_fastqc; reads_files}",
        "origin": [
            [
                "reads, size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "reads_fastqc",
                "P"
            ],
            [
                "reads_files",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "Channel.fromPath(params.bam)\n         .map { file -> tuple(file.baseName, file) }\n         .ifEmpty { exit 1, \"BAM file not found: ${params.bam}\" }\n         .set { bam_bqsr }",
        "origin": [
            [
                "params.bam",
                "A"
            ]
        ],
        "gives": [
            [
                "bam_bqsr",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "reads_files\n    .combine(fasta_bwa)\n    .dump(tag:'input')\n    .set { reads_bwa }",
        "origin": [
            [
                "reads_files",
                "P"
            ],
            [
                "fasta_bwa",
                "P"
            ]
        ],
        "gives": [
            [
                "reads_bwa",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "reads_files\n    .combine(fasta_bwa)\n    .dump(tag:'input')\n    .set { reads_bwa }",
        "origin": [
            [
                "reads_files",
                "P"
            ],
            [
                "fasta_bwa",
                "P"
            ]
        ],
        "gives": [
            [
                "reads_bwa",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "scattered_intervals_ref = fasta_scatter_intervals.merge(fai_scatter_intervals, dict_scatter_intervals)",
        "origin": [
            [
                "fasta_scatter_intervals",
                "P"
            ],
            [
                "fai_scatter_intervals",
                "P"
            ],
            [
                "dict_scatter_intervals",
                "P"
            ]
        ],
        "gives": [
            [
                "scattered_intervals_ref",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "expanded_intervals.into { intervals_file; split_intervals}",
        "origin": [
            [
                "expanded_intervals",
                "P"
            ]
        ],
        "gives": [
            [
                "intervals_file",
                "P"
            ],
            [
                "split_intervals",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "split_intervals\n        .splitText()\n        .map { it -> it.trim() }\n        .set { interval }",
        "origin": [
            [
                "split_intervals",
                "P"
            ]
        ],
        "gives": [
            [
                "interval",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "bwa_index = bwa_index_amb.merge(bwa_index_ann, bwa_index_bwt, bwa_index_pac, bwa_index_sa)",
        "origin": [
            [
                "bwa_index_amb",
                "P"
            ],
            [
                "bwa_index_ann",
                "P"
            ],
            [
                "bwa_index_bwt",
                "P"
            ],
            [
                "bwa_index_pac",
                "P"
            ],
            [
                "bwa_index_sa",
                "P"
            ]
        ],
        "gives": [
            [
                "bwa_index",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "bwa = reads_bwa.combine(bwa_index)",
        "origin": [
            [
                "reads_bwa",
                "P"
            ],
            [
                "bwa_index",
                "P"
            ]
        ],
        "gives": [
            [
                "bwa",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "baserecalibrator_index = fasta_baserecalibrator.merge(fai_baserecalibrator, dict_baserecalibrator, dbsnp, dbsnp_idx, golden_indel, golden_indel_idx)",
        "origin": [
            [
                "fasta_baserecalibrator",
                "P"
            ],
            [
                "fai_baserecalibrator",
                "P"
            ],
            [
                "dict_baserecalibrator",
                "P"
            ],
            [
                "dbsnp",
                "P"
            ],
            [
                "dbsnp_idx",
                "P"
            ],
            [
                "golden_indel",
                "P"
            ],
            [
                "golden_indel_idx",
                "P"
            ]
        ],
        "gives": [
            [
                "baserecalibrator_index",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "baserecalibrator = bam_markdup_baserecalibrator.combine(baserecalibrator_index)",
        "origin": [
            [
                "bam_markdup_baserecalibrator",
                "P"
            ],
            [
                "baserecalibrator_index",
                "P"
            ]
        ],
        "gives": [
            [
                "baserecalibrator",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "applybqsr = baserecalibrator_table.join(bam_markdup_applybqsr)",
        "origin": [
            [
                "baserecalibrator_table",
                "P"
            ],
            [
                "bam_markdup_applybqsr",
                "P"
            ]
        ],
        "gives": [
            [
                "applybqsr",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "bam_bqsr.merge(bai).into { indexed_bam_bqsr; indexed_bam_qc; indexed_bam_structural_variantcaller }",
        "origin": [
            [
                "bam_bqsr",
                "P"
            ],
            [
                "bai",
                "P"
            ]
        ],
        "gives": [
            [
                "indexed_bam_bqsr",
                "P"
            ],
            [
                "indexed_bam_qc",
                "P"
            ],
            [
                "indexed_bam_structural_variantcaller",
                "P"
            ]
        ]
    }
}
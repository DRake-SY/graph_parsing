{
    "getPsudoCircSequenceAndBuildHisatIndex": {
        "name_process": "getPsudoCircSequenceAndBuildHisatIndex",
        "string_process": " process getPsudoCircSequenceAndBuildHisatIndex {\n      input:\n           file (bed_file) from Bed_for_recount\n           file genomefile\n           file faifile \n      output:\n           file \"*.ht2\" into Candidate_circRNA_index\n      script:\n      \"\"\"\n      # extract bed file for obtaining seqeuence\n      sh ${baseDir}/bin/ProcessBedforGettingSequence.sh ${bed_file} temp.sort.bed temp.start.bed temp.end.bed\n\n      bedtools getfasta -name -fi ${genomefile} -s -bed temp.start.bed > temp.start.fa\n      bedtools getfasta -name -fi ${genomefile} -s -bed temp.end.bed > temp.end.fa\n      # circRNA <= 400 bp\n      bedtools getfasta -name -fi ${genomefile} -s -bed temp.sort.bed > temp.sort.fa \n\n      # merge and get combined fasta formatted psudoCirc sequences\n      sh ${baseDir}/bin/MergeBSJsequence.sh temp.sort.fa temp.start.fa temp.end.fa tmp_candidate.circular_BSJ_flank.fa\n\n      hisat2-build -p ${task.cpus}  tmp_candidate.circular_BSJ_flank.fa candidate_circRNA_BSJ_flank \n      rm temp* \n      rm tmp*\n      \n      \"\"\"\n    }",
        "nb_lignes_process": 24,
        "string_script": "      \"\"\"\n      # extract bed file for obtaining seqeuence\n      sh ${baseDir}/bin/ProcessBedforGettingSequence.sh ${bed_file} temp.sort.bed temp.start.bed temp.end.bed\n\n      bedtools getfasta -name -fi ${genomefile} -s -bed temp.start.bed > temp.start.fa\n      bedtools getfasta -name -fi ${genomefile} -s -bed temp.end.bed > temp.end.fa\n      # circRNA <= 400 bp\n      bedtools getfasta -name -fi ${genomefile} -s -bed temp.sort.bed > temp.sort.fa \n\n      # merge and get combined fasta formatted psudoCirc sequences\n      sh ${baseDir}/bin/MergeBSJsequence.sh temp.sort.fa temp.start.fa temp.end.fa tmp_candidate.circular_BSJ_flank.fa\n\n      hisat2-build -p ${task.cpus}  tmp_candidate.circular_BSJ_flank.fa candidate_circRNA_BSJ_flank \n      rm temp* \n      rm tmp*\n      \n      \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "RASH",
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/RASH",
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "RASH",
                "uri": "https://bio.tools/RASH",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Mathematics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Maths"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3778",
                                    "term": "Text annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Essential dynamics"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "PCA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Principal modes"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "ED"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "a Web-first format for HTML-based scholarly articles.\n\nResearch Articles in Simplified HTML (RASH) Framework includes a markup language defined as a subset of HTML+RDF for writing scientific articles, and related tools to convert it into different formats, to extract data from it, etc.\n\nHow to cite: Peroni, S., Osborne, F., Di Iorio, A., Nuzzolese, A. G., Poggi, F., Vitali, F., Motta, E. (2017). Research Articles in Simplified HTML: a Web-first format for HTML-based scholarly articles. PeerJ Computer Science 3: e132. e2513. DOI: https://doi.org/10.7717/peerj-cs.132.\n\n# rash-check.sh - fully check RASH documents.\n\nThe odt2rash.jar executable converts an ODT file into the RASH format.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Research Articles Simplified HTML', 'SAVE-SD'",
                "homepage": "https://w3id.org/people/essepuntato/papers/rash-peerj2016.html"
            },
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "Bed_for_recount",
            "genomefile",
            "faifile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Candidate_circRNA_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "Recount_generate_BSJ_Bamfile": {
        "name_process": "Recount_generate_BSJ_Bamfile",
        "string_process": " process Recount_generate_BSJ_Bamfile {\n      tag \"$sampleID\"\n      input:\n            file index from Candidate_circRNA_index.collect()\n            tuple val(sampleID),  file(query_file) from Fastpfiles_recount\n      output:\n            tuple val(sampleID),file(\"${sampleID}_denovo.bam\") into BSJ_mapping_bamfile\n            file \"fileforwaiting.txt\" into Wait_for_hisat2\n      when:\n            run_multi_tools\n      script:\n       if(params.singleEnd){\n            \"\"\"\n             hisat2 -p ${task.cpus} -t -k 1 -x candidate_circRNA_BSJ_flank -U ${query_file} | samtools view -bS  -q 10 -  > ${sampleID}_denovo.bam \n             touch fileforwaiting.txt\n            \"\"\"\n        }else{\n            \"\"\"\n            hisat2 -p ${task.cpus} -t -k 1 -x candidate_circRNA_BSJ_flank -1 ${query_file[0]}  -2 ${query_file[1]} | samtools view -bS -q 10 - > ${sampleID}_denovo.bam \n            touch fileforwaiting.txt\n            \"\"\"\n        }\n    }",
        "nb_lignes_process": 21,
        "string_script": "       if(params.singleEnd){\n            \"\"\"\n             hisat2 -p ${task.cpus} -t -k 1 -x candidate_circRNA_BSJ_flank -U ${query_file} | samtools view -bS  -q 10 -  > ${sampleID}_denovo.bam \n             touch fileforwaiting.txt\n            \"\"\"\n        }else{\n            \"\"\"\n            hisat2 -p ${task.cpus} -t -k 1 -x candidate_circRNA_BSJ_flank -1 ${query_file[0]}  -2 ${query_file[1]} | samtools view -bS -q 10 - > ${sampleID}_denovo.bam \n            touch fileforwaiting.txt\n            \"\"\"\n        }",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "Candidate_circRNA_index",
            "Fastpfiles_recount"
        ],
        "nb_inputs": 2,
        "outputs": [
            "BSJ_mapping_bamfile",
            "Wait_for_hisat2"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\""
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "Recount_generate_genome_Bamfile": {
        "name_process": "Recount_generate_genome_Bamfile",
        "string_process": " process Recount_generate_genome_Bamfile {\n      tag \"$sampleID\"\n      input:\n            file index from hisat2_index.collect()\n            tuple val(sampleID),  file(query_file) from Fastpfiles_hisat\n            file filewait from Wait_for_hisat2\n      output:\n            tuple val(sampleID),file(\"${sampleID}.bam\") into Genome_remapping_bamfile\n      when:\n            run_multi_tools\n      script:\n      index_base = index[0].toString() - ~/.\\d.ht2/\n       if(params.singleEnd){\n            \"\"\"\n             hisat2 -p ${task.cpus} -t -k 1 -x ${index_base} -U ${query_file} | samtools view -bS  -q 10 -  > ${sampleID}.bam \n            \"\"\"\n        }else{\n            \"\"\"\n            hisat2 -p ${task.cpus} -t -k 1 -x ${index_base} -1 ${query_file[0]}  -2 ${query_file[1]} | samtools view -bS -q 10 - > ${sampleID}.bam \n            \"\"\"\n        }\n    }",
        "nb_lignes_process": 20,
        "string_script": "      index_base = index[0].toString() - ~/.\\d.ht2/\n       if(params.singleEnd){\n            \"\"\"\n             hisat2 -p ${task.cpus} -t -k 1 -x ${index_base} -U ${query_file} | samtools view -bS  -q 10 -  > ${sampleID}.bam \n            \"\"\"\n        }else{\n            \"\"\"\n            hisat2 -p ${task.cpus} -t -k 1 -x ${index_base} -1 ${query_file[0]}  -2 ${query_file[1]} | samtools view -bS -q 10 - > ${sampleID}.bam \n            \"\"\"\n        }",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "hisat2_index",
            "Fastpfiles_hisat",
            "Wait_for_hisat2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Genome_remapping_bamfile"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\""
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "Recount_estimate_step": {
        "name_process": "Recount_estimate_step",
        "string_process": "\nprocess Recount_estimate_step{\n\n        publishDir \"${params.outdir}/QuantCirc\", pattern: \"*.count\", mode: 'link', overwrite: true\n        input:\n            tuple val(sampleID), file(bsjBamfile),file(genomeBamfile) from RecountBamfiles\n\n            \n\n        output:\n            tuple val(sampleID),file(\"${sampleID}.count\") into Single_sample_recount\n\n\n        script:\n        \"\"\"\n        java -jar ${baseDir}/bin/circpipetools.jar -recount -bsjbam ${bsjBamfile} -allBam ${genomeBamfile} -out ${sampleID}.count\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        java -jar ${baseDir}/bin/circpipetools.jar -recount -bsjbam ${bsjBamfile} -allBam ${genomeBamfile} -out ${sampleID}.count\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "RecountBamfiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Single_sample_recount"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/QuantCirc\", pattern: \"*.count\", mode: 'link', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "Recount_results_combine": {
        "name_process": "Recount_results_combine",
        "string_process": " process Recount_results_combine{\n\n        publishDir \"${params.outdir}/Combination_Matrix\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n\n        input:\n            file (query_file) from Single_sample_recount.collect()\n         \n\n        output:\n            file (\"multitools.exp.matrix\") into (Matrix_for_circos, Plot_merge, PlotMergeCor)\n        \n        when:\n            run_multi_tools\n\n        script:\n            \"\"\"\n            java -jar ${baseDir}/bin/circpipetools.jar -MM -dir ./ -suffix .count -out multitools.exp.matrix\n            \"\"\"\n    }",
        "nb_lignes_process": 17,
        "string_script": "            \"\"\"\n            java -jar ${baseDir}/bin/circpipetools.jar -MM -dir ./ -suffix .count -out multitools.exp.matrix\n            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Single_sample_recount"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/Combination_Matrix\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "built_refmapsplice_reference_by_split": {
        "name_process": "built_refmapsplice_reference_by_split",
        "string_process": " process built_refmapsplice_reference_by_split {\n                storeDir \"${params.outdir}/reference_genome/split\"\n                input:\n                file genomefile\n                output: \n                file \"split\" into Refmapsplice\n                shell:\n                \"\"\"\n                mkdir split \n                perl ${baseDir}/bin/split_fasta_by_chromsome.pl ${genomefile} split\n                \"\"\"\n            }",
        "nb_lignes_process": 10,
        "string_script": "                \"\"\"\n                mkdir split \n                perl ${baseDir}/bin/split_fasta_by_chromsome.pl ${genomefile} split\n                \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomefile"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Refmapsplice"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "storeDir \"${params.outdir}/reference_genome/split\""
        ],
        "when": "",
        "stub": ""
    },
    "makeSTARindex": {
        "name_process": "makeSTARindex",
        "string_process": " process makeSTARindex {\n            storeDir \"${params.outdir}/reference_genome\"\n\n            input:\n            file genomefile\n            file gtffile\n\n            output:\n            file \"starindex\" into starindex\n\n            script:\n            \"\"\"\n            mkdir starindex\n            STAR \\\n                --runMode genomeGenerate \\\n                --runThreadN ${task.cpus} \\\n                --sjdbGTFfile ${gtffile} \\\n                --genomeDir starindex/ \\\n                --genomeFastaFiles ${genomefile} \\\n                --sjdbOverhang 149\n            \"\"\"\n        }",
        "nb_lignes_process": 20,
        "string_script": "            \"\"\"\n            mkdir starindex\n            STAR \\\n                --runMode genomeGenerate \\\n                --runThreadN ${task.cpus} \\\n                --sjdbGTFfile ${gtffile} \\\n                --genomeDir starindex/ \\\n                --genomeFastaFiles ${genomefile} \\\n                --sjdbOverhang 149\n            \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "genomefile",
            "gtffile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "starindex"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "storeDir \"${params.outdir}/reference_genome\""
        ],
        "when": "",
        "stub": ""
    },
    "makeBowtie2index": {
        "name_process": "makeBowtie2index",
        "string_process": " process makeBowtie2index {\n             storeDir \"${params.outdir}/reference_genome\"\n\n            input:\n            file genomefile\n\n\n            output:\n            file \"*.bt2\" into Bowtie2index, Bowtie2index_fc\n\n            script:\n            \"\"\"\n            bowtie2-build -f ${genomefile} genome\n            \"\"\"\n            \n        }",
        "nb_lignes_process": 14,
        "string_script": "            \"\"\"\n            bowtie2-build -f ${genomefile} genome\n            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomefile"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Bowtie2index",
            "Bowtie2index_fc"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "storeDir \"${params.outdir}/reference_genome\""
        ],
        "when": "",
        "stub": ""
    },
    "makeBowtieindex": {
        "name_process": "makeBowtieindex",
        "string_process": " process makeBowtieindex {\n            storeDir \"${params.outdir}/reference_genome\"\n\n            input:\n            file genomefile\n\n            output:\n            file \"*.ebwt\" into Bowtieindex\n\n            script:\n            \"\"\"\n            bowtie-build ${genomefile} genome\n            \"\"\"\n        }",
        "nb_lignes_process": 12,
        "string_script": "            \"\"\"\n            bowtie-build ${genomefile} genome\n            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Bowtie"
        ],
        "tools_url": [
            "https://bio.tools/bowtie"
        ],
        "tools_dico": [
            {
                "name": "Bowtie",
                "uri": "https://bio.tools/bowtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            },
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Bowtie is an ultrafast, memory-efficient short read aligner.",
                "homepage": "http://bowtie-bio.sourceforge.net/index.shtml"
            }
        ],
        "inputs": [
            "genomefile"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Bowtieindex"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "storeDir \"${params.outdir}/reference_genome\""
        ],
        "when": "",
        "stub": ""
    },
    "makeBWAindex": {
        "name_process": "makeBWAindex",
        "string_process": " process makeBWAindex {\n            storeDir \"${params.outdir}/reference_genome\"\n\n            input:\n            file genomefile\n\n\n            output:\n            file \"*.{ann,amb,pac,bwt,sa}\" into bwaindex\n\n            script:\n            \"\"\"\n             bwa index -p genome ${genomefile} \n            \"\"\"\n            bowtie_run_index=\"genome\"\n        }",
        "nb_lignes_process": 14,
        "string_script": "            \"\"\"\n             bwa index -p genome ${genomefile} \n            \"\"\"\n            bowtie_run_index=\"genome\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "genomefile"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bwaindex"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "storeDir \"${params.outdir}/reference_genome\""
        ],
        "when": "",
        "stub": ""
    },
    "makeSegemehlindex": {
        "name_process": "makeSegemehlindex",
        "string_process": " process makeSegemehlindex {\n            storeDir \"${params.outdir}/reference_genome\"\n\n            input:\n            file genomefile\n            file segdir\n\n            output:\n            file \"genome.idx\" into Segindex\n\n            script:\n            \"\"\"\n        segemehl.x -d ${genomefile} -x genome.idx\n        \"\"\"\n        }",
        "nb_lignes_process": 13,
        "string_script": "            \"\"\"\n        segemehl.x -d ${genomefile} -x genome.idx\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomefile",
            "segdir"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Segindex"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "storeDir \"${params.outdir}/reference_genome\""
        ],
        "when": "",
        "stub": ""
    },
    "RUN_FASTP": {
        "name_process": "RUN_FASTP",
        "string_process": " process RUN_FASTP{\n        tag \"$sampleID\"\n        publishDir \"${params.outdir}/QC\", mode: 'copy', pattern: \"*_fastpreport.html\", overwrite: true\n\n        input:\n        tuple val(sampleID),  file(query_file) from Read_pairs_fastp\n\n        output:\n        tuple val(sampleID),  file ('unzip_fastp_*') into (Fastqfor_swhich,Fastpfiles_mapsplice,Fastpfiles_bwa,Fastpfiles_star,Fastpfiles_segemehl,Fastpfiles_bowtie2,Fastpfiles_recount,Fastpfiles_for_sailfish,Fastpfiles_hisat)\n        file ('*.html') into fastp_for_waiting\n        file ('*_fastp.json') into Fastp_for_multiqc\n\n       \n        \n        script:\n        if(params.singleEnd){\n            \"\"\"\n            fastp \\\n            -i ${query_file} \\\n            -o unzip_fastp_${sampleID}.fq \\\n            -h ${sampleID}_fastpreport.html \\\n            -j ${sampleID}_fastp.json\n            \"\"\"\n        }else{\n            \"\"\"\n            fastp \\\n            -i ${query_file[0]} \\\n            -I ${query_file[1]} \\\n            -o unzip_fastp_${sampleID}_1.fq \\\n            -O unzip_fastp_${sampleID}_2.fq \\\n            -h ${sampleID}_fastpreport.html \\\n            -j ${sampleID}_fastp.json \n            \"\"\"\n        }\n\n\n    }",
        "nb_lignes_process": 35,
        "string_script": "        if(params.singleEnd){\n            \"\"\"\n            fastp \\\n            -i ${query_file} \\\n            -o unzip_fastp_${sampleID}.fq \\\n            -h ${sampleID}_fastpreport.html \\\n            -j ${sampleID}_fastp.json\n            \"\"\"\n        }else{\n            \"\"\"\n            fastp \\\n            -i ${query_file[0]} \\\n            -I ${query_file[1]} \\\n            -o unzip_fastp_${sampleID}_1.fq \\\n            -O unzip_fastp_${sampleID}_2.fq \\\n            -h ${sampleID}_fastpreport.html \\\n            -j ${sampleID}_fastp.json \n            \"\"\"\n        }",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "Read_pairs_fastp"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "fastp_for_waiting",
            "Fastp_for_multiqc"
        ],
        "nb_outputs": 3,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/QC\", mode: 'copy', pattern: \"*_fastpreport.html\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_STAR": {
        "name_process": "RUN_STAR",
        "string_process": " process RUN_STAR{\n        tag \"$sampleID\"\n        publishDir \"${params.outdir}/Alignment/STAR\", mode: 'link', overwrite: true\n\n        input:\n        tuple val(sampleID),  file(query_file) from Fastpfiles_star\n        file index from starindex.collect()\n\n        output:\n        tuple val(sampleID),  file ('*.junction') into starfiles\n        file ('*.out') into Star_multiqc\n\n\n\n        shell:\n        if(params.skip_fastp){\n                if(params.singleEnd){\n                \"\"\"\n                STAR \\\n                --runThreadN ${task.cpus} \\\n                --chimSegmentMin 10 \\\n                --genomeDir ${star_run_index} \\\n                --readFilesIn ${query_file} \\\n                --readFilesCommand zcat \\\n                --outFileNamePrefix star_${sampleID}_ \\\n                --outSAMtype None\n                \"\"\"\n            }else{\n                \"\"\"\n                STAR \\\n                --runThreadN ${task.cpus} \\\n                --chimSegmentMin 10 \\\n                --genomeDir ${star_run_index} \\\n                --readFilesCommand zcat \\\n                --readFilesIn ${query_file[0]} ${query_file[1]} \\\n                --outFileNamePrefix star_${sampleID}_ \\\n                --outSAMtype None\n                \"\"\"\n            }\n        }else{\n            if(params.singleEnd){\n                \"\"\"\n                STAR \\\n                --runThreadN ${task.cpus} \\\n                --chimSegmentMin 10 \\\n                --genomeDir ${star_run_index} \\\n                --readFilesIn ${query_file} \\\n                --outFileNamePrefix star_${sampleID}_ \\\n                --outSAMtype None\n                \"\"\"\n            }else{\n                \"\"\"\n                STAR \\\n                --runThreadN ${task.cpus} \\\n                --chimSegmentMin 10 \\\n                --genomeDir ${star_run_index} \\\n                --readFilesIn ${query_file[0]} ${query_file[1]} \\\n                --outFileNamePrefix star_${sampleID}_ \\\n                --outSAMtype None\n                \"\"\"\n            }   \n        }\n        \n\n    }",
        "nb_lignes_process": 63,
        "string_script": "        if(params.skip_fastp){\n                if(params.singleEnd){\n                \"\"\"\n                STAR \\\n                --runThreadN ${task.cpus} \\\n                --chimSegmentMin 10 \\\n                --genomeDir ${star_run_index} \\\n                --readFilesIn ${query_file} \\\n                --readFilesCommand zcat \\\n                --outFileNamePrefix star_${sampleID}_ \\\n                --outSAMtype None\n                \"\"\"\n            }else{\n                \"\"\"\n                STAR \\\n                --runThreadN ${task.cpus} \\\n                --chimSegmentMin 10 \\\n                --genomeDir ${star_run_index} \\\n                --readFilesCommand zcat \\\n                --readFilesIn ${query_file[0]} ${query_file[1]} \\\n                --outFileNamePrefix star_${sampleID}_ \\\n                --outSAMtype None\n                \"\"\"\n            }\n        }else{\n            if(params.singleEnd){\n                \"\"\"\n                STAR \\\n                --runThreadN ${task.cpus} \\\n                --chimSegmentMin 10 \\\n                --genomeDir ${star_run_index} \\\n                --readFilesIn ${query_file} \\\n                --outFileNamePrefix star_${sampleID}_ \\\n                --outSAMtype None\n                \"\"\"\n            }else{\n                \"\"\"\n                STAR \\\n                --runThreadN ${task.cpus} \\\n                --chimSegmentMin 10 \\\n                --genomeDir ${star_run_index} \\\n                --readFilesIn ${query_file[0]} ${query_file[1]} \\\n                --outFileNamePrefix star_${sampleID}_ \\\n                --outSAMtype None\n                \"\"\"\n            }   \n        }",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "Fastpfiles_star",
            "starindex"
        ],
        "nb_inputs": 2,
        "outputs": [
            "starfiles",
            "Star_multiqc"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/Alignment/STAR\", mode: 'link', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_Circexplorer2": {
        "name_process": "RUN_Circexplorer2",
        "string_process": " process RUN_Circexplorer2{\n        tag \"$sampleID\"\n        publishDir \"${params.outdir}/circRNA_Identification/CIRCexplorer2\", mode: 'copy', overwrite: true\n\n        input:\n        tuple val(sampleID),  file (query_file) from starfiles\n        file annotationfile\n        file genomefile\n\n        output:\n        tuple val(sampleID),  file ('*known.txt') into circexplorer2files\n\n\n\n        script:\n        \"\"\"\n            CIRCexplorer2 \\\n            parse -t STAR ${query_file} \\\n            > CIRCexplorer2_parse_${sampleID}.log\n\n            CIRCexplorer2 \\\n            annotate -r ${annotationfile} \\\n            -g ${genomefile} \\\n            -b back_spliced_junction.bed \\\n            -o CIRCexplorer2_${sampleID}_circularRNA_known.txt \\\n            > CIRCexplorer2_annotate_${sampleID}.log\n            \"\"\"\n    }",
        "nb_lignes_process": 26,
        "string_script": "        \"\"\"\n            CIRCexplorer2 \\\n            parse -t STAR ${query_file} \\\n            > CIRCexplorer2_parse_${sampleID}.log\n\n            CIRCexplorer2 \\\n            annotate -r ${annotationfile} \\\n            -g ${genomefile} \\\n            -b back_spliced_junction.bed \\\n            -o CIRCexplorer2_${sampleID}_circularRNA_known.txt \\\n            > CIRCexplorer2_annotate_${sampleID}.log\n            \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "CIRCexplorer2",
            "Parseq",
            "annotate"
        ],
        "tools_url": [
            "https://bio.tools/CIRCexplorer2",
            "https://bio.tools/parseq",
            "https://bio.tools/annotate"
        ],
        "tools_dico": [
            {
                "name": "CIRCexplorer2",
                "uri": "https://bio.tools/CIRCexplorer2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Genome-wide annotation of circRNAs and their alternative back-splicing/splicing.",
                "homepage": "https://circexplorer2.readthedocs.io/en/latest/"
            },
            {
                "name": "Parseq",
                "uri": "https://bio.tools/parseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0438",
                                    "term": "Transcriptional regulatory element prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0438",
                                    "term": "Regulatory element prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0438",
                                    "term": "Transcription regulatory element prediction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Statistical approach for transcription landscape reconstruction at a basepair resolution from RNA Seq read counts.",
                "homepage": "http://www.lcqb.upmc.fr/parseq/"
            },
            {
                "name": "annotate",
                "uri": "https://bio.tools/annotate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1276",
                                "term": "Nucleic acid features"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2080",
                                "term": "Database search results"
                            }
                        ]
                    }
                ],
                "description": "Using R enviroments for annotation.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/annotate.html"
            }
        ],
        "inputs": [
            "starfiles",
            "annotationfile",
            "genomefile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "circexplorer2files"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/circRNA_Identification/CIRCexplorer2\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_Circexplorer2_Bed": {
        "name_process": "RUN_Circexplorer2_Bed",
        "string_process": " process RUN_Circexplorer2_Bed{\n        tag \"$sampleID\"\n        publishDir \"${params.outdir}/circRNA_Identification/CIRCexplorer2\", mode: 'copy', pattern: \"*candidates.bed\", overwrite: true\n\n        input:\n        tuple val(sampleID),  file (query_file) from circexplorer2files\n        \n\n        output:\n        file ('*candidates.bed') into Modify_circexplorer2\n        val (sampleID) into Modify_circexplorer2_id\n\n\n\n        shell :\n        '''\n        if [ $((`cat !{query_file} | wc -l`)) == 0 ];then\n        touch !{sampleID}_Modify_circexplorer2.candidates.bed\n        else\n        grep circ !{query_file} \\\n        | grep -v chrM \\\n        | awk '{print $1 \"\\t\" $2 \"\\t\" $3 \"\\t\" \"circexplorer2\" \"\\t\" $13 \"\\t\" $6}' \\\n        > !{sampleID}_Modify_circexplorer2.temp.bed\n        \n        cp !{sampleID}_Modify_circexplorer2.temp.bed circexplorer2_!{sampleID}.candidates.bed\n        fi\n        '''\n    }",
        "nb_lignes_process": 26,
        "string_script": "        '''\n        if [ $((`cat !{query_file} | wc -l`)) == 0 ];then\n        touch !{sampleID}_Modify_circexplorer2.candidates.bed\n        else\n        grep circ !{query_file} \\\n        | grep -v chrM \\\n        | awk '{print $1 \"\\t\" $2 \"\\t\" $3 \"\\t\" \"circexplorer2\" \"\\t\" $13 \"\\t\" $6}' \\\n        > !{sampleID}_Modify_circexplorer2.temp.bed\n        \n        cp !{sampleID}_Modify_circexplorer2.temp.bed circexplorer2_!{sampleID}.candidates.bed\n        fi\n        '''",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "circexplorer2files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Modify_circexplorer2",
            "Modify_circexplorer2_id"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/circRNA_Identification/CIRCexplorer2\", mode: 'copy', pattern: \"*candidates.bed\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_Circexplorer2_Matrix": {
        "name_process": "RUN_Circexplorer2_Matrix",
        "string_process": " process RUN_Circexplorer2_Matrix{\n        publishDir \"${params.outdir}/circRNA_Identification/CIRCexplorer2\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n\n        input:\n        file (query_file) from Modify_circexplorer2.collect()\n        file gtffile\n\n        output:\n        file ('circexplorer2_merge.matrix') into (Output_circexplorer2,Plot_circexplorer2,Plot_circexplorer2_cor,Merge_circexplorer2)\n        file ('Name_circexplorer2.txt') into Name_circexplorer2\n\n        shell :\n        '''\n\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o circexplorer2 -sup 5 -merge\n        mv circexplorer2_merge.bed circexplorer2_merge.matrix\n\n        # remove non samplename string from matrix header \n        sed -i 's/circexplorer2_//g' circexplorer2_merge.matrix\n        sed -i 's/.candidates.bed//g' circexplorer2_merge.matrix\n\n\n        echo -e \"circexplorer2\" > Name_circexplorer2.txt\n        '''\n    }",
        "nb_lignes_process": 24,
        "string_script": "        '''\n\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o circexplorer2 -sup 5 -merge\n        mv circexplorer2_merge.bed circexplorer2_merge.matrix\n\n        # remove non samplename string from matrix header \n        sed -i 's/circexplorer2_//g' circexplorer2_merge.matrix\n        sed -i 's/.candidates.bed//g' circexplorer2_merge.matrix\n\n\n        echo -e \"circexplorer2\" > Name_circexplorer2.txt\n        '''",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Modify_circexplorer2",
            "gtffile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "",
            "Name_circexplorer2"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/circRNA_Identification/CIRCexplorer2\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "BWA_and_CIRI": {
        "name_process": "BWA_and_CIRI",
        "string_process": " process BWA_and_CIRI{\n        tag \"$sampleID\"\n        publishDir \"${params.outdir}/circRNA_Identification/CIRI\", pattern: \"*.txt\",mode: 'copy', overwrite: true\n\n        input:\n        tuple val(sampleID),  file (query_file) from Fastpfiles_bwa\n        file index from bwaindex.collect()\n        file genomefile\n        file gtffile\n\n\n        output:\n        tuple val(sampleID),  file ('*.txt') into cirifiles\n\n        shell:\n        \n        if(params.singleEnd){\n            \"\"\"\n           bwa mem -t ${task.cpus} -T 19 -M -R \"@RG\\\\tID:fastp_${sampleID}\\\\tPL:PGM\\\\tLB:noLB\\\\tSM:fastp_${sampleID}\" ${bowtie_run_index} ${query_file[0]} > ${sampleID}.sam \n\n\n            CIRI2.pl \\\n            -T 10 \\\n            -F ${genomefile} \\\n            -A ${gtffile} \\\n            -G CIRI_${sampleID}.log \\\n            -I ${sampleID}.sam \\\n            -O CIRI_${sampleID}.txt \\\n            > CIRI_${sampleID}_detail.log\n\n           \n\n\n             rm ${sampleID}.sam\n\n            \"\"\"\n        }else{\n            \"\"\"\n    \n            bwa mem -t ${task.cpus} -T 19 -M -R \"@RG\\\\tID:fastp_${sampleID}\\\\tPL:PGM\\\\tLB:noLB\\\\tSM:fastp_${sampleID}\" ${bowtie_run_index} ${query_file[0]} ${query_file[1]} > ${sampleID}.sam \n            CIRI2.pl \\\n            -T 10 \\\n            -F ${genomefile}  \\\n            -A ${gtffile} \\\n            -G CIRI_${sampleID}.log \\\n            -I ${sampleID}.sam \\\n            -O CIRI_${sampleID}.txt \\\n            > CIRI_${sampleID}_detail.log\n\n             # bwa sam to bam file \n           \n            rm ${sampleID}.sam\n            \"\"\"\n        }\n\n    }",
        "nb_lignes_process": 54,
        "string_script": "        if(params.singleEnd){\n            \"\"\"\n           bwa mem -t ${task.cpus} -T 19 -M -R \"@RG\\\\tID:fastp_${sampleID}\\\\tPL:PGM\\\\tLB:noLB\\\\tSM:fastp_${sampleID}\" ${bowtie_run_index} ${query_file[0]} > ${sampleID}.sam \n\n\n            CIRI2.pl \\\n            -T 10 \\\n            -F ${genomefile} \\\n            -A ${gtffile} \\\n            -G CIRI_${sampleID}.log \\\n            -I ${sampleID}.sam \\\n            -O CIRI_${sampleID}.txt \\\n            > CIRI_${sampleID}_detail.log\n\n           \n\n\n             rm ${sampleID}.sam\n\n            \"\"\"\n        }else{\n            \"\"\"\n    \n            bwa mem -t ${task.cpus} -T 19 -M -R \"@RG\\\\tID:fastp_${sampleID}\\\\tPL:PGM\\\\tLB:noLB\\\\tSM:fastp_${sampleID}\" ${bowtie_run_index} ${query_file[0]} ${query_file[1]} > ${sampleID}.sam \n            CIRI2.pl \\\n            -T 10 \\\n            -F ${genomefile}  \\\n            -A ${gtffile} \\\n            -G CIRI_${sampleID}.log \\\n            -I ${sampleID}.sam \\\n            -O CIRI_${sampleID}.txt \\\n            > CIRI_${sampleID}_detail.log\n\n             # bwa sam to bam file \n           \n            rm ${sampleID}.sam\n            \"\"\"\n        }",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "Fastpfiles_bwa",
            "bwaindex",
            "genomefile",
            "gtffile"
        ],
        "nb_inputs": 4,
        "outputs": [
            "cirifiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/circRNA_Identification/CIRI\", pattern: \"*.txt\",mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "CIRI_BED": {
        "name_process": "CIRI_BED",
        "string_process": " process CIRI_BED{\n        tag \"$sampleID\"\n        publishDir \"${params.outdir}/circRNA_Identification/CIRI\", mode: 'copy', pattern: \"*candidates.bed\", overwrite: true\n\n        input:\n        tuple val(sampleID),  file (query_file) from cirifiles\n        \n\n        output:\n        file ('*candidates.bed') into Modify_ciri\n\n        when:\n        run_ciri\n        shell :\n        '''\n        # conver to bed file and be cautious that convert 1-based coordinate to 0-based \n            if [ $((`cat !{query_file} | wc -l`)) == 1 ];then\n            touch !{sampleID}_modify_ciri.candidates.bed\n            else\n            cat !{query_file} \\\n            | sed -e '1d' \\\n            | grep -v chrM \\\n            | awk '{print $2 \"\\t\" $3-1 \"\\t\" $4 \"\\t\" \"ciri\" \"\\t\" $5 \"\\t\" $11}' \\\n            > !{sampleID}_modify_ciri.temp.bed\n            \n            cp !{sampleID}_modify_ciri.temp.bed ciri_!{sampleID}.candidates.bed\n            fi\n            '''\n    }",
        "nb_lignes_process": 27,
        "string_script": "        '''\n        # conver to bed file and be cautious that convert 1-based coordinate to 0-based \n            if [ $((`cat !{query_file} | wc -l`)) == 1 ];then\n            touch !{sampleID}_modify_ciri.candidates.bed\n            else\n            cat !{query_file} \\\n            | sed -e '1d' \\\n            | grep -v chrM \\\n            | awk '{print $2 \"\\t\" $3-1 \"\\t\" $4 \"\\t\" \"ciri\" \"\\t\" $5 \"\\t\" $11}' \\\n            > !{sampleID}_modify_ciri.temp.bed\n            \n            cp !{sampleID}_modify_ciri.temp.bed ciri_!{sampleID}.candidates.bed\n            fi\n            '''",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cirifiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Modify_ciri"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/circRNA_Identification/CIRI\", mode: 'copy', pattern: \"*candidates.bed\", overwrite: true"
        ],
        "when": "run_ciri",
        "stub": ""
    },
    "CIRI_Matrix": {
        "name_process": "CIRI_Matrix",
        "string_process": " process CIRI_Matrix{\n\n        publishDir \"${params.outdir}/circRNA_Identification/CIRI\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n\n        input:\n        file (query_file) from Modify_ciri.collect()\n        file gtffile\n\n\n        output:\n        file ('ciri_merge.matrix') into (Output_ciri,Plot_ciri_cor,Plot_ciri,Merge_ciri)\n        file ('Name_ciri.txt') into Name_ciri\n\n\n        shell :\n        '''\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o ciri -sup 5 -merge\n        mv ciri_merge.bed ciri_merge.matrix\n        # annotate circRNA with GTFs\n        # java -jar !{baseDir}/bin/circpipetools.jar -i ciri_merge.matrix -o annoted_ -gtf !{gtffile} -uniq\n\n        sed -i 's/ciri_//g' ciri_merge.matrix\n        sed -i 's/.candidates.bed//g' ciri_merge.matrix\n\n        #for what \n        echo -e \"ciri\" > Name_ciri.txt\n        '''\n    }",
        "nb_lignes_process": 27,
        "string_script": "        '''\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o ciri -sup 5 -merge\n        mv ciri_merge.bed ciri_merge.matrix\n        # annotate circRNA with GTFs\n        # java -jar !{baseDir}/bin/circpipetools.jar -i ciri_merge.matrix -o annoted_ -gtf !{gtffile} -uniq\n\n        sed -i 's/ciri_//g' ciri_merge.matrix\n        sed -i 's/.candidates.bed//g' ciri_merge.matrix\n\n        #for what \n        echo -e \"ciri\" > Name_ciri.txt\n        '''",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Modify_ciri",
            "gtffile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "",
            "Name_ciri"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/circRNA_Identification/CIRI\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_Mapsplice": {
        "name_process": "RUN_Mapsplice",
        "string_process": " process RUN_Mapsplice{\n        tag \"$sampleID\"\n        publishDir \"${params.outdir}/circRNA_Identification/Mapsplice\", mode: 'copy', overwrite: true\n\n        input:\n\n        tuple val(sampleID),  file (query_file) from Fastpfiles_mapsplice\n                                                                        \n        file gtffile\n        file refmapsplice_dir from Refmapsplice.collect()\n        file index from Bowtieindex.collect()\n\n        output:\n        tuple val(sampleID),  file('*') into Mapsplicefiles\n\n\n\n        shell:\n        if(params.singleEnd){\n            \"\"\"\n            source activate find_circ\n            gunzip -c ${query_file} > ${sampleID}.fastq\n\n            mapsplice.py \\\n            -p ${task.cpus} \\\n            -k 1 \\\n            --fusion-non-canonical \\\n            --qual-scale phred33 \\\n            --non-canonical-double-anchor \\\n            --min-fusion-distance 200 \\\n            -x ${bowtie_run_index} \\\n            --gene-gtf ${gtffile} \\\n            -c ${refmapsplice_dir} \\\n            -1 ${sampleID}.fastq \\\n\t        --bam \\\n            -o output_mapsplice_${sampleID} \n\n            rm *.fastq\n            \"\"\"\n        }else{\n            \"\"\"\n            source activate find_circ\n            gunzip -c ${query_file[0]} > ${sampleID}_1.fastq\n            gunzip -c ${query_file[1]} > ${sampleID}_2.fastq\n\n            mapsplice.py \\\n            -p ${task.cpus} \\\n            -k 1 \\\n            --fusion-non-canonical \\\n            --non-canonical-double-anchor \\\n            --min-fusion-distance 200 \\\n            -x ${bowtie_run_index} \\\n            --gene-gtf ${gtffile} \\\n            -c ${refmapsplice_dir} \\\n            -1 ${sampleID}_1.fastq \\\n            -2 ${sampleID}_2.fastq \\\n\t        --bam \\\n            -o output_mapsplice_${sampleID} \n\n            rm *.fastq\n            \"\"\"\n        }\n\n    }",
        "nb_lignes_process": 62,
        "string_script": "        if(params.singleEnd){\n            \"\"\"\n            source activate find_circ\n            gunzip -c ${query_file} > ${sampleID}.fastq\n\n            mapsplice.py \\\n            -p ${task.cpus} \\\n            -k 1 \\\n            --fusion-non-canonical \\\n            --qual-scale phred33 \\\n            --non-canonical-double-anchor \\\n            --min-fusion-distance 200 \\\n            -x ${bowtie_run_index} \\\n            --gene-gtf ${gtffile} \\\n            -c ${refmapsplice_dir} \\\n            -1 ${sampleID}.fastq \\\n\t        --bam \\\n            -o output_mapsplice_${sampleID} \n\n            rm *.fastq\n            \"\"\"\n        }else{\n            \"\"\"\n            source activate find_circ\n            gunzip -c ${query_file[0]} > ${sampleID}_1.fastq\n            gunzip -c ${query_file[1]} > ${sampleID}_2.fastq\n\n            mapsplice.py \\\n            -p ${task.cpus} \\\n            -k 1 \\\n            --fusion-non-canonical \\\n            --non-canonical-double-anchor \\\n            --min-fusion-distance 200 \\\n            -x ${bowtie_run_index} \\\n            --gene-gtf ${gtffile} \\\n            -c ${refmapsplice_dir} \\\n            -1 ${sampleID}_1.fastq \\\n            -2 ${sampleID}_2.fastq \\\n\t        --bam \\\n            -o output_mapsplice_${sampleID} \n\n            rm *.fastq\n            \"\"\"\n        }",
        "nb_lignes_script": 43,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Fastpfiles_mapsplice",
            "gtffile",
            "Refmapsplice",
            "Bowtieindex"
        ],
        "nb_inputs": 4,
        "outputs": [
            "Mapsplicefiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/circRNA_Identification/Mapsplice\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_Mapsplice_Bed": {
        "name_process": "RUN_Mapsplice_Bed",
        "string_process": " process RUN_Mapsplice_Bed{\n        tag \"$sampleID\"\n        publishDir \"${params.outdir}/circRNA_Identification/Mapsplice\", mode: 'copy', pattern: \"*candidates.bed\", overwrite: true\n\n        input:\n        tuple val(sampleID),  file (query_file) from Mapsplicefiles\n        file outdir\n        \n\n        output:\n        file ('*candidates.bed') into Modify_mapsplice\n\n\n\n        shell :\n        '''\n        if [ $((`cat output_mapsplice_!{sampleID}/circular_RNAs.txt | wc -l`)) == 0 ];then\n        touch !{sampleID}_modify_mapsplice.candidates.bed\n        else\n        cat output_mapsplice_!{sampleID}/circular_RNAs.txt \\\n        | awk '{print $6}' \\\n        | sed -e 's/.//' \\\n        > !{sampleID}_mapsplice_temp1.bed\n\n        cat output_mapsplice_!{sampleID}/circular_RNAs.txt \\\n        | awk '{print $1}' \\\n        | awk -F\"~\" '{print $2}' \\\n        > !{sampleID}_mapsplice_temp.bed\n\n        paste !{sampleID}_mapsplice_temp.bed !{sampleID}_mapsplice_temp1.bed output_mapsplice_!{sampleID}/circular_RNAs.txt \\\n        | grep -v chrM \\\n        | awk '{if($2==\"-\") print $1 \"\\t\" $4-1 \"\\t\" $5 \"\\t\" \"mapsplice\" \"\\t\" $7 \"\\t\" $2 ; else print $1 \"\\t\" $5-1 \"\\t\" $4 \"\\t\" \"mapsplice\" \"\\t\" $7 \"\\t\" $2 }' \\\n        > !{sampleID}_modify_mapsplice.temp.bed\n        \n        cp !{sampleID}_modify_mapsplice.temp.bed mapsplice_!{sampleID}.candidates.bed\n        fi\n        '''\n    }",
        "nb_lignes_process": 36,
        "string_script": "        '''\n        if [ $((`cat output_mapsplice_!{sampleID}/circular_RNAs.txt | wc -l`)) == 0 ];then\n        touch !{sampleID}_modify_mapsplice.candidates.bed\n        else\n        cat output_mapsplice_!{sampleID}/circular_RNAs.txt \\\n        | awk '{print $6}' \\\n        | sed -e 's/.//' \\\n        > !{sampleID}_mapsplice_temp1.bed\n\n        cat output_mapsplice_!{sampleID}/circular_RNAs.txt \\\n        | awk '{print $1}' \\\n        | awk -F\"~\" '{print $2}' \\\n        > !{sampleID}_mapsplice_temp.bed\n\n        paste !{sampleID}_mapsplice_temp.bed !{sampleID}_mapsplice_temp1.bed output_mapsplice_!{sampleID}/circular_RNAs.txt \\\n        | grep -v chrM \\\n        | awk '{if($2==\"-\") print $1 \"\\t\" $4-1 \"\\t\" $5 \"\\t\" \"mapsplice\" \"\\t\" $7 \"\\t\" $2 ; else print $1 \"\\t\" $5-1 \"\\t\" $4 \"\\t\" \"mapsplice\" \"\\t\" $7 \"\\t\" $2 }' \\\n        > !{sampleID}_modify_mapsplice.temp.bed\n        \n        cp !{sampleID}_modify_mapsplice.temp.bed mapsplice_!{sampleID}.candidates.bed\n        fi\n        '''",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Mapsplicefiles",
            "outdir"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Modify_mapsplice"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/circRNA_Identification/Mapsplice\", mode: 'copy', pattern: \"*candidates.bed\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_Mapsplice_Matrix": {
        "name_process": "RUN_Mapsplice_Matrix",
        "string_process": " process RUN_Mapsplice_Matrix{\n        publishDir \"${params.outdir}/circRNA_Identification/Mapsplice\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n\n        input:\n        file (query_file) from Modify_mapsplice.collect()\n        file gtffile\n\n        output:\n        file ('mapsplice_merge.matrix') into (Output_mapsplice,Plot_mapsplice,Plot_mapsplice_cor,Merge_mapsplice)\n        file ('Name_mapsplice.txt') into Name_mapsplice\n   \n\n\n        shell :\n        '''\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o mapsplice -sup 5 -merge\n        mv mapsplice_merge.bed mapsplice_merge.matrix\n       \n        sed -i 's/mapsplice_//g' mapsplice_merge.matrix\n        sed -i 's/.candidates.bed//g' mapsplice_merge.matrix\n        echo -e \"mapsplice\" > Name_mapsplice.txt\n        '''\n    }",
        "nb_lignes_process": 22,
        "string_script": "        '''\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o mapsplice -sup 5 -merge\n        mv mapsplice_merge.bed mapsplice_merge.matrix\n       \n        sed -i 's/mapsplice_//g' mapsplice_merge.matrix\n        sed -i 's/.candidates.bed//g' mapsplice_merge.matrix\n        echo -e \"mapsplice\" > Name_mapsplice.txt\n        '''",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Modify_mapsplice",
            "gtffile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "",
            "Name_mapsplice"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/circRNA_Identification/Mapsplice\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_Segemehl": {
        "name_process": "RUN_Segemehl",
        "string_process": " process RUN_Segemehl{\n                tag \"$sampleID\"\n                publishDir \"${params.outdir}/circRNA_Identification/Segemehl\", mode: 'copy', overwrite: true\n\n                input:\n                tuple val(sampleID),  file (query_file) from Fastpfiles_segemehl\n                file genomefile\n                file index from Segindex.collect()\n\n                output:\n                tuple val(sampleID),  file (\"segemehl_${sampleID}.circ.sum.bed\") into segemehlfiles\n\n                shell:\n                if(params.singleEnd){\n                    \"\"\"\n                        # step 1\n                    segemehl.x \\\n                    -t ${task.cpus} \\\n                    -d ${genomefile} \\\n                    -i ${index} \\\n                    -q ${query_file[0]} \\\n                    -S -o segemehl_${sampleID}.sam\n\n                    # step 2\n                    grep ';C;' segemehl_${sampleID}.sngl.bed  > segemehl_${sampleID}_circ_reads.bed\n\n                    # step 3\n\n                    haarz.x split -m 2 -q 1 \\\n                    -f segemehl_${sampleID}_circ_reads.bed > segemehl_${sampleID}.circ.sum.bed\n\n                    # remove sam file for reducing storage requirement \n\n                    rm segemehl_${sampleID}.sam\n\n                    \"\"\"\n                }else{\n                    \"\"\"\n                    # step 1\n                    segemehl.x \\\n                    -t ${task.cpus} \\\n                    -d ${genomefile} \\\n                    -i ${index} \\\n                    -q ${query_file[0]} -p ${query_file[1]}  \\\n                    -S -o segemehl_${sampleID}.sam\n\n                    # step 2\n                    grep ';C;' segemehl_${sampleID}.sngl.bed  > segemehl_${sampleID}_circ_reads.bed\n\n                    # step 3\n\n                    haarz.x split -m 2 -q 1\\\n                    -f segemehl_${sampleID}_circ_reads.bed > segemehl_${sampleID}.circ.sum.bed\n\n                    # remove sam file for reducing storage requirement \n\n                    rm segemehl_${sampleID}.sam\n\n                    \"\"\"\n                }\n\n            }",
        "nb_lignes_process": 60,
        "string_script": "                if(params.singleEnd){\n                    \"\"\"\n                        # step 1\n                    segemehl.x \\\n                    -t ${task.cpus} \\\n                    -d ${genomefile} \\\n                    -i ${index} \\\n                    -q ${query_file[0]} \\\n                    -S -o segemehl_${sampleID}.sam\n\n                    # step 2\n                    grep ';C;' segemehl_${sampleID}.sngl.bed  > segemehl_${sampleID}_circ_reads.bed\n\n                    # step 3\n\n                    haarz.x split -m 2 -q 1 \\\n                    -f segemehl_${sampleID}_circ_reads.bed > segemehl_${sampleID}.circ.sum.bed\n\n                    # remove sam file for reducing storage requirement \n\n                    rm segemehl_${sampleID}.sam\n\n                    \"\"\"\n                }else{\n                    \"\"\"\n                    # step 1\n                    segemehl.x \\\n                    -t ${task.cpus} \\\n                    -d ${genomefile} \\\n                    -i ${index} \\\n                    -q ${query_file[0]} -p ${query_file[1]}  \\\n                    -S -o segemehl_${sampleID}.sam\n\n                    # step 2\n                    grep ';C;' segemehl_${sampleID}.sngl.bed  > segemehl_${sampleID}_circ_reads.bed\n\n                    # step 3\n\n                    haarz.x split -m 2 -q 1\\\n                    -f segemehl_${sampleID}_circ_reads.bed > segemehl_${sampleID}.circ.sum.bed\n\n                    # remove sam file for reducing storage requirement \n\n                    rm segemehl_${sampleID}.sam\n\n                    \"\"\"\n                }",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Fastpfiles_segemehl",
            "genomefile",
            "Segindex"
        ],
        "nb_inputs": 3,
        "outputs": [
            "segemehlfiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/circRNA_Identification/Segemehl\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_Segemehl_Bed": {
        "name_process": "RUN_Segemehl_Bed",
        "string_process": " process RUN_Segemehl_Bed{\n            tag \"$sampleID\"\n            publishDir \"${params.outdir}/circRNA_Identification/Segemehl\", mode: 'copy', pattern:\"*candidates.bed\", overwrite: true\n\n            input:\n            set sampleID , file ( query_file ) from segemehlfiles\n            \n\n            output:\n            file ('*candidates.bed') into Modify_segemehl\n\n            shell :\n            '''\n            \n            awk 'NR > 1 {OFS=\"\\t\";print $1,$2,$3,\"segemehl\",$4,$6}' segemehl_!{sampleID}.circ.sum.bed> segemehl_!{sampleID}.candidates.bed\n            '''\n    }",
        "nb_lignes_process": 15,
        "string_script": "            '''\n            \n            awk 'NR > 1 {OFS=\"\\t\";print $1,$2,$3,\"segemehl\",$4,$6}' segemehl_!{sampleID}.circ.sum.bed> segemehl_!{sampleID}.candidates.bed\n            '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "segemehlfiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Modify_segemehl"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/circRNA_Identification/Segemehl\", mode: 'copy', pattern:\"*candidates.bed\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_Segemehl_Matrix": {
        "name_process": "RUN_Segemehl_Matrix",
        "string_process": " process RUN_Segemehl_Matrix{\n            publishDir \"${params.outdir}/circRNA_Identification/Segemehl\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n\n            input:\n            file (query_file) from Modify_segemehl.collect()\n            file gtffile\n\n            output:\n            file ('segemehl_merge.matrix') into (Output_segemehl,Plot_segemehl,Merge_segemehl,Plot_segemehl_cor)\n            file ('Name_segemehl.txt') into Name_segemehl\n    \n            shell :\n            '''\n            # merge sample into matrix \n            java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o segemehl -sup 5 -merge\n            mv segemehl_merge.bed segemehl_merge.matrix\n            sed -i 's/segemehl_//g' segemehl_merge.matrix\n            sed -i 's/.candidates.bed//g' segemehl_merge.matrix\n            echo -e \"segemehl\" > Name_segemehl.txt\n            '''\n    }",
        "nb_lignes_process": 19,
        "string_script": "            '''\n            # merge sample into matrix \n            java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o segemehl -sup 5 -merge\n            mv segemehl_merge.bed segemehl_merge.matrix\n            sed -i 's/segemehl_//g' segemehl_merge.matrix\n            sed -i 's/.candidates.bed//g' segemehl_merge.matrix\n            echo -e \"segemehl\" > Name_segemehl.txt\n            '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Modify_segemehl",
            "gtffile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "",
            "Name_segemehl"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/circRNA_Identification/Segemehl\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_BOWTIE2": {
        "name_process": "RUN_BOWTIE2",
        "string_process": " process RUN_BOWTIE2{\n        tag \"$sampleID\"\n        publishDir \"${params.outdir}/Alignment/Bowtie2\", pattern: \"*.log\", mode: 'link', overwrite: true\n\n        input:\n        tuple val(sampleID),file (query_file) from Fastpfiles_bowtie2\n        file index from Bowtie2index.collect()\n\n        output:\n        tuple val(sampleID), file ('bowtie2_unmapped_*') into Bowtie2files\n        tuple val(sampleID), file ('bowtie2_unmapped_*') into Bowtie2files_for_autocirc\n        file ('*.log') into Bowtie2_multiqc\n\n\n        shell:\n        if(params.singleEnd){\n            \"\"\"\n            bowtie2 \\\n            -p ${task.cpus} \\\n            --very-sensitive \\\n            --score-min=C,-15,0 \\\n            --mm \\\n            -x ${bowtie2_run_index} \\\n            -q \\\n            -U ${query_file} 2> bowtie2_${sampleID}.log \\\n            | samtools view -hbuS - \\\n            | samtools sort - > bowtie2_output_${sampleID}.bam\n\n            samtools \\\n            view -hf 4 bowtie2_output_${sampleID}.bam \\\n            | samtools view -Sb - \\\n            > bowtie2_unmapped_${sampleID}.bam\n            rm  bowtie2_output_${sampleID}.bam\n            \"\"\"\n        }else{\n            \"\"\"\n            bowtie2 \\\n            -p ${task.cpus} \\\n            --very-sensitive \\\n            --score-min=C,-15,0 \\\n            --mm \\\n            -x ${bowtie2_run_index} \\\n            -q \\\n            -1 ${query_file[0]} \\\n            -2 ${query_file[1]} 2> bowtie2_${sampleID}.log \\\n            | samtools view -hbuS - \\\n            | samtools sort - > bowtie2_output_${sampleID}.bam\n\n            samtools \\\n            view -hf 4 bowtie2_output_${sampleID}.bam \\\n            | samtools view -Sb - \\\n            > bowtie2_unmapped_${sampleID}.bam\n\n            rm  bowtie2_output_${sampleID}.bam\n            \"\"\"\n        }\n\n    }",
        "nb_lignes_process": 56,
        "string_script": "        if(params.singleEnd){\n            \"\"\"\n            bowtie2 \\\n            -p ${task.cpus} \\\n            --very-sensitive \\\n            --score-min=C,-15,0 \\\n            --mm \\\n            -x ${bowtie2_run_index} \\\n            -q \\\n            -U ${query_file} 2> bowtie2_${sampleID}.log \\\n            | samtools view -hbuS - \\\n            | samtools sort - > bowtie2_output_${sampleID}.bam\n\n            samtools \\\n            view -hf 4 bowtie2_output_${sampleID}.bam \\\n            | samtools view -Sb - \\\n            > bowtie2_unmapped_${sampleID}.bam\n            rm  bowtie2_output_${sampleID}.bam\n            \"\"\"\n        }else{\n            \"\"\"\n            bowtie2 \\\n            -p ${task.cpus} \\\n            --very-sensitive \\\n            --score-min=C,-15,0 \\\n            --mm \\\n            -x ${bowtie2_run_index} \\\n            -q \\\n            -1 ${query_file[0]} \\\n            -2 ${query_file[1]} 2> bowtie2_${sampleID}.log \\\n            | samtools view -hbuS - \\\n            | samtools sort - > bowtie2_output_${sampleID}.bam\n\n            samtools \\\n            view -hf 4 bowtie2_output_${sampleID}.bam \\\n            | samtools view -Sb - \\\n            > bowtie2_unmapped_${sampleID}.bam\n\n            rm  bowtie2_output_${sampleID}.bam\n            \"\"\"\n        }",
        "nb_lignes_script": 40,
        "language_script": "bash",
        "tools": [
            "Rbowtie2",
            "SAMtools",
            "iview"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2",
            "https://bio.tools/samtools",
            "https://bio.tools/iview"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "iview",
                "uri": "https://bio.tools/iview",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2275",
                            "term": "Molecular modelling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0128",
                            "term": "Protein interactions"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2814",
                            "term": "Protein structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Interactive HTML5 visualizer of protein-ligand complex.",
                "homepage": "http://istar.cse.cuhk.edu.hk/iview/"
            }
        ],
        "inputs": [
            "Fastpfiles_bowtie2",
            "Bowtie2index"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Bowtie2files",
            "Bowtie2files_for_autocirc",
            "Bowtie2_multiqc"
        ],
        "nb_outputs": 3,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/Alignment/Bowtie2\", pattern: \"*.log\", mode: 'link', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_Find_circ": {
        "name_process": "RUN_Find_circ",
        "string_process": " process RUN_Find_circ{\n        tag \"$sampleID\"\n        publishDir \"${params.outdir}/circRNA_Identification/Find_circ\", mode: 'copy', overwrite: true\n\n        input:\n        tuple val(sampleID), file (query_file) from Bowtie2files\n        file genomefile\n        file index from Bowtie2index_fc.collect()\n\n        output:\n        tuple val(sampleID),file ('*splice_sites.bed') into find_circfiles\n\n\n\n        shell:\n        \"\"\"     \n         source activate find_circ\n        unmapped2anchors.py ${query_file} \\\n        | gzip \\\n        > find_circ_${sampleID}_anchors.qfa.gz\n        \n        bowtie2 \\\n            -p ${task.cpus} \\\n            --reorder \\\n            --mm \\\n            --score-min=C,-15,0 \\\n            -q \\\n            -x ${bowtie2_run_index} \\\n            -U find_circ_${sampleID}_anchors.qfa.gz \\\n        | find_circ.py \\\n            -G ${genomefile} \\\n            -p ${sampleID}_ \\\n            -s find_circ_${sampleID}_stats.sites.log \\\n            -n find_circ \\\n            -R find_circ_${sampleID}_spliced_reads.fa \\\n            > find_circ_${sampleID}_splice_sites.bed   \n\n        # remove temp file for reduce the usage of the disk .\n        rm find_circ_${sampleID}_spliced_reads.fa \n        rm find_circ_${sampleID}_anchors.qfa.gz\n        \"\"\"\n    }",
        "nb_lignes_process": 40,
        "string_script": "        \"\"\"     \n         source activate find_circ\n        unmapped2anchors.py ${query_file} \\\n        | gzip \\\n        > find_circ_${sampleID}_anchors.qfa.gz\n        \n        bowtie2 \\\n            -p ${task.cpus} \\\n            --reorder \\\n            --mm \\\n            --score-min=C,-15,0 \\\n            -q \\\n            -x ${bowtie2_run_index} \\\n            -U find_circ_${sampleID}_anchors.qfa.gz \\\n        | find_circ.py \\\n            -G ${genomefile} \\\n            -p ${sampleID}_ \\\n            -s find_circ_${sampleID}_stats.sites.log \\\n            -n find_circ \\\n            -R find_circ_${sampleID}_spliced_reads.fa \\\n            > find_circ_${sampleID}_splice_sites.bed   \n\n        # remove temp file for reduce the usage of the disk .\n        rm find_circ_${sampleID}_spliced_reads.fa \n        rm find_circ_${sampleID}_anchors.qfa.gz\n        \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "Rbowtie2"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            }
        ],
        "inputs": [
            "Bowtie2files",
            "genomefile",
            "Bowtie2index_fc"
        ],
        "nb_inputs": 3,
        "outputs": [
            "find_circfiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/circRNA_Identification/Find_circ\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_Find_circ_Bed": {
        "name_process": "RUN_Find_circ_Bed",
        "string_process": " process RUN_Find_circ_Bed{\n        tag \"$sampleID\"\n        publishDir \"${params.outdir}/circRNA_Identification/Find_circ\", mode: 'copy', pattern: \"*candidates.bed\", overwrite: true\n\n        input:\n        tuple val(sampleID),  file (query_file) from find_circfiles\n        \n\n        output:\n        file ('*candidates.bed') into Modify_find_circfiles\n\n        shell :\n        '''\n        if [ $((`cat !{query_file} | wc -l`)) == 1 ];then\n        touch !{sampleID}_modify_find_circ.candidates.bed\n        else\n        grep CIRCULAR !{query_file} \\\n        | grep -v chrM \\\n        | grep UNAMBIGUOUS_BP \\\n        | grep ANCHOR_UNIQUE \\\n        | awk '{print $1 \"\\t\" $2 \"\\t\" $3 \"\\t\" $11 \"\\t\" $5 \"\\t\" $6}' \\\n        | sort -t $'\\t' -k 1,1 -k 2n,2 -k 3n,3 \\\n        > !{sampleID}_modify_find_circ.temp.bed\n        \n        cp !{sampleID}_modify_find_circ.temp.bed findCirc_!{sampleID}.candidates.bed\n        fi\n        '''\n    }",
        "nb_lignes_process": 26,
        "string_script": "        '''\n        if [ $((`cat !{query_file} | wc -l`)) == 1 ];then\n        touch !{sampleID}_modify_find_circ.candidates.bed\n        else\n        grep CIRCULAR !{query_file} \\\n        | grep -v chrM \\\n        | grep UNAMBIGUOUS_BP \\\n        | grep ANCHOR_UNIQUE \\\n        | awk '{print $1 \"\\t\" $2 \"\\t\" $3 \"\\t\" $11 \"\\t\" $5 \"\\t\" $6}' \\\n        | sort -t $'\\t' -k 1,1 -k 2n,2 -k 3n,3 \\\n        > !{sampleID}_modify_find_circ.temp.bed\n        \n        cp !{sampleID}_modify_find_circ.temp.bed findCirc_!{sampleID}.candidates.bed\n        fi\n        '''",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "find_circfiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Modify_find_circfiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\"",
            "publishDir \"${params.outdir}/circRNA_Identification/Find_circ\", mode: 'copy', pattern: \"*candidates.bed\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_Find_circ_Matrix": {
        "name_process": "RUN_Find_circ_Matrix",
        "string_process": " process RUN_Find_circ_Matrix{\n        publishDir \"${params.outdir}/circRNA_Identification/Find_circ\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n\n        input:\n        file (query_file) from Modify_find_circfiles.collect()\n        file gtffile\n\n        output:\n\n        file ('find_circ_merge.matrix') into (Output_find_circ,Plot_find_circ,Plot_find_circ_cor,Merge_find_circ)\n        file ('Name_find_circ.txt') into Name_find_circ\n\n\n        shell :\n        '''\n\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o find_circ -sup 5 -merge\n        mv find_circ_merge.bed find_circ_merge.matrix\n     \n        sed -i 's/findCirc_//g' find_circ_merge.matrix\n        sed -i 's/.candidates.bed//g' find_circ_merge.matrix\n\n        echo -e \"find_circ\" > Name_find_circ.txt\n        '''\n    }",
        "nb_lignes_process": 24,
        "string_script": "        '''\n\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o find_circ -sup 5 -merge\n        mv find_circ_merge.bed find_circ_merge.matrix\n     \n        sed -i 's/findCirc_//g' find_circ_merge.matrix\n        sed -i 's/.candidates.bed//g' find_circ_merge.matrix\n\n        echo -e \"find_circ\" > Name_find_circ.txt\n        '''",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Modify_find_circfiles",
            "gtffile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "",
            "Name_find_circ"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/circRNA_Identification/Find_circ\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "RUN_MULTIQC": {
        "name_process": "RUN_MULTIQC",
        "string_process": "\nprocess RUN_MULTIQC{\n    publishDir \"${params.outdir}/MultiQC\", mode: 'copy', pattern: \"*.html\", overwrite: true\n\n    input:\n    file (query_file) from Fastp_for_multiqc.concat( Star_multiqc, Bowtie2_multiqc ).collect()\n\n    output:\n    file ('*.html') into Multiqc_results\n\n    script:\n    \"\"\"\n    multiqc .\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    multiqc .\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "Fastp_for_multiqc",
            "Star_multiqc",
            "Bowtie2_multiqc"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Multiqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/MultiQC\", mode: 'copy', pattern: \"*.html\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "TOOL_MERGE": {
        "name_process": "TOOL_MERGE",
        "string_process": " process TOOL_MERGE{\n        publishDir \"${params.outdir}/Combination_Matrix\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n        \n        input:\n        file (query_file) from Combine_matrix_file.collect()\n        file (name_file) from Combine_name_file.collect()\n        file gtffile\n        \n        \n\n        output:\n        file ('all_tools_merge_filtered.matrix') into (Tools_merge_html,Bed_to_sailfish_cir,Bed_for_recount)\n        file ('tools_merge.bed') into (Bed_for_annotation,De_merge,Cor_merge)\n        file ('Merged_matrix_forVen.matrix') into Merged_file_for_Venn\n        \n\n\n        shell :\n        '''\n    \n        cat *_merge.matrix >> temp_concatenate.txt\n\n        # filtered the circRNA length less than 100bp   \n        awk -F  \"\\t\" '{OFS=\"\\t\"}{if ($3 > $2) {name=($1\"_\"$2\"_\"$3\"_\"$6);print $1,$2,$3,name,$5,$6} else {name=($1\"_\"$3\"_\"$2\"_\"$6);print $1,$3,$2,name,$5,$6} }' temp_concatenate.txt  | awk '$3 - $2 >= 100' >  concatenate.txt\n        \n\n        for file in !{query_file}\n        do \n            awk '{OFS=\"\\t\"}NR>1{print  $1 \"\\t\" $2 \"\\t\" $3 \"\\t\" $4 \"\\t\" $5 \"\\t\" $6 \"\\t1\"}' $file > ${file%%merge.matrix}merge_temp.matrix\n        done \n        \n\n        # merge and get ven merge matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -collapse  -dir ./ -suffix _merge_temp.matrix -out Merged_matrix_forVen.matrix -out2 tools_merge.bed \n\n        awk '{OFS=\"\\t\"}{$4=\".\";print $0}' tools_merge.bed > all_tools_merged.matrix \n        \n        awk -F  \"\\t\" '{OFS=\"\\t\"}{if ($3 > $2) {name=($1\"_\"$2\"_\"$3\"_\"$6);print $1,$2,$3,name,$5,$6} else {name=($1\"_\"$3\"_\"$2\"_\"$6);print $1,$3,$2,name,$5,$6} }' all_tools_merged.matrix  | awk '$3 - $2 >= 100 ' >  all_tools_merge_filtered.matrix \n\n        \n        '''\n    }",
        "nb_lignes_process": 40,
        "string_script": "        '''\n    \n        cat *_merge.matrix >> temp_concatenate.txt\n\n        # filtered the circRNA length less than 100bp   \n        awk -F  \"\\t\" '{OFS=\"\\t\"}{if ($3 > $2) {name=($1\"_\"$2\"_\"$3\"_\"$6);print $1,$2,$3,name,$5,$6} else {name=($1\"_\"$3\"_\"$2\"_\"$6);print $1,$3,$2,name,$5,$6} }' temp_concatenate.txt  | awk '$3 - $2 >= 100' >  concatenate.txt\n        \n\n        for file in !{query_file}\n        do \n            awk '{OFS=\"\\t\"}NR>1{print  $1 \"\\t\" $2 \"\\t\" $3 \"\\t\" $4 \"\\t\" $5 \"\\t\" $6 \"\\t1\"}' $file > ${file%%merge.matrix}merge_temp.matrix\n        done \n        \n\n        # merge and get ven merge matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -collapse  -dir ./ -suffix _merge_temp.matrix -out Merged_matrix_forVen.matrix -out2 tools_merge.bed \n\n        awk '{OFS=\"\\t\"}{$4=\".\";print $0}' tools_merge.bed > all_tools_merged.matrix \n        \n        awk -F  \"\\t\" '{OFS=\"\\t\"}{if ($3 > $2) {name=($1\"_\"$2\"_\"$3\"_\"$6);print $1,$2,$3,name,$5,$6} else {name=($1\"_\"$3\"_\"$2\"_\"$6);print $1,$3,$2,name,$5,$6} }' all_tools_merged.matrix  | awk '$3 - $2 >= 100 ' >  all_tools_merge_filtered.matrix \n\n        \n        '''",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Combine_matrix_file",
            "Combine_name_file",
            "gtffile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "",
            "",
            "Merged_file_for_Venn"
        ],
        "nb_outputs": 3,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/Combination_Matrix\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "getPsudoCircSequence_And_BuildHisatIndex": {
        "name_process": "getPsudoCircSequence_And_BuildHisatIndex",
        "string_process": " process getPsudoCircSequence_And_BuildHisatIndex {\n      input:\n           file (bed_file) from Bed_for_recount\n           file genomefile\n           file faifile \n      output:\n           file \"*.ht2\" into Candidate_circRNA_index\n      script:\n      \"\"\"\n      # extract bed file for obtaining seqeuence\n      sh ${baseDir}/bin/ProcessBedforGettingSequence.sh ${bed_file} temp.sort.bed temp.start.bed temp.end.bed\n\n      bedtools getfasta -name -fi ${genomefile} -s -bed temp.start.bed > temp.start.fa\n      bedtools getfasta -name -fi ${genomefile} -s -bed temp.end.bed > temp.end.fa\n      # circRNA <= 400 bp\n      bedtools getfasta -name -fi ${genomefile} -s -bed temp.sort.bed > temp.sort.fa \n\n      # merge and get combined fasta formatted psudoCirc sequences\n      sh ${baseDir}/bin/MergeBSJsequence.sh temp.sort.fa temp.start.fa temp.end.fa tmp_candidate.circular_BSJ_flank.fa\n\n      hisat2-build -p ${task.cpus}  tmp_candidate.circular_BSJ_flank.fa candidate_circRNA_BSJ_flank \n      \n      \"\"\"\n    }",
        "nb_lignes_process": 22,
        "string_script": "      \"\"\"\n      # extract bed file for obtaining seqeuence\n      sh ${baseDir}/bin/ProcessBedforGettingSequence.sh ${bed_file} temp.sort.bed temp.start.bed temp.end.bed\n\n      bedtools getfasta -name -fi ${genomefile} -s -bed temp.start.bed > temp.start.fa\n      bedtools getfasta -name -fi ${genomefile} -s -bed temp.end.bed > temp.end.fa\n      # circRNA <= 400 bp\n      bedtools getfasta -name -fi ${genomefile} -s -bed temp.sort.bed > temp.sort.fa \n\n      # merge and get combined fasta formatted psudoCirc sequences\n      sh ${baseDir}/bin/MergeBSJsequence.sh temp.sort.fa temp.start.fa temp.end.fa tmp_candidate.circular_BSJ_flank.fa\n\n      hisat2-build -p ${task.cpus}  tmp_candidate.circular_BSJ_flank.fa candidate_circRNA_BSJ_flank \n      \n      \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "RASH",
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/RASH",
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "RASH",
                "uri": "https://bio.tools/RASH",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Mathematics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3315",
                            "term": "Maths"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3778",
                                    "term": "Text annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Essential dynamics"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "PCA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Principal modes"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "ED"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "a Web-first format for HTML-based scholarly articles.\n\nResearch Articles in Simplified HTML (RASH) Framework includes a markup language defined as a subset of HTML+RDF for writing scientific articles, and related tools to convert it into different formats, to extract data from it, etc.\n\nHow to cite: Peroni, S., Osborne, F., Di Iorio, A., Nuzzolese, A. G., Poggi, F., Vitali, F., Motta, E. (2017). Research Articles in Simplified HTML: a Web-first format for HTML-based scholarly articles. PeerJ Computer Science 3: e132. e2513. DOI: https://doi.org/10.7717/peerj-cs.132.\n\n# rash-check.sh - fully check RASH documents.\n\nThe odt2rash.jar executable converts an ODT file into the RASH format.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'Research Articles Simplified HTML', 'SAVE-SD'",
                "homepage": "https://w3id.org/people/essepuntato/papers/rash-peerj2016.html"
            },
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "Bed_for_recount",
            "genomefile",
            "faifile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Candidate_circRNA_index"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "RECOUNT_generate_BSJ_Bamfile": {
        "name_process": "RECOUNT_generate_BSJ_Bamfile",
        "string_process": " process RECOUNT_generate_BSJ_Bamfile {\n      tag \"$sampleID\"\n      input:\n            file index from Candidate_circRNA_index.collect()\n            tuple val(sampleID),  file(query_file) from Fastpfiles_recount\n      output:\n            tuple val(sampleID),file(\"${sampleID}_denovo.bam\") into BSJ_mapping_bamfile\n            file \"fileforwaiting.txt\" into Wait_for_hisat2\n      when:\n            run_multi_tools\n      script:\n       if(params.singleEnd){\n            \"\"\"\n             hisat2 -p ${task.cpus} -t -k 1 -x candidate_circRNA_BSJ_flank -U ${query_file} | samtools view -bS  -q 10 -  > ${sampleID}_denovo.bam \n             touch fileforwaiting.txt\n            \"\"\"\n        }else{\n            \"\"\"\n            hisat2 -p ${task.cpus} -t -k 1 -x candidate_circRNA_BSJ_flank -1 ${query_file[0]}  -2 ${query_file[1]} | samtools view -bS -q 10 - > ${sampleID}_denovo.bam \n            touch fileforwaiting.txt\n            \"\"\"\n        }\n    }",
        "nb_lignes_process": 21,
        "string_script": "       if(params.singleEnd){\n            \"\"\"\n             hisat2 -p ${task.cpus} -t -k 1 -x candidate_circRNA_BSJ_flank -U ${query_file} | samtools view -bS  -q 10 -  > ${sampleID}_denovo.bam \n             touch fileforwaiting.txt\n            \"\"\"\n        }else{\n            \"\"\"\n            hisat2 -p ${task.cpus} -t -k 1 -x candidate_circRNA_BSJ_flank -1 ${query_file[0]}  -2 ${query_file[1]} | samtools view -bS -q 10 - > ${sampleID}_denovo.bam \n            touch fileforwaiting.txt\n            \"\"\"\n        }",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "Candidate_circRNA_index",
            "Fastpfiles_recount"
        ],
        "nb_inputs": 2,
        "outputs": [
            "BSJ_mapping_bamfile",
            "Wait_for_hisat2"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\""
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "RECOUNT_generate_genome_Bamfile": {
        "name_process": "RECOUNT_generate_genome_Bamfile",
        "string_process": " process RECOUNT_generate_genome_Bamfile {\n      tag \"$sampleID\"\n      input:\n            file index from hisat2_index.collect()\n            tuple val(sampleID),  file(query_file) from Fastpfiles_hisat\n            file filewait from Wait_for_hisat2\n      output:\n            tuple val(sampleID),file(\"${sampleID}.bam\") into Genome_remapping_bamfile, Genome_remapping_bamfile_for_mRNAcounting\n      when:\n            run_multi_tools\n      script:\n      index_base = index[0].toString() - ~/.\\d.ht2/\n       if(params.singleEnd){\n            \"\"\"\n             hisat2 -p ${task.cpus} -t -k 1 -x ${index_base} -U ${query_file} --dta | samtools view -bS  -q 10 -  > ${sampleID}.bam \n            \"\"\"\n        }else{\n            \"\"\"\n            hisat2 -p ${task.cpus} -t -k 1 -x ${index_base} -1 ${query_file[0]}  -2 ${query_file[1]} --dta | samtools view -bS -q 10 - > ${sampleID}.bam \n            \"\"\"\n        }\n    }",
        "nb_lignes_process": 20,
        "string_script": "      index_base = index[0].toString() - ~/.\\d.ht2/\n       if(params.singleEnd){\n            \"\"\"\n             hisat2 -p ${task.cpus} -t -k 1 -x ${index_base} -U ${query_file} --dta | samtools view -bS  -q 10 -  > ${sampleID}.bam \n            \"\"\"\n        }else{\n            \"\"\"\n            hisat2 -p ${task.cpus} -t -k 1 -x ${index_base} -1 ${query_file[0]}  -2 ${query_file[1]} --dta | samtools view -bS -q 10 - > ${sampleID}.bam \n            \"\"\"\n        }",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "hisat2_index",
            "Fastpfiles_hisat",
            "Wait_for_hisat2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "Genome_remapping_bamfile",
            "Genome_remapping_bamfile_for_mRNAcounting"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\""
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "RECOUNT_estimate_step_single": {
        "name_process": "RECOUNT_estimate_step_single",
        "string_process": " process RECOUNT_estimate_step_single{\n\n        input:\n            tuple val(sampleID), file(bsjBamfile),file(genomeBamfile) from RecountBamfiles\n\n            \n\n        output:\n            tuple val(sampleID),file(\"${sampleID}.count\") into Single_sample_recount\n\n        when:\n            run_multi_tools\n        script:\n        \"\"\"\n        java -jar ${baseDir}/bin/circpipetools.jar -recount -bsjbam ${bsjBamfile} -allBam ${genomeBamfile} -out ${sampleID}.count\n        \"\"\"\n    }",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        java -jar ${baseDir}/bin/circpipetools.jar -recount -bsjbam ${bsjBamfile} -allBam ${genomeBamfile} -out ${sampleID}.count\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "RecountBamfiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Single_sample_recount"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [],
        "when": "run_multi_tools",
        "stub": ""
    },
    "RECOUNT_estimate_step_paired": {
        "name_process": "RECOUNT_estimate_step_paired",
        "string_process": " process RECOUNT_estimate_step_paired{\n        tag \"$sampleID\"\n\n        input:\n              tuple val(sampleID), file(bsjBamfile),file(genomeBamfile) from RecountBamfiles\n\n        output:\n           tuple val(sampleID),file(\"${sampleID}.count\") into Single_sample_recount\n\n        when:\n            run_multi_tools\n        script:\n        \"\"\"\n         java -jar ${baseDir}/bin/circpipetools.jar -recount -bsjbam ${bsjBamfile} -allBam ${genomeBamfile} -out ${sampleID}.count\n        \n        \"\"\"\n        \n    }",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n         java -jar ${baseDir}/bin/circpipetools.jar -recount -bsjbam ${bsjBamfile} -allBam ${genomeBamfile} -out ${sampleID}.count\n        \n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "RecountBamfiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Single_sample_recount"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\""
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "RECOUNT_COMBINE": {
        "name_process": "RECOUNT_COMBINE",
        "string_process": " process RECOUNT_COMBINE{\n\n        publishDir \"${params.outdir}/Combination_Matrix\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n\n        input:\n            file (query_file) from Single_sample_recount.collect()\n         \n\n        output:\n            file (\"multitools.exp.matrix\") into (Matrix_for_circos, Plot_merge, PlotMergeCor)\n        \n        when:\n            run_multi_tools\n\n        script:\n            \"\"\"\n            java -jar ${baseDir}/bin/circpipetools.jar -MM -dir ./ -suffix .count -out multitools.exp.matrix\n            \"\"\"\n    }",
        "nb_lignes_process": 17,
        "string_script": "            \"\"\"\n            java -jar ${baseDir}/bin/circpipetools.jar -MM -dir ./ -suffix .count -out multitools.exp.matrix\n            \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Single_sample_recount"
        ],
        "nb_inputs": 1,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/Combination_Matrix\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "MERGE_DiffernetialExpression": {
        "name_process": "MERGE_DiffernetialExpression",
        "string_process": " process MERGE_DiffernetialExpression{\n        publishDir \"${params.outdir}/DE_Analysis/Merge\", mode: 'copy', pattern: \"*\", overwrite: true\n\n        input:\n        file anno_file from De_merge\n        file designfile\n        file comparefile\n        file matrixFile from Plot_merge\n        \n\n        output:\n        file ('*') into End_merge\n\n        when:\n        run_multi_tools \n\n        shell:\n        '''\n        mkdir plotdir\n        Rscript !{baseDir}/bin/circRNA_DE_analysis_with_edgeR.R !{baseDir}/bin/R_function.R !{matrixFile} !{designfile} !{comparefile} !{anno_file} plotdir\n        '''\n\n\n    \n\n    }",
        "nb_lignes_process": 24,
        "string_script": "        '''\n        mkdir plotdir\n        Rscript !{baseDir}/bin/circRNA_DE_analysis_with_edgeR.R !{baseDir}/bin/R_function.R !{matrixFile} !{designfile} !{comparefile} !{anno_file} plotdir\n        '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "De_merge",
            "designfile",
            "comparefile",
            "Plot_merge"
        ],
        "nb_inputs": 4,
        "outputs": [
            "End_merge"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/DE_Analysis/Merge\", mode: 'copy', pattern: \"*\", overwrite: true"
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "MERGE_CorrelationAnalysis": {
        "name_process": "MERGE_CorrelationAnalysis",
        "string_process": " process MERGE_CorrelationAnalysis{\n            publishDir \"${params.outdir}/Corrrelation_Analysis/Merge\", mode: 'copy', pattern: \"*\", overwrite: true\n\n            input:\n            file (matrix_file) from PlotMergeCor\n            file (anno_file) from Cor_merge\n            file mRNAfile\n            \n            \n\n            when:\n            run_multi_tools\n\n            output:\n            file(\"*\") into CorPlotMerge\n\n            shell:\n            '''\n            \n            Rscript !{baseDir}/bin/correlation.R !{baseDir}/bin/R_function.R !{mRNAfile} !{matrix_file} !{anno_file} \n            '''\n        }",
        "nb_lignes_process": 20,
        "string_script": "            '''\n            \n            Rscript !{baseDir}/bin/correlation.R !{baseDir}/bin/R_function.R !{mRNAfile} !{matrix_file} !{anno_file} \n            '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "PlotMergeCor",
            "Cor_merge",
            "mRNAfile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "CorPlotMerge"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/Corrrelation_Analysis/Merge\", mode: 'copy', pattern: \"*\", overwrite: true"
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "ANNOTATION": {
        "name_process": "ANNOTATION",
        "string_process": " process ANNOTATION{\n        publishDir \"${params.outdir}/Annotation\", mode: 'copy', pattern: \"*\", overwrite: true\n\n        input:\n        file (bed_file) from Bed_for_annotation\n        file (query_file) from Matrix_for_circos\n        file gtffile \n        file faifile\n        file genomefile\n\n        when:\n        run_multi_tools\n\n        output:\n        file ('*') into Annotation_plot\n\n        shell:\n        \"\"\"\n        java -jar ${baseDir}/bin/circpipeTools.jar -annote -bedfile !{bed_file}  -gtf !{gtffile} -out annotated.circRNA.txt\n\n        Rscript !{baseDir}/bin/circos.R !{baseDir}/bin/R_function.R  !{params.genomebuild} !{faifile} !{query_file}\n        Rscript !{baseDir}/bin/circRNA_feature.R !{baseDir}/bin/R_function.R  annotated.circRNA.txt newtest.anno.txt\n\n        \"\"\"\n        \n    }",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"\n        java -jar ${baseDir}/bin/circpipeTools.jar -annote -bedfile !{bed_file}  -gtf !{gtffile} -out annotated.circRNA.txt\n\n        Rscript !{baseDir}/bin/circos.R !{baseDir}/bin/R_function.R  !{params.genomebuild} !{faifile} !{query_file}\n        Rscript !{baseDir}/bin/circRNA_feature.R !{baseDir}/bin/R_function.R  annotated.circRNA.txt newtest.anno.txt\n\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Bed_for_annotation",
            "Matrix_for_circos",
            "gtffile",
            "faifile",
            "genomefile"
        ],
        "nb_inputs": 5,
        "outputs": [
            "Annotation_plot"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/Annotation\", mode: 'copy', pattern: \"*\", overwrite: true"
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "VENN_PLOT": {
        "name_process": "VENN_PLOT",
        "string_process": " process VENN_PLOT{\n        publishDir \"${params.outdir}/Annotation\", mode: 'copy', pattern: \"*\", overwrite: true\n\n        input:\n        file (matrix_file) from Merged_file_for_Venn\n        \n\n\n        when:\n        (number_of_tools < 6) && (number_of_tools > 1)\n\n        output:\n        file ('*') into venn_plot\n\n        shell:\n        '''\n        Rscript !{baseDir}/bin/venn.R !{matrix_file} venn.png\n        '''\n\n}",
        "nb_lignes_process": 18,
        "string_script": "        '''\n        Rscript !{baseDir}/bin/venn.R !{matrix_file} venn.png\n        '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Merged_file_for_Venn"
        ],
        "nb_inputs": 1,
        "outputs": [
            "venn_plot"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/Annotation\", mode: 'copy', pattern: \"*\", overwrite: true"
        ],
        "when": "(number_of_tools < 6) && (number_of_tools > 1)",
        "stub": ""
    },
    "mRNAmeasurementByFeatureCount": {
        "name_process": "mRNAmeasurementByFeatureCount",
        "string_process": " process mRNAmeasurementByFeatureCount {\n      input:\n        file gtffile\n        tuple val(sampleID),file(bamfile)  from  Genome_remapping_bamfile_for_mRNAcounting\n      output:\n        tuple val(sampleID),file(\"${sampleID}.gene.count\") into Feature_count_out\n      script:\n      \"\"\"\n      \n        featureCounts -a $gtf -T ${task.cpus} -p -t gene -g gene_id -o ${sampleID}.gene.count ${bamfile}\n\n      \"\"\"\n    }",
        "nb_lignes_process": 11,
        "string_script": "      \"\"\"\n      \n        featureCounts -a $gtf -T ${task.cpus} -p -t gene -g gene_id -o ${sampleID}.gene.count ${bamfile}\n\n      \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "gtffile",
            "Genome_remapping_bamfile_for_mRNAcounting"
        ],
        "nb_inputs": 2,
        "outputs": [
            "Feature_count_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "featureCount2Matrix": {
        "name_process": "featureCount2Matrix",
        "string_process": " process featureCount2Matrix {\n      publishDir \"${params.outdir}/mRNAexpression\", mode: 'copy', pattern: \"*\", overwrite: true\n      input:\n        file bamfiles  from  Genome_remapping_bamfile_for_mRNAcounting.collect()\n      output:\n        file \"featureCount.matrix\" into Expression_matrix_of_mRNA\n      script:\n      \"\"\"\n        java -jar ${baseDir}/bin/circpipeTools.jar -MF -dir ./ -out featureCount.matrix\n      \"\"\"\n    }",
        "nb_lignes_process": 9,
        "string_script": "      \"\"\"\n        java -jar ${baseDir}/bin/circpipeTools.jar -MF -dir ./ -out featureCount.matrix\n      \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Genome_remapping_bamfile_for_mRNAcounting"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Expression_matrix_of_mRNA"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/mRNAexpression\", mode: 'copy', pattern: \"*\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "REPORT_GENERATION": {
        "name_process": "REPORT_GENERATION",
        "string_process": "\nprocess REPORT_GENERATION{\n    publishDir \"${params.outdir}/Report\", mode: 'copy', pattern: \"*.html\", overwrite: true\n\n    input:\n    file (de_file) from End_merge.collect()\n    file (cor_file) from CorPlotMerge.collect()\n    file (anno_file) from Annotation_plot.collect()\n    file (calculate_file) from Tools_merge_html\n    file (multiqc_file) from Multiqc_results\n    \n    \n\n    when:\n    run_multi_tools\n\n    output:\n    file ('*.html') into report_html\n\n    shell:\n    '''\n    ln -s !{baseDir}/bin/*.Rmd ./\n    Rscript -e \"require( 'rmarkdown' ); render('report.Rmd', 'html_document')\"\n    '''\n}",
        "nb_lignes_process": 23,
        "string_script": "    '''\n    ln -s !{baseDir}/bin/*.Rmd ./\n    Rscript -e \"require( 'rmarkdown' ); render('report.Rmd', 'html_document')\"\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "End_merge",
            "CorPlotMerge",
            "Annotation_plot",
            "Tools_merge_html",
            "Multiqc_results"
        ],
        "nb_inputs": 5,
        "outputs": [
            "report_html"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/Report\", mode: 'copy', pattern: \"*.html\", overwrite: true"
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "Circexplorer2_Matrix": {
        "name_process": "Circexplorer2_Matrix",
        "string_process": " process Circexplorer2_Matrix {\n        publishDir \"${params.outdir}/circRNA_Identification/CIRCexplorer2\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n\n        input:\n            file (query_file) from Modify_circexplorer2.collect()\n\n        output:\n            file ('circexplorer2_merge.matrix') into (Output_circexplorer2,Plot_circexplorer2,Plot_circexplorer2_cor,Merge_circexplorer2)\n            file ('Name_circexplorer2.txt') into Name_circexplorer2\n \n\n        shell :\n        '''\n\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o circexplorer2 -sup 5 -merge\n        mv circexplorer2_merge.bed circexplorer2_merge.matrix\n       \n        # remove non samplename string from matrix header \n        sed -i 's/circexplorer2_//g' circexplorer2_merge.matrix\n        sed -i 's/_modify.candidates.bed//g' circexplorer2_merge.matrix\n\n        echo -e \"circexplorer2\" > Name_circexplorer2.txt\n        \n        '''\n    }",
        "nb_lignes_process": 24,
        "string_script": "        '''\n\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o circexplorer2 -sup 5 -merge\n        mv circexplorer2_merge.bed circexplorer2_merge.matrix\n       \n        # remove non samplename string from matrix header \n        sed -i 's/circexplorer2_//g' circexplorer2_merge.matrix\n        sed -i 's/_modify.candidates.bed//g' circexplorer2_merge.matrix\n\n        echo -e \"circexplorer2\" > Name_circexplorer2.txt\n        \n        '''",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Modify_circexplorer2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "Name_circexplorer2"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/circRNA_Identification/CIRCexplorer2\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "Ciri_Matrix": {
        "name_process": "Ciri_Matrix",
        "string_process": " process Ciri_Matrix{\n\n        publishDir \"${params.outdir}/circRNA_Identification/CIRI\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n\n        input:\n        file (query_file) from Modify_ciri.collect()\n\n\n        output:\n        file ('ciri_merge.matrix') into (Output_ciri,Plot_ciri_cor,Plot_ciri,Merge_ciri)\n        file ('Name_ciri.txt') into Name_ciri\n\n\n        shell :\n        '''\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o ciri -sup 5 -merge\n        mv ciri_merge.bed ciri_merge.matrix\n        \n        sed -i 's/ciri_//g' ciri_merge.matrix\n        sed -i 's/_modify.candidates.bed//g' ciri_merge.matrix\n\n        #for what \n        echo -e \"ciri\" > Name_ciri.txt\n        '''\n    }",
        "nb_lignes_process": 24,
        "string_script": "        '''\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o ciri -sup 5 -merge\n        mv ciri_merge.bed ciri_merge.matrix\n        \n        sed -i 's/ciri_//g' ciri_merge.matrix\n        sed -i 's/_modify.candidates.bed//g' ciri_merge.matrix\n\n        #for what \n        echo -e \"ciri\" > Name_ciri.txt\n        '''",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Modify_ciri"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "Name_ciri"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/circRNA_Identification/CIRI\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "Mapsplice_Matrix": {
        "name_process": "Mapsplice_Matrix",
        "string_process": " process Mapsplice_Matrix{\n        publishDir \"${params.outdir}/circRNA_Identification/Mapsplice\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n\n        input:\n        file (query_file) from Modify_mapsplice.collect()\n\n        output:\n        file ('mapsplice_merge.matrix') into (Output_mapsplice,Plot_mapsplice,Plot_mapsplice_cor,Merge_mapsplice)\n        file ('Name_mapsplice.txt') into Name_mapsplice\n   \n\n\n        shell :\n        '''\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o mapsplice -sup 5 -merge\n        mv mapsplice_merge.bed mapsplice_merge.matrix\n\n        sed -i 's/mapsplice_//g' mapsplice_merge.matrix\n        sed -i 's/_modify.candidates.bed//g' mapsplice_merge.matrix\n        echo -e \"mapsplice\" > Name_mapsplice.txt\n        '''\n    }",
        "nb_lignes_process": 21,
        "string_script": "        '''\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o mapsplice -sup 5 -merge\n        mv mapsplice_merge.bed mapsplice_merge.matrix\n\n        sed -i 's/mapsplice_//g' mapsplice_merge.matrix\n        sed -i 's/_modify.candidates.bed//g' mapsplice_merge.matrix\n        echo -e \"mapsplice\" > Name_mapsplice.txt\n        '''",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Modify_mapsplice"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "Name_mapsplice"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/circRNA_Identification/Mapsplice\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "Segemehl_Matrix": {
        "name_process": "Segemehl_Matrix",
        "string_process": " process Segemehl_Matrix{\n            publishDir \"${params.outdir}/circRNA_Identification/Segemehl\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n\n            input:\n            file (query_file) from Modify_segemehl.collect()\n\n            output:\n            file ('segemehl_merge.matrix') into (Output_segemehl,Plot_segemehl,Merge_segemehl,Plot_segemehl_cor)\n            file ('Name_segemehl.txt') into Name_segemehl\n    \n            shell :\n            '''\n            # merge sample into matrix \n            java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o segemehl -sup 5 -merge\n            mv segemehl_merge.bed segemehl_merge.matrix\n            # modify sample names \n            sed -i 's/segemehl_//g' segemehl_merge.matrix\n            sed -i 's/_modify.candidates.bed//g' segemehl_merge.matrix\n            echo -e \"segemehl\" > Name_segemehl.txt\n            '''\n    }",
        "nb_lignes_process": 19,
        "string_script": "            '''\n            # merge sample into matrix \n            java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o segemehl -sup 5 -merge\n            mv segemehl_merge.bed segemehl_merge.matrix\n            # modify sample names \n            sed -i 's/segemehl_//g' segemehl_merge.matrix\n            sed -i 's/_modify.candidates.bed//g' segemehl_merge.matrix\n            echo -e \"segemehl\" > Name_segemehl.txt\n            '''",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Modify_segemehl"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "Name_segemehl"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/circRNA_Identification/Segemehl\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "Find_circ_Matrix": {
        "name_process": "Find_circ_Matrix",
        "string_process": " process Find_circ_Matrix{\n        publishDir \"${params.outdir}/circRNA_Identification/Find_circ\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n\n        input:\n        file (query_file) from Modify_find_circfiles.collect()\n\n        output:\n\n        file ('find_circ_merge.matrix') into (Output_find_circ,Plot_find_circ,Plot_find_circ_cor,Merge_find_circ)\n        file ('Name_find_circ.txt') into Name_find_circ\n\n\n        shell :\n        '''\n\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o find_circ -sup 5 -merge\n        mv find_circ_merge.bed find_circ_merge.matrix\n     \n        # modify sample names \n        sed -i 's/_modify_find_circ.candidates.bed//g' find_circ_merge.matrix\n        echo -e \"find_circ\" > Name_find_circ.txt\n        '''\n    }",
        "nb_lignes_process": 22,
        "string_script": "        '''\n\n        # merge sample into matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -i candidates.bed -o find_circ -sup 5 -merge\n        mv find_circ_merge.bed find_circ_merge.matrix\n     \n        # modify sample names \n        sed -i 's/_modify_find_circ.candidates.bed//g' find_circ_merge.matrix\n        echo -e \"find_circ\" > Name_find_circ.txt\n        '''",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Modify_find_circfiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "Name_find_circ"
        ],
        "nb_outputs": 2,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/circRNA_Identification/Find_circ\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "Tools_Merge": {
        "name_process": "Tools_Merge",
        "string_process": " process Tools_Merge{\n        publishDir \"${params.outdir}/Combination_Matrix\", mode: 'copy', pattern: \"*.matrix\", overwrite: true\n        \n        input:\n        file (query_file) from Combine_matrix_file.collect()\n        file (name_file) from Combine_name_file.collect()\n        file gtffile\n        \n        \n\n        output:\n        file ('all_tools_merge_filtered.matrix') into (Tools_merge_html,Bed_to_sailfish_cir,Bed_for_recount)\n        file ('tools_merge.bed') into (Bed_for_annotation,De_merge,Cor_merge)\n        file ('Merged_matrix_forVen.matrix') into Merged_file_for_Venn\n        \n\n\n        shell :\n        '''\n    \n        cat *_merge.matrix >> temp_concatenate.txt\n\n        # filtered the circRNA length less than 100bp   \n        awk -F  \"\\t\" '{OFS=\"\\t\"}{if ($3 > $2) {name=($1\"_\"$2\"_\"$3\"_\"$6);print $1,$2,$3,name,$5,$6} else {name=($1\"_\"$3\"_\"$2\"_\"$6);print $1,$3,$2,name,$5,$6} }' temp_concatenate.txt  | awk '$3 - $2 >= 100 && $3 - $2 <=100000 ' >  concatenate.txt\n        \n\n        for file in !{query_file}\n        do \n            awk '{OFS=\"\\t\"}NR>1{print  $1 \"\\t\" $2 \"\\t\" $3 \"\\t\" $4 \"\\t\" $5 \"\\t\" $6 \"\\t1\"}' $file > ${file%%merge.matrix}merge_temp.matrix\n        done \n        \n\n        # merge and get ven merge matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -collapse  -dir ./ -suffix _merge_temp.matrix -out Merged_matrix_forVen.matrix -out2 tools_merge.bed \n\n        awk '{OFS=\"\\t\"}{$4=\".\";print $0}' tools_merge.bed > all_tools_merged.matrix \n        \n        awk -F  \"\\t\" '{OFS=\"\\t\"}{if ($3 > $2) {name=($1\"_\"$2\"_\"$3\"_\"$6);print $1,$2,$3,name,$5,$6} else {name=($1\"_\"$3\"_\"$2\"_\"$6);print $1,$3,$2,name,$5,$6} }' all_tools_merged.matrix  | awk '$3 - $2 >= 100 && $3 - $2 <=100000 ' >  all_tools_merge_filtered.matrix \n        \n       \n\n      \n        \n\n        \n        \n        '''\n    }",
        "nb_lignes_process": 46,
        "string_script": "        '''\n    \n        cat *_merge.matrix >> temp_concatenate.txt\n\n        # filtered the circRNA length less than 100bp   \n        awk -F  \"\\t\" '{OFS=\"\\t\"}{if ($3 > $2) {name=($1\"_\"$2\"_\"$3\"_\"$6);print $1,$2,$3,name,$5,$6} else {name=($1\"_\"$3\"_\"$2\"_\"$6);print $1,$3,$2,name,$5,$6} }' temp_concatenate.txt  | awk '$3 - $2 >= 100 && $3 - $2 <=100000 ' >  concatenate.txt\n        \n\n        for file in !{query_file}\n        do \n            awk '{OFS=\"\\t\"}NR>1{print  $1 \"\\t\" $2 \"\\t\" $3 \"\\t\" $4 \"\\t\" $5 \"\\t\" $6 \"\\t1\"}' $file > ${file%%merge.matrix}merge_temp.matrix\n        done \n        \n\n        # merge and get ven merge matrix \n        java -jar !{baseDir}/bin/circpipetools.jar -collapse  -dir ./ -suffix _merge_temp.matrix -out Merged_matrix_forVen.matrix -out2 tools_merge.bed \n\n        awk '{OFS=\"\\t\"}{$4=\".\";print $0}' tools_merge.bed > all_tools_merged.matrix \n        \n        awk -F  \"\\t\" '{OFS=\"\\t\"}{if ($3 > $2) {name=($1\"_\"$2\"_\"$3\"_\"$6);print $1,$2,$3,name,$5,$6} else {name=($1\"_\"$3\"_\"$2\"_\"$6);print $1,$3,$2,name,$5,$6} }' all_tools_merged.matrix  | awk '$3 - $2 >= 100 && $3 - $2 <=100000 ' >  all_tools_merge_filtered.matrix \n        \n       \n\n      \n        \n\n        \n        \n        '''",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Combine_matrix_file",
            "Combine_name_file",
            "gtffile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "",
            "",
            "Merged_file_for_Venn"
        ],
        "nb_outputs": 3,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/Combination_Matrix\", mode: 'copy', pattern: \"*.matrix\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "Recount_estimate_step_single": {
        "name_process": "Recount_estimate_step_single",
        "string_process": " process Recount_estimate_step_single{\n\n        input:\n            tuple val(sampleID), file(bsjBamfile),file(genomeBamfile) from RecountBamfiles\n\n            \n\n        output:\n            tuple val(sampleID),file(\"${sampleID}.count\") into Single_sample_recount\n\n        when:\n            run_multi_tools\n        script:\n        \"\"\"\n        java -jar ${baseDir}/bin/circpipetools.jar -recount -bsjbam ${bsjBamfile} -allBam ${genomeBamfile} -out ${sampleID}.count\n        \"\"\"\n    }",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        java -jar ${baseDir}/bin/circpipetools.jar -recount -bsjbam ${bsjBamfile} -allBam ${genomeBamfile} -out ${sampleID}.count\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "RecountBamfiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Single_sample_recount"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [],
        "when": "run_multi_tools",
        "stub": ""
    },
    "Recount_estimate_step_paired": {
        "name_process": "Recount_estimate_step_paired",
        "string_process": " process Recount_estimate_step_paired{\n        tag \"$sampleID\"\n\n        input:\n              tuple val(sampleID), file(bsjBamfile),file(genomeBamfile) from RecountBamfiles\n\n        output:\n           tuple val(sampleID),file(\"${sampleID}.count\") into Single_sample_recount\n\n        when:\n            run_multi_tools\n        script:\n        \"\"\"\n         java -jar ${baseDir}/bin/circpipetools.jar -recount -bsjbam ${bsjBamfile} -allBam ${genomeBamfile} -out ${sampleID}.count\n        \n        \"\"\"\n        \n    }",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n         java -jar ${baseDir}/bin/circpipetools.jar -recount -bsjbam ${bsjBamfile} -allBam ${genomeBamfile} -out ${sampleID}.count\n        \n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "RecountBamfiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Single_sample_recount"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "tag \"$sampleID\""
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "Merge_Cor": {
        "name_process": "Merge_Cor",
        "string_process": " process Merge_Cor{\n            publishDir \"${params.outdir}/Corrrelation_Analysis/Merge\", mode: 'copy', pattern: \"*\", overwrite: true\n\n            input:\n            file (matrix_file) from PlotMergeCor\n            file (anno_file) from Cor_merge\n            file mRNAfile\n            \n            \n\n            when:\n            run_multi_tools\n\n            output:\n            file(\"*\") into CorPlotMerge\n\n            shell:\n            '''\n            \n            Rscript !{baseDir}/bin/correlation.R !{baseDir}/bin/R_function.R !{mRNAfile} !{matrix_file} !{anno_file} \n            '''\n        }",
        "nb_lignes_process": 20,
        "string_script": "            '''\n            \n            Rscript !{baseDir}/bin/correlation.R !{baseDir}/bin/R_function.R !{mRNAfile} !{matrix_file} !{anno_file} \n            '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "PlotMergeCor",
            "Cor_merge",
            "mRNAfile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "CorPlotMerge"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/Corrrelation_Analysis/Merge\", mode: 'copy', pattern: \"*\", overwrite: true"
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "Merge_Annotation": {
        "name_process": "Merge_Annotation",
        "string_process": " process Merge_Annotation{\n        publishDir \"${params.outdir}/Annotation\", mode: 'copy', pattern: \"*\", overwrite: true\n\n        input:\n        file (bed_file) from Bed_for_annotation\n        file (query_file) from Matrix_for_circos\n        file gtffile \n        file faifile\n        file genomefile\n\n        when:\n        run_multi_tools\n\n        output:\n        file ('*') into Annotation_plot\n\n        shell:\n        '''\n        #\n        annotatePeaks.pl !{bed_file}  !{genomefile} -gtf !{gtffile} > annotated.circRNA.txt\n\n        Rscript !{baseDir}/bin/circos.R !{baseDir}/bin/R_function.R  !{params.genomebuild} !{faifile} !{query_file}\n        #perl !{baseDir}/bin/try_annotate_forGTF.pl !{gtffile} !{bed_file} newtest\n        Rscript !{baseDir}/bin/circRNA_feature.R !{baseDir}/bin/R_function.R  annotated.circRNA.txt newtest.anno.txt\n        '''\n    }",
        "nb_lignes_process": 24,
        "string_script": "        '''\n        #\n        annotatePeaks.pl !{bed_file}  !{genomefile} -gtf !{gtffile} > annotated.circRNA.txt\n\n        Rscript !{baseDir}/bin/circos.R !{baseDir}/bin/R_function.R  !{params.genomebuild} !{faifile} !{query_file}\n        #perl !{baseDir}/bin/try_annotate_forGTF.pl !{gtffile} !{bed_file} newtest\n        Rscript !{baseDir}/bin/circRNA_feature.R !{baseDir}/bin/R_function.R  annotated.circRNA.txt newtest.anno.txt\n        '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Bed_for_annotation",
            "Matrix_for_circos",
            "gtffile",
            "faifile",
            "genomefile"
        ],
        "nb_inputs": 5,
        "outputs": [
            "Annotation_plot"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/Annotation\", mode: 'copy', pattern: \"*\", overwrite: true"
        ],
        "when": "run_multi_tools",
        "stub": ""
    },
    "Venn": {
        "name_process": "Venn",
        "string_process": " process Venn{\n        publishDir \"${params.outdir}/Annotation\", mode: 'copy', pattern: \"*\", overwrite: true\n\n        input:\n        file (matrix_file) from Merged_file_for_Venn\n        \n\n\n        when:\n        (number_of_tools < 6) && (number_of_tools > 1)\n\n        output:\n        file ('*') into venn_plot\n\n        shell:\n        '''\n        Rscript !{baseDir}/bin/venn.R !{matrix_file} venn.png\n        '''\n\n}",
        "nb_lignes_process": 18,
        "string_script": "        '''\n        Rscript !{baseDir}/bin/venn.R !{matrix_file} venn.png\n        '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Merged_file_for_Venn"
        ],
        "nb_inputs": 1,
        "outputs": [
            "venn_plot"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/Annotation\", mode: 'copy', pattern: \"*\", overwrite: true"
        ],
        "when": "(number_of_tools < 6) && (number_of_tools > 1)",
        "stub": ""
    },
    "Report_production": {
        "name_process": "Report_production",
        "string_process": "\nprocess Report_production{\n    publishDir \"${params.outdir}/Report\", mode: 'copy', pattern: \"*.html\", overwrite: true\n\n    input:\n    file (cor_file) from CorPlotMerge.collect()\n    file (anno_file) from Annotation_plot.collect()\n    file (calculate_file) from Tools_merge_html\n    \n    \n\n    when:\n    run_multi_tools\n\n    output:\n    file ('*.html') into report_html\n\n    shell:\n    '''\n    ln -s !{baseDir}/bin/*.Rmd ./\n    Rscript -e \"require( 'rmarkdown' ); render('report.Rmd', 'html_document')\"\n    '''\n}",
        "nb_lignes_process": 21,
        "string_script": "    '''\n    ln -s !{baseDir}/bin/*.Rmd ./\n    Rscript -e \"require( 'rmarkdown' ); render('report.Rmd', 'html_document')\"\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "CorPlotMerge",
            "Annotation_plot",
            "Tools_merge_html"
        ],
        "nb_inputs": 3,
        "outputs": [
            "report_html"
        ],
        "nb_outputs": 1,
        "name_workflow": "likelet__circPipe",
        "directive": [
            "publishDir \"${params.outdir}/Report\", mode: 'copy', pattern: \"*.html\", overwrite: true"
        ],
        "when": "run_multi_tools",
        "stub": ""
    }
}
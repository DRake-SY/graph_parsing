{
    "get_accession": {
        "name_process": "get_accession",
        "string_process": " process get_accession {\n    publishDir \"${params.outdir}/process-logs/${task.process}/${accession}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n    tag \"${accession}\"\n    label 'tiny_memory'\n    \n    input:\n    val(accession) from accession_ids\n    each file(key_file) from key_file\n    file(sra_config) from ch_sra_config_file\n    \n    output:\n    set val(accession), file(output_filename), val(params.singleEnd) into raw_reads_fastqc, raw_reads_trimmomatic\n\t  file(\"command-logs-*\") optional true\n\n    script:\n    def ngc_cmd_with_key_file = key_file.name != 'no_key_file.txt' ? \"--ngc ${key_file}\" : ''\n    output_filename = params.singleEnd ? \"${accession}.fastq.gz\" : \"${accession}_{1,2}.fastq.gz\"\n    \"\"\"\n    mkdir .ncbi\n    mv ${sra_config} .ncbi/\n    prefetch $ngc_cmd_with_key_file $accession --progress -o $accession\n    fasterq-dump $ngc_cmd_with_key_file $accession --threads ${task.cpus} --split-3\n    pigz *.fastq\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"\n  }",
        "nb_lignes_process": 27,
        "string_script": "    def ngc_cmd_with_key_file = key_file.name != 'no_key_file.txt' ? \"--ngc ${key_file}\" : ''\n    output_filename = params.singleEnd ? \"${accession}.fastq.gz\" : \"${accession}_{1,2}.fastq.gz\"\n    \"\"\"\n    mkdir .ncbi\n    mv ${sra_config} .ncbi/\n    prefetch $ngc_cmd_with_key_file $accession --progress -o $accession\n    fasterq-dump $ngc_cmd_with_key_file $accession --threads ${task.cpus} --split-3\n    pigz *.fastq\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "accession_ids",
            "key_file",
            "ch_sra_config_file"
        ],
        "nb_inputs": 3,
        "outputs": [
            "raw_reads_fastqc",
            "raw_reads_trimmomatic"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "publishDir \"${params.outdir}/process-logs/${task.process}/${accession}/\", pattern: \"command-logs-*\", mode: 'copy'",
            "tag \"${accession}\"",
            "label 'tiny_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "get_ftp_accession": {
        "name_process": "get_ftp_accession",
        "string_process": " process get_ftp_accession {\n    publishDir \"${params.outdir}/process-logs/${task.process}/${accession}/\", pattern: \"command-logs-*\", mode: 'copy'\n    \n    tag \"${accession}\"\n    label 'tiny_memory'\n\n    input:\n    val(accession) from accession_ids_ftp\n\n    output:\n    set val(accession), file(output_filename), val(params.singleEnd) into raw_reads_fastqc, raw_reads_trimmomatic\n\n    script:\n    output_filename = params.singleEnd ? \"${accession}.fastq.gz\" : \"${accession}_{1,2}.fastq.gz\"\n    isSingle = params.singleEnd ? \"true\" : \"false\"\n\n    \"\"\"\n    PREFIX=\"\\$(echo \"$accession\" | head -c 6)\"\n    FTP_PATH=\"ftp://ftp.sra.ebi.ac.uk/vol1/fastq/\\${PREFIX}\"\n    SAMPLE=$accession\n\n    if [[ \"\\${#SAMPLE}\" == \"9\" ]]; then\n      FTP_PATH=\"\\${FTP_PATH}/$accession/$accession\"\n    elif [[ \"\\${#SAMPLE}\" == \"10\" ]]; then\n      SUFFIX=\"\\${SAMPLE: -1}\" \n      FTP_PATH=\"\\${FTP_PATH}/00\\${SUFFIX}/$accession/$accession\"\n    elif [[ \"\\${#SAMPLE}\" == \"11\" ]]; then\n      SUFFIX=\"\\${SAMPLE: -2}\" \n      FTP_PATH=\"\\${FTP_PATH}/0\\${SUFFIX}/$accession/$accession\"      \n    else    \n      SUFFIX=\"\\${SAMPLE: -3}\"    \n      FTP_PATH=\"\\${FTP_PATH}/\\${SUFFIX}/$accession/$accession\"\n    fi\n\n    echo \\$SAMPLE\n    echo \\$FTP_PATH\n\n    if [ \"$isSingle\" = true ] ; then\n      {\n        wget \"\\${FTP_PATH}.fastq.gz\"\n      } || {\n        wget \"\\${FTP_PATH}_1.fastq.gz\" \n        mv ${accession}_1.fastq.gz ${accession}.fastq.gz\n      }\n    else\n      wget \"\\${FTP_PATH}_1.fastq.gz\"\n      wget \"\\${FTP_PATH}_2.fastq.gz\"\n    fi\n    \"\"\"\n  }",
        "nb_lignes_process": 48,
        "string_script": "    output_filename = params.singleEnd ? \"${accession}.fastq.gz\" : \"${accession}_{1,2}.fastq.gz\"\n    isSingle = params.singleEnd ? \"true\" : \"false\"\n\n    \"\"\"\n    PREFIX=\"\\$(echo \"$accession\" | head -c 6)\"\n    FTP_PATH=\"ftp://ftp.sra.ebi.ac.uk/vol1/fastq/\\${PREFIX}\"\n    SAMPLE=$accession\n\n    if [[ \"\\${#SAMPLE}\" == \"9\" ]]; then\n      FTP_PATH=\"\\${FTP_PATH}/$accession/$accession\"\n    elif [[ \"\\${#SAMPLE}\" == \"10\" ]]; then\n      SUFFIX=\"\\${SAMPLE: -1}\" \n      FTP_PATH=\"\\${FTP_PATH}/00\\${SUFFIX}/$accession/$accession\"\n    elif [[ \"\\${#SAMPLE}\" == \"11\" ]]; then\n      SUFFIX=\"\\${SAMPLE: -2}\" \n      FTP_PATH=\"\\${FTP_PATH}/0\\${SUFFIX}/$accession/$accession\"      \n    else    \n      SUFFIX=\"\\${SAMPLE: -3}\"    \n      FTP_PATH=\"\\${FTP_PATH}/\\${SUFFIX}/$accession/$accession\"\n    fi\n\n    echo \\$SAMPLE\n    echo \\$FTP_PATH\n\n    if [ \"$isSingle\" = true ] ; then\n      {\n        wget \"\\${FTP_PATH}.fastq.gz\"\n      } || {\n        wget \"\\${FTP_PATH}_1.fastq.gz\" \n        mv ${accession}_1.fastq.gz ${accession}.fastq.gz\n      }\n    else\n      wget \"\\${FTP_PATH}_1.fastq.gz\"\n      wget \"\\${FTP_PATH}_2.fastq.gz\"\n    fi\n    \"\"\"",
        "nb_lignes_script": 35,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "accession_ids_ftp"
        ],
        "nb_inputs": 1,
        "outputs": [
            "raw_reads_fastqc",
            "raw_reads_trimmomatic"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "publishDir \"${params.outdir}/process-logs/${task.process}/${accession}/\", pattern: \"command-logs-*\", mode: 'copy'",
            "tag \"${accession}\"",
            "label 'tiny_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "in2csv": {
        "name_process": "in2csv",
        "string_process": " process in2csv {\n    label 'tiny_memory'\n\n    input:\n    file(manifest) from ch_gtex_gen3_manifest\n\n    output:\n    file(\"*.csv\") into ch_gtex_gen3_manifest_csv\n\n    script:\n    \"\"\"\n    filename=\\$(basename $manifest .json)\n    in2csv $manifest > \\${filename}.csv\n    \"\"\"\n  }",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    filename=\\$(basename $manifest .json)\n    in2csv $manifest > \\${filename}.csv\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_gtex_gen3_manifest"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_gtex_gen3_manifest_csv"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "label 'tiny_memory'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_manifest": {
        "name_process": "filter_manifest",
        "string_process": " process filter_manifest {\n    label \"tiny_memory\"\n    publishDir \"${params.outdir}/manifest\"\n    publishDir \"${params.outdir}\", pattern: \"*.txt\"\n\n    input:\n    file(manifest) from ch_gtex_gen3_manifest_csv\n    file(reads) from ch_gtex_gen3_reads\n\n    output:\n    file(\"*.txt\") optional true\n    file(\"filtered_manifest.csv\") into ch_gtex_gen3_filtered_manifest_csv\n\n    script:\n    optional_reads = params.reads ? \"$reads\": \"PASS\"\n    \"\"\"\n    filter_manifest.py $manifest $optional_reads\n    \"\"\"\n  }",
        "nb_lignes_process": 17,
        "string_script": "    optional_reads = params.reads ? \"$reads\": \"PASS\"\n    \"\"\"\n    filter_manifest.py $manifest $optional_reads\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_gtex_gen3_manifest_csv",
            "ch_gtex_gen3_reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_gtex_gen3_filtered_manifest_csv"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "label \"tiny_memory\"",
            "publishDir \"${params.outdir}/manifest\"",
            "publishDir \"${params.outdir}\", pattern: \"*.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "gen3_drs_fasp": {
        "name_process": "gen3_drs_fasp",
        "string_process": " process gen3_drs_fasp {\n      tag \"${file_name}\"\n      label 'low_memory'\n      publishDir \"${params.outdir}/process-logs/${task.process}/${file(file_name).baseName}\", pattern: \"command-logs-*\", mode: 'copy'\n\n      input:\n      set val(md5sum), val(file_name), val(obj_id), val(file_size) from ch_gtex_gen3_ids\n      each file(key_file) from key_file\n      each file(genome_fasta) from ch_genome_fasta\n      \n      output:\n      set stdout, file(\"*.bam\"), val(false) into bamtofastq\n      file(\"command-logs-*\") optional true\n      \n      script:\n      \"\"\"\n      sample_name=\\$(echo ${file_name} | cut -f1 -d\".\")\n      \n      drs_url=\\$(python /fasp-scripts/fasp/scripts/get_drs_url.py ${obj_id} gcp_id ${key_file})\n      signed_url=\\$(echo \\$drs_url | awk '\\$1=\"\";1')\n      \n      if [[ \\$signed_url == *\".bam\"* ]]; then\n          wget -O \\${sample_name}.bam \\$(echo \\$signed_url)\n          file_md5sum=\\$(md5sum \\${sample_name}.bam)\n          if [[ ! \"\\$file_md5sum\" =~ ${md5sum} ]]; then echo \"md5 sum verification failed\" > md5sum_check.log; exit 1; else echo \"file is good\" > md5sum_check.log; fi\n      fi\n      \n      if [[ \\$signed_url == *\".cram\"* ]]; then\n          wget -O \\${sample_name}.cram \\$(echo \\$signed_url)\n          file_md5sum=\\$(md5sum \\${sample_name}.cram)\n          if [[ ! \"\\$file_md5sum\" =~ ${md5sum} ]]; then exit 1; else echo \"file is good\"; fi\n          samtools view -b -T ${genome_fasta} -o \\${sample_name}.bam \\${sample_name}.cram\n      fi\n\n      # save .command.* logs\n      ${params.savescript}\n\n      printf \"\\$sample_name\"\n      \"\"\"\n  }",
        "nb_lignes_process": 38,
        "string_script": "      \"\"\"\n      sample_name=\\$(echo ${file_name} | cut -f1 -d\".\")\n      \n      drs_url=\\$(python /fasp-scripts/fasp/scripts/get_drs_url.py ${obj_id} gcp_id ${key_file})\n      signed_url=\\$(echo \\$drs_url | awk '\\$1=\"\";1')\n      \n      if [[ \\$signed_url == *\".bam\"* ]]; then\n          wget -O \\${sample_name}.bam \\$(echo \\$signed_url)\n          file_md5sum=\\$(md5sum \\${sample_name}.bam)\n          if [[ ! \"\\$file_md5sum\" =~ ${md5sum} ]]; then echo \"md5 sum verification failed\" > md5sum_check.log; exit 1; else echo \"file is good\" > md5sum_check.log; fi\n      fi\n      \n      if [[ \\$signed_url == *\".cram\"* ]]; then\n          wget -O \\${sample_name}.cram \\$(echo \\$signed_url)\n          file_md5sum=\\$(md5sum \\${sample_name}.cram)\n          if [[ ! \"\\$file_md5sum\" =~ ${md5sum} ]]; then exit 1; else echo \"file is good\"; fi\n          samtools view -b -T ${genome_fasta} -o \\${sample_name}.bam \\${sample_name}.cram\n      fi\n\n      # save .command.* logs\n      ${params.savescript}\n\n      printf \"\\$sample_name\"\n      \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ch_gtex_gen3_ids",
            "key_file",
            "ch_genome_fasta"
        ],
        "nb_inputs": 3,
        "outputs": [
            "bamtofastq"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"${file_name}\"",
            "label 'low_memory'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/${file(file_name).baseName}\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "get_tcga_bams": {
        "name_process": "get_tcga_bams",
        "string_process": " process get_tcga_bams {\n    tag \"${accession}\"\n    label 'low_memory'\n    publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n    \n    input:\n    val(accession) from accession_ids\n    each file(key_file) from key_file\n    \n    output:\n    set val(accession), file(\"*.bam\"), env(singleEnd) into bamtofastq\n    file(\"${accession}_paired_info.csv\") into paired_info\n\t  file(\"command-logs-*\") optional true\n\n    script:\n                                                               \n                                                                             \n    key_flag = key_file.name != 'no_key_file.txt' ? \"-t $key_file\" : \"\"\n    \"\"\"\n    gdc-client download $accession $key_flag\n    mv $accession/*.bam .\n\n    # Check if reads are single or paired-end\n    n_single_reads=\\$(samtools view -c -F 1 *.bam)\n    n_paired_reads=\\$(samtools view -c -f 1 *.bam)\n\n    singleEnd=true\n    if (( \\$n_paired_reads > \\$n_single_reads )); then\n        singleEnd=false\n    fi\n\n    echo \"sample_id,n_single_reads,n_paired_reads,single_end\" > ${accession}_paired_info.csv\n    echo \"$accession,\\$n_single_reads,\\$n_paired_reads,\\$singleEnd\" >> ${accession}_paired_info.csv\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"\n  }",
        "nb_lignes_process": 36,
        "string_script": "    key_flag = key_file.name != 'no_key_file.txt' ? \"-t $key_file\" : \"\"\n    \"\"\"\n    gdc-client download $accession $key_flag\n    mv $accession/*.bam .\n\n    # Check if reads are single or paired-end\n    n_single_reads=\\$(samtools view -c -F 1 *.bam)\n    n_paired_reads=\\$(samtools view -c -f 1 *.bam)\n\n    singleEnd=true\n    if (( \\$n_paired_reads > \\$n_single_reads )); then\n        singleEnd=false\n    fi\n\n    echo \"sample_id,n_single_reads,n_paired_reads,single_end\" > ${accession}_paired_info.csv\n    echo \"$accession,\\$n_single_reads,\\$n_paired_reads,\\$singleEnd\" >> ${accession}_paired_info.csv\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "accession_ids",
            "key_file"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bamtofastq",
            "paired_info"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"${accession}\"",
            "label 'low_memory'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bamtofastq": {
        "name_process": "bamtofastq",
        "string_process": " process bamtofastq {\n    tag \"${name}\"\n    label 'mid_memory'\n    publishDir \"${params.outdir}/process-logs/${task.process}/${name}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n    input:\n    set val(name), file(bam), val(singleEnd) from bamtofastq\n    \n    output:\n    set val(name), file(\"*.fastq.gz\"), val(singleEnd) into raw_reads_fastqc, raw_reads_trimmomatic\n\t  file(\"command-logs-*\") optional true\n\n    script:\n                                       \n                                   \n    def usable_mem = (\"${(task.memory.toBytes() - 6000000000) / task.cpus}\" > 2000000000) ? 'true' : 'false'\n    def per_thread_mem = (task.memory && usable_mem) ? \"${(task.memory.toBytes() - 6000000000) / (task.cpus * 2)}\" : ''\n                \n    singleEnd=singleEnd.toBoolean()\n    if (singleEnd) {\n      \"\"\"\n      bedtools bamtofastq -i $bam -fq ${name}.fastq\n      pigz *.fastq\n\n      # save .command.* logs\n      ${params.savescript}\n      \"\"\"\n    } else {\n      \"\"\"\n      samtools sort -@ ${task.cpus} -m ${per_thread_mem} -n $bam > ${name}_sorted.bam\n      bedtools bamtofastq \\\n        -i ${name}_sorted.bam \\\n        -fq ${name}_1.fastq \\\n        -fq2 ${name}_2.fastq\n      pigz *.fastq\n\n      # save .command.* logs\n      ${params.savescript}\n      \"\"\"\n    }\n  }",
        "nb_lignes_process": 39,
        "string_script": "    def usable_mem = (\"${(task.memory.toBytes() - 6000000000) / task.cpus}\" > 2000000000) ? 'true' : 'false'\n    def per_thread_mem = (task.memory && usable_mem) ? \"${(task.memory.toBytes() - 6000000000) / (task.cpus * 2)}\" : ''\n                \n    singleEnd=singleEnd.toBoolean()\n    if (singleEnd) {\n      \"\"\"\n      bedtools bamtofastq -i $bam -fq ${name}.fastq\n      pigz *.fastq\n\n      # save .command.* logs\n      ${params.savescript}\n      \"\"\"\n    } else {\n      \"\"\"\n      samtools sort -@ ${task.cpus} -m ${per_thread_mem} -n $bam > ${name}_sorted.bam\n      bedtools bamtofastq \\\n        -i ${name}_sorted.bam \\\n        -fq ${name}_1.fastq \\\n        -fq2 ${name}_2.fastq\n      pigz *.fastq\n\n      # save .command.* logs\n      ${params.savescript}\n      \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "BEDTools",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bamtofastq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "raw_reads_fastqc",
            "raw_reads_trimmomatic"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"${name}\"",
            "label 'mid_memory'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/${name}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": " process fastqc {\n    tag \"$name\"\n    label 'low_memory'\n    publishDir \"${params.outdir}/QC/raw\", pattern: \"*_fastqc.{zip,html}\", mode: 'copy'\n    publishDir \"${params.outdir}/process-logs/${task.process}/${name}\", pattern: \"command-logs-*\", mode: 'copy'\n\n    input:\n    set val(name), file(reads), val(singleEnd) from raw_reads_fastqc\n\n    output:\n    file \"*_fastqc.{zip,html}\" into fastqc_results_raw\n    file(\"command-logs-*\") optional true\n\n    script:\n    \"\"\"\n    fastqc --casava --threads $task.cpus $reads\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"\n  }",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    fastqc --casava --threads $task.cpus $reads\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "raw_reads_fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_results_raw"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"$name\"",
            "label 'low_memory'",
            "publishDir \"${params.outdir}/QC/raw\", pattern: \"*_fastqc.{zip,html}\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/${name}\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "trimmomatic": {
        "name_process": "trimmomatic",
        "string_process": "\nprocess trimmomatic {\n        publishDir \"trimmed_fastq\", pattern:'*.*', mode:'copy'\n        input:\n\tset file(read1), file(read2) from fastq\n        output:\n        file \"*_trim.fastq.gz\" into trimmed_fastq\n        script:\n        if (params.reads == \"SE\") {\n        \"\"\"\n\techo true\n        \"\"\"\n\t}\n\telse {\n\t\"\"\"\n        trim1=\\$(echo $read1 | sed 's/.fastq.gz/_trim.fastq.gz/g' | sed 's/.fq/_trim.fastq.gz/g')\n        trim2=\\$(echo $read2 | sed 's/.fastq.gz/_trim.fastq.gz/g' | sed 's/.fq/_trim.fastq.gz/g')\n        sample=\\$(echo $read2 | sed 's/_R1_001.fastq.gz//g' | sed 's/_R1.fastq.gz//g' | sed 's/_R1.fq//g')\n        java -jar $path2trim PE -threads $task.cpus $read1 $read2 \\$trim1 ${read1}_unpaired \\$trim2 ${read2}_unpaired ILLUMINACLIP:${adapters}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:$readlength CROP:$readlength &> \\${sample}_log.txt\n        \"\"\"\n\t}\n}",
        "nb_lignes_process": 20,
        "string_script": "        if (params.reads == \"SE\") {\n        \"\"\"\n\techo true\n        \"\"\"\n\t}\n\telse {\n\t\"\"\"\n        trim1=\\$(echo $read1 | sed 's/.fastq.gz/_trim.fastq.gz/g' | sed 's/.fq/_trim.fastq.gz/g')\n        trim2=\\$(echo $read2 | sed 's/.fastq.gz/_trim.fastq.gz/g' | sed 's/.fq/_trim.fastq.gz/g')\n        sample=\\$(echo $read2 | sed 's/_R1_001.fastq.gz//g' | sed 's/_R1.fastq.gz//g' | sed 's/_R1.fq//g')\n        java -jar $path2trim PE -threads $task.cpus $read1 $read2 \\$trim1 ${read1}_unpaired \\$trim2 ${read2}_unpaired ILLUMINACLIP:${adapters}:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:$readlength CROP:$readlength &> \\${sample}_log.txt\n        \"\"\"\n\t}",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmed_fastq"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "publishDir \"trimmed_fastq\", pattern:'*.*', mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc_trimmed": {
        "name_process": "fastqc_trimmed",
        "string_process": " process fastqc_trimmed {\n    tag \"$name\"\n    label 'low_memory'\n    publishDir \"${params.outdir}/QC/trimmed\", pattern: \"*_fastqc.{zip,html}\", mode: 'copy'\n    publishDir \"${params.outdir}/process-logs/${task.process}/${name}\", pattern: \"command-logs-*\", mode: 'copy'\n\n    input:\n    set val(name), file(reads), val(singleEnd) from trimmed_reads_fastqc\n\n    output:\n    file \"*_fastqc.{zip,html}\" into fastqc_results_trimmed\n    file(\"command-logs-*\") optional true\n\n    script:\n    \"\"\"\n    fastqc --casava --threads $task.cpus $reads\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"\n  }",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    fastqc --casava --threads $task.cpus $reads\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "trimmed_reads_fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_results_trimmed"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"$name\"",
            "label 'low_memory'",
            "publishDir \"${params.outdir}/QC/trimmed\", pattern: \"*_fastqc.{zip,html}\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/${name}\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "star": {
        "name_process": "star",
        "string_process": "\nprocess star {\n        publishDir \"star_out\", pattern:'*.*' , mode: 'copy'\n        input:\n\tset file(trim1), file(trim2) from trimmed_fastq\n        output:\n        file \"*.bam\" into star_out1, star_out2\n        script:\n        \"\"\"\n\tmodule load STAR/2.5.3\n        module load samtools/1.3.1\n        sample=\\$(echo $trim1 | sed 's/_R1_001_trim.fastq.gz//g' | sed 's/_R1_trim.fastq.gz//g' )\n        overhang=\\$(($readlength -1))\n        STAR --genomeDir $genomeDir --readFilesIn $trim1 $trim2 --readFilesCommand zcat --readMatesLengthsIn NotEqual --outFileNamePrefix \\$sample. --runThreadN $task.cpus -sjdbGTFfile $refgtf --sjdbOverhang \\$overhang --alignSJoverhangMin 8 --outFilterIntronMotifs RemoveNoncanonicalUnannotated --outFilterMismatchNmax 2 --outFilterMultimapNmax 20  --outReadsUnmapped Fastx --alignMatesGapMax 1000000 --outSAMattributes All --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 100000000000  --outBAMsortingThreadN $task.cpus --outFilterType BySJout --twopassMode Basic --alignEndsType EndToEnd\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n\tmodule load STAR/2.5.3\n        module load samtools/1.3.1\n        sample=\\$(echo $trim1 | sed 's/_R1_001_trim.fastq.gz//g' | sed 's/_R1_trim.fastq.gz//g' )\n        overhang=\\$(($readlength -1))\n        STAR --genomeDir $genomeDir --readFilesIn $trim1 $trim2 --readFilesCommand zcat --readMatesLengthsIn NotEqual --outFileNamePrefix \\$sample. --runThreadN $task.cpus -sjdbGTFfile $refgtf --sjdbOverhang \\$overhang --alignSJoverhangMin 8 --outFilterIntronMotifs RemoveNoncanonicalUnannotated --outFilterMismatchNmax 2 --outFilterMultimapNmax 20  --outReadsUnmapped Fastx --alignMatesGapMax 1000000 --outSAMattributes All --outSAMtype BAM SortedByCoordinate --limitBAMsortRAM 100000000000  --outBAMsortingThreadN $task.cpus --outFilterType BySJout --twopassMode Basic --alignEndsType EndToEnd\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "trimmed_fastq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "star_out1",
            "star_out2"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "publishDir \"star_out\", pattern:'*.*' , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "stringtie": {
        "name_process": "stringtie",
        "string_process": "\nprocess stringtie {\n        publishDir \"stringtie_out\", pattern: '*.gtf', mode: 'copy'\n        input:\n\tfile(sample) from star_out2\n        output:\n        file('*.for.rMATS.gtf') into stringtie_out\n        file('*.gtf')\n        script:\n        \"\"\"\n\tmodule load compsci\n        samplename=\\$(basename $sample .Aligned.sortedByCoord.out.bam)\n        /projects/anczukow-lab/tools/stringtie-1.3.6/stringtie $sample -G $refgtf -o \\$samplename.for.DGE.gtf --rf -e -a 8 -p $task.cpus\n        /projects/anczukow-lab/tools/stringtie-1.3.6/stringtie $sample -G $refgtf -o \\$samplename.for.rMATS.gtf --rf -a 8 -p $task.cpus\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n\tmodule load compsci\n        samplename=\\$(basename $sample .Aligned.sortedByCoord.out.bam)\n        /projects/anczukow-lab/tools/stringtie-1.3.6/stringtie $sample -G $refgtf -o \\$samplename.for.DGE.gtf --rf -e -a 8 -p $task.cpus\n        /projects/anczukow-lab/tools/stringtie-1.3.6/stringtie $sample -G $refgtf -o \\$samplename.for.rMATS.gtf --rf -a 8 -p $task.cpus\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "star_out2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "stringtie_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "publishDir \"stringtie_out\", pattern: '*.gtf', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "prep_de": {
        "name_process": "prep_de",
        "string_process": " process prep_de {\n    label 'mid_memory'\n    publishDir \"${params.outdir}/star_mapped/count_matrix\", pattern: \"{sample_lst.txt,*gene_count_matrix.csv,*transcript_count_matrix.csv}\", mode: 'copy'\n    publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n    input:\n    file(gtf) from stringtie_dge_gtf.collect()\n\n    output:\n    file \"sample_lst.txt\"\n    file \"*gene_count_matrix.csv\"\n    file \"*transcript_count_matrix.csv\"\n    file(\"command-logs-*\") optional true\n\n    script: \n    \"\"\"\n    echo \"${gtf.join(\"\\n\").toString().replace(\"_for_DGE.gtf\", \"\")}\" > samples.txt\n    echo \"${gtf.join(\"\\n\")}\" > gtfs.txt\n    paste -d ' ' samples.txt gtfs.txt > sample_lst.txt\n    prepDE.py -i sample_lst.txt  -l $params.readlength \\\n              -g ${run_prefix}_gene_count_matrix.csv -t ${run_prefix}_transcript_count_matrix.csv\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"\n  }",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    echo \"${gtf.join(\"\\n\").toString().replace(\"_for_DGE.gtf\", \"\")}\" > samples.txt\n    echo \"${gtf.join(\"\\n\")}\" > gtfs.txt\n    paste -d ' ' samples.txt gtfs.txt > sample_lst.txt\n    prepDE.py -i sample_lst.txt  -l $params.readlength \\\n              -g ${run_prefix}_gene_count_matrix.csv -t ${run_prefix}_transcript_count_matrix.csv\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "stringtie_dge_gtf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "label 'mid_memory'",
            "publishDir \"${params.outdir}/star_mapped/count_matrix\", pattern: \"{sample_lst.txt,*gene_count_matrix.csv,*transcript_count_matrix.csv}\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "stringtie_merge": {
        "name_process": "stringtie_merge",
        "string_process": " process stringtie_merge {\n    label 'mid_memory'\n    publishDir \"${params.outdir}/star_mapped/stringtie_merge\", pattern: \"{gffcmp.annotated.corrected.gtf,gffcmp.*}\", mode: 'copy'\n    publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n    input:\n    file('*.gtf') from stringtie_gtf.collect()\n    file(gtf) from gtf_stringtie_merge\n\n    output:\n    file \"gffcmp.annotated.corrected.gtf\" into merged_gtf\n    file \"gffcmp.*\" into gffcmp\n    file(\"command-logs-*\") optional true\n\n    script:\n    \"\"\"\n    ls -1 *.gtf > assembly_gtf_list.txt\n    stringtie --merge -G $gtf -o stringtie_merged.gtf assembly_gtf_list.txt -p $task.cpus\n    gffcompare -R -V -r $gtf stringtie_merged.gtf\n    correct_gene_names.R\n    gffread -E gffcmp.annotated.corrected.gff -T -o gffcmp.annotated.corrected.gtf\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"\n  }",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    ls -1 *.gtf > assembly_gtf_list.txt\n    stringtie --merge -G $gtf -o stringtie_merged.gtf assembly_gtf_list.txt -p $task.cpus\n    gffcompare -R -V -r $gtf stringtie_merged.gtf\n    correct_gene_names.R\n    gffread -E gffcmp.annotated.corrected.gff -T -o gffcmp.annotated.corrected.gtf\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "StringTie",
            "gffcompare",
            "gffread"
        ],
        "tools_url": [
            "https://bio.tools/stringtie",
            "https://bio.tools/gffcompare",
            "https://bio.tools/gffread"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            },
            {
                "name": "gffcompare",
                "uri": "https://bio.tools/gffcompare",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Program for comparing, annotating, merging and tracking transcripts in GFF files.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/gff.shtml"
            },
            {
                "name": "gffread",
                "uri": "https://bio.tools/gffread",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "program for filtering, converting and manipulating GFF files",
                "homepage": "https://ccb.jhu.edu/software/stringtie/gff.shtml"
            }
        ],
        "inputs": [
            "stringtie_gtf",
            "gtf_stringtie_merge"
        ],
        "nb_inputs": 2,
        "outputs": [
            "merged_gtf",
            "gffcmp"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "label 'mid_memory'",
            "publishDir \"${params.outdir}/star_mapped/stringtie_merge\", pattern: \"{gffcmp.annotated.corrected.gtf,gffcmp.*}\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "rmats": {
        "name_process": "rmats",
        "string_process": " process rmats {\n      tag \"$rmats_id ${gtf.simpleName}\"\n      label 'high_memory'\n      publishDir \"${params.outdir}/rMATS_out/${rmats_id}_${gtf.simpleName}\", pattern: \"{*.txt,*.csv,tmp/*_read_outcomes_by_bam.txt}\", mode: 'copy'\n      publishDir \"${params.outdir}/process-logs/${task.process}/${rmats_id}_${gtf.simpleName}\", pattern: \"command-logs-*\", mode: 'copy'\n\n      when:\n      !params.skiprMATS\n\n      input:\n      set val(rmats_id), file(bams), file(b2_bams), val(b1_only) from bams\n      each file(gtf) from gtf_rmats\n\n      output:\n      file \"*.{txt,csv}\" into rmats_out\n      file \"tmp/*_read_outcomes_by_bam.txt\"\n      file(\"command-logs-*\") optional true\n\n      script:\n      libType = params.stranded ? params.stranded == 'first-strand' ? 'fr-firststrand' : 'fr-secondstrand' : 'fr-unstranded'\n      mode = params.singleEnd ? 'single' : 'paired'\n      variable_read_length_flag = variable_read_length ? '--variable-read-length' : ''\n      statoff = params.statoff ? '--statoff' : ''\n      paired_stats = params.paired_stats ? '--paired-stats' : ''\n      novelSS = params.novelSS ? '--novelSS' : ''   \n      allow_clipping = params.soft_clipping ? '--allow-clipping' : ''\n      if (b1_only) {\n        b1_bams = bams.join(\",\")\n        b2_cmd = ''\n        b2_flag = ''\n        b2_config_cmd = ''\n      } else {\n        b1_bams = bams.join(\",\")\n        b2_bams = b2_bams.join(\",\")\n        b2_cmd = \"echo $b2_bams > b2.txt\"\n        b2_flag = \"--b2 b2.txt\"\n        b2_config_cmd = \"echo b2 b2.txt >> \\$rmats_config\"\n      }\n      \"\"\"\n      echo $b1_bams > b1.txt\n      $b2_cmd\n      rmats.py \\\n        --b1 b1.txt $b2_flag \\\n        --gtf $gtf \\\n        --od ./ \\\n        --tmp tmp \\\n        --libType $libType \\\n        -t $mode \\\n        --nthread $task.cpus \\\n        --readLength ${params.readlength} \\\n        --mil ${params.mil} \\\n        --mel ${params.mel} $variable_read_length_flag $statoff $paired_stats $novelSS $allow_clipping\n      rmats_config=\"config_for_rmats_and_postprocessing.txt\"\n      echo b1 b1.txt > \\$rmats_config\n      $b2_config_cmd\n      echo rmats_gtf       ${gtf} >> \\$rmats_config\n      echo ref_gtf         ${gtf} >> \\$rmats_config\n      echo fasta           ${params.assembly_name} >> \\$rmats_config\n      echo reads           ${params.singleEnd ? 'single' : 'paired'} >> \\$rmats_config\n      echo readlen         ${params.readlength} >> \\$rmats_config\n      echo rmats_id        ${rmats_id} >> \\$rmats_config\n      \n      LU_postprocessing.R\n\n      # save .command.* logs\n      ${params.savescript}\n      \"\"\"\n    }",
        "nb_lignes_process": 66,
        "string_script": "      libType = params.stranded ? params.stranded == 'first-strand' ? 'fr-firststrand' : 'fr-secondstrand' : 'fr-unstranded'\n      mode = params.singleEnd ? 'single' : 'paired'\n      variable_read_length_flag = variable_read_length ? '--variable-read-length' : ''\n      statoff = params.statoff ? '--statoff' : ''\n      paired_stats = params.paired_stats ? '--paired-stats' : ''\n      novelSS = params.novelSS ? '--novelSS' : ''   \n      allow_clipping = params.soft_clipping ? '--allow-clipping' : ''\n      if (b1_only) {\n        b1_bams = bams.join(\",\")\n        b2_cmd = ''\n        b2_flag = ''\n        b2_config_cmd = ''\n      } else {\n        b1_bams = bams.join(\",\")\n        b2_bams = b2_bams.join(\",\")\n        b2_cmd = \"echo $b2_bams > b2.txt\"\n        b2_flag = \"--b2 b2.txt\"\n        b2_config_cmd = \"echo b2 b2.txt >> \\$rmats_config\"\n      }\n      \"\"\"\n      echo $b1_bams > b1.txt\n      $b2_cmd\n      rmats.py \\\n        --b1 b1.txt $b2_flag \\\n        --gtf $gtf \\\n        --od ./ \\\n        --tmp tmp \\\n        --libType $libType \\\n        -t $mode \\\n        --nthread $task.cpus \\\n        --readLength ${params.readlength} \\\n        --mil ${params.mil} \\\n        --mel ${params.mel} $variable_read_length_flag $statoff $paired_stats $novelSS $allow_clipping\n      rmats_config=\"config_for_rmats_and_postprocessing.txt\"\n      echo b1 b1.txt > \\$rmats_config\n      $b2_config_cmd\n      echo rmats_gtf       ${gtf} >> \\$rmats_config\n      echo ref_gtf         ${gtf} >> \\$rmats_config\n      echo fasta           ${params.assembly_name} >> \\$rmats_config\n      echo reads           ${params.singleEnd ? 'single' : 'paired'} >> \\$rmats_config\n      echo readlen         ${params.readlength} >> \\$rmats_config\n      echo rmats_id        ${rmats_id} >> \\$rmats_config\n      \n      LU_postprocessing.R\n\n      # save .command.* logs\n      ${params.savescript}\n      \"\"\"",
        "nb_lignes_script": 47,
        "language_script": "bash",
        "tools": [
            "MoDEL"
        ],
        "tools_url": [
            "https://bio.tools/model"
        ],
        "tools_dico": [
            {
                "name": "MoDEL",
                "uri": "https://bio.tools/model",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2426",
                                    "term": "Modelling and simulation"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0842",
                                "term": "Identifier"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2080",
                                "term": "Database search results"
                            }
                        ]
                    }
                ],
                "description": "Database of protein Molecular Dynamics simulations, with 1800 trajectories representing different structural clusters of the PDB.",
                "homepage": "http://mmb.irbbarcelona.org/MoDEL"
            }
        ],
        "inputs": [
            "bams",
            "gtf_rmats"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rmats_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"$rmats_id ${gtf.simpleName}\"",
            "label 'high_memory'",
            "publishDir \"${params.outdir}/rMATS_out/${rmats_id}_${gtf.simpleName}\", pattern: \"{*.txt,*.csv,tmp/*_read_outcomes_by_bam.txt}\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/${rmats_id}_${gtf.simpleName}\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "!params.skiprMATS",
        "stub": ""
    },
    "paired_rmats": {
        "name_process": "paired_rmats",
        "string_process": "\nprocess paired_rmats {\n    tag \"paired_rmats: ${sample1Name}_${sample2Name}\"\n    label 'rmats'\n\n    publishDir = [path: \"${params.output}/paired_rmats\", mode: 'copy']\n\n    input:\n    set val(sample1Name), file(sample1Bam), val(sample2Name), file(sample2Bam) from pairedSamples\n    file(gencodeGtf) from gencodeFile\n\n    output:\n    set val(sample1Name), val(sample2Name), file('rmats_output') into rmatsCounts\n    file 'rmats_output/ASEvents/fromGTF*' into fromGtf\n\n    script:\n    \"\"\"\n    RNASeq-MATS.py \\\n        -b1 $sample1Bam \\\n        -b2 $sample2Bam \\\n        -gtf $gencodeGtf \\\n        -t ${params.readType} \\\n        -len ${params.readLength} \\\n        -c ${params.cutoffSplicingDifference} \\\n        -analysis ${params.analysisType} \\\n        -novelSS ${params.novelDetectionFlag} \\\n        -a ${params.anchorLength} \\\n        -keepTemp \\\n        -o rmats_output\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    RNASeq-MATS.py \\\n        -b1 $sample1Bam \\\n        -b2 $sample2Bam \\\n        -gtf $gencodeGtf \\\n        -t ${params.readType} \\\n        -len ${params.readLength} \\\n        -c ${params.cutoffSplicingDifference} \\\n        -analysis ${params.analysisType} \\\n        -novelSS ${params.novelDetectionFlag} \\\n        -a ${params.anchorLength} \\\n        -keepTemp \\\n        -o rmats_output\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pairedSamples",
            "gencodeFile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rmatsCounts",
            "fromGtf"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"paired_rmats: ${sample1Name}_${sample2Name}\"",
            "label 'rmats'",
            "publishDir = [path: \"${params.output}/paired_rmats\", mode: 'copy']"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": " process multiqc {\n    label 'mega_memory'\n    publishDir \"${params.outdir}/MultiQC\", pattern: \"{*multiqc_report.html,*_data/*,trimmomatic}\", mode: 'copy'\n    publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n    when:\n    !params.skipMultiQC\n\n    input:\n    file (fastqc:'fastqc/*') from fastqc_results_raw.collect().ifEmpty([])\n    file (fastqc:'fastqc/*') from fastqc_results_trimmed.collect().ifEmpty([])\n    file ('alignment/*') from alignment_logs.collect().ifEmpty([])\n    file (multiqc_config) from multiqc_config\n    file ('trimmomatic/*') from trimmomatic_logs.collect()\n\n    output:\n    file \"*multiqc_report.html\" into multiqc_report\n    file \"*_data/*\"\n    file ('trimmomatic')\n    file(\"command-logs-*\") optional true\n\n    script:\n    \"\"\"\n    multiqc . --config $multiqc_config -m fastqc -m star -m trimmomatic\n    cp multiqc_report.html ${run_prefix}_multiqc_report.html\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"\n  }",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    multiqc . --config $multiqc_config -m fastqc -m star -m trimmomatic\n    cp multiqc_report.html ${run_prefix}_multiqc_report.html\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "fastqc_results_raw",
            "fastqc_results_trimmed",
            "alignment_logs",
            "multiqc_config",
            "trimmomatic_logs"
        ],
        "nb_inputs": 5,
        "outputs": [
            "multiqc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "label 'mega_memory'",
            "publishDir \"${params.outdir}/MultiQC\", pattern: \"{*multiqc_report.html,*_data/*,trimmomatic}\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "!params.skipMultiQC",
        "stub": ""
    },
    "collect_tool_versions_env1": {
        "name_process": "collect_tool_versions_env1",
        "string_process": "\nprocess collect_tool_versions_env1 {\n                                                                                                                                     \n                                                                \n    publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n    output:\n    file(\"tool_versions.txt\") into ch_tool_versions\n    file(\"command-logs-*\") optional true\n\n    script:\n    \"\"\"\n    touch tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep fastqc | tail -n 1 >> tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep trimmomatic | tail -n 1 >> tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep star | tail -n 1 >> tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep samtools | tail -n 1 >> tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep deeptools | tail -n 1 >> tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep multiqc | tail -n 1 >> tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep gffread | tail -n 1 >> tool_versions.txt\n    echo -e \"stringtie\" ' \\t\\t\\t\\t ' \\$(stringtie --version) >> tool_versions.txt\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    touch tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep fastqc | tail -n 1 >> tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep trimmomatic | tail -n 1 >> tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep star | tail -n 1 >> tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep samtools | tail -n 1 >> tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep deeptools | tail -n 1 >> tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep multiqc | tail -n 1 >> tool_versions.txt\n    conda list -n splicing-pipelines-nf | grep gffread | tail -n 1 >> tool_versions.txt\n    echo -e \"stringtie\" ' \\t\\t\\t\\t ' \\$(stringtie --version) >> tool_versions.txt\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "ANACONDA"
        ],
        "tools_url": [
            "https://bio.tools/anaconda"
        ],
        "tools_dico": [
            {
                "name": "ANACONDA",
                "uri": "https://bio.tools/anaconda",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3658",
                                    "term": "Statistical inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software package specially developed for the study of genes\u2019 primary structure. It uses gene sequences downloaded from public databases, as FASTA and GenBank, and it applies a set of statistical and visualization methods in different ways, to reveal information about codon context, codon usage, nucleotide repeats within open reading frames (ORFeome) and others.",
                "homepage": "http://bioinformatics.ua.pt/software/anaconda/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ch_tool_versions"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "collect_tool_versions_env2": {
        "name_process": "collect_tool_versions_env2",
        "string_process": "\nprocess collect_tool_versions_env2 {\n    echo true\n    publishDir \"${params.outdir}/tool-versions/env2/\", pattern: \"[!command-logs-]*\", mode: 'copy'\n    publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n    input:\n    file(tool_versions) from ch_tool_versions\n\n    output:\n    file(\"tool_versions.txt\") into ch_all_tool_versions\n    file(\"command-logs-*\") optional true\n\n    script:\n    \"\"\"\n    conda list -n rmats4 | grep rmats | tail -n 1 >> tool_versions.txt\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    conda list -n rmats4 | grep rmats | tail -n 1 >> tool_versions.txt\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "ANACONDA"
        ],
        "tools_url": [
            "https://bio.tools/anaconda"
        ],
        "tools_dico": [
            {
                "name": "ANACONDA",
                "uri": "https://bio.tools/anaconda",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3658",
                                    "term": "Statistical inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software package specially developed for the study of genes\u2019 primary structure. It uses gene sequences downloaded from public databases, as FASTA and GenBank, and it applies a set of statistical and visualization methods in different ways, to reveal information about codon context, codon usage, nucleotide repeats within open reading frames (ORFeome) and others.",
                "homepage": "http://bioinformatics.ua.pt/software/anaconda/"
            }
        ],
        "inputs": [
            "ch_tool_versions"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_all_tool_versions"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "echo true",
            "publishDir \"${params.outdir}/tool-versions/env2/\", pattern: \"[!command-logs-]*\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bam2fastq": {
        "name_process": "bam2fastq",
        "string_process": " process bam2fastq {\n                container 'gcr.io/jax-awilliams-ctrl-32/star'\n                cpus = 4\n                publishDir \"fastq\", pattern:'*.*', mode:'copy'\n                input:\n                set file(bamfile), val(output_name) from bam_entries\n                output:\n                file \"*.fastq.gz\" into fastq\n                script:\n                \"\"\"\n                samtools fastq -@ ${task.cpus} -1 ${output_name}_R1.fastq.gz -2 ${output_name}_R2.fastq.gz $bamfile\n                \"\"\"\n                }",
        "nb_lignes_process": 11,
        "string_script": "                \"\"\"\n                samtools fastq -@ ${task.cpus} -1 ${output_name}_R1.fastq.gz -2 ${output_name}_R2.fastq.gz $bamfile\n                \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_entries"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastq"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "container 'gcr.io/jax-awilliams-ctrl-32/star'",
            "cpus = 4",
            "publishDir \"fastq\", pattern:'*.*', mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "bam2bw": {
        "name_process": "bam2bw",
        "string_process": "\nprocess bam2bw {\n        publishDir \"bw_files\", pattern: '*fin.bw', mode: 'copy'\n        input:\n\tfile(sample) from star_out1\n        file(chrLen) from genomeDirchr\n        output:\n        file \"*fin.bw\" into bw_files\n        script:\n        \"\"\"\n\tmodule load compsci\n        module load python/2.7.3\n        module load samtools/1.3.1\n        sample2=\\$(basename $sample .Aligned.sortedByCoord.out.bam)\n        samtools index ${sample}\n        bamCoverage -b ${sample} -o \\$sample2.bw\n        /opt/compsci/kent/bin/bigWigToWig \\$sample2.bw \\$sample2.tmp1.wig\n        grep -v bedGraph \\$sample2.tmp1.wig > \\$sample2.fin.wig\n        /opt/compsci/kent/bin/wigToBigWig \\$sample2.fin.wig ${chrLen} \\$sample2.fin.bw\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n\tmodule load compsci\n        module load python/2.7.3\n        module load samtools/1.3.1\n        sample2=\\$(basename $sample .Aligned.sortedByCoord.out.bam)\n        samtools index ${sample}\n        bamCoverage -b ${sample} -o \\$sample2.bw\n        /opt/compsci/kent/bin/bigWigToWig \\$sample2.bw \\$sample2.tmp1.wig\n        grep -v bedGraph \\$sample2.tmp1.wig > \\$sample2.fin.wig\n        /opt/compsci/kent/bin/wigToBigWig \\$sample2.fin.wig ${chrLen} \\$sample2.fin.bw\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "star_out1",
            "genomeDirchr"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bw_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "publishDir \"bw_files\", pattern: '*fin.bw', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "stringtiemerge": {
        "name_process": "stringtiemerge",
        "string_process": "\nprocess stringtiemerge {\n        publishDir 'merged_gtf', pattern:'*.gtf', mode:'copy'\n        input:\n\tfile refgtf\n        file('*.gtf') from stringtie_out.collect()\n        val outgtf\n        output:\n        file('*.gtf')\n        \"\"\"\n\tmodule load compsci\n        module load it-modules\n        ls -1  *.gtf >  list_of_gtf_files_to_merge.txt\n        /projects/anczukow-lab/tools/stringtie-1.3.6/stringtie --merge -p 8 -o  $outgtf -G $refgtf list_of_gtf_files_to_merge.txt\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n\tmodule load compsci\n        module load it-modules\n        ls -1  *.gtf >  list_of_gtf_files_to_merge.txt\n        /projects/anczukow-lab/tools/stringtie-1.3.6/stringtie --merge -p 8 -o  $outgtf -G $refgtf list_of_gtf_files_to_merge.txt\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "refgtf",
            "stringtie_out",
            "outgtf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "publishDir 'merged_gtf', pattern:'*.gtf', mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "getAccession": {
        "name_process": "getAccession",
        "string_process": " process getAccession {\n        tag \"${accession}\"\n        \n        input:\n        val accession from accessionIDs\n        file keyFile from key_file\n        \n        output:\n        set val(accession), file(\"*.fastq.gz\") into readFiles\n        \n        script:\n        def vdbConfigCmd = keyFile.name != 'NO_FILE' ? \"vdb-config --import ${keyFile} ./\" : ''\n        \"\"\"\n        $vdbConfigCmd\n        fasterq-dump $accession --threads ${task.cpus} --split-3\n        pigz *.fastq\n        \"\"\"\n    }",
        "nb_lignes_process": 16,
        "string_script": "        def vdbConfigCmd = keyFile.name != 'NO_FILE' ? \"vdb-config --import ${keyFile} ./\" : ''\n        \"\"\"\n        $vdbConfigCmd\n        fasterq-dump $accession --threads ${task.cpus} --split-3\n        pigz *.fastq\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "accessionIDs",
            "key_file"
        ],
        "nb_inputs": 2,
        "outputs": [
            "readFiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"${accession}\""
        ],
        "when": "",
        "stub": ""
    },
    "trimming": {
        "name_process": "trimming",
        "string_process": " process trimming {\n        tag \"${accession}\"\n        \n        input:\n        set val(accession), file(reads) from readFiles\n        \n        output:\n        set val(accession), file(\"*_trimmed.fastq.gz\") into trimmedFiles\n        \n        script:\n        if (params.readType == \"single\") {\n          \"\"\"\n          fastp -w ${task.cpus} -i ${reads} -b ${params.readLength} -o ${accession}_trimmed.fastq.gz\n          \"\"\"\n        } else {\n          \"\"\"\n          fastp -w ${task.cpus} -i ${reads[0]} -I ${reads[1]} -b ${params.readLength} -B  ${params.readLength} -o ${accession}_R1_trimmed.fastq.gz -O ${accession}_R2_trimmed.fastq.gz\n          \"\"\"\n        }\n    }",
        "nb_lignes_process": 18,
        "string_script": "        if (params.readType == \"single\") {\n          \"\"\"\n          fastp -w ${task.cpus} -i ${reads} -b ${params.readLength} -o ${accession}_trimmed.fastq.gz\n          \"\"\"\n        } else {\n          \"\"\"\n          fastp -w ${task.cpus} -i ${reads[0]} -I ${reads[1]} -b ${params.readLength} -B  ${params.readLength} -o ${accession}_R1_trimmed.fastq.gz -O ${accession}_R2_trimmed.fastq.gz\n          \"\"\"\n        }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "readFiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmedFiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"${accession}\""
        ],
        "when": "",
        "stub": ""
    },
    "mapping": {
        "name_process": "mapping",
        "string_process": "\nprocess mapping {\n    tag \"mapping: $reads\"\n    \n    input:\n    set val(name), file(reads) from trimmedFiles\n    \n    output:\n    set val(name), file(\"${name}.bam\") into hisat2Bams\n    file(\"${name}.hisat2_summary.txt\") into hisat2Multiqc\n    \n    script:\n    if (params.readType == \"single\") {\n                \"\"\"\n            hisat2 -x ${params.hisat2index} \\\n                   -U ${reads} \\\n                   -p ${task.cpus} \\\n                   --met-stderr \\\n                   --new-summary \\\n                   --summary-file ${name}.hisat2_summary.txt \\\n                   | samtools view -bS - > ${name}.bam\n                \"\"\"\n    } else {\n        \"\"\"\n            hisat2 -x ${params.hisat2index} \\\n                   -1 ${reads[0]} \\\n                   -2 ${reads[1]} \\\n                   -p ${task.cpus} \\\n                   --met-stderr \\\n                   --new-summary \\\n                   --summary-file ${name}.hisat2_summary.txt \\\n                   | samtools view -bS - > ${name}.bam\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 33,
        "string_script": "    if (params.readType == \"single\") {\n                \"\"\"\n            hisat2 -x ${params.hisat2index} \\\n                   -U ${reads} \\\n                   -p ${task.cpus} \\\n                   --met-stderr \\\n                   --new-summary \\\n                   --summary-file ${name}.hisat2_summary.txt \\\n                   | samtools view -bS - > ${name}.bam\n                \"\"\"\n    } else {\n        \"\"\"\n            hisat2 -x ${params.hisat2index} \\\n                   -1 ${reads[0]} \\\n                   -2 ${reads[1]} \\\n                   -p ${task.cpus} \\\n                   --met-stderr \\\n                   --new-summary \\\n                   --summary-file ${name}.hisat2_summary.txt \\\n                   | samtools view -bS - > ${name}.bam\n        \"\"\"\n    }",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "trimmedFiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "hisat2Bams",
            "hisat2Multiqc"
        ],
        "nb_outputs": 2,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"mapping: $reads\""
        ],
        "when": "",
        "stub": ""
    },
    "sortbam": {
        "name_process": "sortbam",
        "string_process": "\nprocess sortbam {\n    tag \"sortbam: $name\"\n    \n    input:\n    set val(name), file(bam) from hisat2Bams\n    \n    output:\n    set val(name), file(\"${name}.sorted.bam\") into sortedBams\n    \n    script:\n    avail_mem=\"\"\n    \"\"\"\n    samtools sort \\\\\n        $bam \\\\\n        -@ ${task.cpus} ${avail_mem} \\\\\n        -o ${name}.sorted.bam\n    samtools index ${name}.sorted.bam\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    avail_mem=\"\"\n    \"\"\"\n    samtools sort \\\\\n        $bam \\\\\n        -@ ${task.cpus} ${avail_mem} \\\\\n        -o ${name}.sorted.bam\n    samtools index ${name}.sorted.bam\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "hisat2Bams"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sortedBams"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"sortbam: $name\""
        ],
        "when": "",
        "stub": ""
    },
    "markduplicates": {
        "name_process": "markduplicates",
        "string_process": "\nprocess markduplicates {\n    tag \"markdups: $name\"\n    \n    input:\n    set val(name), file(bam) from sortedBams\n    \n    output:\n    set val(name), file(\"${name}.sorted.nodup.bam\") into markedDups, bamstatsSamples\n    file(\"${name}.metric.txt\") into markduplicatesMultiqc\n    \n    script:\n                                           \n    markdup_java_options=\"-Xmx${task.memory.toGiga()}g\"\n    \"\"\"\n    picard ${markdup_java_options} MarkDuplicates \\\\\n        INPUT=$bam \\\\\n        OUTPUT=${name}.sorted.nodup.bam \\\\\n        METRICS_FILE=${name}.metric.txt \\\\\n        REMOVE_DUPLICATES=true \\\\\n        ASSUME_SORTED=true \\\\\n        PROGRAM_RECORD_ID='null' \\\\\n        CREATE_INDEX=true \\\\\n        VALIDATION_STRINGENCY=LENIENT\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    markdup_java_options=\"-Xmx${task.memory.toGiga()}g\"\n    \"\"\"\n    picard ${markdup_java_options} MarkDuplicates \\\\\n        INPUT=$bam \\\\\n        OUTPUT=${name}.sorted.nodup.bam \\\\\n        METRICS_FILE=${name}.metric.txt \\\\\n        REMOVE_DUPLICATES=true \\\\\n        ASSUME_SORTED=true \\\\\n        PROGRAM_RECORD_ID='null' \\\\\n        CREATE_INDEX=true \\\\\n        VALIDATION_STRINGENCY=LENIENT\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "sortedBams"
        ],
        "nb_inputs": 1,
        "outputs": [
            "markedDups",
            "bamstatsSamples",
            "markduplicatesMultiqc"
        ],
        "nb_outputs": 3,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"markdups: $name\""
        ],
        "when": "",
        "stub": ""
    },
    "bamstats": {
        "name_process": "bamstats",
        "string_process": "\nprocess bamstats {\n    tag \"bamstats: $name\"\n\n    publishDir = [path: \"${params.output}/flagstats\", mode: 'copy', overwrite: 'true' ]\n    \n    input:\n    set val(name), file(bam) from bamstatsSamples\n    \n    output:\n    file(\"${name}.sorted.nodup.bam.flagstat.txt\") into flagstatMultiqc\n    \n    script:\n    \"\"\"\n    samtools flagstat $bam > ${name}.sorted.nodup.bam.flagstat.txt\n    samtools view $bam | cut -f 10 | perl -ne 'chomp;print length(\\$_) . \"\\n\"' | sort | uniq -c >> ${name}.sorted.nodup.bam.flagstat.txt\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    samtools flagstat $bam > ${name}.sorted.nodup.bam.flagstat.txt\n    samtools view $bam | cut -f 10 | perl -ne 'chomp;print length(\\$_) . \"\\n\"' | sort | uniq -c >> ${name}.sorted.nodup.bam.flagstat.txt\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bamstatsSamples"
        ],
        "nb_inputs": 1,
        "outputs": [
            "flagstatMultiqc"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"bamstats: $name\"",
            "publishDir = [path: \"${params.output}/flagstats\", mode: 'copy', overwrite: 'true' ]"
        ],
        "when": "",
        "stub": ""
    },
    "sampleCountsSave": {
        "name_process": "sampleCountsSave",
        "string_process": "\nprocess sampleCountsSave {\n    tag \"sampleCountsSave: ${sample1Name}_${sample2Name}\"\n    label 'postrmats'\n\n    publishDir = [path: \"${params.output}/split_matrices\", mode: 'copy', overwrite: 'true' ]\n\n    input:\n    set val(sample1Name), val(sample2Name), file(counts) from rmatsCounts\n    \n    output:\n    set file(\"rmats_output/${sample1Name}.*.txt\"), file(\"rmats_output/${sample2Name}.*.txt\") into savedSampleCounts\n    \n    script:\n    \"\"\"\n    sampleCountsSave.sh rmats_output ${sample1Name} ${sample2Name}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    sampleCountsSave.sh rmats_output ${sample1Name} ${sample2Name}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rmatsCounts"
        ],
        "nb_inputs": 1,
        "outputs": [
            "savedSampleCounts"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"sampleCountsSave: ${sample1Name}_${sample2Name}\"",
            "label 'postrmats'",
            "publishDir = [path: \"${params.output}/split_matrices\", mode: 'copy', overwrite: 'true' ]"
        ],
        "when": "",
        "stub": ""
    },
    "createMatrices": {
        "name_process": "createMatrices",
        "string_process": " process createMatrices {\n    tag \"createMatrices: ${alternativeSplicingType}/${junctionCountType}/${countingType}/${params.splitNumber}\"\n    label 'postrmats'\n\n    publishDir = [path: \"${params.output}/merged_matrices\", mode: 'copy', overwrite: 'true' ]\n\n    input:\n    file(allSamplesCounts) from savedSampleCounts.flatten().collect()\n    file(fromGtfs) from fromGtf.first()\n    each alternativeSplicingType from alternativeSplicingTypeList\n    each junctionCountType from junctionCountTypeList\n    each countingType from countingTypeList\n    \n    output:\n    file 'rmats_final*' into splicingMatrices\n    \n    script:\n    \"\"\"\n    create_matrices_from_files.sh ${alternativeSplicingType} ${junctionCountType} ${countingType} ${params.splitNumber}\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    create_matrices_from_files.sh ${alternativeSplicingType} ${junctionCountType} ${countingType} ${params.splitNumber}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "savedSampleCounts",
            "fromGtf",
            "alternativeSplicingTypeList",
            "junctionCountTypeList",
            "countingTypeList"
        ],
        "nb_inputs": 5,
        "outputs": [
            "splicingMatrices"
        ],
        "nb_outputs": 1,
        "name_workflow": "TheJacksonLaboratory__splicing-pipelines-nf",
        "directive": [
            "tag \"createMatrices: ${alternativeSplicingType}/${junctionCountType}/${countingType}/${params.splitNumber}\"",
            "label 'postrmats'",
            "publishDir = [path: \"${params.output}/merged_matrices\", mode: 'copy', overwrite: 'true' ]"
        ],
        "when": "",
        "stub": ""
    }
}
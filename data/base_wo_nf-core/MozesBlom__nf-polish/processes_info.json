{
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    \n  \n                                                                                                    \n                                                                                                      \n   \n\n    tag \"FASTQC on $sample_id\"\n    publishDir \"${params.outdir}/01.fastqc\", mode:'copy'\n\n    input:\n    set val(sample_id), file(r1), file(r2) from read_pairs_ch\n\n    output:\n    file(\"${sample_id}\")\n    set val(sample_id), file(\"$sample_id/${sample_id}.stats\") into fastqc_stats_ch\n\n    script:\n    \"\"\"\n    mkdir $sample_id\n\n    fastqc --threads ${task.cpus} --outdir $sample_id $r1 $r2\n\n    seqkit stats $r1 $r2 > $sample_id/${sample_id}.stats\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    mkdir $sample_id\n\n    fastqc --threads ${task.cpus} --outdir $sample_id $r1 $r2\n\n    seqkit stats $r1 $r2 > $sample_id/${sample_id}.stats\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "read_pairs_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_stats_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "MozesBlom__nf-polish",
        "directive": [
            "tag \"FASTQC on $sample_id\"",
            "publishDir \"${params.outdir}/01.fastqc\", mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "dedup": {
        "name_process": "dedup",
        "string_process": " process dedup {\n    \n      \n                                                                                                        \n       \n\n        label 'RAM_high'\n\n        tag \"Superdeduper on $sample_id\"\n        publishDir \"${params.outdir}/02.dedup/$sample_id\", mode:'copy'\n\n        input:\n        set val(sample_id), file(r1), file(r2) from read_pairs2_ch\n\n        output:\n        set val(sample_id), \\\n        file(\"PE_R1.fastq.gz\"), \\\n        file(\"PE_R2.fastq.gz\") into dedup_ch\n        set val(sample_id), file(\"${sample_id}_dedup.stats\") into dedup_stats_ch\n\n        script:\n        \"\"\"\n        hts_SuperDeduper -1 $r1 -2 $r2 -f PE\n\n        seqkit stats PE_R1.fastq.gz PE_R2.fastq.gz > ${sample_id}_dedup.stats\n        \"\"\"\n    }",
        "nb_lignes_process": 25,
        "string_script": "        \"\"\"\n        hts_SuperDeduper -1 $r1 -2 $r2 -f PE\n\n        seqkit stats PE_R1.fastq.gz PE_R2.fastq.gz > ${sample_id}_dedup.stats\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read_pairs2_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sample_id",
            "dedup_ch",
            "dedup_stats_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "MozesBlom__nf-polish",
        "directive": [
            "label 'RAM_high'",
            "tag \"Superdeduper on $sample_id\"",
            "publishDir \"${params.outdir}/02.dedup/$sample_id\", mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "trim_adapt_dedup": {
        "name_process": "trim_adapt_dedup",
        "string_process": " process trim_adapt_dedup {\n        \n      \n                                                                                                        \n       \n\n        tag \"Trimmomatic on $sample_id\"\n        publishDir \"${params.outdir}/03.trim_adapt/$sample_id\", pattern: '*_{R1,R2,U}.fastq.gz', mode:'copy'\n        publishDir \"${params.outdir}/03.trim_adapt/$sample_id\", pattern: '*.stats', mode:'copy', overwrite: false\n\n        input:\n        set val(sample_id), file(r1), file(r2) from dedup_ch \n\n        output:\n        set val(sample_id), \\\n        file(\"${sample_id}_adapt_R1.fastq.gz\"), \\\n        file(\"${sample_id}_adapt_R2.fastq.gz\"), \\\n        file(\"${sample_id}_adapt_U.fastq.gz\") into trim_adapt_ch\n        set val(sample_id), file(\"${sample_id}_adapt.stats\") into trim_adapt_stats_ch\n\n        script:\n        \"\"\"\n\n        trimmomatic PE \\\n        -threads ${task.cpus} \\\n        $r1 $r2 \\\n        ${sample_id}_adapt_R1.fastq.gz \\\n        ${sample_id}_1_u.fastq.gz \\\n        ${sample_id}_adapt_R2.fastq.gz \\\n        ${sample_id}_2_u.fastq.gz \\\n        ILLUMINACLIP:${params.adapters}:2:30:10:8:TRUE\n\n        cat ${sample_id}_1_u.fastq.gz ${sample_id}_2_u.fastq.gz > ${sample_id}_adapt_U.fastq.gz\n\n        seqkit stats ${sample_id}_adapt_R1.fastq.gz \\\n        ${sample_id}_adapt_R2.fastq.gz \\\n        ${sample_id}_adapt_U.fastq.gz > ${sample_id}_adapt.stats\n\n        \"\"\"\n    }",
        "nb_lignes_process": 38,
        "string_script": "        \"\"\"\n\n        trimmomatic PE \\\n        -threads ${task.cpus} \\\n        $r1 $r2 \\\n        ${sample_id}_adapt_R1.fastq.gz \\\n        ${sample_id}_1_u.fastq.gz \\\n        ${sample_id}_adapt_R2.fastq.gz \\\n        ${sample_id}_2_u.fastq.gz \\\n        ILLUMINACLIP:${params.adapters}:2:30:10:8:TRUE\n\n        cat ${sample_id}_1_u.fastq.gz ${sample_id}_2_u.fastq.gz > ${sample_id}_adapt_U.fastq.gz\n\n        seqkit stats ${sample_id}_adapt_R1.fastq.gz \\\n        ${sample_id}_adapt_R2.fastq.gz \\\n        ${sample_id}_adapt_U.fastq.gz > ${sample_id}_adapt.stats\n\n        \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "Trimmomatic"
        ],
        "tools_url": [
            "https://bio.tools/trimmomatic"
        ],
        "tools_dico": [
            {
                "name": "Trimmomatic",
                "uri": "https://bio.tools/trimmomatic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A flexible read trimming tool for Illumina NGS data",
                "homepage": "http://www.usadellab.org/cms/index.php?page=trimmomatic"
            }
        ],
        "inputs": [
            "dedup_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sample_id",
            "trim_adapt_ch",
            "trim_adapt_stats_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "MozesBlom__nf-polish",
        "directive": [
            "tag \"Trimmomatic on $sample_id\"",
            "publishDir \"${params.outdir}/03.trim_adapt/$sample_id\", pattern: '*_{R1,R2,U}.fastq.gz', mode:'copy'",
            "publishDir \"${params.outdir}/03.trim_adapt/$sample_id\", pattern: '*.stats', mode:'copy', overwrite: false"
        ],
        "when": "",
        "stub": ""
    },
    "trim_adapt": {
        "name_process": "trim_adapt",
        "string_process": " process trim_adapt {\n        \n      \n                                                                                                        \n       \n\n        tag \"Trimmomatic on $sample_id\"\n        publishDir \"${params.outdir}/02.trim_adapt/$sample_id\", pattern: '*_{R1,R2,U}.fastq.gz', mode:'copy'\n        publishDir \"${params.outdir}/02.trim_adapt/$sample_id\", pattern: '*.stats', mode:'copy', overwrite: false\n   \n        input:\n        set val(sample_id), file(r1), file(r2) from read_pairs2_ch\n\n        output:\n        set val(sample_id), \\\n        file(\"${sample_id}_adapt_R1.fastq.gz\"), \\\n        file(\"${sample_id}_adapt_R2.fastq.gz\"), \\\n        file(\"${sample_id}_adapt_U.fastq.gz\") into trim_adapt_ch\n        set val(sample_id), file(\"${sample_id}_adapt.stats\") into trim_adapt_stats_ch\n\n        script:\n        \"\"\"\n        trimmomatic PE \\\n        -threads ${task.cpus} \\\n        $r1 $r2 \\\n        ${sample_id}_adapt_R1.fastq.gz \\\n        ${sample_id}_1_u.fastq.gz \\\n        ${sample_id}_adapt_R2.fastq.gz \\\n        ${sample_id}_2_u.fastq.gz \\\n        ILLUMINACLIP:${params.adapters}:2:30:10:8:TRUE\n\n        cat ${sample_id}_1_u.fastq.gz ${sample_id}_2_u.fastq.gz > ${sample_id}_adapt_U.fastq.gz\n\n        seqkit stats ${sample_id}_adapt_R1.fastq.gz \\\n        ${sample_id}_adapt_R2.fastq.gz \\\n        ${sample_id}_adapt_U.fastq.gz > ${sample_id}_adapt.stats\n\n        \"\"\"\n    }",
        "nb_lignes_process": 37,
        "string_script": "        \"\"\"\n        trimmomatic PE \\\n        -threads ${task.cpus} \\\n        $r1 $r2 \\\n        ${sample_id}_adapt_R1.fastq.gz \\\n        ${sample_id}_1_u.fastq.gz \\\n        ${sample_id}_adapt_R2.fastq.gz \\\n        ${sample_id}_2_u.fastq.gz \\\n        ILLUMINACLIP:${params.adapters}:2:30:10:8:TRUE\n\n        cat ${sample_id}_1_u.fastq.gz ${sample_id}_2_u.fastq.gz > ${sample_id}_adapt_U.fastq.gz\n\n        seqkit stats ${sample_id}_adapt_R1.fastq.gz \\\n        ${sample_id}_adapt_R2.fastq.gz \\\n        ${sample_id}_adapt_U.fastq.gz > ${sample_id}_adapt.stats\n\n        \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "Trimmomatic"
        ],
        "tools_url": [
            "https://bio.tools/trimmomatic"
        ],
        "tools_dico": [
            {
                "name": "Trimmomatic",
                "uri": "https://bio.tools/trimmomatic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A flexible read trimming tool for Illumina NGS data",
                "homepage": "http://www.usadellab.org/cms/index.php?page=trimmomatic"
            }
        ],
        "inputs": [
            "read_pairs2_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sample_id",
            "trim_adapt_ch",
            "trim_adapt_stats_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "MozesBlom__nf-polish",
        "directive": [
            "tag \"Trimmomatic on $sample_id\"",
            "publishDir \"${params.outdir}/02.trim_adapt/$sample_id\", pattern: '*_{R1,R2,U}.fastq.gz', mode:'copy'",
            "publishDir \"${params.outdir}/02.trim_adapt/$sample_id\", pattern: '*.stats', mode:'copy', overwrite: false"
        ],
        "when": "",
        "stub": ""
    },
    "merge": {
        "name_process": "merge",
        "string_process": "\nprocess merge {\n    \n  \n                                                                                                    \n   \n\n    tag \"Pear on $sample_id\"\n\n    publishDir \"$merge_path/$sample_id\", pattern: '*.unassembled.forward.fastq.gz', saveAs: {\"${sample_id}_merge_R1.fastq.gz\"}, mode:'copy'\n    publishDir \"$merge_path/$sample_id\", pattern: '*.unassembled.reverse.fastq.gz', saveAs: {\"${sample_id}_merge_R2.fastq.gz\"}, mode:'copy', overwrite: false\n    publishDir \"$merge_path/$sample_id\", pattern: '*_U.fastq.gz', mode:'copy', overwrite: false\n    publishDir \"$merge_path/$sample_id\", pattern: '*.stats', mode:'copy', overwrite: false\n\n    input:\n    set val(sample_id), \\\n    file(r1_trimAdapt), \\\n    file(r2_trimAdapt), \\\n    file(u_trimAdapt) from trim_adapt_ch\n\n    output:\n    set val(sample_id), \\\n    file(\"${sample_id}.unassembled.forward.fastq.gz\"), \\\n    file(\"${sample_id}.unassembled.reverse.fastq.gz\"), \\\n    file(\"${sample_id}_merge_U.fastq.gz\") into merge_ch\n    set val(sample_id), file(\"${sample_id}_merge.stats\") into merge_stats_ch\n\n    script:\n    \"\"\"\n    pear \\\n    -f $r1_trimAdapt \\\n    -r $r2_trimAdapt \\\n    -o ${sample_id} \\\n    -p ${params.pvalue} \\\n    -v ${params.min_overlap} \\\n    -n ${params.min_read_len} \\\n    -k \\\n    -j ${task.cpus}\n\n    pigz -p ${task.cpus} -v -r ${sample_id}.unassembled.forward.fastq\n    pigz -p ${task.cpus} -v -r ${sample_id}.unassembled.reverse.fastq\n    pigz -p ${task.cpus} -v -r ${sample_id}.assembled.fastq\n\n    cat $u_trimAdapt ${sample_id}.assembled.fastq.gz > ${sample_id}_merge_U.fastq.gz\n\n    seqkit stats ${sample_id}.unassembled.forward.fastq.gz \\\n    ${sample_id}.unassembled.reverse.fastq.gz \\\n    ${sample_id}_merge_U.fastq.gz > ${sample_id}_merge.stats\n\n    \"\"\"\n}",
        "nb_lignes_process": 49,
        "string_script": "    \"\"\"\n    pear \\\n    -f $r1_trimAdapt \\\n    -r $r2_trimAdapt \\\n    -o ${sample_id} \\\n    -p ${params.pvalue} \\\n    -v ${params.min_overlap} \\\n    -n ${params.min_read_len} \\\n    -k \\\n    -j ${task.cpus}\n\n    pigz -p ${task.cpus} -v -r ${sample_id}.unassembled.forward.fastq\n    pigz -p ${task.cpus} -v -r ${sample_id}.unassembled.reverse.fastq\n    pigz -p ${task.cpus} -v -r ${sample_id}.assembled.fastq\n\n    cat $u_trimAdapt ${sample_id}.assembled.fastq.gz > ${sample_id}_merge_U.fastq.gz\n\n    seqkit stats ${sample_id}.unassembled.forward.fastq.gz \\\n    ${sample_id}.unassembled.reverse.fastq.gz \\\n    ${sample_id}_merge_U.fastq.gz > ${sample_id}_merge.stats\n\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "PEAR"
        ],
        "tools_url": [
            "https://bio.tools/pear"
        ],
        "tools_dico": [
            {
                "name": "PEAR",
                "uri": "https://bio.tools/pear",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Paired-end read merger. PEAR evaluates all possible paired-end read overlaps without requiring the target fragment size as input. In addition, it implements a statistical test for minimizing false-positive results.",
                "homepage": "http://sco.h-its.org/exelixis/web/software/pear/"
            }
        ],
        "inputs": [
            "sample_id",
            "r1_trimAdapt",
            "r2_trimAdapt",
            "trim_adapt_ch"
        ],
        "nb_inputs": 4,
        "outputs": [
            "sample_id",
            "merge_ch",
            "merge_stats_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "MozesBlom__nf-polish",
        "directive": [
            "tag \"Pear on $sample_id\"",
            "publishDir \"$merge_path/$sample_id\", pattern: '*.unassembled.forward.fastq.gz', saveAs: {\"${sample_id}_merge_R1.fastq.gz\"}, mode:'copy'",
            "publishDir \"$merge_path/$sample_id\", pattern: '*.unassembled.reverse.fastq.gz', saveAs: {\"${sample_id}_merge_R2.fastq.gz\"}, mode:'copy', overwrite: false",
            "publishDir \"$merge_path/$sample_id\", pattern: '*_U.fastq.gz', mode:'copy', overwrite: false",
            "publishDir \"$merge_path/$sample_id\", pattern: '*.stats', mode:'copy', overwrite: false"
        ],
        "when": "",
        "stub": ""
    },
    "trim_qual": {
        "name_process": "trim_qual",
        "string_process": "\nprocess trim_qual {\n    \n  \n                                                                                                    \n   \n\n    tag \"Trimmomatic on $sample_id\"\n\n    publishDir \"$qual_path/$sample_id\", pattern: '*_{R1,R2,U}.fastq.gz', mode:'copy'\n    publishDir \"$qual_path/$sample_id\", pattern: '*.stats', mode:'copy', overwrite: false\n\n    input:\n    set val(sample_id), file(r1_merge), file(r2_merge), file(u_merge) from merge_ch\n\n    output:\n    set val(sample_id), \\\n    file(\"${sample_id}_qual_R1.fastq.gz\"), \\\n    file(\"${sample_id}_qual_R2.fastq.gz\"), \\\n    file(\"${sample_id}_qual_U.fastq.gz\") into qual_ch\n    set val(sample_id), file(\"${sample_id}_qual.stats\") into qual_stats_ch\n\n    script:\n    \"\"\"\n    trimmomatic PE \\\n    -threads ${task.cpus} \\\n    $r1_merge $r2_merge \\\n    ${sample_id}_qual_R1.fastq.gz \\\n    ${sample_id}_1_u.fastq.gz \\\n    ${sample_id}_qual_R2.fastq.gz \\\n    ${sample_id}_2_u.fastq.gz \\\n    LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:${params.min_read_len}\n\n    trimmomatic SE \\\n    -threads ${task.cpus} \\\n    $u_merge \\\n    ${sample_id}_unpaired.fastq.gz \\\n    LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:${params.min_read_len}\n\n    cat ${sample_id}_1_u.fastq.gz \\\n    ${sample_id}_2_u.fastq.gz \\\n    ${sample_id}_unpaired.fastq.gz > \\\n    ${sample_id}_qual_U.fastq.gz\n\n    seqkit stats ${sample_id}_qual_R1.fastq.gz \\\n    ${sample_id}_qual_R2.fastq.gz \\\n    ${sample_id}_qual_U.fastq.gz > ${sample_id}_qual.stats\n    \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "    \"\"\"\n    trimmomatic PE \\\n    -threads ${task.cpus} \\\n    $r1_merge $r2_merge \\\n    ${sample_id}_qual_R1.fastq.gz \\\n    ${sample_id}_1_u.fastq.gz \\\n    ${sample_id}_qual_R2.fastq.gz \\\n    ${sample_id}_2_u.fastq.gz \\\n    LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:${params.min_read_len}\n\n    trimmomatic SE \\\n    -threads ${task.cpus} \\\n    $u_merge \\\n    ${sample_id}_unpaired.fastq.gz \\\n    LEADING:5 TRAILING:5 SLIDINGWINDOW:4:15 MINLEN:${params.min_read_len}\n\n    cat ${sample_id}_1_u.fastq.gz \\\n    ${sample_id}_2_u.fastq.gz \\\n    ${sample_id}_unpaired.fastq.gz > \\\n    ${sample_id}_qual_U.fastq.gz\n\n    seqkit stats ${sample_id}_qual_R1.fastq.gz \\\n    ${sample_id}_qual_R2.fastq.gz \\\n    ${sample_id}_qual_U.fastq.gz > ${sample_id}_qual.stats\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "Trimmomatic"
        ],
        "tools_url": [
            "https://bio.tools/trimmomatic"
        ],
        "tools_dico": [
            {
                "name": "Trimmomatic",
                "uri": "https://bio.tools/trimmomatic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A flexible read trimming tool for Illumina NGS data",
                "homepage": "http://www.usadellab.org/cms/index.php?page=trimmomatic"
            }
        ],
        "inputs": [
            "merge_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sample_id",
            "qual_ch",
            "qual_stats_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "MozesBlom__nf-polish",
        "directive": [
            "tag \"Trimmomatic on $sample_id\"",
            "publishDir \"$qual_path/$sample_id\", pattern: '*_{R1,R2,U}.fastq.gz', mode:'copy'",
            "publishDir \"$qual_path/$sample_id\", pattern: '*.stats', mode:'copy', overwrite: false"
        ],
        "when": "",
        "stub": ""
    },
    "low_complex": {
        "name_process": "low_complex",
        "string_process": "\nprocess low_complex {\n    \n  \n                                                                                                    \n   \n\n    tag \"Remove low-complexity reads from $sample_id\"\n\n    publishDir \"$complex_path/$sample_id\", pattern: '*_{R1,R2,U}.fastq.gz', mode:'copy'\n    publishDir \"$complex_path/$sample_id\", pattern: '*.stats', mode:'copy', overwrite: false\n\n    input:\n    set val(sample_id), file(r1_qual), file(r2_qual), file(u_qual) from qual_ch\n\n    output:\n    set val(sample_id), \\\n    file(\"${sample_id}_R1.fastq.gz\"), \\\n    file(\"${sample_id}_R2.fastq.gz\"), \\\n    file(\"${sample_id}_U.fastq.gz\") into low_complex_ch\n    set val(sample_id), file(\"${sample_id}_complex.stats\") into low_complex_stats_ch\n\n    when: \n    !params.skip_low_complex\n\n    script:\n    \"\"\"\n    remove_low_complex.py \\\n    -1 $r1_qual \\\n    -2 $r2_qual\\\n    -u $u_qual\\\n    -c ${params.lc_cut_off_val}\\\n    -p ${sample_id}\n\n    pigz -p ${task.cpus} -v -r ${sample_id}_R1.fastq\n    pigz -p ${task.cpus} -v -r ${sample_id}_R2.fastq\n    pigz -p ${task.cpus} -v -r ${sample_id}_U.fastq\n\n    seqkit stats ${sample_id}_R1.fastq.gz \\\n    ${sample_id}_R2.fastq.gz \\\n    ${sample_id}_U.fastq.gz > ${sample_id}_complex.stats\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    \"\"\"\n    remove_low_complex.py \\\n    -1 $r1_qual \\\n    -2 $r2_qual\\\n    -u $u_qual\\\n    -c ${params.lc_cut_off_val}\\\n    -p ${sample_id}\n\n    pigz -p ${task.cpus} -v -r ${sample_id}_R1.fastq\n    pigz -p ${task.cpus} -v -r ${sample_id}_R2.fastq\n    pigz -p ${task.cpus} -v -r ${sample_id}_U.fastq\n\n    seqkit stats ${sample_id}_R1.fastq.gz \\\n    ${sample_id}_R2.fastq.gz \\\n    ${sample_id}_U.fastq.gz > ${sample_id}_complex.stats\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qual_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sample_id",
            "low_complex_ch",
            "low_complex_stats_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "MozesBlom__nf-polish",
        "directive": [
            "tag \"Remove low-complexity reads from $sample_id\"",
            "publishDir \"$complex_path/$sample_id\", pattern: '*_{R1,R2,U}.fastq.gz', mode:'copy'",
            "publishDir \"$complex_path/$sample_id\", pattern: '*.stats', mode:'copy', overwrite: false"
        ],
        "when": "!params.skip_low_complex",
        "stub": ""
    },
    "summarize_stats_withDedup": {
        "name_process": "summarize_stats_withDedup",
        "string_process": " process summarize_stats_withDedup {\n    \n      \n                                                                                                        \n       \n\n        tag \"Gather all read stats for $sample_id\"\n\n        publishDir \"${params.outdir}/07.polishing_stats/\", mode:'copy'\n\n        input:\n        set val(sample_id), \\\n        file(fqc_stats_fn), \\\n        file(dedup_stats_fn), \\\n        file(adapt_stats_fn), \\\n        file(merge_stats_fn), \\\n        file(qual_stats_fn), \\\n        file(complex_stats_fn) from fastqc_stats_ch.join(dedup_stats_ch).join(trim_adapt_stats_ch).join(merge_stats_ch).join(qual_stats_ch).join(low_complex_stats_ch)\n\n        output:\n        file(\"${sample_id}_polishing_table.tsv\")\n        file(\"${sample_id}_polishing_overview.png\")\n\n        script:\n        \"\"\"\n        echo fqc_stats_fn is $fqc_stats_fn\n        echo dedup_stats_fn is $dedup_stats_fn\n        echo adapt_stats_fn is $adapt_stats_fn\n        echo merge_stats_fn is $merge_stats_fn\n        echo qual_stats_fn is $qual_stats_fn\n        echo complex_stats_fn is $complex_stats_fn\n\n        parse_visualize_stats.py \\\n        -f $fqc_stats_fn \\\n        -d $dedup_stats_fn \\\n        -a $adapt_stats_fn \\\n        -m $merge_stats_fn \\\n        -q $qual_stats_fn \\\n        -c $complex_stats_fn \\\n        -p ${sample_id}\n\n        \"\"\"\n    }",
        "nb_lignes_process": 41,
        "string_script": "        \"\"\"\n        echo fqc_stats_fn is $fqc_stats_fn\n        echo dedup_stats_fn is $dedup_stats_fn\n        echo adapt_stats_fn is $adapt_stats_fn\n        echo merge_stats_fn is $merge_stats_fn\n        echo qual_stats_fn is $qual_stats_fn\n        echo complex_stats_fn is $complex_stats_fn\n\n        parse_visualize_stats.py \\\n        -f $fqc_stats_fn \\\n        -d $dedup_stats_fn \\\n        -a $adapt_stats_fn \\\n        -m $merge_stats_fn \\\n        -q $qual_stats_fn \\\n        -c $complex_stats_fn \\\n        -p ${sample_id}\n\n        \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "fqc_stats_fn",
            "dedup_stats_fn",
            "adapt_stats_fn",
            "merge_stats_fn",
            "qual_stats_fn",
            "fastqc_stats_ch",
            "dedup_stats_ch",
            "trim_adapt_stats_ch",
            "merge_stats_ch",
            "qual_stats_ch",
            "low_complex_stats_ch"
        ],
        "nb_inputs": 12,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MozesBlom__nf-polish",
        "directive": [
            "tag \"Gather all read stats for $sample_id\"",
            "publishDir \"${params.outdir}/07.polishing_stats/\", mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "summarize_stats": {
        "name_process": "summarize_stats",
        "string_process": " process summarize_stats {\n    \n      \n                                                                                                        \n       \n\n        tag \"Gather all read stats for $sample_id\"\n\n        publishDir \"${params.outdir}/06.polishing_stats/\", mode:'copy'\n\n        input:\n        set val(sample_id), \\\n        file(fqc_stats_fn), \\\n        file(adapt_stats_fn), \\\n        file(merge_stats_fn), \\\n        file(qual_stats_fn), \\\n        file(complex_stats_fn) from fastqc_stats_ch.join(trim_adapt_stats_ch).join(merge_stats_ch).join(qual_stats_ch).join(low_complex_stats_ch)\n\n        output:\n        file(\"${sample_id}_polishing_table.tsv\")\n        file(\"${sample_id}_polishing_overview.png\")\n\n        script:\n        \"\"\"\n        parse_visualize_stats.py \\\n        -f $fqc_stats_fn \\\n        -a $adapt_stats_fn \\\n        -m $merge_stats_fn \\\n        -q $qual_stats_fn \\\n        -c $complex_stats_fn \\\n        -p ${sample_id}\n\n        \"\"\"\n    }",
        "nb_lignes_process": 32,
        "string_script": "        \"\"\"\n        parse_visualize_stats.py \\\n        -f $fqc_stats_fn \\\n        -a $adapt_stats_fn \\\n        -m $merge_stats_fn \\\n        -q $qual_stats_fn \\\n        -c $complex_stats_fn \\\n        -p ${sample_id}\n\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "fqc_stats_fn",
            "adapt_stats_fn",
            "merge_stats_fn",
            "qual_stats_fn",
            "fastqc_stats_ch",
            "trim_adapt_stats_ch",
            "merge_stats_ch",
            "qual_stats_ch",
            "low_complex_stats_ch"
        ],
        "nb_inputs": 10,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MozesBlom__nf-polish",
        "directive": [
            "tag \"Gather all read stats for $sample_id\"",
            "publishDir \"${params.outdir}/06.polishing_stats/\", mode:'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
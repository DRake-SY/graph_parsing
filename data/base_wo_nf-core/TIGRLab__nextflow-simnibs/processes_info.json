{
    "antsRegistration": {
        "name_process": "antsRegistration",
        "string_process": "\nprocess antsRegistration {\n\n      \n                        \n                                                                                                               \n     \n                \n                             \n                                          \n                                                                \n     \n              \n                                                         \n                                                    \n                                                           \n      \n\n    label 'ants'\n\n    input:\n    tuple val(sub), path(t1), path(mni)\n\n\n    output:\n    tuple val(sub), path(\"${sub}_Warped.nii.gz\"), emit: warped\n    tuple val(sub), path(\"${sub}Composite.h5\"), emit: warp\n    tuple val(sub), path(\"${sub}InverseComposite.h5\"), emit: inverseWarp\n\n\n    shell:\n    '''\n    antsRegistration --collapse-output-transforms 1 --dimensionality 3 \\\n        --initialize-transforms-per-stage 0 --interpolation LanczosWindowedSinc \\\n        --output [ !{sub}, !{sub}_Warped.nii.gz ] \\\n        --transform Rigid[ 0.05 ] \\\n        --metric \\\n            Mattes[ !{mni}, !{t1}, 1, 56, Regular, 0.25 ] \\\n        --convergence [ 100x100, 1e-06, 20 ] \\\n        --smoothing-sigmas 2.0x1.0vox --shrink-factors 2x1 \\\n        --use-estimate-learning-rate-once 1 --use-histogram-matching 1 \\\n        --transform Affine[ 0.08 ] \\\n        --metric \\\n            Mattes[ !{mni}, !{t1}, 1, 56, Regular, 0.25 ] \\\n        --convergence [ 100x100, 1e-06, 20 ] \\\n        --smoothing-sigmas 1.0x0.0vox --shrink-factors 2x1 \\\n        --use-estimate-learning-rate-once 1 --use-histogram-matching 1 \\\n        --transform SyN[ 0.1, 3.0, 0.0 ] \\\n        --metric CC[ !{mni}, !{t1}, 1, 4, None, 1 ] \\\n        --convergence [ 100x70x50x20, 1e-06, 10 ] \\\n        --smoothing-sigmas 3.0x2.0x1.0x0.0vox --shrink-factors 8x4x2x1 \\\n        --use-estimate-learning-rate-once 1 --use-histogram-matching 1 \\\n        --winsorize-image-intensities [ 0.005, 0.995 ]  --write-composite-transform 1 \\\n        -v\n    '''\n\n}",
        "nb_lignes_process": 55,
        "string_script": "    '''\n    antsRegistration --collapse-output-transforms 1 --dimensionality 3 \\\n        --initialize-transforms-per-stage 0 --interpolation LanczosWindowedSinc \\\n        --output [ !{sub}, !{sub}_Warped.nii.gz ] \\\n        --transform Rigid[ 0.05 ] \\\n        --metric \\\n            Mattes[ !{mni}, !{t1}, 1, 56, Regular, 0.25 ] \\\n        --convergence [ 100x100, 1e-06, 20 ] \\\n        --smoothing-sigmas 2.0x1.0vox --shrink-factors 2x1 \\\n        --use-estimate-learning-rate-once 1 --use-histogram-matching 1 \\\n        --transform Affine[ 0.08 ] \\\n        --metric \\\n            Mattes[ !{mni}, !{t1}, 1, 56, Regular, 0.25 ] \\\n        --convergence [ 100x100, 1e-06, 20 ] \\\n        --smoothing-sigmas 1.0x0.0vox --shrink-factors 2x1 \\\n        --use-estimate-learning-rate-once 1 --use-histogram-matching 1 \\\n        --transform SyN[ 0.1, 3.0, 0.0 ] \\\n        --metric CC[ !{mni}, !{t1}, 1, 4, None, 1 ] \\\n        --convergence [ 100x70x50x20, 1e-06, 10 ] \\\n        --smoothing-sigmas 3.0x2.0x1.0x0.0vox --shrink-factors 8x4x2x1 \\\n        --use-estimate-learning-rate-once 1 --use-histogram-matching 1 \\\n        --winsorize-image-intensities [ 0.005, 0.995 ]  --write-composite-transform 1 \\\n        -v\n    '''",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "t1",
            "mni"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "label 'ants'"
        ],
        "when": "",
        "stub": ""
    },
    "antsRegistrationQC": {
        "name_process": "antsRegistrationQC",
        "string_process": "\nprocess antsRegistrationQC{\n                                          \n \n            \n                                            \n                               \n                             \n \n         \n                              \n                                                       \n  \n\n    label 'niviz'\n\n    input:\n    tuple val(subject), path(moving), path(fixed)\n\n    output:\n    tuple val(subject), path(\"${subject}_qc-registration.svg\"), emit: qcImage\n\n    shell:\n    '''\n    niviz single \\\n        registration \\\n        --set bg_nii=!{fixed} \\\n        --set fg_nii=!{moving} \\\n        !{subject}_qc-registration.svg\n    '''\n}",
        "nb_lignes_process": 29,
        "string_script": "    '''\n    niviz single \\\n        registration \\\n        --set bg_nii=!{fixed} \\\n        --set fg_nii=!{moving} \\\n        !{subject}_qc-registration.svg\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "subject",
            "moving",
            "fixed"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "label 'niviz'"
        ],
        "when": "",
        "stub": ""
    },
    "_prepareCoordsForWarp": {
        "name_process": "_prepareCoordsForWarp",
        "string_process": "\nprocess _prepareCoordsForWarp{\n\n    input:\n    tuple val(x), val(y), val(z)\n\n    output:\n    path(\"lps_coords.csv\"), emit: coordsCsv\n\n    shell:\n    '''\n    echo \"x,y,z,t\" > lps_coords.csv\n    echo \"!{x}, !{y}, !{z}, 0\" >> lps_coords.csv\n    '''\n}",
        "nb_lignes_process": 13,
        "string_script": "    '''\n    echo \"x,y,z,t\" > lps_coords.csv\n    echo \"!{x}, !{y}, !{z}, 0\" >> lps_coords.csv\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "x",
            "y",
            "z"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "_antsApplyWarpToCoordinates": {
        "name_process": "_antsApplyWarpToCoordinates",
        "string_process": "\nprocess _antsApplyWarpToCoordinates{\n\n      \n                                        \n                \n                                     \n                                          \n                                                                   \n     \n              \n                                                                                      \n      \n\n    label 'ants'\n\n    input:\n    tuple val(subject), path(warpFile), path(coordinates)\n\n    output:\n    tuple val(subject), path(\"${subject}_warpedCoordinates.csv\"), emit: warpedCoordinates\n\n    shell:\n    '''\n    antsApplyTransformsToPoints \\\n        -d 3 \\\n        -p 1 \\\n        -i !{coordinates} \\\n        -o !{subject}_warpedCoordinates.csv \\\n        -t !{warpFile}\n    '''\n}",
        "nb_lignes_process": 30,
        "string_script": "    '''\n    antsApplyTransformsToPoints \\\n        -d 3 \\\n        -p 1 \\\n        -i !{coordinates} \\\n        -o !{subject}_warpedCoordinates.csv \\\n        -t !{warpFile}\n    '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "subject",
            "warpFile",
            "coordinates"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "label 'ants'"
        ],
        "when": "",
        "stub": ""
    },
    "antsToNumpy": {
        "name_process": "antsToNumpy",
        "string_process": "\nprocess antsToNumpy{\n      \n                                               \n      \n\n    label 'numpy'\n\n    input:\n    tuple val(subject), path(antsCoords)\n\n    output:\n    tuple val(subject), path(\"${subject}_coords.npy\"), emit: coords\n\n    shell:\n    '''\n    #!/usr/bin/env python\n\n    import numpy as np\n\n    a = np.loadtxt(\"!{antsCoords}\", skiprows=1, delimiter=\",\")\n\n    # LPS --> RAS\n    a[:2] = -a[:2]\n\n    # Remove t\n    np.save(\"!{subject}_coords.npy\", a[:3])\n    '''\n}",
        "nb_lignes_process": 27,
        "string_script": "    '''\n    #!/usr/bin/env python\n\n    import numpy as np\n\n    a = np.loadtxt(\"!{antsCoords}\", skiprows=1, delimiter=\",\")\n\n    # LPS --> RAS\n    a[:2] = -a[:2]\n\n    # Remove t\n    np.save(\"!{subject}_coords.npy\", a[:3])\n    '''",
        "nb_lignes_script": 12,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "subject",
            "antsCoords"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "label 'numpy'"
        ],
        "when": "",
        "stub": ""
    },
    "publishRegistration": {
        "name_process": "publishRegistration",
        "string_process": "\nprocess publishRegistration{\n  \n                              \n \n           \n                              \n                           \n                                  \n                                   \n  \n    publishDir path: \"${params.out_dir}/mniSimulation/${sub}/mniRegistration\", \\\n                mode: 'copy', \\\n                overwrite: false\n\n    input:\n    tuple val(sub), path(warped), path(warp), path(inverseWarp), path(qcSvg)\n\n    output:\n    tuple val(sub), path(warped), path(warp), path(inverseWarp), path(qcSvg)\n\n    shell:\n    '''\n    echo \"Moving outputs into !{params.out_dir}/mniSimulation/!{sub}/mniRegistration\"\n    '''\n}",
        "nb_lignes_process": 24,
        "string_script": "    '''\n    echo \"Moving outputs into !{params.out_dir}/mniSimulation/!{sub}/mniRegistration\"\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "warped",
            "warp",
            "inverseWarp",
            "qcSvg"
        ],
        "nb_inputs": 5,
        "outputs": [
            "sub"
        ],
        "nb_outputs": 1,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "publishDir path: \"${params.out_dir}/mniSimulation/${sub}/mniRegistration\", mode: 'copy', overwrite: false"
        ],
        "when": "",
        "stub": ""
    },
    "publishSimulations": {
        "name_process": "publishSimulations",
        "string_process": "\nprocess publishSimulations{\n  \n                                       \n \n            \n                              \n                                            \n                                               \n                                                \n                                           \n                                            \n                                       \n  \n\n    publishDir path: \"${params.out_dir}/mniSimulation/${sub}/simulations\", \\\n                mode: 'copy', \\\n                overwrite: false\n\n    input:\n    tuple val(sub), path(simFile), path(simGeo),\\\n    path(leftSurf), path(rightSurf),\\\n    path(leftFsavgSurf), path(rightFsavgSurf),\\\n    path(matsimnibs), path(qcHtml)\n\n    output:\n    tuple val(sub), path(simFile), path(simGeo),\\\n    path(leftSurf), path(rightSurf),\\\n    path(leftFsavgSurf), path(rightFsavgSurf),\\\n    path(matsimnibs), path(qcHtml)\n\n    shell:\n    '''\n    echo \"Publishing to !{params.out_dir}/mniSimulation/!{sub}/simulations\"\n    '''\n\n}",
        "nb_lignes_process": 35,
        "string_script": "    '''\n    echo \"Publishing to !{params.out_dir}/mniSimulation/!{sub}/simulations\"\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "simFile",
            "simGeo",
            "leftSurf",
            "rightSurf",
            "leftFsavgSurf",
            "rightFsavgSurf",
            "matsimnibs",
            "qcHtml"
        ],
        "nb_inputs": 9,
        "outputs": [
            "sub",
            "rightSurf",
            "rightFsavgSurf",
            "qcHtml"
        ],
        "nb_outputs": 4,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "publishDir path: \"${params.out_dir}/mniSimulation/${sub}/simulations\", mode: 'copy', overwrite: false"
        ],
        "when": "",
        "stub": ""
    },
    "publishCifti": {
        "name_process": "publishCifti",
        "string_process": "\nprocess publishCifti{\n  \n                                          \n \n           \n                               \n  \n    publishDir path: \"${params.out_dir}/fsaverage_LR32k/${sub}/\", \\\n                mode: 'copy', \\\n                overwrite: true\n\n\tinput:\n\ttuple val(sub), path(sim_cifti)\n\n\toutput:\n\ttuple val(sub), path(sim_cifti)\n\n\tshell:\n\t'''\n\techo \"Publishing to !{params.out_dir}/fsaverage_LR32k/!{sub}\"\n\t'''\n\n\n}",
        "nb_lignes_process": 23,
        "string_script": "\t'''\n\techo \"Publishing to !{params.out_dir}/fsaverage_LR32k/!{sub}\"\n\t'''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "sim_cifti"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sub"
        ],
        "nb_outputs": 1,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "publishDir path: \"${params.out_dir}/fsaverage_LR32k/${sub}/\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "fs_to_gifti": {
        "name_process": "fs_to_gifti",
        "string_process": "\nprocess fs_to_gifti{\n\n                                                       \n                                                            \n                         \n    label 'freesurfer'\n\n      \n                                      \n     \n             \n                        \n                                                   \n                                                                \n                                                             \n     \n                                                                 \n      \n    input:\n    tuple val(sub), val(hemi), path(fs_white), path(freesurfer_file)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.${hemi}.shape.gii\"), emit: gifti\n\n    shell:\n    '''\n    mris_convert -c !{freesurfer_file} !{fs_white} !{sub}.!{hemi}.shape.gii\n    '''\n}",
        "nb_lignes_process": 28,
        "string_script": "    '''\n    mris_convert -c !{freesurfer_file} !{fs_white} !{sub}.!{hemi}.shape.gii\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "fs_white",
            "freesurfer_file"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "label 'freesurfer'"
        ],
        "when": "",
        "stub": ""
    },
    "freesurfer_prep": {
        "name_process": "freesurfer_prep",
        "string_process": "\nprocess freesurfer_prep{\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), path(fs_white), path(fs_pial), path(fs_sphere), path(resample_sphere)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.${hemi}.midthickness.surf.gii\"), emit: current_midthickness\n    tuple val(sub), val(hemi), path(\"${sub}.${hemi}.midthickness.32k_fs_LR.surf.gii\"), emit: new_midthickness\n    tuple val(sub), val(hemi), path(\"${sub}.${hemi}.sphere.reg.surf.gii\"), emit: current_gifti_sphere\n\n    shell:\n    '''\n    wb_shortcuts -freesurfer-resample-prep !{fs_white} !{fs_pial} !{fs_sphere} !{resample_sphere} \\\n    !{sub}.!{hemi}.midthickness.surf.gii \\\n    !{sub}.!{hemi}.midthickness.32k_fs_LR.surf.gii \\\n    !{hemi}.sphere.reg.surf.gii\n\n    mv !{hemi}.sphere.reg.surf.gii !{sub}.!{hemi}.sphere.reg.surf.gii\n    '''\n}",
        "nb_lignes_process": 20,
        "string_script": "    '''\n    wb_shortcuts -freesurfer-resample-prep !{fs_white} !{fs_pial} !{fs_sphere} !{resample_sphere} \\\n    !{sub}.!{hemi}.midthickness.surf.gii \\\n    !{sub}.!{hemi}.midthickness.32k_fs_LR.surf.gii \\\n    !{hemi}.sphere.reg.surf.gii\n\n    mv !{hemi}.sphere.reg.surf.gii !{sub}.!{hemi}.sphere.reg.surf.gii\n    '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "fs_white",
            "fs_pial",
            "fs_sphere",
            "resample_sphere"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "metric_resample": {
        "name_process": "metric_resample",
        "string_process": "\nprocess metric_resample{\n    label 'connectome'\n\n    input:\n    tuple val(sub), val(hemi), path(gifti_file), path(current_sphere_file), path(resample_sphere), path(current_midthickness_file), path(new_midthickness_file)\n\n    output:\n    tuple val(sub), val(hemi), path(\"${sub}.E.norm.${hemi}.32k_fs_LR.func.gii\"), emit: new_enorm_resampled\n\n    shell:\n    '''\n    wb_command -metric-resample !{gifti_file} !{current_sphere_file} !{resample_sphere} \\\n    ADAP_BARY_AREA !{sub}.E.norm.!{hemi}.32k_fs_LR.func.gii \\\n    -area-surfs !{current_midthickness_file} !{new_midthickness_file}\n    '''\n}",
        "nb_lignes_process": 15,
        "string_script": "    '''\n    wb_command -metric-resample !{gifti_file} !{current_sphere_file} !{resample_sphere} \\\n    ADAP_BARY_AREA !{sub}.E.norm.!{hemi}.32k_fs_LR.func.gii \\\n    -area-surfs !{current_midthickness_file} !{new_midthickness_file}\n    '''",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "hemi",
            "gifti_file",
            "current_sphere_file",
            "resample_sphere",
            "current_midthickness_file",
            "new_midthickness_file"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "create_dense_scalar": {
        "name_process": "create_dense_scalar",
        "string_process": "\nprocess create_dense_scalar{\n    label 'connectome'\n\n    input:\n    tuple val(sub), path(resampled_L_file), path(resampled_R_file)\n\n    output:\n    tuple val(sub), path(\"${sub}.norm.E.32k_fs_LR.dscalar.nii\"), emit:sim_dscalar\n\n    shell:\n    '''\n    wb_command -cifti-create-dense-scalar !{sub}.norm.E.32k_fs_LR.dscalar.nii \\\n    -left-metric !{resampled_L_file} -right-metric !{resampled_R_file}\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    wb_command -cifti-create-dense-scalar !{sub}.norm.E.32k_fs_LR.dscalar.nii \\\n    -left-metric !{resampled_L_file} -right-metric !{resampled_R_file}\n    '''",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "resampled_L_file",
            "resampled_R_file"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "label 'connectome'"
        ],
        "when": "",
        "stub": ""
    },
    "placeCoil": {
        "name_process": "placeCoil",
        "string_process": "\nprocess placeCoil{\n  \n                                                \n  \n    label 'simnibs'\n    label 'bin'\n\n    input:\n    tuple val(sub), path(mesh), path(coordinate), val(twist)\n\n    output:\n    tuple val(sub), path(\"${sub}_coilPos.npy\"), emit: matsimnibs\n    tuple val(sub), path(\"${sub}_coilQC.html\"), emit: qcFile, optional: true\n\n    shell:\n    '''\n    python /scripts/simulation/placeCoil.py \\\n        !{coordinate} \\\n        !{mesh} \\\n        !{twist} \\\n        !{sub}_coilPos.npy \\\n        --qc-file !{sub}_coilQC.html\n    '''\n}",
        "nb_lignes_process": 23,
        "string_script": "    '''\n    python /scripts/simulation/placeCoil.py \\\n        !{coordinate} \\\n        !{mesh} \\\n        !{twist} \\\n        !{sub}_coilPos.npy \\\n        --qc-file !{sub}_coilQC.html\n    '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "twist",
            "mesh",
            "coordinate"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "label 'simnibs'",
            "label 'bin'"
        ],
        "when": "",
        "stub": ""
    },
    "simulate": {
        "name_process": "simulate",
        "string_process": "\nprocess simulate{\n    label 'simnibs'\n    label 'bin'\n\n    input:\n    tuple val(sub), path(mesh), path(matsimnibs),\\\n    path(coil), path(m2m_path), path(fs_path),\\\n    val(dosage)\n\n    output:\n    tuple val(sub), path(\"${sub}_TMS*.msh\"), emit: simMsh\n    tuple val(sub), path(\"${sub}_TMS*.geo\"), emit: simGeo\n    tuple val(sub), path(\"fsavg_overlays/lh.${sub}*\"), emit: leftFsavgSim\n    tuple val(sub), path(\"fsavg_overlays/rh.${sub}*\"), emit: rightFsavgSim\n    tuple val(sub), path(\"subject_overlays/lh.${sub}*\"), emit: leftSim\n    tuple val(sub), path(\"subject_overlays/rh.${sub}*\"), emit: rightSim\n\n    shell:\n    '''\n    python /scripts/simulation/simulate.py \\\n        !{mesh} \\\n        !{matsimnibs} \\\n        !{coil} \\\n        --gifti --m2m-path !{m2m_path} \\\n        --dosage !{dosage}\n    '''\n}",
        "nb_lignes_process": 26,
        "string_script": "    '''\n    python /scripts/simulation/simulate.py \\\n        !{mesh} \\\n        !{matsimnibs} \\\n        !{coil} \\\n        --gifti --m2m-path !{m2m_path} \\\n        --dosage !{dosage}\n    '''",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "mesh",
            "matsimnibs",
            "coil",
            "m2m_path",
            "fs_path",
            "dosage"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "label 'simnibs'",
            "label 'bin'"
        ],
        "when": "",
        "stub": ""
    },
    "publish": {
        "name_process": "publish",
        "string_process": "\nprocess publish{\n    publishDir path: \"$params.out_dir\", \\\n               mode: 'move', \\\n               overwrite: true\n\n    input:\n    tuple val(sub), path(warped), path(warp), path(inverseWarp)\n\n    output:\n    tuple val(sub), path(warped), path(warp), path(inverseWarp)\n\n    shell:\n    '''\n    echo \"Moving files into !{params.out_dir}\n    '''\n}",
        "nb_lignes_process": 15,
        "string_script": "    '''\n    echo \"Moving files into !{params.out_dir}\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sub",
            "warped",
            "warp",
            "inverseWarp"
        ],
        "nb_inputs": 4,
        "outputs": [
            "sub"
        ],
        "nb_outputs": 1,
        "name_workflow": "TIGRLab__nextflow-simnibs",
        "directive": [
            "publishDir path: \"$params.out_dir\", mode: 'move', overwrite: true"
        ],
        "when": "",
        "stub": ""
    }
}
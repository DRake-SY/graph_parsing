{
    "OPERATION_1": {
        "string": "inasv_table_ch = Channel.fromPath(params.inasv_table, checkIfExists:true)\n                           .set { tsv_only }",
        "origin": [
            [
                "params.inasv_table, checkIfExists:true",
                "A"
            ]
        ],
        "gives": [
            [
                "inasv_table_ch",
                "P"
            ],
            [
                "tsv_only",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "newick_ch = Channel.fromPath(params.innewick, checkIfExists:true)\n                         .set { newick_only }",
        "origin": [
            [
                "params.innewick, checkIfExists:true",
                "A"
            ]
        ],
        "gives": [
            [
                "newick_ch",
                "P"
            ],
            [
                "newick_only",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "inasv_table_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "inasv_table_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "newick_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "newick_ch",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "dada2merge_tabledir_ch = Channel.fromPath(params.merge_tabledir, checkIfExists:true)",
        "origin": [
            [
                "params.merge_tabledir, checkIfExists:true",
                "A"
            ]
        ],
        "gives": [
            [
                "dada2merge_tabledir_ch",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "dada2merge_repseqsdir_ch = Channel.fromPath(params.merge_repseqsdir, checkIfExists:true)",
        "origin": [
            [
                "params.merge_repseqsdir, checkIfExists:true",
                "A"
            ]
        ],
        "gives": [
            [
                "dada2merge_repseqsdir_ch",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "dada2merge_tabledir_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "dada2merge_tabledir_ch",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "dada2merge_repseqsdir_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "dada2merge_repseqsdir_ch",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel.from(summary.collect{ [it.key, it.value] })\n    .map { k,v -> \"<dt>$k</dt><dd><samp>${v ?: '<span style=\\\"color:#999999;\\\">N/A</a>'}</samp></dd>\" }\n    .reduce { a, b -> return [a, b].join(\"\\n            \") }\n    .map { x -> \"\"\"\n    id: 'samba-summary'\n    description: \" - this information is collected when the pipeline is started.\"\n    section_name: 'samba Workflow Summary'\n    section_href: 'https://github.com/ifremer-bioinformatics/samba'\n    plot_type: 'html'\n    data: |\n        <dl class=\\\"dl-horizontal\\\">\n            $x\n        </dl>\n    \"\"\".stripIndent() }\n    .set { ch_workflow_summary }",
        "origin": [
            [
                "summary.collect{ [it.key, it.value] }",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_workflow_summary",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "data_ready = Channel.value(\"none\")",
        "origin": [
            [
                "\"none\"",
                "V"
            ]
        ],
        "gives": [
            [
                "data_ready",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel.fromPath(params.input_metadata, checkIfExists:true)\n                .into { metadata4dada2 ; metadata4dbotu3 ; metadata_filtering_tax ; metadata4stats ; metadata4integrity ; metadata4picrust2 ; metadata4ancom }",
        "origin": [
            [
                "params.input_metadata, checkIfExists:true",
                "A"
            ]
        ],
        "gives": [
            [
                "metadata4dada2",
                "P"
            ],
            [
                "metadata4dbotu3",
                "P"
            ],
            [
                "metadata_filtering_tax",
                "P"
            ],
            [
                "metadata4stats",
                "P"
            ],
            [
                "metadata4integrity",
                "P"
            ],
            [
                "metadata4picrust2",
                "P"
            ],
            [
                "metadata4ancom",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel.fromPath(params.input_manifest, checkIfExists:true)\n                .into { manifest ; manifest4integrity }",
        "origin": [
            [
                "params.input_manifest, checkIfExists:true",
                "A"
            ]
        ],
        "gives": [
            [
                "manifest",
                "P"
            ],
            [
                "manifest4integrity",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "Channel.empty().into { manifest ; manifest4integrity }",
        "origin": [],
        "gives": [
            [
                "manifest",
                "P"
            ],
            [
                "manifest4integrity",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel.fromPath(params.input_metadata, checkIfExists:true)\n    .set { metadata_merge_ch }",
        "origin": [
            [
                "params.input_metadata, checkIfExists:true",
                "A"
            ]
        ],
        "gives": [
            [
                "metadata_merge_ch",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "Channel.fromPath(params.input_manifest, checkIfExists:true).into { manifest_lr ; manifest_lr2fasta }",
        "origin": [
            [
                "params.input_manifest, checkIfExists:true",
                "A"
            ]
        ],
        "gives": [
            [
                "manifest_lr",
                "P"
            ],
            [
                "manifest_lr2fasta",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "Channel\n     .from(params.picrust_var)\n     .splitCsv(sep : ',', strip : true)\n     .flatten()\n     .set { var_picrust2 }",
        "origin": [
            [
                "params.picrust_var",
                "V"
            ]
        ],
        "gives": [
            [
                "var_picrust2",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "Channel\n     .from(params.ancom_var)\n     .splitCsv(sep : ',', strip : true)\n     .flatten()\n     .set { ancom_var_list }",
        "origin": [
            [
                "params.ancom_var",
                "V"
            ]
        ],
        "gives": [
            [
                "ancom_var_list",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "Channel\n  .from(params.alpha_div_group)\n  .splitCsv(sep : ',', strip : true)\n  .flatten()\n  .set { alpha_list_var }",
        "origin": [
            [
                "params.alpha_div_group",
                "V"
            ]
        ],
        "gives": [
            [
                "alpha_list_var",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "Channel\n  .from(params.beta_div_var)\n  .splitCsv(sep : ',', strip : true)\n  .flatten()\n  .into { beta_var_nn ; beta_var_rare ; beta_var_deseq ; beta_var_css }",
        "origin": [
            [
                "params.beta_div_var",
                "V"
            ]
        ],
        "gives": [
            [
                "beta_var_nn",
                "P"
            ],
            [
                "beta_var_rare",
                "P"
            ],
            [
                "beta_var_deseq",
                "P"
            ],
            [
                "beta_var_css",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "Channel\n  .from(params.desc_comp_crit)\n  .splitCsv(sep : ',', strip : true)\n  .flatten()\n  .set { desc_comp_list }",
        "origin": [
            [
                "params.desc_comp_crit",
                "V"
            ]
        ],
        "gives": [
            [
                "desc_comp_list",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "SAMBAtemplate_ch = Channel.fromPath(params.SAMBAtemplate, checkIfExists:true)",
        "origin": [
            [
                "params.SAMBAtemplate, checkIfExists:true",
                "A"
            ]
        ],
        "gives": [
            [
                "SAMBAtemplate_ch",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "SAMBAtemplate_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SAMBAtemplate_ch",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "SAMBAcss_ch = Channel.fromPath(params.SAMBAcss, checkIfExists:true)",
        "origin": [
            [
                "params.SAMBAcss, checkIfExists:true",
                "A"
            ]
        ],
        "gives": [
            [
                "SAMBAcss_ch",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "SAMBAcss_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SAMBAcss_ch",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "SAMBAwf_ch = Channel.fromPath(params.SAMBAwf, checkIfExists:true)",
        "origin": [
            [
                "params.SAMBAwf, checkIfExists:true",
                "A"
            ]
        ],
        "gives": [
            [
                "SAMBAwf_ch",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "SAMBAwf_ch = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "SAMBAwf_ch",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "betastats_reportok = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "betastats_reportok",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "SAMBAreport_okstats_alpha = Channel.from('report_without_stats_alpha_ok')",
        "origin": [
            [
                "'report_without_stats_alpha_ok'",
                "V"
            ]
        ],
        "gives": [
            [
                "SAMBAreport_okstats_alpha",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "SAMBAreport_okstats_beta = Channel.from('report_without_stats_beta_ok')",
        "origin": [
            [
                "'report_without_stats_beta_ok'",
                "V"
            ]
        ],
        "gives": [
            [
                "SAMBAreport_okstats_beta",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "SAMBAreport_okdesc_comp = Channel.from('report_without_desc_comp_ok')",
        "origin": [
            [
                "'report_without_desc_comp_ok'",
                "V"
            ]
        ],
        "gives": [
            [
                "SAMBAreport_okdesc_comp",
                "P"
            ]
        ]
    },
    "OPERATION_31": {
        "string": "SAMBAreport_okpicrust2 = Channel.from('report_without_picrust2_ok')",
        "origin": [
            [
                "'report_without_picrust2_ok'",
                "V"
            ]
        ],
        "gives": [
            [
                "SAMBAreport_okpicrust2",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "SAMBAreport_okancom = Channel.from('report_without_ancom_ok')",
        "origin": [
            [
                "'report_without_ancom_ok'",
                "V"
            ]
        ],
        "gives": [
            [
                "SAMBAreport_okancom",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_34": {
        "string": "testmetadata.set { metadata4stats }",
        "origin": [
            [
                "testmetadata",
                "P"
            ]
        ],
        "gives": [
            [
                "metadata4stats",
                "P"
            ]
        ]
    },
    "OPERATION_35": {
        "string": "testmanifest.into { manifest ; manifest4integrity }",
        "origin": [
            [
                "testmanifest",
                "P"
            ]
        ],
        "gives": [
            [
                "manifest",
                "P"
            ],
            [
                "manifest4integrity",
                "P"
            ]
        ]
    },
    "OPERATION_36": {
        "string": "testmetadata.into { metadata4dada2 ; metadata4dbotu3 ; metadata_filtering_tax ; metadata4stats ; metadata4integrity ; metadata4picrust2 ; metadata4ancom }",
        "origin": [
            [
                "testmetadata",
                "P"
            ]
        ],
        "gives": [
            [
                "metadata4dada2",
                "P"
            ],
            [
                "metadata4dbotu3",
                "P"
            ],
            [
                "metadata_filtering_tax",
                "P"
            ],
            [
                "metadata4stats",
                "P"
            ],
            [
                "metadata4integrity",
                "P"
            ],
            [
                "metadata4picrust2",
                "P"
            ],
            [
                "metadata4ancom",
                "P"
            ]
        ]
    },
    "OPERATION_37": {
        "string": "data_ready.into { ready_integrity ; ready_import ; ready_lr}",
        "origin": [
            [
                "data_ready",
                "P"
            ]
        ],
        "gives": [
            [
                "ready_integrity",
                "P"
            ],
            [
                "ready_import",
                "P"
            ],
            [
                "ready_lr",
                "P"
            ]
        ]
    },
    "OPERATION_38": {
        "string": "metadata_sort.into { metadata4dada2 ; metadata4dbotu3 ; metadata4stats ; metadata4picrust2 ; metadata4ancom }",
        "origin": [
            [
                "metadata_sort",
                "P"
            ]
        ],
        "gives": [
            [
                "metadata4dada2",
                "P"
            ],
            [
                "metadata4dbotu3",
                "P"
            ],
            [
                "metadata4stats",
                "P"
            ],
            [
                "metadata4picrust2",
                "P"
            ],
            [
                "metadata4ancom",
                "P"
            ]
        ]
    },
    "OPERATION_39": {
        "string": "manifest_sort.set { manifest }",
        "origin": [
            [
                "manifest_sort",
                "P"
            ]
        ],
        "gives": [
            [
                "manifest",
                "P"
            ]
        ]
    },
    "OPERATION_40": {
        "string": "output_ch.into { taxonomy_output ; decontam_output }",
        "origin": [
            [
                "output_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "taxonomy_output",
                "P"
            ],
            [
                "decontam_output",
                "P"
            ]
        ]
    },
    "OPERATION_41": {
        "string": "longreadsmanifest = testmanifest.splitCsv(header: true, sep:'\\t')\n                                     .map { row -> tuple( row.\"sample-id\", file(row.\"absolute-filepath\")) }",
        "origin": [
            [
                "testmanifest",
                "P"
            ]
        ],
        "gives": [
            [
                "longreadsmanifest",
                "P"
            ]
        ]
    },
    "OPERATION_42": {
        "string": "longreadstofasta = testmanifest.splitCsv(header: true, sep:'\\t')\n                                    .map { row -> file(row.\"absolute-filepath\") }",
        "origin": [
            [
                "testmanifest",
                "P"
            ]
        ],
        "gives": [
            [
                "longreadstofasta",
                "P"
            ]
        ]
    },
    "OPERATION_43": {
        "string": "longreadsmanifest = manifest_lr.splitCsv(header: true, sep:'\\t')\n                                 .map { row -> tuple( row.\"sample-id\", file(row.\"absolute-filepath\")) }",
        "origin": [
            [
                "manifest_lr",
                "P"
            ]
        ],
        "gives": [
            [
                "longreadsmanifest",
                "P"
            ]
        ]
    },
    "OPERATION_44": {
        "string": "longreadstofasta = manifest_lr2fasta.splitCsv(header: true, sep:'\\t')\n                                .map { row -> file(row.\"absolute-filepath\") }",
        "origin": [
            [
                "manifest_lr2fasta",
                "P"
            ]
        ],
        "gives": [
            [
                "longreadstofasta",
                "P"
            ]
        ]
    },
    "OPERATION_45": {
        "string": "lr_sequences.collectFile(name : 'lr_sequences.fasta', newLine : false, storeDir : \"${params.outdir}/${params.lr_mapping_dirname}\")\n               .subscribe {       println \"Fasta sequences are saved to file : $it\"       }",
        "origin": [
            [
                "lr_sequences",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_46": {
        "string": "betastats_reportok = process_beta_report.concat( process_beta_report_CSS, process_beta_report_DESeq2, process_beta_report_rarefied )",
        "origin": [
            [
                "process_beta_report",
                "P"
            ],
            [
                "process_beta_report_CSS",
                "P"
            ],
            [
                "process_beta_report_DESeq2",
                "P"
            ],
            [
                "process_beta_report_rarefied",
                "P"
            ]
        ],
        "gives": [
            [
                "betastats_reportok",
                "P"
            ]
        ]
    },
    "OPERATION_47": {
        "string": "dada2_input  = trimmed_data",
        "origin": [
            [
                "trimmed_data",
                "P"
            ]
        ],
        "gives": [
            [
                "dada2_input",
                "P"
            ]
        ]
    },
    "OPERATION_48": {
        "string": "dada2_input  = imported_data",
        "origin": [
            [
                "imported_data",
                "P"
            ]
        ],
        "gives": [
            [
                "dada2_input",
                "P"
            ]
        ]
    },
    "OPERATION_49": {
        "string": "outputA  = dada2merge_output",
        "origin": [
            [
                "dada2merge_output",
                "P"
            ]
        ],
        "gives": [
            [
                "outputA",
                "P"
            ]
        ]
    },
    "OPERATION_50": {
        "string": "outputA  = dada2_output",
        "origin": [
            [
                "dada2_output",
                "P"
            ]
        ],
        "gives": [
            [
                "outputA",
                "P"
            ]
        ]
    },
    "OPERATION_51": {
        "string": "output_ch  = dbotu3_output",
        "origin": [
            [
                "dbotu3_output",
                "P"
            ]
        ],
        "gives": [
            [
                "output_ch",
                "P"
            ]
        ]
    },
    "OPERATION_52": {
        "string": "output_ch  = outputA",
        "origin": [
            [
                "outputA",
                "P"
            ]
        ],
        "gives": [
            [
                "output_ch",
                "P"
            ]
        ]
    },
    "OPERATION_53": {
        "string": "seqs_taxoA  = merge_seqs_taxo",
        "origin": [
            [
                "merge_seqs_taxo",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_taxoA",
                "P"
            ]
        ]
    },
    "OPERATION_54": {
        "string": "seqs_taxoA  = dada2_seqs_taxo",
        "origin": [
            [
                "dada2_seqs_taxo",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_taxoA",
                "P"
            ]
        ]
    },
    "OPERATION_55": {
        "string": "seqs_taxo  = dbotu3_seqs_taxo",
        "origin": [
            [
                "dbotu3_seqs_taxo",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_taxo",
                "P"
            ]
        ]
    },
    "OPERATION_56": {
        "string": "seqs_taxo  = seqs_taxoA",
        "origin": [
            [
                "seqs_taxoA",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_taxo",
                "P"
            ]
        ]
    },
    "OPERATION_57": {
        "string": "asv_table  = dbotu3_table_filtering_tax",
        "origin": [
            [
                "dbotu3_table_filtering_tax",
                "P"
            ]
        ],
        "gives": [
            [
                "asv_table",
                "P"
            ]
        ]
    },
    "OPERATION_58": {
        "string": "asv_table  = dada2_table_filtering_tax",
        "origin": [
            [
                "dada2_table_filtering_tax",
                "P"
            ]
        ],
        "gives": [
            [
                "asv_table",
                "P"
            ]
        ]
    },
    "OPERATION_59": {
        "string": "asv_seq  = dbotu3_seqs_filtering_tax",
        "origin": [
            [
                "dbotu3_seqs_filtering_tax",
                "P"
            ]
        ],
        "gives": [
            [
                "asv_seq",
                "P"
            ]
        ]
    },
    "OPERATION_60": {
        "string": "asv_seq  = dada2_seqs_filtering_tax",
        "origin": [
            [
                "dada2_seqs_filtering_tax",
                "P"
            ]
        ],
        "gives": [
            [
                "asv_seq",
                "P"
            ]
        ]
    },
    "OPERATION_61": {
        "string": "microDecon_table  = tax_filtered_table_tsv",
        "origin": [
            [
                "tax_filtered_table_tsv",
                "P"
            ]
        ],
        "gives": [
            [
                "microDecon_table",
                "P"
            ]
        ]
    },
    "OPERATION_62": {
        "string": "microDecon_table  = biom_tsv_decontam",
        "origin": [
            [
                "biom_tsv_decontam",
                "P"
            ]
        ],
        "gives": [
            [
                "microDecon_table",
                "P"
            ]
        ]
    },
    "OPERATION_63": {
        "string": "seqs_phyloA  = merge_seqs_phylo",
        "origin": [
            [
                "merge_seqs_phylo",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_phyloA",
                "P"
            ]
        ]
    },
    "OPERATION_64": {
        "string": "seqs_phyloA  = dada2_seqs_phylo",
        "origin": [
            [
                "dada2_seqs_phylo",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_phyloA",
                "P"
            ]
        ]
    },
    "OPERATION_65": {
        "string": "seqs_phyloB  = dbotu3_seqs_phylo",
        "origin": [
            [
                "dbotu3_seqs_phylo",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_phyloB",
                "P"
            ]
        ]
    },
    "OPERATION_66": {
        "string": "seqs_phyloB  = seqs_phyloA",
        "origin": [
            [
                "seqs_phyloA",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_phyloB",
                "P"
            ]
        ]
    },
    "OPERATION_67": {
        "string": "seqs_phyloC  = tax_filtered_seq",
        "origin": [
            [
                "tax_filtered_seq",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_phyloC",
                "P"
            ]
        ]
    },
    "OPERATION_68": {
        "string": "seqs_phyloC  = seqs_phyloB",
        "origin": [
            [
                "seqs_phyloB",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_phyloC",
                "P"
            ]
        ]
    },
    "OPERATION_69": {
        "string": "seqs_phylo  = decontam_seqs_phylo",
        "origin": [
            [
                "decontam_seqs_phylo",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_phylo",
                "P"
            ]
        ]
    },
    "OPERATION_70": {
        "string": "seqs_phylo  = seqs_phyloC",
        "origin": [
            [
                "seqs_phyloC",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_phylo",
                "P"
            ]
        ]
    },
    "OPERATION_71": {
        "string": "table_picrust2A  = merge_table_picrust2",
        "origin": [
            [
                "merge_table_picrust2",
                "P"
            ]
        ],
        "gives": [
            [
                "table_picrust2A",
                "P"
            ]
        ]
    },
    "OPERATION_72": {
        "string": "table_picrust2A  = dada2_table_picrust2",
        "origin": [
            [
                "dada2_table_picrust2",
                "P"
            ]
        ],
        "gives": [
            [
                "table_picrust2A",
                "P"
            ]
        ]
    },
    "OPERATION_73": {
        "string": "table_picrust2B  = dbotu3_table_picrust2",
        "origin": [
            [
                "dbotu3_table_picrust2",
                "P"
            ]
        ],
        "gives": [
            [
                "table_picrust2B",
                "P"
            ]
        ]
    },
    "OPERATION_74": {
        "string": "table_picrust2B  = table_picrust2A",
        "origin": [
            [
                "table_picrust2A",
                "P"
            ]
        ],
        "gives": [
            [
                "table_picrust2B",
                "P"
            ]
        ]
    },
    "OPERATION_75": {
        "string": "table_picrust2C  = tax_filtered_table_picrust2",
        "origin": [
            [
                "tax_filtered_table_picrust2",
                "P"
            ]
        ],
        "gives": [
            [
                "table_picrust2C",
                "P"
            ]
        ]
    },
    "OPERATION_76": {
        "string": "table_picrust2C  = table_picrust2B",
        "origin": [
            [
                "table_picrust2B",
                "P"
            ]
        ],
        "gives": [
            [
                "table_picrust2C",
                "P"
            ]
        ]
    },
    "OPERATION_77": {
        "string": "table_picrust2  = decontam_table_picrust2",
        "origin": [
            [
                "decontam_table_picrust2",
                "P"
            ]
        ],
        "gives": [
            [
                "table_picrust2",
                "P"
            ]
        ]
    },
    "OPERATION_78": {
        "string": "table_picrust2  = table_picrust2C",
        "origin": [
            [
                "table_picrust2C",
                "P"
            ]
        ],
        "gives": [
            [
                "table_picrust2",
                "P"
            ]
        ]
    },
    "OPERATION_79": {
        "string": "seqs_picrust2A  = merge_seqs_picrust2",
        "origin": [
            [
                "merge_seqs_picrust2",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_picrust2A",
                "P"
            ]
        ]
    },
    "OPERATION_80": {
        "string": "seqs_picrust2A  = dada2_seqs_picrust2",
        "origin": [
            [
                "dada2_seqs_picrust2",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_picrust2A",
                "P"
            ]
        ]
    },
    "OPERATION_81": {
        "string": "seqs_picrust2B  = dbotu3_seqs_picrust2",
        "origin": [
            [
                "dbotu3_seqs_picrust2",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_picrust2B",
                "P"
            ]
        ]
    },
    "OPERATION_82": {
        "string": "seqs_picrust2B  = seqs_picrust2A",
        "origin": [
            [
                "seqs_picrust2A",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_picrust2B",
                "P"
            ]
        ]
    },
    "OPERATION_83": {
        "string": "seqs_picrust2C  = tax_filtered_seq_picrust2",
        "origin": [
            [
                "tax_filtered_seq_picrust2",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_picrust2C",
                "P"
            ]
        ]
    },
    "OPERATION_84": {
        "string": "seqs_picrust2C  = seqs_picrust2B",
        "origin": [
            [
                "seqs_picrust2B",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_picrust2C",
                "P"
            ]
        ]
    },
    "OPERATION_85": {
        "string": "seqs_picrust2  = decontam_seqs_picrust2",
        "origin": [
            [
                "decontam_seqs_picrust2",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_picrust2",
                "P"
            ]
        ]
    },
    "OPERATION_86": {
        "string": "seqs_picrust2  = seqs_picrust2C",
        "origin": [
            [
                "seqs_picrust2C",
                "P"
            ]
        ],
        "gives": [
            [
                "seqs_picrust2",
                "P"
            ]
        ]
    },
    "OPERATION_87": {
        "string": "table_ancomA  = merge_table_ancom",
        "origin": [
            [
                "merge_table_ancom",
                "P"
            ]
        ],
        "gives": [
            [
                "table_ancomA",
                "P"
            ]
        ]
    },
    "OPERATION_88": {
        "string": "table_ancomA  = dada2_table_ancom",
        "origin": [
            [
                "dada2_table_ancom",
                "P"
            ]
        ],
        "gives": [
            [
                "table_ancomA",
                "P"
            ]
        ]
    },
    "OPERATION_89": {
        "string": "table_ancomB  = dbotu3_table_ancom",
        "origin": [
            [
                "dbotu3_table_ancom",
                "P"
            ]
        ],
        "gives": [
            [
                "table_ancomB",
                "P"
            ]
        ]
    },
    "OPERATION_90": {
        "string": "table_ancomB  = table_ancomA",
        "origin": [
            [
                "table_ancomA",
                "P"
            ]
        ],
        "gives": [
            [
                "table_ancomB",
                "P"
            ]
        ]
    },
    "OPERATION_91": {
        "string": "table_ancomC  = tax_filtered_table_ancom",
        "origin": [
            [
                "tax_filtered_table_ancom",
                "P"
            ]
        ],
        "gives": [
            [
                "table_ancomC",
                "P"
            ]
        ]
    },
    "OPERATION_92": {
        "string": "table_ancomC  = table_ancomB",
        "origin": [
            [
                "table_ancomB",
                "P"
            ]
        ],
        "gives": [
            [
                "table_ancomC",
                "P"
            ]
        ]
    },
    "OPERATION_93": {
        "string": "table_ancom  = decontam_table_ancom",
        "origin": [
            [
                "decontam_table_ancom",
                "P"
            ]
        ],
        "gives": [
            [
                "table_ancom",
                "P"
            ]
        ]
    },
    "OPERATION_94": {
        "string": "table_ancom  = table_ancomC",
        "origin": [
            [
                "table_ancomC",
                "P"
            ]
        ],
        "gives": [
            [
                "table_ancom",
                "P"
            ]
        ]
    },
    "OPERATION_95": {
        "string": "tsv = lr_biom_tsv",
        "origin": [
            [
                "lr_biom_tsv",
                "P"
            ]
        ],
        "gives": [
            [
                "tsv",
                "P"
            ]
        ]
    },
    "OPERATION_96": {
        "string": "tsvA  = tax_filtered_table_tsv_stats",
        "origin": [
            [
                "tax_filtered_table_tsv_stats",
                "P"
            ]
        ],
        "gives": [
            [
                "tsvA",
                "P"
            ]
        ]
    },
    "OPERATION_97": {
        "string": "tsvA  = biom_tsv",
        "origin": [
            [
                "biom_tsv",
                "P"
            ]
        ],
        "gives": [
            [
                "tsvA",
                "P"
            ]
        ]
    },
    "OPERATION_98": {
        "string": "tsvB  = decontam_table",
        "origin": [
            [
                "decontam_table",
                "P"
            ]
        ],
        "gives": [
            [
                "tsvB",
                "P"
            ]
        ]
    },
    "OPERATION_99": {
        "string": "tsvB  = tsvA",
        "origin": [
            [
                "tsvA",
                "P"
            ]
        ],
        "gives": [
            [
                "tsvB",
                "P"
            ]
        ]
    },
    "OPERATION_100": {
        "string": "tsv  = tsv_only",
        "origin": [
            [
                "tsv_only",
                "P"
            ]
        ],
        "gives": [
            [
                "tsv",
                "P"
            ]
        ]
    },
    "OPERATION_101": {
        "string": "tsv  = tsvB",
        "origin": [
            [
                "tsvB",
                "P"
            ]
        ],
        "gives": [
            [
                "tsv",
                "P"
            ]
        ]
    },
    "OPERATION_102": {
        "string": "newick  = newick_only",
        "origin": [
            [
                "newick_only",
                "P"
            ]
        ],
        "gives": [
            [
                "newick",
                "P"
            ]
        ]
    },
    "OPERATION_103": {
        "string": "newick  = newick_phylo",
        "origin": [
            [
                "newick_phylo",
                "P"
            ]
        ],
        "gives": [
            [
                "newick",
                "P"
            ]
        ]
    },
    "OPERATION_104": {
        "string": "SAMBAreport_okstats_alpha  = process_alpha_report",
        "origin": [
            [
                "process_alpha_report",
                "P"
            ]
        ],
        "gives": [
            [
                "SAMBAreport_okstats_alpha",
                "P"
            ]
        ]
    },
    "OPERATION_105": {
        "string": "SAMBAreport_okstats_beta  = betastats_reportok",
        "origin": [
            [
                "betastats_reportok",
                "P"
            ]
        ],
        "gives": [
            [
                "SAMBAreport_okstats_beta",
                "P"
            ]
        ]
    },
    "OPERATION_106": {
        "string": "SAMBAreport_okdesc_comp  = process_desc_comp_report",
        "origin": [
            [
                "process_desc_comp_report",
                "P"
            ]
        ],
        "gives": [
            [
                "SAMBAreport_okdesc_comp",
                "P"
            ]
        ]
    },
    "OPERATION_107": {
        "string": "SAMBAreport_okpicrust2  = complete_picrust2_stats_cmd",
        "origin": [
            [
                "complete_picrust2_stats_cmd",
                "P"
            ]
        ],
        "gives": [
            [
                "SAMBAreport_okpicrust2",
                "P"
            ]
        ]
    },
    "OPERATION_108": {
        "string": "SAMBAreport_okancom  = completecmd_ancom",
        "origin": [
            [
                "completecmd_ancom",
                "P"
            ]
        ],
        "gives": [
            [
                "SAMBAreport_okancom",
                "P"
            ]
        ]
    }
}
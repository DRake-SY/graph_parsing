{
    "vireo_with_genotype": {
        "name_process": "vireo_with_genotype",
        "string_process": "process vireo_with_genotype {\n    tag \"${samplename}.${donors_gt_vcf}\"\n\n    publishDir \"${params.outdir}/vireo_gt/${samplename}/\", mode: \"${params.vireo.copy_mode}\", overwrite: true,\n\t  saveAs: {filename -> filename.replaceFirst(\"vireo_${samplename}/\",\"\") }\n    \n    when: \n      params.run_with_genotype_input\n    \n    input:\n      tuple val(samplename), path(cell_data), path(donors_gt_vcf)\n    \n    output:\n      tuple val(samplename), path(\"vireo_${samplename}/*\"), emit: output_dir\n      tuple val(samplename), path(\"vireo_${samplename}/donor_ids.tsv\"), emit: sample_donor_ids \n      path(\"vireo_${samplename}/${samplename}.sample_summary.txt\"), emit: sample_summary_tsv\n      path(\"vireo_${samplename}/${samplename}__exp.sample_summary.txt\"), emit: sample__exp_summary_tsv\n\n    script:\n    \"\"\"\n\n      umask 2 # make files group_writable\n\n      vireo -c $cell_data -o vireo_${samplename} -d ${donors_gt_vcf} -t GT\n\n      # add samplename to summary.tsv,\n      # to then have Nextflow concat summary.tsv of all samples into a single file:\n\n      cat vireo_${samplename}/summary.tsv | \\\\\n        tail -n +2 | \\\\\n        sed s\\\"/^/${samplename}\\\\t/\\\"g > vireo_${samplename}/${samplename}.sample_summary.txt\n\n      cat vireo_${samplename}/summary.tsv | \\\\\n        tail -n +2 | \\\\\n        sed s\\\"/^/${samplename}__/\\\"g > vireo_${samplename}/${samplename}__exp.sample_summary.txt\n\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    \"\"\"\n\n      umask 2 # make files group_writable\n\n      vireo -c $cell_data -o vireo_${samplename} -d ${donors_gt_vcf} -t GT\n\n      # add samplename to summary.tsv,\n      # to then have Nextflow concat summary.tsv of all samples into a single file:\n\n      cat vireo_${samplename}/summary.tsv | \\\\\n        tail -n +2 | \\\\\n        sed s\\\"/^/${samplename}\\\\t/\\\"g > vireo_${samplename}/${samplename}.sample_summary.txt\n\n      cat vireo_${samplename}/summary.tsv | \\\\\n        tail -n +2 | \\\\\n        sed s\\\"/^/${samplename}__/\\\"g > vireo_${samplename}/${samplename}__exp.sample_summary.txt\n\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "Vireo"
        ],
        "tools_url": [
            "https://bio.tools/Vireo"
        ],
        "tools_dico": [
            {
                "name": "Vireo",
                "uri": "https://bio.tools/Vireo",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3200",
                                    "term": "DNA barcoding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3226",
                                    "term": "Variant prioritisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3200",
                                    "term": "Sample barcoding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3200",
                                    "term": "Community profiling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Bayesian demultiplexing of pooled single-cell RNA-seq data without genotype reference.",
                "homepage": "https://github.com/single-cell-genetics/vireo"
            }
        ],
        "inputs": [
            "samplename",
            "cell_data",
            "donors_gt_vcf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wtsi-hgi__nf_scrna_deconvolution",
        "directive": [
            "tag \"${samplename}.${donors_gt_vcf}\"",
            "publishDir \"${params.outdir}/vireo_gt/${samplename}/\", mode: \"${params.vireo.copy_mode}\", overwrite: true , saveAs: {filename -> filename.replaceFirst(\"vireo_${samplename}/\",\"\") }"
        ],
        "when": "params.run_with_genotype_input",
        "stub": ""
    },
    "plot_donor_ncells": {
        "name_process": "plot_donor_ncells",
        "string_process": "process plot_donor_ncells {\n    tag \"${sample_donor_summary_tsv}\"\n    \n    publishDir \"${params.outdir}/plots/\", mode: \"${params.plot_donor_ncells.copy_mode}\", overwrite: true,\n\tsaveAs: {filename -> filename.indexOf(\".pdf\") > 0 ? filename.replaceFirst(\"outputs/\",\"\") : \"$filename\"}\n    \n    when: \n    params.plot_donor_ncells.run\n\n    input: \n    path(sample_donor_summary_tsv)\n\n    output: \n    path(\"outputs/*.pdf\"), emit: sample_pdf\n\n    script:\n    \"\"\"\npython $workflow.projectDir/../bin/plot_donor_ncells.py \\\\\n  --output_dir \\$PWD/outputs \\\\\n  --sample_donor_summary_tsv ${sample_donor_summary_tsv} \\\\\n  --plotnine_dpi ${params.plot_donor_ncells.plotnine_dpi}\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\npython $workflow.projectDir/../bin/plot_donor_ncells.py \\\\\n  --output_dir \\$PWD/outputs \\\\\n  --sample_donor_summary_tsv ${sample_donor_summary_tsv} \\\\\n  --plotnine_dpi ${params.plot_donor_ncells.plotnine_dpi}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_donor_summary_tsv"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wtsi-hgi__nf_scrna_deconvolution",
        "directive": [
            "tag \"${sample_donor_summary_tsv}\"",
            "publishDir \"${params.outdir}/plots/\", mode: \"${params.plot_donor_ncells.copy_mode}\", overwrite: true , saveAs: {filename -> filename.indexOf(\".pdf\") > 0 ? filename.replaceFirst(\"outputs/\",\"\") : \"$filename\"}"
        ],
        "when": "params.plot_donor_ncells.run",
        "stub": ""
    },
    "subset_genotype": {
        "name_process": "subset_genotype",
        "string_process": "process subset_genotype {\n    tag \"${samplename}.${sample_subset_file}\"\n    publishDir \"${params.outdir}/subset_genotype/\", mode: \"${params.subset_genotype.copy_mode}\", pattern: \"${samplename}.${sample_subset_file}.subset.vcf.gz\"\n    \n    when: \n    params.genotype_input.subset_genotypes\n\n    input:\n    tuple val(samplename), path(cellsnp_vcf), path(donor_vcf), val(sample_subset_file)\n\n    output:\n    tuple val(samplename), path(\"${samplename}.subset.vcf.gz\"), emit: samplename_subsetvcf\n\n    script:\n    \"\"\"\n        echo ${sample_subset_file}\n        tabix -p vcf ${donor_vcf} || echo 'not typical VCF'\n        # tabix -p vcf ${cellsnp_vcf}\n        bcftools view ${donor_vcf} -s ${sample_subset_file} -Oz -o ${samplename}.subset.vcf.gz\n        rm ${donor_vcf}.tbi || echo 'not typical VCF'\n        # rm ${cellsnp_vcf}.tbi\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n        echo ${sample_subset_file}\n        tabix -p vcf ${donor_vcf} || echo 'not typical VCF'\n        # tabix -p vcf ${cellsnp_vcf}\n        bcftools view ${donor_vcf} -s ${sample_subset_file} -Oz -o ${samplename}.subset.vcf.gz\n        rm ${donor_vcf}.tbi || echo 'not typical VCF'\n        # rm ${cellsnp_vcf}.tbi\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "samplename",
            "sample_subset_file",
            "cellsnp_vcf",
            "donor_vcf"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wtsi-hgi__nf_scrna_deconvolution",
        "directive": [
            "tag \"${samplename}.${sample_subset_file}\"",
            "publishDir \"${params.outdir}/subset_genotype/\", mode: \"${params.subset_genotype.copy_mode}\", pattern: \"${samplename}.${sample_subset_file}.subset.vcf.gz\""
        ],
        "when": "params.genotype_input.subset_genotypes",
        "stub": ""
    },
    "guzip_vcf": {
        "name_process": "guzip_vcf",
        "string_process": "process guzip_vcf {\n    tag \"${samplename}\"\n\n             \n                                \n\n    input: \n        tuple val(samplename), path(genotypes)\n\n    output:\n        tuple val(samplename), path(\"${samplename}.vcf\"), emit: souporcell_vcf\n\n    script:\n    \"\"\"\n      bcftools view ${genotypes} -O v -o ${samplename}.vcf\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n      bcftools view ${genotypes} -O v -o ${samplename}.vcf\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "samplename",
            "genotypes"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wtsi-hgi__nf_scrna_deconvolution",
        "directive": [
            "tag \"${samplename}\""
        ],
        "when": "",
        "stub": ""
    },
    "plot_souporcell_vs_vireo": {
        "name_process": "plot_souporcell_vs_vireo",
        "string_process": "process plot_souporcell_vs_vireo {\n    tag \"${samplename}\"\n    publishDir \"${params.outdir}/souporcell_vs_vireo/\",\n\tmode: \"${params.plot_souporcell_vs_vireo.copy_mode}\",\n\tpattern: \"${samplename}_souporcell_vs_vireo.pdf\",\n\toverwrite: true\n    \n    when: \n    params.plot_souporcell_vs_vireo.run\n\n    input: \n    tuple val(samplename), path(donor_ids_tsv), path(clusters_tsv)\n    \n    output:\n    tuple val(samplename), file(\"${samplename}_souporcell_vs_vireo.pdf\"), emit: plot_pdf\n\n    script:\n    \"\"\"\numask 2 # make files group_writable\n\nRscript --vanilla ${projectDir}/../bin/plot_souporcell_vs_vireo.R ${samplename} ${donor_ids_tsv} ${clusters_tsv}\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\numask 2 # make files group_writable\n\nRscript --vanilla ${projectDir}/../bin/plot_souporcell_vs_vireo.R ${samplename} ${donor_ids_tsv} ${clusters_tsv}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplename",
            "donor_ids_tsv",
            "clusters_tsv"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wtsi-hgi__nf_scrna_deconvolution",
        "directive": [
            "tag \"${samplename}\"",
            "publishDir \"${params.outdir}/souporcell_vs_vireo/\" , mode: \"${params.plot_souporcell_vs_vireo.copy_mode}\" , pattern: \"${samplename}_souporcell_vs_vireo.pdf\" , overwrite: true"
        ],
        "when": "params.plot_souporcell_vs_vireo.run",
        "stub": ""
    },
    "celltypist": {
        "name_process": "celltypist",
        "string_process": "process celltypist {\n    tag \"${sample}\"\n\n    publishDir \"${params.outdir}/celltypist/${model}/${sample}/\", mode: \"${params.celltypist.copy_mode}\", overwrite: true,\n\tsaveAs: {filename -> filename.replaceFirst(\"outputs/\",\"\").replaceFirst(\"figures/\",\"\") }\n    \n    when: \n    params.celltypist.run\n\n    input: \n    tuple val(sample), val(filtered_matrix_h5), val(celltypist_model)\n                                           \n                                                                                 \n                                                                                   \n                                                              \n                                     \n\n    output: \n      tuple val(sample), path(\"outputs/${sample}_predicted_labels.csv\"), emit: sample_predicted_labels_csv\n      tuple val(sample), path(\"outputs/${sample}_probability_matrix.csv\"), emit: sample_probability_matrix_csv\n      tuple val(sample), path(\"outputs/${sample}_decision_matrix.csv\"), emit: sample_decision_matrix_csv\n      tuple val(sample), path(\"outputs/${sample}_*.pdf\"), emit: sample_plots_pdf\n      tuple val(sample), path(\"outputs/plot_prob/${sample}_*.pdf\"), emit: sample_plots_prob_pdf\n      \n    script:\n      model=\"${celltypist_model}\".replaceFirst(\".pkl\",\"\")\n\n      filtered_matrix_h5_path = file(\"${filtered_matrix_h5}/../filtered_feature_bc_matrix.h5\")\n      if (filtered_matrix_h5_path.exists()){\n        _=\"\"\n        \n      }else{\n        filtered_matrix_h5_path = file(\"${filtered_matrix_h5}/../cellbender_FPR_0pt05_filtered.h5\")\n        \n      }\n\n\n      \"\"\"\n        umask 2 # make files group_writable \n\n        mkdir -p outputs\n        echo ${filtered_matrix_h5}\n        python $workflow.projectDir/../bin/run_celltypist.py \\\\\n          --samplename ${sample} \\\\\n          --filtered_matrix_h5 ${filtered_matrix_h5_path} \\\\\n          --celltypist_model ${celltypist_model}  \\\\\n          --output_dir \\$PWD/outputs  \\\\\n          --input_h5_genome_version ${params.split_h5ad_per_donor.input_h5_genome_version}\n      \"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "      model=\"${celltypist_model}\".replaceFirst(\".pkl\",\"\")\n\n      filtered_matrix_h5_path = file(\"${filtered_matrix_h5}/../filtered_feature_bc_matrix.h5\")\n      if (filtered_matrix_h5_path.exists()){\n        _=\"\"\n        \n      }else{\n        filtered_matrix_h5_path = file(\"${filtered_matrix_h5}/../cellbender_FPR_0pt05_filtered.h5\")\n        \n      }\n\n\n      \"\"\"\n        umask 2 # make files group_writable \n\n        mkdir -p outputs\n        echo ${filtered_matrix_h5}\n        python $workflow.projectDir/../bin/run_celltypist.py \\\\\n          --samplename ${sample} \\\\\n          --filtered_matrix_h5 ${filtered_matrix_h5_path} \\\\\n          --celltypist_model ${celltypist_model}  \\\\\n          --output_dir \\$PWD/outputs  \\\\\n          --input_h5_genome_version ${params.split_h5ad_per_donor.input_h5_genome_version}\n      \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "filtered_matrix_h5",
            "celltypist_model"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wtsi-hgi__nf_scrna_deconvolution",
        "directive": [
            "tag \"${sample}\"",
            "publishDir \"${params.outdir}/celltypist/${model}/${sample}/\", mode: \"${params.celltypist.copy_mode}\", overwrite: true , saveAs: {filename -> filename.replaceFirst(\"outputs/\",\"\").replaceFirst(\"figures/\",\"\") }"
        ],
        "when": "params.celltypist.run",
        "stub": ""
    },
    "souporcell": {
        "name_process": "souporcell",
        "string_process": "process souporcell {\n                                                 \n    tag \"${samplename}\"\n    publishDir \"${params.outdir}/souporcell/\",\n    mode: \"${params.souporcell.copy_mode}\",\n    pattern: \"${samplename}\",\n    overwrite: true\n    \n    when: \n      params.souporcell.run\n\n    input: \n      tuple val(samplename), path(bam_file), path(bai_file), path(barcodes_tsv_gz), val(souporcell_n_clusters), path(genotypes)\n      file(reference_fasta)\n      \n    \n    output:\n      tuple val(samplename), file(\"${samplename}\"), emit: souporcell_output_dir\n      tuple val(samplename), file(\"${samplename}/clusters.tsv\"), file(\"${samplename}/cluster_genotypes.vcf\"), file(\"${samplename}/ambient_rna.txt\"), emit: souporcell_output_files\n\n    script:\n    \"\"\"\n      umask 2 # make files group_writable\n\n      if [[ ${barcodes_tsv_gz} =~ \\\\.gz\\$ ]]; then\n        echo \\\"${barcodes_tsv_gz} is gzipped\\\"\n        zcat ${barcodes_tsv_gz} > bar_codes.txt\n      else\n        echo \\\"${barcodes_tsv_gz} is not gzipped\\\"\n        ln -s ${barcodes_tsv_gz} bar_codes.txt\n      fi\n\n      souporcell_pipeline.py \\\\\n        -i ${bam_file} \\\\\n        -b bar_codes.txt \\\\\n        -f ${reference_fasta} \\\\\n        -t ${task.cpus} \\\\\n        -o ${samplename} \\\\\n        -k ${souporcell_n_clusters} \\\\\n        --known_genotypes ${genotypes}\n    \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    \"\"\"\n      umask 2 # make files group_writable\n\n      if [[ ${barcodes_tsv_gz} =~ \\\\.gz\\$ ]]; then\n        echo \\\"${barcodes_tsv_gz} is gzipped\\\"\n        zcat ${barcodes_tsv_gz} > bar_codes.txt\n      else\n        echo \\\"${barcodes_tsv_gz} is not gzipped\\\"\n        ln -s ${barcodes_tsv_gz} bar_codes.txt\n      fi\n\n      souporcell_pipeline.py \\\\\n        -i ${bam_file} \\\\\n        -b bar_codes.txt \\\\\n        -f ${reference_fasta} \\\\\n        -t ${task.cpus} \\\\\n        -o ${samplename} \\\\\n        -k ${souporcell_n_clusters} \\\\\n        --known_genotypes ${genotypes}\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplename",
            "souporcell_n_clusters",
            "bam_file",
            "bai_file",
            "barcodes_tsv_gz",
            "genotypes",
            "reference_fasta"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wtsi-hgi__nf_scrna_deconvolution",
        "directive": [
            "tag \"${samplename}\"",
            "publishDir \"${params.outdir}/souporcell/\" , mode: \"${params.souporcell.copy_mode}\" , pattern: \"${samplename}\" , overwrite: true"
        ],
        "when": "params.souporcell.run",
        "stub": ""
    },
    "cellsnp": {
        "name_process": "cellsnp",
        "string_process": "process cellsnp {\n    tag \"${samplename}\"\n    publishDir \"${params.outdir}/cellsnp/\", mode: \"${params.cellsnp.copy_mode}\", pattern: \"cellsnp_${samplename}\", overwrite: true\n    \n    when: \n    params.cellsnp.run\n\n    input: \n    tuple val(samplename), path(bam_file), path(bai_file), path(barcodes_tsv_gz)\n    file(region_vcf)\n    \n    output:\n    tuple val(samplename), file(\"cellsnp_${samplename}\"), emit: cellsnp_output_dir\n\n    script:\n    \"\"\"\n      umask 2 # make files group_writable\n\n      if [[ ${barcodes_tsv_gz} =~ \\\\.gz\\$ ]]; then\n        echo \\\"${barcodes_tsv_gz} is gzipped\\\"\n        zcat ${barcodes_tsv_gz} > bar_codes.txt\n      else\n        echo \\\"${barcodes_tsv_gz} is not gzipped\\\"\n        ln -s ${barcodes_tsv_gz} bar_codes.txt\n      fi\n\n      cellsnp-lite -s ${bam_file} \\\\\n        -b bar_codes.txt \\\\\n        -O cellsnp_${samplename} \\\\\n        -R ${region_vcf} \\\\\n        -p ${params.cellsnp.p} \\\\\n        --minMAF ${params.cellsnp.min_maf} \\\\\n        --minCOUNT ${params.cellsnp.min_count} --gzip\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n      umask 2 # make files group_writable\n\n      if [[ ${barcodes_tsv_gz} =~ \\\\.gz\\$ ]]; then\n        echo \\\"${barcodes_tsv_gz} is gzipped\\\"\n        zcat ${barcodes_tsv_gz} > bar_codes.txt\n      else\n        echo \\\"${barcodes_tsv_gz} is not gzipped\\\"\n        ln -s ${barcodes_tsv_gz} bar_codes.txt\n      fi\n\n      cellsnp-lite -s ${bam_file} \\\\\n        -b bar_codes.txt \\\\\n        -O cellsnp_${samplename} \\\\\n        -R ${region_vcf} \\\\\n        -p ${params.cellsnp.p} \\\\\n        --minMAF ${params.cellsnp.min_maf} \\\\\n        --minCOUNT ${params.cellsnp.min_count} --gzip\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplename",
            "bam_file",
            "bai_file",
            "barcodes_tsv_gz",
            "region_vcf"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wtsi-hgi__nf_scrna_deconvolution",
        "directive": [
            "tag \"${samplename}\"",
            "publishDir \"${params.outdir}/cellsnp/\", mode: \"${params.cellsnp.copy_mode}\", pattern: \"cellsnp_${samplename}\", overwrite: true"
        ],
        "when": "params.cellsnp.run",
        "stub": ""
    },
    "vireo": {
        "name_process": "vireo",
        "string_process": "process vireo {\n    tag \"${samplename}\"\n    publishDir \"${params.outdir}/vireo/${samplename}/\", mode: \"${params.vireo.copy_mode}\", overwrite: true,\n\tsaveAs: {filename -> filename.replaceFirst(\"vireo_${samplename}/\",\"\") }\n    \n    when: \n    params.vireo.run\n    \n    input:\n    tuple val(samplename), path(cell_data), val(n_pooled)\n    \n    output:\n    tuple val(samplename), path(\"vireo_${samplename}/*\"), emit: output_dir\n    tuple val(samplename), path(\"vireo_${samplename}/donor_ids.tsv\"), emit: sample_donor_ids \n    path(\"vireo_${samplename}/${samplename}.sample_summary.txt\"), emit: sample_summary_tsv\n    path(\"vireo_${samplename}/${samplename}__exp.sample_summary.txt\"), emit: sample__exp_summary_tsv\n\n    script:\n    \"\"\"\numask 2 # make files group_writable\n\nvireo -c $cell_data -N $n_pooled -o vireo_${samplename}\n\n# add samplename to summary.tsv,\n# to then have Nextflow concat summary.tsv of all samples into a single file:\n\ncat vireo_${samplename}/summary.tsv | \\\\\n  tail -n +2 | \\\\\n  sed s\\\"/^/${samplename}\\\\t/\\\"g > vireo_${samplename}/${samplename}.sample_summary.txt\n\ncat vireo_${samplename}/summary.tsv | \\\\\n  tail -n +2 | \\\\\n  sed s\\\"/^/${samplename}__/\\\"g > vireo_${samplename}/${samplename}__exp.sample_summary.txt\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\numask 2 # make files group_writable\n\nvireo -c $cell_data -N $n_pooled -o vireo_${samplename}\n\n# add samplename to summary.tsv,\n# to then have Nextflow concat summary.tsv of all samples into a single file:\n\ncat vireo_${samplename}/summary.tsv | \\\\\n  tail -n +2 | \\\\\n  sed s\\\"/^/${samplename}\\\\t/\\\"g > vireo_${samplename}/${samplename}.sample_summary.txt\n\ncat vireo_${samplename}/summary.tsv | \\\\\n  tail -n +2 | \\\\\n  sed s\\\"/^/${samplename}__/\\\"g > vireo_${samplename}/${samplename}__exp.sample_summary.txt\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Vireo"
        ],
        "tools_url": [
            "https://bio.tools/Vireo"
        ],
        "tools_dico": [
            {
                "name": "Vireo",
                "uri": "https://bio.tools/Vireo",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3200",
                                    "term": "DNA barcoding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3226",
                                    "term": "Variant prioritisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3200",
                                    "term": "Sample barcoding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3200",
                                    "term": "Community profiling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Bayesian demultiplexing of pooled single-cell RNA-seq data without genotype reference.",
                "homepage": "https://github.com/single-cell-genetics/vireo"
            }
        ],
        "inputs": [
            "samplename",
            "n_pooled",
            "cell_data"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wtsi-hgi__nf_scrna_deconvolution",
        "directive": [
            "tag \"${samplename}\"",
            "publishDir \"${params.outdir}/vireo/${samplename}/\", mode: \"${params.vireo.copy_mode}\", overwrite: true , saveAs: {filename -> filename.replaceFirst(\"vireo_${samplename}/\",\"\") }"
        ],
        "when": "params.vireo.run",
        "stub": ""
    },
    "split_donor_h5ad": {
        "name_process": "split_donor_h5ad",
        "string_process": "process split_donor_h5ad {\n    tag \"${sample}\"\n\n    publishDir \"${params.outdir}/split_donor_h5ad/${sample}/\", mode: \"${params.split_h5ad_per_donor.copy_mode}\", overwrite: true,\n\tsaveAs: {filename -> filename.replaceFirst(\"outputs/\",\"\") }\n    \n    when: \n    params.split_h5ad_per_donor.run\n\n    input: \n    tuple val(sample), path(donor_ids_tsv), path(filtered_matrix_h5)\n\n    output: \n    tuple val(sample), path(\"outputs/vireo_annot.${sample}.h5ad\"), emit: sample_vireo_annot_h5ad\n    tuple val(sample), path(\"outputs/*.pdf\"), emit: sample_pdf\n    tuple val(sample), path(\"outputs/donor_level_anndata/*.h5ad\"), emit: sample_donor_level_anndata \n    path(\"${sample}.donors.h5ad.tsv\"), emit: donors_h5ad_tsv\n    path(\"${sample}__donors.h5ad.tsv\"), emit: exp__donors_h5ad_tsv\n    path(\"${sample}.donors.h5ad.assigned.tsv\"), emit: donors_h5ad_assigned_tsv \n    path(\"${sample}__donors.h5ad.assigned.tsv\"), emit: exp__donors_h5ad_assigned_tsv \n    path(\"${sample}.h5ad.tsv\"), emit: h5ad_tsv\n                                            \n                                                      \n    \n    script:\n    \"\"\"\n        mkdir -p outputs\n\n        python $workflow.projectDir/../bin/split_h5ad_per_donor.py \\\\\n        --vireo_donor_ids_tsv ${donor_ids_tsv} \\\\\n        --filtered_matrix_h5 ${filtered_matrix_h5} \\\\\n        --samplename ${sample} \\\\\n        --output_dir \\$PWD/outputs \\\\\n        --input_h5_genome_version ${params.split_h5ad_per_donor.input_h5_genome_version} \\\\\n        --print_modules_version ${params.split_h5ad_per_donor.print_modules_version} \\\\\n        --plot_n_cells_per_vireo_donor ${params.split_h5ad_per_donor.plot_n_cells_per_vireo_donor} \\\\\n        --write_donor_level_filtered_cells_h5 ${params.split_h5ad_per_donor.write_donor_level_filtered_cells_h5} \\\\\n        --plotnine_dpi ${params.split_h5ad_per_donor.plotnine_dpi} \\\\\n        --anndata_compression_level ${params.split_h5ad_per_donor.anndata_compression_level}\n\n        # sample h5ad filepath to tsv:\n        printf \\\"$sample\\\\t\\$(find outputs -maxdepth 1 -name '*.h5ad')\\\" > ${sample}.h5ad.tsv\n    \n\n        sed -i s\\\"/outputs/${params.split_h5ad_per_donor.absolute_results_path}\\\\/split_donor_h5ad\\\\/${sample}/\\\"g ${sample}.h5ad.tsv \n\n        # deconvoluted donors h5ad file paths to tsv:\n        find outputs/donor_level_anndata -maxdepth 1 -name '*.h5ad' -type f -printf \\\"%f\\\\n\\\" | sort | cut -f1 -d'.' > donors.list\n        find outputs/donor_level_anndata -maxdepth 1 -name '*.h5ad' | sort > donors.h5ad.list\n        paste donors.list donors.h5ad.list > ${sample}.donors.h5ad.tsv\n        # paste sample and donor columns 1 and 2 with __\n        sed s\\\"/^/${sample}__/\\\"g ${sample}.donors.h5ad.tsv > ${sample}__donors.h5ad.tsv\n        sed -i s\\\"/outputs/${params.split_h5ad_per_donor.absolute_results_path}\\\\/split_donor_h5ad\\\\/${sample}/\\\"g ${sample}__donors.h5ad.tsv\n        sed -i s\\\"/^/$sample\\\\t/\\\"g ${sample}.donors.h5ad.tsv \n        sed -i s\\\"/outputs/${params.split_h5ad_per_donor.absolute_results_path}\\\\/split_donor_h5ad\\\\/${sample}/\\\"g ${sample}.donors.h5ad.tsv\n        rm donors.list\n        rm donors.h5ad.list\n\n        # ignore unassigned/doublet h5ad (i.e. assigned cells only):\n        cat ${sample}.donors.h5ad.tsv | grep -v unassigned | grep -v doublet > ${sample}.donors.h5ad.assigned.tsv\n\n        cat ${sample}__donors.h5ad.tsv | grep -v unassigned | grep -v doublet > ${sample}__donors.h5ad.assigned.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 62,
        "string_script": "    \"\"\"\n        mkdir -p outputs\n\n        python $workflow.projectDir/../bin/split_h5ad_per_donor.py \\\\\n        --vireo_donor_ids_tsv ${donor_ids_tsv} \\\\\n        --filtered_matrix_h5 ${filtered_matrix_h5} \\\\\n        --samplename ${sample} \\\\\n        --output_dir \\$PWD/outputs \\\\\n        --input_h5_genome_version ${params.split_h5ad_per_donor.input_h5_genome_version} \\\\\n        --print_modules_version ${params.split_h5ad_per_donor.print_modules_version} \\\\\n        --plot_n_cells_per_vireo_donor ${params.split_h5ad_per_donor.plot_n_cells_per_vireo_donor} \\\\\n        --write_donor_level_filtered_cells_h5 ${params.split_h5ad_per_donor.write_donor_level_filtered_cells_h5} \\\\\n        --plotnine_dpi ${params.split_h5ad_per_donor.plotnine_dpi} \\\\\n        --anndata_compression_level ${params.split_h5ad_per_donor.anndata_compression_level}\n\n        # sample h5ad filepath to tsv:\n        printf \\\"$sample\\\\t\\$(find outputs -maxdepth 1 -name '*.h5ad')\\\" > ${sample}.h5ad.tsv\n    \n\n        sed -i s\\\"/outputs/${params.split_h5ad_per_donor.absolute_results_path}\\\\/split_donor_h5ad\\\\/${sample}/\\\"g ${sample}.h5ad.tsv \n\n        # deconvoluted donors h5ad file paths to tsv:\n        find outputs/donor_level_anndata -maxdepth 1 -name '*.h5ad' -type f -printf \\\"%f\\\\n\\\" | sort | cut -f1 -d'.' > donors.list\n        find outputs/donor_level_anndata -maxdepth 1 -name '*.h5ad' | sort > donors.h5ad.list\n        paste donors.list donors.h5ad.list > ${sample}.donors.h5ad.tsv\n        # paste sample and donor columns 1 and 2 with __\n        sed s\\\"/^/${sample}__/\\\"g ${sample}.donors.h5ad.tsv > ${sample}__donors.h5ad.tsv\n        sed -i s\\\"/outputs/${params.split_h5ad_per_donor.absolute_results_path}\\\\/split_donor_h5ad\\\\/${sample}/\\\"g ${sample}__donors.h5ad.tsv\n        sed -i s\\\"/^/$sample\\\\t/\\\"g ${sample}.donors.h5ad.tsv \n        sed -i s\\\"/outputs/${params.split_h5ad_per_donor.absolute_results_path}\\\\/split_donor_h5ad\\\\/${sample}/\\\"g ${sample}.donors.h5ad.tsv\n        rm donors.list\n        rm donors.h5ad.list\n\n        # ignore unassigned/doublet h5ad (i.e. assigned cells only):\n        cat ${sample}.donors.h5ad.tsv | grep -v unassigned | grep -v doublet > ${sample}.donors.h5ad.assigned.tsv\n\n        cat ${sample}__donors.h5ad.tsv | grep -v unassigned | grep -v doublet > ${sample}__donors.h5ad.assigned.tsv\n    \"\"\"",
        "nb_lignes_script": 37,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample",
            "donor_ids_tsv",
            "filtered_matrix_h5"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "wtsi-hgi__nf_scrna_deconvolution",
        "directive": [
            "tag \"${sample}\"",
            "publishDir \"${params.outdir}/split_donor_h5ad/${sample}/\", mode: \"${params.split_h5ad_per_donor.copy_mode}\", overwrite: true , saveAs: {filename -> filename.replaceFirst(\"outputs/\",\"\") }"
        ],
        "when": "params.split_h5ad_per_donor.run",
        "stub": ""
    }
}
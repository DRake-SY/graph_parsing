{
    "extract_all_variant_info": {
        "name_process": "extract_all_variant_info",
        "string_process": "\nprocess extract_all_variant_info {\n    tag \"${study_name}\"\n                                                                      \n\n    input:\n    set study_name, file(expression_matrix), file(phenotype_metadata), file(sample_metadata), file(vcf), file(tpm_file) from genotype_vcf_extract_variant_info\n    \n    output:\n    set study_name, file(expression_matrix), file(phenotype_metadata), file(sample_metadata), file(vcf), file(\"${vcf.simpleName}.variant_information.txt.gz\"), file(tpm_file) into variant_info_create_QTLTools_input\n\n    script:\n    if (params.is_imputed) {\n        \"\"\"\n        set +o pipefail; bcftools +fill-tags $vcf | bcftools query -f '%CHROM\\\\t%POS\\\\t%ID\\\\t%REF\\\\t%ALT\\\\t%TYPE\\\\t%AC\\\\t%AN\\\\t%MAF\\\\t%R2\\\\n' | gzip > ${vcf.simpleName}.variant_information.txt.gz\n        \"\"\"\n    } else {\n        \"\"\"\n        set +o pipefail; bcftools +fill-tags $vcf | bcftools query -f '%CHROM\\\\t%POS\\\\t%ID\\\\t%REF\\\\t%ALT\\\\t%TYPE\\\\t%AC\\\\t%AN\\\\t%MAF\\\\tNA\\\\n' | gzip > ${vcf.simpleName}.variant_information.txt.gz\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 20,
        "string_script": "    if (params.is_imputed) {\n        \"\"\"\n        set +o pipefail; bcftools +fill-tags $vcf | bcftools query -f '%CHROM\\\\t%POS\\\\t%ID\\\\t%REF\\\\t%ALT\\\\t%TYPE\\\\t%AC\\\\t%AN\\\\t%MAF\\\\t%R2\\\\n' | gzip > ${vcf.simpleName}.variant_information.txt.gz\n        \"\"\"\n    } else {\n        \"\"\"\n        set +o pipefail; bcftools +fill-tags $vcf | bcftools query -f '%CHROM\\\\t%POS\\\\t%ID\\\\t%REF\\\\t%ALT\\\\t%TYPE\\\\t%AC\\\\t%AN\\\\t%MAF\\\\tNA\\\\n' | gzip > ${vcf.simpleName}.variant_information.txt.gz\n        \"\"\"\n    }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "genotype_vcf_extract_variant_info"
        ],
        "nb_inputs": 1,
        "outputs": [
            "variant_info_create_QTLTools_input"
        ],
        "nb_outputs": 1,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${study_name}\""
        ],
        "when": "",
        "stub": ""
    },
    "create_QTLTools_input": {
        "name_process": "create_QTLTools_input",
        "string_process": "\nprocess create_QTLTools_input {\n    tag \"${study_name}\"\n    publishDir \"${params.outdir}/\", mode: 'copy',\n    saveAs: {filename ->\n        if (filename.indexOf(\".phenoPCA.tsv\") > 0) \"PCA/${study_name}_${filename.substring(0, filename.indexOf(\".\"))}/${study_name}_${filename}\" else null\n    }\n\n    input:\n    set study_name, file(expression_matrix), file(phenotype_metadata), file(sample_metadata), file(vcf), file(vcf_variant_info), file(tpm_file) from variant_info_create_QTLTools_input\n\n    output: \n    set study_name, file(\"*.bed\") into qtl_group_beds\n    set study_name, file(vcf), file(\"*.sample_names.txt\") into qtl_group_samplenames\n    set study_name, file(\"*.phenoPCA.tsv\") into qtl_group_pheno_PCAs, temp_qtl_group_pheno_PCAs\n\n    script:\n    \"\"\"\n    Rscript $baseDir/bin/group_by_qtlgroup.R \\\\\n        -p \"$phenotype_metadata\" \\\\\n        -s \"$sample_metadata\" \\\\\n        -e \"$expression_matrix\" \\\\\n        -v \"$vcf_variant_info\" \\\\\n        -t \"$tpm_file\" \\\\\n        -o \".\" \\\\\n        -c ${params.cis_window} \\\\\n        -m ${params.mincisvariant}\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    Rscript $baseDir/bin/group_by_qtlgroup.R \\\\\n        -p \"$phenotype_metadata\" \\\\\n        -s \"$sample_metadata\" \\\\\n        -e \"$expression_matrix\" \\\\\n        -v \"$vcf_variant_info\" \\\\\n        -t \"$tpm_file\" \\\\\n        -o \".\" \\\\\n        -c ${params.cis_window} \\\\\n        -m ${params.mincisvariant}\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "variant_info_create_QTLTools_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "qtl_group_beds",
            "qtl_group_samplenames",
            "qtl_group_pheno_PCAs",
            "temp_qtl_group_pheno_PCAs"
        ],
        "nb_outputs": 4,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${study_name}\"",
            "publishDir \"${params.outdir}/\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\".phenoPCA.tsv\") > 0) \"PCA/${study_name}_${filename.substring(0, filename.indexOf(\".\"))}/${study_name}_${filename}\" else null }"
        ],
        "when": "",
        "stub": ""
    },
    "compress_bed": {
        "name_process": "compress_bed",
        "string_process": "\nprocess compress_bed {\n    tag \"${study_name}_${bed_file.simpleName}\"\n                                                                 \n\n    input:\n    set study_name, file(bed_file) from qtl_group_beds.transpose()\n\n    output:\n    set val(\"${study_name}_${bed_file.simpleName}\"), file(\"${bed_file}.gz\"), file(\"${bed_file}.gz.tbi\") into compressed_beds\n\n    script:\n    \"\"\"\n    bgzip $bed_file && tabix -p bed ${bed_file}.gz\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    bgzip $bed_file && tabix -p bed ${bed_file}.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qtl_group_beds"
        ],
        "nb_inputs": 1,
        "outputs": [
            "compressed_beds"
        ],
        "nb_outputs": 1,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${study_name}_${bed_file.simpleName}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_samples": {
        "name_process": "extract_samples",
        "string_process": "\nprocess extract_samples {\n    tag \"${study_name}_${sample_names.simpleName}\"\n                                                      \n\n    input:\n    set study_name, file(genotype_vcf), file(sample_names) from qtl_group_samplenames.transpose()\n\n    output:\n    set val(\"${study_name}_${sample_names.simpleName}\"), file(\"${sample_names.simpleName}.vcf.gz\") into vcfs_extract_variant_info, vcfs, vcfs_perform_pca, vcf_temp \n    set val(\"${study_name}_${sample_names.simpleName}\"), file(\"${sample_names.simpleName}.vcf.gz.csi\") into vcf_indexes, vcf_index_temp\n\n    script:\n    \"\"\"\n    bcftools view -S $sample_names $genotype_vcf -Oz -o ${sample_names.simpleName}.vcf.gz\n    bcftools index ${sample_names.simpleName}.vcf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    bcftools view -S $sample_names $genotype_vcf -Oz -o ${sample_names.simpleName}.vcf.gz\n    bcftools index ${sample_names.simpleName}.vcf.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "qtl_group_samplenames"
        ],
        "nb_inputs": 1,
        "outputs": [
            "vcfs_extract_variant_info",
            "vcfs",
            "vcfs_perform_pca",
            "vcf_temp",
            "vcf_indexes",
            "vcf_index_temp"
        ],
        "nb_outputs": 6,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${study_name}_${sample_names.simpleName}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_variant_info": {
        "name_process": "extract_variant_info",
        "string_process": "\nprocess extract_variant_info {\n    tag \"${study_qtl_group}\"\n    publishDir \"${params.outdir}/final/${study_qtl_group}\", mode: 'copy'\n\n    input:\n    set study_qtl_group, file(vcf) from vcfs_extract_variant_info\n    \n    output:\n    file \"${study_qtl_group}.variant_information.txt.gz\"\n\n    script:\n    if (params.is_imputed) {\n        \"\"\"\n        set +o pipefail; bcftools +fill-tags $vcf | bcftools query -f '%CHROM\\\\t%POS\\\\t%ID\\\\t%REF\\\\t%ALT\\\\t%TYPE\\\\t%AC\\\\t%AN\\\\t%MAF\\\\t%R2\\\\n' | gzip > ${study_qtl_group}.variant_information.txt.gz\n        \"\"\"\n    } else {\n        \"\"\"\n        set +o pipefail; bcftools +fill-tags $vcf | bcftools query -f '%CHROM\\\\t%POS\\\\t%ID\\\\t%REF\\\\t%ALT\\\\t%TYPE\\\\t%AC\\\\t%AN\\\\t%MAF\\\\tNA\\\\n' | gzip > ${study_qtl_group}.variant_information.txt.gz\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 20,
        "string_script": "    if (params.is_imputed) {\n        \"\"\"\n        set +o pipefail; bcftools +fill-tags $vcf | bcftools query -f '%CHROM\\\\t%POS\\\\t%ID\\\\t%REF\\\\t%ALT\\\\t%TYPE\\\\t%AC\\\\t%AN\\\\t%MAF\\\\t%R2\\\\n' | gzip > ${study_qtl_group}.variant_information.txt.gz\n        \"\"\"\n    } else {\n        \"\"\"\n        set +o pipefail; bcftools +fill-tags $vcf | bcftools query -f '%CHROM\\\\t%POS\\\\t%ID\\\\t%REF\\\\t%ALT\\\\t%TYPE\\\\t%AC\\\\t%AN\\\\t%MAF\\\\tNA\\\\n' | gzip > ${study_qtl_group}.variant_information.txt.gz\n        \"\"\"\n    }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "BCFtools"
        ],
        "tools_url": [
            "https://bio.tools/bcftools"
        ],
        "tools_dico": [
            {
                "name": "BCFtools",
                "uri": "https://bio.tools/bcftools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3516",
                            "term": "Genotyping experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "Set of utilities that manipulate variant calls in the Variant Call Format (VCF) and its binary counterpart BCF. All commands work transparently with both VCFs and BCFs, both uncompressed and BGZF-compressed.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "vcfs_extract_variant_info"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${study_qtl_group}\"",
            "publishDir \"${params.outdir}/final/${study_qtl_group}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "perform_pca": {
        "name_process": "perform_pca",
        "string_process": "\nprocess perform_pca {\n    tag \"${condition}\"\n    publishDir \"${params.outdir}/PCA\", mode: 'copy'\n\n    input:\n    set condition, file(phenotype_pca), file(vcf) from tuple_perform_pca\n\n    output:\n    file \"${condition}.geno.pca*\"\n    set val(condition), file(\"${condition}.covariates.txt\") into covariates_run_nominal, covariates_run_permutation\n\n    script:\n    \"\"\"\n    plink2 --vcf $vcf --vcf-half-call h --indep-pairwise 50000 200 0.05 --out ${vcf.simpleName}_pruned_variants --threads ${task.cpus} --memory 12000\n    plink2 --vcf $vcf --vcf-half-call h --extract ${vcf.simpleName}_pruned_variants.prune.in --make-bed --out ${vcf.simpleName}_pruned\n    plink2 -bfile ${vcf.simpleName}_pruned --pca ${params.n_geno_pcs} header tabs\n    cat plink.eigenvec \\\\\n        | sed '1s/IID/genotype_id/' \\\\\n        | sed '1s/PC/geno_PC/g' \\\\\n        | csvtk cut -t -f -\"FID\" \\\\\n        | csvtk transpose -t > ${condition}.geno.pca\n    head -n ${params.n_pheno_pcs + 1} $phenotype_pca > ${condition}.covariates.txt    \n    set +o pipefail; tail -n+2 ${condition}.geno.pca | head -n ${params.n_geno_pcs} >> ${condition}.covariates.txt\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    plink2 --vcf $vcf --vcf-half-call h --indep-pairwise 50000 200 0.05 --out ${vcf.simpleName}_pruned_variants --threads ${task.cpus} --memory 12000\n    plink2 --vcf $vcf --vcf-half-call h --extract ${vcf.simpleName}_pruned_variants.prune.in --make-bed --out ${vcf.simpleName}_pruned\n    plink2 -bfile ${vcf.simpleName}_pruned --pca ${params.n_geno_pcs} header tabs\n    cat plink.eigenvec \\\\\n        | sed '1s/IID/genotype_id/' \\\\\n        | sed '1s/PC/geno_PC/g' \\\\\n        | csvtk cut -t -f -\"FID\" \\\\\n        | csvtk transpose -t > ${condition}.geno.pca\n    head -n ${params.n_pheno_pcs + 1} $phenotype_pca > ${condition}.covariates.txt    \n    set +o pipefail; tail -n+2 ${condition}.geno.pca | head -n ${params.n_geno_pcs} >> ${condition}.covariates.txt\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tuple_perform_pca"
        ],
        "nb_inputs": 1,
        "outputs": [
            "covariates_run_nominal",
            "covariates_run_permutation"
        ],
        "nb_outputs": 2,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${condition}\"",
            "publishDir \"${params.outdir}/PCA\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "run_permutation": {
        "name_process": "run_permutation",
        "string_process": "\nprocess run_permutation {\n    tag \"${study_qtl_group} - ${batch_index}/${params.n_batches}\"\n                                                               \n    \n    when:\n    params.run_permutation\n\n    input:\n    each batch_index from 1..params.n_batches\n    set study_qtl_group, file(bed), file(bed_index), file(vcf), file(vcf_index), file(covariate) from tuple_run_permutation.join(covariates_run_permutation)\n\n    output:\n    set val(study_qtl_group), file(\"${study_qtl_group}.permutation.batch.${batch_index}.${params.n_batches}.txt\") into batch_files_merge_permutation_batches\n\n    script:\n    \"\"\"\n    QTLtools cis --vcf $vcf --bed $bed --cov $covariate --chunk $batch_index ${params.n_batches} --out ${study_qtl_group}.permutation.batch.${batch_index}.${params.n_batches}.txt --window ${params.cis_window} --permute 10000 --grp-best\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    QTLtools cis --vcf $vcf --bed $bed --cov $covariate --chunk $batch_index ${params.n_batches} --out ${study_qtl_group}.permutation.batch.${batch_index}.${params.n_batches}.txt --window ${params.cis_window} --permute 10000 --grp-best\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "QTLtools"
        ],
        "tools_url": [
            "https://bio.tools/qtltools"
        ],
        "tools_dico": [
            {
                "name": "QTLtools",
                "uri": "https://bio.tools/qtltools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression QTL analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression QTL profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "eQTL profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression quantitative trait loci profiling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool set for molecular QTL discovery and analysis. It allows to go from the raw sequence data to collection of molecular Quantitative Trait Loci (QTLs) in few easy-to-perform steps.",
                "homepage": "https://qtltools.github.io/qtltools/"
            }
        ],
        "inputs": [
            "1",
            "tuple_run_permutation",
            "covariates_run_permutation"
        ],
        "nb_inputs": 3,
        "outputs": [
            "batch_files_merge_permutation_batches"
        ],
        "nb_outputs": 1,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${study_qtl_group} - ${batch_index}/${params.n_batches}\""
        ],
        "when": "params.run_permutation",
        "stub": ""
    },
    "merge_permutation_batches": {
        "name_process": "merge_permutation_batches",
        "string_process": "\nprocess merge_permutation_batches {\n    tag \"${study_qtl_group}\"\n    publishDir \"${params.outdir}/final/${study_qtl_group}\", mode: 'copy'\n    \n    when:\n    params.run_permutation\n\n    input:\n    set study_qtl_group, batch_file_names from batch_files_merge_permutation_batches.groupTuple(size: params.n_batches, sort: true)  \n\n    output:\n    file \"${study_qtl_group}.permuted.txt.gz\"\n\n    script:\n    \"\"\"\n    cat ${batch_file_names.join(' ')} | bgzip > ${study_qtl_group}.permuted.txt.gz\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    cat ${batch_file_names.join(' ')} | bgzip > ${study_qtl_group}.permuted.txt.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "batch_files_merge_permutation_batches"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${study_qtl_group}\"",
            "publishDir \"${params.outdir}/final/${study_qtl_group}\", mode: 'copy'"
        ],
        "when": "params.run_permutation",
        "stub": ""
    },
    "run_nominal": {
        "name_process": "run_nominal",
        "string_process": "\nprocess run_nominal {\n    tag \"${study_qtl_group} - ${batch_index}/${params.n_batches}\"\n\n    when:\n    params.run_nominal\n    \n    input:\n    each batch_index from 1..params.n_batches\n    set study_qtl_group, file(bed), file(bed_index), file(vcf), file(vcf_index), file(covariate) from tuple_run_nominal.join(covariates_run_nominal)\n\n    output:\n    set study_qtl_group, file(\"${study_qtl_group}.nominal.batch.${batch_index}.${params.n_batches}.txt\") into batch_files_merge_nominal_batches\n\n    script:\n    \"\"\"\n\tQTLtools cis --vcf $vcf --bed $bed --cov $covariate --chunk $batch_index ${params.n_batches} --out ${study_qtl_group}.nominal.batch.${batch_index}.${params.n_batches}.txt --window ${params.cis_window} --nominal 1\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n\tQTLtools cis --vcf $vcf --bed $bed --cov $covariate --chunk $batch_index ${params.n_batches} --out ${study_qtl_group}.nominal.batch.${batch_index}.${params.n_batches}.txt --window ${params.cis_window} --nominal 1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "QTLtools"
        ],
        "tools_url": [
            "https://bio.tools/qtltools"
        ],
        "tools_dico": [
            {
                "name": "QTLtools",
                "uri": "https://bio.tools/qtltools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression QTL analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression QTL profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "eQTL profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3232",
                                    "term": "Gene expression quantitative trait loci profiling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool set for molecular QTL discovery and analysis. It allows to go from the raw sequence data to collection of molecular Quantitative Trait Loci (QTLs) in few easy-to-perform steps.",
                "homepage": "https://qtltools.github.io/qtltools/"
            }
        ],
        "inputs": [
            "1",
            "tuple_run_nominal",
            "covariates_run_nominal"
        ],
        "nb_inputs": 3,
        "outputs": [
            "batch_files_merge_nominal_batches"
        ],
        "nb_outputs": 1,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${study_qtl_group} - ${batch_index}/${params.n_batches}\""
        ],
        "when": "params.run_nominal",
        "stub": ""
    },
    "merge_nominal_batches": {
        "name_process": "merge_nominal_batches",
        "string_process": "\nprocess merge_nominal_batches {\n    tag \"${study_qtl_group}\"\n\n    when:\n    params.run_nominal\n\n    input:\n    set study_qtl_group, batch_file_names from batch_files_merge_nominal_batches.groupTuple(size: params.n_batches, sort: true)  \n\n    output:\n    set study_qtl_group, file(\"${study_qtl_group}.nominal.tab.txt.gz\") into nominal_merged_tab_sort_qtltools_output\n\n    script:\n    \"\"\"\n    cat ${batch_file_names.join(' ')} | csvtk space2tab -T | bgzip > ${study_qtl_group}.nominal.tab.txt.gz\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    cat ${batch_file_names.join(' ')} | csvtk space2tab -T | bgzip > ${study_qtl_group}.nominal.tab.txt.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "batch_files_merge_nominal_batches"
        ],
        "nb_inputs": 1,
        "outputs": [
            "nominal_merged_tab_sort_qtltools_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${study_qtl_group}\""
        ],
        "when": "params.run_nominal",
        "stub": ""
    },
    "replace_space_tabs": {
        "name_process": "replace_space_tabs",
        "string_process": "\nprocess replace_space_tabs {\n    tag \"${condition}\"\n                                                                 \n\t\n    input:\n    set condition, file(nominal_merged) from nominal_merged_files_replace_space_tabs\n\n    output:\n    set val(condition), file(\"${condition}.nominal.tab.txt.gz\") into nominal_merged_tab_sort_qtltools_output\n    \n    script:\n    \"\"\"\n    gzip -dc $nominal_merged | awk -v OFS='\\\\t' '{{\\$1=\\$1; print \\$0}}' | gzip > ${condition}.nominal.tab.txt.gz\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    gzip -dc $nominal_merged | awk -v OFS='\\\\t' '{{\\$1=\\$1; print \\$0}}' | gzip > ${condition}.nominal.tab.txt.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "nominal_merged_files_replace_space_tabs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "nominal_merged_tab_sort_qtltools_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${condition}\""
        ],
        "when": "",
        "stub": ""
    },
    "sort_qtltools_output": {
        "name_process": "sort_qtltools_output",
        "string_process": "\nprocess sort_qtltools_output {\n    tag \"${study_qtl_group}\"\n    publishDir \"${params.outdir}/final/${study_qtl_group}\", mode: 'copy'\n\n    when:\n    params.run_nominal\n\n    input:\n    set study_qtl_group, file(nominal_merged) from nominal_merged_tab_sort_qtltools_output\n\n    output:\n    set study_qtl_group, file(\"${study_qtl_group}.nominal.sorted.txt.gz\") into sorted_merged_nominal_index_qtltools_output\n\n    script:\n    \"\"\"\n    gzip -dc $nominal_merged | LANG=C sort -k9,9 -k10,10n -k11,11n -S11G --parallel=8 | bgzip > ${study_qtl_group}.nominal.sorted.txt.gz\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    gzip -dc $nominal_merged | LANG=C sort -k9,9 -k10,10n -k11,11n -S11G --parallel=8 | bgzip > ${study_qtl_group}.nominal.sorted.txt.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "nominal_merged_tab_sort_qtltools_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sorted_merged_nominal_index_qtltools_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${study_qtl_group}\"",
            "publishDir \"${params.outdir}/final/${study_qtl_group}\", mode: 'copy'"
        ],
        "when": "params.run_nominal",
        "stub": ""
    },
    "index_qtltools_output": {
        "name_process": "index_qtltools_output",
        "string_process": "\nprocess index_qtltools_output {\n    tag \"${study_qtl_group}\"\n    publishDir \"${params.outdir}/final/${study_qtl_group}\", mode: 'copy'\n\n    when:\n    params.run_nominal\n\n    input:\n    set study_qtl_group, file(sorted_merged_nominal) from sorted_merged_nominal_index_qtltools_output\n\n    output:\n    file \"${study_qtl_group}.nominal.sorted.txt.gz.tbi\"\n\n    script:\n    \"\"\"\n    tabix -s9 -b10 -e11 -f $sorted_merged_nominal\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    tabix -s9 -b10 -e11 -f $sorted_merged_nominal\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sorted_merged_nominal_index_qtltools_output"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${study_qtl_group}\"",
            "publishDir \"${params.outdir}/final/${study_qtl_group}\", mode: 'copy'"
        ],
        "when": "params.run_nominal",
        "stub": ""
    },
    "make_pca_covariates": {
        "name_process": "make_pca_covariates",
        "string_process": "\nprocess make_pca_covariates {\n    tag \"${study_qtl_group}\"\n    publishDir \"${params.outdir}/PCA/${study_qtl_group}\", mode: 'copy'\n\n    input:\n    set study_qtl_group, file(phenotype_pca), file(vcf) from tuple_perform_pca\n\n    output:\n    file \"${study_qtl_group}.geno.pca*\"\n    set study_qtl_group, file(\"${study_qtl_group}.covariates.txt\") into covariates_run_nominal, covariates_run_permutation\n\n    script:\n    \"\"\"\n    plink2 --vcf $vcf --vcf-half-call h --indep-pairwise 50000 200 0.05 --out ${study_qtl_group}_pruned_variants --threads ${task.cpus} --memory ${task.memory.mega}\n    plink2 --vcf $vcf --vcf-half-call h --extract ${study_qtl_group}_pruned_variants.prune.in --make-bed --out ${study_qtl_group}_pruned\n    plink2 -bfile ${study_qtl_group}_pruned --pca ${params.n_geno_pcs} header tabs\n    cat plink.eigenvec \\\\\n        | sed '1s/IID/genotype_id/' \\\\\n        | sed '1s/PC/geno_PC/g' \\\\\n        | csvtk cut -t -f -\"FID\" \\\\\n        | csvtk transpose -t > ${study_qtl_group}.geno.pca\n    head -n ${params.n_pheno_pcs + 1} $phenotype_pca > ${study_qtl_group}.covariates.txt    \n    set +o pipefail; tail -n+2 ${study_qtl_group}.geno.pca | head -n ${params.n_geno_pcs} >> ${study_qtl_group}.covariates.txt\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    plink2 --vcf $vcf --vcf-half-call h --indep-pairwise 50000 200 0.05 --out ${study_qtl_group}_pruned_variants --threads ${task.cpus} --memory ${task.memory.mega}\n    plink2 --vcf $vcf --vcf-half-call h --extract ${study_qtl_group}_pruned_variants.prune.in --make-bed --out ${study_qtl_group}_pruned\n    plink2 -bfile ${study_qtl_group}_pruned --pca ${params.n_geno_pcs} header tabs\n    cat plink.eigenvec \\\\\n        | sed '1s/IID/genotype_id/' \\\\\n        | sed '1s/PC/geno_PC/g' \\\\\n        | csvtk cut -t -f -\"FID\" \\\\\n        | csvtk transpose -t > ${study_qtl_group}.geno.pca\n    head -n ${params.n_pheno_pcs + 1} $phenotype_pca > ${study_qtl_group}.covariates.txt    \n    set +o pipefail; tail -n+2 ${study_qtl_group}.geno.pca | head -n ${params.n_geno_pcs} >> ${study_qtl_group}.covariates.txt\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tuple_perform_pca"
        ],
        "nb_inputs": 1,
        "outputs": [
            "covariates_run_nominal",
            "covariates_run_permutation"
        ],
        "nb_outputs": 2,
        "name_workflow": "letaylor__qtlmap",
        "directive": [
            "tag \"${study_qtl_group}\"",
            "publishDir \"${params.outdir}/PCA/${study_qtl_group}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "BUILD_INTERVALS": {
        "name_process": "BUILD_INTERVALS",
        "string_process": "process BUILD_INTERVALS {\n    tag \"$fai\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"anaconda::gawk=5.1.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/gawk:5.1.0\"\n    } else {\n        container \"quay.io/biocontainers/gawk:5.1.0\"\n    }\n\n    input:\n    path fai\n\n    output:\n    path \"${fai.baseName}.bed\"\n\n    script:\n    \"\"\"\n    awk -v FS='\\t' -v OFS='\\t' '{ print \\$1, \\\"0\\\", \\$2 }' ${fai} > ${fai.baseName}.bed\n    \"\"\"\n    stub:\n    \"\"\"\n    awk -v FS='\\t' -v OFS='\\t' '{ print \\$1, \\\"0\\\", \\$2 }' ${fai} > ${fai.baseName}.bed\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    awk -v FS='\\t' -v OFS='\\t' '{ print \\$1, \\\"0\\\", \\$2 }' ${fai} > ${fai.baseName}.bed\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fai"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chelauk__nf-core-mutectplatypus",
        "directive": [
            "tag \"$fai\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"anaconda::gawk=5.1.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/gawk:5.1.0\" } else { container \"quay.io/biocontainers/gawk:5.1.0\" }"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    awk -v FS='\\t' -v OFS='\\t' '{ print \\$1, \\\"0\\\", \\$2 }' ${fai} > ${fai.baseName}.bed\n    \"\"\""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "process FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' :\n        'quay.io/biocontainers/fastqc:0.11.9--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chelauk__nf-core-mutectplatypus",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' : 'quay.io/biocontainers/fastqc:0.11.9--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CREATE_INTERVALS_BED": {
        "name_process": "CREATE_INTERVALS_BED",
        "string_process": "process CREATE_INTERVALS_BED {\n    tag \"$intervals\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"anaconda::gawk=5.1.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/gawk:5.1.0\"\n    } else {\n        container \"quay.io/biocontainers/gawk:5.1.0\"\n    }\n\n    input:\n    path intervals\n\n    output:\n    path ('*.bed')\n\n    script:\n                                                                             \n                                                                                  \n    if (intervals.toString().toLowerCase().endsWith(\"bed\"))\n        \"\"\"\n        awk -vFS=\"\\t\" '{\n            t = \\$5  # runtime estimate\n                if (t == \"\") {\n                    # no runtime estimate in this row, assume default value\n                    t = (\\$3 - \\$2) / ${params.nucleotides_per_second}\n                }\n                if (name == \"\" || (chunk > 600 && (chunk + t) > longest * 1.05)) {\n                    # start a new chunk\n                    name = sprintf(\"%s_%d-%d.bed\", \\$1, \\$2+1, \\$3)\n                    chunk = 0\n                    longest = 0\n                }\n                if (t > longest)\n                    longest = t\n                chunk += t\n                print \\$0 > name\n        }' ${intervals}\n        \"\"\"\n    else if (intervals.toString().toLowerCase().endsWith(\"interval_list\"))\n        \"\"\"\n        grep -v '^@' ${intervals} | awk -vFS=\"\\t\" '{\n            name = sprintf(\"%s_%d-%d\", \\$1, \\$2, \\$3);\n            printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > name \".bed\"\n        }'\n        \"\"\"\n    else\n        \"\"\"\n        awk -vFS=\"[:-]\" '{\n            name = sprintf(\"%s_%d-%d\", \\$1, \\$2, \\$3);\n            printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > name \".bed\"\n        }' ${intervals}\n        \"\"\"\n\n    stub:\n                                                                             \n                                                                                  \n    if (intervals.toString().toLowerCase().endsWith(\"bed\"))\n        \"\"\"\n        awk -vFS=\"\\t\" '{\n            t = \\$5  # runtime estimate\n                if (t == \"\") {\n                    # no runtime estimate in this row, assume default value\n                    t = (\\$3 - \\$2) / ${params.nucleotides_per_second}\n                }\n                if (name == \"\" || (chunk > 600 && (chunk + t) > longest * 1.05)) {\n                    # start a new chunk\n                    name = sprintf(\"%s_%d-%d.bed\", \\$1, \\$2+1, \\$3)\n                    chunk = 0\n                    longest = 0\n                }\n                if (t > longest)\n                    longest = t\n                chunk += t\n                print \\$0 > name\n        }' ${intervals}\n        \"\"\"\n    else if (intervals.toString().toLowerCase().endsWith(\"interval_list\"))\n        \"\"\"\n        grep -v '^@' ${intervals} | awk -vFS=\"\\t\" '{\n            name = sprintf(\"%s_%d-%d\", \\$1, \\$2, \\$3);\n            printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > name \".bed\"\n        }'\n        \"\"\"\n    else\n        \"\"\"\n        awk -vFS=\"[:-]\" '{\n            name = sprintf(\"%s_%d-%d\", \\$1, \\$2, \\$3);\n            printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > name \".bed\"\n        }' ${intervals}\n        \"\"\"\n}",
        "nb_lignes_process": 91,
        "string_script": "    if (intervals.toString().toLowerCase().endsWith(\"bed\"))\n        \"\"\"\n        awk -vFS=\"\\t\" '{\n            t = \\$5  # runtime estimate\n                if (t == \"\") {\n                    # no runtime estimate in this row, assume default value\n                    t = (\\$3 - \\$2) / ${params.nucleotides_per_second}\n                }\n                if (name == \"\" || (chunk > 600 && (chunk + t) > longest * 1.05)) {\n                    # start a new chunk\n                    name = sprintf(\"%s_%d-%d.bed\", \\$1, \\$2+1, \\$3)\n                    chunk = 0\n                    longest = 0\n                }\n                if (t > longest)\n                    longest = t\n                chunk += t\n                print \\$0 > name\n        }' ${intervals}\n        \"\"\"\n    else if (intervals.toString().toLowerCase().endsWith(\"interval_list\"))\n        \"\"\"\n        grep -v '^@' ${intervals} | awk -vFS=\"\\t\" '{\n            name = sprintf(\"%s_%d-%d\", \\$1, \\$2, \\$3);\n            printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > name \".bed\"\n        }'\n        \"\"\"\n    else\n        \"\"\"\n        awk -vFS=\"[:-]\" '{\n            name = sprintf(\"%s_%d-%d\", \\$1, \\$2, \\$3);\n            printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > name \".bed\"\n        }' ${intervals}\n        \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "goname"
        ],
        "tools_url": [
            "https://bio.tools/goname"
        ],
        "tools_dico": [
            {
                "name": "goname",
                "uri": "https://bio.tools/goname",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0089",
                            "term": "Ontology and terminology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2223",
                                "term": "Ontology metadata"
                            }
                        ]
                    }
                ],
                "description": "Find GO ontology terms by name.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/goname.html"
            }
        ],
        "inputs": [
            "intervals"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chelauk__nf-core-mutectplatypus",
        "directive": [
            "tag \"$intervals\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"anaconda::gawk=5.1.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/gawk:5.1.0\" } else { container \"quay.io/biocontainers/gawk:5.1.0\" }"
        ],
        "when": "",
        "stub": "\n                                                                             \n                                                                                  \n    if (intervals.toString().toLowerCase().endsWith(\"bed\"))\n        \"\"\"\n        awk -vFS=\"\\t\" '{\n            t = \\$5  # runtime estimate\n                if (t == \"\") {\n                    # no runtime estimate in this row, assume default value\n                    t = (\\$3 - \\$2) / ${params.nucleotides_per_second}\n                }\n                if (name == \"\" || (chunk > 600 && (chunk + t) > longest * 1.05)) {\n                    # start a new chunk\n                    name = sprintf(\"%s_%d-%d.bed\", \\$1, \\$2+1, \\$3)\n                    chunk = 0\n                    longest = 0\n                }\n                if (t > longest)\n                    longest = t\n                chunk += t\n                print \\$0 > name\n        }' ${intervals}\n        \"\"\"\n    else if (intervals.toString().toLowerCase().endsWith(\"interval_list\"))\n        \"\"\"\n        grep -v '^@' ${intervals} | awk -vFS=\"\\t\" '{\n            name = sprintf(\"%s_%d-%d\", \\$1, \\$2, \\$3);\n            printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > name \".bed\"\n        }'\n        \"\"\"\n    else\n        \"\"\"\n        awk -vFS=\"[:-]\" '{\n            name = sprintf(\"%s_%d-%d\", \\$1, \\$2, \\$3);\n            printf(\"%s\\\\t%d\\\\t%d\\\\n\", \\$1, \\$2-1, \\$3) > name \".bed\"\n        }' ${intervals}\n        \"\"\""
    },
    "GATK4_GETPILEUPSUMMARIES": {
        "name_process": "GATK4_GETPILEUPSUMMARIES",
        "string_process": "process GATK4_GETPILEUPSUMMARIES {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.5.0--hdfd78af_0' :\n        'quay.io/biocontainers/gatk4:4.2.5.0--hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), val(id_intervals), path(bams), path(intervals)\n    path  fasta\n    path  fai\n    path  dict\n    path  variants\n    path  variants_tbi\n\n    output:\n    tuple val(meta), val(id_intervals), path('*.pileups.table'), emit: table\n    path \"versions.yml\"                     , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${id_intervals}\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n    def reference_command = fasta ? \"--reference $fasta\" : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GetPileupSummaries] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GetPileupSummaries \\\\\n        --input ${bams[0]} \\\\\n        --variant $variants \\\\\n        --output ${prefix}.pileups.table \\\\\n        $reference_command \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n    stub:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${id_intervals}\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n    def reference_command = fasta ? \"--reference $fasta\" : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GetPileupSummaries] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    echo -e \"gatk --java-options \"-Xmx${avail_mem}g\" GetPileupSummaries \\\\\n        --input ${bams[0]} \\\\\n        --variant $variants \\\\\n        --output ${prefix}.pileups.table \\\\\n        $reference_command \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\"\n    \n    touch ${prefix}.pileups.table\n    touch versions.yml\n    \"\"\"\n}",
        "nb_lignes_process": 75,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${id_intervals}\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n    def reference_command = fasta ? \"--reference $fasta\" : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GetPileupSummaries] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GetPileupSummaries \\\\\n        --input ${bams[0]} \\\\\n        --variant $variants \\\\\n        --output ${prefix}.pileups.table \\\\\n        $reference_command \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "id_intervals",
            "bams",
            "intervals",
            "fasta",
            "fai",
            "dict",
            "variants",
            "variants_tbi"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chelauk__nf-core-mutectplatypus",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.5.0--hdfd78af_0' : 'quay.io/biocontainers/gatk4:4.2.5.0--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${id_intervals}\"\n    def interval_command = intervals ? \"--intervals $intervals\" : \"\"\n    def reference_command = fasta ? \"--reference $fasta\" : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GetPileupSummaries] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    echo -e \"gatk --java-options \"-Xmx${avail_mem}g\" GetPileupSummaries \\\\\n        --input ${bams[0]} \\\\\n        --variant $variants \\\\\n        --output ${prefix}.pileups.table \\\\\n        $reference_command \\\\\n        $interval_command \\\\\n        --tmp-dir . \\\\\n        $args\"\n    \n    touch ${prefix}.pileups.table\n    touch versions.yml\n    \"\"\""
    },
    "GATK4_GATHERPILEUPSUMMARIES": {
        "name_process": "GATK4_GATHERPILEUPSUMMARIES",
        "string_process": "process GATK4_GATHERPILEUPSUMMARIES {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.5.0--hdfd78af_0' :\n        'quay.io/biocontainers/gatk4:4.2.5.0--hdfd78af_0' }\"\n\n\n    input:\n    tuple val(meta), path(table)\n    path  dict\n\n    output:\n    tuple val(meta), path(\"*.pileupsummaries.table\"), emit: table\n    path \"versions.yml\"                             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = table.collect{ \"--I $it\" }.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GatherPileupSummaries] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GatherPileupSummaries \\\\\n        $input_list \\\\\n        --O ${prefix}.unsorted \\\\\n        --sequence-dictionary $dict \\\\\n        --tmp-dir . \\\\\n        $args\n    \n    head -2 ${prefix}.unsorted > header\n    tail -n +3 ${prefix}.unsorted | sort -k1,1 -k2,2n > temporary_file\n    cat header temporary_file > ${prefix}.pileupsummaries.table\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n    stub:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = table.collect{ \"--I $it\" }.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GatherPileupSummaries] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    echo -e \"gatk --java-options \"-Xmx${avail_mem}g\" GatherPileupSummaries \\\\\n        $input_list \\\\\n        --O ${prefix}.pileupsummaries.table \\\\\n        --sequence-dictionary $dict \\\\\n        --tmp-dir . \\\\\n        $args\"\n    \n    touch ${prefix}.pileupsummaries.table \n    touch versions.yml\n    \"\"\"\n}",
        "nb_lignes_process": 70,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = table.collect{ \"--I $it\" }.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GatherPileupSummaries] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" GatherPileupSummaries \\\\\n        $input_list \\\\\n        --O ${prefix}.unsorted \\\\\n        --sequence-dictionary $dict \\\\\n        --tmp-dir . \\\\\n        $args\n    \n    head -2 ${prefix}.unsorted > header\n    tail -n +3 ${prefix}.unsorted | sort -k1,1 -k2,2n > temporary_file\n    cat header temporary_file > ${prefix}.pileupsummaries.table\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "meta",
            "table",
            "dict"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chelauk__nf-core-mutectplatypus",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.5.0--hdfd78af_0' : 'quay.io/biocontainers/gatk4:4.2.5.0--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def input_list = table.collect{ \"--I $it\" }.join(' ')\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK GatherPileupSummaries] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    echo -e \"gatk --java-options \"-Xmx${avail_mem}g\" GatherPileupSummaries \\\\\n        $input_list \\\\\n        --O ${prefix}.pileupsummaries.table \\\\\n        --sequence-dictionary $dict \\\\\n        --tmp-dir . \\\\\n        $args\"\n    \n    touch ${prefix}.pileupsummaries.table \n    touch versions.yml\n    \"\"\""
    },
    "GATK4_CALCULATECONTAMINATION": {
        "name_process": "GATK4_CALCULATECONTAMINATION",
        "string_process": "process GATK4_CALCULATECONTAMINATION {\n    tag \"${patient}_${sample}\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/gatk4:4.2.5.0--hdfd78af_0' :\n        'quay.io/biocontainers/gatk4:4.2.5.0--hdfd78af_0' }\"\n\n    input:\n    tuple val(patient), val(sample), path(tumour_table), path(normal_table)\n\n    output:\n    tuple val(patient), val(sample), path('*.contamination.table'), emit: contamination\n    tuple val(patient), val(sample), path('*.segmentation.table') , emit: segmentation, optional:true\n    path \"versions.yml\"                           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${patient}_${sample}\"\n    def matched_command = normal_table ? \" -matched ${normal_table} \" : ''\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK CalculateContamination] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" CalculateContamination \\\\\n        --input $tumour_table \\\\\n        $matched_command \\\\\n        -segments ${prefix}.segmentation.table \\\\\n        --output ${prefix}.contamination.table \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n    stub:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${patient}_${sample}\"\n    def matched_command = normal_table ? \" -matched ${normal_table} \" : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK CalculateContamination] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    echo -e \"gatk --java-options \"-Xmx${avail_mem}g\" CalculateContamination \\\\\n        --input $tumour_table \\\\\n        $matched_command \\\\\n        -segments ${prefix}.segmentation.table \\\\\n        --output ${prefix}.contamination.table \\\\\n        --tmp-dir . \\\\\n        $args\"\n\n    touch ${prefix}.contamination.table\n    touch ${prefix}.segmentation.table\n    touch versions.yml \n    \"\"\"\n}",
        "nb_lignes_process": 67,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${patient}_${sample}\"\n    def matched_command = normal_table ? \" -matched ${normal_table} \" : ''\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK CalculateContamination] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    gatk --java-options \"-Xmx${avail_mem}g\" CalculateContamination \\\\\n        --input $tumour_table \\\\\n        $matched_command \\\\\n        -segments ${prefix}.segmentation.table \\\\\n        --output ${prefix}.contamination.table \\\\\n        --tmp-dir . \\\\\n        $args\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        gatk4: \\$(echo \\$(gatk --version 2>&1) | sed 's/^.*(GATK) v//; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "patient",
            "sample",
            "tumour_table",
            "normal_table"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chelauk__nf-core-mutectplatypus",
        "directive": [
            "tag \"${patient}_${sample}\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/gatk4:4.2.5.0--hdfd78af_0' : 'quay.io/biocontainers/gatk4:4.2.5.0--hdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": "\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${patient}_${sample}\"\n    def matched_command = normal_table ? \" -matched ${normal_table} \" : ''\n\n    def avail_mem = 3\n    if (!task.memory) {\n        log.info '[GATK CalculateContamination] Available memory not known - defaulting to 3GB. Specify process memory requirements to change this.'\n    } else {\n        avail_mem = task.memory.giga\n    }\n    \"\"\"\n    echo -e \"gatk --java-options \"-Xmx${avail_mem}g\" CalculateContamination \\\\\n        --input $tumour_table \\\\\n        $matched_command \\\\\n        -segments ${prefix}.segmentation.table \\\\\n        --output ${prefix}.contamination.table \\\\\n        --tmp-dir . \\\\\n        $args\"\n\n    touch ${prefix}.contamination.table\n    touch ${prefix}.segmentation.table\n    touch versions.yml \n    \"\"\""
    },
    "CONCAT_VCF": {
        "name_process": "CONCAT_VCF",
        "string_process": "process CONCAT_VCF {\n    tag \"$patient\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::htslib=1.12\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bcftools:1.11--h7c999a4_0\"\n    } else {\n        container \"quay.io/biocontainers/htslib:1.12--hd3b49d5_0\"\n    }\n\n\n    input:\n    tuple val(patient), path(vcf)\n    path fasta_fai\n\tpath target_bed\n\n    output:\n    tuple val(patient), path(\"*concatenated.vcf.gz\"), path(\"*concatenated.vcf.gz.tbi\"), emit: vcf\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${patient}\"\n    options = params.intervals ? \"-t ${target_bed}\" : \"\"\n\t\"\"\"\n\tconcatenateVCFs.sh -i ${fasta_fai} -c ${task.cpus} -o ${prefix}_${args}_concatenated.vcf ${options}\n    \"\"\"\n    stub:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${patient}\"\n    options = params.intervals ? \"-t ${target_bed}\" : \"\"\n    \"\"\"\n    echo -e \"concatenateVCFs.sh -i ${fasta_fai} -c ${task.cpus} -o ${prefix}_${args}_concatenated.vcf ${options}\"\n    touch ${prefix}_${args}_concatenated.vcf.gz\n    touch ${prefix}_${args}_concatenated.vcf.gz.tbi\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${patient}\"\n    options = params.intervals ? \"-t ${target_bed}\" : \"\"\n\t\"\"\"\n\tconcatenateVCFs.sh -i ${fasta_fai} -c ${task.cpus} -o ${prefix}_${args}_concatenated.vcf ${options}\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "patient",
            "vcf",
            "fasta_fai",
            "target_bed"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chelauk__nf-core-mutectplatypus",
        "directive": [
            "tag \"$patient\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::htslib=1.12\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bcftools:1.11--h7c999a4_0\" } else { container \"quay.io/biocontainers/htslib:1.12--hd3b49d5_0\" }"
        ],
        "when": "",
        "stub": "\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${patient}\"\n    options = params.intervals ? \"-t ${target_bed}\" : \"\"\n    \"\"\"\n    echo -e \"concatenateVCFs.sh -i ${fasta_fai} -c ${task.cpus} -o ${prefix}_${args}_concatenated.vcf ${options}\"\n    touch ${prefix}_${args}_concatenated.vcf.gz\n    touch ${prefix}_${args}_concatenated.vcf.gz.tbi\n    \"\"\""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "process MULTIQC {\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\"\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"versions.yml\"        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chelauk__nf-core-mutectplatypus",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "process SAMPLESHEET_CHECK {\n    \n    tag \"$samplesheet\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/python:3.8.3' :\n        'quay.io/biocontainers/python:3.8.3' }\"\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.csv'       , emit: csv\n    path \"versions.yml\", emit: versions\n\n    script:\n    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        python: \\$(python --version | sed 's/Python //g')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chelauk__nf-core-mutectplatypus",
        "directive": [
            "tag \"$samplesheet\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/python:3.8.3' : 'quay.io/biocontainers/python:3.8.3' }\""
        ],
        "when": "",
        "stub": ""
    }
}
{
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"lnkn/nfcore-maxquant:latest\"\n    }\n\n    cache false\n\n    input:\n    path versions\n    \n    output:\n    path \"software_versions.csv\"     , emit: csv\n    path 'software_versions_mqc.yaml', emit: yaml\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nicni16__nfcore-maxquant",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', publish_id:'') }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"lnkn/nfcore-maxquant:latest\" }",
            "cache false"
        ],
        "when": "",
        "stub": ""
    },
    "SDRFPIPELINES": {
        "name_process": "SDRFPIPELINES",
        "string_process": "\nprocess SDRFPIPELINES {\n    tag \"$sdrf\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n    conda (params.enable_conda ? \"bioconda::sdrf-pipelines=0.0.12\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/sdrf-pipelines:0.0.12--py_0\"\n    } else {\n        container \"lnkn/nfcore-maxquant:latest\"\n    }\n\n    input:\n        path sdrf_file \n        path fasta_file\n\n    output:\n        path \"mqpar.xml\"              , emit: xml\n        path \"exp_design.tsv\"         , emit: tsv\n        path \"*.version.txt\"          , emit: version\n        path \"Warning_message.txt\"    , emit: warning\n\n    script:\n    def software = getSoftwareName(task.process)\n    \"\"\"\n    parse_sdrf \\\\\n    convert-maxquant \\\\\n    -s \"${sdrf_file}\" \\\\\n    -f \"PLACEHOLDER${fasta_file}\" \\\\\n    -m ${params.match} \\\\\n    -r PLACEHOLDER \\\\\n    $options.args \\\\\n    -pef ${params.peptidefdr} \\\\\n    -prf ${params.proteinfdr} \\\\\n    -t PLACEHOLDERtemp \\\\\n    -o2 exp_design.tsv \\\\\n    -n ${task.cpus} \n     \n    echo $VERSION > ${software}.version.txt\n    cat \"\\$PWD/.command.out\" > Warning_message.txt\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def software = getSoftwareName(task.process)\n    \"\"\"\n    parse_sdrf \\\\\n    convert-maxquant \\\\\n    -s \"${sdrf_file}\" \\\\\n    -f \"PLACEHOLDER${fasta_file}\" \\\\\n    -m ${params.match} \\\\\n    -r PLACEHOLDER \\\\\n    $options.args \\\\\n    -pef ${params.peptidefdr} \\\\\n    -prf ${params.proteinfdr} \\\\\n    -t PLACEHOLDERtemp \\\\\n    -o2 exp_design.tsv \\\\\n    -n ${task.cpus} \n     \n    echo $VERSION > ${software}.version.txt\n    cat \"\\$PWD/.command.out\" > Warning_message.txt\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sdrf_file",
            "fasta_file"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nicni16__nfcore-maxquant",
        "directive": [
            "tag \"$sdrf\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"bioconda::sdrf-pipelines=0.0.12\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/sdrf-pipelines:0.0.12--py_0\" } else { container \"lnkn/nfcore-maxquant:latest\" }"
        ],
        "when": "",
        "stub": ""
    },
    "NORMALIZERDE": {
        "name_process": "NORMALIZERDE",
        "string_process": "\nprocess NORMALIZERDE {\n    tag \"$norm\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n    conda (params.enable_conda ? \"bioconda::bioconductor-normalyzerde=1.8.0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/bioconductor-normalyzerde:1.8.0--r40hdfd78af_1\"\n    } else {\n        container \"wombatp/maxquant-pipeline:v0.13\"\n    }\n\n    input:\n        path sdrf_file\n        path exp_file\n        path protein_file \n        file exp_file2 \n\n    output:\n\t    path \"Normalyzer/Normalyzer_stats.tsv\"                      , emit: tsv\n\t    path \"Normalyzer/${params.normalyzerMethod}-normalized.txt\" , emit: txt\n        path \"*.version.txt\"                                        , emit: version\n\n    script:\n    def software = getSoftwareName(task.process)\n        \n    \"\"\"\n    cp \"${exp_file}\" exp_file.tsv\n    cp \"${exp_file2}\" exp_file2.tsv \n    cp \"${protein_file}\" protein_file.txt\n    Rscript $baseDir/runNormalyzer.R --comps=\"${params.comparisons}\" --method=\"${params.normalyzerMethod}\" \"$options.args\"\n    cp -R Normalyzer \"${params.outdir}\"\n    echo $VERSION > ${software}.version.txt\n\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def software = getSoftwareName(task.process)\n        \n    \"\"\"\n    cp \"${exp_file}\" exp_file.tsv\n    cp \"${exp_file2}\" exp_file2.tsv \n    cp \"${protein_file}\" protein_file.txt\n    Rscript $baseDir/runNormalyzer.R --comps=\"${params.comparisons}\" --method=\"${params.normalyzerMethod}\" \"$options.args\"\n    cp -R Normalyzer \"${params.outdir}\"\n    echo $VERSION > ${software}.version.txt\n\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sdrf_file",
            "exp_file",
            "protein_file",
            "exp_file2"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nicni16__nfcore-maxquant",
        "directive": [
            "tag \"$norm\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"bioconda::bioconductor-normalyzerde=1.8.0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/bioconductor-normalyzerde:1.8.0--r40hdfd78af_1\" } else { container \"wombatp/maxquant-pipeline:v0.13\" }"
        ],
        "when": "",
        "stub": ""
    },
    "MAXQUANT": {
        "name_process": "MAXQUANT",
        "string_process": "\nprocess MAXQUANT {\n    tag \"$max\"\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n    conda (params.enable_conda ? \"bioconda::maxquant:1.6.10.43--0\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/maxquant:1.6.10.43--0\"\n    } else {\n        container \"lnkn/nfcore-maxquant:latest\"\n    }\n\n    input:\n        path mqparameters\n        file rawfile \n\t    file fastafile \n         \n\n    output:\n\n        path \"combined/txt/proteinGroups.txt\"   , emit: txt\n        path \"*.version.txt\"                    , emit: version\n\n\n    script:\n    def software = getSoftwareName(task.process)\n\n    \"\"\" \n    sed -i \"s|PLACEHOLDER|\\$PWD/|g\" \"${mqparameters}\"\n    mkdir temp\n    maxquant ${mqparameters}\n    cp -R \"\\$PWD/combined/txt\" \"${params.outdir}\"\n    echo $VERSION > ${software}.version.txt\n    \"\"\"\n    \n}",
        "nb_lignes_process": 36,
        "string_script": "    def software = getSoftwareName(task.process)\n\n    \"\"\" \n    sed -i \"s|PLACEHOLDER|\\$PWD/|g\" \"${mqparameters}\"\n    mkdir temp\n    maxquant ${mqparameters}\n    cp -R \"\\$PWD/combined/txt\" \"${params.outdir}\"\n    echo $VERSION > ${software}.version.txt\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MaxQuant"
        ],
        "tools_url": [
            "https://bio.tools/maxquant"
        ],
        "tools_dico": [
            {
                "name": "MaxQuant",
                "uri": "https://bio.tools/maxquant",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3630",
                                    "term": "Protein quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "Principal component visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3432",
                                    "term": "Clustering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0531",
                                    "term": "Heat map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3435",
                                    "term": "Standardisation and normalisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3630",
                                    "term": "Protein quantitation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "PCA plotting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2939",
                                    "term": "Principal component plotting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0531",
                                    "term": "Heatmap generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0531",
                                    "term": "Heat map construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0945",
                                "term": "Peptide identification"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2603",
                                "term": "Expression data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2884",
                                "term": "Plot"
                            }
                        ]
                    }
                ],
                "description": "Quantitative proteomics software package designed for analyzing large mass-spectrometric data sets. It is specifically aimed at high-resolution MS data.",
                "homepage": "http://www.maxquant.org/"
            }
        ],
        "inputs": [
            "mqparameters",
            "rawfile",
            "fastafile"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "nicni16__nfcore-maxquant",
        "directive": [
            "tag \"$max\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }",
            "conda (params.enable_conda ? \"bioconda::maxquant:1.6.10.43--0\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/maxquant:1.6.10.43--0\" } else { container \"lnkn/nfcore-maxquant:latest\" }"
        ],
        "when": "",
        "stub": ""
    }
}
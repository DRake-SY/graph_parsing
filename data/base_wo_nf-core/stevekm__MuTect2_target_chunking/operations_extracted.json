{
    "OPERATION_1": {
        "string": "Channel.from(\"${params.numlines}\").map { nlines ->\n    def lineChunkLabel = \"${params.numlines}lineChunk\"\n\n    return([ lineChunkLabel, nlines ])\n}.into { lineChunkLabel_ch; lineChunkLabel_ch2 }",
        "origin": [],
        "gives": [
            [
                "lineChunkLabel_ch",
                "P"
            ],
            [
                "lineChunkLabel_ch2",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.from(\"${params.numChunks}\").map { nchunks ->\n    def nChunkLabel = \"${nchunks}Chunk\"\n\n    return([ nChunkLabel, nchunks ])\n    }.into { nChunkLabel_ch; nChunkLabel_ch2 }",
        "origin": [],
        "gives": [
            [
                "nChunkLabel_ch",
                "P"
            ],
            [
                "nChunkLabel_ch2",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(\"${params.samplesheet}\")\n    .splitCsv(header: true, sep: '\\t')\n    .map { row ->\n        def tumorID = \"${row.Tumor}\"\n        def normalID = \"${row.Normal}\"\n        def comparisonID = \"${tumorID}-${normalID}\"\n        def tumorBam = file(\"${row.Tumor_Bam}\")\n        def tumorBai = file(\"${row.Tumor_Bai}\")\n        def normalBam = file(\"${row.Normal_Bam}\")\n        def normalBai = file(\"${row.Normal_Bai}\")\n\n        return([ comparisonID, tumorID, normalID, tumorBam, tumorBai, normalBam, normalBai ])\n    }\n    .into { input_bams; input_bams2; input_bams3; input_bams4 }",
        "origin": [
            [
                "\"${params.samplesheet}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "input_bams",
                "P"
            ],
            [
                "input_bams2",
                "P"
            ],
            [
                "input_bams3",
                "P"
            ],
            [
                "input_bams4",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath( file(params.targetsBed) ).into{ targets_bed; targets_bed2; targets_bed3; targets_bed4 }",
        "origin": [
            [
                "file(params.targetsBed",
                "A"
            ]
        ],
        "gives": [
            [
                "targets_bed",
                "P"
            ],
            [
                "targets_bed2",
                "P"
            ],
            [
                "targets_bed3",
                "P"
            ],
            [
                "targets_bed4",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath( file(params.ref_fa) ).into { ref_fasta; ref_fasta2; ref_fasta3; ref_fasta4; ref_fasta5; ref_fasta6; ref_fasta7; ref_fasta8 }",
        "origin": [
            [
                "file(params.ref_fa",
                "A"
            ]
        ],
        "gives": [
            [
                "ref_fasta",
                "P"
            ],
            [
                "ref_fasta2",
                "P"
            ],
            [
                "ref_fasta3",
                "P"
            ],
            [
                "ref_fasta4",
                "P"
            ],
            [
                "ref_fasta5",
                "P"
            ],
            [
                "ref_fasta6",
                "P"
            ],
            [
                "ref_fasta7",
                "P"
            ],
            [
                "ref_fasta8",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.fromPath( file(params.ref_fai) ).into { ref_fai; ref_fai2; ref_fai3; ref_fai4; ref_fai5; ref_fai6; ref_fai7; ref_fai8 }",
        "origin": [
            [
                "file(params.ref_fai",
                "A"
            ]
        ],
        "gives": [
            [
                "ref_fai",
                "P"
            ],
            [
                "ref_fai2",
                "P"
            ],
            [
                "ref_fai3",
                "P"
            ],
            [
                "ref_fai4",
                "P"
            ],
            [
                "ref_fai5",
                "P"
            ],
            [
                "ref_fai6",
                "P"
            ],
            [
                "ref_fai7",
                "P"
            ],
            [
                "ref_fai8",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel.fromPath( file(params.ref_dict) ).into { ref_dict; ref_dict2; ref_dict3; ref_dict4; ref_dict5; ref_dict6; ref_dict7; ref_dict8 }",
        "origin": [
            [
                "file(params.ref_dict",
                "A"
            ]
        ],
        "gives": [
            [
                "ref_dict",
                "P"
            ],
            [
                "ref_dict2",
                "P"
            ],
            [
                "ref_dict3",
                "P"
            ],
            [
                "ref_dict4",
                "P"
            ],
            [
                "ref_dict5",
                "P"
            ],
            [
                "ref_dict6",
                "P"
            ],
            [
                "ref_dict7",
                "P"
            ],
            [
                "ref_dict8",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel.fromPath( file(params.dbsnp_ref_vcf) ).into{ dbsnp_ref_vcf; dbsnp_ref_vcf2; dbsnp_ref_vcf3; dbsnp_ref_vcf4 }",
        "origin": [
            [
                "file(params.dbsnp_ref_vcf",
                "A"
            ]
        ],
        "gives": [
            [
                "dbsnp_ref_vcf",
                "P"
            ],
            [
                "dbsnp_ref_vcf2",
                "P"
            ],
            [
                "dbsnp_ref_vcf3",
                "P"
            ],
            [
                "dbsnp_ref_vcf4",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel.fromPath( file(params.dbsnp_ref_vcf_idx) ).into{ dbsnp_ref_vcf_idx; dbsnp_ref_vcf_idx2; dbsnp_ref_vcf_idx3; dbsnp_ref_vcf_idx4 }",
        "origin": [
            [
                "file(params.dbsnp_ref_vcf_idx",
                "A"
            ]
        ],
        "gives": [
            [
                "dbsnp_ref_vcf_idx",
                "P"
            ],
            [
                "dbsnp_ref_vcf_idx2",
                "P"
            ],
            [
                "dbsnp_ref_vcf_idx3",
                "P"
            ],
            [
                "dbsnp_ref_vcf_idx4",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel.fromPath( file(params.cosmic_ref_vcf) ).into{ cosmic_ref_vcf; cosmic_ref_vcf2; cosmic_ref_vcf3; cosmic_ref_vcf4 }",
        "origin": [
            [
                "file(params.cosmic_ref_vcf",
                "A"
            ]
        ],
        "gives": [
            [
                "cosmic_ref_vcf",
                "P"
            ],
            [
                "cosmic_ref_vcf2",
                "P"
            ],
            [
                "cosmic_ref_vcf3",
                "P"
            ],
            [
                "cosmic_ref_vcf4",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel.fromPath( file(params.cosmic_ref_vcf_idx) ).into{ cosmic_ref_vcf_idx; cosmic_ref_vcf_idx2; cosmic_ref_vcf_idx3; cosmic_ref_vcf_idx4 }",
        "origin": [
            [
                "file(params.cosmic_ref_vcf_idx",
                "A"
            ]
        ],
        "gives": [
            [
                "cosmic_ref_vcf_idx",
                "P"
            ],
            [
                "cosmic_ref_vcf_idx2",
                "P"
            ],
            [
                "cosmic_ref_vcf_idx3",
                "P"
            ],
            [
                "cosmic_ref_vcf_idx4",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel.fromPath( file(params.ANNOVAR_DB_DIR) ).into { annovar_db_dir; annovar_db_dir2; annovar_db_dir3 }",
        "origin": [
            [
                "file(params.ANNOVAR_DB_DIR",
                "A"
            ]
        ],
        "gives": [
            [
                "annovar_db_dir",
                "P"
            ],
            [
                "annovar_db_dir2",
                "P"
            ],
            [
                "annovar_db_dir3",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "Channel.fromPath( params.targetsBed )\n            .splitCsv(sep: '\\t')\n            .map{row ->\n                row[0]\n            }\n            .unique()\n            .set{ chroms }",
        "origin": [
            [
                "params.targetsBed",
                "A"
            ]
        ],
        "gives": [
            [
                "chroms",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "input_bams.combine(targets_bed)\n    .combine(ref_fasta)\n    .combine(ref_fai)\n    .combine(ref_dict)\n    .combine(dbsnp_ref_vcf)\n    .combine(dbsnp_ref_vcf_idx)\n    .combine(cosmic_ref_vcf)\n    .combine(cosmic_ref_vcf_idx)\n    .tap { input_noChunk_ch }PROCESS DEF mutect2_noChunk",
        "origin": [
            [
                "input_bams",
                "P"
            ],
            [
                "targets_bed",
                "P"
            ],
            [
                "ref_fasta",
                "P"
            ],
            [
                "ref_fai",
                "P"
            ],
            [
                "ref_dict",
                "P"
            ],
            [
                "dbsnp_ref_vcf",
                "P"
            ],
            [
                "dbsnp_ref_vcf_idx",
                "P"
            ],
            [
                "cosmic_ref_vcf",
                "P"
            ],
            [
                "cosmic_ref_vcf_idx",
                "P"
            ]
        ],
        "gives": [
            [
                "input_noChunk_ch",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "targets_bed2.combine(chroms).set { targets_chroms }PROCESS DEF bed_chromChunk",
        "origin": [
            [
                "targets_bed2",
                "P"
            ],
            [
                "chroms",
                "P"
            ]
        ],
        "gives": [
            [
                "targets_chroms",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "input_bams2.combine(chromChunk_targets).map { comparisonID, tumorID, normalID, tumorBam, tumorBai, normalBam, normalBai, label, chrom, targets_bed ->\n    return([ label, chrom, comparisonID, tumorID, normalID, tumorBam, tumorBai, normalBam, normalBai, targets_bed ])\n}\n.combine(ref_fasta2)\n.combine(ref_fai2)\n.combine(ref_dict2)\n.combine(dbsnp_ref_vcf2)\n.combine(dbsnp_ref_vcf_idx2)\n.combine(cosmic_ref_vcf2)\n.combine(cosmic_ref_vcf_idx2)\n.tap { input_chromChunk_ch }",
        "origin": [
            [
                "input_bams2",
                "P"
            ],
            [
                "chromChunk_targets",
                "P"
            ],
            [
                "ref_fasta2",
                "P"
            ],
            [
                "ref_fai2",
                "P"
            ],
            [
                "ref_dict2",
                "P"
            ],
            [
                "dbsnp_ref_vcf2",
                "P"
            ],
            [
                "dbsnp_ref_vcf_idx2",
                "P"
            ],
            [
                "cosmic_ref_vcf2",
                "P"
            ],
            [
                "cosmic_ref_vcf_idx2",
                "P"
            ]
        ],
        "gives": [
            [
                "input_chromChunk_ch",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "nChunkLabel_ch.combine(targets_bed3).set { nChunk_target }                                PROCESS DEF bed_nChunk",
        "origin": [
            [
                "nChunkLabel_ch",
                "P"
            ],
            [
                "targets_bed3",
                "P"
            ]
        ],
        "gives": [
            [
                "nChunk_target",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "chunked_targets.flatten()\n    .combine(nChunkLabel_ch2)\n    .map { targets, chunkLabel, numChunks ->\n        def targetChunkNum = \"${targets.name}\".findAll(/\\d*$/)[0]                                          \n        return([ chunkLabel, targets, targetChunkNum ])\n    }\n    .combine(input_bams3)\n    .map { chunkLabel, targets, targetChunkNum, comparisonID, tumorID, normalID, tumorBam, tumorBai, normalBam, normalBai ->\n        return([ chunkLabel, targetChunkNum, comparisonID, tumorID, normalID, tumorBam, tumorBai, normalBam, normalBai, targets])\n    }\n    .combine(ref_fasta3)\n    .combine(ref_fai3)\n    .combine(ref_dict3)\n    .combine(dbsnp_ref_vcf3)\n    .combine(dbsnp_ref_vcf_idx3)\n    .combine(cosmic_ref_vcf3)\n    .combine(cosmic_ref_vcf_idx3)\n    .tap { input_nChunk_ch }",
        "origin": [
            [
                "chunked_targets",
                "P"
            ],
            [
                "nChunkLabel_ch2",
                "P"
            ],
            [
                "input_bams3",
                "P"
            ],
            [
                "ref_fasta3",
                "P"
            ],
            [
                "ref_fai3",
                "P"
            ],
            [
                "ref_dict3",
                "P"
            ],
            [
                "dbsnp_ref_vcf3",
                "P"
            ],
            [
                "dbsnp_ref_vcf_idx3",
                "P"
            ],
            [
                "cosmic_ref_vcf3",
                "P"
            ],
            [
                "cosmic_ref_vcf_idx3",
                "P"
            ]
        ],
        "gives": [
            [
                "input_nChunk_ch",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "lineChunkLabel_ch.combine(targets_bed4).set { lineChunk_target }PROCESS DEF targetChunkLines",
        "origin": [
            [
                "lineChunkLabel_ch",
                "P"
            ],
            [
                "targets_bed4",
                "P"
            ]
        ],
        "gives": [
            [
                "lineChunk_target",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "line_chunked_targets.flatten()\n    .combine(lineChunkLabel_ch2)\n    .map { targets, chunkLabel, numLineChunks ->\n        def targetChunkNum = \"${targets.name}\".findAll(/\\d*$/)[0]                                          \n        return([ chunkLabel, targets, targetChunkNum ])\n    }\n    .combine(input_bams4)\n    .map { chunkLabel, targets, targetChunkNum, comparisonID, tumorID, normalID, tumorBam, tumorBai, normalBam, normalBai ->\n        return([ chunkLabel, targetChunkNum, comparisonID, tumorID, normalID, tumorBam, tumorBai, normalBam, normalBai, targets])\n    }\n    .combine(ref_fasta7)\n    .combine(ref_fai7)\n    .combine(ref_dict7)\n    .combine(dbsnp_ref_vcf4)\n    .combine(dbsnp_ref_vcf_idx4)\n    .combine(cosmic_ref_vcf4)\n    .combine(cosmic_ref_vcf_idx4)\n    .tap { input_lineChunk_ch }\n    .subscribe { println \"[line_chunked_targets] ${it}\" }",
        "origin": [
            [
                "line_chunked_targets",
                "P"
            ],
            [
                "lineChunkLabel_ch2",
                "P"
            ],
            [
                "input_bams4",
                "P"
            ],
            [
                "ref_fasta7",
                "P"
            ],
            [
                "ref_fai7",
                "P"
            ],
            [
                "ref_dict7",
                "P"
            ],
            [
                "dbsnp_ref_vcf4",
                "P"
            ],
            [
                "dbsnp_ref_vcf_idx4",
                "P"
            ],
            [
                "cosmic_ref_vcf4",
                "P"
            ],
            [
                "cosmic_ref_vcf_idx4",
                "P"
            ]
        ],
        "gives": [
            [
                "input_lineChunk_ch",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "vcf_tsv_lineChunk.map { chunkLabel, targetChunkNum, comparisonID, tumorID, normalID, vcf, tsv ->\n    def label = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    def lineChunkLabel = \"${params.numlines}lineChunk\"\n    return([ lineChunkLabel, label, vcf, tsv ])\n}.set { vcf_tsv_lineChunk_refactor }",
        "origin": [
            [
                "vcf_tsv_lineChunk",
                "P"
            ]
        ],
        "gives": [
            [
                "vcf_tsv_lineChunk_refactor",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "vcf_tsv_nChunk.map { chunkLabel, targetChunkNum, comparisonID, tumorID, normalID, vcf, tsv ->\n    def label = \"${comparisonID}.${chunkLabel}.${targetChunkNum}\"\n    def nChunkLabel = \"${params.numChunks}Chunk\"\n    return([ nChunkLabel, label, vcf, tsv ])\n}.set { vcf_tsv_nChunk_refactor }",
        "origin": [
            [
                "vcf_tsv_nChunk",
                "P"
            ]
        ],
        "gives": [
            [
                "vcf_tsv_nChunk_refactor",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "vcf_tsv_chromChunk.map { label, chrom, comparisonID, tumorID, normalID, vcf, tsv ->\n    def newlabel = \"${comparisonID}.${label}.${chrom}\"\n    def type = \"chromChunk\"\n    return([ type, newlabel, vcf, tsv ])\n}.set { vcf_tsv_chromChunk_refactor }",
        "origin": [
            [
                "vcf_tsv_chromChunk",
                "P"
            ]
        ],
        "gives": [
            [
                "vcf_tsv_chromChunk_refactor",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "vcf_tsv_noChunk.map { label, comparisonID, tumorID, normalID, vcf, tsv ->\n    def newlabel = \"${comparisonID}.${label}\"\n    def type = \"noChunk\"\n    return([ type, newlabel, vcf, tsv ])\n}.set { vcf_tsv_noChunk_refactor }",
        "origin": [
            [
                "vcf_tsv_noChunk",
                "P"
            ]
        ],
        "gives": [
            [
                "vcf_tsv_noChunk_refactor",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "vcf_tsv_nChunk_refactor.concat(vcf_tsv_chromChunk_refactor, vcf_tsv_noChunk_refactor, vcf_tsv_lineChunk_refactor)\n        .filter { type, label, vcf, tsv ->\n            long count = Files.lines(tsv).count()\n            if (count <= 1) println \">>> WARNING: file ${tsv} (${label}) does not have enough lines and will not be included\"\n            count > 1\n        }\n        .set { vcfs_tsvs }",
        "origin": [
            [
                "vcf_tsv_nChunk_refactor",
                "P"
            ],
            [
                "vcf_tsv_chromChunk_refactor",
                "P"
            ],
            [
                "vcf_tsv_noChunk_refactor",
                "P"
            ],
            [
                "vcf_tsv_lineChunk_refactor",
                "P"
            ]
        ],
        "gives": [
            [
                "vcfs_tsvs",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "merged_tables.collectFile(name: \"MuTect2.chunking_validation.annotations.tsv\", storeDir: \"${params.outputDir}\", keepHeader: true, sort: false)",
        "origin": [
            [
                "merged_tables",
                "P"
            ]
        ],
        "gives": []
    }
}
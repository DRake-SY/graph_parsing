{
    "OPERATION_1": {
        "string": "Channel\n      .fromPath(accession_number_file)\n      .splitText()\n      .map{ x -> x.trim()}\n      .set { accession_numbers }",
        "origin": [
            [
                "accession_number_file",
                "A"
            ]
        ],
        "gives": [
            [
                "accession_numbers",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromFilePairs( fastqs )\n    .ifEmpty { error \"Cannot find any reads matching: ${fastqs}\" }\n    .set { raw_fastqs }",
        "origin": [
            [
                "fastqs",
                "A"
            ]
        ],
        "gives": [
            [
                "raw_fastqs",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "raw_fastqs.into {raw_fastqs_for_qc; raw_fastqs_for_trimming; raw_fastqs_for_length_assessment}",
        "origin": [
            [
                "raw_fastqs",
                "P"
            ]
        ],
        "gives": [
            [
                "raw_fastqs_for_qc",
                "P"
            ],
            [
                "raw_fastqs_for_trimming",
                "P"
            ],
            [
                "raw_fastqs_for_length_assessment",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "min_read_length_and_raw_fastqs = min_read_length_for_trimming.join(raw_fastqs_for_trimming)",
        "origin": [
            [
                "min_read_length_for_trimming",
                "P"
            ],
            [
                "raw_fastqs_for_trimming",
                "P"
            ]
        ],
        "gives": [
            [
                "min_read_length_and_raw_fastqs",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "mash_output.map { pair_id, file -> find_genome_size(pair_id, file.text) }.into{genome_size_estimation_for_read_correction; genome_size_estimation_for_downsampling}",
        "origin": [
            [
                "mash_output",
                "P"
            ]
        ],
        "gives": [
            [
                "genome_size_estimation_for_read_correction",
                "P"
            ],
            [
                "genome_size_estimation_for_downsampling",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "trimmed_fastqs_and_genome_size = trimmed_fastqs_for_correction.join(genome_size_estimation_for_read_correction).map{ tuple -> [tuple[0], tuple[1], tuple[2]]}",
        "origin": [
            [
                "trimmed_fastqs_for_correction",
                "P"
            ],
            [
                "genome_size_estimation_for_read_correction",
                "P"
            ]
        ],
        "gives": [
            [
                "trimmed_fastqs_and_genome_size",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "base_counts = seqtk_fqchk_output.map { pair_id, file -> find_total_number_of_bases(pair_id, file.text) }",
        "origin": [
            [
                "seqtk_fqchk_output",
                "P"
            ]
        ],
        "gives": [
            [
                "base_counts",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "corrected_fastqs_and_genome_size_and_base_count = corrected_fastqs_for_merging.join(genome_size_estimation_for_downsampling).join(base_counts).map{ tuple -> [tuple[0], tuple[1], tuple[2], tuple[3]]}",
        "origin": [
            [
                "corrected_fastqs_for_merging",
                "P"
            ],
            [
                "genome_size_estimation_for_downsampling",
                "P"
            ],
            [
                "base_counts",
                "P"
            ]
        ],
        "gives": [
            [
                "corrected_fastqs_and_genome_size_and_base_count",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "min_read_length_and_raw_fastqs = min_read_length_for_assembly.join(merged_fastqs)",
        "origin": [
            [
                "min_read_length_for_assembly",
                "P"
            ],
            [
                "merged_fastqs",
                "P"
            ]
        ],
        "gives": [
            [
                "min_read_length_and_raw_fastqs",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "quality_files = qc_post_trimming_files.join(confindr_files).join(quast_files_for_qualifyr).join(scaffolds_for_qc)",
        "origin": [
            [
                "qc_post_trimming_files",
                "P"
            ],
            [
                "confindr_files",
                "P"
            ],
            [
                "quast_files_for_qualifyr",
                "P"
            ],
            [
                "scaffolds_for_qc",
                "P"
            ]
        ],
        "gives": [
            [
                "quality_files",
                "P"
            ]
        ]
    }
}
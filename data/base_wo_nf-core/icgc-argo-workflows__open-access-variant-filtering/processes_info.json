{
    "scoreUpload": {
        "name_process": "scoreUpload",
        "string_process": "\nprocess scoreUpload {\n    maxRetries params.max_retries\n    errorStrategy {\n        sleep(Math.pow(2, task.attempt) * params.first_retry_wait_time * 1000 as long);                                           \n        return params.max_retries ? 'retry' : 'finish'\n    }\n\n    pod = [secret: workflow.runName + \"-secret\", mountPath: \"/tmp/rdpc_secret\"]\n    \n    cpus params.cpus\n    memory \"${params.mem} GB\"\n \n    container \"overture/score:${params.container_version}\"\n\n    tag \"${analysis_id}\"\n\n    input:\n        val analysis_id\n        path manifest\n        path upload\n\n    output:\n        val analysis_id, emit: ready_to_publish\n\n    script:\n        accessToken = params.api_token ? params.api_token : \"`cat /tmp/rdpc_secret/secret`\"\n        \"\"\"\n        export METADATA_URL=${params.song_url}\n        export STORAGE_URL=${params.score_url}\n        export TRANSPORT_PARALLEL=${params.cpus}\n        export TRANSPORT_MEMORY=${params.transport_mem}\n        export ACCESSTOKEN=${accessToken}\n        \n        score-client upload --manifest ${manifest}\n        \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "        accessToken = params.api_token ? params.api_token : \"`cat /tmp/rdpc_secret/secret`\"\n        \"\"\"\n        export METADATA_URL=${params.song_url}\n        export STORAGE_URL=${params.score_url}\n        export TRANSPORT_PARALLEL=${params.cpus}\n        export TRANSPORT_MEMORY=${params.transport_mem}\n        export ACCESSTOKEN=${accessToken}\n        \n        score-client upload --manifest ${manifest}\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "analysis_id",
            "manifest",
            "upload"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__open-access-variant-filtering",
        "directive": [
            "maxRetries params.max_retries",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * params.first_retry_wait_time * 1000 as long); return params.max_retries ? 'retry' : 'finish' }",
            "pod = [secret: workflow.runName + \"-secret\", mountPath: \"/tmp/rdpc_secret\"]",
            "cpus params.cpus",
            "memory \"${params.mem} GB\"",
            "container \"overture/score:${params.container_version}\"",
            "tag \"${analysis_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "songSubmit": {
        "name_process": "songSubmit",
        "string_process": "\nprocess songSubmit {\n    maxRetries params.max_retries\n    errorStrategy {\n        sleep(Math.pow(2, task.attempt) * params.first_retry_wait_time * 1000 as long);                                           \n        return params.max_retries ? 'retry' : 'finish'\n    }\n\n    pod = [secret: workflow.runName + \"-secret\", mountPath: \"/tmp/rdpc_secret\"]\n    \n    cpus params.cpus\n    memory \"${params.mem} GB\"\n \n    container \"overture/song-client:${params.container_version}\"\n    \n    tag \"${study_id}\"\n    label \"songSubmit\"\n    \n    input:\n        val study_id\n        path payload\n    \n    output:\n        stdout()\n\n    script:\n        accessToken = params.api_token ? params.api_token : \"`cat /tmp/rdpc_secret/secret`\"\n        \"\"\"\n        export CLIENT_SERVER_URL=${params.song_url}\n        export CLIENT_STUDY_ID=${study_id}\n        export CLIENT_ACCESS_TOKEN=${accessToken}\n\n        set -euxo pipefail\n        sing submit -f ${payload} | jq -er .analysisId | tr -d '\\\\n'\n        \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "        accessToken = params.api_token ? params.api_token : \"`cat /tmp/rdpc_secret/secret`\"\n        \"\"\"\n        export CLIENT_SERVER_URL=${params.song_url}\n        export CLIENT_STUDY_ID=${study_id}\n        export CLIENT_ACCESS_TOKEN=${accessToken}\n\n        set -euxo pipefail\n        sing submit -f ${payload} | jq -er .analysisId | tr -d '\\\\n'\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Nursing"
        ],
        "tools_url": [
            "https://bio.tools/Nursing"
        ],
        "tools_dico": [
            {
                "name": "Nursing",
                "uri": "https://bio.tools/Nursing",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Medical informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Critical care medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3376",
                            "term": "Medicines research and development"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Biomedical informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Healthcare informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Health informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Health and disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Clinical informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Acute medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Emergency medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Intensive care medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3376",
                            "term": "Drug discovery and development"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The use and abuse of credentials.\n\nA Guide to Nursing Credentials and Degrees.\n\nComplete List of Common Nursing Certifications.\n\nFrom LPN to MSN, the jumble of letters following a nurse's name can be confusing. Learn what these nursing credentials mean and how they should be listed.\n\nView 183 commonly recognized nursing certifications along with links to their certifying organizations.\n\nThe confusing nature of nursing credentials has led to widespread use of the term \u201calphabet soup.\u201d The letters that follow a nurse\u2019s name can be perplexing to professionals in the medical field, and especially to patients and families. To solve this problem, nursing credentials need to be displayed properly.\n\nNever fear. Nurse.org has compiled an alphabetical list of 183 different nursing certifications along with the appropriate acronyms and links to their certifying organizations",
                "homepage": "https://online.alvernia.edu/program-resources/nursing-credentials/"
            }
        ],
        "inputs": [
            "study_id",
            "payload"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__open-access-variant-filtering",
        "directive": [
            "maxRetries params.max_retries",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * params.first_retry_wait_time * 1000 as long); return params.max_retries ? 'retry' : 'finish' }",
            "pod = [secret: workflow.runName + \"-secret\", mountPath: \"/tmp/rdpc_secret\"]",
            "cpus params.cpus",
            "memory \"${params.mem} GB\"",
            "container \"overture/song-client:${params.container_version}\"",
            "tag \"${study_id}\"",
            "label \"songSubmit\""
        ],
        "when": "",
        "stub": ""
    },
    "scoreDownload": {
        "name_process": "scoreDownload",
        "string_process": "\nprocess scoreDownload {\n    pod = [secret: workflow.runName + \"-secret\", mountPath: \"/tmp/rdpc_secret\"]\n    \n    cpus params.cpus\n    memory \"${params.mem} GB\"\n \n    container \"overture/score:${params.container_version}\"\n\n    label \"scoreDownload\"\n    tag \"${analysis_id}\"\n\n    input:\n        path analysis\n        val study_id\n        val analysis_id\n\n    output:\n        path analysis, emit: analysis_json\n        path 'out/*', emit: files\n\n\n    script:\n        accessToken = params.api_token ? params.api_token : \"`cat /tmp/rdpc_secret/secret`\"\n        \"\"\"\n        export METADATA_URL=${params.song_url}\n        export STORAGE_URL=${params.score_url}\n        export TRANSPORT_PARALLEL=${params.cpus}\n        export TRANSPORT_MEMORY=${params.transport_mem}\n        export ACCESSTOKEN=${accessToken}\n        \n        score-client download --analysis-id ${analysis_id} --study-id ${study_id} --output-dir ./out \n        \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "        accessToken = params.api_token ? params.api_token : \"`cat /tmp/rdpc_secret/secret`\"\n        \"\"\"\n        export METADATA_URL=${params.song_url}\n        export STORAGE_URL=${params.score_url}\n        export TRANSPORT_PARALLEL=${params.cpus}\n        export TRANSPORT_MEMORY=${params.transport_mem}\n        export ACCESSTOKEN=${accessToken}\n        \n        score-client download --analysis-id ${analysis_id} --study-id ${study_id} --output-dir ./out \n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "analysis",
            "study_id",
            "analysis_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__open-access-variant-filtering",
        "directive": [
            "pod = [secret: workflow.runName + \"-secret\", mountPath: \"/tmp/rdpc_secret\"]",
            "cpus params.cpus",
            "memory \"${params.mem} GB\"",
            "container \"overture/score:${params.container_version}\"",
            "label \"scoreDownload\"",
            "tag \"${analysis_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "payloadGenVariantProcessing": {
        "name_process": "payloadGenVariantProcessing",
        "string_process": "\nprocess payloadGenVariantProcessing {\n  container \"${params.container ?: container[params.container_registry ?: default_container_registry]}:${params.container_version ?: version}\"\n  publishDir \"${params.publish_dir}/${task.process.replaceAll(':', '_')}\", mode: \"copy\", enabled: params.publish_dir\n\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:                                 \n    path analysis\n    path files_to_upload\n    val wf_name\n    val wf_short_name\n    val wf_version\n    val open\n\n  output:                                  \n    path \"*.payload.json\", emit: payload\n    path \"out/*{.vcf.gz,.vcf.gz.tbi}\", emit: files_to_upload\n\n  script:\n                                                  \n    arg_open = open ? \"-o\" : \"\"\n\n    \"\"\"   \n    main.py \\\n      -a ${analysis} \\\n      -f ${files_to_upload} \\\n      -w ${wf_name} \\\n      -s ${wf_short_name} \\\n      -v ${wf_version} \\\n      -r ${workflow.runName} \\\n      -j ${workflow.sessionId} \\\n      ${arg_open}\n\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    arg_open = open ? \"-o\" : \"\"\n\n    \"\"\"   \n    main.py \\\n      -a ${analysis} \\\n      -f ${files_to_upload} \\\n      -w ${wf_name} \\\n      -s ${wf_short_name} \\\n      -v ${wf_version} \\\n      -r ${workflow.runName} \\\n      -j ${workflow.sessionId} \\\n      ${arg_open}\n\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "analysis",
            "files_to_upload",
            "wf_name",
            "wf_short_name",
            "wf_version",
            "open"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__open-access-variant-filtering",
        "directive": [
            "container \"${params.container ?: container[params.container_registry ?: default_container_registry]}:${params.container_version ?: version}\"",
            "publishDir \"${params.publish_dir}/${task.process.replaceAll(':', '_')}\", mode: \"copy\", enabled: params.publish_dir",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "songPublish": {
        "name_process": "songPublish",
        "string_process": "\nprocess songPublish {\n    pod = [secret: workflow.runName + \"-secret\", mountPath: \"/tmp/rdpc_secret\"]\n    \n    cpus params.cpus\n    memory \"${params.mem} GB\"\n \n    container \"overture/song-client:${params.container_version}\"\n\n    tag \"${analysis_id}\"\n    \n    input:\n        val study_id\n        val analysis_id\n\n    output:\n        val analysis_id, emit: analysis_id\n\n    script:\n        accessToken = params.api_token ? params.api_token : \"`cat /tmp/rdpc_secret/secret`\"\n        \"\"\"\n        export CLIENT_SERVER_URL=${params.song_url}\n        export CLIENT_STUDY_ID=${study_id}\n        export CLIENT_ACCESS_TOKEN=${accessToken}\n\n        sing publish -a  ${analysis_id}\n        \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "        accessToken = params.api_token ? params.api_token : \"`cat /tmp/rdpc_secret/secret`\"\n        \"\"\"\n        export CLIENT_SERVER_URL=${params.song_url}\n        export CLIENT_STUDY_ID=${study_id}\n        export CLIENT_ACCESS_TOKEN=${accessToken}\n\n        sing publish -a  ${analysis_id}\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Nursing"
        ],
        "tools_url": [
            "https://bio.tools/Nursing"
        ],
        "tools_dico": [
            {
                "name": "Nursing",
                "uri": "https://bio.tools/Nursing",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Medical informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Critical care medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3376",
                            "term": "Medicines research and development"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Biomedical informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Healthcare informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Health informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Health and disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Clinical informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Acute medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Emergency medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Intensive care medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3376",
                            "term": "Drug discovery and development"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The use and abuse of credentials.\n\nA Guide to Nursing Credentials and Degrees.\n\nComplete List of Common Nursing Certifications.\n\nFrom LPN to MSN, the jumble of letters following a nurse's name can be confusing. Learn what these nursing credentials mean and how they should be listed.\n\nView 183 commonly recognized nursing certifications along with links to their certifying organizations.\n\nThe confusing nature of nursing credentials has led to widespread use of the term \u201calphabet soup.\u201d The letters that follow a nurse\u2019s name can be perplexing to professionals in the medical field, and especially to patients and families. To solve this problem, nursing credentials need to be displayed properly.\n\nNever fear. Nurse.org has compiled an alphabetical list of 183 different nursing certifications along with the appropriate acronyms and links to their certifying organizations",
                "homepage": "https://online.alvernia.edu/program-resources/nursing-credentials/"
            }
        ],
        "inputs": [
            "study_id",
            "analysis_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__open-access-variant-filtering",
        "directive": [
            "pod = [secret: workflow.runName + \"-secret\", mountPath: \"/tmp/rdpc_secret\"]",
            "cpus params.cpus",
            "memory \"${params.mem} GB\"",
            "container \"overture/song-client:${params.container_version}\"",
            "tag \"${analysis_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "variantFilter": {
        "name_process": "variantFilter",
        "string_process": "\nprocess variantFilter {\n  container \"${params.container ?: container[params.container_registry ?: default_container_registry]}:${params.container_version ?: version}\"\n  publishDir \"${params.publish_dir}/${task.process.replaceAll(':', '_')}\", mode: \"copy\", enabled: params.publish_dir\n\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:                                 \n    path input_file\n    path input_file_idx\n    path regions_file\n    val apply_filters\n    val include\n    val exclude\n    val output_type\n\n  output:                                  \n    path \"*.filtered.vcf.gz\", emit: filtered_vcf\n    path \"*.filtered.vcf.gz.tbi\", emit: filtered_vcf_tbi\n\n  script:\n                                                  \n    arg_regions_file = regions_file.name == 'NO_FILE_regions' ? \"\" : \" --regions-file ${regions_file}\"\n    arg_apply_filters = apply_filters == '' ? \"\" : \" --apply-filters '${apply_filters}'\"\n    arg_include = include == '' ? \"\" : \" --include '${include}'\"\n    arg_exclude = exclude == '' ? \"\" : \" --exclude '${exclude}'\"\n    arg_output_type = output_type == '' ? \"\" : \" --output-type ${output_type}\"\n\n    \"\"\"\n    main.py \\\n      -v ${input_file} \\\n      ${arg_output_type} \\\n      ${arg_regions_file} \\\n      ${arg_apply_filters} \\\n      ${arg_include} \\\n      ${arg_exclude} \n\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    arg_regions_file = regions_file.name == 'NO_FILE_regions' ? \"\" : \" --regions-file ${regions_file}\"\n    arg_apply_filters = apply_filters == '' ? \"\" : \" --apply-filters '${apply_filters}'\"\n    arg_include = include == '' ? \"\" : \" --include '${include}'\"\n    arg_exclude = exclude == '' ? \"\" : \" --exclude '${exclude}'\"\n    arg_output_type = output_type == '' ? \"\" : \" --output-type ${output_type}\"\n\n    \"\"\"\n    main.py \\\n      -v ${input_file} \\\n      ${arg_output_type} \\\n      ${arg_regions_file} \\\n      ${arg_apply_filters} \\\n      ${arg_include} \\\n      ${arg_exclude} \n\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_file",
            "input_file_idx",
            "regions_file",
            "apply_filters",
            "include",
            "exclude",
            "output_type"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__open-access-variant-filtering",
        "directive": [
            "container \"${params.container ?: container[params.container_registry ?: default_container_registry]}:${params.container_version ?: version}\"",
            "publishDir \"${params.publish_dir}/${task.process.replaceAll(':', '_')}\", mode: \"copy\", enabled: params.publish_dir",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "cleanupWorkdir": {
        "name_process": "cleanupWorkdir",
        "string_process": "\nprocess cleanupWorkdir {\n  container \"${params.container ?: container[params.container_registry ?: default_container_registry]}:${params.container_version ?: version}\"\n  publishDir \"${params.publish_dir}/${task.process.replaceAll(':', '_')}\", mode: \"copy\", enabled: params.publish_dir\n\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    path files_to_delete                                                                                       \n    val virtual_dep_flag                                                                                               \n\n  output:\n    stdout\n\n  script:\n    \"\"\"\n    set -euxo pipefail\n\n    IFS=\" \"\n    read -a files <<< \"${files_to_delete}\"\n    for f in \"\\${files[@]}\"\n    do\n        dir_to_rm=\\$(dirname \\$(readlink -f \\$f))\n\n        if [[ \\$dir_to_rm != ${workflow.workDir}/* ]]; then  # skip dir not under workdir, like from input file dir\n            echo \"Not delete: \\$dir_to_rm/*\\\"\n            continue\n        fi\n\n        rm -fr \\$dir_to_rm/*  # delete all files and subdirs but not hidden ones\n        echo \"Deleted: \\$dir_to_rm/*\"\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    set -euxo pipefail\n\n    IFS=\" \"\n    read -a files <<< \"${files_to_delete}\"\n    for f in \"\\${files[@]}\"\n    do\n        dir_to_rm=\\$(dirname \\$(readlink -f \\$f))\n\n        if [[ \\$dir_to_rm != ${workflow.workDir}/* ]]; then  # skip dir not under workdir, like from input file dir\n            echo \"Not delete: \\$dir_to_rm/*\\\"\n            continue\n        fi\n\n        rm -fr \\$dir_to_rm/*  # delete all files and subdirs but not hidden ones\n        echo \"Deleted: \\$dir_to_rm/*\"\n    done\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "files_to_delete",
            "virtual_dep_flag"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__open-access-variant-filtering",
        "directive": [
            "container \"${params.container ?: container[params.container_registry ?: default_container_registry]}:${params.container_version ?: version}\"",
            "publishDir \"${params.publish_dir}/${task.process.replaceAll(':', '_')}\", mode: \"copy\", enabled: params.publish_dir",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    },
    "songManifest": {
        "name_process": "songManifest",
        "string_process": "\nprocess songManifest {\n    pod = [secret: workflow.runName + \"-secret\", mountPath: \"/tmp/rdpc_secret\"]\n    \n    cpus params.cpus\n    memory \"${params.mem} GB\"\n \n    container \"overture/song-client:${params.container_version}\"\n\n    tag \"${analysis_id}\"\n\n    input:\n        val study_id\n        val analysis_id\n        path upload\n    \n    output:\n        path \"out/manifest.txt\"\n\n    script:\n        accessToken = params.api_token ? params.api_token : \"`cat /tmp/rdpc_secret/secret`\"\n        \"\"\"\n        export CLIENT_SERVER_URL=${params.song_url}\n        export CLIENT_STUDY_ID=${study_id}\n        export CLIENT_ACCESS_TOKEN=${accessToken}\n\n        sing manifest -a ${analysis_id} -d . -f ./out/manifest.txt\n        \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "        accessToken = params.api_token ? params.api_token : \"`cat /tmp/rdpc_secret/secret`\"\n        \"\"\"\n        export CLIENT_SERVER_URL=${params.song_url}\n        export CLIENT_STUDY_ID=${study_id}\n        export CLIENT_ACCESS_TOKEN=${accessToken}\n\n        sing manifest -a ${analysis_id} -d . -f ./out/manifest.txt\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Nursing"
        ],
        "tools_url": [
            "https://bio.tools/Nursing"
        ],
        "tools_dico": [
            {
                "name": "Nursing",
                "uri": "https://bio.tools/Nursing",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Medical informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Critical care medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3376",
                            "term": "Medicines research and development"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Biomedical informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Healthcare informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Health informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Health and disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Clinical informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Acute medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Emergency medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Intensive care medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3376",
                            "term": "Drug discovery and development"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The use and abuse of credentials.\n\nA Guide to Nursing Credentials and Degrees.\n\nComplete List of Common Nursing Certifications.\n\nFrom LPN to MSN, the jumble of letters following a nurse's name can be confusing. Learn what these nursing credentials mean and how they should be listed.\n\nView 183 commonly recognized nursing certifications along with links to their certifying organizations.\n\nThe confusing nature of nursing credentials has led to widespread use of the term \u201calphabet soup.\u201d The letters that follow a nurse\u2019s name can be perplexing to professionals in the medical field, and especially to patients and families. To solve this problem, nursing credentials need to be displayed properly.\n\nNever fear. Nurse.org has compiled an alphabetical list of 183 different nursing certifications along with the appropriate acronyms and links to their certifying organizations",
                "homepage": "https://online.alvernia.edu/program-resources/nursing-credentials/"
            }
        ],
        "inputs": [
            "study_id",
            "analysis_id",
            "upload"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__open-access-variant-filtering",
        "directive": [
            "pod = [secret: workflow.runName + \"-secret\", mountPath: \"/tmp/rdpc_secret\"]",
            "cpus params.cpus",
            "memory \"${params.mem} GB\"",
            "container \"overture/song-client:${params.container_version}\"",
            "tag \"${analysis_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "songGetAnalysis": {
        "name_process": "songGetAnalysis",
        "string_process": "\nprocess songGetAnalysis {\n    pod = [secret: workflow.runName + \"-secret\", mountPath: \"/tmp/rdpc_secret\"]\n    \n    cpus params.cpus\n    memory \"${params.mem} GB\"\n \n    container \"overture/song-client:${params.container_version}\"\n\n    tag \"${analysis_id}\"\n\n    input:\n        val study_id\n        val analysis_id\n\n    output:\n        path \"*.analysis.json\", emit: json\n\n\n    script:\n        accessToken = params.api_token ? params.api_token : \"`cat /tmp/rdpc_secret/secret`\"\n        \"\"\"\n        export CLIENT_SERVER_URL=${params.song_url}\n        export CLIENT_STUDY_ID=${study_id}\n        export CLIENT_ACCESS_TOKEN=${accessToken}\n\n        sing search -a ${analysis_id} > ${analysis_id}.analysis.json\n        \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "        accessToken = params.api_token ? params.api_token : \"`cat /tmp/rdpc_secret/secret`\"\n        \"\"\"\n        export CLIENT_SERVER_URL=${params.song_url}\n        export CLIENT_STUDY_ID=${study_id}\n        export CLIENT_ACCESS_TOKEN=${accessToken}\n\n        sing search -a ${analysis_id} > ${analysis_id}.analysis.json\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Nursing"
        ],
        "tools_url": [
            "https://bio.tools/Nursing"
        ],
        "tools_dico": [
            {
                "name": "Nursing",
                "uri": "https://bio.tools/Nursing",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Medical informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Critical care medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3376",
                            "term": "Medicines research and development"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Biomedical informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Healthcare informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Health informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Health and disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3063",
                            "term": "Clinical informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Acute medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Emergency medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3403",
                            "term": "Intensive care medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3376",
                            "term": "Drug discovery and development"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The use and abuse of credentials.\n\nA Guide to Nursing Credentials and Degrees.\n\nComplete List of Common Nursing Certifications.\n\nFrom LPN to MSN, the jumble of letters following a nurse's name can be confusing. Learn what these nursing credentials mean and how they should be listed.\n\nView 183 commonly recognized nursing certifications along with links to their certifying organizations.\n\nThe confusing nature of nursing credentials has led to widespread use of the term \u201calphabet soup.\u201d The letters that follow a nurse\u2019s name can be perplexing to professionals in the medical field, and especially to patients and families. To solve this problem, nursing credentials need to be displayed properly.\n\nNever fear. Nurse.org has compiled an alphabetical list of 183 different nursing certifications along with the appropriate acronyms and links to their certifying organizations",
                "homepage": "https://online.alvernia.edu/program-resources/nursing-credentials/"
            }
        ],
        "inputs": [
            "study_id",
            "analysis_id"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__open-access-variant-filtering",
        "directive": [
            "pod = [secret: workflow.runName + \"-secret\", mountPath: \"/tmp/rdpc_secret\"]",
            "cpus params.cpus",
            "memory \"${params.mem} GB\"",
            "container \"overture/song-client:${params.container_version}\"",
            "tag \"${analysis_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "metadataParser": {
        "name_process": "metadataParser",
        "string_process": "\nprocess metadataParser {\n  container \"quay.io/icgc-argo/metadata-parser:metadata-parser.${params.container_version ?: version}\"\n  cpus params.cpus\n  memory \"${params.mem} GB\"\n\n  input:\n    path metadata_analysis\n\n  output:\n    env STUDY_ID, emit: study_id\n    env DONOR_ID, emit: donor_id\n    env EXP, emit: experimental_strategy\n    env PAIRED, emit: paired\n    env ANALYSIS_TOOLS, emit: analysis_tools\n\n  script:\n    \"\"\"\n    set -euxo pipefail\n    STUDY_ID=`cat ${metadata_analysis} | jq -er '.studyId' | tr -d '\\\\n'`\n    DONOR_ID=`cat ${metadata_analysis} | jq -er '.samples[0].donor.donorId' | tr -d '\\\\n'`\n    EXP=`cat ${metadata_analysis} | jq -er '.experiment | .experimental_strategy?  // .library_strategy' | tr -d '\\\\n'`\n    VARIABLE1=`cat ${metadata_analysis} | jq -r 'if ([.read_groups[]?] | length) >0 then [.read_groups[] | .is_paired_end] | all | tostring else null end' | tr -d '\\\\n'`\n    PAIRED=\\${VARIABLE1:-'null'}\n    VARIABLE2=`cat ${metadata_analysis} | jq -r '[.files[] | .info? | .analysis_tools[]?] | unique | join(\",\")' | tr -d '\\\\n'`\n    ANALYSIS_TOOLS=\\${VARIABLE2:-'null'}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    set -euxo pipefail\n    STUDY_ID=`cat ${metadata_analysis} | jq -er '.studyId' | tr -d '\\\\n'`\n    DONOR_ID=`cat ${metadata_analysis} | jq -er '.samples[0].donor.donorId' | tr -d '\\\\n'`\n    EXP=`cat ${metadata_analysis} | jq -er '.experiment | .experimental_strategy?  // .library_strategy' | tr -d '\\\\n'`\n    VARIABLE1=`cat ${metadata_analysis} | jq -r 'if ([.read_groups[]?] | length) >0 then [.read_groups[] | .is_paired_end] | all | tostring else null end' | tr -d '\\\\n'`\n    PAIRED=\\${VARIABLE1:-'null'}\n    VARIABLE2=`cat ${metadata_analysis} | jq -r '[.files[] | .info? | .analysis_tools[]?] | unique | join(\",\")' | tr -d '\\\\n'`\n    ANALYSIS_TOOLS=\\${VARIABLE2:-'null'}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "GALLO",
            "UniqueProt"
        ],
        "tools_url": [
            "https://bio.tools/gallo",
            "https://bio.tools/uniqueprot"
        ],
        "tools_dico": [
            {
                "name": "GALLO",
                "uri": "https://bio.tools/gallo",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3473",
                            "term": "Data mining"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Zoology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Metazoa"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animal biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animal"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3500",
                            "term": "Animals"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Linkage mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Functional mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "An R package for genomic annotation and integration of multiple data sources in livestock for positional candidate loci.\n\nGALLO: Genomic Annotation in Livestock for positional candidate LOci",
                "homepage": "https://github.com/pablobio/GALLO"
            },
            {
                "name": "UniqueProt",
                "uri": "https://bio.tools/uniqueprot",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0157",
                            "term": "Sequence composition, complexity and repeats"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3510",
                            "term": "Protein sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0366",
                                    "term": "Protein sequence cleavage"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0290",
                                    "term": "Sequence redundancy removal"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2479",
                                    "term": "Protein sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2479",
                                    "term": "Sequence analysis (protein)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "UniqueProt creates representative protein sequence sets by eliminating sequence redundancy based on sequence similiarity.  This tool needs to be downloaded and run locally on your own machine.",
                "homepage": "https://rostlab.org/owiki/index.php/Uniqueprot"
            }
        ],
        "inputs": [
            "metadata_analysis"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "icgc-argo-workflows__open-access-variant-filtering",
        "directive": [
            "container \"quay.io/icgc-argo/metadata-parser:metadata-parser.${params.container_version ?: version}\"",
            "cpus params.cpus",
            "memory \"${params.mem} GB\""
        ],
        "when": "",
        "stub": ""
    }
}
{
    "cutadapt": {
        "name_process": "cutadapt",
        "string_process": "\nprocess cutadapt {\n\n  publishDir \"${params.outdir}/cutadapt\"\n\n  input:\n  tuple(val(sampleID),path(fastqs)) from sra_ch\n\n  output:\n  tuple(val(sampleID),path(\"*cutadapt*fastq\")) into trimmed_ch\n\n  script:\n  \"\"\"\n  cutadapt \\\n  -a AGATCGGAAGAGC \\\n  -A AGATCGGAAGAGC \\\n  -o ${sampleID}_cutadapt_1.fastq \\\n  -p ${sampleID}_cutadapt_2.fastq \\\n  ${fastqs}\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  cutadapt \\\n  -a AGATCGGAAGAGC \\\n  -A AGATCGGAAGAGC \\\n  -o ${sampleID}_cutadapt_1.fastq \\\n  -p ${sampleID}_cutadapt_2.fastq \\\n  ${fastqs}\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "sra_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmed_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ggrimes__crispy-chainsaw",
        "directive": [
            "publishDir \"${params.outdir}/cutadapt\""
        ],
        "when": "",
        "stub": ""
    },
    "velveth": {
        "name_process": "velveth",
        "string_process": "\nprocess velveth {\n\n  publishDir \"${params.outdir}/velveth\"\n\n  tag \"velvet ${sampleID} ${kmer}\"\n\n  input:\n  tuple(val(sampleID),path(fastq)) from trimmed_ch\n  each(kmer) from kmers\n\n  output:\n  tuple(kmer,path(\"*contigs.fa\")) into velveth_out_ch\n\n  script:\n  \"\"\"\n  velveth paired_${kmer} ${kmer} -shortPaired -fastq -separate  ${fastq}\n  velvetg paired_${kmer}\n  cp paired_${kmer}/contigs.fa ${sampleID}_${kmer}_contigs.fa\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  velveth paired_${kmer} ${kmer} -shortPaired -fastq -separate  ${fastq}\n  velvetg paired_${kmer}\n  cp paired_${kmer}/contigs.fa ${sampleID}_${kmer}_contigs.fa\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trimmed_ch",
            "kmers"
        ],
        "nb_inputs": 2,
        "outputs": [
            "velveth_out_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ggrimes__crispy-chainsaw",
        "directive": [
            "publishDir \"${params.outdir}/velveth\"",
            "tag \"velvet ${sampleID} ${kmer}\""
        ],
        "when": "",
        "stub": ""
    },
    "stats": {
        "name_process": "stats",
        "string_process": "\nprocess stats {\n\n publishDir \"${params.outdir}/stats\"\n\n input:\n tuple(kmer,path(contigs)) from velveth_out_ch\n\n output:\n path(\"${kmer}_stats.txt\") into stats_ch\n\n script:\n \"\"\"\n stats.sh ${contigs} > ${kmer}_stats.txt\n \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": " \"\"\"\n stats.sh ${contigs} > ${kmer}_stats.txt\n \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "velveth_out_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "stats_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "ggrimes__crispy-chainsaw",
        "directive": [
            "publishDir \"${params.outdir}/stats\""
        ],
        "when": "",
        "stub": ""
    },
    "combined_stats": {
        "name_process": "combined_stats",
        "string_process": "\nprocess combined_stats {\n\n publishDir \"${params.outdir}/stats\"\n\n input:\n path(stats) from stats_ch.collect()\n\n output:\n path(\"combined_stats.txt\") into cout\n\n script:\n \"\"\"\n grep -H 'contig N/L50' ${stats}|sort > combined_stats.txt\n \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": " \"\"\"\n grep -H 'contig N/L50' ${stats}|sort > combined_stats.txt\n \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "stats_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cout"
        ],
        "nb_outputs": 1,
        "name_workflow": "ggrimes__crispy-chainsaw",
        "directive": [
            "publishDir \"${params.outdir}/stats\""
        ],
        "when": "",
        "stub": ""
    }
}
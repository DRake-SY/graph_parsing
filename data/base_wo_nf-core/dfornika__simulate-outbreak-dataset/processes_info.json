{
    "simulate_variants": {
        "name_process": "simulate_variants",
        "string_process": "process simulate_variants {\n\n  tag { prefix + ' / ' + num_snps }\n\n  publishDir \"${params.outdir}/${prefix}\", pattern: \"${prefix}*.{fa,vcf,tsv,csv}\", mode: 'copy'\n\n  input:\n    path(seq)\n\n  output:\n    path(\"*.fa\"), emit: seq\n    path(\"*.fasta\"), emit: selected\n    tuple path(\"${prefix}.vcf\"), path(\"${prefix}.variants.tsv\"), emit: variants\n    path(\"${prefix}_mutation_info.csv\"), emit: mutation_info\n\n  script:\n  def generator = { String alphabet, int n ->\n    new Random().with {\n      (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()\n    }\n  }\n  prefix = generator((('A'..'F')+('0'..'9')).join(), 4)\n  num_snps = Math.abs(new Random().nextInt() % params.max_snps_per_iteration.toInteger() + params.min_snps_per_iteration.toInteger())\n  \"\"\"\n  cp \\$(ls -1 *.fa | sort -R | head -n 1) selected.fasta\n  echo 'parent_id,num_snps' > ${prefix}_mutation_info.csv\n  echo \\$(head -n 1 selected.fasta | tr -d '>' | cut -d ' ' -f 1),${num_snps} >> ${prefix}_mutation_info.csv\n  simuG -refseq selected.fasta -snp_count ${num_snps} -prefix ${prefix}\n  mv ${prefix}.simseq.genome.fa ${prefix}.fa\n  sed -i '/^>/!s/.\\\\{70\\\\}/&\\\\n/g' ${prefix}.fa\n  sed -i 's/^>.*/>${prefix}/g' ${prefix}.fa\n  mv ${prefix}.refseq2simseq.map.txt ${prefix}.variants.tsv\n  mv ${prefix}.refseq2simseq.SNP.vcf ${prefix}.vcf\n  \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "  def generator = { String alphabet, int n ->\n    new Random().with {\n      (1..n).collect { alphabet[ nextInt( alphabet.length() ) ] }.join()\n    }\n  }\n  prefix = generator((('A'..'F')+('0'..'9')).join(), 4)\n  num_snps = Math.abs(new Random().nextInt() % params.max_snps_per_iteration.toInteger() + params.min_snps_per_iteration.toInteger())\n  \"\"\"\n  cp \\$(ls -1 *.fa | sort -R | head -n 1) selected.fasta\n  echo 'parent_id,num_snps' > ${prefix}_mutation_info.csv\n  echo \\$(head -n 1 selected.fasta | tr -d '>' | cut -d ' ' -f 1),${num_snps} >> ${prefix}_mutation_info.csv\n  simuG -refseq selected.fasta -snp_count ${num_snps} -prefix ${prefix}\n  mv ${prefix}.simseq.genome.fa ${prefix}.fa\n  sed -i '/^>/!s/.\\\\{70\\\\}/&\\\\n/g' ${prefix}.fa\n  sed -i 's/^>.*/>${prefix}/g' ${prefix}.fa\n  mv ${prefix}.refseq2simseq.map.txt ${prefix}.variants.tsv\n  mv ${prefix}.refseq2simseq.SNP.vcf ${prefix}.vcf\n  \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "NEWT",
            "simuG"
        ],
        "tools_url": [
            "https://bio.tools/newt",
            "https://bio.tools/simuG"
        ],
        "tools_dico": [
            {
                "name": "NEWT",
                "uri": "https://bio.tools/newt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Taxonomy database maintained by the UniProt group.",
                "homepage": "http://www.ebi.ac.uk/newt/display"
            },
            {
                "name": "simuG",
                "uri": "https://bio.tools/simuG",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant calling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Indel discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0452",
                                    "term": "Sequence alignment analysis (indel detection)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3227",
                                    "term": "Variant mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for simulating the full spectrum of genomic variants (SNPs, INDELs, CNVs, inversions, and translocations). In addition, simuG enables a rich array of fine-tuned controls, such as simulating SNPs in different coding partitions (e.g. coding sites, noncoding sites, 4-fold degenerate sites, or 2-fold degenerate sites); simulating CNVs with different formation mechanisms (e.g. segmental deletions, dispersed duplications, and tandem duplications); and simulating inversions and translocations with specific types of breakpoints.",
                "homepage": "https://github.com/yjx1217/simuG"
            }
        ],
        "inputs": [
            "seq"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__simulate-outbreak-dataset",
        "directive": [
            "tag { prefix + ' / ' + num_snps }",
            "publishDir \"${params.outdir}/${prefix}\", pattern: \"${prefix}*.{fa,vcf,tsv,csv}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "simulate_reads": {
        "name_process": "simulate_reads",
        "string_process": "\nprocess simulate_reads {\n\n    tag { seq_id }\n\n    publishDir \"${params.outdir}/${seq_id}\", pattern: \"${seq_id}_R{1,2}.fastq.gz\", mode: 'copy'\n\n    input:\n    path(seq)\n\n    output:\n    tuple path(\"${seq_id}_R1.fastq.gz\"), path(\"${seq_id}_R2.fastq.gz\")\n\n    script:\n    seq_id = seq.toRealPath().toFile().text.split(\"\\\\n\")[0].split(\" \")[0].replace(\">\", \"\")\n    mean_fragment_length = 300\n    stdev_fragment_length = 50\n    read_length = 250\n    fold_coverage = 5\n    \"\"\"\n    echo \"${seq_id}\" > seq_id.txt\n    art_illumina \\\n      --paired \\\n      --in ${seq} \\\n      --fcov ${fold_coverage} \\\n      --len ${read_length} \\\n      --mflen ${mean_fragment_length} \\\n      --sdev ${stdev_fragment_length} \\\n      --out ${seq_id}_R\n    mv ${seq_id}_R1.fq ${seq_id}_R1.fastq\n    mv ${seq_id}_R2.fq ${seq_id}_R2.fastq\n    gzip ${seq_id}_R1.fastq\n    gzip ${seq_id}_R2.fastq\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    seq_id = seq.toRealPath().toFile().text.split(\"\\\\n\")[0].split(\" \")[0].replace(\">\", \"\")\n    mean_fragment_length = 300\n    stdev_fragment_length = 50\n    read_length = 250\n    fold_coverage = 5\n    \"\"\"\n    echo \"${seq_id}\" > seq_id.txt\n    art_illumina \\\n      --paired \\\n      --in ${seq} \\\n      --fcov ${fold_coverage} \\\n      --len ${read_length} \\\n      --mflen ${mean_fragment_length} \\\n      --sdev ${stdev_fragment_length} \\\n      --out ${seq_id}_R\n    mv ${seq_id}_R1.fq ${seq_id}_R1.fastq\n    mv ${seq_id}_R2.fq ${seq_id}_R2.fastq\n    gzip ${seq_id}_R1.fastq\n    gzip ${seq_id}_R2.fastq\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "seq"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__simulate-outbreak-dataset",
        "directive": [
            "tag { seq_id }",
            "publishDir \"${params.outdir}/${seq_id}\", pattern: \"${seq_id}_R{1,2}.fastq.gz\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
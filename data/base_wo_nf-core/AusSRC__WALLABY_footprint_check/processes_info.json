{
    "pre_run_dependency_check": {
        "name_process": "pre_run_dependency_check",
        "string_process": "\nprocess pre_run_dependency_check {\n    input: \n        val output_directory\n\n    output:\n        stdout emit: stdout\n\n    script:\n        \"\"\"\n        #!/bin/bash\n        # Ensure sofia output directory exists\n        [ ! -d ${params.WORKDIR}/${params.RUN_NAME}/${params.OUTPUT_DIR} ] && \\\n            { echo \"Source finding products output directory does not exist.\"; exit 1; }\n        exit 0\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        #!/bin/bash\n        # Ensure sofia output directory exists\n        [ ! -d ${params.WORKDIR}/${params.RUN_NAME}/${params.OUTPUT_DIR} ] && \\\n            { echo \"Source finding products output directory does not exist.\"; exit 1; }\n        exit 0\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "output_directory"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_footprint_check",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "s2p_setup": {
        "name_process": "s2p_setup",
        "string_process": "\nprocess s2p_setup {\n    container = params.S2P_IMAGE\n    containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\"\n\n    input:\n        val image_cube_file\n        val sofia_parameter_file_template\n        val check\n\n    output:\n        stdout emit: stdout\n\n    script:\n        \"\"\"\n        python3 -u /app/s2p_setup.py \\\n            ${params.S2P_TEMPLATE} \\\n            $image_cube_file \\\n            $sofia_parameter_file_template \\\n            ${params.RUN_NAME} \\\n            ${params.WORKDIR}/${params.RUN_NAME} \\\n            ${params.WORKDIR}/${params.RUN_NAME}/${params.OUTPUT_DIR}\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        python3 -u /app/s2p_setup.py \\\n            ${params.S2P_TEMPLATE} \\\n            $image_cube_file \\\n            $sofia_parameter_file_template \\\n            ${params.RUN_NAME} \\\n            ${params.WORKDIR}/${params.RUN_NAME} \\\n            ${params.WORKDIR}/${params.RUN_NAME}/${params.OUTPUT_DIR}\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "image_cube_file",
            "sofia_parameter_file_template",
            "check"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_footprint_check",
        "directive": [
            "container = params.S2P_IMAGE",
            "containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_parameter_files": {
        "name_process": "get_parameter_files",
        "string_process": "\nprocess get_parameter_files {\n    executor = 'local'\n\n    input:\n        val s2p_setup\n\n    output:\n        val parameter_files, emit: parameter_files\n\n    exec:\n        parameter_files = file(\"${params.WORKDIR}/${params.RUN_NAME}/sofia_*.par\")\n}",
        "nb_lignes_process": 11,
        "string_script": "        parameter_files = file(\"${params.WORKDIR}/${params.RUN_NAME}/sofia_*.par\")",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "s2p_setup"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_footprint_check",
        "directive": [
            "executor = 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "sofia": {
        "name_process": "sofia",
        "string_process": "\nprocess sofia {\n    container = params.SOFIA_IMAGE\n    containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\"\n    \n    input:\n        file parameter_file\n\n    output:\n        stdout emit: stdout\n\n    script:\n        \"\"\"\n        #!/bin/bash\n        \n        OMP_NUM_THREADS=8 sofia $parameter_file\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        #!/bin/bash\n        \n        OMP_NUM_THREADS=8 sofia $parameter_file\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "parameter_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_footprint_check",
        "directive": [
            "container = params.SOFIA_IMAGE",
            "containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_output_directory": {
        "name_process": "get_output_directory",
        "string_process": "\nprocess get_output_directory {\n    executor = 'local'\n\n    input:\n        val sofia\n\n    output:\n        val output_directory, emit: output_directory\n\n    exec:\n        output_directory = \"${params.WORKDIR}/${params.RUN_NAME}/${params.OUTPUT_DIR}\"\n}",
        "nb_lignes_process": 11,
        "string_script": "        output_directory = \"${params.WORKDIR}/${params.RUN_NAME}/${params.OUTPUT_DIR}\"",
        "nb_lignes_script": 0,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sofia"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_footprint_check",
        "directive": [
            "executor = 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "mosaick": {
        "name_process": "mosaick",
        "string_process": "\nprocess mosaick {\n    container = params.WALLMERGE_IMAGE\n    containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\"\n\n    input:\n        val output_directory\n        val check\n\n    output:\n        stdout emit: stdout\n\n    script:\n        \"\"\"\n        python3 -u /app/run_wallmerge.py \\\n            $output_directory \\\n            ${params.WORKDIR}/${params.RUN_NAME}/${params.WALLMERGE_OUTPUT}\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        python3 -u /app/run_wallmerge.py \\\n            $output_directory \\\n            ${params.WORKDIR}/${params.RUN_NAME}/${params.WALLMERGE_OUTPUT}\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "output_directory",
            "check"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AusSRC__WALLABY_footprint_check",
        "directive": [
            "container = params.WALLMERGE_IMAGE",
            "containerOptions = \"--bind ${params.SCRATCH_ROOT}:${params.SCRATCH_ROOT}\""
        ],
        "when": "",
        "stub": ""
    }
}
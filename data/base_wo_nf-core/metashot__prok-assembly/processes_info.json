{
    "spades": {
        "name_process": "spades",
        "string_process": "\nprocess spades {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/spades\" , mode: 'copy' ,\n        enabled: params.save_spades_output ,\n        pattern: \"${id}/*\"\n\n    publishDir \"${params.outdir}/scaffolds\" , mode: 'copy' ,\n        pattern: \"${id}.fa\"\n\n    input:\n    tuple val(id), path(reads)\n\n    output:\n    tuple val(id), path(\"${id}.fa\"), emit: scaffolds\n    path \"${id}/*\"\n\n    script:\n    task_memory_GB = task.memory.toGiga()\n    param_spades_k = params.spades_k == 'default' ? \"\" :  \"-k ${params.spades_k}\"\n    input = params.single_end ? \"-s \\\"$reads\\\"\" : \"-1 \\\"${reads[0]}\\\" -2 \\\"${reads[1]}\\\"\"\n    \"\"\"\n    spades.py \\\n        $input \\\n        --isolate \\\n        ${param_spades_k} \\\n        --threads ${task.cpus} \\\n        --memory ${task_memory_GB} \\\n        -o ${id}\n    cp ${id}/scaffolds.fasta ${id}.fa\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    task_memory_GB = task.memory.toGiga()\n    param_spades_k = params.spades_k == 'default' ? \"\" :  \"-k ${params.spades_k}\"\n    input = params.single_end ? \"-s \\\"$reads\\\"\" : \"-1 \\\"${reads[0]}\\\" -2 \\\"${reads[1]}\\\"\"\n    \"\"\"\n    spades.py \\\n        $input \\\n        --isolate \\\n        ${param_spades_k} \\\n        --threads ${task.cpus} \\\n        --memory ${task_memory_GB} \\\n        -o ${id}\n    cp ${id}/scaffolds.fasta ${id}.fa\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "wossinput"
        ],
        "tools_url": [
            "https://bio.tools/wossinput"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            }
        ],
        "inputs": [
            "id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-assembly",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/spades\" , mode: 'copy' , enabled: params.save_spades_output , pattern: \"${id}/*\"",
            "publishDir \"${params.outdir}/scaffolds\" , mode: 'copy' , pattern: \"${id}.fa\""
        ],
        "when": "",
        "stub": ""
    },
    "plasmidspades": {
        "name_process": "plasmidspades",
        "string_process": "\nprocess plasmidspades {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/plasmidspades\" , mode: 'copy' ,\n        enabled: params.save_spades_output ,\n        pattern: \"${id}/*\"\n\n    publishDir \"${params.outdir}/scaffolds_plasmids\" , mode: 'copy' ,\n        pattern: \"${id}.fa\"\n\n    input:\n    tuple val(id), path(reads)\n\n    output:\n    tuple val(id), path(\"${id}.fa\"), emit: scaffolds\n    path \"${id}/*\"\n\n    script:\n    task_memory_GB = task.memory.toGiga()\n    param_spades_k = params.spades_k == 'default' ? \"\" :  \"-k ${params.spades_k}\"\n    input = params.single_end ? \"-s \\\"$reads\\\"\" : \"-1 \\\"${reads[0]}\\\" -2 \\\"${reads[1]}\\\"\"\n    \"\"\"\n    spades.py \\\n        $input \\\n        --plasmid \\\n        ${param_spades_k} \\\n        --threads ${task.cpus} \\\n        --memory ${task_memory_GB} \\\n        -o ${id}\n    cp ${id}/scaffolds.fasta ${id}.fa\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    task_memory_GB = task.memory.toGiga()\n    param_spades_k = params.spades_k == 'default' ? \"\" :  \"-k ${params.spades_k}\"\n    input = params.single_end ? \"-s \\\"$reads\\\"\" : \"-1 \\\"${reads[0]}\\\" -2 \\\"${reads[1]}\\\"\"\n    \"\"\"\n    spades.py \\\n        $input \\\n        --plasmid \\\n        ${param_spades_k} \\\n        --threads ${task.cpus} \\\n        --memory ${task_memory_GB} \\\n        -o ${id}\n    cp ${id}/scaffolds.fasta ${id}.fa\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "wossinput"
        ],
        "tools_url": [
            "https://bio.tools/wossinput"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            }
        ],
        "inputs": [
            "id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-assembly",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/plasmidspades\" , mode: 'copy' , enabled: params.save_spades_output , pattern: \"${id}/*\"",
            "publishDir \"${params.outdir}/scaffolds_plasmids\" , mode: 'copy' , pattern: \"${id}.fa\""
        ],
        "when": "",
        "stub": ""
    },
    "viralverify_db_download": {
        "name_process": "viralverify_db_download",
        "string_process": "\nprocess viralverify_db_download {\n\n    publishDir \"${params.outdir}/dbs\" , mode: 'copy'\n\n    output:\n    path 'nbc_hmms.hmm', emit: viralverify_db\n\n    script:\n    \"\"\"\n    VIRALVERIFY_DB_URL=\"https://ndownloader.figshare.com/files/17904323?private_link=f897d463b31a35ad7bf0\"\n    curl -L \\${VIRALVERIFY_DB_URL} --output nbc_hmms.hmm.gz && \\\n        gunzip -c nbc_hmms.hmm.gz > nbc_hmms.hmm\n    rm -rf nbc_hmms.hmm.gz\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    VIRALVERIFY_DB_URL=\"https://ndownloader.figshare.com/files/17904323?private_link=f897d463b31a35ad7bf0\"\n    curl -L \\${VIRALVERIFY_DB_URL} --output nbc_hmms.hmm.gz && \\\n        gunzip -c nbc_hmms.hmm.gz > nbc_hmms.hmm\n    rm -rf nbc_hmms.hmm.gz\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-assembly",
        "directive": [
            "publishDir \"${params.outdir}/dbs\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "viralverify": {
        "name_process": "viralverify",
        "string_process": "\nprocess viralverify {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/viralverify\" , mode: 'copy' ,\n        pattern: \"${id}/*\"\n\n    publishDir \"${params.outdir}\" , mode: 'copy' ,\n        saveAs: { filename ->\n            if (filename == \"${id}/Prediction_results_fasta/${id}_plasmid.fasta\") \"verified_plasmids/${id}.fa\"\n        }\n\n    input:\n    tuple val(id), path(scaffolds)\n    path(viralverify_db)\n\n    output:\n    path \"${id}/*\"\n    path \"${id}/Prediction_results_fasta/*\"\n\n    script:\n    \"\"\"\n    viralverify.py \\\n        -f ${scaffolds} \\\n        -o ${id} \\\n        --hmm ${viralverify_db} \\\n        -p \\\n        -t ${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    viralverify.py \\\n        -f ${scaffolds} \\\n        -o ${id} \\\n        --hmm ${viralverify_db} \\\n        -p \\\n        -t ${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "scaffolds",
            "viralverify_db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-assembly",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/viralverify\" , mode: 'copy' , pattern: \"${id}/*\"",
            "publishDir \"${params.outdir}\" , mode: 'copy' , saveAs: { filename -> if (filename == \"${id}/Prediction_results_fasta/${id}_plasmid.fasta\") \"verified_plasmids/${id}.fa\" }"
        ],
        "when": "",
        "stub": ""
    },
    "deinterleave": {
        "name_process": "deinterleave",
        "string_process": "\nprocess deinterleave {      \n    tag \"${id}\"\n\n    input:\n    tuple val(id), path(reads)\n\n    output:\n    tuple val(id), path(\"deint*.fastq.gz\"), emit: reads\n\n    script:\n    task_memory_GB = task.memory.toGiga()\n    \"\"\"\n    reformat.sh \\\n        -Xmx${task_memory_GB}g \\\n        in=$reads \\\n        out1=deint_1.fastq.gz \\\n        out2=deint_2.fastq.gz \\\n        t=1\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    task_memory_GB = task.memory.toGiga()\n    \"\"\"\n    reformat.sh \\\n        -Xmx${task_memory_GB}g \\\n        in=$reads \\\n        out1=deint_1.fastq.gz \\\n        out2=deint_2.fastq.gz \\\n        t=1\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-assembly",
        "directive": [
            "tag \"${id}\""
        ],
        "when": "",
        "stub": ""
    },
    "trim_adapters": {
        "name_process": "trim_adapters",
        "string_process": "\nprocess trim_adapters {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/qc/${id}\" , mode: 'copy',\n        pattern: \"stats_adapter.txt\"\n\n    input:\n    tuple val(id), path(reads)\n\n    output:\n    tuple val(id), path(\"adapt*.fastq.gz\"), emit: reads\n    path \"stats_adapter.txt\"\n\n    script:\n    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    output = params.single_end ? \"out=adapt.fastq.gz\" : \"out1=adapt_1.fastq.gz out2=adapt_2.fastq.gz\"\n    \"\"\"\n    bbduk.sh \\\n        -Xmx${task_memory_GB}g \\\n        $input \\\n        $output \\\n        ref=adapters \\\n        ktrim=r \\\n        k=23 \\\n        mink=11 \\\n        hdist=1 \\\n        tpe \\\n        tbo \\\n        interleaved=f \\\n        stats=stats_adapter.txt \\\n        threads=${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    output = params.single_end ? \"out=adapt.fastq.gz\" : \"out1=adapt_1.fastq.gz out2=adapt_2.fastq.gz\"\n    \"\"\"\n    bbduk.sh \\\n        -Xmx${task_memory_GB}g \\\n        $input \\\n        $output \\\n        ref=adapters \\\n        ktrim=r \\\n        k=23 \\\n        mink=11 \\\n        hdist=1 \\\n        tpe \\\n        tbo \\\n        interleaved=f \\\n        stats=stats_adapter.txt \\\n        threads=${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "wossinput",
            "wossoutput",
            "TPES",
            "NetBox"
        ],
        "tools_url": [
            "https://bio.tools/wossinput",
            "https://bio.tools/wossoutput",
            "https://bio.tools/TPES",
            "https://bio.tools/netbox"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "wossoutput",
                "uri": "https://bio.tools/wossoutput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM output data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossoutput.html"
            },
            {
                "name": "TPES",
                "uri": "https://bio.tools/TPES",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tumor Purity Estimation from SNVs.",
                "homepage": "https://bitbucket.org/l0ka/tpes.git"
            },
            {
                "name": "NetBox",
                "uri": "https://bio.tools/netbox",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2259",
                            "term": "Systems biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "NetBox is a Java-based software tool for performing network analysis on human interaction networks. It is pre-loaded with a Human Interaction Network (HIN) derived from four literature curated data sources, including the Human Protein Reference Database (HPRD), Reactome, NCI-Nature Pathway Interaction (PID) Database, and the MSKCC Cancer Cell Map.",
                "homepage": "http://cbio.mskcc.org/tools/netbox/index.html"
            }
        ],
        "inputs": [
            "id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-assembly",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/qc/${id}\" , mode: 'copy' , pattern: \"stats_adapter.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "remove_contaminants": {
        "name_process": "remove_contaminants",
        "string_process": "\nprocess remove_contaminants {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/qc/${id}\" , mode: 'copy', \n        pattern: \"stats_contaminant.txt\"\n\n    input:\n    tuple val(id), path(reads)\n\n    output:\n    tuple val(id), path(\"contam*.fastq.gz\"), emit: reads\n    path \"stats_contaminant.txt\"\n\n    script:\n    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    output = params.single_end ? \"out=contam.fastq.gz\" : \"out1=contam_1.fastq.gz out2=contam_2.fastq.gz\"\n    \"\"\"\n    bbduk.sh \\\n        -Xmx${task_memory_GB}g \\\n        $input \\\n        $output \\\n        ref=artifacts,phix \\\n        k=31 \\\n        hdist=1 \\\n        interleaved=f \\\n        stats=stats_contaminant.txt \\\n        threads=${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    output = params.single_end ? \"out=contam.fastq.gz\" : \"out1=contam_1.fastq.gz out2=contam_2.fastq.gz\"\n    \"\"\"\n    bbduk.sh \\\n        -Xmx${task_memory_GB}g \\\n        $input \\\n        $output \\\n        ref=artifacts,phix \\\n        k=31 \\\n        hdist=1 \\\n        interleaved=f \\\n        stats=stats_contaminant.txt \\\n        threads=${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "wossinput",
            "wossoutput"
        ],
        "tools_url": [
            "https://bio.tools/wossinput",
            "https://bio.tools/wossoutput"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "wossoutput",
                "uri": "https://bio.tools/wossoutput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM output data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossoutput.html"
            }
        ],
        "inputs": [
            "id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-assembly",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/qc/${id}\" , mode: 'copy' , pattern: \"stats_contaminant.txt\""
        ],
        "when": "",
        "stub": ""
    },
    "quality_filter": {
        "name_process": "quality_filter",
        "string_process": "\nprocess quality_filter {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/clean_reads\" , mode: 'copy' , \n        enabled: params.save_clean\n\n    input:\n    tuple val(id), path(reads)\n\n    output:\n    tuple val(id), path(\"${id}*.fastq.gz\"), emit: reads\n\n    script:\n    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    output = params.single_end ? \"out=${id}.fastq.gz\" : \"out1=${id}_1.fastq.gz out2=${id}_2.fastq.gz\"\n    \"\"\"\n    bbduk.sh \\\n        $input \\\n        $output \\\n        maq=10 \\\n        maxns=4 \\\n        qtrim=r \\\n        trimq=6 \\\n        mlf=0.5 \\\n        minlen=50 \\\n        interleaved=f \\\n        threads=${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    output = params.single_end ? \"out=${id}.fastq.gz\" : \"out1=${id}_1.fastq.gz out2=${id}_2.fastq.gz\"\n    \"\"\"\n    bbduk.sh \\\n        $input \\\n        $output \\\n        maq=10 \\\n        maxns=4 \\\n        qtrim=r \\\n        trimq=6 \\\n        mlf=0.5 \\\n        minlen=50 \\\n        interleaved=f \\\n        threads=${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "wossinput",
            "wossoutput"
        ],
        "tools_url": [
            "https://bio.tools/wossinput",
            "https://bio.tools/wossoutput"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            },
            {
                "name": "wossoutput",
                "uri": "https://bio.tools/wossoutput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM output data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossoutput.html"
            }
        ],
        "inputs": [
            "id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-assembly",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/clean_reads\" , mode: 'copy' , enabled: params.save_clean"
        ],
        "when": "",
        "stub": ""
    },
    "raw_reads_stats": {
        "name_process": "raw_reads_stats",
        "string_process": "\nprocess raw_reads_stats {   \n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/raw_reads_stats/${id}\" , mode: 'copy'\n\n    input:\n    tuple val(id), path(reads)\n\n    output:\n    path \"*hist.txt\"\n\n    script:\n    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    \"\"\"\n    bbduk.sh \\\n        -Xmx${task_memory_GB}g \\\n        $input \\\n        bhist=bhist.txt \\\n        qhist=qhist.txt \\\n        gchist=gchist.txt \\\n        aqhist=aqhist.txt \\\n        lhist=lhist.txt \\\n        gcbins=auto \\\n        threads=${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    \"\"\"\n    bbduk.sh \\\n        -Xmx${task_memory_GB}g \\\n        $input \\\n        bhist=bhist.txt \\\n        qhist=qhist.txt \\\n        gchist=gchist.txt \\\n        aqhist=aqhist.txt \\\n        lhist=lhist.txt \\\n        gcbins=auto \\\n        threads=${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "wossinput"
        ],
        "tools_url": [
            "https://bio.tools/wossinput"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            }
        ],
        "inputs": [
            "id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-assembly",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/raw_reads_stats/${id}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "clean_reads_stats": {
        "name_process": "clean_reads_stats",
        "string_process": "\nprocess clean_reads_stats {\n    tag \"${id}\"\n\n    publishDir \"${params.outdir}/clean_reads_stats/${id}\" , mode: 'copy'\n\n    input:\n    tuple val(id), path(reads)\n\n    output:\n    path \"*hist.txt\"\n\n    script:\n    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    \"\"\"\n    bbduk.sh \\\n        -Xmx${task_memory_GB}g \\\n        $input \\\n        bhist=bhist.txt \\\n        qhist=qhist.txt \\\n        gchist=gchist.txt \\\n        aqhist=aqhist.txt \\\n        lhist=lhist.txt \\\n        gcbins=auto \\\n        threads=${task.cpus}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    task_memory_GB = task.memory.toGiga()\n    input = params.single_end ? \"in=\\\"$reads\\\"\" : \"in1=\\\"${reads[0]}\\\" in2=\\\"${reads[1]}\\\"\"\n    \"\"\"\n    bbduk.sh \\\n        -Xmx${task_memory_GB}g \\\n        $input \\\n        bhist=bhist.txt \\\n        qhist=qhist.txt \\\n        gchist=gchist.txt \\\n        aqhist=aqhist.txt \\\n        lhist=lhist.txt \\\n        gcbins=auto \\\n        threads=${task.cpus}\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "wossinput"
        ],
        "tools_url": [
            "https://bio.tools/wossinput"
        ],
        "tools_dico": [
            {
                "name": "wossinput",
                "uri": "https://bio.tools/wossinput",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0958",
                                "term": "Tool metadata"
                            }
                        ]
                    }
                ],
                "description": "Find programs by EDAM input data.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/wossinput.html"
            }
        ],
        "inputs": [
            "id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-assembly",
        "directive": [
            "tag \"${id}\"",
            "publishDir \"${params.outdir}/clean_reads_stats/${id}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "statswrapper": {
        "name_process": "statswrapper",
        "string_process": "\nprocess statswrapper {      \n    publishDir \"${params.outdir}\" , mode: 'copy'\n\n    input:\n    path scaffolds\n\n    output:\n    path 'stats_scaffolds.tsv'\n\n    script:       \n    \"\"\"\n    mkdir scaffolds_dir\n    mv ${scaffolds} scaffolds_dir\n    statswrapper.sh scaffolds_dir/* > stats_scaffolds.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    mkdir scaffolds_dir\n    mv ${scaffolds} scaffolds_dir\n    statswrapper.sh scaffolds_dir/* > stats_scaffolds.tsv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "scaffolds"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metashot__prok-assembly",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
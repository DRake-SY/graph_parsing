{
    "OPERATION_1": {
        "string": "Channel\n            .fromPath(params.fasta,  checkIfExists: true)\n            .set { fastaGunzipChannel }",
        "origin": [
            [
                "params.fasta,  checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "fastaGunzipChannel",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n            .fromPath(params.fasta, checkIfExists: true)\n            .into { fastaMapChannel\n                    fastaSnpChannel\n                    fastaCountChannel\n                    fastaRatesChannel\n                    fastaUtrRatesChannel\n                    fastaReadPosChannel\n                    fastaUtrPosChannel }",
        "origin": [
            [
                "params.fasta, checkIfExists: true",
                "A"
            ]
        ],
        "gives": []
    },
    "OPERATION_3": {
        "string": "Channel\n        .fromPath(gtf, checkIfExists: true)\n        .ifEmpty { exit 1, \"GTF annotation file not found: ${gtf}\" }\n        .set { gtfChannel }",
        "origin": [
            [
                "gtf, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "gtfChannel",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n        .fromPath(params.bed, checkIfExists: true)\n        .ifEmpty { exit 1, \"BED 3' UTR annotation file not found: ${params.bed}\" }\n        .into { utrFilterChannel\n                utrCountChannel\n                utrratesChannel\n                utrposChannel }",
        "origin": [
            [
                "params.bed, checkIfExists: true",
                "A"
            ]
        ],
        "gives": []
    },
    "OPERATION_5": {
        "string": "Channel\n        .fromPath(params.mapping, checkIfExists: true)\n        .ifEmpty { exit 1, \"Mapping file not found: ${params.mapping}\" }\n        .set { utrFilterChannel }",
        "origin": [
            [
                "params.mapping, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "utrFilterChannel",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n        .fromPath(params.vcf, checkIfExists: true)\n        .ifEmpty { exit 1, \"Vcf file not found: ${params.vcf}\" }\n        .set { vcfChannel }",
        "origin": [
            [
                "params.vcf, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "vcfChannel",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n        .empty()\n        .set { vcfChannel }",
        "origin": [],
        "gives": [
            [
                "vcfChannel",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "ch_multiqc_custom_config = Channel.fromPath(params.multiqc_config, checkIfExists: true)",
        "origin": [
            [
                "params.multiqc_config, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "ch_multiqc_custom_config = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "ch_multiqc_custom_config",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel\n    .fromPath(params.input, checkIfExists: true)\n    .ifEmpty { exit 1, \"input file not found: ${params.input}\" }\n    .set { checkChannel }",
        "origin": [
            [
                "params.input, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "checkChannel",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel.from(summary.collect{ [it.key, it.value] })\n    .map { k,v -> \"<dt>$k</dt><dd><samp>${v ?: '<span style=\\\"color:#999999;\\\">N/A</a>'}</samp></dd>\" }\n    .reduce { a, b -> return [a, b].join(\"\\n            \") }\n    .map { x -> \"\"\"\n    id: 'nf-core-slamseq-summary'\n    description: \" - this information is collected when the pipeline is started.\"\n    section_name: 'nf-core/slamseq Workflow Summary'\n    section_href: 'https://github.com/nf-core/slamseq'\n    plot_type: 'html'\n    data: |\n        <dl class=\\\"dl-horizontal\\\">\n            $x\n        </dl>\n    \"\"\".stripIndent() }\n    .set { ch_workflow_summary }",
        "origin": [
            [
                "summary.collect{ [it.key, it.value] }",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_workflow_summary",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "trimgaloreQC = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "trimgaloreQC",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "trimgaloreFastQC = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "trimgaloreFastQC",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "summary.collect { k,v -> \"${k.padRight(18)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_15": {
        "string": "rawFileChannel\n    .splitCsv( header: true, sep: '\\t' )\n    .map { row -> tuple(row, file(row.reads, checkIfExists: true) ) }\n    .set { rawFiles }",
        "origin": [
            [
                "rawFileChannel",
                "P"
            ]
        ],
        "gives": [
            [
                "rawFiles",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "splitChannel\n    .splitCsv( header: true, sep: '\\t' )\n    .set { conditionDeconvolution }",
        "origin": [
            [
                "splitChannel",
                "P"
            ]
        ],
        "gives": [
            [
                "conditionDeconvolution",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "vcfSampleChannel\n    .splitCsv( header: true, sep: '\\t' )\n    .map{ it -> return it.name }\n    .combine(vcfChannel)\n    .set{ vcfCombineChannel }",
        "origin": [
            [
                "vcfSampleChannel",
                "P"
            ],
            [
                "vcfChannel",
                "P"
            ]
        ],
        "gives": [
            [
                "vcfCombineChannel",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "rawFiles\n        .map{ it -> return tuple(it, file(it.reads)) }\n        .set{ trimmedFiles }",
        "origin": [
            [
                "rawFiles",
                "P"
            ]
        ],
        "gives": [
            [
                "trimmedFiles",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "vcfComb = slamdunkSnp.mix(vcfCombineChannel)",
        "origin": [
            [
                "slamdunkSnp",
                "P"
            ],
            [
                "vcfCombineChannel",
                "P"
            ]
        ],
        "gives": [
            [
                "vcfComb",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "slamdunkCount\n    .join(vcfComb)\n    .into { slamdunkResultsChannel\n            slamdunkForRatesChannel\n            slamdunkForUtrRatesChannel\n            slamdunkForTcPerReadPosChannel\n            slamdunkForTcPerUtrPosChannel }",
        "origin": [
            [
                "slamdunkCount",
                "P"
            ],
            [
                "vcfComb",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_21": {
        "string": "slamdunkFilterSummary\n    .flatten()\n    .filter( ~/.*bam$/ )\n    .collect()\n    .set { slamdunkFilterSummaryCollected }",
        "origin": [
            [
                "slamdunkFilterSummary",
                "P"
            ]
        ],
        "gives": [
            [
                "slamdunkFilterSummaryCollected",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "slamdunkCountAlleyoop\n    .collect()\n    .flatten()\n    .filter( ~/.*tsv$/ )\n    .collect()\n    .set { slamdunkCountAlleyoopCollected }",
        "origin": [
            [
                "slamdunkCountAlleyoop",
                "P"
            ]
        ],
        "gives": [
            [
                "slamdunkCountAlleyoopCollected",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "conditionDeconvolution\n    .map { it -> return tuple(it.name, it.group) }\n    .join(slamdunkCollapseOut)\n    .map { it -> return tuple(it[1],it[2]) }\n    .groupTuple()\n    .set { deseq2FileChannel }",
        "origin": [
            [
                "conditionDeconvolution",
                "P"
            ],
            [
                "slamdunkCollapseOut",
                "P"
            ]
        ],
        "gives": [
            [
                "deseq2FileChannel",
                "P"
            ]
        ]
    }
}
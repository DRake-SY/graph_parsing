{
    "cacheJBangScripts": {
        "name_process": "cacheJBangScripts",
        "string_process": "\nprocess cacheJBangScripts {\n\n  input:\n    file ExcelToCsvJava\n\n  output:\n    file \"ExcelToCsv.jar\" into ExcelToCsv\n\n  \"\"\"\n\n  jbang export portable -O=ExcelToCsv.jar ${ExcelToCsvJava}\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n\n  jbang export portable -O=ExcelToCsv.jar ${ExcelToCsvJava}\n\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ExcelToCsvJava"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ExcelToCsv"
        ],
        "nb_outputs": 1,
        "name_workflow": "lukfor__normalize-pgs-catalog",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "downloadVCFFromDbSnp": {
        "name_process": "downloadVCFFromDbSnp",
        "string_process": "\nprocess downloadVCFFromDbSnp {\n\n  output:\n    file \"*.vcf.gz\" into dbsnp_file\n\n  \"\"\"\n  wget ${params.vcf_url}\n  \"\"\"\n\n}",
        "nb_lignes_process": 9,
        "string_script": "\"\"\"\n  wget ${params.vcf_url}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "dbsnp_file"
        ],
        "nb_outputs": 1,
        "name_workflow": "lukfor__normalize-pgs-catalog",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "buildDbSnpIndex": {
        "name_process": "buildDbSnpIndex",
        "string_process": "\nprocess buildDbSnpIndex {\n\n  publishDir \"$params.output\", mode: 'copy'\n\n  input:\n    file dbsnp_file\n    file VcfToRsIndex\n\n  output:\n    file \"${params.output_name}.txt.gz\" into dbsnp_index_txt_file\n    file \"${params.output_name}.txt.gz.tbi\" into dbsnp_index_tbi_file\n\n  \"\"\"\n\n  # https://github.com/samtools/htslib/issues/427\n\n  java -jar ${VcfToRsIndex} \\\n    --input ${dbsnp_file} \\\n    --output ${params.output_name}.unsorted.txt\n\n  sort -t\\$'\\t' -k1,1 -k2,2n ${params.output_name}.unsorted.txt > ${params.output_name}.txt\n  rm ${params.output_name}.unsorted.txt\n  bgzip ${params.output_name}.txt\n  tabix -s1 -b2 -e2 ${params.output_name}.txt.gz\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n\n  # https://github.com/samtools/htslib/issues/427\n\n  java -jar ${VcfToRsIndex} \\\n    --input ${dbsnp_file} \\\n    --output ${params.output_name}.unsorted.txt\n\n  sort -t\\$'\\t' -k1,1 -k2,2n ${params.output_name}.unsorted.txt > ${params.output_name}.txt\n  rm ${params.output_name}.unsorted.txt\n  bgzip ${params.output_name}.txt\n  tabix -s1 -b2 -e2 ${params.output_name}.txt.gz\n\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dbsnp_file",
            "VcfToRsIndex"
        ],
        "nb_inputs": 2,
        "outputs": [
            "dbsnp_index_txt_file",
            "dbsnp_index_tbi_file"
        ],
        "nb_outputs": 2,
        "name_workflow": "lukfor__normalize-pgs-catalog",
        "directive": [
            "publishDir \"$params.output\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "createCloudgeneYaml": {
        "name_process": "createCloudgeneYaml",
        "string_process": "\nprocess createCloudgeneYaml {\n\n  publishDir \"$params.output\", mode: 'copy'\n\n  input:\n    file scores from pgs_catalog_scores_files.collect()\n\n  output:\n    file \"cloudgene.yaml\"\n\n  \"\"\"\n  echo \"id: pgs-catalog-v${params.version}-${params.build}\" > cloudgene.yaml\n  echo \"name: PGS Catalog (${params.build}, ${scores.size()} scores)\" >> cloudgene.yaml\n  echo \"version: ${params.version}\" >> cloudgene.yaml\n  echo \"category: PGSPanel\" >> cloudgene.yaml\n  echo \"website: https://www.pgscatalog.org\" >> cloudgene.yaml\n  echo \"properties:\" >> cloudgene.yaml\n  echo \"  build: ${params.build}\" >> cloudgene.yaml\n  echo \"  location: \\\\\\${hdfs_app_folder}/scores\" >> cloudgene.yaml\n  echo \"  scores:\" >> cloudgene.yaml\n  echo \"    - ${scores.join('\\n      - ')}\" >> cloudgene.yaml\n  echo \"installation:\" >> cloudgene.yaml\n  echo \"  - import:\" >> cloudgene.yaml\n  echo \"      source: \\\\\\${local_app_folder}/scores\" >> cloudgene.yaml\n  echo \"      target: \\\\\\${hdfs_app_folder}/scores\" >> cloudgene.yaml\n  \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\n  echo \"id: pgs-catalog-v${params.version}-${params.build}\" > cloudgene.yaml\n  echo \"name: PGS Catalog (${params.build}, ${scores.size()} scores)\" >> cloudgene.yaml\n  echo \"version: ${params.version}\" >> cloudgene.yaml\n  echo \"category: PGSPanel\" >> cloudgene.yaml\n  echo \"website: https://www.pgscatalog.org\" >> cloudgene.yaml\n  echo \"properties:\" >> cloudgene.yaml\n  echo \"  build: ${params.build}\" >> cloudgene.yaml\n  echo \"  location: \\\\\\${hdfs_app_folder}/scores\" >> cloudgene.yaml\n  echo \"  scores:\" >> cloudgene.yaml\n  echo \"    - ${scores.join('\\n      - ')}\" >> cloudgene.yaml\n  echo \"installation:\" >> cloudgene.yaml\n  echo \"  - import:\" >> cloudgene.yaml\n  echo \"      source: \\\\\\${local_app_folder}/scores\" >> cloudgene.yaml\n  echo \"      target: \\\\\\${hdfs_app_folder}/scores\" >> cloudgene.yaml\n  \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pgs_catalog_scores_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lukfor__normalize-pgs-catalog",
        "directive": [
            "publishDir \"$params.output\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "downloadPGSCatalogMeta": {
        "name_process": "downloadPGSCatalogMeta",
        "string_process": " process downloadPGSCatalogMeta {\n\n    output:\n      file \"*.xlsx\" into pgs_catalog_excel_file\n\n    \"\"\"\n    wget ${params.pgs_catalog_url}\n    \"\"\"\n\n  }",
        "nb_lignes_process": 8,
        "string_script": "\"\"\"\n    wget ${params.pgs_catalog_url}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "pgs_catalog_excel_file"
        ],
        "nb_outputs": 1,
        "name_workflow": "lukfor__normalize-pgs-catalog",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "convertPgsCatalogMeta": {
        "name_process": "convertPgsCatalogMeta",
        "string_process": "\nprocess convertPgsCatalogMeta {\n\n  input:\n    file ExcelToCsv\n    file excel_file from pgs_catalog_excel_file\n\n  output:\n    file \"*.csv\" into pgs_catalog_csv_file\n\n  \"\"\"\n  java -jar ${ExcelToCsv} \\\n    --input ${excel_file} \\\n    --sheet Scores \\\n    --output pgs_all_metadata.csv\n  \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n  java -jar ${ExcelToCsv} \\\n    --input ${excel_file} \\\n    --sheet Scores \\\n    --output pgs_all_metadata.csv\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ExcelToCsv",
            "pgs_catalog_excel_file"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pgs_catalog_csv_file"
        ],
        "nb_outputs": 1,
        "name_workflow": "lukfor__normalize-pgs-catalog",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "downloadPgsCatalogScore": {
        "name_process": "downloadPgsCatalogScore",
        "string_process": "\nprocess downloadPgsCatalogScore {\n\n                          \n\n  publishDir \"$params.output/scores\", mode: 'copy'\n\n  input:\n    val score from scores_ch\n    tuple val(dbsnp_index), file(dbsnp_index_file) from dbsnp_index_ch.collect()\n    file chain from chain_files_ch.collect()\n\n  output:\n    file \"${score_id}.txt.gz\" optional true into pgs_catalog_scores_files\n    file \"*.log\" optional true into pgs_catalog_scores_logs\n\n  script:\n    score_id = score['Polygenic Score (PGS) ID']\n    score_ftp_link = score['FTP link']\n    score_build = score['Original Genome Build']\n    chain_file = find_chain_file(score_build, params.build)\n\n  \"\"\"\n  set +e\n  wget ${score_ftp_link} -O ${score_id}.original.txt.gz\n\n  pgs-calc resolve \\\n    --in ${score_id}.original.txt.gz \\\n    --out ${score_id}.txt.gz  \\\n    ${chain_file != null ? \"--chain \" + chain_file : \"\"} \\\n    --dbsnp ${dbsnp_index}.txt.gz &> ${score_id}.log\n\n  # ignore pgs-calc status to get log files of failed scores.\n  exit 0\n\n  \"\"\"\n\n}",
        "nb_lignes_process": 36,
        "string_script": "    score_id = score['Polygenic Score (PGS) ID']\n    score_ftp_link = score['FTP link']\n    score_build = score['Original Genome Build']\n    chain_file = find_chain_file(score_build, params.build)\n\n  \"\"\"\n  set +e\n  wget ${score_ftp_link} -O ${score_id}.original.txt.gz\n\n  pgs-calc resolve \\\n    --in ${score_id}.original.txt.gz \\\n    --out ${score_id}.txt.gz  \\\n    ${chain_file != null ? \"--chain \" + chain_file : \"\"} \\\n    --dbsnp ${dbsnp_index}.txt.gz &> ${score_id}.log\n\n  # ignore pgs-calc status to get log files of failed scores.\n  exit 0\n\n  \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "scores_ch",
            "dbsnp_index_ch",
            "chain_files_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "pgs_catalog_scores_files",
            "pgs_catalog_scores_logs"
        ],
        "nb_outputs": 2,
        "name_workflow": "lukfor__normalize-pgs-catalog",
        "directive": [
            "publishDir \"$params.output/scores\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
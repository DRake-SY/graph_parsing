{
    "getNCBIIds": {
        "name_process": "getNCBIIds",
        "string_process": "\nprocess getNCBIIds{\n\tpublishDir \"${outpath}\", mode: 'copy'\n\n\tinput:\n\tfile refseqid\n\tfile gene2accession\n\tfile geneinfo\n\n\toutput:\n\tfile 'refseq_ids_xref.txt'\n\tfile 'refseq_ids_hgnc.txt' into hgncid\n\n\tscript:\n\t\"\"\"\n\tadd_hgnc.pl $refseqid $gene2accession $geneinfo | sort -u > refseq_ids_xref.txt\n\tcut -f 3 refseq_ids_xref.txt | sort -u > refseq_ids_hgnc.txt\n\t\"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\t\"\"\"\n\tadd_hgnc.pl $refseqid $gene2accession $geneinfo | sort -u > refseq_ids_xref.txt\n\tcut -f 3 refseq_ids_xref.txt | sort -u > refseq_ids_hgnc.txt\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "refseqid",
            "gene2accession",
            "geneinfo"
        ],
        "nb_inputs": 3,
        "outputs": [
            "hgncid"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [
            "publishDir \"${outpath}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "getOrthoDBIds": {
        "name_process": "getOrthoDBIds",
        "string_process": "\nprocess getOrthoDBIds{\n\tmaxForks 3\n\n\tinput:\n\tval hgnc from hgncid.splitText( by: 1 ).map{ v -> v.trim() }\n\t\n\toutput:\n\tfile \"ids.txt\" into protids,protids2\n\n\tscript:\n\t\"\"\"\n\tcurl 'https://v100.orthodb.org/search?query=${hgnc}&ncbi=0&level=9443&species=9443&singlecopy=1&universal=0.9'|jq '.data | join(\",\")' | sed 's/\"//g' | sed 's/,/\\\\n/g' > ids.txt\n\tsleep 1\n\t\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\t\"\"\"\n\tcurl 'https://v100.orthodb.org/search?query=${hgnc}&ncbi=0&level=9443&species=9443&singlecopy=1&universal=0.9'|jq '.data | join(\",\")' | sed 's/\"//g' | sed 's/,/\\\\n/g' > ids.txt\n\tsleep 1\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [
            "hgncid"
        ],
        "nb_inputs": 1,
        "outputs": [
            "protids",
            "protids2"
        ],
        "nb_outputs": 2,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [
            "maxForks 3"
        ],
        "when": "",
        "stub": ""
    },
    "downloadSequences": {
        "name_process": "downloadSequences",
        "string_process": "\nprocess downloadSequences{\n\tmaxForks 1\n\ttag \"${id}\"\n\n\tinput:\n\tval id from protids.collectFile(name: 'allids.txt').splitText( by: 1 ).map{ v -> v.trim() }.unique().filter{ it.length() > 0 }\n\t\n\toutput:\n\ttuple val(id), file(\"sequences.fasta\") into sequences\n\n\tscript:\n\t\"\"\"\n\tgoalign rename -i \"https://v100.orthodb.org/fasta?id=${id}\"  --regexp '([^\\\\s]+).*' --replace '\\$1' --unaligned > sequences.fasta\n\tsleep 2\n\t\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\t\"\"\"\n\tgoalign rename -i \"https://v100.orthodb.org/fasta?id=${id}\"  --regexp '([^\\\\s]+).*' --replace '\\$1' --unaligned > sequences.fasta\n\tsleep 2\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "goalign"
        ],
        "tools_url": [
            "https://bio.tools/goalign"
        ],
        "tools_dico": [
            {
                "name": "goalign",
                "uri": "https://bio.tools/goalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools to manipulate multiple alignments.",
                "homepage": "https://github.com/fredericlemoine/goalign"
            }
        ],
        "inputs": [
            "protids"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sequences"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [
            "maxForks 1",
            "tag \"${id}\""
        ],
        "when": "",
        "stub": ""
    },
    "getMapTable": {
        "name_process": "getMapTable",
        "string_process": "\nprocess getMapTable{\n\tmaxForks 1\n\ttag \"${id}\"\n\n\tinput:\n\tset val(id), file(seq) from sequences\n\n\toutput:\n\tset val(id), file(seq), file(\"map.txt\") into mapfile\n\tfile \"gene.txt\" into genefile\n\n\tscript:\n\t\"\"\"\n\twget -O align.tab https://v100.orthodb.org/tab?query=${id}\n\tcut -f 5,6 align.tab > map.txt\n\tcut -f 1,2 align.tab | tail -n+2 | sort -u > gene.txt\n\t\"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\t\"\"\"\n\twget -O align.tab https://v100.orthodb.org/tab?query=${id}\n\tcut -f 5,6 align.tab > map.txt\n\tcut -f 1,2 align.tab | tail -n+2 | sort -u > gene.txt\n\t\"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sequences"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mapfile",
            "genefile"
        ],
        "nb_outputs": 2,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [
            "maxForks 1",
            "tag \"${id}\""
        ],
        "when": "",
        "stub": ""
    },
    "renameSequences": {
        "name_process": "renameSequences",
        "string_process": "\nprocess renameSequences{\n\ttag \"${id}\"\n\n\tinput:\n\tset val(id), file(sequences), file(mapfile) from mapfile\n\n\toutput:\n\tfile \"renamed.fasta\" into renamed\n\n\tscript:\n\t\"\"\"\n\tgoalign rename -r -m ${mapfile} -i ${sequences} --unaligned | goalign rename --regexp \" \" --replace \"_\" --unaligned  > renamed.fasta\n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\t\"\"\"\n\tgoalign rename -r -m ${mapfile} -i ${sequences} --unaligned | goalign rename --regexp \" \" --replace \"_\" --unaligned  > renamed.fasta\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "goalign"
        ],
        "tools_url": [
            "https://bio.tools/goalign"
        ],
        "tools_dico": [
            {
                "name": "goalign",
                "uri": "https://bio.tools/goalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools to manipulate multiple alignments.",
                "homepage": "https://github.com/fredericlemoine/goalign"
            }
        ],
        "inputs": [
            "mapfile"
        ],
        "nb_inputs": 1,
        "outputs": [
            "renamed"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [
            "tag \"${id}\""
        ],
        "when": "",
        "stub": ""
    },
    "cleanSequences": {
        "name_process": "cleanSequences",
        "string_process": "\nprocess cleanSequences{\n\tinput:\n\tfile(sequences) from renamed\n\n\toutput:\n\tfile \"cleaned.fasta\" into cleaned\n\n\tscript:\n\t\"\"\"\n\tgoalign replace -s U -n X -i ${sequences} -o cleaned.fasta --unaligned\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tgoalign replace -s U -n X -i ${sequences} -o cleaned.fasta --unaligned\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "goalign"
        ],
        "tools_url": [
            "https://bio.tools/goalign"
        ],
        "tools_dico": [
            {
                "name": "goalign",
                "uri": "https://bio.tools/goalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools to manipulate multiple alignments.",
                "homepage": "https://github.com/fredericlemoine/goalign"
            }
        ],
        "inputs": [
            "renamed"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cleaned"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "alignSequences": {
        "name_process": "alignSequences",
        "string_process": "\nprocess alignSequences{\n\tinput:\n\tfile cleaned\n\n\toutput:\n\tfile \"aligned.fasta\" into alignment\n\n\tscript:\n\t\"\"\"\n\tmafft --quiet ${cleaned} > aligned.fasta\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tmafft --quiet ${cleaned} > aligned.fasta\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MAFFT"
        ],
        "tools_url": [
            "https://bio.tools/MAFFT"
        ],
        "tools_dico": [
            {
                "name": "MAFFT",
                "uri": "https://bio.tools/MAFFT",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.",
                "homepage": "http://mafft.cbrc.jp/alignment/server/index.html"
            }
        ],
        "inputs": [
            "cleaned"
        ],
        "nb_inputs": 1,
        "outputs": [
            "alignment"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "concatSequences": {
        "name_process": "concatSequences",
        "string_process": "\nprocess concatSequences {\n\tinput:\n\tfile 'align_fasta' from alignment.collect()\n\n\toutput:\n\tfile \"concat.fasta\" into concat\n\n\tscript:\n\t\"\"\"\n\tgoalign concat -o concat.fasta -i none align_fasta*\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tgoalign concat -o concat.fasta -i none align_fasta*\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "goalign"
        ],
        "tools_url": [
            "https://bio.tools/goalign"
        ],
        "tools_dico": [
            {
                "name": "goalign",
                "uri": "https://bio.tools/goalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools to manipulate multiple alignments.",
                "homepage": "https://github.com/fredericlemoine/goalign"
            }
        ],
        "inputs": [
            "alignment"
        ],
        "nb_inputs": 1,
        "outputs": [
            "concat"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "cleanAlign": {
        "name_process": "cleanAlign",
        "string_process": "\nprocess cleanAlign {\n\tinput:\n\tfile align from concat\n\n\toutput:\n\tfile \"cleanalign.fasta\" into cleanalign\n\n\tscript:\n\t\"\"\"\n\tBMGE -i ${align} -t AA -m BLOSUM62 -w 3 -g 0.2 -h 0.5  -b 5 -of cleanalign.fasta\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tBMGE -i ${align} -t AA -m BLOSUM62 -w 3 -g 0.2 -h 0.5  -b 5 -of cleanalign.fasta\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BMGE"
        ],
        "tools_url": [
            "https://bio.tools/bmge"
        ],
        "tools_dico": [
            {
                "name": "BMGE",
                "uri": "https://bio.tools/bmge",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0084",
                            "term": "Phylogeny"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "Block Mapping and Gathering using Entropy.",
                "homepage": "https://research.pasteur.fr/en/software/bmge-block-mapping-and-gathering-with-entropy/"
            }
        ],
        "inputs": [
            "concat"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cleanalign"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "reformatAlignment": {
        "name_process": "reformatAlignment",
        "string_process": "\nprocess reformatAlignment{\n\tinput:\n\tfile cleanalign\n\n\toutput:\n\tfile \"aligned.phylip\" into alignmentphylip\n\n\tscript:\n\t\"\"\"\n\tgoalign reformat phylip -i ${cleanalign} -o aligned.phylip\n\t\"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\t\"\"\"\n\tgoalign reformat phylip -i ${cleanalign} -o aligned.phylip\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "goalign"
        ],
        "tools_url": [
            "https://bio.tools/goalign"
        ],
        "tools_dico": [
            {
                "name": "goalign",
                "uri": "https://bio.tools/goalign",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools to manipulate multiple alignments.",
                "homepage": "https://github.com/fredericlemoine/goalign"
            }
        ],
        "inputs": [
            "cleanalign"
        ],
        "nb_inputs": 1,
        "outputs": [
            "alignmentphylip"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "inferTrueTree": {
        "name_process": "inferTrueTree",
        "string_process": "\nprocess inferTrueTree{\n\tpublishDir \"${outpath}\", mode: 'copy'\n\n\tinput:\n\tfile align from alignmentphylip\n\tval seed\n\n\toutput:\n\tfile \"tree.nw\" into tree, tree2\n\n\tscript:\n\t\"\"\"\n\tiqtree -s ${align} -seed ${seed} -m MFP -b 100 -nt ${task.cpus}\n\tmv *.treefile tree.nw\n\t\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\t\"\"\"\n\tiqtree -s ${align} -seed ${seed} -m MFP -b 100 -nt ${task.cpus}\n\tmv *.treefile tree.nw\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignmentphylip",
            "seed"
        ],
        "nb_inputs": 2,
        "outputs": [
            "tree",
            "tree2"
        ],
        "nb_outputs": 2,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [
            "publishDir \"${outpath}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "rerootTree": {
        "name_process": "rerootTree",
        "string_process": "\nprocess rerootTree{\n\tpublishDir \"${outpath}\", mode: 'copy'\n\n\tinput:\n\tfile tree from tree2\n\n\toutput:\n\tfile \"rerooted.nw\" into reroottree1, reroottree2\n\n\tscript:\n\t\"\"\"\n\tgotree reroot outgroup -i ${tree} -o rerooted.nw Otolemur_garnettii Microcebus_murinus Propithecus_coquereli \n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\t\"\"\"\n\tgotree reroot outgroup -i ${tree} -o rerooted.nw Otolemur_garnettii Microcebus_murinus Propithecus_coquereli \n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tree2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "reroottree1",
            "reroottree2"
        ],
        "nb_outputs": 2,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [
            "publishDir \"${outpath}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "downloadNewickTaxonomy": {
        "name_process": "downloadNewickTaxonomy",
        "string_process": "\nprocess downloadNewickTaxonomy {\n\toutput:\n\tfile \"ncbi.nw\" into ncbitax\n\n\tscript:\n\t\"\"\"\n\tgotree download ncbitax -o ncbi.nw\n\t\"\"\"\n}",
        "nb_lignes_process": 8,
        "string_script": "\t\"\"\"\n\tgotree download ncbitax -o ncbi.nw\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ncbitax"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "pruneNCBITax": {
        "name_process": "pruneNCBITax",
        "string_process": "\nprocess pruneNCBITax {\n\n\tinput:\n\tfile tree from tree\n\tfile map from ncbirenamefile\n\tfile ncbi from ncbitax\n\n\toutput:\n\tfile \"ncbi_pruned.nw\" into ncbipruned\n\n\tscript:\n\t\"\"\"\n\tgotree rename -i ${tree} -m ${map} -r -o tmp \n\tgotree prune -i ${ncbi} -c tmp -o ncbi_pruned.nw\n\t\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\t\"\"\"\n\tgotree rename -i ${tree} -m ${map} -r -o tmp \n\tgotree prune -i ${ncbi} -c tmp -o ncbi_pruned.nw\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tree",
            "ncbirenamefile",
            "ncbitax"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ncbipruned"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "renameNCBITaxonomy": {
        "name_process": "renameNCBITaxonomy",
        "string_process": "\nprocess renameNCBITaxonomy {\n\tinput:\n\tfile ncbi from ncbipruned\n\tfile map from ncbirenamefile\n\n\toutput:\n\tfile \"ncbi_rename.nw\" into ncbitaxrename\n\n\tscript:\n\t\"\"\"\n\tgotree rename -i $ncbi -o ncbi_rename.nw -m $map\n\t\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\t\"\"\"\n\tgotree rename -i $ncbi -o ncbi_rename.nw -m $map\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ncbipruned",
            "ncbirenamefile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ncbitaxrename"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "rerootNCBITax": {
        "name_process": "rerootNCBITax",
        "string_process": "\nprocess rerootNCBITax {\n\n\tinput:\n\tfile tree from ncbitaxrename\n\n\toutput:\n\tfile \"ncbi_rerooted.nw\" into ncbirerooted1, ncbirerooted2\n\n\tscript:\n\t\"\"\"\n\tgotree reroot outgroup -i ${tree} -o ncbi_rerooted.nw Otolemur_garnettii Microcebus_murinus Propithecus_coquereli \n\t\"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "\t\"\"\"\n\tgotree reroot outgroup -i ${tree} -o ncbi_rerooted.nw Otolemur_garnettii Microcebus_murinus Propithecus_coquereli \n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ncbitaxrename"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ncbirerooted1",
            "ncbirerooted2"
        ],
        "nb_outputs": 2,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "annotateTree": {
        "name_process": "annotateTree",
        "string_process": "\nprocess annotateTree{\n\tpublishDir \"${outpath}\", mode: 'copy'\n\n\tinput:\n\tfile tree from reroottree1\n\tfile ncbi from ncbirerooted1\n\n\toutput:\n\tfile \"annotated.nw\" into annotated\n\n\tscript:\n\t\"\"\"\n\tgotree annotate -i ${tree} -c ${ncbi} -o annotated.nw\n\t\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\t\"\"\"\n\tgotree annotate -i ${tree} -c ${ncbi} -o annotated.nw\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reroottree1",
            "ncbirerooted1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "annotated"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [
            "publishDir \"${outpath}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "compareTrees": {
        "name_process": "compareTrees",
        "string_process": "\nprocess compareTrees{\n\tpublishDir \"${outpath}\", mode: 'copy'\n\n\tinput:\n\tfile tree from reroottree2\n\tfile ncbi from ncbirerooted2\n\n\toutput:\n\tfile \"tree_comparison.txt\" into comparison\n\n\tscript:\n\t\"\"\"\n\tgotree compare trees -i ${tree} -c ${ncbi} > tree_comparison.txt\n\t\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\t\"\"\"\n\tgotree compare trees -i ${tree} -c ${ncbi} > tree_comparison.txt\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "reroottree2",
            "ncbirerooted2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "comparison"
        ],
        "nb_outputs": 1,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [
            "publishDir \"${outpath}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "uploadTree": {
        "name_process": "uploadTree",
        "string_process": "\nprocess uploadTree{\n\tpublishDir \"${outpath}\", mode: 'copy'\n\n\tinput:\n\tfile tree from annotated\n\tfile itolconfig\n\tval itolkey\n\tval itolproject\n\n\toutput:\n\tfile \"tree_url.txt\" into iTOLurl\n\tfile \"tree_image.svg\" into iTOLimage\n\n\tscript:\n\t\"\"\"\n\t# Upload the tree\n\tgotree upload itol --name \"AnnotatedTree\" -i ${tree} --user-id ${itolkey} --project ${itolproject} > tree_url.txt\n\t# We get the iTOL id\n\tID=\\$(basename \\$(cat tree_url.txt ))\n\t# We Download the image with options defined in data/itol_image_config.txt\n\tgotree download itol -c ${itolconfig} -f svg -o tree_image.svg -i \\$ID\n\t\"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "\t\"\"\"\n\t# Upload the tree\n\tgotree upload itol --name \"AnnotatedTree\" -i ${tree} --user-id ${itolkey} --project ${itolproject} > tree_url.txt\n\t# We get the iTOL id\n\tID=\\$(basename \\$(cat tree_url.txt ))\n\t# We Download the image with options defined in data/itol_image_config.txt\n\tgotree download itol -c ${itolconfig} -f svg -o tree_image.svg -i \\$ID\n\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annotated",
            "itolconfig",
            "itolkey",
            "itolproject"
        ],
        "nb_inputs": 4,
        "outputs": [
            "iTOLurl",
            "iTOLimage"
        ],
        "nb_outputs": 2,
        "name_workflow": "evolbioinfo__gotree_usecase",
        "directive": [
            "publishDir \"${outpath}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
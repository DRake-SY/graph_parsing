{
    "OPERATION_1": {
        "string": "Channel\n    .fromPath(params.fasta)\n    .ifEmpty { exit 1, \"fasta annotation file not found: ${params.fasta}\" }\n    .into {fasta_to_index; fasta_minimap2; fasta_clairvoyante; fasta_sniffles}",
        "origin": [
            [
                "params.fasta",
                "A"
            ]
        ],
        "gives": [
            [
                "fasta_to_index",
                "P"
            ],
            [
                "fasta_minimap2",
                "P"
            ],
            [
                "fasta_clairvoyante",
                "P"
            ],
            [
                "fasta_sniffles",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath(params.fai)\n    .ifEmpty{exit 1, \"FASTA index file not found: ${params.fai}\"}\n    .into {fai_clairvoyante; fai_sniffles}",
        "origin": [
            [
                "params.fai",
                "A"
            ]
        ],
        "gives": [
            [
                "fai_clairvoyante",
                "P"
            ],
            [
                "fai_sniffles",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(params.data)\n           .ifEmpty { exit 1, \"Trained model data file for Clairvoyante not found: ${params.data}\" }\n           .set { model_data }",
        "origin": [
            [
                "params.data",
                "A"
            ]
        ],
        "gives": [
            [
                "model_data",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath(params.index)\n           .ifEmpty { exit 1, \"Trained model index file for Clairvoyante not found: ${params.index}\" }\n           .set { model_index }",
        "origin": [
            [
                "params.index",
                "A"
            ]
        ],
        "gives": [
            [
                "model_index",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath(params.meta)\n           .ifEmpty { exit 1, \"Trained model meta file for Clairvoyante not found: ${params.meta}\" }\n           .set { model_meta }",
        "origin": [
            [
                "params.meta",
                "A"
            ]
        ],
        "gives": [
            [
                "model_meta",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n      .fromPath(params.reads)\n      .map { file -> tuple(file.baseName, file) }\n      .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes\" }\n      .set { reads_minimap2 }",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "reads_minimap2",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "minimap2 = reads_minimap2.combine(fasta_minimap2)",
        "origin": [
            [
                "reads_minimap2",
                "P"
            ],
            [
                "fasta_minimap2",
                "P"
            ]
        ],
        "gives": [
            [
                "minimap2",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "clairvoyante = marked_bam_clairvoyante.merge(fasta_clairvoyante, fai_clairvoyante, model_data, model_index, model_meta)",
        "origin": [
            [
                "marked_bam_clairvoyante",
                "P"
            ],
            [
                "fasta_clairvoyante",
                "P"
            ],
            [
                "fai_clairvoyante",
                "P"
            ],
            [
                "model_data",
                "P"
            ],
            [
                "model_index",
                "P"
            ],
            [
                "model_meta",
                "P"
            ]
        ],
        "gives": [
            [
                "clairvoyante",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "sniffles_preprocessing = marked_bam_sniffles.merge(fasta_sniffles, fai_sniffles)",
        "origin": [
            [
                "marked_bam_sniffles",
                "P"
            ],
            [
                "fasta_sniffles",
                "P"
            ],
            [
                "fai_sniffles",
                "P"
            ]
        ],
        "gives": [
            [
                "sniffles_preprocessing",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "sniffles_vcf\n    .map { file -> tuple(file.baseName, file) }\n    .into { sniffles_vcf_length; sniffles_vcf_carriers }",
        "origin": [
            [
                "sniffles_vcf",
                "P"
            ]
        ],
        "gives": [
            [
                "sniffles_vcf_length",
                "P"
            ],
            [
                "sniffles_vcf_carriers",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "svim_filtered_vcf\n    .map { file -> tuple(file.baseName, file) }\n    .into { svim_filtered_vcf_length; svim_filtered_vcf_carriers}",
        "origin": [
            [
                "svim_filtered_vcf",
                "P"
            ]
        ],
        "gives": [
            [
                "svim_filtered_vcf_length",
                "P"
            ],
            [
                "svim_filtered_vcf_carriers",
                "P"
            ]
        ]
    }
}
{
    "OPERATION_1": {
        "string": "Channel\n        .fromPath(params.input, checkIfExists: true)                                           \n        .map { file -> tuple(file.name.replaceAll(\".bam\",''), file) }                                      \n        .into { bam_files_check; \n                bam_files_flagstats;\n                bam_files_idxstats;\n                bam_files_stats;\n                bam_files_fastqc }",
        "origin": [
            [
                "params.input, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "bam_files_check",
                "P"
            ],
            [
                "bam_files_flagstats",
                "P"
            ],
            [
                "bam_files_idxstats",
                "P"
            ],
            [
                "bam_files_stats",
                "P"
            ],
            [
                "bam_files_fastqc",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n        .fromPath(params.input, checkIfExists: true)                                           \n        .map { file -> tuple(file.name.replaceAll(\".bam\",''), file) }                                      \n        .into { bam_chr;\n                bam_files_flagstats;\n                bam_files_idxstats;\n                bam_files_stats;\n                bam_files_fastqc}",
        "origin": [
            [
                "params.input, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "bam_chr",
                "P"
            ],
            [
                "bam_files_flagstats",
                "P"
            ],
            [
                "bam_files_idxstats",
                "P"
            ],
            [
                "bam_files_stats",
                "P"
            ],
            [
                "bam_files_fastqc",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "summary.collect { k,v -> \"${k.padRight(26)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_4": {
        "string": "unmap_unmap_bam.join(map_unmap_bam, remainder: true)\n               .join(unmap_map_bam, remainder: true)\n               .set{ all_unmapped_bam }",
        "origin": [
            [
                "unmap_unmap_bam",
                "P"
            ]
        ],
        "gives": [
            [
                "all_unmapped_bam",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "reads_mapped.join(reads_unmapped, remainder: true)\n            .map{\n              row -> tuple(row[0], row[1][0], row[1][1], row[2][0], row[2][1])\n            }\n            .set{ all_fastq }",
        "origin": [
            [
                "reads_mapped",
                "P"
            ]
        ],
        "gives": [
            [
                "all_fastq",
                "P"
            ]
        ]
    }
}
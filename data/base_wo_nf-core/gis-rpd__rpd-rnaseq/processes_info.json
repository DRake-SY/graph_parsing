{
    "readunit_merge": {
        "name_process": "readunit_merge",
        "string_process": "\nprocess readunit_merge {\n  tag { \"Merge readunit fastq for each $sample_id\" }\n  input:\n    set sample_id, file(reads) from raw_fastq_ch\n  output:\n    set sample_id, file(\"*fastq.gz\") into merged_fastq_ch, fastqc_ch\n  script:\n    if (params.singleEnd) {\n      \"\"\"\n      ls ${reads} | grep \"_R1_\" | sort | xargs cat > ${sample_id}_R1.fastq.gz;\n      \"\"\"\n    }\n    else {\n      \"\"\"\n      ls ${reads} | grep \"_R1_\" | sort | xargs cat > ${sample_id}_R1.fastq.gz;\n      ls ${reads} | grep \"_R2_\" | sort | xargs cat > ${sample_id}_R2.fastq.gz;\n      \"\"\"\n  }\n}",
        "nb_lignes_process": 18,
        "string_script": "    if (params.singleEnd) {\n      \"\"\"\n      ls ${reads} | grep \"_R1_\" | sort | xargs cat > ${sample_id}_R1.fastq.gz;\n      \"\"\"\n    }\n    else {\n      \"\"\"\n      ls ${reads} | grep \"_R1_\" | sort | xargs cat > ${sample_id}_R1.fastq.gz;\n      ls ${reads} | grep \"_R2_\" | sort | xargs cat > ${sample_id}_R2.fastq.gz;\n      \"\"\"\n  }",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "raw_fastq_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "merged_fastq_ch",
            "fastqc_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "gis-rpd__rpd-rnaseq",
        "directive": [
            "tag { \"Merge readunit fastq for each $sample_id\" }"
        ],
        "when": "",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    tag {\"FastQC for $sample_id\"}\n    publishDir \"${params.publishdir}/fastqc\", mode: 'copy',\n    saveAs: {filename ->\n              if (filename.indexOf(\"fastqc.{zip,html}\") > 0) \"$filename\"\n              else null\n        }\n    input:\n    set sample_id, file(reads) from fastqc_ch \n    output:\n    set sample_id, file(\"*_fastqc.{zip,html}\") into fastqc_results\n    set sample_id, file(\"fq.gz_count\"), file(reads) into fastqc_out_ch\n    script:\n    \"\"\"\n    fastqc -q $reads\n    count=\\$(zcat *R1.fastq.gz | wc -l);\n    touch fq.gz_count\n    echo \\${count} >> fq.gz_count\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    fastqc -q $reads\n    count=\\$(zcat *R1.fastq.gz | wc -l);\n    touch fq.gz_count\n    echo \\${count} >> fq.gz_count\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "fastqc_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc_results",
            "fastqc_out_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "gis-rpd__rpd-rnaseq",
        "directive": [
            "tag {\"FastQC for $sample_id\"}",
            "publishDir \"${params.publishdir}/fastqc\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\"fastqc.{zip,html}\") > 0) \"$filename\" else null }"
        ],
        "when": "",
        "stub": ""
    },
    "trim_galore": {
        "name_process": "trim_galore",
        "string_process": " process trim_galore {\n    tag {\"Trimgalore for $sample_id\"}\n    publishDir \"${params.publishdir}/trimgalore\", mode: 'copy',\n    saveAs: {filename ->\n              if (filename.indexOf(\"fastqc.zip\") > 0) \"fastqc/$filename\"\n              else if (filename.indexOf(\"trimming_report.txt\") > 0) \"logs/$filename\"\n              else if (params.saveTrimmed) filename\n              else null\n          }\n    input:\n      set sample_id, file(reads) from merged_fastq_ch  \n    output:\n      set sample_id, file(\"fq.gz_count\"), file(\"*fq.gz\") into trim_fastq\n      file \"*trimming_report.txt\" into trim_fastqc_results\n      file \"*_fastqc.{zip,html}\" into trim_fastqc\n    script:\n      c_r1 = clip_r1 > 0 ? \"--clip_r1 ${clip_r1}\" : ''\n      c_r2 = clip_r2 > 0 ? \"--clip_r2 ${clip_r2}\" : ''\n      tpc_r1 = three_prime_clip_r1 > 0 ? \"--three_prime_clip_r1 ${three_prime_clip_r1}\" : ''\n      tpc_r2 = three_prime_clip_r2 > 0 ? \"--three_prime_clip_r2 ${three_prime_clip_r2}\" : ''\n      if (params.singleEnd) {\n        \"\"\"\n        trim_galore --fastqc  --gzip $c_r1 $tpc_r1 $reads\n        count=\\$(zcat *R1_trimmed.fq.gz | wc -l);\n        touch fq.gz_count\n        echo \\${count} >> fq.gz_count\n        \"\"\"\n      } else {\n        \"\"\"\n        trim_galore --paired --fastqc --gzip $c_r1 $c_r2 $tpc_r1 $tpc_r2 $reads\n        count=\\$(zcat *val_1.fq.gz | wc -l);\n        touch fq.gz_count\n        echo \\${count} >> fq.gz_count\n        \"\"\"\n      }\n  }",
        "nb_lignes_process": 34,
        "string_script": "      c_r1 = clip_r1 > 0 ? \"--clip_r1 ${clip_r1}\" : ''\n      c_r2 = clip_r2 > 0 ? \"--clip_r2 ${clip_r2}\" : ''\n      tpc_r1 = three_prime_clip_r1 > 0 ? \"--three_prime_clip_r1 ${three_prime_clip_r1}\" : ''\n      tpc_r2 = three_prime_clip_r2 > 0 ? \"--three_prime_clip_r2 ${three_prime_clip_r2}\" : ''\n      if (params.singleEnd) {\n        \"\"\"\n        trim_galore --fastqc  --gzip $c_r1 $tpc_r1 $reads\n        count=\\$(zcat *R1_trimmed.fq.gz | wc -l);\n        touch fq.gz_count\n        echo \\${count} >> fq.gz_count\n        \"\"\"\n      } else {\n        \"\"\"\n        trim_galore --paired --fastqc --gzip $c_r1 $c_r2 $tpc_r1 $tpc_r2 $reads\n        count=\\$(zcat *val_1.fq.gz | wc -l);\n        touch fq.gz_count\n        echo \\${count} >> fq.gz_count\n        \"\"\"\n      }",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "merged_fastq_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trim_fastq",
            "trim_fastqc_results",
            "trim_fastqc"
        ],
        "nb_outputs": 3,
        "name_workflow": "gis-rpd__rpd-rnaseq",
        "directive": [
            "tag {\"Trimgalore for $sample_id\"}",
            "publishDir \"${params.publishdir}/trimgalore\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\"fastqc.zip\") > 0) \"fastqc/$filename\" else if (filename.indexOf(\"trimming_report.txt\") > 0) \"logs/$filename\" else if (params.saveTrimmed) filename else null }"
        ],
        "when": "",
        "stub": ""
    },
    "star": {
        "name_process": "star",
        "string_process": "\nprocess star {\n    tag {\"star mapping for $sample_id\"}\n    publishDir \"${params.publishdir}/STAR\", mode: 'copy',\n    saveAs: {filename ->\n              if (filename.indexOf(\"out.bam\") > 0) \"bam/$filename\"\n              else if (filename.indexOf(\"out.bg\") > 0) \"bam/$filename\"\n              else if (filename.indexOf(\"ReadsPerGene.out.tab\") > 0) \"count/$filename\"\n              else if (filename.indexOf(\"Log.final.out\") > 0) \"logs/$filename\"\n              else if (filename.indexOf(\"SJ.out.tab\") > 0) \"logs/$filename\"\n              else if (filename.indexOf(\"Log.out\") > 0) \"logs/$filename\"\n              else if (filename.indexOf(\"Log.progress.out\") > 0) \"logs/$filename\"\n              else null\n          }\n    input:\n      set sample_id, file(count), file(reads) from fastq_input_ch\n      file (ref_staridx)\n      file (star_gtf)\n    output:\n      set sample_id, file(\"*Log.final.out\"), file (\"${sample_id}_Aligned.sortedByCoord.out.bam\"), file (\"${sample_id}_Aligned.toTranscriptome.out.bam\") into star_aligned\n      file \"*.out\" into alignment_logs\n      file \"*SJ.out.tab\"\n      file \"*Log.out\" into star_log\n      file \"*ReadsPerGene.out.tab\"\n      file \"*Unique.str*.out.bg\"\n      file \"*Log.progress.out\"\n    script:\n    outFilterMultimapNmax_val = outFilterMultimapNmax > 0 ? \"--outFilterMultimapNmax ${outFilterMultimapNmax}\" : ' --outFilterMultimapNmax 1'\n      \"\"\"\n      STAR --genomeDir $ref_staridx \\\\\n          --readFilesIn $reads \\\\\n          --runThreadN ${task.cpus} \\\\\n          --readFilesCommand zcat \\\\\n          --runDirPerm All_RWX \\\\\n          --outFilterType BySJout \\\\\n          --outSAMtype BAM SortedByCoordinate \\\\\n          --quantMode TranscriptomeSAM GeneCounts \\\\\n          --outSAMattributes NH HI AS nM NM MD \\\\\n          --outBAMsortingThreadN ${task.cpus} \\\\\n          ${outFilterMultimapNmax_val} \\\\\n          --outFilterMismatchNmax 999 \\\\\n          --outFilterMismatchNoverLmax 0.04 \\\\\n          --alignEndsType EndToEnd \\\\\n          --alignSJoverhangMin 8 \\\\\n          --alignSJDBoverhangMin 1 \\\\\n          --alignIntronMin 20 \\\\\n          --alignIntronMax 1000000 \\\\\n          --alignMatesGapMax 1000000 \\\\\n          --limitBAMsortRAM 2001634664 \\\\\n          --outWigType bedGraph \\\\\n          --outFileNamePrefix ${sample_id}_ \\\\\n      \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    outFilterMultimapNmax_val = outFilterMultimapNmax > 0 ? \"--outFilterMultimapNmax ${outFilterMultimapNmax}\" : ' --outFilterMultimapNmax 1'\n      \"\"\"\n      STAR --genomeDir $ref_staridx \\\\\n          --readFilesIn $reads \\\\\n          --runThreadN ${task.cpus} \\\\\n          --readFilesCommand zcat \\\\\n          --runDirPerm All_RWX \\\\\n          --outFilterType BySJout \\\\\n          --outSAMtype BAM SortedByCoordinate \\\\\n          --quantMode TranscriptomeSAM GeneCounts \\\\\n          --outSAMattributes NH HI AS nM NM MD \\\\\n          --outBAMsortingThreadN ${task.cpus} \\\\\n          ${outFilterMultimapNmax_val} \\\\\n          --outFilterMismatchNmax 999 \\\\\n          --outFilterMismatchNoverLmax 0.04 \\\\\n          --alignEndsType EndToEnd \\\\\n          --alignSJoverhangMin 8 \\\\\n          --alignSJDBoverhangMin 1 \\\\\n          --alignIntronMin 20 \\\\\n          --alignIntronMax 1000000 \\\\\n          --alignMatesGapMax 1000000 \\\\\n          --limitBAMsortRAM 2001634664 \\\\\n          --outWigType bedGraph \\\\\n          --outFileNamePrefix ${sample_id}_ \\\\\n      \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "fastq_input_ch",
            "ref_staridx",
            "star_gtf"
        ],
        "nb_inputs": 3,
        "outputs": [
            "star_aligned",
            "alignment_logs",
            "star_log"
        ],
        "nb_outputs": 3,
        "name_workflow": "gis-rpd__rpd-rnaseq",
        "directive": [
            "tag {\"star mapping for $sample_id\"}",
            "publishDir \"${params.publishdir}/STAR\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\"out.bam\") > 0) \"bam/$filename\" else if (filename.indexOf(\"out.bg\") > 0) \"bam/$filename\" else if (filename.indexOf(\"ReadsPerGene.out.tab\") > 0) \"count/$filename\" else if (filename.indexOf(\"Log.final.out\") > 0) \"logs/$filename\" else if (filename.indexOf(\"SJ.out.tab\") > 0) \"logs/$filename\" else if (filename.indexOf(\"Log.out\") > 0) \"logs/$filename\" else if (filename.indexOf(\"Log.progress.out\") > 0) \"logs/$filename\" else null }"
        ],
        "when": "",
        "stub": ""
    },
    "collectRnaSeqMetrics": {
        "name_process": "collectRnaSeqMetrics",
        "string_process": "\nprocess collectRnaSeqMetrics {\n  tag {\"picard collectRnaSeqMetrics for $sample_id\"}\n  publishDir \"${params.publishdir}/RnaSeqMetrics\", mode: 'copy'\n  input:\n    set sample_id, file(log), file (sorted_bam), file(transcriptome_bam) from collectRnaSeqMetrics\n    file (refflat)\n  output:\n    set sample_id, file(\"${sample_id}_RNA_Metrics.txt\") into picard_metrics\n  script:\n    def arg = ''\n    if ( params.singleEnd || forward_stranded ) {\n      arg = 'STRAND_SPECIFICITY=FIRST_READ_TRANSCRIPTION_STRAND'\n    } else if (reverse_stranded) {\n      arg = 'STRAND_SPECIFICITY=SECOND_READ_TRANSCRIPTION_STRAND'\n    } else {\n      arg = 'STRAND_SPECIFICITY=NONE'\n    }\n    \"\"\"\n    picard -Dsamjdk.compression_level=2  -XX:-UseGCOverheadLimit -Xms4000m -Xmx${task.memory.toGiga()}G \\\n      -XX:ConcGCThreads=${task.cpus} -XX:+UseConcMarkSweepGC -XX:ParallelGCThreads=${task.cpus} \\\n      CollectRnaSeqMetrics \\\n      I=${sorted_bam} \\\n      O=${sample_id}_RNA_Metrics.txt \\\n      REF_FLAT=${refflat} \\\n      ${arg}\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def arg = ''\n    if ( params.singleEnd || forward_stranded ) {\n      arg = 'STRAND_SPECIFICITY=FIRST_READ_TRANSCRIPTION_STRAND'\n    } else if (reverse_stranded) {\n      arg = 'STRAND_SPECIFICITY=SECOND_READ_TRANSCRIPTION_STRAND'\n    } else {\n      arg = 'STRAND_SPECIFICITY=NONE'\n    }\n    \"\"\"\n    picard -Dsamjdk.compression_level=2  -XX:-UseGCOverheadLimit -Xms4000m -Xmx${task.memory.toGiga()}G \\\n      -XX:ConcGCThreads=${task.cpus} -XX:+UseConcMarkSweepGC -XX:ParallelGCThreads=${task.cpus} \\\n      CollectRnaSeqMetrics \\\n      I=${sorted_bam} \\\n      O=${sample_id}_RNA_Metrics.txt \\\n      REF_FLAT=${refflat} \\\n      ${arg}\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "ARG",
            "Picard"
        ],
        "tools_url": [
            "https://bio.tools/ARG",
            "https://bio.tools/picard_tools"
        ],
        "tools_dico": [
            {
                "name": "ARG",
                "uri": "https://bio.tools/ARG",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Essential dynamics"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "PCA"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "Principal modes"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3891",
                                    "term": "ED"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> LOW CONFIDENCE! | Identification of discriminatory antibiotic resistance genes among environmental resistomes using extremely randomized tree algorithm | Extract discriminatory ARGs from metagenomics samples",
                "homepage": "https://github.com/gaarangoa/ExtrARG"
            },
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            }
        ],
        "inputs": [
            "collectRnaSeqMetrics",
            "refflat"
        ],
        "nb_inputs": 2,
        "outputs": [
            "picard_metrics"
        ],
        "nb_outputs": 1,
        "name_workflow": "gis-rpd__rpd-rnaseq",
        "directive": [
            "tag {\"picard collectRnaSeqMetrics for $sample_id\"}",
            "publishDir \"${params.publishdir}/RnaSeqMetrics\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "rseqc": {
        "name_process": "rseqc",
        "string_process": "\nprocess rseqc {\n  tag {\"rseqc for $sample_id\"}\n  publishDir \"${params.publishdir}/rseqc\", mode: 'copy',\n  saveAs: {filename ->\n            if (filename.indexOf(\"bam_stat.txt\") > 0)    \"bam_stat/$filename\"\n            else if (filename.indexOf(\"_distribution.txt\") > 0)  \"read_distribution/$filename\"\n            else if (filename.indexOf(\"read_duplication.pos.DupRate.xls\") > 0)  \"read_duplication/dup_pos/$filename\"\n            else if (filename.indexOf(\"read_duplication.seq.DupRate.xls\") > 0)  \"read_duplication/dup_seq/$filename\"\n            else if (filename.indexOf(\"plot.pdf\") > 0)  \"$filename\"\n            else if (filename.indexOf(\"duplication.DupRate_plot.r\") > 0)  \"read_duplication/rscripts/$filename\"\n            else null\n        }\n  input:\n    set sample_id, file(log), file (bam_rseqc), file(ranscriptome_bam) from bam_rseqc\n    file (gtf_bed)\n  output:\n    file \"*.{txt,pdf,r,xls}\" into rseqc_results\n  when:\n    ! params.skip_qc\n  script:\n    \"\"\"\n    #infer_experiment.py -i $bam_rseqc -r $gtf_bed > ${bam_rseqc.baseName}.infer_experiment.txt\n    #junction_annotation.py -i $bam_rseqc -o ${bam_rseqc.baseName}.rseqc -r $gtf_bed    \n    #junction_saturation.py -i $bam_rseqc -o ${bam_rseqc.baseName}.rseqc -r $gtf_bed 2> ${bam_rseqc.baseName}.junction_annotation_log.txt\n    #inner_distance.py -i $bam_rseqc -o ${bam_rseqc.baseName}.rseqc -r $gtf_bed\n    bam_stat.py -i $bam_rseqc 2> ${bam_rseqc.baseName}.bam_stat.txt\n    samtools index $bam_rseqc\n    read_distribution.py -i $bam_rseqc -r $gtf_bed > ${bam_rseqc.baseName}.read_distribution.txt\n    read_duplication.py -i $bam_rseqc -o ${bam_rseqc.baseName}.read_duplication\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    #infer_experiment.py -i $bam_rseqc -r $gtf_bed > ${bam_rseqc.baseName}.infer_experiment.txt\n    #junction_annotation.py -i $bam_rseqc -o ${bam_rseqc.baseName}.rseqc -r $gtf_bed    \n    #junction_saturation.py -i $bam_rseqc -o ${bam_rseqc.baseName}.rseqc -r $gtf_bed 2> ${bam_rseqc.baseName}.junction_annotation_log.txt\n    #inner_distance.py -i $bam_rseqc -o ${bam_rseqc.baseName}.rseqc -r $gtf_bed\n    bam_stat.py -i $bam_rseqc 2> ${bam_rseqc.baseName}.bam_stat.txt\n    samtools index $bam_rseqc\n    read_distribution.py -i $bam_rseqc -r $gtf_bed > ${bam_rseqc.baseName}.read_distribution.txt\n    read_duplication.py -i $bam_rseqc -o ${bam_rseqc.baseName}.read_duplication\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_rseqc",
            "gtf_bed"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rseqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "gis-rpd__rpd-rnaseq",
        "directive": [
            "tag {\"rseqc for $sample_id\"}",
            "publishDir \"${params.publishdir}/rseqc\", mode: 'copy' , saveAs: {filename -> if (filename.indexOf(\"bam_stat.txt\") > 0) \"bam_stat/$filename\" else if (filename.indexOf(\"_distribution.txt\") > 0) \"read_distribution/$filename\" else if (filename.indexOf(\"read_duplication.pos.DupRate.xls\") > 0) \"read_duplication/dup_pos/$filename\" else if (filename.indexOf(\"read_duplication.seq.DupRate.xls\") > 0) \"read_duplication/dup_seq/$filename\" else if (filename.indexOf(\"plot.pdf\") > 0) \"$filename\" else if (filename.indexOf(\"duplication.DupRate_plot.r\") > 0) \"read_duplication/rscripts/$filename\" else null }"
        ],
        "when": "! params.skip_qc",
        "stub": ""
    },
    "createBigWig": {
        "name_process": "createBigWig",
        "string_process": "\nprocess createBigWig {\n    tag {\"createBigWig for $sample_id\"}\n    publishDir  \"${params.publishdir}/bigwig\", mode: 'copy'\n    when:\n    !params.skip_qc\n    input:\n    set sample_id, file(log), file (bam_createBigWig), file(ranscriptome_bam) from bam_createBigWig\n    output:\n    file \"*.bw\" into bigwig_for_genebody\n    script:\n    \"\"\"\n    samtools index $bam_createBigWig\n    #bamCoverage -b $bam_createBigWig -p ${task.cpus} -o ${sample_id}.bigwig\n    bamCoverage -b $bam_createBigWig -p ${task.cpus} --filterRNAstrand forward -o ${sample_id}_rev.bw\n    bamCoverage -b $bam_createBigWig -p ${task.cpus} --filterRNAstrand reverse -o ${sample_id}_fwd.bw\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    samtools index $bam_createBigWig\n    #bamCoverage -b $bam_createBigWig -p ${task.cpus} -o ${sample_id}.bigwig\n    bamCoverage -b $bam_createBigWig -p ${task.cpus} --filterRNAstrand forward -o ${sample_id}_rev.bw\n    bamCoverage -b $bam_createBigWig -p ${task.cpus} --filterRNAstrand reverse -o ${sample_id}_fwd.bw\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "bam_createBigWig"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bigwig_for_genebody"
        ],
        "nb_outputs": 1,
        "name_workflow": "gis-rpd__rpd-rnaseq",
        "directive": [
            "tag {\"createBigWig for $sample_id\"}",
            "publishDir \"${params.publishdir}/bigwig\", mode: 'copy'"
        ],
        "when": "!params.skip_qc",
        "stub": ""
    },
    "rsem": {
        "name_process": "rsem",
        "string_process": "\nprocess rsem {\n  tag {\"rsem for $sample_id\"}\n  publishDir \"${params.publishdir}/rsem\", mode: 'copy'\ninput:\n    set sample_id, file(log), file (bam_rseqc), file(ranscriptome_bam) from bam_rsem\n    val (rsemidx)\n    output:\n    set sample_id, file(\"${sample_id}.isoforms.results\"), file(\"${sample_id}.genes.results\"), file(\"${sample_id}.pdf\"), file(\"${sample_id}.stat\") into rsem_results\n    script:\n    if (params.singleEnd) {\n      fragment_length_mean_val = fragment_length_mean > 0 ? \"--fragment-length-mean ${fragment_length_mean}\" : ''\n      fragment_length_sd_val = fragment_length_sd > 0 ? \"--fragment-length-sd ${fragment_length_sd}\" : ''\n      } else {\n        fragment_length_mean_val = ''\n        fragment_length_sd_val = ''\n    }\n    def st_single_cell_prior = ''\n    if (single_cell_prior) {\n      st_single_cell_prior = \"--single-cell-prior\"\n    }\n    def calc_ci = ''\n    if (params.calc_ci) {\n      calc_ci = \"--calc-ci --ci-memory ${task.memory.toGiga()}\"\n    }\n    def rnastrandness = ''\n    if (forward_stranded) {\n        rnastrandness = '--strandedness forward'\n    } else if (reverse_stranded) {\n        rnastrandness = '--strandedness reverse'\n    }\n    def pairedend = ''\n    if ( !params.singleEnd ) {\n        pairedend = '--paired-end'\n    }\n    \"\"\"\n    rsem-calculate-expression \\\n      --alignments \\\n      ${pairedend} \\\n      ${rnastrandness} \\\n      -p ${task.cpus} \\\n      --append-names \\\n      --seed 12345 \\\n      ${st_single_cell_prior} \\\n      ${calc_ci} \\\n      --output-genome-bam \\\n      --sort-bam-by-coordinate \\\n      --estimate-rspd \\\n      ${fragment_length_mean_val} ${fragment_length_sd_val} \\\n      ${ranscriptome_bam} \\\n      ${rsemidx} ${sample_id};\n    rsem-plot-model ${sample_id} ${sample_id}.pdf    \n    \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    if (params.singleEnd) {\n      fragment_length_mean_val = fragment_length_mean > 0 ? \"--fragment-length-mean ${fragment_length_mean}\" : ''\n      fragment_length_sd_val = fragment_length_sd > 0 ? \"--fragment-length-sd ${fragment_length_sd}\" : ''\n      } else {\n        fragment_length_mean_val = ''\n        fragment_length_sd_val = ''\n    }\n    def st_single_cell_prior = ''\n    if (single_cell_prior) {\n      st_single_cell_prior = \"--single-cell-prior\"\n    }\n    def calc_ci = ''\n    if (params.calc_ci) {\n      calc_ci = \"--calc-ci --ci-memory ${task.memory.toGiga()}\"\n    }\n    def rnastrandness = ''\n    if (forward_stranded) {\n        rnastrandness = '--strandedness forward'\n    } else if (reverse_stranded) {\n        rnastrandness = '--strandedness reverse'\n    }\n    def pairedend = ''\n    if ( !params.singleEnd ) {\n        pairedend = '--paired-end'\n    }\n    \"\"\"\n    rsem-calculate-expression \\\n      --alignments \\\n      ${pairedend} \\\n      ${rnastrandness} \\\n      -p ${task.cpus} \\\n      --append-names \\\n      --seed 12345 \\\n      ${st_single_cell_prior} \\\n      ${calc_ci} \\\n      --output-genome-bam \\\n      --sort-bam-by-coordinate \\\n      --estimate-rspd \\\n      ${fragment_length_mean_val} ${fragment_length_sd_val} \\\n      ${ranscriptome_bam} \\\n      ${rsemidx} ${sample_id};\n    rsem-plot-model ${sample_id} ${sample_id}.pdf    \n    \"\"\"",
        "nb_lignes_script": 42,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_rsem",
            "rsemidx"
        ],
        "nb_inputs": 2,
        "outputs": [
            "rsem_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "gis-rpd__rpd-rnaseq",
        "directive": [
            "tag {\"rsem for $sample_id\"}",
            "publishDir \"${params.publishdir}/rsem\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n  tag \"Running MultiQC for sample\"\n  publishDir \"${params.publishdir}/MultiQC\", mode: 'copy'\n  input:\n    file multiqc_config\n    file ('fastqc/*') from fastqc_ch_test.toList()\n    file ('alignment/*') from alignment_logs.collect().ifEmpty([])\n    file ('rseqc/*') from rseqc_results.collect().ifEmpty([])\n    file ('rsem/*') from rsem_results.collect().ifEmpty([])\n    file('RnaSeqMetrics/*RNA_Metrics.txt') from picard_metrics\n  output:\n    file '*multiqc_report.html' into multiqc_report\n    file '*_data' into multiqc_data\n  script:\n  \"\"\"\n  multiqc . -m rseqc  -m star -m cutadapt -m fastqc -m rsem -m picard -m rsem --config $multiqc_config\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  multiqc . -m rseqc  -m star -m cutadapt -m fastqc -m rsem -m picard -m rsem --config $multiqc_config\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_config",
            "fastqc_ch_test",
            "alignment_logs",
            "rseqc_results",
            "rsem_results",
            "picard_metrics"
        ],
        "nb_inputs": 6,
        "outputs": [
            "multiqc_report",
            "multiqc_data"
        ],
        "nb_outputs": 2,
        "name_workflow": "gis-rpd__rpd-rnaseq",
        "directive": [
            "tag \"Running MultiQC for sample\"",
            "publishDir \"${params.publishdir}/MultiQC\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
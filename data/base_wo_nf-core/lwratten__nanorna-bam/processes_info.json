{
    "CheckSampleSheet": {
        "name_process": "CheckSampleSheet",
        "string_process": "\nprocess CheckSampleSheet {\n    tag \"$name\"\n    publishDir \"${params.outdir}\", mode: 'copy'\n\n    input:\n    file samplesheet from ch_input\n\n    output:\n    file \"*.csv\" into ch_samplesheet_reformat\n\n    script:\n    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet_reformat.csv\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet_reformat.csv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_input"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_samplesheet_reformat"
        ],
        "nb_outputs": 1,
        "name_workflow": "lwratten__nanorna-bam",
        "directive": [
            "tag \"$name\"",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "StringTie2": {
        "name_process": "StringTie2",
        "string_process": "\nprocess StringTie2 {\n    publishDir \"${params.outdir}/stringtie2\", mode: 'copy',\n        saveAs: { filename ->\n                      if (!filename.endsWith(\".version\")) filename\n                }\n\n    input:\n    set val(name), file(bam), file(annot) from ch_txome_reconstruction\n\n    output:\n    set val(name), file(bam), file(\"*.out.gtf\") into ch_txome_feature_count\n    file(\"*.version\") into ch_stringtie_version\n\n    script:\n    \"\"\"\n    stringtie -L -G $annot -o ${name}.out.gtf $bam\n    stringtie --version &> stringtie.version\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    stringtie -L -G $annot -o ${name}.out.gtf $bam\n    stringtie --version &> stringtie.version\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "ch_txome_reconstruction"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_txome_feature_count",
            "ch_stringtie_version"
        ],
        "nb_outputs": 2,
        "name_workflow": "lwratten__nanorna-bam",
        "directive": [
            "publishDir \"${params.outdir}/stringtie2\", mode: 'copy' , saveAs: { filename -> if (!filename.endsWith(\".version\")) filename }"
        ],
        "when": "",
        "stub": ""
    },
    "FeatureCounts": {
        "name_process": "FeatureCounts",
        "string_process": " process FeatureCounts {\n     publishDir \"${params.outdir}/featureCounts\", mode: 'copy',\n         saveAs: { filename ->\n                       if (!filename.endsWith(\".version\")) filename\n                 }\n\n     input:\n     set val(name), file(bam), file(annot) from ch_feature_count\n\n     output:\n     file(\"*.txt\") into ch_counts\n     file(\"*.version\") into ch_feat_counts_version\n\n     script:\n     txome_recon = (annot =~ /\\.out\\.gtf/) ? \".tx_recon\" : \"\"\n     \"\"\"\n     featureCounts -T $task.cpus -a $annot -o ${name}${txome_recon}.counts.txt $bam\n     featureCounts -v &> featureCounts.version\n     \"\"\"\n }",
        "nb_lignes_process": 18,
        "string_script": "     txome_recon = (annot =~ /\\.out\\.gtf/) ? \".tx_recon\" : \"\"\n     \"\"\"\n     featureCounts -T $task.cpus -a $annot -o ${name}${txome_recon}.counts.txt $bam\n     featureCounts -v &> featureCounts.version\n     \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "ch_feature_count"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_counts",
            "ch_feat_counts_version"
        ],
        "nb_outputs": 2,
        "name_workflow": "lwratten__nanorna-bam",
        "directive": [
            "publishDir \"${params.outdir}/featureCounts\", mode: 'copy' , saveAs: { filename -> if (!filename.endsWith(\".version\")) filename }"
        ],
        "when": "",
        "stub": ""
    },
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    publishDir \"${params.outdir}/pipeline_info\", mode: 'copy',\n        saveAs: { filename ->\n                      if (filename.indexOf(\".csv\") > 0) filename\n                      else null\n                }\n\n    input:\n    file featcts from ch_feat_counts_version.first().ifEmpty([])\n    file pycoqc from ch_stringtie_version.first().ifEmpty([])\n\n    output:\n    file 'software_versions_mqc.yaml' into software_versions_yaml\n    file \"software_versions.csv\"\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version\n    echo $workflow.nextflow.version > nextflow.version\n    scrape_software_versions.py > software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version\n    echo $workflow.nextflow.version > nextflow.version\n    scrape_software_versions.py > software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_feat_counts_version",
            "ch_stringtie_version"
        ],
        "nb_inputs": 2,
        "outputs": [
            "software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "lwratten__nanorna-bam",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: 'copy' , saveAs: { filename -> if (filename.indexOf(\".csv\") > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    }
}
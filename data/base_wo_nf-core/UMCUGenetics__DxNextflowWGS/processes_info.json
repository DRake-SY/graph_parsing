{
    "ExonCov": {
        "name_process": "ExonCov",
        "string_process": "\nprocess ExonCov {\n                                    \n    tag {\"ExonCov ${sample_id}\"}\n    label 'ExonCov'\n    shell = ['/bin/bash', '-eo', 'pipefail']\n\n    input:\n        tuple(analysis_id, sample_id, path(bam_file), path(bai_file))\n\n    script:\n        \"\"\"\n        source ${params.exoncov_path}/venv/bin/activate\n        python ${params.exoncov_path}/ExonCov.py import_bam --threads ${task.cpus} --overwrite --exon_bed ${params.dxtracks_path}/${params.exoncov_bed} ${analysis_id} WGS ${bam_file}\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        source ${params.exoncov_path}/venv/bin/activate\n        python ${params.exoncov_path}/ExonCov.py import_bam --threads ${task.cpus} --overwrite --exon_bed ${params.dxtracks_path}/${params.exoncov_bed} ${analysis_id} WGS ${bam_file}\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_file",
            "bai_file",
            "analysis_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowWGS",
        "directive": [
            "tag {\"ExonCov ${sample_id}\"}",
            "label 'ExonCov' shell = ['/bin/bash', '-eo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "QDNAseq": {
        "name_process": "QDNAseq",
        "string_process": "\nprocess QDNAseq {\n                                    \n    tag {\"QDNAseq ${sample_id}\"}\n    label 'QDNAseq'\n    container = '/hpc/diaggen/software/singularity_cache/QDNAseq_v1.9.2-HMF.1.sif'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(bam_file), path(bai_file))\n\n    output:\n        tuple(sample_id, path(\"${sample_id}.vcf\"), emit: vcf)\n        tuple(sample_id, path(\"${sample_id}.*.igv\"), emit: igv)\n        tuple(sample_id, path(\"${sample_id}.readCountsFiltered.rds\"), emit: rds)\n\n    script:\n        \"\"\"\n        Rscript ${baseDir}/assets/run_QDNAseq.R -s ${sample_id} -b ${bam_file}\n        mv readCountsFiltered.rds ${sample_id}.readCountsFiltered.rds\n        mv copynumber.igv ${sample_id}.copynumber.igv\n        mv segments.igv ${sample_id}.segments.igv\n        mv calls.igv ${sample_id}.calls.igv\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        \"\"\"\n        Rscript ${baseDir}/assets/run_QDNAseq.R -s ${sample_id} -b ${bam_file}\n        mv readCountsFiltered.rds ${sample_id}.readCountsFiltered.rds\n        mv copynumber.igv ${sample_id}.copynumber.igv\n        mv segments.igv ${sample_id}.segments.igv\n        mv calls.igv ${sample_id}.calls.igv\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_file",
            "bai_file",
            "sample_id"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowWGS",
        "directive": [
            "tag {\"QDNAseq ${sample_id}\"}",
            "label 'QDNAseq'",
            "container = '/hpc/diaggen/software/singularity_cache/QDNAseq_v1.9.2-HMF.1.sif' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "BAF": {
        "name_process": "BAF",
        "string_process": "\nprocess BAF {\n                                         \n    tag {\"BAF ${sample_id}\"}\n    label 'BAF'\n    container = '/hpc/diaggen/software/singularity_cache/baf_nextflow.sif'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        tuple(sample_id, path(vcf_file))\n\n    output:\n        tuple(sample_id, path(\"${sample_id}_BAF.txt\"), path(\"${sample_id}_BAF.pdf\"))\n\n    script:\n        \"\"\"\n        cat ${vcf_file} | bio-vcf --num-threads ${task.cpus} -i \\\n        --sfilter '!s.empty? and s.dp>=20' \\\n        --eval '[r.chrom,r.pos,r.ref+\">\"+r.alt[0]]' \\\n        --seval 'tot=s.ad.reduce(:+) ; ((tot-s.ad[0].to_f)/tot).round(2)' \\\n        > ${sample_id}_BAF.txt\n\n        Rscript ${baseDir}/assets/makeBAFplot.R ./ ${sample_id}_BAF.txt\n\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"\n        cat ${vcf_file} | bio-vcf --num-threads ${task.cpus} -i \\\n        --sfilter '!s.empty? and s.dp>=20' \\\n        --eval '[r.chrom,r.pos,r.ref+\">\"+r.alt[0]]' \\\n        --seval 'tot=s.ad.reduce(:+) ; ((tot-s.ad[0].to_f)/tot).round(2)' \\\n        > ${sample_id}_BAF.txt\n\n        Rscript ${baseDir}/assets/makeBAFplot.R ./ ${sample_id}_BAF.txt\n\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcf_file",
            "sample_id"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "UMCUGenetics__DxNextflowWGS",
        "directive": [
            "tag {\"BAF ${sample_id}\"}",
            "label 'BAF'",
            "container = '/hpc/diaggen/software/singularity_cache/baf_nextflow.sif' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "GetStatsFromFlagstat": {
        "name_process": "GetStatsFromFlagstat",
        "string_process": "\nprocess GetStatsFromFlagstat {\n                                                       \n    tag {\"GetStatsFromFlagstat\"}\n    label 'GetStatsFromFlagstat'\n    shell = ['/bin/bash', '-euo', 'pipefail']\n\n    input:\n        path(flagstat_files)\n\n    output:\n        path('run_stats.txt')\n\n    script:\n        \"\"\"\n        python ${baseDir}/assets/get_stats_from_flagstat.py ${flagstat_files} > run_stats.txt\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        python ${baseDir}/assets/get_stats_from_flagstat.py ${flagstat_files} > run_stats.txt\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "flagstat_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowWGS",
        "directive": [
            "tag {\"GetStatsFromFlagstat\"}",
            "label 'GetStatsFromFlagstat' shell = ['/bin/bash', '-euo', 'pipefail']"
        ],
        "when": "",
        "stub": ""
    },
    "VersionLog": {
        "name_process": "VersionLog",
        "string_process": "\nprocess VersionLog {\n                                                \n    tag {\"VersionLog ${analysis_id}\"}\n    label 'VersionLog'\n    shell = ['/bin/bash', '-eo', 'pipefail']\n    cache = false                                                                          \n\n    output:\n        path('repository_version.log')\n\n    script:\n        \"\"\"\n        echo 'DxNextflowWGS' > repository_version.log\n        git --git-dir=${workflow.projectDir}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n        echo 'Dx_tracks' >> repository_version.log\n        git --git-dir=${params.dxtracks_path}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n        echo 'ExonCov' >> repository_version.log\n        git --git-dir=${params.exoncov_path}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        echo 'DxNextflowWGS' > repository_version.log\n        git --git-dir=${workflow.projectDir}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n        echo 'Dx_tracks' >> repository_version.log\n        git --git-dir=${params.dxtracks_path}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n        echo 'ExonCov' >> repository_version.log\n        git --git-dir=${params.exoncov_path}/.git log --pretty=oneline --decorate -n 2 >> repository_version.log\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "UMCUGenetics__DxNextflowWGS",
        "directive": [
            "tag {\"VersionLog ${analysis_id}\"}",
            "label 'VersionLog' shell = ['/bin/bash', '-eo', 'pipefail']",
            "cache = false"
        ],
        "when": "",
        "stub": ""
    }
}
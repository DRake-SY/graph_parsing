{
    "OPERATION_1": {
        "string": "Channel\n        .fromPath(params.vcf)\n        .ifEmpty { exit 1, \"Cannot find input file : ${params.vcf}\" }\n        .set { ch_input }",
        "origin": [
            [
                "params.vcf",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_input",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n        .fromPath(params.csv)\n        .splitCsv(header:true)\n        .map{ row -> file(row.vcf) }\n        .flatten()\n        .set { ch_input }",
        "origin": [
            [
                "params.csv",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_input",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(params.pcgr_data)\n        .ifEmpty { exit 1, \"Cannot find data bundle path : ${params.pcgr_data}\" }\n        .set{ data_bundle }",
        "origin": [
            [
                "params.pcgr_data",
                "A"
            ]
        ],
        "gives": [
            [
                "data_bundle",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath(params.pcgr_config)\n    .ifEmpty { exit 1, \"Cannot find config file : ${params.pcgr_config}\" }\n    .set{ config }",
        "origin": [
            [
                "params.pcgr_config",
                "A"
            ]
        ],
        "gives": [
            [
                "config",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "data_bundle = Channel.fromPath(pcgr_data)",
        "origin": [
            [
                "pcgr_data",
                "A"
            ]
        ],
        "gives": [
            [
                "data_bundle",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "ch_reference = Channel.value(params.pcgr_genome)",
        "origin": [
            [
                "params.pcgr_genome",
                "V"
            ]
        ],
        "gives": [
            [
                "ch_reference",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ch_optional_metadata = Channel.fromPath(params.metadata)",
        "origin": [
            [
                "params.metadata",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_optional_metadata",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "getfilter = Channel.fromPath(\"${projectDir}/bin/filtervcf.py\",  type: 'file', followLinks: false)",
        "origin": [
            [
                "\"${projectDir}/bin/filtervcf.py\",  type: 'file', followLinks: false",
                "A"
            ]
        ],
        "gives": [
            [
                "getfilter",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "run_report = Channel.fromPath(\"${projectDir}/bin/report.py\",  type: 'file', followLinks: false)",
        "origin": [
            [
                "\"${projectDir}/bin/report.py\",  type: 'file', followLinks: false",
                "A"
            ]
        ],
        "gives": [
            [
                "run_report",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "pcgr_toml_config = Channel.value(file(params.pcgr_config))",
        "origin": [],
        "gives": [
            [
                "pcgr_toml_config",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "pcgr_toml_config = Channel.fromPath(\"${projectDir}/bin/pcgr.toml\", type: 'file', followLinks: false)",
        "origin": [
            [
                "\"${projectDir}/bin/pcgr.toml\", type: 'file', followLinks: false",
                "A"
            ]
        ],
        "gives": [
            [
                "pcgr_toml_config",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "combine_tables = Channel.fromPath(\"${projectDir}/bin/combine.py\",  type: 'file', followLinks: false)",
        "origin": [
            [
                "\"${projectDir}/bin/combine.py\",  type: 'file', followLinks: false",
                "A"
            ]
        ],
        "gives": [
            [
                "combine_tables",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "pivot_gene_simple_py = Channel.fromPath(\"${projectDir}/bin/pivot_gene_simple.py\",  type: 'file', followLinks: false)",
        "origin": [
            [
                "\"${projectDir}/bin/pivot_gene_simple.py\",  type: 'file', followLinks: false",
                "A"
            ]
        ],
        "gives": [
            [
                "pivot_gene_simple_py",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "pivot_gene_complete_py = Channel.fromPath(\"${projectDir}/bin/pivot_gene_complete.py\",  type: 'file', followLinks: false)",
        "origin": [
            [
                "\"${projectDir}/bin/pivot_gene_complete.py\",  type: 'file', followLinks: false",
                "A"
            ]
        ],
        "gives": [
            [
                "pivot_gene_complete_py",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "pivot_variant_py = Channel.fromPath(\"${projectDir}/bin/pivot_variant.py\",  type: 'file', followLinks: false)",
        "origin": [
            [
                "\"${projectDir}/bin/pivot_variant.py\",  type: 'file', followLinks: false",
                "A"
            ]
        ],
        "gives": [
            [
                "pivot_variant_py",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "plot_tiers_py = Channel.fromPath(\"${projectDir}/bin/tiers_plot.py\",  type: 'file', followLinks: false)",
        "origin": [
            [
                "\"${projectDir}/bin/tiers_plot.py\",  type: 'file', followLinks: false",
                "A"
            ]
        ],
        "gives": [
            [
                "plot_tiers_py",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "summary.collect { k,v -> \"${k.padRight(20)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_18": {
        "string": "ch_vcf_for_pcgr = ch_input",
        "origin": [
            [
                "ch_input",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_vcf_for_pcgr",
                "P"
            ]
        ]
    }
}
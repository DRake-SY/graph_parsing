{
    "check_fields": {
        "name_process": "check_fields",
        "string_process": " process check_fields {\n        tag \"$input_file\"\n        label 'process_low'\n\n        publishDir \"${params.outdir}/process-logs/${task.process}/${input_file}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n        input:\n        file input_file from ch_input\n        each file(\"filtervcf.py\") from getfilter\n\n        output:\n        file input_file into ch_input_2\n        file(\"filter\") into filterstr\n        file(\"command-logs-*\") optional true\n\n        script:\n        \"\"\"\n        python filtervcf.py $input_file $params.min_qd $params.max_fs $params.max_sor $params.min_mq\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"\n    }",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        python filtervcf.py $input_file $params.min_qd $params.max_fs $params.max_sor $params.min_mq\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_input",
            "getfilter"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_input_2",
            "filterstr"
        ],
        "nb_outputs": 2,
        "name_workflow": "lifebit-ai__pcgr-nf",
        "directive": [
            "tag \"$input_file\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/${input_file}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "vcffilter": {
        "name_process": "vcffilter",
        "string_process": " process vcffilter {\n        tag \"$input_file\"\n        label 'process_low'\n\n        publishDir \"${params.outdir}/process-logs/${task.process}/${input_file}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n        input:\n        file input_file from ch_input_2\n        file filter from filterstr\n\n        output:\n        file \"*filtered.vcf\" into ch_vcf_for_pcgr\n        file(\"command-logs-*\") optional true\n\n        script:\n        \"\"\"\n        if [ -s $filter ]; then \n            echo \"No tags present in VCF for filtering\"\n            cp $input_file ${input_file.baseName}_filtered.vcf\n        else\n            vcffilter -s -f \\$(cat $filter) $input_file > ${input_file.baseName}_filtered.vcf\n        fi\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"\n    }",
        "nb_lignes_process": 25,
        "string_script": "        \"\"\"\n        if [ -s $filter ]; then \n            echo \"No tags present in VCF for filtering\"\n            cp $input_file ${input_file.baseName}_filtered.vcf\n        else\n            vcffilter -s -f \\$(cat $filter) $input_file > ${input_file.baseName}_filtered.vcf\n        fi\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "VCFFilterJS"
        ],
        "tools_url": [
            "https://bio.tools/vcffilterjs"
        ],
        "tools_dico": [
            {
                "name": "VCFFilterJS",
                "uri": "https://bio.tools/vcffilterjs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1050",
                                "term": "File name"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1050",
                                "term": "File name"
                            }
                        ]
                    }
                ],
                "description": "Filtering VCF with javascript (java rhino).",
                "homepage": "https://github.com/lindenb/jvarkit/wiki/VCFFilterJS"
            }
        ],
        "inputs": [
            "ch_input_2",
            "filterstr"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_vcf_for_pcgr"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__pcgr-nf",
        "directive": [
            "tag \"$input_file\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/${input_file}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "check_data_bundle": {
        "name_process": "check_data_bundle",
        "string_process": "\nprocess check_data_bundle {\n    label 'process_high'\n\n    publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n    input:\n    path(data) from data_bundle\n\n    output:\n    file(\"*\") into data_bundle_checked\n    file(\"command-logs-*\") optional true\n\n    script:\n    \"\"\"\n    # Check if data is compressed\n    if [[ -d $data ]]; then\n        echo \"$data is a directory\"\n        mv $data data_bundle\n    elif [[ -f $data ]]; then\n        echo \"$data is a file\"\n        data_bundle_name=`echo $data | cut -d'.' --complement -f2-`\n        echo \\$data_bundle_name\n\n        { # try compressed tar file\n            tar -xvzf $data\n        } || { # catch - not in gzip format\n            tar -xvf $data\n        }\n        mv \\$data_bundle_name data_bundle\n    fi\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    # Check if data is compressed\n    if [[ -d $data ]]; then\n        echo \"$data is a directory\"\n        mv $data data_bundle\n    elif [[ -f $data ]]; then\n        echo \"$data is a file\"\n        data_bundle_name=`echo $data | cut -d'.' --complement -f2-`\n        echo \\$data_bundle_name\n\n        { # try compressed tar file\n            tar -xvzf $data\n        } || { # catch - not in gzip format\n            tar -xvf $data\n        }\n        mv \\$data_bundle_name data_bundle\n    fi\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "data_bundle"
        ],
        "nb_inputs": 1,
        "outputs": [
            "data_bundle_checked"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__pcgr-nf",
        "directive": [
            "label 'process_high'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pcgr": {
        "name_process": "pcgr",
        "string_process": "\nprocess pcgr {\n    tag \"$input_file\"\n    label 'process_high'\n\n    publishDir \"${params.outdir}\", pattern: \"result*\", mode: 'copy'\n    publishDir \"${params.outdir}/process-logs/${task.process}/${input_file}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n    input:\n    file input_file from ch_vcf_for_pcgr\n    each path(data) from data_bundle_checked\n    each file(config_toml) from pcgr_toml_config\n    each reference from ch_reference\n\n    output:\n    file \"*_pcgr.html\" into out_pcgr\n    file \"result/*.tiers.tsv\" into pcgr_tsv\n    file \"result/*\"\n    file(\"command-logs-*\") optional true\n\n    script:\n    \"\"\"\n    # Modify config_toml pass the params\n    cp ${config_toml} new_config.toml\n\n    # Swap placeholders with user provided values\n    sed -i \"s/maf_onekg_eur_placeholder/${params.maf_onekg_eur}/g\" new_config.toml\n    sed -i \"s/maf_onekg_amr_placeholder/${params.maf_onekg_amr}/g\" new_config.toml\n    sed -i \"s/maf_onekg_afr_placeholder/${params.maf_onekg_afr}/g\" new_config.toml\n    sed -i \"s/maf_onekg_sas_placeholder/${params.maf_onekg_sas}/g\" new_config.toml\n    sed -i \"s/maf_onekg_eas_placeholder/${params.maf_onekg_eas}/g\" new_config.toml\n    sed -i \"s/maf_onekg_global_placeholder/${params.maf_onekg_global}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_nfe_placeholder/${params.maf_gnomad_nfe}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_amr_placeholder/${params.maf_gnomad_amr}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_afr_placeholder/${params.maf_gnomad_afr}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_asj_placeholder/${params.maf_gnomad_asj}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_sas_placeholder/${params.maf_gnomad_sas}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_eas_placeholder/${params.maf_gnomad_eas}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_fin_placeholder/${params.maf_gnomad_fin}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_oth_placeholder/${params.maf_gnomad_oth}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_global_placeholder/${params.maf_gnomad_global}/g\" new_config.toml\n    sed -i \"s/exclude_pon_placeholder/${params.exclude_pon}/g\" new_config.toml\n    sed -i \"s/exclude_likely_hom_germline_placeholder/${params.exclude_likely_hom_germline}/g\" new_config.toml\n    sed -i \"s/exclude_likely_het_germline_placeholder/${params.exclude_likely_het_germline}/g\" new_config.toml\n    sed -i \"s/exclude_dbsnp_nonsomatic_placeholder/${params.exclude_dbsnp_nonsomatic}/g\" new_config.toml\n    sed -i \"s/exclude_nonexonic_placeholder/${params.exclude_nonexonic}/g\" new_config.toml\n    sed -i \"s/tumor_dp_tag_placeholder/${params.tumor_dp_tag}/g\" new_config.toml\n    sed -i \"s/tumor_af_tag_placeholder/${params.tumor_af_tag}/g\" new_config.toml\n    sed -i \"s/control_dp_tag_placeholder/${params.control_dp_tag}/g\" new_config.toml\n    sed -i \"s/control_af_tag_placeholder/${params.control_af_tag}/g\" new_config.toml\n    sed -i \"s/call_conf_tag_placeholder/${params.call_conf_tag}/g\" new_config.toml\n    sed -i \"s/report_theme_placeholder/${params.report_theme}/g\" new_config.toml\n    sed -i \"s/custom_tags_placeholder/${params.custom_tags}/g\" new_config.toml\n    sed -i \"s/list_noncoding_placeholder/${params.list_noncoding}/g\" new_config.toml\n    sed -i \"s/n_vcfanno_proc_placeholder/${params.n_vcfanno_proc}/g\" new_config.toml\n    sed -i \"s/n_vep_forks_placeholder/${params.n_vep_forks}/g\" new_config.toml\n    sed -i \"s/vep_pick_order_placeholder/${params.vep_pick_order}/g\" new_config.toml\n    sed -i \"s/vep_skip_intergenic_placeholder/${params.vep_skip_intergenic}/g\" new_config.toml\n    sed -i \"s/vcf2maf_placeholder/${params.vcf2maf}/g\" new_config.toml\n\n    # Run PCGR\n    mkdir result\n    pcgr.py --tumor_site ${params.pcgr_tumor_site} --input_vcf $input_file --pcgr_dir ${data[1]} --output_dir result/ --genome_assembly $reference --conf new_config.toml --sample_id $input_file.baseName --no_vcf_validate --no-docker\n\n    # Save RMarkdown report\n    cp result/*${reference}.html ${input_file.baseName}_pcgr.html\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"\n}",
        "nb_lignes_process": 69,
        "string_script": "    \"\"\"\n    # Modify config_toml pass the params\n    cp ${config_toml} new_config.toml\n\n    # Swap placeholders with user provided values\n    sed -i \"s/maf_onekg_eur_placeholder/${params.maf_onekg_eur}/g\" new_config.toml\n    sed -i \"s/maf_onekg_amr_placeholder/${params.maf_onekg_amr}/g\" new_config.toml\n    sed -i \"s/maf_onekg_afr_placeholder/${params.maf_onekg_afr}/g\" new_config.toml\n    sed -i \"s/maf_onekg_sas_placeholder/${params.maf_onekg_sas}/g\" new_config.toml\n    sed -i \"s/maf_onekg_eas_placeholder/${params.maf_onekg_eas}/g\" new_config.toml\n    sed -i \"s/maf_onekg_global_placeholder/${params.maf_onekg_global}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_nfe_placeholder/${params.maf_gnomad_nfe}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_amr_placeholder/${params.maf_gnomad_amr}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_afr_placeholder/${params.maf_gnomad_afr}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_asj_placeholder/${params.maf_gnomad_asj}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_sas_placeholder/${params.maf_gnomad_sas}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_eas_placeholder/${params.maf_gnomad_eas}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_fin_placeholder/${params.maf_gnomad_fin}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_oth_placeholder/${params.maf_gnomad_oth}/g\" new_config.toml\n    sed -i \"s/maf_gnomad_global_placeholder/${params.maf_gnomad_global}/g\" new_config.toml\n    sed -i \"s/exclude_pon_placeholder/${params.exclude_pon}/g\" new_config.toml\n    sed -i \"s/exclude_likely_hom_germline_placeholder/${params.exclude_likely_hom_germline}/g\" new_config.toml\n    sed -i \"s/exclude_likely_het_germline_placeholder/${params.exclude_likely_het_germline}/g\" new_config.toml\n    sed -i \"s/exclude_dbsnp_nonsomatic_placeholder/${params.exclude_dbsnp_nonsomatic}/g\" new_config.toml\n    sed -i \"s/exclude_nonexonic_placeholder/${params.exclude_nonexonic}/g\" new_config.toml\n    sed -i \"s/tumor_dp_tag_placeholder/${params.tumor_dp_tag}/g\" new_config.toml\n    sed -i \"s/tumor_af_tag_placeholder/${params.tumor_af_tag}/g\" new_config.toml\n    sed -i \"s/control_dp_tag_placeholder/${params.control_dp_tag}/g\" new_config.toml\n    sed -i \"s/control_af_tag_placeholder/${params.control_af_tag}/g\" new_config.toml\n    sed -i \"s/call_conf_tag_placeholder/${params.call_conf_tag}/g\" new_config.toml\n    sed -i \"s/report_theme_placeholder/${params.report_theme}/g\" new_config.toml\n    sed -i \"s/custom_tags_placeholder/${params.custom_tags}/g\" new_config.toml\n    sed -i \"s/list_noncoding_placeholder/${params.list_noncoding}/g\" new_config.toml\n    sed -i \"s/n_vcfanno_proc_placeholder/${params.n_vcfanno_proc}/g\" new_config.toml\n    sed -i \"s/n_vep_forks_placeholder/${params.n_vep_forks}/g\" new_config.toml\n    sed -i \"s/vep_pick_order_placeholder/${params.vep_pick_order}/g\" new_config.toml\n    sed -i \"s/vep_skip_intergenic_placeholder/${params.vep_skip_intergenic}/g\" new_config.toml\n    sed -i \"s/vcf2maf_placeholder/${params.vcf2maf}/g\" new_config.toml\n\n    # Run PCGR\n    mkdir result\n    pcgr.py --tumor_site ${params.pcgr_tumor_site} --input_vcf $input_file --pcgr_dir ${data[1]} --output_dir result/ --genome_assembly $reference --conf new_config.toml --sample_id $input_file.baseName --no_vcf_validate --no-docker\n\n    # Save RMarkdown report\n    cp result/*${reference}.html ${input_file.baseName}_pcgr.html\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"",
        "nb_lignes_script": 48,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_vcf_for_pcgr",
            "data_bundle_checked",
            "pcgr_toml_config",
            "ch_reference"
        ],
        "nb_inputs": 4,
        "outputs": [
            "out_pcgr",
            "pcgr_tsv"
        ],
        "nb_outputs": 2,
        "name_workflow": "lifebit-ai__pcgr-nf",
        "directive": [
            "tag \"$input_file\"",
            "label 'process_high'",
            "publishDir \"${params.outdir}\", pattern: \"result*\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/${input_file}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "combine_tiers": {
        "name_process": "combine_tiers",
        "string_process": "\nprocess combine_tiers {\n    label \"process_low\"\n\n    publishDir \"${params.outdir}\", pattern: \"*.tsv\", mode: 'copy'\n    publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n    \n    input:\n    file tables from pcgr_tsv.collect()\n    each file(metadata) from ch_optional_metadata\n    each file(\"combine.py\") from combine_tables\n\n    output:\n    file(\"combined.tiers.tsv\") into (combined_tiers_gene_simple, combined_tiers_gene_complete, combined_tiers_variant, combined_tiers_plot)\n    file(\"command-logs-*\") optional true\n\n    script:\n    optional_metadata = params.metadata ? \"$metadata\": \"PASS\"\n    \"\"\"\n    python combine.py $optional_metadata $tables\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    optional_metadata = params.metadata ? \"$metadata\": \"PASS\"\n    \"\"\"\n    python combine.py $optional_metadata $tables\n\n    # save .command.* logs\n    ${params.savescript}\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pcgr_tsv",
            "ch_optional_metadata",
            "combine_tables"
        ],
        "nb_inputs": 3,
        "outputs": [
            ""
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__pcgr-nf",
        "directive": [
            "label \"process_low\"",
            "publishDir \"${params.outdir}\", pattern: \"*.tsv\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "report": {
        "name_process": "report",
        "string_process": " process report {\n        label 'process_low'\n\n        publishDir \"${params.outdir}/MultiQC\", mode: 'copy', pattern: \"*.html\"\n        publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n        input:\n        file report from out_pcgr.collect()\n        each file(\"report.py\") from run_report\n\n        output:\n        file \"*.html\"\n        file report\n        file(\"command-logs-*\") optional true\n\n        script:\n        \"\"\"\n        python report.py $report\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"\n    }",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        python report.py $report\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "out_pcgr",
            "run_report"
        ],
        "nb_inputs": 2,
        "outputs": [
            "report"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__pcgr-nf",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}/MultiQC\", mode: 'copy', pattern: \"*.html\"",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pivot_table_gene_simple": {
        "name_process": "pivot_table_gene_simple",
        "string_process": " process pivot_table_gene_simple {\n        label 'process_low'\n\n        publishDir \"${params.outdir}\", pattern: \"*.tsv\", mode: 'copy'\n        publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n        input:\n        file tiers from combined_tiers_gene_simple\n        each file(\"pivot_gene_simple.py\") from pivot_gene_simple_py\n\n        output:\n        file(\"pivot_gene_simple.tsv\") into pivot_tiers_gene_simple\n        file(\"command-logs-*\") optional true\n\n        script:\n        metadata_opt = params.metadata ? \"true\": \"false\"\n        \"\"\"\n        python pivot_gene_simple.py $tiers ${params.columns_genes_simple} $task.cpus $metadata_opt\n        \n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"\n    }",
        "nb_lignes_process": 21,
        "string_script": "        metadata_opt = params.metadata ? \"true\": \"false\"\n        \"\"\"\n        python pivot_gene_simple.py $tiers ${params.columns_genes_simple} $task.cpus $metadata_opt\n        \n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "combined_tiers_gene_simple",
            "pivot_gene_simple_py"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pivot_tiers_gene_simple"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__pcgr-nf",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\", pattern: \"*.tsv\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pivot_table_gene_complete": {
        "name_process": "pivot_table_gene_complete",
        "string_process": " process pivot_table_gene_complete {\n        label 'process_low'\n\n        publishDir \"${params.outdir}\", pattern: \"*.tsv\", mode: 'copy'\n        publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n        input:\n        file tiers from combined_tiers_gene_complete\n        each file(\"pivot_gene_complete.py\") from pivot_gene_complete_py\n\n        output:\n        file(\"pivot_gene_complete.tsv\") into pivot_tiers_gene_complete\n        file(\"command-logs-*\") optional true\n\n        script:\n        \"\"\"\n        python pivot_gene_complete.py $tiers ${params.columns_genes_complete} $task.cpus\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"\n    }",
        "nb_lignes_process": 20,
        "string_script": "        \"\"\"\n        python pivot_gene_complete.py $tiers ${params.columns_genes_complete} $task.cpus\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "combined_tiers_gene_complete",
            "pivot_gene_complete_py"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pivot_tiers_gene_complete"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__pcgr-nf",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\", pattern: \"*.tsv\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pivot_table_variant": {
        "name_process": "pivot_table_variant",
        "string_process": " process pivot_table_variant {\n        label 'process_low'\n\n        publishDir \"${params.outdir}\", pattern: \"*.tsv\", mode: 'copy'\n        publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n        input:\n        file tiers from combined_tiers_variant\n        each file(\"pivot_variant.py\") from pivot_variant_py\n\n        output:\n        file(\"pivot_variant.tsv\") into pivot_tiers_variant\n        file(\"command-logs-*\") optional true\n\n        script:\n        \"\"\"\n        python pivot_variant.py $tiers ${params.columns_variants} $task.cpus\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"\n    }",
        "nb_lignes_process": 20,
        "string_script": "        \"\"\"\n        python pivot_variant.py $tiers ${params.columns_variants} $task.cpus\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "combined_tiers_variant",
            "pivot_variant_py"
        ],
        "nb_inputs": 2,
        "outputs": [
            "pivot_tiers_variant"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__pcgr-nf",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\", pattern: \"*.tsv\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "plot_tiers": {
        "name_process": "plot_tiers",
        "string_process": " process plot_tiers {\n        label 'process_low'\n\n        publishDir \"${params.outdir}\", pattern: \"*.png\", mode: 'copy'\n        publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n        input:\n        file tiers from combined_tiers_plot\n        each file(\"tiers_plot.py\") from plot_tiers_py\n\n        output:\n        file(\"tiers.png\") into tiers_plot\n        file(\"command-logs-*\") optional true\n\n        script:\n        \"\"\"\n        python tiers_plot.py $tiers\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"\n    }",
        "nb_lignes_process": 20,
        "string_script": "        \"\"\"\n        python tiers_plot.py $tiers\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "combined_tiers_plot",
            "plot_tiers_py"
        ],
        "nb_inputs": 2,
        "outputs": [
            "tiers_plot"
        ],
        "nb_outputs": 1,
        "name_workflow": "lifebit-ai__pcgr-nf",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}\", pattern: \"*.png\", mode: 'copy'",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "summary": {
        "name_process": "summary",
        "string_process": " process summary {\n        label 'process_low'\n\n        publishDir \"${params.outdir}/MultiQC\", mode: 'copy', pattern: \"*.html\"\n        publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'\n\n        input:\n        file gene_table_simple from pivot_tiers_gene_simple\n        file gene_table_complete from pivot_tiers_gene_complete\n        file variant_table from pivot_tiers_variant\n        file plot_tiers from tiers_plot\n\n        output:\n        file \"multiqc_report.html\"\n        file(\"command-logs-*\") optional true\n\n        script:\n        \"\"\"\n        cp ${workflow.projectDir}/bin/* .\n        R -e \"rmarkdown::render('report.Rmd', params = list(ptable_gene_simple='${gene_table_simple}', ptable_gene_complete='${gene_table_complete}', ptable_variant='${variant_table}', pplot_tiers='${plot_tiers}'))\"\n        mv report.html multiqc_report.html\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"\n    }",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"\n        cp ${workflow.projectDir}/bin/* .\n        R -e \"rmarkdown::render('report.Rmd', params = list(ptable_gene_simple='${gene_table_simple}', ptable_gene_complete='${gene_table_complete}', ptable_variant='${variant_table}', pplot_tiers='${plot_tiers}'))\"\n        mv report.html multiqc_report.html\n\n        # save .command.* logs\n        ${params.savescript}\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pivot_tiers_gene_simple",
            "pivot_tiers_gene_complete",
            "pivot_tiers_variant",
            "tiers_plot"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "lifebit-ai__pcgr-nf",
        "directive": [
            "label 'process_low'",
            "publishDir \"${params.outdir}/MultiQC\", mode: 'copy', pattern: \"*.html\"",
            "publishDir \"${params.outdir}/process-logs/${task.process}/\", pattern: \"command-logs-*\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
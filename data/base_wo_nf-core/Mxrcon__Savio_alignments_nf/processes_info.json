{
    "GET_GENES": {
        "name_process": "GET_GENES",
        "string_process": "\nprocess GET_GENES {\n    tag \"${genomeName} - ${gene_name}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    tuple val(genomeName), path(gbkFile)\n    each gene_name\n    output:\n    tuple val(gene_name), path(\"*.fasta\")\n\n    script:\n\n    \"\"\"\n    find_genes.py ${gbkFile} ${gene_name}\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    echo \"find_genes.py ${gbkFile} ${gene_name}\"\n    touch ${genomeName}_${gene_name}.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    find_genes.py ${gbkFile} ${gene_name}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomeName",
            "gbkFile",
            "gene_name"
        ],
        "nb_inputs": 3,
        "outputs": [
            "gene_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "Mxrcon__Savio_alignments_nf",
        "directive": [
            "tag \"${genomeName} - ${gene_name}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    echo \"find_genes.py ${gbkFile} ${gene_name}\"\n    touch ${genomeName}_${gene_name}.fasta\n    \"\"\""
    },
    "DOWNLOAD_GENOMES": {
        "name_process": "DOWNLOAD_GENOMES",
        "string_process": "\nprocess DOWNLOAD_GENOMES {\n    tag \"${genomeId}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    val(genomeId)\n\n    output:\n    tuple val(genomeId), path(\"*.fa\")\n\n    script:\n    \"\"\"\n    ncbi-acc-download ${genomeId} -F fasta --api-key ${params.ncbi_apikey}\n    \"\"\"\n\n    stub:\n    \"\"\"\n    echo \"ncbi-acc-download ${genomeId} -F fasta\"\n    touch ${genomeId}.fa\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    ncbi-acc-download ${genomeId} -F fasta --api-key ${params.ncbi_apikey}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomeId"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genomeId"
        ],
        "nb_outputs": 1,
        "name_workflow": "Mxrcon__Savio_alignments_nf",
        "directive": [
            "tag \"${genomeId}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    echo \"ncbi-acc-download ${genomeId} -F fasta\"\n    touch ${genomeId}.fa\n    \"\"\""
    },
    "GET_RRNA": {
        "name_process": "GET_RRNA",
        "string_process": "\nprocess GET_RRNA {\n    tag \"${genomeName} - ${ribossomal_rna_name}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    tuple val(genomeName), path(gbkFile)\n    each ribossomal_rna_name\n    output:\n    tuple val(ribossomal_rna_name), path(\"*.fasta\")\n\n    script:\n\n    \"\"\"\n    find_ribossomal_rna.py ${gbkFile} ${ribossomal_rna_name}\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    echo \"find_ribossomal_rna.py ${genomeName} ${ribossomal_rna_name}\"\n    touch ${genomeName}_${ribossomal_rna_name}.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    find_ribossomal_rna.py ${gbkFile} ${ribossomal_rna_name}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomeName",
            "gbkFile",
            "ribossomal_rna_name"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ribossomal_rna_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "Mxrcon__Savio_alignments_nf",
        "directive": [
            "tag \"${genomeName} - ${ribossomal_rna_name}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    echo \"find_ribossomal_rna.py ${genomeName} ${ribossomal_rna_name}\"\n    touch ${genomeName}_${ribossomal_rna_name}.fasta\n    \"\"\""
    },
    "CONCATENATE_ALIGNMENTS": {
        "name_process": "CONCATENATE_ALIGNMENTS",
        "string_process": "\nprocess CONCATENATE_ALIGNMENTS {\n\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    path(\"*\")\n    output:\n    path(\"concatenated_alignments.fasta\")\n\n    script:\n\n    \"\"\"\n    concatenate.sh\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    touch concatenated_alignments.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    concatenate.sh\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Mxrcon__Savio_alignments_nf",
        "directive": [
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    touch concatenated_alignments.fasta\n    \"\"\""
    },
    "PROKKA": {
        "name_process": "PROKKA",
        "string_process": "\nprocess PROKKA {\n    tag \"${genomeName}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    tuple val(genomeName), path(fastaFile)\n    output:\n    path(\"${genomeName}\")\n    tuple val(genomeName), path(\"${genomeName}/*.gbk\"), emit: anotated_genome\n\n    script:\n\n    \"\"\"\n    prokka --outdir ${genomeName} --prefix ${genomeName} --cpus ${task.cpus} --locustag ${genomeName} ${fastaFile}\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    echo \"prokka --outdir ${genomeName} --prefix $genomeName --cpus ${task.cpus} --locustag ${genomeName} ${fastaFile}\"\n\n\n    mkdir ${genomeName}\n    touch ${genomeName}/${genomeName}.gbk\n\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    prokka --outdir ${genomeName} --prefix ${genomeName} --cpus ${task.cpus} --locustag ${genomeName} ${fastaFile}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "genomeName",
            "fastaFile"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Mxrcon__Savio_alignments_nf",
        "directive": [
            "tag \"${genomeName}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    echo \"prokka --outdir ${genomeName} --prefix $genomeName --cpus ${task.cpus} --locustag ${genomeName} ${fastaFile}\"\n\n\n    mkdir ${genomeName}\n    touch ${genomeName}/${genomeName}.gbk\n\n    \"\"\""
    },
    "ALIGN_MARKERS": {
        "name_process": "ALIGN_MARKERS",
        "string_process": "\nprocess ALIGN_MARKERS {\n    tag \"${markerName}\"\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    tuple val(markerName), path(\"*\")\n    output:\n    path(\"*aligned.fasta\")\n\n    script:\n\n    \"\"\"\n    cat *${markerName}* >> ${markerName}.fasta\n    clustalo -i ${markerName}.fasta -o ${markerName}_aligned.fasta --outfmt=fa\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    echo \"clustalo -i ${markerName}.fasta -o ${markerName}_aligned.fasta --outfmt=fa\"\n    touch ${markerName}_aligned.fasta\n\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    cat *${markerName}* >> ${markerName}.fasta\n    clustalo -i ${markerName}.fasta -o ${markerName}_aligned.fasta --outfmt=fa\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "markerName"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Mxrcon__Savio_alignments_nf",
        "directive": [
            "tag \"${markerName}\"",
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    echo \"clustalo -i ${markerName}.fasta -o ${markerName}_aligned.fasta --outfmt=fa\"\n    touch ${markerName}_aligned.fasta\n\n    \"\"\""
    },
    "RAXML": {
        "name_process": "RAXML",
        "string_process": "\nprocess RAXML {\n    publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish\n\n    input:\n    path(alignment_file)\n    output:\n    path(\"*\")\n\n    script:\n\n    \"\"\"\n    raxml-ng --msa ${alignment_file} --model GTR+G\n    \"\"\"\n\n    stub:\n\n    \"\"\"\n    echo \"raxml-ng --msa concatenated_alignments.fasta --model GTR+G\"\n    touch aa\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    raxml-ng --msa ${alignment_file} --model GTR+G\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "RAxML-NG"
        ],
        "tools_url": [
            "https://bio.tools/RAxML-NG"
        ],
        "tools_dico": [
            {
                "name": "RAxML-NG",
                "uri": "https://bio.tools/RAxML-NG",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3810",
                            "term": "Agricultural science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0552",
                                    "term": "Phylogenetic tree bootstrapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Phylogenetic tree inference tool which uses maximum-likelihood (ML) optimality criterion.",
                "homepage": "https://raxml-ng.vital-it.ch/"
            }
        ],
        "inputs": [
            "alignment_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "Mxrcon__Savio_alignments_nf",
        "directive": [
            "publishDir params.results_dir, mode: params.save_mode, enabled: params.should_publish"
        ],
        "when": "",
        "stub": "\n\n    \"\"\"\n    echo \"raxml-ng --msa concatenated_alignments.fasta --model GTR+G\"\n    touch aa\n    \"\"\""
    }
}
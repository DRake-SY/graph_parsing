{
    "OPERATION_1": {
        "string": "updated_samplesheet2 = Channel.create()PROCESS DEF parse_jsonfile",
        "origin": [],
        "gives": [
            [
                "updated_samplesheet2",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "PROBLEM_SS_CHECK2 = Channel.create()PROCESS DEF recheck_samplesheet",
        "origin": [],
        "gives": [
            [
                "PROBLEM_SS_CHECK2",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "fastqcAll = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "fastqcAll",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "fastqcScreenAll = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "fastqcScreenAll",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "fastq_screen_txt = Channel.create()",
        "origin": [],
        "gives": [
            [
                "fastq_screen_txt",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "all_fq_screen_txt_tuple = Channel.create()",
        "origin": [],
        "gives": [
            [
                "all_fq_screen_txt_tuple",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "bcl_stats_empty = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "bcl_stats_empty",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "summary.collect { k,v -> \"${k.padRight(22)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_9": {
        "string": "cr_fastqs_copyfs_tuple_ch = cr_fastqs_copyfs_ch.map { fqfile -> [ getCellRangerProjectName(fqfile), getCellRangerSampleName(fqfile), fqfile.getFileName() ] }",
        "origin": [
            [
                "cr_fastqs_copyfs_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "cr_fastqs_copyfs_tuple_ch",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "cr_undetermined_fastqs_copyfs_tuple_ch = cr_undetermined_move_fq_ch.map { fqfile -> [ \"Undetermined\", fqfile.getFileName() ] }",
        "origin": [
            [
                "cr_undetermined_move_fq_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "cr_undetermined_fastqs_copyfs_tuple_ch",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "cr_samplesheet_info_ch = tenx_samplesheet2.splitCsv(header: true, skip: 1).map { row -> [ row.Sample_ID, row.Sample_Project, row.ReferenceGenome, row.DataAnalysisType ] }",
        "origin": [
            [
                "tenx_samplesheet2",
                "P"
            ]
        ],
        "gives": [
            [
                "cr_samplesheet_info_ch",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "cr_fqname_fqfile_ch = cr_fastqs_count_ch.map { fqfile -> [ getCellRangerSampleName(fqfile), getCellRangerFastqPath(fqfile) ] }.unique()",
        "origin": [
            [
                "cr_fastqs_count_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "cr_fqname_fqfile_ch",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "cr_fqname_fqfile_ch\n    .phase(cr_samplesheet_info_ch)\n    .map{ left, right ->\n        def sampleID = left[0]\n        def projectName = right[1]\n        def refGenome = right[2]\n        def dataType = right[3]\n        def fastqDir = left[1]\n        tuple(sampleID, projectName, refGenome, dataType, fastqDir) }\n   .set { cr_grouped_fastq_dir_sample_ch }",
        "origin": [
            [
                "cr_fqname_fqfile_ch",
                "P"
            ],
            [
                "cr_samplesheet_info_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "cr_grouped_fastq_dir_sample_ch",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "fqname_fqfile_ch = fastqs_fqc_ch.map { fqFile -> [fqFile.getParent().getName(), fqFile ] }",
        "origin": [
            [
                "fastqs_fqc_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "fqname_fqfile_ch",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "undetermined_default_fqfile_tuple_ch = undetermined_default_fq_ch.map { fqFile -> [\"Undetermined_default\", fqFile ] }",
        "origin": [
            [
                "undetermined_default_fq_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "undetermined_default_fqfile_tuple_ch",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "cr_fqname_fqfile_fqc_ch = cr_fastqs_fqc_ch.map { fqFile -> [getCellRangerProjectName(fqFile), fqFile ] }",
        "origin": [
            [
                "cr_fastqs_fqc_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "cr_fqname_fqfile_fqc_ch",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "cr_undetermined_default_fq_tuple_ch = cr_undetermined_default_fq_ch.map { fqFile -> [\"Undetermined_default\", fqFile ] }",
        "origin": [
            [
                "cr_undetermined_default_fq_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "cr_undetermined_default_fq_tuple_ch",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "fastqcAll_ch = fastqcAll.mix(fqname_fqfile_ch, undetermined_default_fqfile_tuple_ch, cr_fqname_fqfile_fqc_ch, cr_undetermined_default_fq_tuple_ch)",
        "origin": [
            [
                "fastqcAll",
                "P"
            ],
            [
                "fqname_fqfile_ch",
                "P"
            ],
            [
                "undetermined_default_fqfile_tuple_ch",
                "P"
            ],
            [
                "cr_fqname_fqfile_fqc_ch",
                "P"
            ],
            [
                "cr_undetermined_default_fq_tuple_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "fastqcAll_ch",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "fastqs_screen_fqfile_ch = fastqs_screen_ch.map { fqFile -> [fqFile.getParent().getName(), fqFile ] }",
        "origin": [
            [
                "fastqs_screen_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "fastqs_screen_fqfile_ch",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "undetermined_fastqs_screen_fqfile_ch = undetermined_default_fastqs_screen_ch.map { fqFile -> [\"Undetermined_default\", fqFile ] }",
        "origin": [
            [
                "undetermined_default_fastqs_screen_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "undetermined_fastqs_screen_fqfile_ch",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "cr_fqname_fqfile_screen_ch = cr_fastqs_screen_ch.map { fqFile -> [getCellRangerProjectName(fqFile), fqFile ] }",
        "origin": [
            [
                "cr_fastqs_screen_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "cr_fqname_fqfile_screen_ch",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "cr_undetermined_fastqs_screen_tuple_ch = cr_undetermined_fastqs_screen_ch.map { fqFile -> [\"Undetermined_default\", fqFile ] }",
        "origin": [
            [
                "cr_undetermined_fastqs_screen_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "cr_undetermined_fastqs_screen_tuple_ch",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "grouped_fqscreen_ch = fastqcScreenAll.mix(fastqs_screen_fqfile_ch, cr_fqname_fqfile_screen_ch, cr_undetermined_fastqs_screen_tuple_ch, undetermined_fastqs_screen_fqfile_ch)",
        "origin": [
            [
                "fastqcScreenAll",
                "P"
            ],
            [
                "fastqs_screen_fqfile_ch",
                "P"
            ],
            [
                "cr_fqname_fqfile_screen_ch",
                "P"
            ],
            [
                "cr_undetermined_fastqs_screen_tuple_ch",
                "P"
            ],
            [
                "undetermined_fastqs_screen_fqfile_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "grouped_fqscreen_ch",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "all_fcq_files = all_fcq_files_tuple.map { k,v -> v }.flatten().collect()",
        "origin": [
            [
                "all_fcq_files_tuple",
                "P"
            ]
        ],
        "gives": [
            [
                "all_fcq_files",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "all_fq_screen_files = all_fq_screen_txt_tuple.map { k,v -> v }.flatten().collect()",
        "origin": [
            [
                "all_fq_screen_txt_tuple",
                "P"
            ]
        ],
        "gives": [
            [
                "all_fq_screen_files",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "b2fq_default_stats_all_ch = bcl_stats_empty.mix(b2fq_default_stats_ch)",
        "origin": [
            [
                "bcl_stats_empty",
                "P"
            ],
            [
                "b2fq_default_stats_ch",
                "P"
            ]
        ],
        "gives": [
            [
                "b2fq_default_stats_all_ch",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "projectList.subscribe { projectList_2.add(\"$it\") }",
        "origin": [
            [
                "projectList",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_28": {
        "string": "all_multiqc = projectList_2.collect{ project -> [\"${project}\", \"https://sample-selector-bioinformatics.crick.ac.uk/sequencing/${runName}/multiqc/${project}/multiqc_report.html\"] }",
        "origin": [
            [
                "projectList_2",
                "P"
            ]
        ],
        "gives": [
            [
                "all_multiqc",
                "P"
            ]
        ]
    }
}
{
    "OPERATION_1": {
        "string": "mutationBamsChannel = Channel\n     .fromPath(\"${snvToSamplesMappingFile}\")\n    .splitCsv(header: true, sep: \"\\t\", by: 1)\n    .map { item ->\n        variant = item[\"key\"]\n            .replaceAll(/:/, \"_\")\n            .replaceAll(/>/, \"_\")\n        bams = item[\"samples_to_use\"]\n            .split(\",\")\n            .collect { sample_id ->\n                file(\"data/bams/${sample_id}.bam\")\n            }\n        return [variant, bams]\n    }",
        "origin": [
            [
                "\"${snvToSamplesMappingFile}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mutationBamsChannel",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "vcfChannel = Channel\n    .fromPath(\"${snvToSamplesMappingFile}\")\n    .splitCsv(header: true, sep: \"\\t\", by: 1)\n    .map { item ->\n        variant = item[\"key\"]\n            .replaceAll(/:/, \"_\")\n            .replaceAll(/>/, \"_\")\n        vcf = variant + \".vcf\"\n        return [variant, vcf]\n    }",
        "origin": [
            [
                "\"${snvToSamplesMappingFile}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "vcfChannel",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "mutationBamsChannel.into { mutationBamsChannel1; mutationBamsChannel2 }",
        "origin": [
            [
                "mutationBamsChannel",
                "P"
            ]
        ],
        "gives": [
            [
                "mutationBamsChannel1",
                "P"
            ],
            [
                "mutationBamsChannel2",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "mutationBamsChannel1\n    .count()\n    .view { num -> \"Number of elements in mutationBamsChannel: $num\" }",
        "origin": [
            [
                "mutationBamsChannel1",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_5": {
        "string": "vcfChannel.into { vcfChannel1; vcfChannel2 }",
        "origin": [
            [
                "vcfChannel",
                "P"
            ]
        ],
        "gives": [
            [
                "vcfChannel1",
                "P"
            ],
            [
                "vcfChannel2",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "vcfChannel1 \n    .count()\n    .view { num -> \"Number of elements in vcfChannel: $num\" }",
        "origin": [
            [
                "vcfChannel1",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_7": {
        "string": "joinedChannel = mutationBamsChannel2\n    .join(vcfChannel2, by: 0)\n    .count()\n    .view { num -> \"Number of elements after joining the mutationBamsChannel and vcfChannel: $num\" }",
        "origin": [
            [
                "mutationBamsChannel2",
                "P"
            ]
        ],
        "gives": [
            [
                "joinedChannel",
                "P"
            ]
        ]
    }
}
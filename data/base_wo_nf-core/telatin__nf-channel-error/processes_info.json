{
    "FILT": {
        "name_process": "FILT",
        "string_process": "\nprocess FILT {\n    tag \"${sample_id}\"\n    \n    input:\n    tuple val(sample_id), path(reads) \n\n    output:\n    tuple val(sample_id), path(\"filt/${sample_id}_R{1,2}.fastq.gz\")  \n\n    script:\n    \"\"\"\n    mkdir filt\n    touch filt/${sample_id}_R1.fastq.gz\n    touch filt/${sample_id}_R2.fastq.gz\n    \"\"\"     \n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    mkdir filt\n    touch filt/${sample_id}_R1.fastq.gz\n    touch filt/${sample_id}_R2.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "telatin__nf-channel-error",
        "directive": [
            "tag \"${sample_id}\""
        ],
        "when": "",
        "stub": ""
    },
    "ASSEMBLE": {
        "name_process": "ASSEMBLE",
        "string_process": "\nprocess ASSEMBLE {\n    tag \"$sample_id\"\n    publishDir \"$params.outdir/\", \n        mode: 'copy'\n\n    input:\n    tuple val(sample_id), path(reads) \n\n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}.contigs.fa\")  \n\n    script:\n    \"\"\"\n    ls ${reads[0]} ${reads[1]} > ${sample_id}.contigs.fa\n    \"\"\" \n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    ls ${reads[0]} ${reads[1]} > ${sample_id}.contigs.fa\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "telatin__nf-channel-error",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"$params.outdir/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "MAXBIN": {
        "name_process": "MAXBIN",
        "string_process": "\nprocess MAXBIN {\n    tag \"$sample_id\"\n    label \"process_medium\"\n    publishDir \"$params.outdir/maxbin/\", \n        pattern: \"*.fasta\",\n        mode: 'copy'\n\n    input:\n    tuple val(sample_id), path(reads) \n    tuple val(sample_id), path(contigs) \n    \n    output:\n    tuple val(sample_id), path(\"*.maxbin.*.fasta\"), optional: true, emit: bins                            \n\n    script:\n    \"\"\"\n    echo \"MaxBin\" > ${sample_id}.maxbin.001.fasta\n    echo \"Contigs: ${contigs}\" >> ${sample_id}.maxbin.CTGS.fasta\n    echo \"Reads: ${reads[0]} ${reads[1]}\" >> ${sample_id}.maxbin.READS.fasta\n    \"\"\"     \n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    echo \"MaxBin\" > ${sample_id}.maxbin.001.fasta\n    echo \"Contigs: ${contigs}\" >> ${sample_id}.maxbin.CTGS.fasta\n    echo \"Reads: ${reads[0]} ${reads[1]}\" >> ${sample_id}.maxbin.READS.fasta\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads",
            "sample_id",
            "contigs"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nf-channel-error",
        "directive": [
            "tag \"$sample_id\"",
            "label \"process_medium\"",
            "publishDir \"$params.outdir/maxbin/\" , pattern: \"*.fasta\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "DEPTHS": {
        "name_process": "DEPTHS",
        "string_process": "\nprocess DEPTHS {\n    tag \"$sample_id\"\n    label \"process_medium\"\n \n\n    input:\n    tuple val(sample_id), path(bamfile) \n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}.depth.txt\")\n\n    script:\n    \"\"\"\n    echo \"jgi_summarize_bam_contig_depths:${sample_id}.bam\" > ${sample_id}.depth.txt \n        \n \n    \"\"\"     \n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    echo \"jgi_summarize_bam_contig_depths:${sample_id}.bam\" > ${sample_id}.depth.txt \n        \n \n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "bamfile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "telatin__nf-channel-error",
        "directive": [
            "tag \"$sample_id\"",
            "label \"process_medium\""
        ],
        "when": "",
        "stub": ""
    },
    "METABAT2": {
        "name_process": "METABAT2",
        "string_process": "\nprocess METABAT2 {\n    tag \"$sample_id\"\n    label \"process_medium\"\n    publishDir \"$params.outdir/metabat/\",\n        mode: 'copy'\n \n\n    input:\n    tuple val(sample_id), path(contigs)\n    tuple val(sample_id), path(depth) \n    val(crash)\n    \n    \n    output:\n    tuple val(sample_id), path(\"*metabat.*.fa\"), optional: true, emit: bins                     \n\n    script:\n    \"\"\"\n    ls | sort > ${sample_id}.metabat.inputs.fa\n    echo ${sample_id} > ${sample_id}.metabat.id.fa\n    echo \"Contigs: ${contigs}\" >  ${sample_id}.metabat.ctgs.fa  \n    \n    if [[ ! -e ${sample_id}.contigs.fa ]]; then\n        echo \"Processing ${sample_id} we found the contigs from another sample: \\$(ls *.contigs.fa)\" | tee ${sample_id}.metabat.error.fa\n        if [[ ${crash} == true ]]; then\n            echo \"Crashing\"\n            exit 1\n        fi\n    fi\n\n    \"\"\"     \n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    ls | sort > ${sample_id}.metabat.inputs.fa\n    echo ${sample_id} > ${sample_id}.metabat.id.fa\n    echo \"Contigs: ${contigs}\" >  ${sample_id}.metabat.ctgs.fa  \n    \n    if [[ ! -e ${sample_id}.contigs.fa ]]; then\n        echo \"Processing ${sample_id} we found the contigs from another sample: \\$(ls *.contigs.fa)\" | tee ${sample_id}.metabat.error.fa\n        if [[ ${crash} == true ]]; then\n            echo \"Crashing\"\n            exit 1\n        fi\n    fi\n\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "contigs",
            "sample_id",
            "depth",
            "crash"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nf-channel-error",
        "directive": [
            "tag \"$sample_id\"",
            "label \"process_medium\"",
            "publishDir \"$params.outdir/metabat/\" , mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "INDEX": {
        "name_process": "INDEX",
        "string_process": "\nprocess INDEX {\n                  \n                  \n                  \n                  \n                 \n      \n    tag \"$sample_id\"\n    label \"process_medium\"\n \n    input:\n    tuple val(sample_id), path(contigs) \n\n    \n    output:\n    tuple val(\"${contigs}\"), path(\"${contigs}.*\")  \n\n    script:\n    \"\"\"\n    touch ${contigs}.amb\n    touch ${contigs}.ann\n    touch ${contigs}.bwt\n    touch ${contigs}.pac\n    touch ${contigs}.sa\n    \"\"\"    \n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    touch ${contigs}.amb\n    touch ${contigs}.ann\n    touch ${contigs}.bwt\n    touch ${contigs}.pac\n    touch ${contigs}.sa\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "contigs"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "telatin__nf-channel-error",
        "directive": [
            "tag \"$sample_id\"",
            "label \"process_medium\""
        ],
        "when": "",
        "stub": ""
    },
    "MAP": {
        "name_process": "MAP",
        "string_process": "\nprocess MAP {\n    tag \"$sample_id\"\n    label \"process_medium\"\n \n    input:\n    tuple val(sample_id), path(reads) \n    tuple val(index_name), path(index)\n    \n    output:\n    tuple val(sample_id), path(\"${sample_id}.bam*\")  \n\n    script:\n    \"\"\"\n    echo \"Reads: ${reads[0]},${reads[1]}\" > ${sample_id}.bam\n    echo \"Index: ${index_name}\" >> ${sample_id}.bam\n    ls -l >> ${sample_id}.bam\n\n\n\n    \"\"\"    \n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    echo \"Reads: ${reads[0]},${reads[1]}\" > ${sample_id}.bam\n    echo \"Index: ${index_name}\" >> ${sample_id}.bam\n    ls -l >> ${sample_id}.bam\n\n\n\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "reads",
            "index_name",
            "index"
        ],
        "nb_inputs": 4,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "telatin__nf-channel-error",
        "directive": [
            "tag \"$sample_id\"",
            "label \"process_medium\""
        ],
        "when": "",
        "stub": ""
    }
}
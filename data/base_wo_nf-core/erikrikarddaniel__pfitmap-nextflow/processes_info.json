{
    "join_faas": {
        "name_process": "join_faas",
        "string_process": "\nprocess join_faas {\n  publishDir \"$results/genomes\", mode: \"copy\"\n\n  input: \n  file genome_dir from genome_faas\n\n  output:\n  file 'all_genomes.faa' into all_genome_faas_hmmsearch_ch\n  file 'all_genomes.faa' into all_genome_faas_classify_ch\n  file 'processed_genome_faas.txt' into processed_genome_faas_ch\n\n  shell:\n  \"\"\"\n  for f in \\$(find ${genome_dir}/ -name '*.faa.gz'); do\n    a=\\$(basename \\$f | sed 's/\\\\..*//')\n    echo \"\\$a: \\$f\" >> processed_genome_faas.txt\n    gunzip -c \\$f | sed \"/^>/s/\\$/ [\\$a]/\" >> all_genomes.faa\n  done\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  for f in \\$(find ${genome_dir}/ -name '*.faa.gz'); do\n    a=\\$(basename \\$f | sed 's/\\\\..*//')\n    echo \"\\$a: \\$f\" >> processed_genome_faas.txt\n    gunzip -c \\$f | sed \"/^>/s/\\$/ [\\$a]/\" >> all_genomes.faa\n  done\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_faas"
        ],
        "nb_inputs": 1,
        "outputs": [
            "all_genome_faas_hmmsearch_ch",
            "all_genome_faas_classify_ch",
            "processed_genome_faas_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "publishDir \"$results/genomes\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "join_gffs": {
        "name_process": "join_gffs",
        "string_process": "\nprocess join_gffs {\n  publishDir \"$results/genomes\", mode: \"copy\"\n\n  input: \n  file genome_dir from genome_gffs\n\n  output:\n  file 'all_genomes.gff.gz' into all_genome_gffs_ch\n\n  shell:\n  \"\"\"\n  echo \"seqname\tsource\tfeature\tstart\tend\tscore\tstrand\tframe\tattribute\tgenome_accno\" > all_genomes.gff\n  for f in \\$(find ${genome_dir}/ -name '*.gff.gz'); do\n    a=\\$(basename \\$f | sed 's/\\\\..*//')\n    gunzip -c \\$f | sed \"/^/s/\\$/ \\$a/\" | grep '\\t' >> all_genomes.gff\n  done\n  gzip all_genomes.gff\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  echo \"seqname\tsource\tfeature\tstart\tend\tscore\tstrand\tframe\tattribute\tgenome_accno\" > all_genomes.gff\n  for f in \\$(find ${genome_dir}/ -name '*.gff.gz'); do\n    a=\\$(basename \\$f | sed 's/\\\\..*//')\n    gunzip -c \\$f | sed \"/^/s/\\$/ \\$a/\" | grep '\\t' >> all_genomes.gff\n  done\n  gzip all_genomes.gff\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_gffs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "all_genome_gffs_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "publishDir \"$results/genomes\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "hmmsearch": {
        "name_process": "hmmsearch",
        "string_process": "\nprocess hmmsearch {\n  publishDir \"$results/hmmsearch\", mode: 'copy'\n  cpus params.max_cpus\n\n  input:\n  file genome  from all_genome_faas_hmmsearch_ch\n  file hmms from hmm_files.collect()\n  \n  output:\n  file (\"*.tblout\") into tblout_ch\n  file (\"*.domtblout\") into domtblout_ch\n  file (\"*.hmmout.gz\") into hmmout_ch\n\n  shell:\n  \"\"\"\n  for h in *.hmm; do\n    hmmsearch --cpu ${task.cpus} --tblout \\$(basename \\$h .hmm).tblout --domtblout \\$(basename \\$h .hmm).domtblout \\$h $genome | gzip -c > \\$(basename \\$h .hmm).hmmout.gz\n  done\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  for h in *.hmm; do\n    hmmsearch --cpu ${task.cpus} --tblout \\$(basename \\$h .hmm).tblout --domtblout \\$(basename \\$h .hmm).domtblout \\$h $genome | gzip -c > \\$(basename \\$h .hmm).hmmout.gz\n  done\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "all_genome_faas_hmmsearch_ch",
            "hmm_files"
        ],
        "nb_inputs": 2,
        "outputs": [
            "tblout_ch",
            "domtblout_ch",
            "hmmout_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "publishDir \"$results/hmmsearch\", mode: 'copy'",
            "cpus params.max_cpus"
        ],
        "when": "",
        "stub": ""
    },
    "getMetadata": {
        "name_process": "getMetadata",
        "string_process": "\nprocess getMetadata {\n  publishDir \"$results/metadata\", mode: 'copy'\n\n  input:\n  file arc_metadata from gtdb_arc_metadata\n  file bac_metadata from gtdb_bac_metadata\n\n  output:\n  file 'gtdb_metadata.tsv' into gtdbmetadata_ch\n\n  shell:\n  \"\"\"\n  cat $arc_metadata > gtdb_metadata.tsv\n  cat $bac_metadata |grep -v ^accession >> gtdb_metadata.tsv\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  cat $arc_metadata > gtdb_metadata.tsv\n  cat $bac_metadata |grep -v ^accession >> gtdb_metadata.tsv\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gtdb_arc_metadata",
            "gtdb_bac_metadata"
        ],
        "nb_inputs": 2,
        "outputs": [
            "gtdbmetadata_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "publishDir \"$results/metadata\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pfClassify": {
        "name_process": "pfClassify",
        "string_process": "\nprocess pfClassify {\n  publishDir \"$results/classification\", mode: 'copy'\n\n  input:\n    val hmm_mincov from hmm_mincov\n    val featherprefix from featherprefix\n    val dbsource from dbsource\n    file profiles_hierarchy from profiles_hierarchy\n    file \"gtdb_metadata.tsv\" from gtdbmetadata_ch\n    file tblouts from tblout_ch\n    file domtblouts from domtblout_ch\n    file genome_faas from all_genome_faas_classify_ch\n\n  output:\n    file \"gtdb.tsv.gz\" into gtdb_tsv_ch\n    file \"gtdb.pf-classify.warnings.txt\" into gtdb_classify_warnings_ch\n    file \"missing_genomes.txt\" into gtdb_classify_missing_ch\n    file \"*.feather\" into feather_files\n\n  shell:\n  \"\"\"\n  pf-classify.r --hmm_mincov=${hmm_mincov} --dbsource=${dbsource} --gtdbmetadata=gtdb_metadata.tsv --profilehierarchies=$profiles_hierarchy --singletable=gtdb.tsv.gz --seqfaa=${genome_faas} --featherprefix=${featherprefix}  --missing=missing_genomes.txt *.tblout *.domtblout > gtdb.pf-classify.warnings.txt 2>&1\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  \"\"\"\n  pf-classify.r --hmm_mincov=${hmm_mincov} --dbsource=${dbsource} --gtdbmetadata=gtdb_metadata.tsv --profilehierarchies=$profiles_hierarchy --singletable=gtdb.tsv.gz --seqfaa=${genome_faas} --featherprefix=${featherprefix}  --missing=missing_genomes.txt *.tblout *.domtblout > gtdb.pf-classify.warnings.txt 2>&1\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "hmm_mincov",
            "featherprefix",
            "dbsource",
            "profiles_hierarchy",
            "gtdbmetadata_ch",
            "tblout_ch",
            "domtblout_ch",
            "all_genome_faas_classify_ch"
        ],
        "nb_inputs": 8,
        "outputs": [
            "gtdb_tsv_ch",
            "gtdb_classify_warnings_ch",
            "gtdb_classify_missing_ch",
            "feather_files"
        ],
        "nb_outputs": 4,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "publishDir \"$results/classification\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "trim_galore": {
        "name_process": "trim_galore",
        "string_process": "\nprocess trim_galore {\n  cpus 1\n  time params.max_time\n\n  input:\n  set name, file(reads) from inputfiles\n\n  output:\n  set val(name), file(\"*fq.gz\") into (\n    trimgalore_reads_map2genomes,\n    trimgalore_reads_last2genes, trimgalore_reads_diamond2genes,\n    trimgalore_reads_last2bloom_transcriptome, trimgalore_reads_diamond2bloom_transcriptome,\n    trimgalore_reads_last2mmetsp, trimgalore_reads_diamond2mmetsp\n  )\n  set val(name), file(\"*.trim_galore.log\") into ch_trimming_logs\n  set val(name), file(\"*_trimming_report.txt\") into ch_trimming_logs_rcounts\n  file \"*_fastqc.{zip,html}\" into trimgalore_fastqc_reports\n\n  \"\"\"\n  trim_galore --paired --fastqc --gzip --quality 20 $reads 2>&1 > ${name}.trim_galore.log\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n  trim_galore --paired --fastqc --gzip --quality 20 $reads 2>&1 > ${name}.trim_galore.log\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "inputfiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "ch_trimming_logs",
            "ch_trimming_logs_rcounts",
            "trimgalore_fastqc_reports"
        ],
        "nb_outputs": 4,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time"
        ],
        "when": "",
        "stub": ""
    },
    "sample_count": {
        "name_process": "sample_count",
        "string_process": "\nprocess sample_count {\n  cpus 1\n  time params.max_time\n  executor 'local'\n\n  input:\n  set name, file(trimlogs) from ch_trimming_logs_rcounts\n\n  output:\n  file(\"*.samplecounts.tsv\") into ch_sample_counts\n\n  \"\"\"\n  echo \\\"${name}\t\\$(grep 'Reads written' ${trimlogs[0]} | sed 's/.*: *\\\\([0-9,]*\\\\) (.*/\\\\1/' | sed 's/,//g')\\\" > ${name}.samplecounts.tsv\n  \"\"\"\n                                                                                                 \n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n  echo \\\"${name}\t\\$(grep 'Reads written' ${trimlogs[0]} | sed 's/.*: *\\\\([0-9,]*\\\\) (.*/\\\\1/' | sed 's/,//g')\\\" > ${name}.samplecounts.tsv\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_trimming_logs_rcounts"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_sample_counts"
        ],
        "nb_outputs": 1,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time",
            "executor 'local'"
        ],
        "when": "",
        "stub": ""
    },
    "sample_counts": {
        "name_process": "sample_counts",
        "string_process": "\nprocess sample_counts {\n  cpus 1\n  time params.max_time\n  executor 'local'\n\n  publishDir \"${params.outputdir}\", mode: \"copy\", pattern: \"*.tsv\"\n\n  input:\n  file(counts) from ch_sample_counts.collect()\n\n  output:\n  file(\"samplecounts.${timestamp}.tsv\") into ch_sample_counts_out\n  file(\"samplecounts.${timestamp}.tsv\") into ch_sample_counts_rmd\n  file(\"samplecounts.md5\") into ch_sample_counts_out_md5\n\n  \"\"\"\n  cat ${counts} > samplecounts.${timestamp}.tsv\n  md5sum samplecounts.${timestamp}.tsv > samplecounts.md5\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n  cat ${counts} > samplecounts.${timestamp}.tsv\n  md5sum samplecounts.${timestamp}.tsv > samplecounts.md5\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_sample_counts"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_sample_counts_out",
            "ch_sample_counts_rmd",
            "ch_sample_counts_out_md5"
        ],
        "nb_outputs": 3,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time",
            "executor 'local'",
            "publishDir \"${params.outputdir}\", mode: \"copy\", pattern: \"*.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n  cpus 1\n  time params.max_time\n\n  publishDir \"${params.outputdir}/multiqc\", mode: \"copy\", pattern: \"*.html\"\n\n  input:\n  file fastqc_reports from trimgalore_fastqc_reports.collect()\n\n  output:\n  file \"multiqc_${timestamp}_multiqc_report.html\" into multiqc_report\n  file \"multiqc.md5\" into multiqc_report_md5\n  file \"*_data\"\n\n  \"\"\"\n  multiqc -i \"multiqc_${timestamp}\" .\n  md5sum multiqc_${timestamp}_multiqc_report.html | sed 's: \\\\+:&multiqc/:' > multiqc.md5\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n  multiqc -i \"multiqc_${timestamp}\" .\n  md5sum multiqc_${timestamp}_multiqc_report.html | sed 's: \\\\+:&multiqc/:' > multiqc.md5\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "trimgalore_fastqc_reports"
        ],
        "nb_inputs": 1,
        "outputs": [
            "multiqc_report",
            "multiqc_report_md5"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time",
            "publishDir \"${params.outputdir}/multiqc\", mode: \"copy\", pattern: \"*.html\""
        ],
        "when": "",
        "stub": ""
    },
    "map2genomes": {
        "name_process": "map2genomes",
        "string_process": "\nprocess map2genomes {\n  cpus params.max_cpus\n  time params.max_time\n\n  input:\n  set name, file(reads) from trimgalore_reads_map2genomes\n\n  output:\n  file \"*.bam\" into (\n    map2genomes_result, \t                          \n    ch_map2genomes_idxstats\n  )\n  file \"*.log\" into map2genomes_log\n\n  \"\"\"\n  bowtie2 --threads ${task.cpus} -x ${genomeindex_dir}/${genomeindex_name} -1 ${reads[0]} -2 ${reads[1]} 2>${name}.genomes.bowtie2.log | samtools view -Sb | samtools sort > ${name}.genomes.sorted.bam\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n  bowtie2 --threads ${task.cpus} -x ${genomeindex_dir}/${genomeindex_name} -1 ${reads[0]} -2 ${reads[1]} 2>${name}.genomes.bowtie2.log | samtools view -Sb | samtools sort > ${name}.genomes.sorted.bam\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Rbowtie2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/rbowtie2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Rbowtie2",
                "uri": "https://bio.tools/rbowtie2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence merging"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0232",
                                    "term": "Sequence splicing"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "This package provides an R wrapper of the popular bowtie2 sequencing reads aligner and AdapterRemoval, a convenient tool for rapid adapter trimming, identification, and read merging.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rbowtie2.html"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "trimgalore_reads_map2genomes"
        ],
        "nb_inputs": 1,
        "outputs": [
            "",
            "map2genomes_log"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus params.max_cpus",
            "time params.max_time"
        ],
        "when": "",
        "stub": ""
    },
    "idxstats": {
        "name_process": "idxstats",
        "string_process": "\nprocess idxstats {\n  cpus 1\n  time params.max_time\n\n  input:\n  file bam from ch_map2genomes_idxstats\n\n  output:\n  file(\"*.bam.bai\") into ch_bam_bai\n  file(\"*.idxstats.tsv.gz\") into ch_idxstats_results\n  file(\"*.idxstats.tsv.gz\") into ch_idxstats_results_rmd\n\n  \"\"\"\n  samtools index ${bam} \n  samtools idxstats $bam | grep -Pv \"\\t0\\t0\\$\" | gzip -c > \\$(basename ${bam}).idxstats.tsv.gz\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n  samtools index ${bam} \n  samtools idxstats $bam | grep -Pv \"\\t0\\t0\\$\" | gzip -c > \\$(basename ${bam}).idxstats.tsv.gz\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ch_map2genomes_idxstats"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_bam_bai",
            "ch_idxstats_results",
            "ch_idxstats_results_rmd"
        ],
        "nb_outputs": 3,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time"
        ],
        "when": "",
        "stub": ""
    },
    "tar_map2genomes": {
        "name_process": "tar_map2genomes",
        "string_process": "\nprocess tar_map2genomes {\n  cpus 1\n  time params.max_time\n\n  publishDir \"${params.outputdir}/nucleotides/genomes\", mode: \"copy\"\n\n  input:\n  file bam_files from map2genomes_result.collect()\n  file log_files from map2genomes_log.collect()\n  file bam_bai_files from ch_bam_bai.collect()\n  file idxstats from ch_idxstats_results.collect()\n\n  output:\n  file \"map2genomes.${timestamp}.tar\" into tar_map2genomes_result\n  file \"map2genomes_tar.md5\" into tar_map2genomes_result_md5\n\n  \"\"\"\n  tar --dereference -cf map2genomes.${timestamp}.tar ${bam_files} ${log_files} ${bam_bai_files} ${idxstats}\n  md5sum map2genomes.${timestamp}.tar | sed 's: \\\\+:&nucleotides/genomes/:' > map2genomes_tar.md5\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "\"\"\"\n  tar --dereference -cf map2genomes.${timestamp}.tar ${bam_files} ${log_files} ${bam_bai_files} ${idxstats}\n  md5sum map2genomes.${timestamp}.tar | sed 's: \\\\+:&nucleotides/genomes/:' > map2genomes_tar.md5\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "map2genomes_result",
            "map2genomes_log",
            "ch_bam_bai",
            "ch_idxstats_results"
        ],
        "nb_inputs": 4,
        "outputs": [
            "tar_map2genomes_result",
            "tar_map2genomes_result_md5"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time",
            "publishDir \"${params.outputdir}/nucleotides/genomes\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "last2genes": {
        "name_process": "last2genes",
        "string_process": "\nprocess last2genes {\n  cpus params.last_cpus\n  time params.max_time\n\n  input:\n  set name, file(reads) from trimgalore_reads_last2genes\n\n  output:\n  set val(name), file(\"*.maf.gz\") into last2genes_result1                                     \n  file \"*.maf.gz\" into last2genes_result2 \t\t                            \n\n  when:\n  params.run_last2genes\n\n  \"\"\"\n  unpigz -c -p ${task.cpus} ${reads} | lastal -P ${task.cpus} -Q0 ${lastalopts} ${geneslastindex_dir}/${geneslastindex_name}.lastdb | pigz -c -p ${task.cpus} > ${name}.genes.maf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n  unpigz -c -p ${task.cpus} ${reads} | lastal -P ${task.cpus} -Q0 ${lastalopts} ${geneslastindex_dir}/${geneslastindex_name}.lastdb | pigz -c -p ${task.cpus} > ${name}.genes.maf.gz\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "mblastall"
        ],
        "tools_url": [
            "https://bio.tools/mblastall"
        ],
        "tools_dico": [
            {
                "name": "mblastall",
                "uri": "https://bio.tools/mblastall",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0338",
                                    "term": "Sequence database search"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "Search nucleotide database with nucleotide query sequence(s).",
                "homepage": "https://bioweb.pasteur.fr/packages/pack@ptools@0.99d"
            }
        ],
        "inputs": [
            "trimgalore_reads_last2genes"
        ],
        "nb_inputs": 1,
        "outputs": [
            "last2genes_result1",
            "last2genes_result2"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus params.last_cpus",
            "time params.max_time"
        ],
        "when": "params.run_last2genes",
        "stub": ""
    },
    "last2genestsv": {
        "name_process": "last2genestsv",
        "string_process": "\nprocess last2genestsv {\n  cpus 1\n  time params.max_time\n\n  input:\n  set name, file(maf_file) from last2genes_result1\n\n  output:\n  file \"*.tsv.gz\" into last2genestsv_result1\t                 \n  file \"*.tsv.gz\" into last2genestsv_result_rmd\t      \n\n  \"\"\"\n  unpigz -c -p ${task.cpus} ${maf_file} | maf-convert blasttab | pigz -c -p ${task.cpus} > ${name}.genes.last.tsv.gz\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n  unpigz -c -p ${task.cpus} ${maf_file} | maf-convert blasttab | pigz -c -p ${task.cpus} > ${name}.genes.last.tsv.gz\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "last2genes_result1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "last2genestsv_result1",
            "last2genestsv_result_rmd"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time"
        ],
        "when": "",
        "stub": ""
    },
    "tar_last2genes": {
        "name_process": "tar_last2genes",
        "string_process": "\nprocess tar_last2genes {\n  cpus 1\n  time params.max_time\n\n  publishDir \"${params.outputdir}/nucleotides/genes\", mode: \"copy\", pattern: \"*.tar\"\n\n  input:\n  file maf_files from last2genes_result2.collect()\n  file tsv_files from last2genestsv_result1.collect()\n\n  output:\n  file \"last2genes.${timestamp}.tar\" into tar_last2genes_result\n  file \"last2genes.md5\" into tar_last2genes_result_md5\n\n  \"\"\"\n  tar --dereference -cf last2genes.${timestamp}.tar ${maf_files} ${tsv_files}\n  md5sum last2genes.${timestamp}.tar | sed 's: \\\\+:&nucleotides/genes/:' > last2genes.md5\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n  tar --dereference -cf last2genes.${timestamp}.tar ${maf_files} ${tsv_files}\n  md5sum last2genes.${timestamp}.tar | sed 's: \\\\+:&nucleotides/genes/:' > last2genes.md5\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "last2genes_result2",
            "last2genestsv_result1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "tar_last2genes_result",
            "tar_last2genes_result_md5"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time",
            "publishDir \"${params.outputdir}/nucleotides/genes\", mode: \"copy\", pattern: \"*.tar\""
        ],
        "when": "",
        "stub": ""
    },
    "diamond2genes": {
        "name_process": "diamond2genes",
        "string_process": "\nprocess diamond2genes {\n  cpus params.last_cpus\n  time params.max_time\n\n  input:\n  set name, file(reads) from trimgalore_reads_diamond2genes\n\n  output:\n  set val(name), file(\"*.daa\") into diamond2genes_result1\t                           \n  file \"*.daa\" into diamond2genes_result2 \t                          \n  file \"*.daa.log.gz\" into diamond2genes_log\n\n  \"\"\"\n  diamond blastx --outfmt 100 --threads ${task.cpus} --query ${reads[0]} --db ${genesdiamondindex_dir}/${genesdiamondindex_name}.dmnd --out ${name}_1.genes.daa 2>&1 | gzip -c > ${name}_1.genes.daa.log.gz\n  diamond blastx --outfmt 100 --threads ${task.cpus} --query ${reads[1]} --db ${genesdiamondindex_dir}/${genesdiamondindex_name}.dmnd --out ${name}_2.genes.daa 2>&1 | gzip -c > ${name}_2.genes.daa.log.gz\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n  diamond blastx --outfmt 100 --threads ${task.cpus} --query ${reads[0]} --db ${genesdiamondindex_dir}/${genesdiamondindex_name}.dmnd --out ${name}_1.genes.daa 2>&1 | gzip -c > ${name}_1.genes.daa.log.gz\n  diamond blastx --outfmt 100 --threads ${task.cpus} --query ${reads[1]} --db ${genesdiamondindex_dir}/${genesdiamondindex_name}.dmnd --out ${name}_2.genes.daa 2>&1 | gzip -c > ${name}_2.genes.daa.log.gz\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "trimgalore_reads_diamond2genes"
        ],
        "nb_inputs": 1,
        "outputs": [
            "diamond2genes_result1",
            "diamond2genes_result2",
            "diamond2genes_log"
        ],
        "nb_outputs": 3,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus params.last_cpus",
            "time params.max_time"
        ],
        "when": "",
        "stub": ""
    },
    "diamond2genestsv": {
        "name_process": "diamond2genestsv",
        "string_process": "\nprocess diamond2genestsv {\n  cpus params.last_cpus\n  time params.max_time\n\n  input:\n  set name, file(daa_files) from diamond2genes_result1\n\n  output:\n  file \"*.tsv.gz\" into diamond2genestsv_result0\t                    \n  file \"*.tsv.gz\" into diamond2genestsv_result1\t                    \n  file \"*.tsv.gz\" into diamond2genestsv_result_rmd\n\n  \"\"\"\n  diamond view -p ${task.cpus} --daa  ${daa_files[0]} -f 6 | pigz -c -p ${task.cpus} > ${name}_1.genes.dmnd.tsv.gz\n  diamond view -p ${task.cpus} --daa  ${daa_files[1]} -f 6 | pigz -c -p ${task.cpus} > ${name}_2.genes.dmnd.tsv.gz\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n  diamond view -p ${task.cpus} --daa  ${daa_files[0]} -f 6 | pigz -c -p ${task.cpus} > ${name}_1.genes.dmnd.tsv.gz\n  diamond view -p ${task.cpus} --daa  ${daa_files[1]} -f 6 | pigz -c -p ${task.cpus} > ${name}_2.genes.dmnd.tsv.gz\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "diamond2genes_result1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "diamond2genestsv_result0",
            "diamond2genestsv_result1",
            "diamond2genestsv_result_rmd"
        ],
        "nb_outputs": 3,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus params.last_cpus",
            "time params.max_time"
        ],
        "when": "",
        "stub": ""
    },
    "tar_diamond2genes": {
        "name_process": "tar_diamond2genes",
        "string_process": "\nprocess tar_diamond2genes {\n  cpus 1\n  time params.max_time\n\n  publishDir \"${params.outputdir}/proteins/genes\", mode: \"copy\", pattern: \"*.tar\"\n\n  input:\n  file daa_files from diamond2genes_result2.collect()\n  file tsv_files from diamond2genestsv_result1.collect()\n  file log_files from diamond2genes_log.collect()\n\n  output:\n  file \"diamond2genes.${timestamp}.tar\" into tar_diamond2genes_result\n  file \"diamond2genes.md5\" into tar_diamond2genes_result_md5\n\n  \"\"\"\n  tar --dereference -cf diamond2genes.${timestamp}.tar ${daa_files} ${tsv_files} ${log_files}\n  md5sum diamond2genes.${timestamp}.tar | sed 's: \\\\+:&proteins/genes/:' > diamond2genes.md5\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n  tar --dereference -cf diamond2genes.${timestamp}.tar ${daa_files} ${tsv_files} ${log_files}\n  md5sum diamond2genes.${timestamp}.tar | sed 's: \\\\+:&proteins/genes/:' > diamond2genes.md5\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "diamond2genes_result2",
            "diamond2genestsv_result1",
            "diamond2genes_log"
        ],
        "nb_inputs": 3,
        "outputs": [
            "tar_diamond2genes_result",
            "tar_diamond2genes_result_md5"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time",
            "publishDir \"${params.outputdir}/proteins/genes\", mode: \"copy\", pattern: \"*.tar\""
        ],
        "when": "",
        "stub": ""
    },
    "last2bloom_transcriptome": {
        "name_process": "last2bloom_transcriptome",
        "string_process": "\nprocess last2bloom_transcriptome {\n  cpus params.last_cpus\n  time params.max_time\n\n  input:\n  set name, file(reads) from trimgalore_reads_last2bloom_transcriptome\n\n  output:\n  set val(name), file(\"*.maf.gz\") into last2bloom_transcriptome_result1                                                    \n  file \"*.maf.gz\" into last2bloom_transcriptome_result2 \t                          \n\n  when:\n  params.run_last2bloom_transcriptome\n\n  \"\"\"\n  unpigz -c -p ${task.cpus} ${reads} | lastal -P ${task.cpus} -Q0 ${lastalopts} ${bloom_transcriptomelastindex_dir}/${bloom_transcriptomelastindex_name}.lastdb | pigz -c -p ${task.cpus} > ${name}.bloom_transcriptome.maf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n  unpigz -c -p ${task.cpus} ${reads} | lastal -P ${task.cpus} -Q0 ${lastalopts} ${bloom_transcriptomelastindex_dir}/${bloom_transcriptomelastindex_name}.lastdb | pigz -c -p ${task.cpus} > ${name}.bloom_transcriptome.maf.gz\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "mblastall"
        ],
        "tools_url": [
            "https://bio.tools/mblastall"
        ],
        "tools_dico": [
            {
                "name": "mblastall",
                "uri": "https://bio.tools/mblastall",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0338",
                                    "term": "Sequence database search"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "Search nucleotide database with nucleotide query sequence(s).",
                "homepage": "https://bioweb.pasteur.fr/packages/pack@ptools@0.99d"
            }
        ],
        "inputs": [
            "trimgalore_reads_last2bloom_transcriptome"
        ],
        "nb_inputs": 1,
        "outputs": [
            "last2bloom_transcriptome_result1",
            "last2bloom_transcriptome_result2"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus params.last_cpus",
            "time params.max_time"
        ],
        "when": "params.run_last2bloom_transcriptome",
        "stub": ""
    },
    "last2bloom_transcriptometsv": {
        "name_process": "last2bloom_transcriptometsv",
        "string_process": "\nprocess last2bloom_transcriptometsv {\n  cpus 1\n  time params.max_time\n\n  input:\n  set name, file(maf_file) from last2bloom_transcriptome_result1\n\n  output:\n  file \"*.tsv.gz\" into last2bloom_transcriptometsv_result1\t                               \n  file \"*.tsv.gz\" into last2bloom_transcriptometsv_result_rmd\n\n  \"\"\"\n  unpigz -c -p ${task.cpus} ${maf_file} | maf-convert blasttab | pigz -c -p ${task.cpus} > ${name}.bloom_transcriptome.last.tsv.gz\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n  unpigz -c -p ${task.cpus} ${maf_file} | maf-convert blasttab | pigz -c -p ${task.cpus} > ${name}.bloom_transcriptome.last.tsv.gz\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "last2bloom_transcriptome_result1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "last2bloom_transcriptometsv_result1",
            "last2bloom_transcriptometsv_result_rmd"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time"
        ],
        "when": "",
        "stub": ""
    },
    "tar_last2bloom_transcriptome": {
        "name_process": "tar_last2bloom_transcriptome",
        "string_process": "\nprocess tar_last2bloom_transcriptome {\n  cpus 1\n  time params.max_time\n\n  publishDir \"${params.outputdir}/nucleotides/bloom_transcriptome\", mode: \"copy\", pattern: \"*.tar\"\n\n  input:\n  file maf_files from last2bloom_transcriptome_result2.collect()\n  file tsv_files from last2bloom_transcriptometsv_result1.collect()\n\n  output:\n  file \"last2bloom_transcriptome.${timestamp}.tar\" into tar_last2bloom_transcriptome_result\n  file \"last2bloom_transcriptome.md5\" into tar_last2bloom_transcriptome_result_md5\n\n  \"\"\"\n  tar --dereference -cf last2bloom_transcriptome.${timestamp}.tar ${maf_files} ${tsv_files}\n  md5sum last2bloom_transcriptome.${timestamp}.tar | sed 's: \\\\+:&nucleotides/bloom_transcriptome/:' > last2bloom_transcriptome.md5\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n  tar --dereference -cf last2bloom_transcriptome.${timestamp}.tar ${maf_files} ${tsv_files}\n  md5sum last2bloom_transcriptome.${timestamp}.tar | sed 's: \\\\+:&nucleotides/bloom_transcriptome/:' > last2bloom_transcriptome.md5\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "last2bloom_transcriptome_result2",
            "last2bloom_transcriptometsv_result1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "tar_last2bloom_transcriptome_result",
            "tar_last2bloom_transcriptome_result_md5"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time",
            "publishDir \"${params.outputdir}/nucleotides/bloom_transcriptome\", mode: \"copy\", pattern: \"*.tar\""
        ],
        "when": "",
        "stub": ""
    },
    "diamond2bloom_transcriptome": {
        "name_process": "diamond2bloom_transcriptome",
        "string_process": "\nprocess diamond2bloom_transcriptome {\n  cpus params.last_cpus\n  time params.max_time\n\n  input:\n  set name, file(reads) from trimgalore_reads_diamond2bloom_transcriptome\n\n  output:\n  set val(name), file(\"*.daa\") into diamond2bloom_transcriptome_result1\t                                         \n  file \"*.daa\" into diamond2bloom_transcriptome_result2 \t                          \n  file \"*.daa.log.gz\" into diamond2bloom_transcriptome_log\n\n  \"\"\"\n  diamond blastx --outfmt 100 --threads ${task.cpus} --query ${reads[0]} --db ${bloom_transcriptomediamondindex_dir}/${bloom_transcriptomediamondindex_name}.dmnd --out ${name}_1.bloom_transcriptome.daa 2>&1 | gzip -c > ${name}_1.bloom_transcriptome.daa.log.gz\n  diamond blastx --outfmt 100 --threads ${task.cpus} --query ${reads[1]} --db ${bloom_transcriptomediamondindex_dir}/${bloom_transcriptomediamondindex_name}.dmnd --out ${name}_2.bloom_transcriptome.daa 2>&1 | gzip -c > ${name}_2.bloom_transcriptome.daa.log.gz\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n  diamond blastx --outfmt 100 --threads ${task.cpus} --query ${reads[0]} --db ${bloom_transcriptomediamondindex_dir}/${bloom_transcriptomediamondindex_name}.dmnd --out ${name}_1.bloom_transcriptome.daa 2>&1 | gzip -c > ${name}_1.bloom_transcriptome.daa.log.gz\n  diamond blastx --outfmt 100 --threads ${task.cpus} --query ${reads[1]} --db ${bloom_transcriptomediamondindex_dir}/${bloom_transcriptomediamondindex_name}.dmnd --out ${name}_2.bloom_transcriptome.daa 2>&1 | gzip -c > ${name}_2.bloom_transcriptome.daa.log.gz\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "trimgalore_reads_diamond2bloom_transcriptome"
        ],
        "nb_inputs": 1,
        "outputs": [
            "diamond2bloom_transcriptome_result1",
            "diamond2bloom_transcriptome_result2",
            "diamond2bloom_transcriptome_log"
        ],
        "nb_outputs": 3,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus params.last_cpus",
            "time params.max_time"
        ],
        "when": "",
        "stub": ""
    },
    "diamond2bloom_transcriptometsv": {
        "name_process": "diamond2bloom_transcriptometsv",
        "string_process": "\nprocess diamond2bloom_transcriptometsv {\n  cpus params.last_cpus\n  time params.max_time\n\n  input:\n  set name, file(daa_files) from diamond2bloom_transcriptome_result1\n\n  output:\n  file \"*.tsv.gz\" into diamond2bloom_transcriptometsv_result1\t                                  \n  file \"*.tsv.gz\" into diamond2bloom_transcriptometsv_result_rmd\n\n  \"\"\"\n  diamond view -p ${task.cpus} --daa  ${daa_files[0]} -f 6 | pigz -c -p ${task.cpus} > ${name}_1.bloom_transcriptome.dmnd.tsv.gz\n  diamond view -p ${task.cpus} --daa  ${daa_files[1]} -f 6 | pigz -c -p ${task.cpus} > ${name}_2.bloom_transcriptome.dmnd.tsv.gz\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n  diamond view -p ${task.cpus} --daa  ${daa_files[0]} -f 6 | pigz -c -p ${task.cpus} > ${name}_1.bloom_transcriptome.dmnd.tsv.gz\n  diamond view -p ${task.cpus} --daa  ${daa_files[1]} -f 6 | pigz -c -p ${task.cpus} > ${name}_2.bloom_transcriptome.dmnd.tsv.gz\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "diamond2bloom_transcriptome_result1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "diamond2bloom_transcriptometsv_result1",
            "diamond2bloom_transcriptometsv_result_rmd"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus params.last_cpus",
            "time params.max_time"
        ],
        "when": "",
        "stub": ""
    },
    "tar_diamond2bloom_transcriptome": {
        "name_process": "tar_diamond2bloom_transcriptome",
        "string_process": "\nprocess tar_diamond2bloom_transcriptome {\n  cpus 1\n  time params.max_time\n\n  publishDir \"${params.outputdir}/proteins/bloom_transcriptome\", mode: \"copy\", pattern: \"*.tar\"\n\n  input:\n  file daa_files from diamond2bloom_transcriptome_result2.collect()\n  file tsv_files from diamond2bloom_transcriptometsv_result1.collect()\n  file log_files from diamond2bloom_transcriptome_log.collect()\n\n  output:\n  file \"diamond2bloom_transcriptome.${timestamp}.tar\" into tar_diamond2bloom_transcriptome_result\n  file \"diamond2bloom_transcriptome.md5\" into tar_diamond2bloom_transcriptome_result_md5\n\n  \"\"\"\n  tar --dereference -cf diamond2bloom_transcriptome.${timestamp}.tar ${daa_files} ${tsv_files} ${log_files}\n  md5sum diamond2bloom_transcriptome.${timestamp}.tar | sed 's: \\\\+:&proteins/bloom_transcriptome/:' > diamond2bloom_transcriptome.md5\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n  tar --dereference -cf diamond2bloom_transcriptome.${timestamp}.tar ${daa_files} ${tsv_files} ${log_files}\n  md5sum diamond2bloom_transcriptome.${timestamp}.tar | sed 's: \\\\+:&proteins/bloom_transcriptome/:' > diamond2bloom_transcriptome.md5\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "diamond2bloom_transcriptome_result2",
            "diamond2bloom_transcriptometsv_result1",
            "diamond2bloom_transcriptome_log"
        ],
        "nb_inputs": 3,
        "outputs": [
            "tar_diamond2bloom_transcriptome_result",
            "tar_diamond2bloom_transcriptome_result_md5"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time",
            "publishDir \"${params.outputdir}/proteins/bloom_transcriptome\", mode: \"copy\", pattern: \"*.tar\""
        ],
        "when": "",
        "stub": ""
    },
    "last2mmetsp": {
        "name_process": "last2mmetsp",
        "string_process": "\nprocess last2mmetsp {\n  cpus params.last_cpus\n  time params.max_time\n\n  input:\n  set name, file(reads) from trimgalore_reads_last2mmetsp\n\n  output:\n  set val(name), file(\"*.maf.gz\") into last2mmetsp_result1                                       \n  file \"*.maf.gz\" into last2mmetsp_result2 \t                          \n\n  when:\n  params.run_last2mmetsp\n\n  \"\"\"\n  unpigz -c -p ${task.cpus} ${reads} | lastal -P ${task.cpus} -Q0 ${lastalopts} ${mmetsplastindex_dir}/${mmetsplastindex_name}.lastdb | pigz -c -p ${task.cpus} > ${name}.mmetsp.maf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n  unpigz -c -p ${task.cpus} ${reads} | lastal -P ${task.cpus} -Q0 ${lastalopts} ${mmetsplastindex_dir}/${mmetsplastindex_name}.lastdb | pigz -c -p ${task.cpus} > ${name}.mmetsp.maf.gz\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "mblastall"
        ],
        "tools_url": [
            "https://bio.tools/mblastall"
        ],
        "tools_dico": [
            {
                "name": "mblastall",
                "uri": "https://bio.tools/mblastall",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0338",
                                    "term": "Sequence database search"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "Search nucleotide database with nucleotide query sequence(s).",
                "homepage": "https://bioweb.pasteur.fr/packages/pack@ptools@0.99d"
            }
        ],
        "inputs": [
            "trimgalore_reads_last2mmetsp"
        ],
        "nb_inputs": 1,
        "outputs": [
            "last2mmetsp_result1",
            "last2mmetsp_result2"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus params.last_cpus",
            "time params.max_time"
        ],
        "when": "params.run_last2mmetsp",
        "stub": ""
    },
    "last2mmetsptsv": {
        "name_process": "last2mmetsptsv",
        "string_process": "\nprocess last2mmetsptsv {\n  cpus 1\n  time params.max_time\n\n  input:\n  set name, file(maf_file) from last2mmetsp_result1\n\n  output:\n  file \"*.tsv.gz\" into last2mmetsptsv_result1\t                  \n  file \"*.tsv.gz\" into last2mmetsptsv_result_rmd\n\n  \"\"\"\n  unpigz -c -p ${task.cpus} ${maf_file} | maf-convert blasttab | pigz -c -p ${task.cpus} > ${name}.mmetsp.last.tsv.gz\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n  unpigz -c -p ${task.cpus} ${maf_file} | maf-convert blasttab | pigz -c -p ${task.cpus} > ${name}.mmetsp.last.tsv.gz\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "last2mmetsp_result1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "last2mmetsptsv_result1",
            "last2mmetsptsv_result_rmd"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time"
        ],
        "when": "",
        "stub": ""
    },
    "tar_last2mmetsp": {
        "name_process": "tar_last2mmetsp",
        "string_process": "\nprocess tar_last2mmetsp {\n  cpus 1\n  time params.max_time\n\n  publishDir \"${params.outputdir}/nucleotides/mmetsp\", mode: \"copy\", pattern: \"*.tar\"\n\n  input:\n  file maf_files from last2mmetsp_result2.collect()\n  file tsv_files from last2mmetsptsv_result1.collect()\n\n  output:\n  file \"last2mmetsp.${timestamp}.tar\" into tar_last2mmetsp_result\n  file \"last2mmetsp.md5\" into tar_last2mmetsp_result_md5\n\n  \"\"\"\n  tar --dereference -cf last2mmetsp.${timestamp}.tar ${maf_files} ${tsv_files}\n  md5sum last2mmetsp.${timestamp}.tar | sed 's: \\\\+:&nucleotides/mmetsp/:' > last2mmetsp.md5\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n  tar --dereference -cf last2mmetsp.${timestamp}.tar ${maf_files} ${tsv_files}\n  md5sum last2mmetsp.${timestamp}.tar | sed 's: \\\\+:&nucleotides/mmetsp/:' > last2mmetsp.md5\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "last2mmetsp_result2",
            "last2mmetsptsv_result1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "tar_last2mmetsp_result",
            "tar_last2mmetsp_result_md5"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time",
            "publishDir \"${params.outputdir}/nucleotides/mmetsp\", mode: \"copy\", pattern: \"*.tar\""
        ],
        "when": "",
        "stub": ""
    },
    "diamond2mmetsp": {
        "name_process": "diamond2mmetsp",
        "string_process": "\nprocess diamond2mmetsp {\n  cpus params.last_cpus\n  time params.max_time\n\n  input:\n  set name, file(reads) from trimgalore_reads_diamond2mmetsp\n\n  output:\n  set val(name), file(\"*.daa\") into diamond2mmetsp_result1\t                            \n  file \"*.daa\" into diamond2mmetsp_result2 \t                          \n  file \"*.daa.log.gz\" into diamond2mmetsp_log\n\n  \"\"\"\n  diamond blastx --outfmt 100 --threads ${task.cpus} --query ${reads[0]} --db ${mmetspdiamondindex_dir}/${mmetspdiamondindex_name}.dmnd --out ${name}_1.mmetsp.daa 2>&1 | gzip -c > ${name}_1.mmetsp.daa.log.gz\n  diamond blastx --outfmt 100 --threads ${task.cpus} --query ${reads[1]} --db ${mmetspdiamondindex_dir}/${mmetspdiamondindex_name}.dmnd --out ${name}_2.mmetsp.daa 2>&1 | gzip -c > ${name}_2.mmetsp.daa.log.gz\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n  diamond blastx --outfmt 100 --threads ${task.cpus} --query ${reads[0]} --db ${mmetspdiamondindex_dir}/${mmetspdiamondindex_name}.dmnd --out ${name}_1.mmetsp.daa 2>&1 | gzip -c > ${name}_1.mmetsp.daa.log.gz\n  diamond blastx --outfmt 100 --threads ${task.cpus} --query ${reads[1]} --db ${mmetspdiamondindex_dir}/${mmetspdiamondindex_name}.dmnd --out ${name}_2.mmetsp.daa 2>&1 | gzip -c > ${name}_2.mmetsp.daa.log.gz\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "trimgalore_reads_diamond2mmetsp"
        ],
        "nb_inputs": 1,
        "outputs": [
            "diamond2mmetsp_result1",
            "diamond2mmetsp_result2",
            "diamond2mmetsp_log"
        ],
        "nb_outputs": 3,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus params.last_cpus",
            "time params.max_time"
        ],
        "when": "",
        "stub": ""
    },
    "diamond2mmetsptsv": {
        "name_process": "diamond2mmetsptsv",
        "string_process": "\nprocess diamond2mmetsptsv {\n  cpus params.last_cpus\n  time params.max_time\n\n  input:\n  set name, file(daa_files) from diamond2mmetsp_result1\n\n  output:\n  file \"*.tsv.gz\" into diamond2mmetsptsv_result1\t                     \n  file \"*.tsv.gz\" into diamond2mmetsptsv_result_rmd\n\n  \"\"\"\n  diamond view -p ${task.cpus} --daa  ${daa_files[0]} -f 6 | pigz -c -p ${task.cpus} > ${name}_1.mmetsp.dmnd.tsv.gz\n  diamond view -p ${task.cpus} --daa  ${daa_files[1]} -f 6 | pigz -c -p ${task.cpus} > ${name}_2.mmetsp.dmnd.tsv.gz\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n  diamond view -p ${task.cpus} --daa  ${daa_files[0]} -f 6 | pigz -c -p ${task.cpus} > ${name}_1.mmetsp.dmnd.tsv.gz\n  diamond view -p ${task.cpus} --daa  ${daa_files[1]} -f 6 | pigz -c -p ${task.cpus} > ${name}_2.mmetsp.dmnd.tsv.gz\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Diamond"
        ],
        "tools_url": [
            "https://bio.tools/diamond"
        ],
        "tools_dico": [
            {
                "name": "Diamond",
                "uri": "https://bio.tools/diamond",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0258",
                                    "term": "Sequence alignment analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Sequence aligner for protein and translated DNA searches and functions as a drop-in replacement for the NCBI BLAST software tools. It is suitable for protein-protein search as well as DNA-protein search on short reads and longer sequences including contigs and assemblies, providing a speedup of BLAST ranging up to x20,000.",
                "homepage": "https://github.com/bbuchfink/diamond"
            }
        ],
        "inputs": [
            "diamond2mmetsp_result1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "diamond2mmetsptsv_result1",
            "diamond2mmetsptsv_result_rmd"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus params.last_cpus",
            "time params.max_time"
        ],
        "when": "",
        "stub": ""
    },
    "tar_diamond2mmetsp": {
        "name_process": "tar_diamond2mmetsp",
        "string_process": "\nprocess tar_diamond2mmetsp {\n  cpus 1\n  time params.max_time\n\n  publishDir \"${params.outputdir}/proteins/mmetsp\", mode: \"copy\", pattern: \"*.tar\"\n\n  input:\n  file daa_files from diamond2mmetsp_result2.collect()\n  file tsv_files from diamond2mmetsptsv_result1.collect()\n  file log_files from diamond2mmetsp_log.collect()\n\n  output:\n  file \"diamond2mmetsp.${timestamp}.tar\" into tar_diamond2mmetsp_result\n  file \"diamond2mmetsp.md5\" into tar_diamond2mmetsp_result_md5\n\n  \"\"\"\n  tar --dereference -cf diamond2mmetsp.${timestamp}.tar ${daa_files} ${tsv_files} ${log_files}\n  md5sum diamond2mmetsp.${timestamp}.tar | sed 's: \\\\+:&proteins/mmetsp/:' > diamond2mmetsp.md5\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n  tar --dereference -cf diamond2mmetsp.${timestamp}.tar ${daa_files} ${tsv_files} ${log_files}\n  md5sum diamond2mmetsp.${timestamp}.tar | sed 's: \\\\+:&proteins/mmetsp/:' > diamond2mmetsp.md5\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "diamond2mmetsp_result2",
            "diamond2mmetsptsv_result1",
            "diamond2mmetsp_log"
        ],
        "nb_inputs": 3,
        "outputs": [
            "tar_diamond2mmetsp_result",
            "tar_diamond2mmetsp_result_md5"
        ],
        "nb_outputs": 2,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time",
            "publishDir \"${params.outputdir}/proteins/mmetsp\", mode: \"copy\", pattern: \"*.tar\""
        ],
        "when": "",
        "stub": ""
    },
    "rmarkdown": {
        "name_process": "rmarkdown",
        "string_process": "\nprocess rmarkdown {\n                        \n  cpus 4\n  time params.max_time\n  \n  publishDir \"${params.outputdir}/summary/\", mode: \"copy\"\n\n  input:\n  file rmd\tfrom rmarkdown\n  file scounts\tfrom ch_sample_counts_rmd\n  file idxstats\tfrom ch_idxstats_results_rmd.collect()\n  file lgenes\tfrom last2genestsv_result_rmd.ifEmpty(['empty',[]]).collect() \n  file dgenes\tfrom diamond2genestsv_result_rmd.collect()\n  file lbloom\tfrom last2bloom_transcriptometsv_result_rmd.ifEmpty(['empty',[]]).collect() \n  file dbloom\tfrom diamond2bloom_transcriptometsv_result_rmd.collect()\n  file lmmetsp\tfrom last2mmetsptsv_result_rmd.ifEmpty(['empty',[]]).collect() \n  file dmmetsp\tfrom diamond2mmetsptsv_result_rmd.collect()\n  file samples\tfrom samplefeather\n  file genes    from genesfeather\n  file mmetsp   from mmetspfeather\n\n  output:\n  file \"summary.${timestamp}.html\"\n  file \"*.${timestamp}.feather\"\n  file \"summary.md5\" into summary_md5\n\n  \"\"\"\n  sed 's/__DATE__/${timestamp}/' ${rmd} | sed 's/__THREADS__/${task.cpus}/g' > summary.${timestamp}.Rmd\n  Rscript --vanilla -e \"rmarkdown::render('summary.${timestamp}.Rmd')\"\n  md5sum *.${timestamp}.feather summary.${timestamp}.html | sed 's: \\\\+:&summary/:' > summary.md5\n  \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "\"\"\"\n  sed 's/__DATE__/${timestamp}/' ${rmd} | sed 's/__THREADS__/${task.cpus}/g' > summary.${timestamp}.Rmd\n  Rscript --vanilla -e \"rmarkdown::render('summary.${timestamp}.Rmd')\"\n  md5sum *.${timestamp}.feather summary.${timestamp}.html | sed 's: \\\\+:&summary/:' > summary.md5\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rmarkdown",
            "ch_sample_counts_rmd",
            "ch_idxstats_results_rmd",
            "last2genestsv_result_rmd",
            "diamond2genestsv_result_rmd",
            "last2bloom_transcriptometsv_result_rmd",
            "diamond2bloom_transcriptometsv_result_rmd",
            "last2mmetsptsv_result_rmd",
            "diamond2mmetsptsv_result_rmd",
            "samplefeather",
            "genesfeather",
            "mmetspfeather"
        ],
        "nb_inputs": 12,
        "outputs": [
            "summary_md5"
        ],
        "nb_outputs": 1,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 4",
            "time params.max_time",
            "publishDir \"${params.outputdir}/summary/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "md5sums": {
        "name_process": "md5sums",
        "string_process": "\nprocess md5sums {\n  cpus 1\n  time params.max_time\n  executor \"local\"\n\n  publishDir \"${params.outputdir}/\", mode: \"copy\"\n\n  input:\n  file(scount)         from ch_sample_counts_out_md5\n  file(multiqc)        from multiqc_report_md5\n  file(map2genomes)    from tar_map2genomes_result_md5\n  file(last2genes)     from tar_last2genes_result_md5.ifEmpty(['empty',[]])\n  file(diamond2genes)  from tar_diamond2genes_result_md5\n  file(last2bloom)     from tar_last2bloom_transcriptome_result_md5.ifEmpty(['empty',[]])\n  file(diamond2bloom)  from tar_diamond2bloom_transcriptome_result_md5\n  file(last2mmetsp)    from tar_last2mmetsp_result_md5.ifEmpty(['empty',[]])\n  file(diamond2mmetsp) from tar_diamond2mmetsp_result_md5\n  file(summary)\t       from summary_md5\n\n  output:\n  file \"nextflow_results.${timestamp}.md5\" into ch_md5sums\n\n  \"\"\"\n  cat *.md5 > nextflow_results.${timestamp}.md5\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "\"\"\"\n  cat *.md5 > nextflow_results.${timestamp}.md5\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_sample_counts_out_md5",
            "multiqc_report_md5",
            "tar_map2genomes_result_md5",
            "tar_last2genes_result_md5",
            "tar_diamond2genes_result_md5",
            "tar_last2bloom_transcriptome_result_md5",
            "tar_diamond2bloom_transcriptome_result_md5",
            "tar_last2mmetsp_result_md5",
            "tar_diamond2mmetsp_result_md5",
            "summary_md5"
        ],
        "nb_inputs": 10,
        "outputs": [
            "ch_md5sums"
        ],
        "nb_outputs": 1,
        "name_workflow": "erikrikarddaniel__pfitmap-nextflow",
        "directive": [
            "cpus 1",
            "time params.max_time",
            "executor \"local\"",
            "publishDir \"${params.outputdir}/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    }
}
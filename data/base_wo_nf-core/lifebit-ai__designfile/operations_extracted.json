{
    "OPERATION_1": {
        "string": "Channel.fromPath(\"${params.s3_location}/**.${params.file_suffix}\")\n       .map { it -> [ file(it).name.minus(\".${params.file_suffix}\"), \"s3:/\"+it] }\n       .set { ch_files }",
        "origin": [
            [
                "\"${params.s3_location}/**.${params.file_suffix}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_files",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel.fromPath(\"${params.s3_location}/**.${params.index_suffix}\")\n       .map { it -> [ file(it).name.minus(\".${params.index_suffix}\").minus(\".${params.file_suffix}\"), \"s3:/\"+it] }\n       .set { ch_indexes }",
        "origin": [
            [
                "\"${params.s3_location}/**.${params.index_suffix}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_indexes",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ch_files_and_indexes = ch_files.join(ch_indexes, by:0, remainder:params.keep_missing)\n                    .map {it -> [it[0], it - it[0]] }                                                    ",
        "origin": [
            [
                "ch_files",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_files_and_indexes",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "ch_main_files_only\n        .splitCsv(sep: ',', skip: 1)\n        .map { name, main_file -> [ name, file(main_file) ] }\n        .set { ch_main_files }",
        "origin": [
            [
                "ch_main_files_only",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_main_files",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "ch_indices_only\n        .splitCsv(sep: ',', skip: 1)\n        .map { name, main_file -> [name, file(main_file) ] }\n        .set { ch_indices }",
        "origin": [
            [
                "ch_indices_only",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_indices",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "ch_complete_file_sets\n        .splitCsv(sep: ',', skip: 1)\n        .map { name, main_file, index_file -> [ name, file(main_file), file(index_file) ] }\n        .set { ch_complete_sets }",
        "origin": [
            [
                "ch_complete_file_sets",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_complete_sets",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "ch_main_files_lists\n        .concat(ch_indices_only_lists)\n        .concat(ch_completed_file_sets_list)\n        .set { ch_checksums }",
        "origin": [
            [
                "ch_main_files_lists",
                "P"
            ],
            [
                "ch_indices_only_lists",
                "P"
            ],
            [
                "ch_completed_file_sets_list",
                "P"
            ]
        ],
        "gives": [
            [
                "ch_checksums",
                "P"
            ]
        ]
    }
}
{
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n\n    tag \"$sample_id\"\n    publishDir \"${params.outdir}/FastQC\", mode: 'copy'\n\n    input:\n    tuple val(sample_id), path(reads)\n\n    output:\n    path (\"fastqc_${sample_id}_logs\")\n\n    script:\n    \"\"\"\n    mkdir fastqc_${sample_id}_logs\n    fastqc -t ${task.cpus} -o fastqc_${sample_id}_logs -f fastq -q ${reads}\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    mkdir fastqc_${sample_id}_logs\n    fastqc -t ${task.cpus} -o fastqc_${sample_id}_logs -f fastq -q ${reads}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "sample_id",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"$sample_id\"",
            "publishDir \"${params.outdir}/FastQC\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "fastp": {
        "name_process": "fastp",
        "string_process": "\nprocess fastp {\n\n    tag \"$sample\"\n    publishDir \"${params.outdir}/Fastp\", mode: 'copy'\n\n    input:\n    tuple val(sample), path(reads)\n\n    output:\n    tuple val(sample), path('*fastp-trimmed*.fastq.gz')\n    path \"${sample}_fastp.json\"\n\n    script:\n    if (params.single_end) {\n    \"\"\"\n    fastp ${params.fastp_options} -w ${task.cpus} -i ${reads} \\\\\n        -o ${sample}_fastp-trimmed.fastq.gz \\\\\n        --json ${sample}_fastp.json\n    \"\"\"\n    } else {\n    \"\"\"\n    fastp ${params.fastp_options} -w ${task.cpus} -i ${reads[0]} -I ${reads[1]} \\\\\n        -o ${sample}_fastp-trimmed_R1.fastq.gz \\\\\n        -O ${sample}_fastp-trimmed_R2.fastq.gz \\\\\n        --json ${sample}_fastp.json\n    \"\"\"\n    }\n\n}",
        "nb_lignes_process": 28,
        "string_script": "    if (params.single_end) {\n    \"\"\"\n    fastp ${params.fastp_options} -w ${task.cpus} -i ${reads} \\\\\n        -o ${sample}_fastp-trimmed.fastq.gz \\\\\n        --json ${sample}_fastp.json\n    \"\"\"\n    } else {\n    \"\"\"\n    fastp ${params.fastp_options} -w ${task.cpus} -i ${reads[0]} -I ${reads[1]} \\\\\n        -o ${sample}_fastp-trimmed_R1.fastq.gz \\\\\n        -O ${sample}_fastp-trimmed_R2.fastq.gz \\\\\n        --json ${sample}_fastp.json\n    \"\"\"\n    }",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "sample",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample"
        ],
        "nb_outputs": 1,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"$sample\"",
            "publishDir \"${params.outdir}/Fastp\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "trimmomatic": {
        "name_process": "trimmomatic",
        "string_process": "\nprocess trimmomatic {\n\n    tag \"$sample\"\n    publishDir \"${params.outdir}/Trimmomatic\", mode: 'copy'\n\n    input:\n    tuple val(sample), path(reads)\n\n    output:\n    tuple val(sample), path('*trimmomatic-trimmed*.fastq.gz')\n    tuple val(sample), path('*trimmomatic-unpaired*.fastq.gz') optional true\n    path \"${sample}_trimmomatic.log\"\n\n    script:\n    if (params.single_end) {\n    \"\"\"\n    trimmomatic SE -threads ${task.cpus} $reads \\\\\n        ${sample}_trimmomatic-trimmed.fastq.gz \\\\\n        ILLUMINACLIP:${params.trimmomatic_adapter_path}:2:30:10 \\\\\n        ${params.trimmomatic_clip_options} 2> ${sample}_trimmomatic.log\n    \"\"\"\n    } else {\n    \"\"\"\n    trimmomatic PE -threads ${task.cpus} $reads \\\\\n        ${sample}_trimmomatic-trimmed_R1.fastq.gz ${sample}_trimmomatic-unpaired_R1.fastq.gz \\\\\n        ${sample}_trimmomatic-trimmed_R2.fastq.gz ${sample}_trimmomatic-unpaired_R2.fastq.gz \\\\\n        ILLUMINACLIP:${params.trimmomatic_adapter_path}:2:30:10 \\\\\n        ${params.trimmomatic_clip_options} 2> ${sample}_trimmomatic.log\n    \"\"\"\n    }\n\n}",
        "nb_lignes_process": 31,
        "string_script": "    if (params.single_end) {\n    \"\"\"\n    trimmomatic SE -threads ${task.cpus} $reads \\\\\n        ${sample}_trimmomatic-trimmed.fastq.gz \\\\\n        ILLUMINACLIP:${params.trimmomatic_adapter_path}:2:30:10 \\\\\n        ${params.trimmomatic_clip_options} 2> ${sample}_trimmomatic.log\n    \"\"\"\n    } else {\n    \"\"\"\n    trimmomatic PE -threads ${task.cpus} $reads \\\\\n        ${sample}_trimmomatic-trimmed_R1.fastq.gz ${sample}_trimmomatic-unpaired_R1.fastq.gz \\\\\n        ${sample}_trimmomatic-trimmed_R2.fastq.gz ${sample}_trimmomatic-unpaired_R2.fastq.gz \\\\\n        ILLUMINACLIP:${params.trimmomatic_adapter_path}:2:30:10 \\\\\n        ${params.trimmomatic_clip_options} 2> ${sample}_trimmomatic.log\n    \"\"\"\n    }",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "Trimmomatic"
        ],
        "tools_url": [
            "https://bio.tools/trimmomatic"
        ],
        "tools_dico": [
            {
                "name": "Trimmomatic",
                "uri": "https://bio.tools/trimmomatic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A flexible read trimming tool for Illumina NGS data",
                "homepage": "http://www.usadellab.org/cms/index.php?page=trimmomatic"
            }
        ],
        "inputs": [
            "sample",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sample",
            "sample"
        ],
        "nb_outputs": 2,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"$sample\"",
            "publishDir \"${params.outdir}/Trimmomatic\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "hisat2_index": {
        "name_process": "hisat2_index",
        "string_process": "\nprocess hisat2_index {\n\n    tag \"$genome_fasta\"\n    publishDir \"${params.outdir}/Hisat2_indicies\", mode: 'copy'\n\n    input:\n    path(genome_fasta)\n\n    output:\n    path('*.ht2')\n\n    script:\n    \"\"\"\n    hisat2-build -p ${task.cpus} $genome_fasta ${genome_fasta.baseName}.hisat2_index\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    hisat2-build -p ${task.cpus} $genome_fasta ${genome_fasta.baseName}.hisat2_index\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"$genome_fasta\"",
            "publishDir \"${params.outdir}/Hisat2_indicies\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "hisat2": {
        "name_process": "hisat2",
        "string_process": "\nprocess hisat2 {\n\n    tag \"$sample\"\n    publishDir \"${params.outdir}/Hisat2_alignments\", mode: 'copy'\n\n    input:\n    tuple val(sample), path(reads)\n    path hisat2_index_files\n\n    output:\n    path \"${sample}_sorted.bam\"\n    path \"${sample}_splicesite.txt\"\n    path \"*hisat2-summary.txt\"\n\n    script:\n    index_basename = hisat2_index_files[0].toString() - ~/.\\d.ht2l?/\n    if (params.single_end){\n    \"\"\"\n    hisat2 ${params.hisat2_options} --novel-splicesite-outfile ${sample}_splicesite.txt \\\\\n        --new-summary --summary-file ${sample}.hisat2-summary.txt \\\\\n        -p ${task.cpus} -x $index_basename -U $reads | \\\\\n        samtools sort -@ ${task.cpus} -o ${sample}_sorted.bam -\n    \"\"\"\n    } else {\n    \"\"\"\n    hisat2 ${params.hisat2_options} --novel-splicesite-outfile ${sample}_splicesite.txt \\\\\n        --new-summary --summary-file ${sample}.hisat2-summary.txt \\\\\n        -p ${task.cpus} -x $index_basename -1 ${reads[0]} -2 ${reads[1]} | \\\\\n        samtools sort -@ ${task.cpus} -o ${sample}_sorted.bam -\n    \"\"\"\n    }\n\n}",
        "nb_lignes_process": 32,
        "string_script": "    index_basename = hisat2_index_files[0].toString() - ~/.\\d.ht2l?/\n    if (params.single_end){\n    \"\"\"\n    hisat2 ${params.hisat2_options} --novel-splicesite-outfile ${sample}_splicesite.txt \\\\\n        --new-summary --summary-file ${sample}.hisat2-summary.txt \\\\\n        -p ${task.cpus} -x $index_basename -U $reads | \\\\\n        samtools sort -@ ${task.cpus} -o ${sample}_sorted.bam -\n    \"\"\"\n    } else {\n    \"\"\"\n    hisat2 ${params.hisat2_options} --novel-splicesite-outfile ${sample}_splicesite.txt \\\\\n        --new-summary --summary-file ${sample}.hisat2-summary.txt \\\\\n        -p ${task.cpus} -x $index_basename -1 ${reads[0]} -2 ${reads[1]} | \\\\\n        samtools sort -@ ${task.cpus} -o ${sample}_sorted.bam -\n    \"\"\"\n    }",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "HISAT2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/hisat2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "HISAT2",
                "uri": "https://bio.tools/hisat2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Alignment program for mapping next-generation sequencing reads (both DNA and RNA) to a population of human genomes (as well as to a single reference genome).",
                "homepage": "https://ccb.jhu.edu/software/hisat2/index.shtml"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample",
            "reads",
            "hisat2_index_files"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"$sample\"",
            "publishDir \"${params.outdir}/Hisat2_alignments\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "stringtie": {
        "name_process": "stringtie",
        "string_process": "\nprocess stringtie {\n\n    tag \"$bam\"\n    publishDir \"${params.outdir}/Stringtie_transcripts\", mode: 'copy'\n\n    input:\n    path bam\n\n    output:\n    path \"${bam.baseName}-transcripts.gtf\"\n\n    script:\n    \"\"\"\n    stringtie $bam -l ${bam.baseName} -o ${bam.baseName}-transcripts.gtf \\\\\n        -p ${task.cpus} ${params.stringtie_options}\n    \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    stringtie $bam -l ${bam.baseName} -o ${bam.baseName}-transcripts.gtf \\\\\n        -p ${task.cpus} ${params.stringtie_options}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "bam"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"$bam\"",
            "publishDir \"${params.outdir}/Stringtie_transcripts\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n\n    publishDir \"${params.outdir}/MultiQC\", mode: 'copy'\n\n    input:\n    path log_files\n    path multiqc_config\n            'fastqc/*' \n                                           \n            'hisat2/*' \n                                       \n\n    output:\n    path \"*multiqc_report.html\"\n    path \"*_data\"\n\n    script:\n    \"\"\"\n    multiqc . -c $multiqc_config\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    multiqc . -c $multiqc_config\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "log_files",
            "multiqc_config"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "publishDir \"${params.outdir}/MultiQC\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "split_maker_evidence": {
        "name_process": "split_maker_evidence",
        "string_process": "\nprocess split_maker_evidence {\n\n    tag \"${maker_evidence.baseName}\"\n    publishDir \"${params.outdir}\", mode: 'copy'\n    label 'AGAT'\n\n    input:\n    path maker_evidence\n\n    output:\n    path \"maker_results_noAbinitio_clean/mrna.gff\", emit: transcripts\n    path \"maker_results_noAbinitio_clean/*\", emit: all\n\n    script:\n    \"\"\"\n    agat_sp_separate_by_record_type.pl -g ${maker_evidence} -o maker_results_noAbinitio_clean\n    if test -f maker_results_noAbinitio_clean/mrna.gff && test -f maker_results_noAbinitio_clean/transcript.gff; then\n        agat_sp_merge_annotations.pl --gff maker_results_noAbinitio_clean/mrna.gff \\\\\n            --gff maker_results_noAbinitio_clean/transcript.gff --out merged_transcripts.gff\n        mv merged_transcripts.gff maker_results_noAbinitio_clean/mrna.gff\n    elif test -f maker_results_noAbinitio_clean/transcript.gff; then\n        cp maker_results_noAbinitio_clean/transcript.gff maker_results_noAbinitio_clean/mrna.gff\n    fi\n    \"\"\"\n                                                               \n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    agat_sp_separate_by_record_type.pl -g ${maker_evidence} -o maker_results_noAbinitio_clean\n    if test -f maker_results_noAbinitio_clean/mrna.gff && test -f maker_results_noAbinitio_clean/transcript.gff; then\n        agat_sp_merge_annotations.pl --gff maker_results_noAbinitio_clean/mrna.gff \\\\\n            --gff maker_results_noAbinitio_clean/transcript.gff --out merged_transcripts.gff\n        mv merged_transcripts.gff maker_results_noAbinitio_clean/mrna.gff\n    elif test -f maker_results_noAbinitio_clean/transcript.gff; then\n        cp maker_results_noAbinitio_clean/transcript.gff maker_results_noAbinitio_clean/mrna.gff\n    fi\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "maker_evidence"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"${maker_evidence.baseName}\"",
            "publishDir \"${params.outdir}\", mode: 'copy'",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "model_selection_by_AED": {
        "name_process": "model_selection_by_AED",
        "string_process": "\nprocess model_selection_by_AED {\n\n    tag \"${mrna_gff.baseName}\"\n    publishDir \"${params.outdir}/filter\", mode: 'copy'\n    label 'AGAT'\n\n    input:\n    path mrna_gff\n\n    output:\n    path \"codingGeneFeatures.filter.gff\", emit: selected_models\n\n    script:\n    \"\"\"\n    agat_sp_filter_feature_by_attribute_value.pl --gff ${mrna_gff} --value ${params.model_selection_value} -a _AED -t \">\" -o codingGeneFeatures.filter.gff\n    \"\"\"\n                                                                         \n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    agat_sp_filter_feature_by_attribute_value.pl --gff ${mrna_gff} --value ${params.model_selection_value} -a _AED -t \">\" -o codingGeneFeatures.filter.gff\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mrna_gff"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"${mrna_gff.baseName}\"",
            "publishDir \"${params.outdir}/filter\", mode: 'copy'",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "retain_longest_isoform": {
        "name_process": "retain_longest_isoform",
        "string_process": "\nprocess retain_longest_isoform {\n\n    tag \"${coding_gene_features_gff.baseName}\"\n    publishDir \"${params.outdir}/filter\", mode: 'copy'\n    label 'AGAT'\n\n    input:\n    path coding_gene_features_gff\n\n    output:\n    path \"codingGeneFeatures.filter.longest_cds.gff\", emit: longest_isoform\n\n    script:\n    \"\"\"\n    agat_sp_keep_longest_isoform.pl -f ${coding_gene_features_gff} -o codingGeneFeatures.filter.longest_cds.gff\n    \"\"\"\n                                                            \n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    agat_sp_keep_longest_isoform.pl -f ${coding_gene_features_gff} -o codingGeneFeatures.filter.longest_cds.gff\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "coding_gene_features_gff"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"${coding_gene_features_gff.baseName}\"",
            "publishDir \"${params.outdir}/filter\", mode: 'copy'",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "remove_incomplete_gene_models": {
        "name_process": "remove_incomplete_gene_models",
        "string_process": "\nprocess remove_incomplete_gene_models {\n\n    tag \"${coding_gene_features_gff.baseName}\"\n    publishDir \"${params.outdir}/filter\", mode: 'copy'\n    label 'AGAT'\n\n    input:\n    path coding_gene_features_gff\n    path genome_fasta\n\n    output:\n    path \"codingGeneFeatures.filter.longest_cds.complete.gff\", emit: complete_gene_models\n\n    script:\n    \"\"\"\n    agat_sp_filter_incomplete_gene_coding_models.pl --gff ${coding_gene_features_gff} \\\n        -f ${genome_fasta} -o codingGeneFeatures.filter.longest_cds.complete.gff\n    \"\"\"\n                                                                            \n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    agat_sp_filter_incomplete_gene_coding_models.pl --gff ${coding_gene_features_gff} \\\n        -f ${genome_fasta} -o codingGeneFeatures.filter.longest_cds.complete.gff\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "coding_gene_features_gff",
            "genome_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"${coding_gene_features_gff.baseName}\"",
            "publishDir \"${params.outdir}/filter\", mode: 'copy'",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_by_locus_distance": {
        "name_process": "filter_by_locus_distance",
        "string_process": "\nprocess filter_by_locus_distance {\n\n    tag \"${coding_gene_features_gff.baseName}\"\n    publishDir \"${params.outdir}/filter\", mode: 'copy'\n    label 'AGAT'\n\n    input:\n    path coding_gene_features_gff\n\n    output:\n    path \"codingGeneFeatures.filter.longest_cds.complete.good_distance.gff\", emit: distanced_models\n\n    script:\n    \"\"\"\n    agat_sp_filter_by_locus_distance.pl --gff ${coding_gene_features_gff} -d ${params.locus_distance} -o codingGeneFeatures.filter.longest_cds.complete.good_distance.gff\n    \"\"\"\n                                                                \n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    agat_sp_filter_by_locus_distance.pl --gff ${coding_gene_features_gff} -d ${params.locus_distance} -o codingGeneFeatures.filter.longest_cds.complete.good_distance.gff\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "coding_gene_features_gff"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"${coding_gene_features_gff.baseName}\"",
            "publishDir \"${params.outdir}/filter\", mode: 'copy'",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "extract_protein_sequence": {
        "name_process": "extract_protein_sequence",
        "string_process": "\nprocess extract_protein_sequence {\n\n    tag \"${gff_file.baseName}\"\n    label 'AGAT'\n\n    input:\n    path gff_file\n    path genome_fasta\n\n    output:\n    path \"${gff_file.baseName}_proteins.fasta\", emit: proteins\n\n    script:\n    \"\"\"\n    agat_sp_extract_sequences.pl -o ${gff_file.baseName}_proteins.fasta -f $genome_fasta \\\\\n        -p -cfs -cis -ct ${params.codon_table} --g $gff_file\n    \"\"\"\n                                                         \n\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    agat_sp_extract_sequences.pl -o ${gff_file.baseName}_proteins.fasta -f $genome_fasta \\\\\n        -p -cfs -cis -ct ${params.codon_table} --g $gff_file\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gff_file",
            "genome_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"${gff_file.baseName}\"",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "blast_makeblastdb": {
        "name_process": "blast_makeblastdb",
        "string_process": "\nprocess blast_makeblastdb {\n\n    tag \"${fasta_file.baseName} type: $dbtype\"\n    label 'Blast'\n\n    input:\n    path fasta_file\n\n    output:\n    path \"*.{phr,pin,psq}\"\n\n    script:\n    \"\"\"\n    makeblastdb -in $fasta_file -dbtype prot\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    makeblastdb -in $fasta_file -dbtype prot\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"${fasta_file.baseName} type: $dbtype\"",
            "label 'Blast'"
        ],
        "when": "",
        "stub": ""
    },
    "blast_recursive": {
        "name_process": "blast_recursive",
        "string_process": "\nprocess blast_recursive {\n\n    tag \"${fasta_file.baseName}\"\n    label 'Blast'\n\n    input:\n    path fasta_file\n    path blastdb\n\n    output:\n    path \"${fasta_file.baseName}_blast.tsv\"\n\n    script:\n    database = blastdb[0].toString() - ~/.p\\w\\w$/\n    \"\"\"\n    blastp -query $fasta_file -db ${database} -num_threads ${task.cpus} \\\\\n        -outfmt 6 -out ${fasta_file.baseName}_blast.tsv\n    \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "    database = blastdb[0].toString() - ~/.p\\w\\w$/\n    \"\"\"\n    blastp -query $fasta_file -db ${database} -num_threads ${task.cpus} \\\\\n        -outfmt 6 -out ${fasta_file.baseName}_blast.tsv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "GEO database",
            "BLASTP-ACC"
        ],
        "tools_url": [
            "https://bio.tools/GEO_database",
            "https://bio.tools/BLASTP-ACC"
        ],
        "tools_dico": [
            {
                "name": "GEO database",
                "uri": "https://bio.tools/GEO_database",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3810",
                            "term": "Agricultural science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3324",
                            "term": "Infectious disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3324",
                            "term": "Transmissable disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3324",
                            "term": "Communicable disease"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Characterisation of Quorum Sensing System and Its Role in Global Regulation in Hafnia alvei.\n\nThis database stores curated gene expression DataSets, as well as original Series and Platform records in the Gene Expression Omnibus (GEO) repository. Enter search terms to locate experiments of interest. DataSet records contain additional resources including cluster tools and differential expression queries.\n\n(smok* OR diet) AND (mammals[organism] NOT human[organism]).\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/GSE33335 (NLM.NIH.GOV/gds), bio.tools/ncbi_resources (NLM.NIH.GOV), bio.tools/genbank (NLM.NIH.GOV).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'homoserine lactones AHLs Hafnia alvei', 'AHLs Hafnia alvei', 'lactones AHLs Hafnia alvei', 'Hafnia alvei'",
                "homepage": "https://www.ncbi.nlm.nih.gov/gds"
            },
            {
                "name": "BLASTP-ACC",
                "uri": "https://bio.tools/BLASTP-ACC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3297",
                            "term": "Biotechnology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3802",
                                    "term": "Sorting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Parallel Architecture and Hardware Accelerator Design for BLAST-based Protein Sequence Alignment.\n\nIn this study, we design a hardware accelerator for a widely used sequence alignment algorithm, the basic local alignment search tool for proteins (BLASTP). The architecture of the proposed accelerator consists of five stages: a new systolic-array-based one-hit finding stage, a novel RAM-REG-based two-hit finding stage, a refined ungapped extension stage, a faster gapped extension stage, and a highly efficient parallel sorter. The system is implemented on an Altera Stratix V FPGA with a processing speed of more than 500 giga cell updates per second (GCUPS). It can receive a query sequence, compare it with the sequences in the database, and generate a list sorted in descending order of the similarity scores between the query sequence and the subject sequences.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'accelerator', 'Altera', 'Stratix', 'RAM-REG-based'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31581096"
            }
        ],
        "inputs": [
            "fasta_file",
            "blastdb"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"${fasta_file.baseName}\"",
            "label 'Blast'"
        ],
        "when": "",
        "stub": ""
    },
    "gff_filter_by_blast": {
        "name_process": "gff_filter_by_blast",
        "string_process": "\nprocess gff_filter_by_blast {\n\n    tag \"${gff_file.baseName}\"\n    publishDir \"${params.outdir}/BlastFilteredGFF\", mode: 'copy'\n    label 'AGAT'\n\n    input:\n    path gff_file\n    path blast_file\n\n    output:\n    path \"${gff_file.baseName}_blast-filtered.gff3\", emit: blast_filtered\n\n    script:\n    \"\"\"\n    agat_sp_filter_by_mrnaBlastValue.pl --gff $gff_file --blast $blast_file \\\\\n        --outfile ${gff_file.baseName}_blast-filtered.gff3\n    \"\"\"\n                                                                \n\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    agat_sp_filter_by_mrnaBlastValue.pl --gff $gff_file --blast $blast_file \\\\\n        --outfile ${gff_file.baseName}_blast-filtered.gff3\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gff_file",
            "blast_file"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"${gff_file.baseName}\"",
            "publishDir \"${params.outdir}/BlastFilteredGFF\", mode: 'copy'",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "gff2gbk": {
        "name_process": "gff2gbk",
        "string_process": "\nprocess gff2gbk {\n\n    tag \"${gff_file.baseName}\"\n    label 'Augustus'\n\n    input:\n    path gff_file\n    path genome_fasta\n\n    output:\n    path \"${gff_file.baseName}.gbk\"\n\n    script:\n    \"\"\"\n    gff2gbSmallDNA.pl $gff_file $genome_fasta ${params.flank_region_size} ${gff_file.baseName}.gbk\n    \"\"\"\n                                                            \n\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    gff2gbSmallDNA.pl $gff_file $genome_fasta ${params.flank_region_size} ${gff_file.baseName}.gbk\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gff_file",
            "genome_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"${gff_file.baseName}\"",
            "label 'Augustus'"
        ],
        "when": "",
        "stub": ""
    },
    "gbk2augustus": {
        "name_process": "gbk2augustus",
        "string_process": "\nprocess gbk2augustus {\n\n    tag \"Make Augustus training set: ${genbank_file.baseName}\"\n    label 'Augustus'\n    publishDir \"${params.outdir}/Augustus\", mode: 'copy',\n        saveAs: { filename ->\n            if (filename.indexOf(\".train\") > 0)        \"TrainingData/$filename\"\n            else if (filename.indexOf(\".test\") > 0)    \"TestingData/$filename\"\n            else if (filename.indexOf(\".gbk\") > 0)     \"GenbankFile/$filename\"\n            else filename }\n\n    input:\n    path genbank_file\n\n    output:\n    path \"${genbank_file}.train\", emit: training_data\n    path \"${genbank_file}.test\", emit: testing_data\n    path \"${genbank_file}\", emit: genbank_file\n\n    script:\n    \"\"\"\n    randomSplit.pl $genbank_file ${params.test_size}\n    \"\"\"\n                                                         \n\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    randomSplit.pl $genbank_file ${params.test_size}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genbank_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"Make Augustus training set: ${genbank_file.baseName}\"",
            "label 'Augustus'",
            "publishDir \"${params.outdir}/Augustus\", mode: 'copy' , saveAs: { filename -> if (filename.indexOf(\".train\") > 0) \"TrainingData/$filename\" else if (filename.indexOf(\".test\") > 0) \"TestingData/$filename\" else if (filename.indexOf(\".gbk\") > 0) \"GenbankFile/$filename\" else filename }"
        ],
        "when": "",
        "stub": ""
    },
    "augustus_training": {
        "name_process": "augustus_training",
        "string_process": "\nprocess augustus_training {\n\n    tag \"$species_label\"\n    label 'Augustus'\n    publishDir \"${params.outdir}/Augustus_training\", mode: 'copy'\n    publishDir \"${params.maker_species_publishdir}\", mode: 'copy', enabled: file(params.maker_species_publishdir).exists(), pattern: \"${species_label}\"\n\n    input:\n    path training_file\n    path test_file\n    val species_label\n\n    output:\n    path \"${species_label}_run.log\"\n    path \"${species_label}\", emit: training_model\n\n    script:\n    \"\"\"\n    : \\${AUGUSTUS_CONFIG_PATH:=/usr/local/config}\n    cp -rv \\${AUGUSTUS_CONFIG_PATH} .\n    export AUGUSTUS_CONFIG_PATH=\"\\$PWD/config\"\n    new_species.pl --species=$species_label\n    etraining --species=$species_label $training_file\n    augustus --species=$species_label $test_file | tee ${species_label}_run.log\n    mv config/species/${species_label} .\n    \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    : \\${AUGUSTUS_CONFIG_PATH:=/usr/local/config}\n    cp -rv \\${AUGUSTUS_CONFIG_PATH} .\n    export AUGUSTUS_CONFIG_PATH=\"\\$PWD/config\"\n    new_species.pl --species=$species_label\n    etraining --species=$species_label $training_file\n    augustus --species=$species_label $test_file | tee ${species_label}_run.log\n    mv config/species/${species_label} .\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "AUGUSTUS"
        ],
        "tools_url": [
            "https://bio.tools/augustus"
        ],
        "tools_dico": [
            {
                "name": "AUGUSTUS",
                "uri": "https://bio.tools/augustus",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Homology-based gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3662",
                                    "term": "Ab-initio gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0004",
                                    "term": "Operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Evidence-based gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Gene prediction (homology-based)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Empirical gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Similarity-based gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Empirical gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3662",
                                    "term": "Gene prediction (ab-initio)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "AUGUSTUS is a eukaryotic gene prediction tool. It can integrate evidence, e.g. from RNA-Seq, ESTs, proteomics, but can also predict genes ab initio. The PPX extension to AUGUSTUS can take a protein sequence multiple sequence alignment as input to find new members of the family in a genome. It can be run through a web interface (see https://bio.tools/webaugustus), or downloaded and run locally.",
                "homepage": "http://bioinf.uni-greifswald.de/augustus"
            }
        ],
        "inputs": [
            "training_file",
            "test_file",
            "species_label"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"$species_label\"",
            "label 'Augustus'",
            "publishDir \"${params.outdir}/Augustus_training\", mode: 'copy'",
            "publishDir \"${params.maker_species_publishdir}\", mode: 'copy', enabled: file(params.maker_species_publishdir).exists(), pattern: \"${species_label}\""
        ],
        "when": "",
        "stub": ""
    },
    "convert_gff2zff": {
        "name_process": "convert_gff2zff",
        "string_process": "\nprocess convert_gff2zff {\n\n    label 'AGAT'\n\n    input:\n    path annotation\n    path genome\n\n    output:\n    path \"*.{ann,dna}\"\n\n    script:\n    \"\"\"\n    agat_convert_sp_gff2zff.pl --gff $annotation \\\\\n        --fasta $genome -o ${genome.baseName}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    agat_convert_sp_gff2zff.pl --gff $annotation \\\\\n        --fasta $genome -o ${genome.baseName}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annotation",
            "genome"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "snap_training": {
        "name_process": "snap_training",
        "string_process": "\nprocess snap_training {\n\n    publishDir \"${params.outdir}/Snap_training\", mode: 'copy'\n\n    input:\n    path training_files\n    val species_label\n\n    output:\n    path \"*.hmm\", emit: training_model\n\n    script:\n    ann_file = training_files.find { it =~ /.ann$/ }\n    dna_file = training_files.find { it =~ /.dna$/ }\n    \"\"\"\n    fathom -categorize ${params.flank_region_size} ${ann_file} ${dna_file}\n    fathom -export ${params.flank_region_size} -plus uni.ann uni.dna\n    forge export.ann export.dna\n    hmm-assembler.pl \"$species_label\" . > \"${species_label}.hmm\"\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    ann_file = training_files.find { it =~ /.ann$/ }\n    dna_file = training_files.find { it =~ /.dna$/ }\n    \"\"\"\n    fathom -categorize ${params.flank_region_size} ${ann_file} ${dna_file}\n    fathom -export ${params.flank_region_size} -plus uni.ann uni.dna\n    forge export.ann export.dna\n    hmm-assembler.pl \"$species_label\" . > \"${species_label}.hmm\"\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "FORGE"
        ],
        "tools_url": [
            "https://bio.tools/forge"
        ],
        "tools_dico": [
            {
                "name": "FORGE",
                "uri": "https://bio.tools/forge",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Functional element Overlap analysis of the Results of GWAS Experiments . Discover cell specific enrichments of GWAS associated SNPs in regulatory regions and provides tabular and graphical summaries of the enrichments.",
                "homepage": "http://phase3browser.1000genomes.org/Homo_sapiens/UserData/Forge"
            }
        ],
        "inputs": [
            "training_files",
            "species_label"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "publishDir \"${params.outdir}/Snap_training\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "gff2protein": {
        "name_process": "gff2protein",
        "string_process": "\nprocess gff2protein {\n\n    label 'AGAT'\n\n    input:\n    path gff_file\n    path genome_fasta\n\n    output:\n    path \"${gff_file.baseName}_proteins.fasta\"\n\n    script:\n    \"\"\"\n    agat_sp_extract_sequences.pl -o ${gff_file.baseName}_proteins.fasta -f $genome_fasta \\\\\n        -p -cfs -cis -ct ${params.codon_table} --gff $gff_file\n    \"\"\"\n                                                         \n\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    agat_sp_extract_sequences.pl -o ${gff_file.baseName}_proteins.fasta -f $genome_fasta \\\\\n        -p -cfs -cis -ct ${params.codon_table} --gff $gff_file\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gff_file",
            "genome_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "makeblastdb": {
        "name_process": "makeblastdb",
        "string_process": "\nprocess makeblastdb {\n\n    label 'blast'\n\n    input:\n    path fasta\n    val state\n\n    output:\n    path \"*.fasta*\"\n\n    when:\n    state == 'DBFILES_ABSENT'\n\n    script:\n    \"\"\"\n    if [[ \"$fasta\" =~ \\\\.f(ast|n)?a\\$ ]]; then\n        makeblastdb -in $fasta -dbtype prot\n    else\n        cp $fasta protein.fasta\n        makeblastdb -in protein.fasta -dbtype prot\n    fi\n    \"\"\"\n\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    if [[ \"$fasta\" =~ \\\\.f(ast|n)?a\\$ ]]; then\n        makeblastdb -in $fasta -dbtype prot\n    else\n        cp $fasta protein.fasta\n        makeblastdb -in protein.fasta -dbtype prot\n    fi\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta",
            "state"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "label 'blast'"
        ],
        "when": "state == 'DBFILES_ABSENT'",
        "stub": ""
    },
    "blastp": {
        "name_process": "blastp",
        "string_process": "\nprocess blastp {\n\n    label 'blast'\n\n    input:\n    path fasta_file\n    path blastdb\n\n    output:\n    path \"${fasta_file.baseName}_blast.tsv\"\n\n    script:\n                                                    \n    database = blastdb.find { it =~ /\\.f(ast|n)?a$/ }\n    \"\"\"\n    blastp -query $fasta_file -db ${database} -num_threads ${task.cpus} \\\\\n        -evalue ${params.blast_evalue} -outfmt 6 -out ${fasta_file.baseName}_blast.tsv\n    \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "    database = blastdb.find { it =~ /\\.f(ast|n)?a$/ }\n    \"\"\"\n    blastp -query $fasta_file -db ${database} -num_threads ${task.cpus} \\\\\n        -evalue ${params.blast_evalue} -outfmt 6 -out ${fasta_file.baseName}_blast.tsv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "GEO database",
            "BLASTP-ACC"
        ],
        "tools_url": [
            "https://bio.tools/GEO_database",
            "https://bio.tools/BLASTP-ACC"
        ],
        "tools_dico": [
            {
                "name": "GEO database",
                "uri": "https://bio.tools/GEO_database",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3810",
                            "term": "Agricultural science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3324",
                            "term": "Infectious disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3324",
                            "term": "Transmissable disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3324",
                            "term": "Communicable disease"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Characterisation of Quorum Sensing System and Its Role in Global Regulation in Hafnia alvei.\n\nThis database stores curated gene expression DataSets, as well as original Series and Platform records in the Gene Expression Omnibus (GEO) repository. Enter search terms to locate experiments of interest. DataSet records contain additional resources including cluster tools and differential expression queries.\n\n(smok* OR diet) AND (mammals[organism] NOT human[organism]).\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/GSE33335 (NLM.NIH.GOV/gds), bio.tools/ncbi_resources (NLM.NIH.GOV), bio.tools/genbank (NLM.NIH.GOV).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'homoserine lactones AHLs Hafnia alvei', 'AHLs Hafnia alvei', 'lactones AHLs Hafnia alvei', 'Hafnia alvei'",
                "homepage": "https://www.ncbi.nlm.nih.gov/gds"
            },
            {
                "name": "BLASTP-ACC",
                "uri": "https://bio.tools/BLASTP-ACC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3297",
                            "term": "Biotechnology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3802",
                                    "term": "Sorting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Parallel Architecture and Hardware Accelerator Design for BLAST-based Protein Sequence Alignment.\n\nIn this study, we design a hardware accelerator for a widely used sequence alignment algorithm, the basic local alignment search tool for proteins (BLASTP). The architecture of the proposed accelerator consists of five stages: a new systolic-array-based one-hit finding stage, a novel RAM-REG-based two-hit finding stage, a refined ungapped extension stage, a faster gapped extension stage, and a highly efficient parallel sorter. The system is implemented on an Altera Stratix V FPGA with a processing speed of more than 500 giga cell updates per second (GCUPS). It can receive a query sequence, compare it with the sequences in the database, and generate a list sorted in descending order of the similarity scores between the query sequence and the subject sequences.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'accelerator', 'Altera', 'Stratix', 'RAM-REG-based'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31581096"
            }
        ],
        "inputs": [
            "fasta_file",
            "blastdb"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "label 'blast'"
        ],
        "when": "",
        "stub": ""
    },
    "interproscan": {
        "name_process": "interproscan",
        "string_process": "\nprocess interproscan {\n\n    input:\n    path protein_fasta\n\n    output:\n    path '*.tsv'\n\n    script:\n    applications = params.interproscan_db ? \"-appl ${params.interproscan_db}\" : ''\n    tmpdir = task.scratch ? \"-T ${task.scratch}\" : ''\n  \n    \"\"\"\n    export PATH=\"/opt/interproscan:\\$PATH\"\n    interproscan.sh ${applications} -i $protein_fasta -o ${protein_fasta.baseName}.tsv \\\\\n        -f TSV --iprlookup --goterms -pa -dp -t p ${tmpdir}\n    \"\"\"\n\n}",
        "nb_lignes_process": 18,
        "string_script": "    applications = params.interproscan_db ? \"-appl ${params.interproscan_db}\" : ''\n    tmpdir = task.scratch ? \"-T ${task.scratch}\" : ''\n  \n    \"\"\"\n    export PATH=\"/opt/interproscan:\\$PATH\"\n    interproscan.sh ${applications} -i $protein_fasta -o ${protein_fasta.baseName}.tsv \\\\\n        -f TSV --iprlookup --goterms -pa -dp -t p ${tmpdir}\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "protein_fasta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "merge_functional_annotation": {
        "name_process": "merge_functional_annotation",
        "string_process": "\nprocess merge_functional_annotation {\n\n    publishDir \"${params.outdir}/blast_tsv\", mode: 'copy', pattern: 'blast_merged.tsv'\n    publishDir \"${params.outdir}/interproscan_tsv\", mode: 'copy', pattern: 'interproscan_merged.tsv'\n    publishDir \"${params.outdir}/final_annotation\", mode: 'copy', pattern: \"${gff_annotation.baseName}_plus-functional-annotation.gff\"\n    label 'AGAT'\n\n    input:\n    path gff_annotation\n    path merged_blast_results\n    path merged_interproscan_results\n    path blast_files\n\n    output:\n    path \"${gff_annotation.baseName}_plus-functional-annotation.gff\"\n    path \"*.tsv\", includeInputs:true\n\n    script:\n    fasta = blast_files.find { it =~ /\\.f(ast|n)?a$/ }\n    \"\"\"\n    agat_sp_manage_functional_annotation.pl -f ${gff_annotation} \\\\\n        -b ${merged_blast_results} -i ${merged_interproscan_results} \\\\\n        -db ${params.blast_db_fasta} -id ${params.id_prefix} \\\\\n        -pe ${params.protein_existence} \\\\\n        -o ${gff_annotation.baseName}_plus-functional-annotation.gff\n    \"\"\"\n                                                                    \n\n}",
        "nb_lignes_process": 28,
        "string_script": "    fasta = blast_files.find { it =~ /\\.f(ast|n)?a$/ }\n    \"\"\"\n    agat_sp_manage_functional_annotation.pl -f ${gff_annotation} \\\\\n        -b ${merged_blast_results} -i ${merged_interproscan_results} \\\\\n        -db ${params.blast_db_fasta} -id ${params.id_prefix} \\\\\n        -pe ${params.protein_existence} \\\\\n        -o ${gff_annotation.baseName}_plus-functional-annotation.gff\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "FASTA"
        ],
        "tools_url": [
            "https://bio.tools/fasta"
        ],
        "tools_dico": [
            {
                "name": "FASTA",
                "uri": "https://bio.tools/fasta",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0157",
                            "term": "Sequence composition, complexity and repeats"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2451",
                                    "term": "Sequence comparison"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "The FASTA programs find regions of local or global similarity between protein or DNA sequences, either by searching protein or DNA databases, or by identifying local duplications within a sequence. Like BLAST, FASTA can be used to infer functional and evolutionary relationships between sequences as well as help identify members of gene families.",
                "homepage": "http://fasta.bioch.virginia.edu/"
            }
        ],
        "inputs": [
            "gff_annotation",
            "merged_blast_results",
            "merged_interproscan_results",
            "blast_files"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "publishDir \"${params.outdir}/blast_tsv\", mode: 'copy', pattern: 'blast_merged.tsv'",
            "publishDir \"${params.outdir}/interproscan_tsv\", mode: 'copy', pattern: 'interproscan_merged.tsv'",
            "publishDir \"${params.outdir}/final_annotation\", mode: 'copy', pattern: \"${gff_annotation.baseName}_plus-functional-annotation.gff\"",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "assembly_purify": {
        "name_process": "assembly_purify",
        "string_process": "\nprocess assembly_purify {\n\n    tag \"${fasta_file.baseName} ; min length = ${params.min_length}\"\n    publishDir \"${params.outdir}/assembly\", mode: 'copy'\n    label 'GAAS'\n\n    input:\n    path fasta_file\n\n    output:\n    path \"${fasta_file.baseName}_purified/${fasta_file.baseName}_purified.fa\"\n\n    script:\n    \"\"\"\n    gaas_fasta_purify.pl --infile $fasta_file --size ${params.min_length} --output ${fasta_file.baseName}_purified\n    \"\"\"\n                                                                    \n\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    gaas_fasta_purify.pl --infile $fasta_file --size ${params.min_length} --output ${fasta_file.baseName}_purified\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"${fasta_file.baseName} ; min length = ${params.min_length}\"",
            "publishDir \"${params.outdir}/assembly\", mode: 'copy'",
            "label 'GAAS'"
        ],
        "when": "",
        "stub": ""
    },
    "assembly_generate_stats": {
        "name_process": "assembly_generate_stats",
        "string_process": "\nprocess assembly_generate_stats {\n\n    tag \"${fasta_file.simpleName}\"\n    publishDir \"${params.outdir}/stats\", mode: 'copy'\n    label 'GAAS'\n\n    input:\n    path fasta_file\n\n    output:\n    path \"${fasta_file.baseName}_report\"\n\n    script:\n    \"\"\"\n    gaas_fasta_statistics.pl --infile $fasta_file --output ${fasta_file.baseName}_report\n    \"\"\"\n                                                                        \n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    gaas_fasta_statistics.pl --infile $fasta_file --output ${fasta_file.baseName}_report\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"${fasta_file.simpleName}\"",
            "publishDir \"${params.outdir}/stats\", mode: 'copy'",
            "label 'GAAS'"
        ],
        "when": "",
        "stub": ""
    },
    "busco": {
        "name_process": "busco",
        "string_process": "\nprocess busco {\n\n    tag \"$fasta\"\n    publishDir \"${params.outdir}/busco\", mode: 'copy'\n\n    input:\n    path fasta\n    each lineage\n\n    output:\n    path out\n\n    script:\n    out = \"busco_${fasta.baseName}_${lineage}\"\n    \"\"\"\n    # Nextflow changes the container --entrypoint to /bin/bash (container default entrypoint: /usr/local/env-execute)\n    # Check for container variable initialisation script and source it.\n    if [ -f \"/usr/local/env-activate.sh\" ]; then\n        # . \"/usr/local/env-activate.sh\"  # Errors out because of various unbound variables\n        export PATH='/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\n        export CONDA_PREFIX='/usr/local'\n        export CONDA_SHLVL='1'\n        export CONDA_DEFAULT_ENV='/usr/local'\n        export CONDA_PROMPT_MODIFIER=''\n        . \"/usr/local/etc/conda/activate.d/activate-r-base.sh\"\n        . \"/usr/local/etc/conda/activate.d/augustus.sh\"\n        . \"/usr/local/etc/conda/activate.d/openjdk_activate.sh\"\n    fi\n    # If the augustus config directory is not writable, then copy to writeable area\n    if [ ! -w \"\\${AUGUSTUS_CONFIG_PATH}\" ]; then\n        # Create writable tmp directory for augustus\n        AUG_CONF_DIR=\\$( mktemp -d -p \\$PWD )\n        cp -r \\$AUGUSTUS_CONFIG_PATH/* \\$AUG_CONF_DIR\n        export AUGUSTUS_CONFIG_PATH=\\$AUG_CONF_DIR\n        echo \"New AUGUSTUS_CONFIG_PATH=\\${AUGUSTUS_CONFIG_PATH}\"\n    fi\n    busco -c ${task.cpus} -i $fasta -l $lineage -m genome --out $out\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    out = \"busco_${fasta.baseName}_${lineage}\"\n    \"\"\"\n    # Nextflow changes the container --entrypoint to /bin/bash (container default entrypoint: /usr/local/env-execute)\n    # Check for container variable initialisation script and source it.\n    if [ -f \"/usr/local/env-activate.sh\" ]; then\n        # . \"/usr/local/env-activate.sh\"  # Errors out because of various unbound variables\n        export PATH='/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\n        export CONDA_PREFIX='/usr/local'\n        export CONDA_SHLVL='1'\n        export CONDA_DEFAULT_ENV='/usr/local'\n        export CONDA_PROMPT_MODIFIER=''\n        . \"/usr/local/etc/conda/activate.d/activate-r-base.sh\"\n        . \"/usr/local/etc/conda/activate.d/augustus.sh\"\n        . \"/usr/local/etc/conda/activate.d/openjdk_activate.sh\"\n    fi\n    # If the augustus config directory is not writable, then copy to writeable area\n    if [ ! -w \"\\${AUGUSTUS_CONFIG_PATH}\" ]; then\n        # Create writable tmp directory for augustus\n        AUG_CONF_DIR=\\$( mktemp -d -p \\$PWD )\n        cp -r \\$AUGUSTUS_CONFIG_PATH/* \\$AUG_CONF_DIR\n        export AUGUSTUS_CONFIG_PATH=\\$AUG_CONF_DIR\n        echo \"New AUGUSTUS_CONFIG_PATH=\\${AUGUSTUS_CONFIG_PATH}\"\n    fi\n    busco -c ${task.cpus} -i $fasta -l $lineage -m genome --out $out\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "Ragout",
            "BUSCO"
        ],
        "tools_url": [
            "https://bio.tools/ragout",
            "https://bio.tools/busco"
        ],
        "tools_dico": [
            {
                "name": "Ragout",
                "uri": "https://bio.tools/ragout",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Tool for assisted assembly using multiple references. It takes a short read assembly (a set of contigs), a set of related references and a corresponding phylogenetic tree and then assembles the contigs into scaffolds.",
                "homepage": "http://fenderglass.github.io/Ragout/"
            },
            {
                "name": "BUSCO",
                "uri": "https://bio.tools/busco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Provides measures for quantitative assessment of genome assembly, gene set, and transcriptome completeness based on evolutionarily informed expectations of gene content from near-universal single-copy orthologs.",
                "homepage": "http://busco.ezlab.org/"
            }
        ],
        "inputs": [
            "fasta",
            "lineage"
        ],
        "nb_inputs": 2,
        "outputs": [
            "out"
        ],
        "nb_outputs": 1,
        "name_workflow": "NBISweden__pipelines-nextflow",
        "directive": [
            "tag \"$fasta\"",
            "publishDir \"${params.outdir}/busco\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
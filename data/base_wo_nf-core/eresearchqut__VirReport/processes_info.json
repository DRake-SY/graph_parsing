{
    "readprocessing": {
        "name_process": "readprocessing",
        "string_process": "\nprocess readprocessing {\n    tag \"$sampleid\"\n    publishDir \"${params.outdir}/01_read_size_selection\", mode: 'link'\n\n    input:\n    tuple val(sampleid), file(fastqfile), val(minlen), val(maxlen) from read_size_selection_ch\n\n    output:\n    file \"${sampleid}_${minlen}-${maxlen}nt_cutadapt.log\"\n    file \"${sampleid}_${minlen}-${maxlen}nt.fastq\"\n    tuple val(sampleid), file(fastqfile), file(\"${sampleid}_${minlen}-${maxlen}nt.fastq\"), val(minlen), val(maxlen) into velvet_ch\n    tuple val(sampleid), file(\"${sampleid}_${minlen}-${maxlen}nt.fastq\"), val(minlen), val(maxlen) into spades_ch\n\n    script:\n    \"\"\"\n    cutadapt -j ${task.cpus} -m ${minlen} -M ${maxlen} -o ${sampleid}_${minlen}-${maxlen}nt.fastq ${fastqfile} > ${sampleid}_${minlen}-${maxlen}nt_cutadapt.log\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    cutadapt -j ${task.cpus} -m ${minlen} -M ${maxlen} -o ${sampleid}_${minlen}-${maxlen}nt.fastq ${fastqfile} > ${sampleid}_${minlen}-${maxlen}nt_cutadapt.log\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Cutadapt"
        ],
        "tools_url": [
            "https://bio.tools/cutadapt"
        ],
        "tools_dico": [
            {
                "name": "Cutadapt",
                "uri": "https://bio.tools/cutadapt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0632",
                            "term": "Probes and primers"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3495",
                                "term": "RNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Find and remove adapter sequences, primers, poly-A tails and other types of unwanted sequence from your high-throughput sequencing reads.",
                "homepage": "https://pypi.python.org/pypi/cutadapt"
            }
        ],
        "inputs": [
            "read_size_selection_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "velvet_ch",
            "spades_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "tag \"$sampleid\"",
            "publishDir \"${params.outdir}/01_read_size_selection\", mode: 'link'"
        ],
        "when": "",
        "stub": ""
    },
    "velvet": {
        "name_process": "velvet",
        "string_process": "\nprocess velvet {\n    publishDir \"${params.outdir}/02_velvet/${sampleid}\", mode: 'link'\n    tag \"$sampleid\"\n\n    input:\n    tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), val(minlen), val(maxlen) from velvet_ch\n\n    output:\n    file \"${sampleid}_velvet_${minlen}-${maxlen}nt_k15/*\"\n    tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), file(\"${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.fasta\"), \\\n        val(minlen), val(maxlen) into cap3_ch\n\n    script:\n    \"\"\"\n    #run velvet de novo assembler\n    echo 'Starting velvet de novo assembly';\n    velveth ${sampleid}_velvet_${minlen}-${maxlen}nt_k15 15 -short -fastq ${fastq_filt_by_size}\n    velvetg ${sampleid}_velvet_${minlen}-${maxlen}nt_k15 -exp_cov 2\n\n    #edit contigs name and rename velvet assembly\n    sed 's/>/>velvet_/' ${sampleid}_velvet_${minlen}-${maxlen}nt_k15/contigs.fa > ${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    #run velvet de novo assembler\n    echo 'Starting velvet de novo assembly';\n    velveth ${sampleid}_velvet_${minlen}-${maxlen}nt_k15 15 -short -fastq ${fastq_filt_by_size}\n    velvetg ${sampleid}_velvet_${minlen}-${maxlen}nt_k15 -exp_cov 2\n\n    #edit contigs name and rename velvet assembly\n    sed 's/>/>velvet_/' ${sampleid}_velvet_${minlen}-${maxlen}nt_k15/contigs.fa > ${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.fasta\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "velvet_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sampleid",
            "cap3_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "publishDir \"${params.outdir}/02_velvet/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\""
        ],
        "when": "",
        "stub": ""
    },
    "cap3": {
        "name_process": "cap3",
        "string_process": "\nprocess cap3 {\n    label \"local\"\n    publishDir \"${params.outdir}/03_cap3/${sampleid}\", mode: 'link'\n    tag \"$sampleid\"\n\n    input:\n    tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), file(scaffolds_fasta), val(minlen), val(maxlen) from cap3_ch\n\n    output:\n    tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), file(\"${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta\"), val(minlen), val(maxlen) into blastn_nt_velvet_ch\n    tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), file(\"${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta\"), val(minlen), val(maxlen) into blast_nt_localdb_velvet_ch, getorf_ch\n\n    script:\n    \"\"\"\n    #collapse velvet contigs\n    cap3 ${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.fasta -s 300 -j 31 -i 30 -p 90 -o 16\n    cat ${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.fasta.cap.singlets ${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.fasta.cap.contigs > ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt.fasta\n    extract_seqs_rename.py ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt.fasta ${params.cap3_len} \\\n                             | sed \"s/CONTIG/${sampleid}_${minlen}-${maxlen}_/\" \\\n                             | sed 's/|>/ |/' | awk '{print \\$1}'\\\n                             > ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    #collapse velvet contigs\n    cap3 ${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.fasta -s 300 -j 31 -i 30 -p 90 -o 16\n    cat ${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.fasta.cap.singlets ${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.fasta.cap.contigs > ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt.fasta\n    extract_seqs_rename.py ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt.fasta ${params.cap3_len} \\\n                             | sed \"s/CONTIG/${sampleid}_${minlen}-${maxlen}_/\" \\\n                             | sed 's/|>/ |/' | awk '{print \\$1}'\\\n                             > ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cap3_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "blastn_nt_velvet_ch",
            "blast_nt_localdb_velvet_ch",
            "getorf_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"local\"",
            "publishDir \"${params.outdir}/03_cap3/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\""
        ],
        "when": "",
        "stub": ""
    },
    "blastn_nt_velvet": {
        "name_process": "blastn_nt_velvet",
        "string_process": "\nprocess blastn_nt_velvet {\n    label \"blastn_mem\"\n    publishDir \"${params.outdir}/04_blastn/${sampleid}\", mode: 'link'\n    tag \"$sampleid\"\n    containerOptions \"${bindOptions}\"\n\n    input:\n    tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), file(\"${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta\"), val(minlen), val(maxlen) from blastn_nt_velvet_ch\n\n    output:\n    file \"${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT.bls\"\n    file \"${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits.txt\"\n    file \"${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids_final.txt\"\n    tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), file(\"${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids_final.txt\"), file(\"${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids_seq_ids_taxonomy.txt\"), val(minlen), val(maxlen) into blastTools_blastn_velvet_ch\n    \n    script:\n    def blast_task_param = (params.blastn_method == \"blastn\") ? \"-task blastn\" : ''\n    \"\"\"\n    #To extract the taxonomy, copy the taxonomy databases associated with your blast NT database\n    cp ${params.blast_db_dir}/taxdb.btd .\n    cp ${params.blast_db_dir}/taxdb.bti .\n    blastn ${blast_task_param} \\\n        -query ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta \\\n        -db ${blastn_db_name} \\\n        -out ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT.bls \\\n        -evalue 0.0001 \\\n        -num_threads 4 \\\n        -outfmt '6 qseqid sgi sacc length pident mismatch gapopen qstart qend qlen sstart send slen sstrand evalue bitscore qcovhsp stitle staxids qseq sseq sseqid qcovs qframe sframe sscinames' \\\n        -max_target_seqs 50\n\n    grep \">\" ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta | sed 's/>//' > ${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.ids\n    \n    #fetch top blastn hits\n    for i in `cat ${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.ids`; do\n        grep \\$i ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT.bls | head -n5 >> ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits.txt;\n    done\n    \n    grep -i \"Virus\" ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits.txt > ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids.txt  || [[ \\$? == 1 ]]\n    grep -i \"Viroid\" ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits.txt >> ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids.txt || [[ \\$? == 1 ]]\n    cat ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids.txt | sed 's/ /_/g' > ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids_final.txt\n    cut -f3,26 ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids_final.txt | sort | uniq > ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids_seq_ids_taxonomy.txt\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def blast_task_param = (params.blastn_method == \"blastn\") ? \"-task blastn\" : ''\n    \"\"\"\n    #To extract the taxonomy, copy the taxonomy databases associated with your blast NT database\n    cp ${params.blast_db_dir}/taxdb.btd .\n    cp ${params.blast_db_dir}/taxdb.bti .\n    blastn ${blast_task_param} \\\n        -query ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta \\\n        -db ${blastn_db_name} \\\n        -out ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT.bls \\\n        -evalue 0.0001 \\\n        -num_threads 4 \\\n        -outfmt '6 qseqid sgi sacc length pident mismatch gapopen qstart qend qlen sstart send slen sstrand evalue bitscore qcovhsp stitle staxids qseq sseq sseqid qcovs qframe sframe sscinames' \\\n        -max_target_seqs 50\n\n    grep \">\" ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta | sed 's/>//' > ${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.ids\n    \n    #fetch top blastn hits\n    for i in `cat ${sampleid}_velvet_assembly_${minlen}-${maxlen}nt.ids`; do\n        grep \\$i ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT.bls | head -n5 >> ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits.txt;\n    done\n    \n    grep -i \"Virus\" ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits.txt > ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids.txt  || [[ \\$? == 1 ]]\n    grep -i \"Viroid\" ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits.txt >> ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids.txt || [[ \\$? == 1 ]]\n    cat ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids.txt | sed 's/ /_/g' > ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids_final.txt\n    cut -f3,26 ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids_final.txt | sort | uniq > ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_NT_top5Hits_virus_viroids_seq_ids_taxonomy.txt\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "blastn_nt_velvet_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "blastTools_blastn_velvet_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"blastn_mem\"",
            "publishDir \"${params.outdir}/04_blastn/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\"",
            "containerOptions \"${bindOptions}\""
        ],
        "when": "",
        "stub": ""
    },
    "BlastTools_blastn_velvet": {
        "name_process": "BlastTools_blastn_velvet",
        "string_process": "\nprocess BlastTools_blastn_velvet {\n    label \"medium_mem\"\n    publishDir \"${params.outdir}/05_blastoutputs/${sampleid}\", mode: 'link'\n    tag \"$sampleid\"\n\n    input:\n    tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), file(top5Hits_final), file(taxonomy), val(minlen), val(maxlen) from blastTools_blastn_velvet_ch\n\n    output:\n    file \"summary_${top5Hits_final}\"\n    tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), file(\"summary_${top5Hits_final}\"), file(taxonomy), val(minlen), val(maxlen) into blastTools_results_ch\n\n    script:\n    \"\"\"\n    java -jar ${projectDir}/bin/BlastTools.jar -t blastn ${top5Hits_final}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    java -jar ${projectDir}/bin/BlastTools.jar -t blastn ${top5Hits_final}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blastTools_blastn_velvet_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "blastTools_results_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"medium_mem\"",
            "publishDir \"${params.outdir}/05_blastoutputs/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\""
        ],
        "when": "",
        "stub": ""
    },
    "blast_nt_localdb_velvet": {
        "name_process": "blast_nt_localdb_velvet",
        "string_process": " process blast_nt_localdb_velvet {\n        label \"blastn_mem\"\n        publishDir \"${params.outdir}/04_blastn/${sampleid}\", mode: 'link'\n        tag \"$sampleid\"\n        containerOptions \"${bindOptions}\"\n\n        input:\n        tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), file(\"${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta\"), val(minlen), val(maxlen) from blast_nt_localdb_velvet_ch\n        \n        output:\n        file \"${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_localdb.bls\"\n        file \"${sampleid}_velvet_${minlen}-${maxlen}nt_megablast_vs_localdb.bls\"\n        tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), file(\"${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_localdb.bls\"), file(\"${sampleid}_velvet_${minlen}-${maxlen}nt_megablast_vs_localdb.bls\"), val(minlen), val(maxlen) into filter_blast_nt_localdb_velvet_ch\n\n        script:\n        \"\"\"\n        #1. blastn search\n        blastn -task blastn \\\n            -query ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta \\\n            -db ${blast_local_db_dir}/${blast_local_db_name} \\\n            -out ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_localdb.bls \\\n            -evalue ${params.blastn_evalue} \\\n            -num_threads ${task.cpus} \\\n            -outfmt '6 qseqid sgi sacc length pident mismatch gapopen qstart qend qlen sstart send slen sstrand evalue bitscore qcovhsp stitle staxids qseq sseq sseqid qcovs qframe sframe' \\\n            -max_target_seqs 50\n\n        #2. megablast search\n        blastn -query ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta \\\n            -db ${blast_local_db_dir}/${blast_local_db_name} \\\n            -out ${sampleid}_velvet_${minlen}-${maxlen}nt_megablast_vs_localdb.bls \\\n            -evalue ${params.blastn_evalue} \\\n            -num_threads ${task.cpus} \\\n            -outfmt '6 qseqid sgi sacc length pident mismatch gapopen qstart qend qlen sstart send slen sstrand evalue bitscore qcovhsp stitle staxids qseq sseq sseqid qcovs qframe sframe' \\\n            -max_target_seqs 50\n        \"\"\"\n    }",
        "nb_lignes_process": 34,
        "string_script": "        \"\"\"\n        #1. blastn search\n        blastn -task blastn \\\n            -query ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta \\\n            -db ${blast_local_db_dir}/${blast_local_db_name} \\\n            -out ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_localdb.bls \\\n            -evalue ${params.blastn_evalue} \\\n            -num_threads ${task.cpus} \\\n            -outfmt '6 qseqid sgi sacc length pident mismatch gapopen qstart qend qlen sstart send slen sstrand evalue bitscore qcovhsp stitle staxids qseq sseq sseqid qcovs qframe sframe' \\\n            -max_target_seqs 50\n\n        #2. megablast search\n        blastn -query ${sampleid}_velvet_cap3_${minlen}-${maxlen}nt_rename.fasta \\\n            -db ${blast_local_db_dir}/${blast_local_db_name} \\\n            -out ${sampleid}_velvet_${minlen}-${maxlen}nt_megablast_vs_localdb.bls \\\n            -evalue ${params.blastn_evalue} \\\n            -num_threads ${task.cpus} \\\n            -outfmt '6 qseqid sgi sacc length pident mismatch gapopen qstart qend qlen sstart send slen sstrand evalue bitscore qcovhsp stitle staxids qseq sseq sseqid qcovs qframe sframe' \\\n            -max_target_seqs 50\n        \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "blast_nt_localdb_velvet_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "filter_blast_nt_localdb_velvet_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"blastn_mem\"",
            "publishDir \"${params.outdir}/04_blastn/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\"",
            "containerOptions \"${bindOptions}\""
        ],
        "when": "",
        "stub": ""
    },
    "filter_blast_nt_localdb_velvet": {
        "name_process": "filter_blast_nt_localdb_velvet",
        "string_process": " process filter_blast_nt_localdb_velvet {\n        label \"local\"\n        publishDir \"${params.outdir}/05_blastoutputs/${sampleid}\", mode: 'link'\n        tag \"$sampleid\"\n\n        input:\n        tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), file(\"${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_localdb.bls\"), file(\"${sampleid}_velvet_${minlen}-${maxlen}nt_megablast_vs_localdb.bls\"), val(minlen), val(maxlen) from filter_blast_nt_localdb_velvet_ch\n\n        output:\n                                                                                                                           \n                                                                                                                             \n                                                                                                                        \n        file \"summary_${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_localdb.bls_viruses_viroids_ICTV.txt\"\n        file \"summary_${sampleid}_velvet_${minlen}-${maxlen}nt_megablast_vs_localdb.bls_viruses_viroids_ICTV.txt\"        \n        script:\n        \"\"\"\n        #retain 1st blast hit\n        for var in ${sampleid}_velvet_${minlen}-${maxlen}nt_megablast_vs_localdb.bls ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_localdb.bls;\n            do \n                cat \\${var} | awk '{print \\$1}' | sort | uniq > \\${var}.top1.ids\n                for i in `cat \\${var}.top1.ids`; do echo \"fetching top hits...\" \\$i; grep \\$i \\${var} | head -1 >> \\${var}.top1Hits.txt ; done\n                cat \\${var}.top1Hits.txt | sed 's/ /_/g' > \\${var}.txt\n\n                #summarise the blast files\n                java -jar ${projectDir}/bin/BlastTools.jar -t blastn \\${var}.txt\n\n                #only retain hits to plant viruses\n                grep -v chloroplast summary_\\${var}.txt > summary_\\${var}_filtered.txt\n\n                if [[ ! -s summary_\\${var}_filtered.txt ]]\n                then\n                    for FILE in summary_\\${var}_viruses_viroids_ICTV.txt summary_\\${var}_viruses_viroids_ICTV_endemic.txt summary_\\${var}_viruses_viroids_ICTV_regulated.txt;\n                        do\n                            echo -e \"Species\\tsacc\\tnaccs\\tlength\\tslen\\tcov\\tav-pident\\tstitle\\tqseqids\\tICTV_information\" > \"\\${FILE}\"\n                        done\n                else\n                    #fetch unique virus/viroid species name from Blast summary reports\n                    cat summary_\\${var}_filtered.txt | awk '{print \\$7}' | awk -F \"|\" '{print \\$3}'| sort | uniq | sed 's/Species://' > \\${var}_uniq.ids\n\n                    #retrieve the best hit for each unique virus/viroid species name by selecting longest alignment (column 3) and highest genome coverage (column 5)\n                    touch \\${var}_filtered.txt\n                    for id in `cat \\${var}_uniq.ids`;\n                        do\n                            grep \\${id} summary_\\${var}.txt | sort -k3,3nr -k5,5nr | head -1 >> \\${var}_filtered.txt\n                        done\n\n                    #print the header of the inital summary_blastn file\n                    cat summary_\\${var}.txt | head -1 > header\n\n                    #report 1\n                    cat header \\${var}_filtered.txt > summary_\\${var}_viruses_viroids.txt\n                    \n                    #fetch genus names of identified hits\n                    awk '{print \\$7}' summary_\\${var}_viruses_viroids.txt | awk -F \"|\" '{print \\$3}' | sed 's/Species://' | sed 1d > wanted.names\n                \n                    #add species to report\n                    paste wanted.names \\${var}_filtered.txt | sort > summary_\\${var}_viruses_viroids.MOD\n\n                    #fecth ICTV information\n                    grep -w -F -f wanted.names ${projectDir}/bin/${params.ictvinfo} | sort > wanted.ICTV\n\n                    #join reports with ICTV information\n                    #join -a 1 -1 1 -2 1 summary_\\${var}_viruses_viroids.MOD wanted.ICTV | tr ' ' '\\\\t' | awk '\\$4>=70' >  summary_\\${var}_viruses_viroids_ICTV\n                    join -a1 -1 1 -2 1 summary_\\${var}_viruses_viroids.MOD wanted.ICTV | tr ' ' '\\\\t' >  summary_\\${var}_viruses_viroids_ICTV\n\n                    #report 2\n                    awk '{print \"Species\" \"\\\\t\" \\$0 \"\\\\t\" \"ICTV_information\"}' header > header2\n                    cat header2 summary_\\${var}_viruses_viroids_ICTV | awk -F\"\\\\t\" '\\$1!=\"\"&&\\$2!=\"\"&&\\$3!=\"\"' > summary_\\${var}_viruses_viroids_ICTV.txt\n                fi\n            done\n        \"\"\"\n    }",
        "nb_lignes_process": 70,
        "string_script": "        \"\"\"\n        #retain 1st blast hit\n        for var in ${sampleid}_velvet_${minlen}-${maxlen}nt_megablast_vs_localdb.bls ${sampleid}_velvet_${minlen}-${maxlen}nt_blastn_vs_localdb.bls;\n            do \n                cat \\${var} | awk '{print \\$1}' | sort | uniq > \\${var}.top1.ids\n                for i in `cat \\${var}.top1.ids`; do echo \"fetching top hits...\" \\$i; grep \\$i \\${var} | head -1 >> \\${var}.top1Hits.txt ; done\n                cat \\${var}.top1Hits.txt | sed 's/ /_/g' > \\${var}.txt\n\n                #summarise the blast files\n                java -jar ${projectDir}/bin/BlastTools.jar -t blastn \\${var}.txt\n\n                #only retain hits to plant viruses\n                grep -v chloroplast summary_\\${var}.txt > summary_\\${var}_filtered.txt\n\n                if [[ ! -s summary_\\${var}_filtered.txt ]]\n                then\n                    for FILE in summary_\\${var}_viruses_viroids_ICTV.txt summary_\\${var}_viruses_viroids_ICTV_endemic.txt summary_\\${var}_viruses_viroids_ICTV_regulated.txt;\n                        do\n                            echo -e \"Species\\tsacc\\tnaccs\\tlength\\tslen\\tcov\\tav-pident\\tstitle\\tqseqids\\tICTV_information\" > \"\\${FILE}\"\n                        done\n                else\n                    #fetch unique virus/viroid species name from Blast summary reports\n                    cat summary_\\${var}_filtered.txt | awk '{print \\$7}' | awk -F \"|\" '{print \\$3}'| sort | uniq | sed 's/Species://' > \\${var}_uniq.ids\n\n                    #retrieve the best hit for each unique virus/viroid species name by selecting longest alignment (column 3) and highest genome coverage (column 5)\n                    touch \\${var}_filtered.txt\n                    for id in `cat \\${var}_uniq.ids`;\n                        do\n                            grep \\${id} summary_\\${var}.txt | sort -k3,3nr -k5,5nr | head -1 >> \\${var}_filtered.txt\n                        done\n\n                    #print the header of the inital summary_blastn file\n                    cat summary_\\${var}.txt | head -1 > header\n\n                    #report 1\n                    cat header \\${var}_filtered.txt > summary_\\${var}_viruses_viroids.txt\n                    \n                    #fetch genus names of identified hits\n                    awk '{print \\$7}' summary_\\${var}_viruses_viroids.txt | awk -F \"|\" '{print \\$3}' | sed 's/Species://' | sed 1d > wanted.names\n                \n                    #add species to report\n                    paste wanted.names \\${var}_filtered.txt | sort > summary_\\${var}_viruses_viroids.MOD\n\n                    #fecth ICTV information\n                    grep -w -F -f wanted.names ${projectDir}/bin/${params.ictvinfo} | sort > wanted.ICTV\n\n                    #join reports with ICTV information\n                    #join -a 1 -1 1 -2 1 summary_\\${var}_viruses_viroids.MOD wanted.ICTV | tr ' ' '\\\\t' | awk '\\$4>=70' >  summary_\\${var}_viruses_viroids_ICTV\n                    join -a1 -1 1 -2 1 summary_\\${var}_viruses_viroids.MOD wanted.ICTV | tr ' ' '\\\\t' >  summary_\\${var}_viruses_viroids_ICTV\n\n                    #report 2\n                    awk '{print \"Species\" \"\\\\t\" \\$0 \"\\\\t\" \"ICTV_information\"}' header > header2\n                    cat header2 summary_\\${var}_viruses_viroids_ICTV | awk -F\"\\\\t\" '\\$1!=\"\"&&\\$2!=\"\"&&\\$3!=\"\"' > summary_\\${var}_viruses_viroids_ICTV.txt\n                fi\n            done\n        \"\"\"",
        "nb_lignes_script": 55,
        "language_script": "bash",
        "tools": [
            "joineRML"
        ],
        "tools_url": [
            "https://bio.tools/joinerml"
        ],
        "tools_dico": [
            {
                "name": "joineRML",
                "uri": "https://bio.tools/joinerml",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3569",
                            "term": "Applied mathematics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Joint Modelling of Multivariate Longitudinal Data and Time-to-Event Outcomes.",
                "homepage": "https://cran.r-project.org/web/packages/joineRML/"
            }
        ],
        "inputs": [
            "filter_blast_nt_localdb_velvet_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"local\"",
            "publishDir \"${params.outdir}/05_blastoutputs/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\""
        ],
        "when": "",
        "stub": ""
    },
    "filter_n_cov": {
        "name_process": "filter_n_cov",
        "string_process": "\nprocess filter_n_cov {\n    tag \"$sampleid\"\n    publishDir \"${params.outdir}/07_filternstats/${sampleid}\", mode: 'link'\n    containerOptions \"${bindOptions}\"\n    \n    input:\n    tuple val(sampleid), file(fastqfile), file(fastq_filt_by_size), file(samplefile), file(taxonomy), val(minlen), val(maxlen) from blastTools_results_ch\n\n    output:\n    file \"${sampleid}_${minlen}-${maxlen}*\"\n    file(\"${sampleid}_${minlen}-${maxlen}nt_top_scoring_targets_with_cov_stats.txt\") into contamination_flag\n    \n    script:\n    \"\"\"\n    if [[ ${params.targets} == true ]]; then\n        filter_and_derive_stats.py --sample ${sampleid} --rawfastq ${fastqfile} --fastqfiltbysize  ${fastq_filt_by_size} --results ${samplefile} --read_size ${minlen}-${maxlen}nt --cov --taxonomy ${taxonomy} --blastdbpath ${blastn_db_name} --targets --targetspath ${projectDir}/bin/${params.targets_file}\n    else\n        filter_and_derive_stats.py --sample ${sampleid} --rawfastq ${fastqfile} --fastqfiltbysize ${fastq_filt_by_size} --results ${samplefile} --read_size ${minlen}-${maxlen}nt --cov --taxonomy ${taxonomy} --blastdbpath ${blastn_db_name}\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    if [[ ${params.targets} == true ]]; then\n        filter_and_derive_stats.py --sample ${sampleid} --rawfastq ${fastqfile} --fastqfiltbysize  ${fastq_filt_by_size} --results ${samplefile} --read_size ${minlen}-${maxlen}nt --cov --taxonomy ${taxonomy} --blastdbpath ${blastn_db_name} --targets --targetspath ${projectDir}/bin/${params.targets_file}\n    else\n        filter_and_derive_stats.py --sample ${sampleid} --rawfastq ${fastqfile} --fastqfiltbysize ${fastq_filt_by_size} --results ${samplefile} --read_size ${minlen}-${maxlen}nt --cov --taxonomy ${taxonomy} --blastdbpath ${blastn_db_name}\n    fi\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blastTools_results_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "contamination_flag"
        ],
        "nb_outputs": 1,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "tag \"$sampleid\"",
            "publishDir \"${params.outdir}/07_filternstats/${sampleid}\", mode: 'link'",
            "containerOptions \"${bindOptions}\""
        ],
        "when": "",
        "stub": ""
    },
    "contamination_detection": {
        "name_process": "contamination_detection",
        "string_process": " process contamination_detection {\n        label \"local\"\n        publishDir \"${params.outdir}/08_summary\", mode: 'link'\n        \n        input:\n        tuple val(sampleid), file(fastqfile), val(minlen), val(maxlen) from contamination_detection_ch\n        file ('*') from contamination_flag.collect().ifEmpty([])\n\n        output:\n        file \"run_top_scoring_targets_with_cov_stats_with_cont_flag*.txt\"\n\n        script:\n        \"\"\"\n        flag_contamination.py --read_size ${minlen}-${maxlen}nt --threshold ${params.contamination_flag} --method ${params.contamination_detection_method}\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        flag_contamination.py --read_size ${minlen}-${maxlen}nt --threshold ${params.contamination_flag} --method ${params.contamination_detection_method}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "contamination_detection_ch",
            "contamination_flag"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"local\"",
            "publishDir \"${params.outdir}/08_summary\", mode: 'link'"
        ],
        "when": "",
        "stub": ""
    },
    "getorf": {
        "name_process": "getorf",
        "string_process": " process getorf {\n        label 'local'\n        publishDir \"${params.outdir}/06_blastp/${sampleid}\", mode: 'link'\n        tag \"$sampleid\"\n\n        input:\n        tuple val(sampleid), file(velvet_cap3_rename_fasta), val(minlen), val(maxlen) from getorf_ch\n        \n        output:\n        file \"${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.min50aa.fasta\"\n        file \"${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.circular.min50aa.fasta\"\n        tuple val(sampleid), file(\"${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.min50aa.fasta\"), file(\"${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.min50aa.fasta.ids\"), val(minlen), val(maxlen) into blastp_ch\n        \n        script:\n        \"\"\"\n        getorf -sequence ${velvet_cap3_rename_fasta} -outseq ${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.min50aa.fasta  -minsize ${params.orf_minsize}\n        cat ${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.min50aa.fasta.ids | grep \">\" | sed 's/>//' | awk '{print \\$1}' > ${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.min50aa.fasta.ids\n        getorf -sequence ${velvet_cap3_rename_fasta} -circular True -outseq ${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.circular.min50aa.fasta -minsize ${params.orf_circ_minsize}\n        cat ${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.circular.min50aa.fasta | grep \">\" | sed 's/>//' | awk '{print \\$1}' > ${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.circular.min50aa.fasta.ids\n        \"\"\"\n    }",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        getorf -sequence ${velvet_cap3_rename_fasta} -outseq ${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.min50aa.fasta  -minsize ${params.orf_minsize}\n        cat ${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.min50aa.fasta.ids | grep \">\" | sed 's/>//' | awk '{print \\$1}' > ${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.min50aa.fasta.ids\n        getorf -sequence ${velvet_cap3_rename_fasta} -circular True -outseq ${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.circular.min50aa.fasta -minsize ${params.orf_circ_minsize}\n        cat ${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.circular.min50aa.fasta | grep \">\" | sed 's/>//' | awk '{print \\$1}' > ${sampleid}_velvet_${minlen}-${maxlen}nt_getorf.circular.min50aa.fasta.ids\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "getorf"
        ],
        "tools_url": [
            "https://bio.tools/getorf"
        ],
        "tools_dico": [
            {
                "name": "getorf",
                "uri": "https://bio.tools/getorf",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3321",
                            "term": "Molecular genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0371",
                                    "term": "DNA translation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2887",
                                "term": "Nucleic acid sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2886",
                                "term": "Protein sequence record"
                            }
                        ]
                    }
                ],
                "description": "Find and extract open reading frames (ORFs).",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/getorf.html"
            }
        ],
        "inputs": [
            "getorf_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "blastp_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label 'local'",
            "publishDir \"${params.outdir}/06_blastp/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\""
        ],
        "when": "",
        "stub": ""
    },
    "blastp": {
        "name_process": "blastp",
        "string_process": " process blastp {\n        label \"xlarge\"\n        publishDir \"${params.outdir}/06_blastp/${sampleid}\", mode: 'link'\n        tag \"$sampleid\"\n        containerOptions \"${bindOptions}\"\n\n        input:\n        tuple val(sampleid), file(fasta), file(fasta_ids), val(minlen), val(maxlen) from blastp_ch\n        \n        output:\n        file \"${fasta.baseName}_blastp_vs_NR_out.bls\"\n        tuple val(sampleid), file(\"${fasta.baseName}_blastp_vs_NR_out.wanted.ids\"), file(\"${fasta.baseName}_blastp_vs_NR_out.bls\"), val(minlen), val(maxlen) into blastpdbcmd_ch\n        \n        script:\n        \"\"\"         \n        blastp -query ${fasta} \\\n            -db ${blastp_db_name} \\\n            -evalue ${params.blastp_evalue} \\\n            -out ${fasta.baseName}_blastp_vs_NR_out.bls \\\n            -num_threads ${task.cpus} \\\n            -max_target_seqs 1 \\\n            -outfmt '6 qseqid sseqid pident nident length mismatch gapopen gaps qstart qend qlen qframe sstart send slen evalue bitscore qcovhsp sallseqid'\n\n        cat ${fasta.baseName}_blastp_vs_NR_out.bls | awk '{print \\$2}' | cut -f2 -d '|' | sort | uniq > ${fasta.baseName}_blastp_vs_NR_out.wanted.ids\n        \"\"\"\n    }",
        "nb_lignes_process": 24,
        "string_script": "        \"\"\"         \n        blastp -query ${fasta} \\\n            -db ${blastp_db_name} \\\n            -evalue ${params.blastp_evalue} \\\n            -out ${fasta.baseName}_blastp_vs_NR_out.bls \\\n            -num_threads ${task.cpus} \\\n            -max_target_seqs 1 \\\n            -outfmt '6 qseqid sseqid pident nident length mismatch gapopen gaps qstart qend qlen qframe sstart send slen evalue bitscore qcovhsp sallseqid'\n\n        cat ${fasta.baseName}_blastp_vs_NR_out.bls | awk '{print \\$2}' | cut -f2 -d '|' | sort | uniq > ${fasta.baseName}_blastp_vs_NR_out.wanted.ids\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "BLASTP-ACC"
        ],
        "tools_url": [
            "https://bio.tools/BLASTP-ACC"
        ],
        "tools_dico": [
            {
                "name": "BLASTP-ACC",
                "uri": "https://bio.tools/BLASTP-ACC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3297",
                            "term": "Biotechnology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3802",
                                    "term": "Sorting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Parallel Architecture and Hardware Accelerator Design for BLAST-based Protein Sequence Alignment.\n\nIn this study, we design a hardware accelerator for a widely used sequence alignment algorithm, the basic local alignment search tool for proteins (BLASTP). The architecture of the proposed accelerator consists of five stages: a new systolic-array-based one-hit finding stage, a novel RAM-REG-based two-hit finding stage, a refined ungapped extension stage, a faster gapped extension stage, and a highly efficient parallel sorter. The system is implemented on an Altera Stratix V FPGA with a processing speed of more than 500 giga cell updates per second (GCUPS). It can receive a query sequence, compare it with the sequences in the database, and generate a list sorted in descending order of the similarity scores between the query sequence and the subject sequences.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'accelerator', 'Altera', 'Stratix', 'RAM-REG-based'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31581096"
            }
        ],
        "inputs": [
            "blastp_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "blastpdbcmd_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"xlarge\"",
            "publishDir \"${params.outdir}/06_blastp/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\"",
            "containerOptions \"${bindOptions}\""
        ],
        "when": "",
        "stub": ""
    },
    "blastpdbcmd": {
        "name_process": "blastpdbcmd",
        "string_process": " process blastpdbcmd {\n        label \"medium_mem\"\n        publishDir \"${params.outdir}/06_blastp/${sampleid}\", mode: 'link'\n        tag \"$sampleid\"\n        containerOptions \"${bindOptions}\"\n\n        input:\n        tuple val(sampleid), file(blastp_nr_bls_ids), file(blastp_nr_bls), val(minlen), val(maxlen) from blastpdbcmd_ch\n\n        output:\n        file \"${blastp_nr_bls.baseName}_virus_viroid.txt\"\n        tuple val(sampleid), file(\"${blastp_nr_bls.baseName}_virus_viroid.txt\") into BlastToolsp_ch\n\n        script:\n        \"\"\"\n        blastdbcmd  -db ${blastp_db_name} \\\n                    -dbtype prot \\\n                    -entry_batch ${blastp_nr_bls_ids} > ${blastp_nr_bls_ids.baseName}.out\n\n        grep \">\" ${blastp_nr_bls_ids.baseName}.out | sed 's/>//' > ${blastp_nr_bls_ids.baseName}.out.header || [[ \\$? == 1 ]]\n        cat ${blastp_nr_bls_ids.baseName}.out.header | sed 's/ /__/g'| sed 's/__/ /' | tr ' ' '\\\\t' | grep \"irus\" > ${blastp_nr_bls_ids.baseName}.out.header_virus_viroid || [[ \\$? == 1 ]]\n        cat ${blastp_nr_bls_ids.baseName}.out.header | sed 's/ /__/g'| sed 's/__/ /' | tr ' ' '\\\\t' | grep \"iroid\" >> ${blastp_nr_bls_ids.baseName}.out.header_virus_viroid || [[ \\$? == 1 ]]\n        cat ${blastp_nr_bls_ids.baseName}.out.header_virus_viroid | awk '{print \\$1}' | sort | uniq > ${blastp_nr_bls_ids.baseName}_virus_viroid.ids\n        cat ${blastp_nr_bls_ids.baseName}.out.header_virus_viroid | sed 's/__/_/g' | sort -k1 > ${blastp_nr_bls_ids.baseName}_virus_viroid.mod\n\n        grep -F -f ${blastp_nr_bls_ids.baseName}_virus_viroid.ids ${blastp_nr_bls} > ${blastp_nr_bls.baseName}_virus_viroid.bls.txt || [[ \\$? == 1 ]]\n        cat ${blastp_nr_bls.baseName}_virus_viroid.bls.txt  | sort -k2 >  ${blastp_nr_bls.baseName}_virus_viroid_sorted.bls.txt \n        cut -f2 ${blastp_nr_bls.baseName}_virus_viroid_sorted.bls.txt  | cut -f2 -d '|' > ${blastp_nr_bls.baseName}_virus_viroid_sorted.bls.id.extraction\n        paste ${blastp_nr_bls.baseName}_virus_viroid_sorted.bls.txt ${blastp_nr_bls.baseName}_virus_viroid_sorted.bls.id.extraction  | sort -k20 > ${blastp_nr_bls.baseName}_virus_viroid_sorted2.bls.txt\n        join -1 20 -2 1 ${blastp_nr_bls.baseName}_virus_viroid_sorted2.bls.txt ${blastp_nr_bls_ids.baseName}_virus_viroid.mod | sort -u | tr ' ' '\\\\t' | awk -v OFS='\\\\t' '{ print \\$1,\\$2,\\$4,\\$5,\\$6,\\$7,\\$8,\\$9,\\$10,\\$11,\\$12,\\$13,\\$14,\\$15,\\$16,\\$17,\\$18,\\$19,\\$20,\\$21}' > ${blastp_nr_bls.baseName}_virus_viroid.txt || [[ \\$? == 1 ]]\n        \"\"\"\n    }",
        "nb_lignes_process": 30,
        "string_script": "        \"\"\"\n        blastdbcmd  -db ${blastp_db_name} \\\n                    -dbtype prot \\\n                    -entry_batch ${blastp_nr_bls_ids} > ${blastp_nr_bls_ids.baseName}.out\n\n        grep \">\" ${blastp_nr_bls_ids.baseName}.out | sed 's/>//' > ${blastp_nr_bls_ids.baseName}.out.header || [[ \\$? == 1 ]]\n        cat ${blastp_nr_bls_ids.baseName}.out.header | sed 's/ /__/g'| sed 's/__/ /' | tr ' ' '\\\\t' | grep \"irus\" > ${blastp_nr_bls_ids.baseName}.out.header_virus_viroid || [[ \\$? == 1 ]]\n        cat ${blastp_nr_bls_ids.baseName}.out.header | sed 's/ /__/g'| sed 's/__/ /' | tr ' ' '\\\\t' | grep \"iroid\" >> ${blastp_nr_bls_ids.baseName}.out.header_virus_viroid || [[ \\$? == 1 ]]\n        cat ${blastp_nr_bls_ids.baseName}.out.header_virus_viroid | awk '{print \\$1}' | sort | uniq > ${blastp_nr_bls_ids.baseName}_virus_viroid.ids\n        cat ${blastp_nr_bls_ids.baseName}.out.header_virus_viroid | sed 's/__/_/g' | sort -k1 > ${blastp_nr_bls_ids.baseName}_virus_viroid.mod\n\n        grep -F -f ${blastp_nr_bls_ids.baseName}_virus_viroid.ids ${blastp_nr_bls} > ${blastp_nr_bls.baseName}_virus_viroid.bls.txt || [[ \\$? == 1 ]]\n        cat ${blastp_nr_bls.baseName}_virus_viroid.bls.txt  | sort -k2 >  ${blastp_nr_bls.baseName}_virus_viroid_sorted.bls.txt \n        cut -f2 ${blastp_nr_bls.baseName}_virus_viroid_sorted.bls.txt  | cut -f2 -d '|' > ${blastp_nr_bls.baseName}_virus_viroid_sorted.bls.id.extraction\n        paste ${blastp_nr_bls.baseName}_virus_viroid_sorted.bls.txt ${blastp_nr_bls.baseName}_virus_viroid_sorted.bls.id.extraction  | sort -k20 > ${blastp_nr_bls.baseName}_virus_viroid_sorted2.bls.txt\n        join -1 20 -2 1 ${blastp_nr_bls.baseName}_virus_viroid_sorted2.bls.txt ${blastp_nr_bls_ids.baseName}_virus_viroid.mod | sort -u | tr ' ' '\\\\t' | awk -v OFS='\\\\t' '{ print \\$1,\\$2,\\$4,\\$5,\\$6,\\$7,\\$8,\\$9,\\$10,\\$11,\\$12,\\$13,\\$14,\\$15,\\$16,\\$17,\\$18,\\$19,\\$20,\\$21}' > ${blastp_nr_bls.baseName}_virus_viroid.txt || [[ \\$? == 1 ]]\n        \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "joineRML"
        ],
        "tools_url": [
            "https://bio.tools/joinerml"
        ],
        "tools_dico": [
            {
                "name": "joineRML",
                "uri": "https://bio.tools/joinerml",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3474",
                            "term": "Machine learning"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3569",
                            "term": "Applied mathematics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Joint Modelling of Multivariate Longitudinal Data and Time-to-Event Outcomes.",
                "homepage": "https://cran.r-project.org/web/packages/joineRML/"
            }
        ],
        "inputs": [
            "blastpdbcmd_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "BlastToolsp_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"medium_mem\"",
            "publishDir \"${params.outdir}/06_blastp/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\"",
            "containerOptions \"${bindOptions}\""
        ],
        "when": "",
        "stub": ""
    },
    "BlastToolsp": {
        "name_process": "BlastToolsp",
        "string_process": " process BlastToolsp {\n        label \"local\"\n        publishDir \"${params.outdir}/05_blastoutputs/${sampleid}\", mode: 'link'\n        tag \"$sampleid\"\n\n        input:\n        tuple val(sampleid), file(topHits_blastp_final) from BlastToolsp_ch\n\n        output:\n        file \"summary_${topHits_blastp_final}\"\n\n        script:\n        \"\"\"\n        java -jar ${projectDir}/bin/BlastTools.jar -t blastp ${topHits_blastp_final}\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        java -jar ${projectDir}/bin/BlastTools.jar -t blastp ${topHits_blastp_final}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "BlastToolsp_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"local\"",
            "publishDir \"${params.outdir}/05_blastoutputs/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\""
        ],
        "when": "",
        "stub": ""
    },
    "spades": {
        "name_process": "spades",
        "string_process": " process spades { \n        label \"spades_mem_cpu\"\n        publishDir \"${params.outdir}/02a_spades/${sampleid}\", mode: 'link'\n        tag \"$sampleid\"\n\n        input:\n        tuple val(sampleid), file(samplefile), val(minlen), val(maxlen) from spades_ch\n\n        output:\n        file \"${sampleid}_${minlen}-${maxlen}nt_spades/*\"\n        file \"${sampleid}_spades_assembly_${minlen}-${maxlen}nt.fasta\"\n        tuple val(sampleid), file(\"${sampleid}_spades_assembly_${minlen}-${maxlen}nt.fasta\"), val(minlen), val(maxlen) into cap3_spades_ch\n        \n        script:\n        \"\"\"\n        spades.py -t 2 -k ${params.spadeskmer} --only-assembler -m 180 -s $samplefile -o ${sampleid}_${minlen}-${maxlen}nt_spades\n        \n        #edit contigs name and rename velvet assembly\n        sed 's/>/>spades_/' ${sampleid}_${minlen}-${maxlen}nt_spades/contigs.fasta > ${sampleid}_spades_assembly_${minlen}-${maxlen}nt.fasta\n        \"\"\"\n    }",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        spades.py -t 2 -k ${params.spadeskmer} --only-assembler -m 180 -s $samplefile -o ${sampleid}_${minlen}-${maxlen}nt_spades\n        \n        #edit contigs name and rename velvet assembly\n        sed 's/>/>spades_/' ${sampleid}_${minlen}-${maxlen}nt_spades/contigs.fasta > ${sampleid}_spades_assembly_${minlen}-${maxlen}nt.fasta\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "spades_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cap3_spades_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"spades_mem_cpu\"",
            "publishDir \"${params.outdir}/02a_spades/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\""
        ],
        "when": "",
        "stub": ""
    },
    "cap3_spades": {
        "name_process": "cap3_spades",
        "string_process": " process cap3_spades {\n        label \"local\"\n        publishDir \"${params.outdir}/03_cap3/${sampleid}\", mode: 'link'\n        tag \"$sampleid\"\n\n        input:\n        tuple val(sampleid), file(scaffolds_fasta), val(minlen), val(maxlen) from cap3_spades_ch\n\n        output:\n        file \"${sampleid}_spades_cap3_${minlen}-${maxlen}nt.rename.fasta\"\n        tuple val(sampleid), file(\"${sampleid}_spades_cap3_${minlen}-${maxlen}nt.rename.fasta\"), file(\"${sampleid}_spades_cap3_${minlen}-${maxlen}nt.rename.ids\"), val(minlen), val(maxlen) into blastn_nt_spades_ch\n\n        script:\n        \"\"\"\n        cap3 ${scaffolds_fasta} -s 300 -j 31 -i 30 -p 90 -o 16\n        cat ${scaffolds_fasta}.cap.singlets ${scaffolds_fasta}.cap.contigs > ${sampleid}_${minlen}-${maxlen}nt_spades_cap3.fasta\n        extract_seqs_rename.py ${sampleid}_${minlen}-${maxlen}nt_spades_cap3.fasta ${params.cap3_len} | sed \"s/CONTIG/${sampleid}_${minlen}-${maxlen}_/\" | sed 's/|>/ |/' | awk '{print \\$1}' > ${sampleid}_spades_cap3_${minlen}-${maxlen}nt.rename.fasta\n        #fetch scaffold IDs\n        cat ${sampleid}_spades_cap3_${minlen}-${maxlen}nt.rename.fasta | grep \">\" | sed 's/>//' > ${sampleid}_spades_cap3_${minlen}-${maxlen}nt.rename.ids\n        \"\"\"\n    }",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        cap3 ${scaffolds_fasta} -s 300 -j 31 -i 30 -p 90 -o 16\n        cat ${scaffolds_fasta}.cap.singlets ${scaffolds_fasta}.cap.contigs > ${sampleid}_${minlen}-${maxlen}nt_spades_cap3.fasta\n        extract_seqs_rename.py ${sampleid}_${minlen}-${maxlen}nt_spades_cap3.fasta ${params.cap3_len} | sed \"s/CONTIG/${sampleid}_${minlen}-${maxlen}_/\" | sed 's/|>/ |/' | awk '{print \\$1}' > ${sampleid}_spades_cap3_${minlen}-${maxlen}nt.rename.fasta\n        #fetch scaffold IDs\n        cat ${sampleid}_spades_cap3_${minlen}-${maxlen}nt.rename.fasta | grep \">\" | sed 's/>//' > ${sampleid}_spades_cap3_${minlen}-${maxlen}nt.rename.ids\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cap3_spades_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "blastn_nt_spades_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"local\"",
            "publishDir \"${params.outdir}/03_cap3/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\""
        ],
        "when": "",
        "stub": ""
    },
    "blastn_nt_spades": {
        "name_process": "blastn_nt_spades",
        "string_process": " process blastn_nt_spades {\n        label \"medium_mem\"\n        publishDir \"${params.outdir}/04_blastn/${sampleid}\", mode: 'link'\n        tag \"$sampleid\"\n        containerOptions \"${bindOptions}\"\n\n        input:\n        tuple val(sampleid), file(spades_cap3_rename_fasta), file(spades_cap3_rename_fasta_ids), val(minlen), val(maxlen) from blastn_nt_spades_ch\n\n        output:\n        file \"${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT.bls\"\n        file \"${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits.txt\"\n        file \"${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits_virus_viroids_final.txt\"\n        tuple val(sampleid), file(\"${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits_virus_viroids.txt\") into BlastTools_blastn_spades_ch\n        script:\n        def blast_task_param = (params.blastn_method == \"blastn\") ? \"-task blastn\" : ''\n        \"\"\"\n        blastn ${blast_task_param} \\\n                -query ${spades_cap3_rename_fasta} \\\n                -db ${blastn_db_name} \\\n                -out ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT.bls \\\n                -evalue ${params.blastn_evalue} \\\n                -outfmt '6 qseqid sgi sacc length pident mismatch gapopen qstart qend qlen sstart send slen sstrand evalue bitscore qcovhsp stitle staxids qseq sseq sseqid qcovs qframe sframe' \\\n                -num_threads ${task.cpus} \\\n                -max_target_seqs 100 \\\n                -word_size 11\n\n        #fetch top blastn hits\n        for i in `cat ${spades_cap3_rename_fasta_ids}`; do\n            grep \\$i ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT.bls | head -n5 >> ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits.txt;\n        done\n        grep -i \"Virus\" ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits.txt > ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits_virus_viroids.txt || [[ \\$? == 1 ]]\n        grep -i \"Viroid\" ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits.txt >> ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits_virus_viroids.txt || [[ \\$? == 1 ]]\n        cat ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits_virus_viroids.txt | sed 's/ /_/g' > ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits_virus_viroids_final.txt\n        \"\"\"\n    }",
        "nb_lignes_process": 34,
        "string_script": "        def blast_task_param = (params.blastn_method == \"blastn\") ? \"-task blastn\" : ''\n        \"\"\"\n        blastn ${blast_task_param} \\\n                -query ${spades_cap3_rename_fasta} \\\n                -db ${blastn_db_name} \\\n                -out ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT.bls \\\n                -evalue ${params.blastn_evalue} \\\n                -outfmt '6 qseqid sgi sacc length pident mismatch gapopen qstart qend qlen sstart send slen sstrand evalue bitscore qcovhsp stitle staxids qseq sseq sseqid qcovs qframe sframe' \\\n                -num_threads ${task.cpus} \\\n                -max_target_seqs 100 \\\n                -word_size 11\n\n        #fetch top blastn hits\n        for i in `cat ${spades_cap3_rename_fasta_ids}`; do\n            grep \\$i ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT.bls | head -n5 >> ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits.txt;\n        done\n        grep -i \"Virus\" ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits.txt > ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits_virus_viroids.txt || [[ \\$? == 1 ]]\n        grep -i \"Viroid\" ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits.txt >> ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits_virus_viroids.txt || [[ \\$? == 1 ]]\n        cat ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits_virus_viroids.txt | sed 's/ /_/g' > ${sampleid}_spades_${minlen}-${maxlen}nt_megablast_vs_NT_top5Hits_virus_viroids_final.txt\n        \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "blastn_nt_spades_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "BlastTools_blastn_spades_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"medium_mem\"",
            "publishDir \"${params.outdir}/04_blastn/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\"",
            "containerOptions \"${bindOptions}\""
        ],
        "when": "",
        "stub": ""
    },
    "BlastTools_blastn_spades": {
        "name_process": "BlastTools_blastn_spades",
        "string_process": " process BlastTools_blastn_spades {\n        label \"local\"\n        publishDir \"${params.outdir}/05_blastoutputs/${sampleid}\", mode: 'link'\n        tag \"$sampleid\"\n\n        input:\n        tuple val(sampleid), file(top5Hits_final) from BlastTools_blastn_spades_ch\n\n        output:\n        file \"summary_${top5Hits_final}\"\n\n        script:\n        \"\"\"\n        java -jar ${projectDir}/bin/BlastTools.jar -t blastn ${top5Hits_final}\n        \"\"\"\n    }",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        java -jar ${projectDir}/bin/BlastTools.jar -t blastn ${top5Hits_final}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "BlastTools_blastn_spades_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "eresearchqut__VirReport",
        "directive": [
            "label \"local\"",
            "publishDir \"${params.outdir}/05_blastoutputs/${sampleid}\", mode: 'link'",
            "tag \"$sampleid\""
        ],
        "when": "",
        "stub": ""
    }
}
{
    "artic_guppyplex": {
        "name_process": "artic_guppyplex",
        "string_process": "\nprocess artic_guppyplex {\n    tag \"${sample_id} artic_guppyplex\"\n    conda '/home/dfornika/miniconda3/envs/artic-1.1.3'\n\n    input:\n        set sample_id, barcode, min_length, max_length, primer_scheme from samples_guppyplex_ch\n        file(fastq_dir) from fastq_dir_ch\n\n    output:\n\tset sample_id, file(\"${sample_id}_${barcode}.fastq\") into minion_fastq_ch\n    \n    script:\n    \"\"\"\n    artic guppyplex \\\n      --min-length '${min_length}' \\\n      --max-length '${max_length}' \\\n      --directory '${fastq_dir}/pass/${barcode}' \\\n      --prefix '${sample_id}'\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    artic guppyplex \\\n      --min-length '${min_length}' \\\n      --max-length '${max_length}' \\\n      --directory '${fastq_dir}/pass/${barcode}' \\\n      --prefix '${sample_id}'\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "ARTIC"
        ],
        "tools_url": [
            "https://bio.tools/artic"
        ],
        "tools_dico": [
            {
                "name": "ARTIC",
                "uri": "https://bio.tools/artic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A bioinformatics pipeline for working with virus sequencing data sequenced with nanopore",
                "homepage": "https://github.com/artic-network/fieldbioinformatics"
            }
        ],
        "inputs": [
            "samples_guppyplex_ch",
            "fastq_dir_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "minion_fastq_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "dfornika__nextflow-artic-ncov2019",
        "directive": [
            "tag \"${sample_id} artic_guppyplex\"",
            "conda '/home/dfornika/miniconda3/envs/artic-1.1.3'"
        ],
        "when": "",
        "stub": ""
    },
    "artic_minion": {
        "name_process": "artic_minion",
        "string_process": "\nprocess artic_minion {\n    tag \"${sample_id} artic_minion\"\n    cpus 4\n    conda '/home/dfornika/miniconda3/envs/artic-1.1.3'\n\n    publishDir \"${params.outdir}/${sample_id}\", mode: 'copy', pattern: \"${sample_id}{.,-}*\"\n    input:\n        set sample_id, barcode, min_length, max_length, primer_scheme, file(read_file) from samples_minion_ch.join(minion_fastq_ch)\n        file(primer_scheme_dir) from primer_scheme_dir_ch\n        file(fast5_dir) from fast5_dir_ch\n        file(fastq_dir) from fastq_dir_ch\n\n    output:\n\tset sample_id, file(\"${sample_id}_${barcode}.fastq\")\n    \n    script:\n    \"\"\"\n    artic minion \\\n      --normalise 200 \\\n      --threads 4 \\\n      --scheme-directory '${primer_scheme_dir}' \\\n      --read-file '${read_file}' \\\n      --fast5-directory '${fast5_dir}' \\\n      --sequencing-summary '${fastq_dir}/sequencing_summary.txt' \\\n      '${primer_scheme}' \\\n      '${sample_id}'\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    artic minion \\\n      --normalise 200 \\\n      --threads 4 \\\n      --scheme-directory '${primer_scheme_dir}' \\\n      --read-file '${read_file}' \\\n      --fast5-directory '${fast5_dir}' \\\n      --sequencing-summary '${fastq_dir}/sequencing_summary.txt' \\\n      '${primer_scheme}' \\\n      '${sample_id}'\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "ARTIC"
        ],
        "tools_url": [
            "https://bio.tools/artic"
        ],
        "tools_dico": [
            {
                "name": "ARTIC",
                "uri": "https://bio.tools/artic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1383",
                                "term": "Nucleic acid sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3498",
                                "term": "Sequence variations"
                            }
                        ]
                    }
                ],
                "description": "A bioinformatics pipeline for working with virus sequencing data sequenced with nanopore",
                "homepage": "https://github.com/artic-network/fieldbioinformatics"
            }
        ],
        "inputs": [
            "samples_minion_ch",
            "minion_fastq_ch",
            "primer_scheme_dir_ch",
            "fast5_dir_ch",
            "fastq_dir_ch"
        ],
        "nb_inputs": 5,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "dfornika__nextflow-artic-ncov2019",
        "directive": [
            "tag \"${sample_id} artic_minion\"",
            "cpus 4",
            "conda '/home/dfornika/miniconda3/envs/artic-1.1.3'",
            "publishDir \"${params.outdir}/${sample_id}\", mode: 'copy', pattern: \"${sample_id}{.,-}*\""
        ],
        "when": "",
        "stub": ""
    },
    "pycoqc": {
        "name_process": "pycoqc",
        "string_process": "\nprocess pycoqc {\n    tag \"pycoQC\"\n    conda '/home/dfornika/miniconda3/envs/pycoqc-2.5.0.21'\n    publishDir \"${params.outdir}\", mode: 'copy', pattern: \"pycoQC.*\"\n    input:\n        file(run_dir) from run_dir_ch\n\n    output:\n\tfile(\"pycoQC.*\")\n    \n    script:\n    \"\"\"\n    pycoQC \\\n      -f '${run_dir}/fastq/sequencing_summary.txt' \\\n      -o 'pycoQC.html' \\\n      -j 'pycoQC.json'\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    pycoQC \\\n      -f '${run_dir}/fastq/sequencing_summary.txt' \\\n      -o 'pycoQC.html' \\\n      -j 'pycoQC.json'\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "run_dir_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__nextflow-artic-ncov2019",
        "directive": [
            "tag \"pycoQC\"",
            "conda '/home/dfornika/miniconda3/envs/pycoqc-2.5.0.21'",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"pycoQC.*\""
        ],
        "when": "",
        "stub": ""
    },
    "count_reads": {
        "name_process": "count_reads",
        "string_process": "\nprocess count_reads {\n    tag \"${sample_id} count_reads\"\n               \n    publishDir \"${params.outdir}/${sample_id}\", mode: 'copy', pattern: \"${sample_id}.num_reads_pass_fail.tsv\"\n    input:\n        set sample_id, barcode, min_length, max_length, primer_scheme from samples_count_reads_ch\n        file(run_dir) from run_dir_ch\n\n    output:\n\tfile(\"${sample_id}.num_reads_pass_fail.tsv\") into summarise_read_count_ch\n    \n    shell:\n    '''\n    echo \"!{sample_id}\" > sample_id.txt\n    echo \"!{barcode}\" > barcode.txt\n    echo \"$(wc -l !{run_dir}/fastq/pass/!{barcode}/*.fastq | tail -n 1 | sed 's/^\\\\s*//' | tr -s ' ' | cut -d ' ' -f 1) / 4\" | bc > num_pass_reads.txt\n    echo \"$(wc -l !{run_dir}/fastq/fail/!{barcode}/*.fastq | tail -n 1 | sed 's/^\\\\s*//' | tr -s ' ' | cut -d ' ' -f 1) / 4\" | bc > num_fail_reads.txt\n    paste sample_id.txt barcode.txt num_pass_reads.txt num_fail_reads.txt > !{sample_id}.num_reads_pass_fail.tsv\n    '''\n}",
        "nb_lignes_process": 19,
        "string_script": "    '''\n    echo \"!{sample_id}\" > sample_id.txt\n    echo \"!{barcode}\" > barcode.txt\n    echo \"$(wc -l !{run_dir}/fastq/pass/!{barcode}/*.fastq | tail -n 1 | sed 's/^\\\\s*//' | tr -s ' ' | cut -d ' ' -f 1) / 4\" | bc > num_pass_reads.txt\n    echo \"$(wc -l !{run_dir}/fastq/fail/!{barcode}/*.fastq | tail -n 1 | sed 's/^\\\\s*//' | tr -s ' ' | cut -d ' ' -f 1) / 4\" | bc > num_fail_reads.txt\n    paste sample_id.txt barcode.txt num_pass_reads.txt num_fail_reads.txt > !{sample_id}.num_reads_pass_fail.tsv\n    '''",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samples_count_reads_ch",
            "run_dir_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "summarise_read_count_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "dfornika__nextflow-artic-ncov2019",
        "directive": [
            "tag \"${sample_id} count_reads\"",
            "publishDir \"${params.outdir}/${sample_id}\", mode: 'copy', pattern: \"${sample_id}.num_reads_pass_fail.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "summarise_read_counts": {
        "name_process": "summarise_read_counts",
        "string_process": "\nprocess summarise_read_counts {\n    tag \"summarise_read_counts\"\n               \n    publishDir \"${params.outdir}\", mode: 'copy', pattern: \"num_reads_pass_fail.tsv\"\n    input:\n        file(read_counts) from summarise_read_count_ch.collect()\n\n    output:\n\tfile(\"num_reads_pass_fail.tsv\")\n    \n    shell:\n    '''\n    cat !{read_counts} | sort -k 2 > num_reads_pass_fail.tsv\n    '''\n}",
        "nb_lignes_process": 14,
        "string_script": "    '''\n    cat !{read_counts} | sort -k 2 > num_reads_pass_fail.tsv\n    '''",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "summarise_read_count_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "dfornika__nextflow-artic-ncov2019",
        "directive": [
            "tag \"summarise_read_counts\"",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"num_reads_pass_fail.tsv\""
        ],
        "when": "",
        "stub": ""
    },
    "bedtools_mean_coverage": {
        "name_process": "bedtools_mean_coverage",
        "string_process": "\nprocess bedtools_mean_coverage {\n    tag \"${sample_id} bedtools_coverage\"\n    conda '/home/dfornika/miniconda3/envs/bedtools-2.29.2'\n    publishDir \"${params.outdir}/${sample_id}\", mode: 'copy', pattern: \"${sample_id}.coverage.bed\"\n    input:\n        set sample_id, barcode, min_length, max_length, primer_scheme from samples_bedtools_coverage_ch\n        file(primer_scheme_dir) from primer_scheme_dir_ch\n        file(artic_output_dir) from artic_output_dir_ch\n\n    output:\n\tset sample_id, file(\"${sample_id}.coverage.bed\")\n    \n    script:\n    \"\"\"\n    bedtools coverage \\\n      -mean \\\n      -a '${primer_scheme_dir}/${primer_scheme}/nCoV-2019.amplicons.bed' \\\n      -b '${artic_output_dir}/${sample_id}/${sample_id}.sorted.bam' \\\n      > '${sample_id}.coverage.bed'\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    bedtools coverage \\\n      -mean \\\n      -a '${primer_scheme_dir}/${primer_scheme}/nCoV-2019.amplicons.bed' \\\n      -b '${artic_output_dir}/${sample_id}/${sample_id}.sorted.bam' \\\n      > '${sample_id}.coverage.bed'\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "samples_bedtools_coverage_ch",
            "primer_scheme_dir_ch",
            "artic_output_dir_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "sample_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "dfornika__nextflow-artic-ncov2019",
        "directive": [
            "tag \"${sample_id} bedtools_coverage\"",
            "conda '/home/dfornika/miniconda3/envs/bedtools-2.29.2'",
            "publishDir \"${params.outdir}/${sample_id}\", mode: 'copy', pattern: \"${sample_id}.coverage.bed\""
        ],
        "when": "",
        "stub": ""
    }
}
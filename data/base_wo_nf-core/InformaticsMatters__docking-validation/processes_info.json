{
    "format_protein": {
        "name_process": "format_protein",
        "string_process": "\nprocess format_protein {\n\n    container 'informaticsmatters/vs-smina:latest'\n    scratch params.scratch\n\n    input:\n    file protein\n\n    output:\n    file 'ready_receptor.pdbqt' into ready_receptor_pdbqt\n\n    script:\n    \n    if( protein.name.endsWith('.pdb') || protein.name.endsWith('.mol2') )\n      \"\"\"\n      echo 'Converting protein to PDBQT format'\n      obabel $protein -O ready_receptor.pdbqt\n      \"\"\"\n      \n    else if( protein.name.endsWith('.pdbqt') )\n      \"\"\"\n      cp $protein ready_receptor.pdbqt\n      \"\"\"\n      \n    else\n      \"\"\"\n      echo 'Receptor must be in pdb, pdbqt or mol2 formats'\n      exit 1\n      \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    if( protein.name.endsWith('.pdb') || protein.name.endsWith('.mol2') )\n      \"\"\"\n      echo 'Converting protein to PDBQT format'\n      obabel $protein -O ready_receptor.pdbqt\n      \"\"\"\n      \n    else if( protein.name.endsWith('.pdbqt') )\n      \"\"\"\n      cp $protein ready_receptor.pdbqt\n      \"\"\"\n      \n    else\n      \"\"\"\n      echo 'Receptor must be in pdb, pdbqt or mol2 formats'\n      exit 1\n      \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "protein"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ready_receptor_pdbqt"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/vs-smina:latest'",
            "scratch params.scratch"
        ],
        "when": "",
        "stub": ""
    },
    "format_ligand": {
        "name_process": "format_ligand",
        "string_process": "\nprocess format_ligand {\n\n    container 'informaticsmatters/vs-smina:latest'\n    scratch params.scratch\n\n    input:\n    file ligand\n\n    output:\n    file 'ready_ligand.pdbqt' into ready_ligand_pdbqt\n\n    script:\n    if( ligand.name.endsWith('.pdb') || ligand.name.endsWith('.mol2') || ligand.name.endsWith('.mol') )\n      \"\"\"\n      echo 'Converting ligand to PDBQT format'\n      obabel $ligand -h -O ready_ligand.pdbqt\n      \"\"\"\n      \n    else if( ligand.name.endsWith('.pdbqt') )\n      \"\"\"\n      cp $ligand ready_ligand.pdbqt\n      \"\"\"\n      \n    else\n      \"\"\"\n      echo 'Ligand must be in pdb, pdbqt, mol or mol2 formats'\n      exit 1\n      \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    if( ligand.name.endsWith('.pdb') || ligand.name.endsWith('.mol2') || ligand.name.endsWith('.mol') )\n      \"\"\"\n      echo 'Converting ligand to PDBQT format'\n      obabel $ligand -h -O ready_ligand.pdbqt\n      \"\"\"\n      \n    else if( ligand.name.endsWith('.pdbqt') )\n      \"\"\"\n      cp $ligand ready_ligand.pdbqt\n      \"\"\"\n      \n    else\n      \"\"\"\n      echo 'Ligand must be in pdb, pdbqt, mol or mol2 formats'\n      exit 1\n      \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ligand"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ready_ligand_pdbqt"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/vs-smina:latest'",
            "scratch params.scratch"
        ],
        "when": "",
        "stub": ""
    },
    "sdsplit": {
        "name_process": "sdsplit",
        "string_process": "\nprocess sdsplit {\n\n    container 'informaticsmatters/vs-rdock:latest'\n\n    input:\n    file ligands\n\n    output:\n    file 'ligands_part*.sd' into ligand_parts\n\n    \"\"\"\n    sdsplit -${params.chunk} -oligands_part_ $ligands\n\n    for f in ligands_part_*.sd; do\n      n=\\${f:13:-3}\n      if [ \\${#n} == 1 ]; then\n        mv \\$f ligands_part_000\\${n}.sd\n      elif [ \\${#n} == 2 ]; then\n        mv \\$f ligands_part_00\\${n}.sd\n      elif [ \\${#n} == 3 ]; then\n        mv \\$f ligands_part_0\\${n}.sd\n      fi\n    done\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n    sdsplit -${params.chunk} -oligands_part_ $ligands\n\n    for f in ligands_part_*.sd; do\n      n=\\${f:13:-3}\n      if [ \\${#n} == 1 ]; then\n        mv \\$f ligands_part_000\\${n}.sd\n      elif [ \\${#n} == 2 ]; then\n        mv \\$f ligands_part_00\\${n}.sd\n      elif [ \\${#n} == 3 ]; then\n        mv \\$f ligands_part_0\\${n}.sd\n      fi\n    done\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ligands"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ligand_parts"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/vs-rdock:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "smina": {
        "name_process": "smina",
        "string_process": "\nprocess smina {\n\n    container 'informaticsmatters/vs-smina:latest'\n    errorStrategy 'retry'\n    maxRetries 3\n    scratch params.scratch\n\n    input:\n    file part from ligand_parts.flatten()\n    file 'receptor.pdbqt' from ready_receptor_pdbqt\n    file 'ligand.pdbqt' from ready_ligand_pdbqt\n    file 'ligand.sdf' from ligands\n\n    output:\n    file 'smina_part_*.sd' into docked_parts\n\n    \"\"\"\n    smina -r receptor.pdbqt -l $part --autobox_ligand ligand.pdbqt --autobox_add $params.padding\\\n      --exhaustiveness $params.exhaustiveness --scoring $params.scoring_function --cpu $params.cpu\\\n      -o ${part.name.replace('ligands', 'smina')} > smina_out.log\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n    smina -r receptor.pdbqt -l $part --autobox_ligand ligand.pdbqt --autobox_add $params.padding\\\n      --exhaustiveness $params.exhaustiveness --scoring $params.scoring_function --cpu $params.cpu\\\n      -o ${part.name.replace('ligands', 'smina')} > smina_out.log\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ligand_parts",
            "ready_receptor_pdbqt",
            "ready_ligand_pdbqt",
            "ligands"
        ],
        "nb_inputs": 4,
        "outputs": [
            "docked_parts"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/vs-smina:latest'",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "scratch params.scratch"
        ],
        "when": "",
        "stub": ""
    },
    "collect_and_report": {
        "name_process": "collect_and_report",
        "string_process": "\nprocess collect_and_report {\n\n    container 'informaticsmatters/vs-rdock:latest'\n    publishDir params.publish_dir, mode: 'move'\n\n    input:\n    file part from docked_parts.collect()\n\n    output:\n    file 'results_smina.sdf'\n\n    \"\"\"\n    rm -f results_smina.sdf\n    ls smina_*.sd | xargs cat >> results_smina.sdf\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    rm -f results_smina.sdf\n    ls smina_*.sd | xargs cat >> results_smina.sdf\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "docked_parts"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/vs-rdock:latest'",
            "publishDir params.publish_dir, mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "interactions": {
        "name_process": "interactions",
        "string_process": "\nprocess interactions {\n\n    container 'informaticsmatters/rdkit_pipelines:inters'\n    errorStrategy 'retry'\n    maxRetries 3\n    scratch params.scratch\n\n    input:\n    file part from ligand_parts.flatten()\n    file protein\n\n    output:\n    file 'oddt_*.sdf' into interactions_parts\n\n    \"\"\"\n    python -m pipelines.xchem.calc_interactions -i '$part' -if sdf -p $protein -o 'oddt_${part.name[0..-4]}' -of sdf --no-gzip\\\n      ${params.key_hbond ? '--key-hbond ' + params.key_hbond : ''}\\\n      ${params.key_hydrophobic ? '--key-hydrophobic ' + params.key_hydrophobic : ''}\\\n      ${params.key_halogen ? '--key-halogen ' + params.key_halogen : ''}\\\n      ${params.key_salt_bridge ? '--key-salt-bridge ' + params.key_salt_bridge : ''}\\\n      ${params.key_pi_stacking ? '--key-pi-stacking ' + params.key_pi_stacking : ''}\\\n      ${params.key_pi_cation ? '--key-pi-cation ' + params.key_pi_cation : ''}\\\n      --nnscore /opt/python/NNScore_pdbbind2016.pickle\\\n      --rfscore /opt/python/RFScore_v1_pdbbind2016.pickle /opt/python/RFScore_v2_pdbbind2016.pickle /opt/python/RFScore_v3_pdbbind2016.pickle\\\n      --plecscore /opt/python/PLEClinear_p5_l1_pdbbind2016_s65536.pickle\\\n      --strict\\\n      --exact-ligand\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\"\"\"\n    python -m pipelines.xchem.calc_interactions -i '$part' -if sdf -p $protein -o 'oddt_${part.name[0..-4]}' -of sdf --no-gzip\\\n      ${params.key_hbond ? '--key-hbond ' + params.key_hbond : ''}\\\n      ${params.key_hydrophobic ? '--key-hydrophobic ' + params.key_hydrophobic : ''}\\\n      ${params.key_halogen ? '--key-halogen ' + params.key_halogen : ''}\\\n      ${params.key_salt_bridge ? '--key-salt-bridge ' + params.key_salt_bridge : ''}\\\n      ${params.key_pi_stacking ? '--key-pi-stacking ' + params.key_pi_stacking : ''}\\\n      ${params.key_pi_cation ? '--key-pi-cation ' + params.key_pi_cation : ''}\\\n      --nnscore /opt/python/NNScore_pdbbind2016.pickle\\\n      --rfscore /opt/python/RFScore_v1_pdbbind2016.pickle /opt/python/RFScore_v2_pdbbind2016.pickle /opt/python/RFScore_v3_pdbbind2016.pickle\\\n      --plecscore /opt/python/PLEClinear_p5_l1_pdbbind2016_s65536.pickle\\\n      --strict\\\n      --exact-ligand\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ligand_parts",
            "protein"
        ],
        "nb_inputs": 2,
        "outputs": [
            "interactions_parts"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdkit_pipelines:inters'",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "scratch params.scratch"
        ],
        "when": "",
        "stub": ""
    },
    "collate": {
        "name_process": "collate",
        "string_process": "\nprocess collate {\n\n    container 'informaticsmatters/rdkit_pipelines:inters'\n    publishDir params.publishDir, mode: 'copy'\n\n    input:\n    file part from interactions_parts.collect()\n\n    output:\n    file 'results_oddt.sdf'\n\n    \"\"\"\n    rm -f results_inters.sdf\n    ls oddt_*.sdf | xargs cat >> results_oddt.sdf\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    rm -f results_inters.sdf\n    ls oddt_*.sdf | xargs cat >> results_oddt.sdf\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "interactions_parts"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdkit_pipelines:inters'",
            "publishDir params.publishDir, mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "pose_generation": {
        "name_process": "pose_generation",
        "string_process": "\nprocess pose_generation {\n\n    container 'informaticsmatters/rdock-mini:latest'\n    errorStrategy 'retry'\n    maxRetries 3\n\n    input:\n    file part from ligands\n    file protein_mol2\n    file prmfile\n    file asfile\n\n    output:\n    file 'docked_*.sd' into docked_parts\n\n    \"\"\"\n    rbdock -i $part -r $prmfile -p dock.prm -n $params.num_dockings -o ${part.name.replace('_part_', '_part_docked')[0..-5]} > docked_out.log\n    rbdock -i $part -r $prmfile -p dock.prm -n $params.num_dockings -o docked_${part.name[0..-5]} > docked_out.log\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    rbdock -i $part -r $prmfile -p dock.prm -n $params.num_dockings -o ${part.name.replace('_part_', '_part_docked')[0..-5]} > docked_out.log\n    rbdock -i $part -r $prmfile -p dock.prm -n $params.num_dockings -o docked_${part.name[0..-5]} > docked_out.log\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ligands",
            "protein_mol2",
            "prmfile",
            "asfile"
        ],
        "nb_inputs": 4,
        "outputs": [
            "docked_parts"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock-mini:latest'",
            "errorStrategy 'retry'",
            "maxRetries 3"
        ],
        "when": "",
        "stub": ""
    },
    "collect_poses": {
        "name_process": "collect_poses",
        "string_process": "\nprocess collect_poses {\n\n\tcontainer 'informaticsmatters/rdock-mini:latest'\n\n\t                              \n\n\tinput:\n\tfile parts from docked_parts.collect()\n\n\toutput:\n\tfile 'tfs_in_*.sd' into poses mode flatten\n\n\t\"\"\"\n\tsdsort -n -s -f${params.field} $parts | sdsplit -${params.transfs_chunk} -otfs_in_${parts}\n\t\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n\tsdsort -n -s -f${params.field} $parts | sdsplit -${params.transfs_chunk} -otfs_in_${parts}\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "docked_parts"
        ],
        "nb_inputs": 1,
        "outputs": [
            "poses"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock-mini:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "score_transfs": {
        "name_process": "score_transfs",
        "string_process": "\nprocess score_transfs {\n\n    container 'informaticsmatters/transfs:1.3'\n    containerOptions params.mock ? '' : \"--gpus $params.num_gpus\"\n    maxForks params.max_forks\n\n    publishDir '.', mode: 'link'\n\n    input:\n    file chunks\n    file 'receptor.pdb' from protein_pdb\n\n    output:\n    file 'tfs_*.sd'\n\n    \"\"\"\n    mkdir tfs\n    base=\\$PWD\n    cd /train/fragalysis_test_files/\n    python transfs.py -i \\$base/$chunks -r \\$base/receptor.pdb -d $params.distance -m $params.model -w \\$base/tfs ${params.mock ? '--mock' : ''}\n    mv \\$base/tfs/output.sdf \\$base/tfs_${chunks}\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "\"\"\"\n    mkdir tfs\n    base=\\$PWD\n    cd /train/fragalysis_test_files/\n    python transfs.py -i \\$base/$chunks -r \\$base/receptor.pdb -d $params.distance -m $params.model -w \\$base/tfs ${params.mock ? '--mock' : ''}\n    mv \\$base/tfs/output.sdf \\$base/tfs_${chunks}\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chunks",
            "protein_pdb"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/transfs:1.3'",
            "containerOptions params.mock ? '' : \"--gpus $params.num_gpus\"",
            "maxForks params.max_forks",
            "publishDir '.', mode: 'link'"
        ],
        "when": "",
        "stub": ""
    },
    "rank_transfs": {
        "name_process": "rank_transfs",
        "string_process": "\nprocess rank_transfs {\n\n    container 'informaticsmatters/rdock-mini:latest'\n\n    input:\n    file parts from scored_transfs.collect()\n\n    output:\n    file 'ranked_transfs.sdf' into ranked_transfs\n\n    \"\"\"\n    sdsort -n -r -s -fTransFSScore $parts | sdfilter -f'\\$_COUNT <= 1' | sdsort -n -r -fTransFSScore > ranked_transfs.sdf\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n    sdsort -n -r -s -fTransFSScore $parts | sdfilter -f'\\$_COUNT <= 1' | sdsort -n -r -fTransFSScore > ranked_transfs.sdf\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "scored_transfs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ranked_transfs"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock-mini:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "score_sucos": {
        "name_process": "score_sucos",
        "string_process": "\nprocess score_sucos {\n\n    container 'informaticsmatters/rdkit_pipelines:latest'\n\n    input:\n    file docked_parts\n    file hits\n\n    output:\n    file 'sucos_*.sdf' into sucos_scored\n\n    \"\"\"\n    python -m pipelines.rdkit.sucos_max -i $docked_parts -if sdf --target-molecules $hits --targets-format sdf -o sucos_$docked_parts -of sdf --name-field _Name --no-gzip\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    python -m pipelines.rdkit.sucos_max -i $docked_parts -if sdf --target-molecules $hits --targets-format sdf -o sucos_$docked_parts -of sdf --name-field _Name --no-gzip\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "docked_parts",
            "hits"
        ],
        "nb_inputs": 2,
        "outputs": [
            "sucos_scored"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdkit_pipelines:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "split": {
        "name_process": "split",
        "string_process": "\nprocess split {\n\n    container 'informaticsmatters/rdock:latest'\n\n    input:\n    file poses\n\n    output:\n    file 'chunk_*.sd' into chunks mode flatten\n\n    \"\"\"\n    sdsplit -${params.chunk} -ochunk_ $poses\n\n    if [ -f chunk_1.sd ]; then mv chunk_1.sd chunk_01.sd; fi\n    if [ -f chunk_2.sd ]; then mv chunk_2.sd chunk_02.sd; fi\n    if [ -f chunk_3.sd ]; then mv chunk_3.sd chunk_03.sd; fi\n    if [ -f chunk_4.sd ]; then mv chunk_4.sd chunk_04.sd; fi\n    if [ -f chunk_5.sd ]; then mv chunk_5.sd chunk_05.sd; fi\n    if [ -f chunk_6.sd ]; then mv chunk_6.sd chunk_06.sd; fi\n    if [ -f chunk_7.sd ]; then mv chunk_7.sd chunk_07.sd; fi\n    if [ -f chunk_8.sd ]; then mv chunk_8.sd chunk_08.sd; fi\n    if [ -f chunk_9.sd ]; then mv chunk_9.sd chunk_09.sd; fi\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n    sdsplit -${params.chunk} -ochunk_ $poses\n\n    if [ -f chunk_1.sd ]; then mv chunk_1.sd chunk_01.sd; fi\n    if [ -f chunk_2.sd ]; then mv chunk_2.sd chunk_02.sd; fi\n    if [ -f chunk_3.sd ]; then mv chunk_3.sd chunk_03.sd; fi\n    if [ -f chunk_4.sd ]; then mv chunk_4.sd chunk_04.sd; fi\n    if [ -f chunk_5.sd ]; then mv chunk_5.sd chunk_05.sd; fi\n    if [ -f chunk_6.sd ]; then mv chunk_6.sd chunk_06.sd; fi\n    if [ -f chunk_7.sd ]; then mv chunk_7.sd chunk_07.sd; fi\n    if [ -f chunk_8.sd ]; then mv chunk_8.sd chunk_08.sd; fi\n    if [ -f chunk_9.sd ]; then mv chunk_9.sd chunk_09.sd; fi\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "poses"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chunks"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_sucos": {
        "name_process": "filter_sucos",
        "string_process": "\nprocess filter_sucos {\n\n\tcontainer 'informaticsmatters/rdock-mini:latest'\n\n\tinput:\n\tfile sucos_scored\n\n\toutput:\n\tfile 'filt_*.sdf' into filt_sucos\n\n\t\"\"\"\n\tsdfilter -f'\\$SuCOS_Max_Score > 0.3' $sucos_scored > filt_${sucos_scored}\n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\n\tsdfilter -f'\\$SuCOS_Max_Score > 0.3' $sucos_scored > filt_${sucos_scored}\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sucos_scored"
        ],
        "nb_inputs": 1,
        "outputs": [
            "filt_sucos"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock-mini:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "collect_transfs": {
        "name_process": "collect_transfs",
        "string_process": "\nprocess collect_transfs {\n\n    container 'informaticsmatters/rdock-mini:latest'\n    publishDir '.', mode: 'link'\n\n    input:\n    file parts from scored_transfs.collect()\n\n    output:\n    file 'results.sdf.gz'\n\n    \"\"\"\n    cat $parts | gzip > results.sdf.gz\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    cat $parts | gzip > results.sdf.gz\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "scored_transfs"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock-mini:latest'",
            "publishDir '.', mode: 'link'"
        ],
        "when": "",
        "stub": ""
    },
    "rdock": {
        "name_process": "rdock",
        "string_process": "\nprocess rdock {\n\n    container 'informaticsmatters/vs-rdock:latest'\n    errorStrategy 'retry'\n    maxRetries 3\n\n    input:\n    file part from ligand_parts.flatten()\n    file protein\n    file prmfile\n    file asfile\n\t\n    output:\n    file 'docked_part*.sd' into docked_parts\n    \n    \"\"\"\n    rbdock -i $part -r $prmfile -p dock.prm -n $params.num_dockings -o ${part.name.replace('ligands', 'docked')[0..-4]} > docked_out.log\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    rbdock -i $part -r $prmfile -p dock.prm -n $params.num_dockings -o ${part.name.replace('ligands', 'docked')[0..-4]} > docked_out.log\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ligand_parts",
            "protein",
            "prmfile",
            "asfile"
        ],
        "nb_inputs": 4,
        "outputs": [
            "docked_parts"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/vs-rdock:latest'",
            "errorStrategy 'retry'",
            "maxRetries 3"
        ],
        "when": "",
        "stub": ""
    },
    "results": {
        "name_process": "results",
        "string_process": "\nprocess results {\n\n\tcontainer 'informaticsmatters/vs-rdock:latest'\n\n\tpublishDir params.publish_dir, mode: 'move'\n\n\tinput:\n\tfile parts from docked_parts.collect()\n\n\toutput:\n\tfile 'results_rdock.sdf'\n\n\t\"\"\"\n\tls docked_part*.sd | xargs cat >> results_rdock.sdf\n\t\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n\tls docked_part*.sd | xargs cat >> results_rdock.sdf\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "docked_parts"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/vs-rdock:latest'",
            "publishDir params.publish_dir, mode: 'move'"
        ],
        "when": "",
        "stub": ""
    },
    "metrics": {
        "name_process": "metrics",
        "string_process": "\nprocess metrics {\n\n    container 'informaticsmatters/rdkit-pipelines-centos:latest'\n\n    publishDir \"$baseDir/results\", mode: 'symlink'\n\n    input:\n    file results\n    file 'splitter_metrics.txt' from splitter_metrics\n\n    output:\n    file 'output.data.gz'\n    file 'output.metadata'\n    file 'output_metrics.txt'\n    val 'MSG Metrics generated\\n' into receiver4\n\n    \"\"\"\n    python -m pipelines_utils_rdkit.filter -i results.sdf -of json -o output --meta\n    mv output_metrics.txt old_metrics.txt\n    grep '__InputCount__' splitter_metrics.txt | sed s/__InputCount__/DockingRDock/ > output_metrics.txt\n    grep '__InputCount__' splitter_metrics.txt >> output_metrics.txt\n    grep '__OutputCount__' old_metrics.txt >> output_metrics.txt\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "\"\"\"\n    python -m pipelines_utils_rdkit.filter -i results.sdf -of json -o output --meta\n    mv output_metrics.txt old_metrics.txt\n    grep '__InputCount__' splitter_metrics.txt | sed s/__InputCount__/DockingRDock/ > output_metrics.txt\n    grep '__InputCount__' splitter_metrics.txt >> output_metrics.txt\n    grep '__OutputCount__' old_metrics.txt >> output_metrics.txt\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "results",
            "splitter_metrics"
        ],
        "nb_inputs": 2,
        "outputs": [
            "receiver4"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdkit-pipelines-centos:latest'",
            "publishDir \"$baseDir/results\", mode: 'symlink'"
        ],
        "when": "",
        "stub": ""
    },
    "split_smiles": {
        "name_process": "split_smiles",
        "string_process": "\nprocess split_smiles {\n\n    input:\n    file candidates\n\n    output:\n    file 'chunk_*' into chunks mode flatten\n\n    \"\"\"\n    split -l ${params.chunk} -d -a ${params.digits} $candidates chunk_\n    \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "\"\"\"\n    split -l ${params.chunk} -d -a ${params.digits} $candidates chunk_\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "candidates"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chunks"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "enumerate_charges": {
        "name_process": "enumerate_charges",
        "string_process": "\nprocess enumerate_charges {\n\n    container 'informaticsmatters/rdkit_pipelines:latest'\n\n    input:\n    file chunks\n\n    output:\n    file 'enumerated_*' into enumerated_charges mode flatten\n\n    \"\"\"\n    python -m pipelines.dimorphite.dimorphite_dl --smiles_file $chunks --output_file enumerated_${chunks}\\\n      --min_ph ${params.min_ph} --max_ph ${params.max_ph}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    python -m pipelines.dimorphite.dimorphite_dl --smiles_file $chunks --output_file enumerated_${chunks}\\\n      --min_ph ${params.min_ph} --max_ph ${params.max_ph}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chunks"
        ],
        "nb_inputs": 1,
        "outputs": [
            "enumerated_charges"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdkit_pipelines:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "prepare_3d": {
        "name_process": "prepare_3d",
        "string_process": "\nprocess prepare_3d {\n\n    container 'informaticsmatters/obabel:3.0.0'\n\n    publishDir 'work', mode: 'copy'\n\n    input:\n    file enumerated_charges\n\n    output:\n    file 'enumerated_chunk_*.sdf' into sdfs mode flatten\n\n    \"\"\"\n    obabel $enumerated_charges -i smi -o sdf -O ${enumerated_charges}.sdf --gen3D\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    obabel $enumerated_charges -i smi -o sdf -O ${enumerated_charges}.sdf --gen3D\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "enumerated_charges"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sdfs"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/obabel:3.0.0'",
            "publishDir 'work', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "scoring": {
        "name_process": "scoring",
        "string_process": "\nprocess scoring {\n\n    container 'informaticsmatters/rdkit_pipelines:inters'\n    errorStrategy 'retry'\n    maxRetries 3\n    scratch params.scratch\n\n    input:\n    file part from docked_parts\n    file featuremaps\n    file refmol\n\n    output:\n    file 'FS_*.sdf' into featurestein_parts\n\n    \"\"\"\n    python -m pipelines.rdkit.sucos -i '$part' -if sdf --target '$refmol' --target-format sdf -o sucos -of sdf --no-gzip\n    python -m pipelines.xchem.featurestein_score -i sucos.sdf -if sdf -f '$featuremaps' -o 'FS_${part.name[0..-4]}' -of sdf --no-gzip\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    python -m pipelines.rdkit.sucos -i '$part' -if sdf --target '$refmol' --target-format sdf -o sucos -of sdf --no-gzip\n    python -m pipelines.xchem.featurestein_score -i sucos.sdf -if sdf -f '$featuremaps' -o 'FS_${part.name[0..-4]}' -of sdf --no-gzip\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "docked_parts",
            "featuremaps",
            "refmol"
        ],
        "nb_inputs": 3,
        "outputs": [
            "featurestein_parts"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdkit_pipelines:inters'",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "scratch params.scratch"
        ],
        "when": "",
        "stub": ""
    },
    "xcos": {
        "name_process": "xcos",
        "string_process": "\nprocess xcos {\n\n    container 'informaticsmatters/rdkit_pipelines:inters'\n    errorStrategy 'retry'\n    maxRetries 3\n    scratch params.scratch\n\n    input:\n    file part from interactions_parts\n    file fragments\n\n    output:\n    file 'XC_*.sdf' into xcos_parts\n\n    \"\"\"\n    python -m pipelines.xchem.xcos -i '$part' -if sdf -f '$fragments' -o 'XC_${part.name[0..-5]}' -of sdf --no-gzip\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    python -m pipelines.xchem.xcos -i '$part' -if sdf -f '$fragments' -o 'XC_${part.name[0..-5]}' -of sdf --no-gzip\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "interactions_parts",
            "fragments"
        ],
        "nb_inputs": 2,
        "outputs": [
            "xcos_parts"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdkit_pipelines:inters'",
            "errorStrategy 'retry'",
            "maxRetries 3",
            "scratch params.scratch"
        ],
        "when": "",
        "stub": ""
    },
    "filter_and_report": {
        "name_process": "filter_and_report",
        "string_process": "\nprocess filter_and_report {\n\n    container 'informaticsmatters/rdock:2013.1'\n    publishDir \"./results\", mode: 'copy'\n\n    input:\n    file part from xcos_parts.collect()\n\n    output:\n    file 'results.sdf.gz'\n    file 'results.txt'\n\n    \"\"\"\n    cat XC_*.sdf > results.sdf\n    sdreport -t results.sdf > results.txt\n    gzip results.sdf\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    cat XC_*.sdf > results.sdf\n    sdreport -t results.sdf > results.txt\n    gzip results.sdf\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "xcos_parts"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock:2013.1'",
            "publishDir \"./results\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_rank_split": {
        "name_process": "filter_rank_split",
        "string_process": "\nprocess filter_rank_split {\n\n    container 'informaticsmatters/rdock:latest'\n\n    input:\n    file poses\n\n    output:\n    file 'chunk_*.sd' into chunks mode flatten\n\n    \"\"\"\n    sdfilter -f'\\$${params.sucos_field} > ${params.sucos_score}' '$poses'\\\n    | sdsplit -${params.chunk} -ochunk_\n\n    if [ -f chunk_1.sd ]; then mv chunk_1.sd chunk_01.sd; fi\n    if [ -f chunk_2.sd ]; then mv chunk_2.sd chunk_02.sd; fi\n    if [ -f chunk_3.sd ]; then mv chunk_3.sd chunk_03.sd; fi\n    if [ -f chunk_4.sd ]; then mv chunk_4.sd chunk_04.sd; fi\n    if [ -f chunk_5.sd ]; then mv chunk_5.sd chunk_05.sd; fi\n    if [ -f chunk_6.sd ]; then mv chunk_6.sd chunk_06.sd; fi\n    if [ -f chunk_7.sd ]; then mv chunk_7.sd chunk_07.sd; fi\n    if [ -f chunk_8.sd ]; then mv chunk_8.sd chunk_08.sd; fi\n    if [ -f chunk_9.sd ]; then mv chunk_9.sd chunk_09.sd; fi\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\"\"\"\n    sdfilter -f'\\$${params.sucos_field} > ${params.sucos_score}' '$poses'\\\n    | sdsplit -${params.chunk} -ochunk_\n\n    if [ -f chunk_1.sd ]; then mv chunk_1.sd chunk_01.sd; fi\n    if [ -f chunk_2.sd ]; then mv chunk_2.sd chunk_02.sd; fi\n    if [ -f chunk_3.sd ]; then mv chunk_3.sd chunk_03.sd; fi\n    if [ -f chunk_4.sd ]; then mv chunk_4.sd chunk_04.sd; fi\n    if [ -f chunk_5.sd ]; then mv chunk_5.sd chunk_05.sd; fi\n    if [ -f chunk_6.sd ]; then mv chunk_6.sd chunk_06.sd; fi\n    if [ -f chunk_7.sd ]; then mv chunk_7.sd chunk_07.sd; fi\n    if [ -f chunk_8.sd ]; then mv chunk_8.sd chunk_08.sd; fi\n    if [ -f chunk_9.sd ]; then mv chunk_9.sd chunk_09.sd; fi\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "poses"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chunks"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "prepare_protein": {
        "name_process": "prepare_protein",
        "string_process": "\nprocess prepare_protein {\n\n    container 'informaticsmatters/rdock:latest'\n\n    input:\n    file protein\n    file prmfile\n\n    output:\n    file 'receptor.mol2' into receptor\n    \n    \"\"\"\n    set -xe\n\n    obabel -ipdb $protein -O receptor.mol2\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    set -xe\n\n    obabel -ipdb $protein -O receptor.mol2\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "protein",
            "prmfile"
        ],
        "nb_inputs": 2,
        "outputs": [
            "receptor"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "prepare_inputs": {
        "name_process": "prepare_inputs",
        "string_process": "\nprocess prepare_inputs {\n\n    container 'informaticsmatters/rdock:latest'\n\n    input:\n    set val(dir1), val(dir2), file(reference), file(ligands), file(smarts) from  files\n    file receptor\n    file prmfile\n\n    output:\n    set file('reference_hydrogens.sdf'), file('SMILES'), file('receptor.mol2'), file('recep.as'), file('*_ligands_part_*.sdf') into prepared_inputs mode flatten\n    \n    \"\"\"\n    set -xe\n\n    split -l $params.chunk $ligands ${dir1}_${dir2}_ligands_part_\n    for f in *_ligands_part_*; do obabel -ismi \\$f -h --gen3D -O \\$f.sdf; done\n\n    obabel -imol $reference -h -O reference_hydrogens.sdf\n    rbcavity -was -d -r $prmfile\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n    set -xe\n\n    split -l $params.chunk $ligands ${dir1}_${dir2}_ligands_part_\n    for f in *_ligands_part_*; do obabel -ismi \\$f -h --gen3D -O \\$f.sdf; done\n\n    obabel -imol $reference -h -O reference_hydrogens.sdf\n    rbcavity -was -d -r $prmfile\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "files",
            "receptor",
            "prmfile"
        ],
        "nb_inputs": 3,
        "outputs": [
            "prepared_inputs"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "docking": {
        "name_process": "docking",
        "string_process": "\nprocess docking {\n\n    container 'informaticsmatters/rdock:latest'\n\n    input:\n    file prmfile\n    set file(reference_h), file(smarts), file(receptor), file(activesite), file(part) from prepared_inputs \n\n    output:\n    file '*_docked_part*.sd' into docked_parts\n    \n    \"\"\"\n    set -xe\n\n    sdtether $reference_h $part ${part.name.replace('ligands', 'tethered')} \"\\$(cat $smarts)\"\n    rbdock -i ${part.name.replace('ligands', 'tethered')} -r $prmfile -p dock.prm -n $params.num_dockings -o ${part.name.replace('ligands', 'docked')[0..-5]} > docked_out.log\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    set -xe\n\n    sdtether $reference_h $part ${part.name.replace('ligands', 'tethered')} \"\\$(cat $smarts)\"\n    rbdock -i ${part.name.replace('ligands', 'tethered')} -r $prmfile -p dock.prm -n $params.num_dockings -o ${part.name.replace('ligands', 'docked')[0..-5]} > docked_out.log\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prmfile",
            "prepared_inputs"
        ],
        "nb_inputs": 2,
        "outputs": [
            "docked_parts"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "dock_ligand": {
        "name_process": "dock_ligand",
        "string_process": "\nprocess dock_ligand {\n\n    container 'informaticsmatters/rdock-mini:latest'\n\n    publishDir './', mode: 'copy'\n\n    input:\n    file protein\n    file prmfile\n    file asfile\n    file ligand\n\n    output:\n    file 'best_ligand.sdf' into best_ligand\n\n    \"\"\"\n    rbdock -i ligand.mol -r $prmfile -p dock.prm -n $params.num_dockings -o docked_ligand > docked_ligand_out.log\n    sdsort -n -s -fSCORE docked_ligand.sd | sdfilter -f'\\$_COUNT <= 1' > best_ligand.sdf\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\"\"\"\n    rbdock -i ligand.mol -r $prmfile -p dock.prm -n $params.num_dockings -o docked_ligand > docked_ligand_out.log\n    sdsort -n -s -fSCORE docked_ligand.sd | sdfilter -f'\\$_COUNT <= 1' > best_ligand.sdf\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "protein",
            "prmfile",
            "asfile",
            "ligand"
        ],
        "nb_inputs": 4,
        "outputs": [
            "best_ligand"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock-mini:latest'",
            "publishDir './', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "vscreening": {
        "name_process": "vscreening",
        "string_process": "\nprocess vscreening {\n\n    container 'informaticsmatters/rdock-mini:latest'\n\n    input:\n    file part from ligand_parts\n    file protein\n    file prmfile\n    file asfile\n\t\n    output:\n    file 'docked_part*.sd' into docked_parts\n    \n    \"\"\"\n    rbdock -i $part -r $prmfile -p dock.prm -n $params.num_dockings -o ${part.name.replace('ligands', 'docked')[0..-5]} > docked_out.log\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    rbdock -i $part -r $prmfile -p dock.prm -n $params.num_dockings -o ${part.name.replace('ligands', 'docked')[0..-5]} > docked_out.log\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ligand_parts",
            "protein",
            "prmfile",
            "asfile"
        ],
        "nb_inputs": 4,
        "outputs": [
            "docked_parts"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdock-mini:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "splitter": {
        "name_process": "splitter",
        "string_process": "\nprocess splitter {\n\n    container 'informaticsmatters/rdkit_pipelines:latest'\n\n    input:\n    file smiles from smilesfiles.flatten()\n\n    output:\n    file '*.smi' into chunks\n\n    \"\"\"\n    stem=${smiles.name[0..-5]}\n    split -l $params.chunk_size -d -a 3 --additional-suffix .smi $smiles \\${stem}_\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    stem=${smiles.name[0..-5]}\n    split -l $params.chunk_size -d -a 3 --additional-suffix .smi $smiles \\${stem}_\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "smilesfiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "chunks"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdkit_pipelines:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "enumerate": {
        "name_process": "enumerate",
        "string_process": "\nprocess enumerate {\n\n    container 'informaticsmatters/rdkit_pipelines:latest'\n\n    input:\n    file chunks from chunks.flatten()\n\n    output:\n    file 'enumerated_*.sdf' into enumerated\n\n    \"\"\"\n    python -m pipelines.rdkit.enumerate_candidates -i '$chunks' -o enumerated_${chunks}.sdf\\\n      --enumerate-charges --enumerate-chirals --enumerate-tautomers --name-column 0 --num-charges $params.num_charges\\\n      --min-ph ${params.min_ph} --max-ph ${params.max_ph}\\\n      --gen3d --minimize $params.minimize --smiles-field SMILES --add-hydrogens\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    python -m pipelines.rdkit.enumerate_candidates -i '$chunks' -o enumerated_${chunks}.sdf\\\n      --enumerate-charges --enumerate-chirals --enumerate-tautomers --name-column 0 --num-charges $params.num_charges\\\n      --min-ph ${params.min_ph} --max-ph ${params.max_ph}\\\n      --gen3d --minimize $params.minimize --smiles-field SMILES --add-hydrogens\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "chunks"
        ],
        "nb_inputs": 1,
        "outputs": [
            "enumerated"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdkit_pipelines:latest'"
        ],
        "when": "",
        "stub": ""
    },
    "prepareObabel": {
        "name_process": "prepareObabel",
        "string_process": "\nprocess prepareObabel {\n                                                              \n\n    container 'informaticsmatters/obabel:3.1.1'\n    publishDir './results', mode: 'copy'\n\n    input:\n    file molecules from enumerated.flatten()\n\n    output:\n    file 'Prep_*.sdf' into prepared_candidates\n\n    \"\"\"\n    obabel '$molecules' -O'Prep_${molecules.name[0..-5]}.sdf'  > obabel.log\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    obabel '$molecules' -O'Prep_${molecules.name[0..-5]}.sdf'  > obabel.log\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "enumerated"
        ],
        "nb_inputs": 1,
        "outputs": [
            "prepared_candidates"
        ],
        "nb_outputs": 1,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/obabel:3.1.1'",
            "publishDir './results', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "gen_feat_maps": {
        "name_process": "gen_feat_maps",
        "string_process": "\nprocess gen_feat_maps {\n\n    container 'informaticsmatters/rdkit_pipelines:latest'\n    publishDir './results', mode: 'copy'\n\n    input:\n    file fragments\n\n    output:\n    file 'featurestein.p'\n\n    \"\"\"\n    python -m pipelines.xchem.featurestein_generate -i '$fragments' -f featurestein.p\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    python -m pipelines.xchem.featurestein_generate -i '$fragments' -f featurestein.p\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fragments"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "InformaticsMatters__docking-validation",
        "directive": [
            "container 'informaticsmatters/rdkit_pipelines:latest'",
            "publishDir './results', mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "OPERATION_1": {
        "string": "cram = Channel\n    .fromPath(\"${params.input_folder}/${params.cram_file_prefix}.cram\")\n    .ifEmpty { exit 1, \"${params.input_folder}/${params.cram_file_prefix}.cram not found.\\nPlease specify --input_folder option (--input_folder cramfolder)\"}\n    .map { cram -> tuple(cram.simpleName, cram) }",
        "origin": [
            [
                "\"${params.input_folder}/${params.cram_file_prefix}.cram\"",
                "A"
            ]
        ],
        "gives": [
            [
                "cram",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "crai = Channel\n    .fromPath(\"${params.input_folder}/${params.cram_file_prefix}*.crai\")\n    .ifEmpty { exit 1, \"${params.input_folder}/${params.cram_file_prefix}*.crai not found.\\nPlease specify ensure that your cram index(es) are in your input_folder\"}\n    .map { crai -> tuple(crai.simpleName, crai) }",
        "origin": [
            [
                "\"${params.input_folder}/${params.cram_file_prefix}*.crai\"",
                "A"
            ]
        ],
        "gives": [
            [
                "crai",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "ref = Channel\n\t\t.fromPath(params.ref)\n\t\t.ifEmpty { exit 1, \"${params.ref} not found.\\nPlease specify --ref option (--ref fastafile)\"}",
        "origin": [
            [
                "params.ref",
                "A"
            ]
        ],
        "gives": [
            [
                "ref",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "sonic = Channel\n    .fromPath(params.sonic)\n    .ifEmpty { exit 1, \"${params.sonic} not found.\\nPlease specify --sonic option (--sonic sonicfile)\"}",
        "origin": [
            [
                "params.sonic",
                "A"
            ]
        ],
        "gives": [
            [
                "sonic",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "completeChannel = cram.combine(crai, by: 0)",
        "origin": [
            [
                "cram",
                "P"
            ]
        ],
        "gives": [
            [
                "completeChannel",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "summary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    }
}
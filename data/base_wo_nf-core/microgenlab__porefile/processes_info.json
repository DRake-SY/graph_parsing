{
    "gunzip": {
        "name_process": "gunzip",
        "string_process": "\nprocess gunzip {\n\tlabel 'small_cpus'\n\tlabel 'small_mem'\n\n\tinput:\n\tfile \"*\"\n\n\toutput:\n\tfile \"*\"\n\n\tscript:\n\t\"\"\"\n\tgunzip -f *.gz\n\t\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\t\"\"\"\n\tgunzip -f *.gz\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "label 'small_cpus'",
            "label 'small_mem'"
        ],
        "when": "",
        "stub": ""
    },
    "downloadFasta": {
        "name_process": "downloadFasta",
        "string_process": "\nprocess downloadFasta {\n\tlabel 'internet'\n\tlabel 'small_cpus'\n\tlabel 'small_mem'\n\n\toutput:\n\tpath(\"*.fasta\")\n\n\tscript:\n\t\"\"\"\n\twget ${params.silvaFastaURL}\n\tgunzip *gz\n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\t\"\"\"\n\twget ${params.silvaFastaURL}\n\tgunzip *gz\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "label 'internet'",
            "label 'small_cpus'",
            "label 'small_mem'"
        ],
        "when": "",
        "stub": ""
    },
    "downloadMeganSynMap": {
        "name_process": "downloadMeganSynMap",
        "string_process": "\nprocess downloadMeganSynMap {\n\tlabel 'internet'\n\tlabel 'small_cpus'\n\tlabel 'small_mem'\n\n\toutput:\n\tpath(\"*\")\n\n\tscript:\n\t\"\"\"\n\twget ${params.meganSynMapURL}\n\tgunzip *gz\n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\t\"\"\"\n\twget ${params.meganSynMapURL}\n\tgunzip *gz\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "label 'internet'",
            "label 'small_cpus'",
            "label 'small_mem'"
        ],
        "when": "",
        "stub": ""
    },
    "Concatenate": {
        "name_process": "Concatenate",
        "string_process": "\nprocess Concatenate {\n\tlabel \"small_cpus\"\n\tlabel \"small_mem\"\n\n\tinput:\n\tfile \"*fastq\"\n\n\toutput:\n\tfile \"allfq.fastq\"\n\n\tscript:\n\t\"\"\"\n\tcat *fastq > allfq.fastq\n\t\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\t\"\"\"\n\tcat *fastq > allfq.fastq\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "label \"small_cpus\"",
            "label \"small_mem\""
        ],
        "when": "",
        "stub": ""
    },
    "Porechop": {
        "name_process": "Porechop",
        "string_process": "\nprocess Porechop {\n\tlabel \"big_cpus\"\n\tlabel \"big_mem\"\n\n\tinput:\n\tfile fq\n\n\toutput:\n\tfile \"porechop_results/*\"\n\n\tshell:\n\t\"\"\"\n\tporechop -t ${task.cpus} -i ${fq} -b porechop_results\n\trm -f porechop_results/none.fastq\n\t\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\t\"\"\"\n\tporechop -t ${task.cpus} -i ${fq} -b porechop_results\n\trm -f porechop_results/none.fastq\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fq"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "label \"big_cpus\"",
            "label \"big_mem\""
        ],
        "when": "",
        "stub": ""
    },
    "NanoFilt": {
        "name_process": "NanoFilt",
        "string_process": "\nprocess NanoFilt {\n\ttag \"$barcode_id\"\n\tlabel \"small_cpus\"\n\n\tinput:\n\ttuple val(barcode_id), file(\"${barcode_id}.fastq\")\n\n\toutput:\n\ttuple val(barcode_id), file(\"Filt_${barcode_id}.fastq\"), optional: true\n\n\tshell:\n\t\"\"\"\n\tcat \"${barcode_id}.fastq\" | \\\n\t\tNanoFilt \\\n\t\t--quality ${params.nanofilt_quality} \\\n\t\t--maxlength ${params.nanofilt_maxlength} \\\n\t\t--length ${params.nanofilt_length} > \\\n\t\tFilt_${barcode_id}.fastq\n\n\t[ -s Filt_${barcode_id}.fastq ] || rm Filt_${barcode_id}.fastq\n\t\"\"\"\n\n}",
        "nb_lignes_process": 22,
        "string_script": "\t\"\"\"\n\tcat \"${barcode_id}.fastq\" | \\\n\t\tNanoFilt \\\n\t\t--quality ${params.nanofilt_quality} \\\n\t\t--maxlength ${params.nanofilt_maxlength} \\\n\t\t--length ${params.nanofilt_length} > \\\n\t\tFilt_${barcode_id}.fastq\n\n\t[ -s Filt_${barcode_id}.fastq ] || rm Filt_${barcode_id}.fastq\n\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "barcode_id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "barcode_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$barcode_id\"",
            "label \"small_cpus\""
        ],
        "when": "",
        "stub": ""
    },
    "AutoMap": {
        "name_process": "AutoMap",
        "string_process": "\nprocess AutoMap {\n\ttag \"$barcode_id\"\n\tlabel \"big_cpus\"\n\n\tinput:\n\ttuple val(barcode_id), file(\"Filt_${barcode_id}.fastq\")\n\n\toutput:\n\ttuple val(barcode_id), file(\"Filt_${barcode_id}.fastq\"), file(\"overlap_${barcode_id}.paf\")\n\n\tshell:\n\t\"\"\"\n\tminimap2 \\\n\t\t-x ava-ont \\\n\t\t-t ${task.cpus} \\\n\t\t-g 500 \\\n\t\t-f${params.minimap2_f} \\\n\t\tFilt_${barcode_id}.fastq Filt_${barcode_id}.fastq > overlap_${barcode_id}.paf\n\t\"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "\t\"\"\"\n\tminimap2 \\\n\t\t-x ava-ont \\\n\t\t-t ${task.cpus} \\\n\t\t-g 500 \\\n\t\t-f${params.minimap2_f} \\\n\t\tFilt_${barcode_id}.fastq Filt_${barcode_id}.fastq > overlap_${barcode_id}.paf\n\t\"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "barcode_id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "barcode_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$barcode_id\"",
            "label \"big_cpus\""
        ],
        "when": "",
        "stub": ""
    },
    "Yacrd": {
        "name_process": "Yacrd",
        "string_process": "\nprocess Yacrd {\n\ttag \"$barcode_id\"\n\tlabel \"big_cpus\"\n\n\tinput:\n\ttuple val(barcode_id), file(\"Filt_${barcode_id}.fastq\"), file(\"overlap_${barcode_id}.paf\")\n\n\toutput:\n\ttuple val(barcode_id), file(\"Filt_Scrubb_${barcode_id}.fastq\")\n\n\tshell:\n\t\"\"\"\n\tyacrd \\\n\t\t-i overlap_${barcode_id}.paf \\\n\t\t-o report_${barcode_id}.yacrd \\\n\t\t-c ${params.yacrd_c} \\\n\t\t-n ${params.yacrd_n} \\\n\t\tscrubb \\\n\t\t-i Filt_${barcode_id}.fastq \\\n\t\t-o Filt_Scrubb_${barcode_id}.fastq\n\t\"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\t\"\"\"\n\tyacrd \\\n\t\t-i overlap_${barcode_id}.paf \\\n\t\t-o report_${barcode_id}.yacrd \\\n\t\t-c ${params.yacrd_c} \\\n\t\t-n ${params.yacrd_n} \\\n\t\tscrubb \\\n\t\t-i Filt_${barcode_id}.fastq \\\n\t\t-o Filt_Scrubb_${barcode_id}.fastq\n\t\"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "barcode_id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "barcode_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$barcode_id\"",
            "label \"big_cpus\""
        ],
        "when": "",
        "stub": ""
    },
    "NanoPlotRaw": {
        "name_process": "NanoPlotRaw",
        "string_process": "\nprocess NanoPlotRaw {\n\ttag \"$barcode_id\"\n\tlabel \"small_cpus\"\n\tlabel \"small_mem\"\n\n\tpublishDir \"$params.outdir/NanoPlots/${barcode_id}/Raw\", mode: \"copy\"\n\n\tinput:\n\ttuple val(barcode_id), file(\"${barcode_id}.fastq\")\n\n\toutput:\n\ttuple val(barcode_id), path(\"${barcode_id}_Raw_*\"), emit: nanoplot, optional: true\n\ttuple val(barcode_id), path(\"count_Raw_${barcode_id}.txt\"), emit: counts\n\n\tscript:\n\t\"\"\"\n\tCOUNT=\\$(echo \\$(cat ${barcode_id}.fastq | wc -l)/4 | bc)\n\tTWO=2\n\techo \\$COUNT > count_Raw_${barcode_id}.txt\n\tif [ \"\\$COUNT\" -gt \"\\$TWO\" ]\n\tthen\n\t\tNanoPlot -t ${task.cpus} --fastq ${barcode_id}.fastq -p ${barcode_id}_Raw_\n\tfi\n\t\"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\t\"\"\"\n\tCOUNT=\\$(echo \\$(cat ${barcode_id}.fastq | wc -l)/4 | bc)\n\tTWO=2\n\techo \\$COUNT > count_Raw_${barcode_id}.txt\n\tif [ \"\\$COUNT\" -gt \"\\$TWO\" ]\n\tthen\n\t\tNanoPlot -t ${task.cpus} --fastq ${barcode_id}.fastq -p ${barcode_id}_Raw_\n\tfi\n\t\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "barcode_id"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$barcode_id\"",
            "label \"small_cpus\"",
            "label \"small_mem\"",
            "publishDir \"$params.outdir/NanoPlots/${barcode_id}/Raw\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "NanoPlotFilt": {
        "name_process": "NanoPlotFilt",
        "string_process": "\nprocess NanoPlotFilt {\n\ttag \"$barcode_id\"\n\tlabel \"small_cpus\"\n\tlabel \"small_mem\"\n\n\tpublishDir \"$params.outdir/NanoPlots/${barcode_id}/Filtered\", mode: \"copy\"\n\n\tinput:\n\ttuple val(barcode_id), file(\"Filt_Scrubb_${barcode_id}.fastq\")\n\n\toutput:\n\ttuple val(barcode_id), path(\"${barcode_id}_Filtered_Scrubbed_*\"), emit: nanoplot, optional: true\n\ttuple val(barcode_id), path(\"count_Filt_Scrubb_${barcode_id}.txt\"), emit: counts\n\n\tscript:\n\t\"\"\"\n\tCOUNT=\\$(echo \\$(cat Filt_Scrubb_${barcode_id}.fastq | wc -l)/4 | bc)\n\tTWO=2\n\techo \\$COUNT > count_Filt_Scrubb_${barcode_id}.txt\n\tif [ \"\\$COUNT\" -gt \"\\$TWO\" ]\n\tthen\n\t\tNanoPlot -t ${task.cpus} --fastq Filt_Scrubb_${barcode_id}.fastq -p ${barcode_id}_Filtered_Scrubbed_\n\tfi\n\t\"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "\t\"\"\"\n\tCOUNT=\\$(echo \\$(cat Filt_Scrubb_${barcode_id}.fastq | wc -l)/4 | bc)\n\tTWO=2\n\techo \\$COUNT > count_Filt_Scrubb_${barcode_id}.txt\n\tif [ \"\\$COUNT\" -gt \"\\$TWO\" ]\n\tthen\n\t\tNanoPlot -t ${task.cpus} --fastq Filt_Scrubb_${barcode_id}.fastq -p ${barcode_id}_Filtered_Scrubbed_\n\tfi\n\t\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "barcode_id"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$barcode_id\"",
            "label \"small_cpus\"",
            "label \"small_mem\"",
            "publishDir \"$params.outdir/NanoPlots/${barcode_id}/Filtered\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "SummaryTable": {
        "name_process": "SummaryTable",
        "string_process": "\nprocess SummaryTable{\n\tlabel \"small_cpus\"\n\tlabel \"small_mem\"\n\n\tpublishDir \"$params.outdir/NanoPlots\", mode: \"copy\"\n\n\tinput:\n\tfile \"*\"\n\t          \n\n\toutput:\n\tfile \"summary.tsv\"\n\n\tshell:\n\t\"\"\"\n\t#!/usr/bin/env Rscript\n\tfilt_files <- list.files(pattern = \"_Filt_Scrubb_\")\n\traw_files <- list.files(pattern = \"_Raw_\")\n\tfilt_files <- setNames(filt_files, gsub(\"^count_Filt_Scrubb_|[.]txt\\$\", \"\", filt_files))\n\traw_files <- setNames(raw_files, gsub(\"^count_Raw_|[.]txt\\$\", \"\", raw_files))\n\n\tlp <- lapply(list(RawReads = raw_files, Filtered = filt_files), function(x) {\n\t\tvapply(x, readLines, FUN.VALUE=NA_character_)\n\t})\n\n\tx <- do.call(cbind, lapply(lp, function(x) { x[match(names(lp[[1]]), names(x))] }) )\n\tx <- as.data.frame(x)\n\tx\\$BarCode <- rownames(x)\n\tx <- x[, c(\"BarCode\", \"RawReads\", \"Filtered\")]\n\n\twrite.table(x, file = \"summary.tsv\", sep=\"\\t\", quote=F, row.names=FALSE, col.names=TRUE)\n\t\"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "\t\"\"\"\n\t#!/usr/bin/env Rscript\n\tfilt_files <- list.files(pattern = \"_Filt_Scrubb_\")\n\traw_files <- list.files(pattern = \"_Raw_\")\n\tfilt_files <- setNames(filt_files, gsub(\"^count_Filt_Scrubb_|[.]txt\\$\", \"\", filt_files))\n\traw_files <- setNames(raw_files, gsub(\"^count_Raw_|[.]txt\\$\", \"\", raw_files))\n\n\tlp <- lapply(list(RawReads = raw_files, Filtered = filt_files), function(x) {\n\t\tvapply(x, readLines, FUN.VALUE=NA_character_)\n\t})\n\n\tx <- do.call(cbind, lapply(lp, function(x) { x[match(names(lp[[1]]), names(x))] }) )\n\tx <- as.data.frame(x)\n\tx\\$BarCode <- rownames(x)\n\tx <- x[, c(\"BarCode\", \"RawReads\", \"Filtered\")]\n\n\twrite.table(x, file = \"summary.tsv\", sep=\"\\t\", quote=F, row.names=FALSE, col.names=TRUE)\n\t\"\"\"",
        "nb_lignes_script": 17,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "label \"small_cpus\"",
            "label \"small_mem\"",
            "publishDir \"$params.outdir/NanoPlots\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "Fastq2Fasta": {
        "name_process": "Fastq2Fasta",
        "string_process": "\nprocess Fastq2Fasta {\n\ttag \"$barcode_id\"\n\tlabel \"small_cpus\"\n\tlabel \"small_mem\"\n\n\tinput:\n\ttuple val(barcode_id), path(\"${barcode_id}.fastq\")\n\n\toutput:\n\ttuple val(barcode_id), path(\"${barcode_id}.fasta\")\n\n\tshell:\n\t\"\"\"\n\tseqtk seq -A ${barcode_id}.fastq > ${barcode_id}.fasta\n\t\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\t\"\"\"\n\tseqtk seq -A ${barcode_id}.fastq > ${barcode_id}.fasta\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "barcode_id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "barcode_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$barcode_id\"",
            "label \"small_cpus\"",
            "label \"small_mem\""
        ],
        "when": "",
        "stub": ""
    },
    "MakeLastDB": {
        "name_process": "MakeLastDB",
        "string_process": "\nprocess MakeLastDB {\n\tlabel \"big_cpus\"\n\n\tinput:\n\tpath(\"silva_SSU_tax.fasta\")\n\n\toutput:\n\tfile \"silva.*\"\n\n\tshell:\n\t\"\"\"\n\tlastdb -cR01 -P${task.cpus} silva silva_SSU_tax.fasta\n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\t\"\"\"\n\tlastdb -cR01 -P${task.cpus} silva silva_SSU_tax.fasta\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "label \"big_cpus\""
        ],
        "when": "",
        "stub": ""
    },
    "LastTrain": {
        "name_process": "LastTrain",
        "string_process": "\nprocess LastTrain {\n\ttag \"$barcode_id\"\n\tlabel \"big_cpus\"\n\n\tinput:\n\ttuple val(barcode_id), path(\"${barcode_id}.fasta\")\n\tfile \"*\"\n\t\n\t\n\toutput:\n\ttuple val(barcode_id), path(\"${barcode_id}.par\")\n\n\tshell:\n\t\"\"\"\n\tlast-train -P${task.cpus} -Q0 silva ${barcode_id}.fasta > ${barcode_id}.par \n\t\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\t\"\"\"\n\tlast-train -P${task.cpus} -Q0 silva ${barcode_id}.fasta > ${barcode_id}.par \n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "barcode_id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "barcode_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$barcode_id\"",
            "label \"big_cpus\""
        ],
        "when": "",
        "stub": ""
    },
    "LastAL": {
        "name_process": "LastAL",
        "string_process": "\nprocess LastAL {\n\tlabel \"big_cpus\"\n\tlabel \"big_mem\"\n\ttag \"$barcode_id\"\n\n\tinput:\n\ttuple val(barcode_id), path(\"${barcode_id}.fasta\")\n\tpath \"*\"\n\n\toutput:\n\ttuple val(barcode_id), path(\"${barcode_id}.fasta\"), path(\"${barcode_id}.tab\")\n\n\tshell:\n\t\"\"\"\n\tlastal -f BlastTab -E ${params.last_E} -P${task.cpus} silva ${barcode_id}.fasta > ${barcode_id}.tab\n\t\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\t\"\"\"\n\tlastal -f BlastTab -E ${params.last_E} -P${task.cpus} silva ${barcode_id}.fasta > ${barcode_id}.tab\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "mblastall"
        ],
        "tools_url": [
            "https://bio.tools/mblastall"
        ],
        "tools_dico": [
            {
                "name": "mblastall",
                "uri": "https://bio.tools/mblastall",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0338",
                                    "term": "Sequence database search"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "Search nucleotide database with nucleotide query sequence(s).",
                "homepage": "https://bioweb.pasteur.fr/packages/pack@ptools@0.99d"
            }
        ],
        "inputs": [
            "barcode_id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "barcode_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "label \"big_cpus\"",
            "label \"big_mem\"",
            "tag \"$barcode_id\""
        ],
        "when": "",
        "stub": ""
    },
    "LastALPar": {
        "name_process": "LastALPar",
        "string_process": "\nprocess LastALPar {\n\tlabel \"big_cpus\"\n\tlabel \"big_mem\"\n\ttag \"$barcode_id\"\n\n\tinput:\n\ttuple val(barcode_id), path(\"${barcode_id}.fasta\"), path(\"${barcode_id}.par\")\n\tpath \"*\"\n\n\toutput:\n\ttuple val(barcode_id), path(\"${barcode_id}.fasta\"), path(\"${barcode_id}.tab\")\n\n\tshell:\n\t\"\"\"\n\tlastal -f BlastTab -E ${params.last_E} -P${task.cpus} -p ${barcode_id}.par silva ${barcode_id}.fasta > ${barcode_id}.tab\n\t\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\t\"\"\"\n\tlastal -f BlastTab -E ${params.last_E} -P${task.cpus} -p ${barcode_id}.par silva ${barcode_id}.fasta > ${barcode_id}.tab\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "mblastall"
        ],
        "tools_url": [
            "https://bio.tools/mblastall"
        ],
        "tools_dico": [
            {
                "name": "mblastall",
                "uri": "https://bio.tools/mblastall",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0338",
                                    "term": "Sequence database search"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "Search nucleotide database with nucleotide query sequence(s).",
                "homepage": "https://bioweb.pasteur.fr/packages/pack@ptools@0.99d"
            }
        ],
        "inputs": [
            "barcode_id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "barcode_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "label \"big_cpus\"",
            "label \"big_mem\"",
            "tag \"$barcode_id\""
        ],
        "when": "",
        "stub": ""
    },
    "MakeMinimapDB": {
        "name_process": "MakeMinimapDB",
        "string_process": "\nprocess MakeMinimapDB {\n\tlabel \"big_cpus\"\n\n\tinput:\n\tpath(\"silva_SSU_tax.fasta\")\n\n\toutput:\n\tpath(\"silva_k${params.minimap2_k}.mmi\")\n\n\tshell:\n\t\"\"\"\n\tminimap2 \\\n\t\t-t ${task.cpus} \\\n\t\t-k ${params.minimap2_k} \\\n\t\t-d silva_k${params.minimap2_k}.mmi \\\n\t\tsilva_SSU_tax.fasta\n\t\"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\t\"\"\"\n\tminimap2 \\\n\t\t-t ${task.cpus} \\\n\t\t-k ${params.minimap2_k} \\\n\t\t-d silva_k${params.minimap2_k}.mmi \\\n\t\tsilva_SSU_tax.fasta\n\t\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "label \"big_cpus\""
        ],
        "when": "",
        "stub": ""
    },
    "Minimap2": {
        "name_process": "Minimap2",
        "string_process": "\nprocess Minimap2 {\n\ttag \"$barcode_id\"\n\tlabel \"big_cpus\"\n\n\tinput:\n\ttuple val(barcode_id), path(\"${barcode_id}.fasta\")\n\tpath(\"silva_k${params.minimap2_k}.mmi\")\n\n\toutput:\n\ttuple val(barcode_id), path(\"${barcode_id}.sam\"), path(\"${barcode_id}.fasta\")\n\n\tshell:\n\t\"\"\"\n\tminimap2 \\\n\t\t-K ${params.minimap2_KM}M \\\n\t\t-t ${task.cpus} \\\n\t\t--secondary=no\\\n\t\t-ax ${params.minimap2_x} \\\n\t\tsilva_k${params.minimap2_k}.mmi \\\n\t\t${barcode_id}.fasta > ${barcode_id}.sam\n\t\"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "\t\"\"\"\n\tminimap2 \\\n\t\t-K ${params.minimap2_KM}M \\\n\t\t-t ${task.cpus} \\\n\t\t--secondary=no\\\n\t\t-ax ${params.minimap2_x} \\\n\t\tsilva_k${params.minimap2_k}.mmi \\\n\t\t${barcode_id}.fasta > ${barcode_id}.sam\n\t\"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "Minimap2"
        ],
        "tools_url": [
            "https://bio.tools/minimap2"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            }
        ],
        "inputs": [
            "barcode_id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "barcode_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$barcode_id\"",
            "label \"big_cpus\""
        ],
        "when": "",
        "stub": ""
    },
    "Sam2Rma": {
        "name_process": "Sam2Rma",
        "string_process": "\nprocess Sam2Rma {\n\ttag \"$barcode_id\"\n\tlabel \"big_cpus\"\n\n\tpublishDir \"$params.outdir/Rma\", mode: \"copy\"\n\n\tinput:\n\ttuple val(barcode_id), path(\"${barcode_id}.sam\"), path(\"${barcode_id}.fastq\")\n\tpath(\"SSURef_Nr99_tax_silva_to_NCBI_synonyms.map\")\n\tval(selected_wf)\n\n\toutput:\n\ttuple val(selected_wf), val(barcode_id), path(\"${selected_wf}_${barcode_id}.rma\")\n\n\tshell:\n\t\"\"\"\n\tsam2rma \\\n\t\t-i ${barcode_id}.sam \\\n\t\t-r ${barcode_id}.fastq \\\n\t\t-o ${selected_wf}_${barcode_id}.rma \\\n\t\t-lg \\\n\t\t-alg ${params.megan_lcaAlgorithm} \\\n\t\t-lcp ${params.megan_lcaCoveragePercent} \\\n\t\t--topPercent ${params.megan_topPercent} \\\n\t\t--minPercentReadCover ${params.megan_minPercentReadCover} \\\n\t\t-ram readCount \\\n\t\t-s2t SSURef_Nr99_tax_silva_to_NCBI_synonyms.map\n\t\"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "\t\"\"\"\n\tsam2rma \\\n\t\t-i ${barcode_id}.sam \\\n\t\t-r ${barcode_id}.fastq \\\n\t\t-o ${selected_wf}_${barcode_id}.rma \\\n\t\t-lg \\\n\t\t-alg ${params.megan_lcaAlgorithm} \\\n\t\t-lcp ${params.megan_lcaCoveragePercent} \\\n\t\t--topPercent ${params.megan_topPercent} \\\n\t\t--minPercentReadCover ${params.megan_minPercentReadCover} \\\n\t\t-ram readCount \\\n\t\t-s2t SSURef_Nr99_tax_silva_to_NCBI_synonyms.map\n\t\"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "barcode_id",
            "selected_wf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "barcode_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$barcode_id\"",
            "label \"big_cpus\"",
            "publishDir \"$params.outdir/Rma\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "Rma2Info": {
        "name_process": "Rma2Info",
        "string_process": "\nprocess Rma2Info {\n\ttag \"$barcode_id\"\n\tlabel \"small_cpus\"\n\n\tinput:\n\ttuple val(selected_wf), val(barcode_id), path(\"${selected_wf}_${barcode_id}.rma\")\n\n\toutput:\n\ttuple val(selected_wf), path(\"${selected_wf}_${barcode_id}.info\")\n\n\tshell:\n\t\"\"\"\n\trma2info \\\n\t\t-i ${selected_wf}_${barcode_id}.rma \\\n\t\t-c2c Taxonomy \\\n\t\t-p -mro \\\n\t\t-o ${selected_wf}_${barcode_id}.info\n\t\"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\t\"\"\"\n\trma2info \\\n\t\t-i ${selected_wf}_${barcode_id}.rma \\\n\t\t-c2c Taxonomy \\\n\t\t-p -mro \\\n\t\t-o ${selected_wf}_${barcode_id}.info\n\t\"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "selected_wf",
            "barcode_id"
        ],
        "nb_inputs": 2,
        "outputs": [
            "selected_wf"
        ],
        "nb_outputs": 1,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$barcode_id\"",
            "label \"small_cpus\""
        ],
        "when": "",
        "stub": ""
    },
    "MakeBlastDB": {
        "name_process": "MakeBlastDB",
        "string_process": "\nprocess MakeBlastDB {\n\tlabel \"big_cpus\"\n\n\tinput:\n\tpath(\"silva_SSU_tax.fasta\")\n\n\toutput:\n\tfile \"silva_SSU_tax.*\"\n\n\tshell:\n\t\"\"\"\n\tmakeblastdb -in silva_SSU_tax.fasta -out silva_SSU_tax -parse_seqids -dbtype nucl\n\t\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\t\"\"\"\n\tmakeblastdb -in silva_SSU_tax.fasta -out silva_SSU_tax -parse_seqids -dbtype nucl\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "label \"big_cpus\""
        ],
        "when": "",
        "stub": ""
    },
    "MegaBlast": {
        "name_process": "MegaBlast",
        "string_process": "\nprocess MegaBlast {\n\ttag \"$barcode_id\"\n\tlabel \"big_cpus\"\n\n\tinput:\n\ttuple val(barcode_id), path(\"${barcode_id}.fasta\")\n\tpath(\"*\")\n\n\toutput:\n\ttuple val(barcode_id), path(\"${barcode_id}.fasta\"), path(\"${barcode_id}.tab\")\n\n\tshell:\n\t\"\"\"\n\tblastn -task \"megablast\" -evalue ${params.megablast_evalue} -num_threads ${task.cpus} -db silva_SSU_tax -query ${barcode_id}.fasta -out ${barcode_id}.tab -outfmt 6\n\t\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\t\"\"\"\n\tblastn -task \"megablast\" -evalue ${params.megablast_evalue} -num_threads ${task.cpus} -db silva_SSU_tax -query ${barcode_id}.fasta -out ${barcode_id}.tab -outfmt 6\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "barcode_id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "barcode_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$barcode_id\"",
            "label \"big_cpus\""
        ],
        "when": "",
        "stub": ""
    },
    "Blast2Rma": {
        "name_process": "Blast2Rma",
        "string_process": "\nprocess Blast2Rma {\n\ttag \"$barcode_id\"\n\tlabel \"big_cpus\"\n\n\tpublishDir \"$params.outdir/Rma\", mode: \"copy\"\n\n\tinput:\n\ttuple val(barcode_id), path(\"${barcode_id}.fasta\"), path(\"${barcode_id}.tab\")\n\tpath(\"SSURef_Nr99_tax_silva_to_NCBI_synonyms.map\")\n\tval(selected_wf)\n\n\toutput:\n\ttuple val(selected_wf), val(barcode_id), path(\"${selected_wf}_${barcode_id}.rma\")\n\n\tshell:\n\t\"\"\"\n\tblast2rma \\\n\t\t-i ${barcode_id}.tab \\\n\t\t-f BlastTab \\\n\t\t-bm BlastN \\\n\t\t-r ${barcode_id}.fasta \\\n\t\t-o ${selected_wf}_${barcode_id}.rma \\\n\t\t-lg \\\n\t\t-alg ${params.megan_lcaAlgorithm} \\\n\t\t-lcp ${params.megan_lcaCoveragePercent} \\\n\t\t--topPercent ${params.megan_topPercent} \\\n\t\t--minPercentReadCover ${params.megan_minPercentReadCover} \\\n\t\t-ram readCount \\\n\t\t-s2t SSURef_Nr99_tax_silva_to_NCBI_synonyms.map\n\t\"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "\t\"\"\"\n\tblast2rma \\\n\t\t-i ${barcode_id}.tab \\\n\t\t-f BlastTab \\\n\t\t-bm BlastN \\\n\t\t-r ${barcode_id}.fasta \\\n\t\t-o ${selected_wf}_${barcode_id}.rma \\\n\t\t-lg \\\n\t\t-alg ${params.megan_lcaAlgorithm} \\\n\t\t-lcp ${params.megan_lcaCoveragePercent} \\\n\t\t--topPercent ${params.megan_topPercent} \\\n\t\t--minPercentReadCover ${params.megan_minPercentReadCover} \\\n\t\t-ram readCount \\\n\t\t-s2t SSURef_Nr99_tax_silva_to_NCBI_synonyms.map\n\t\"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "barcode_id",
            "selected_wf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "barcode_id"
        ],
        "nb_outputs": 1,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$barcode_id\"",
            "label \"big_cpus\"",
            "publishDir \"$params.outdir/Rma\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "MergeResults": {
        "name_process": "MergeResults",
        "string_process": "\nprocess MergeResults{\n\ttag \"$selected_wf\"\n\tlabel \"small_cpus\"\n\tlabel \"small_mem\"\n\t\n\tpublishDir \"$params.outdir/Merged_Results\", mode: \"copy\"\n\n\tinput:\n\ttuple val(selected_wf), file(\"*\")\n\n\toutput:\n\ttuple file(\"${selected_wf}_COUNTS.tsv\"), file(\"${selected_wf}_TAXCLA.tsv\")\n\n\tshell:\n\t\"\"\"\n\t#!/usr/bin/env Rscript\n\t\n\t# Read *.info files\n\tinfos <- list.files(pattern = \"[.]info\\$\")\n\tlp <- lapply(setNames(infos, infos), function(x) {\n\ta <- try(read.csv(x, sep = \"\\\\t\", header = FALSE))\n\tif (class(a) != \"try-error\"){\n\t\tsetNames(a\\$V2, a\\$V1)\n\t}else{\n\t\tNULL\n\t}\n\t})\n\n\t# Get present taxa\n\tlvls <- unique(unlist(lapply(lp, names)))\n\n\t# Create new names (TAXA_*)\n\tlnlv <- length(lvls)\n\twdth <- nchar(lnlv)\n\tbc <- paste0(\"TAXA_\", formatC(seq_along(lvls),\n\t\t\t\t\t\t\t\twidth = wdth,\n\t\t\t\t\t\t\t\tformat = 'd',\n\t\t\t\t\t\t\t\tflag = '0'))\n\n\t# Parse tax paths for each TAXA\n\trr <- data.frame(otu = bc, raw = lvls)\n\tspl <- strsplit(setNames(rr\\$raw, rr\\$otu), \";\")\n\trks <- c(\"[D]\", \"[P]\", \"[C]\", \"[O]\", \"[F]\", \"[G]\", \"[S]\")\n\ttax <- c(\"Kingdom\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"Species\")\n\trks <- setNames(rks, tax)\n\ttt <- lapply(spl, function(x) {\n\tunlist(lapply(rks, function(y){\n\t\tgrep(y, x, fixed = TRUE, value = TRUE)\n\t}))\n\t})\n\ttt <- lapply(tt, function(y) gsub(\"[ ]*\\\\\\\\[\\\\\\\\w{1,2}\\\\\\\\][ ]\", \"\", y))\n\n\t# Create TAX table\n\ttaxt <- matrix(NA_character_, \n\t\t\t\tnrow = length(tt), \n\t\t\t\tncol = length(tax), \n\t\t\t\tdimnames = list(names(tt), tax))\n\tfor (i in seq_along(tt)){\n\ttaxt[names(tt)[i], names(tt[[i]])] <- tt[[i]]\n\t}\n\n\n\tre <- as.data.frame(cbind(rr, taxt))\n\n\t# Rename OTU counts\n\tlp <- lapply(lp, function(x){\n\t\tif (length(x)){\n\t\t\tsetNames(x, re\\$otu[match(names(x), re\\$raw)])\n\t\t}\n\t})\n\n\t# Create \"OTU\" (TAXA) Table\n\totut <- matrix(0L, nrow = length(re\\$otu), ncol = length(lp),\n\t\t\t\tdimnames = list(re\\$otu, names(lp)))\n\tfor (i in seq_along(lp)){\n\totut[names(lp[[i]]), names(lp)[i]] <- lp[[i]]\n\t}\n\tcolnames(otut) <- sub(\"[.]info\\$\", \"\", colnames(otut))\n\n\n\t# Write Taxa Classification Table and Counts Table\n\twrite.table(taxt, \"${selected_wf}_TAXCLA.tsv\", quote = FALSE, sep = \"\\\\t\")\n\twrite.table(otut, \"${selected_wf}_COUNTS.tsv\", quote = FALSE, sep = \"\\\\t\")\n\t\"\"\"\n}",
        "nb_lignes_process": 84,
        "string_script": "\t\"\"\"\n\t#!/usr/bin/env Rscript\n\t\n\t# Read *.info files\n\tinfos <- list.files(pattern = \"[.]info\\$\")\n\tlp <- lapply(setNames(infos, infos), function(x) {\n\ta <- try(read.csv(x, sep = \"\\\\t\", header = FALSE))\n\tif (class(a) != \"try-error\"){\n\t\tsetNames(a\\$V2, a\\$V1)\n\t}else{\n\t\tNULL\n\t}\n\t})\n\n\t# Get present taxa\n\tlvls <- unique(unlist(lapply(lp, names)))\n\n\t# Create new names (TAXA_*)\n\tlnlv <- length(lvls)\n\twdth <- nchar(lnlv)\n\tbc <- paste0(\"TAXA_\", formatC(seq_along(lvls),\n\t\t\t\t\t\t\t\twidth = wdth,\n\t\t\t\t\t\t\t\tformat = 'd',\n\t\t\t\t\t\t\t\tflag = '0'))\n\n\t# Parse tax paths for each TAXA\n\trr <- data.frame(otu = bc, raw = lvls)\n\tspl <- strsplit(setNames(rr\\$raw, rr\\$otu), \";\")\n\trks <- c(\"[D]\", \"[P]\", \"[C]\", \"[O]\", \"[F]\", \"[G]\", \"[S]\")\n\ttax <- c(\"Kingdom\", \"Phylum\", \"Class\", \"Order\", \"Family\", \"Genus\", \"Species\")\n\trks <- setNames(rks, tax)\n\ttt <- lapply(spl, function(x) {\n\tunlist(lapply(rks, function(y){\n\t\tgrep(y, x, fixed = TRUE, value = TRUE)\n\t}))\n\t})\n\ttt <- lapply(tt, function(y) gsub(\"[ ]*\\\\\\\\[\\\\\\\\w{1,2}\\\\\\\\][ ]\", \"\", y))\n\n\t# Create TAX table\n\ttaxt <- matrix(NA_character_, \n\t\t\t\tnrow = length(tt), \n\t\t\t\tncol = length(tax), \n\t\t\t\tdimnames = list(names(tt), tax))\n\tfor (i in seq_along(tt)){\n\ttaxt[names(tt)[i], names(tt[[i]])] <- tt[[i]]\n\t}\n\n\n\tre <- as.data.frame(cbind(rr, taxt))\n\n\t# Rename OTU counts\n\tlp <- lapply(lp, function(x){\n\t\tif (length(x)){\n\t\t\tsetNames(x, re\\$otu[match(names(x), re\\$raw)])\n\t\t}\n\t})\n\n\t# Create \"OTU\" (TAXA) Table\n\totut <- matrix(0L, nrow = length(re\\$otu), ncol = length(lp),\n\t\t\t\tdimnames = list(re\\$otu, names(lp)))\n\tfor (i in seq_along(lp)){\n\totut[names(lp[[i]]), names(lp)[i]] <- lp[[i]]\n\t}\n\tcolnames(otut) <- sub(\"[.]info\\$\", \"\", colnames(otut))\n\n\n\t# Write Taxa Classification Table and Counts Table\n\twrite.table(taxt, \"${selected_wf}_TAXCLA.tsv\", quote = FALSE, sep = \"\\\\t\")\n\twrite.table(otut, \"${selected_wf}_COUNTS.tsv\", quote = FALSE, sep = \"\\\\t\")\n\t\"\"\"",
        "nb_lignes_script": 69,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "selected_wf"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "microgenlab__porefile",
        "directive": [
            "tag \"$selected_wf\"",
            "label \"small_cpus\"",
            "label \"small_mem\"",
            "publishDir \"$params.outdir/Merged_Results\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    }
}
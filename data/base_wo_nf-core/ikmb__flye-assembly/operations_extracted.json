{
    "OPERATION_1": {
        "string": "Ref = Channel.fromPath(file(params.reference))",
        "origin": [
            [
                "file(params.reference",
                "A"
            ]
        ],
        "gives": [
            [
                "Ref",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Ref = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "Ref",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "bamFile = Channel\n\t\t.fromPath(params.bam)\n\t\t.ifEmpty { exit 1, \"Could not find an input bam file\" }\n\t\t.map { b -> [ file(b).getBaseName(), file(b), file(\"${b}.pbi\") ] }",
        "origin": [
            [
                "params.bam",
                "A"
            ]
        ],
        "gives": [
            [
                "bamFile",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "bamFile = Channel.from(file(params.samples))\n\t       \t.splitCsv(sep: ';', header: true)\n\t\t.map { row -> \n\t\t\tdef project_name = row.ProjectID\n\t\t\tdef movie = returnFile( row.Movie )\n\t\t\tdef movie_index = returnFile( row.MovieIndex )\n\t\t\t[ project_name, movie, movie_index ]\n\t\t}",
        "origin": [],
        "gives": [
            [
                "bamFile",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "HifiasmAssembly = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "HifiasmAssembly",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "HifiasmAssemblyQuast = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "HifiasmAssemblyQuast",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "IpaAssembly = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "IpaAssembly",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "IpaAssemblyQuast = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "IpaAssemblyQuast",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "FlyeAssembly = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "FlyeAssembly",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "FlyeAssemblyBusco = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "FlyeAssemblyBusco",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "FlyeAssemblyQuast = Channel.empty()\t",
        "origin": [],
        "gives": [
            [
                "FlyeAssemblyQuast",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "CanuAssembly = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "CanuAssembly",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "CanuAssemblyQuast = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "CanuAssemblyQuast",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "ReadChunksGrouped = ReadChunks.groupTuple()",
        "origin": [
            [
                "ReadChunks",
                "P"
            ]
        ],
        "gives": [
            [
                "ReadChunksGrouped",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "ReadsFinal\n\t.groupTuple()\n\t.into { grouped_movies; grouped_movies_canu; grouped_movies_hifiasm; grouped_movies_ipa }",
        "origin": [
            [
                "ReadsFinal",
                "P"
            ]
        ],
        "gives": [
            [
                "grouped_movies",
                "P"
            ],
            [
                "grouped_movies_canu",
                "P"
            ],
            [
                "grouped_movies_hifiasm",
                "P"
            ],
            [
                "grouped_movies_ipa",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "Assembly = FlyeAssembly.concat(CanuAssembly).concat(HifiasmAssembly).concat(IpaAssembly)",
        "origin": [
            [
                "FlyeAssembly",
                "P"
            ],
            [
                "CanuAssembly",
                "P"
            ],
            [
                "HifiasmAssembly",
                "P"
            ],
            [
                "IpaAssembly",
                "P"
            ]
        ],
        "gives": [
            [
                "Assembly",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "AssemblyQuast = FlyeAssemblyQuast.concat(CanuAssemblyQuast).concat(HifiasmAssemblyQuast).concat(IpaAssemblyQuast)",
        "origin": [
            [
                "FlyeAssemblyQuast",
                "P"
            ],
            [
                "CanuAssemblyQuast",
                "P"
            ],
            [
                "HifiasmAssemblyQuast",
                "P"
            ],
            [
                "IpaAssemblyQuast",
                "P"
            ]
        ],
        "gives": [
            [
                "AssemblyQuast",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "mergedReads = bamFile",
        "origin": [
            [
                "bamFile",
                "P"
            ]
        ],
        "gives": [
            [
                "mergedReads",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "ReadsFinal = Reads",
        "origin": [
            [
                "Reads",
                "P"
            ]
        ],
        "gives": [
            [
                "ReadsFinal",
                "P"
            ]
        ]
    }
}
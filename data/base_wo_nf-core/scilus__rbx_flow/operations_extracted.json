{
    "OPERATION_1": {
        "string": "tractogram_for_recognition = Channel\n     .fromFilePairs(\"$root/**/{*tracking*.*,}\",\n                    size: -1,\n                    maxDepth:1) {it.parent.name}",
        "origin": [],
        "gives": [
            [
                "tractogram_for_recognition",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n    .fromPath(\"$root/**/*fa.nii.gz\",\n                    maxDepth:1)\n    .map{[it.parent.name, it]}\n    .into{anat_for_registration;anat_for_reference_centroids;anat_for_reference_bundles}",
        "origin": [],
        "gives": [
            [
                "anat_for_registration",
                "P"
            ],
            [
                "anat_for_reference_centroids",
                "P"
            ],
            [
                "anat_for_reference_bundles",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.fromPath(\"$params.atlas_anat\")\n    .into{atlas_anat;atlas_anat_for_average}",
        "origin": [
            [
                "\"$params.atlas_anat\"",
                "A"
            ]
        ],
        "gives": [
            [
                "atlas_anat",
                "P"
            ],
            [
                "atlas_anat_for_average",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "atlas_config = Channel.fromPath(\"$params.atlas_config\")",
        "origin": [
            [
                "\"$params.atlas_config\"",
                "A"
            ]
        ],
        "gives": [
            [
                "atlas_config",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "atlas_directory = Channel.fromPath(\"$params.atlas_directory\")",
        "origin": [
            [
                "\"$params.atlas_directory\"",
                "A"
            ]
        ],
        "gives": [
            [
                "atlas_directory",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "atlas_centroids = Channel.fromPath(\"$params.atlas_centroids/*_centroid.trk\")",
        "origin": [
            [
                "\"$params.atlas_centroids/*_centroid.trk\"",
                "A"
            ]
        ],
        "gives": [
            [
                "atlas_centroids",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "atlas_centroids = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "atlas_centroids",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "anat_for_registration\n    .combine(atlas_anat)\n    .set{anats_for_registration}PROCESS DEF Register_Anat",
        "origin": [
            [
                "anat_for_registration",
                "P"
            ],
            [
                "atlas_anat",
                "P"
            ]
        ],
        "gives": [
            [
                "anats_for_registration",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "anat_for_reference_centroids\n    .join(transformation_for_centroids, by: 0)\n    .set{anat_and_transformation}PROCESS DEF Transform_Centroids",
        "origin": [
            [
                "anat_for_reference_centroids",
                "P"
            ]
        ],
        "gives": [
            [
                "anat_and_transformation",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "tractogram_for_recognition\n    .join(anat_for_reference_bundles)\n    .join(transformation_for_recognition)\n    .combine(atlas_config)\n    .combine(atlas_directory)\n    .set{tractogram_and_transformation}PROCESS DEF Recognize_Bundles",
        "origin": [
            [
                "tractogram_for_recognition",
                "P"
            ],
            [
                "anat_for_reference_bundles",
                "P"
            ],
            [
                "transformation_for_recognition",
                "P"
            ],
            [
                "atlas_config",
                "P"
            ],
            [
                "atlas_directory",
                "P"
            ]
        ],
        "gives": [
            [
                "tractogram_and_transformation",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "bundles_for_cleaning\n    .transpose()\n    .set{all_bundles_for_cleaning}PROCESS DEF Clean_Bundles",
        "origin": [
            [
                "bundles_for_cleaning",
                "P"
            ]
        ],
        "gives": [
            [
                "all_bundles_for_cleaning",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "bundle_for_density\n    .combine(transformation_for_average, by:0)\n    .combine(atlas_anat_for_average)\n    .set{all_bundles_transfo_for_average}PROCESS DEF Compute_Density_Bundles",
        "origin": [
            [
                "bundle_for_density",
                "P"
            ],
            [
                "atlas_anat_for_average",
                "P"
            ]
        ],
        "gives": [
            [
                "all_bundles_transfo_for_average",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "bundle_for_average\n    .flatMap{ sid, bundles -> bundles.collect{[sid, it]} }\n    .groupTuple(by: 0)\n    .set{all_bundle_for_average}PROCESS DEF Average_Bundles",
        "origin": [
            [
                "bundle_for_average",
                "P"
            ]
        ],
        "gives": [
            [
                "all_bundle_for_average",
                "P"
            ]
        ]
    }
}
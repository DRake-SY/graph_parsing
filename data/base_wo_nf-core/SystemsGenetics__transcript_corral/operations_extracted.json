{
    "OPERATION_1": {
        "string": "FAILED_RUN_TEMPLATE = Channel.fromPath(\"${params.failed_run_report_template}\").collect()",
        "origin": [
            [
                "\"${params.failed_run_report_template}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "FAILED_RUN_TEMPLATE",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "SKIP_SAMPLES_FILE = Channel.fromPath(\"${params.skip_samples}\")",
        "origin": [
            [
                "\"${params.skip_samples}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "SKIP_SAMPLES_FILE",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.value('NA').set { SKIP_SAMPLES_FILE }",
        "origin": [
            [
                "'NA'",
                "V"
            ]
        ],
        "gives": [
            [
                "SKIP_SAMPLES_FILE",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.empty().set { LOCAL_SAMPLE_FILES_FOR_STAGING }",
        "origin": [],
        "gives": [
            [
                "LOCAL_SAMPLE_FILES_FOR_STAGING",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.empty().set { LOCAL_SAMPLE_FILES_FOR_JOIN }",
        "origin": [],
        "gives": [
            [
                "LOCAL_SAMPLE_FILES_FOR_JOIN",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.fromFilePairs( \"${params.local_samples}\", size: -1 )\n    .set { LOCAL_SAMPLE_FILES_FOR_STAGING }",
        "origin": [
            [
                "\"${params.local_samples}\", size: -1",
                "A"
            ]
        ],
        "gives": [
            [
                "LOCAL_SAMPLE_FILES_FOR_STAGING",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel.fromFilePairs( \"${params.local_samples}\", size: -1 )\n    .set { LOCAL_SAMPLE_FILES_FOR_JOIN }",
        "origin": [
            [
                "\"${params.local_samples}\", size: -1",
                "A"
            ]
        ],
        "gives": [
            [
                "LOCAL_SAMPLE_FILES_FOR_JOIN",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel.empty().set { PREPROCESSED_FORWARD_READS }",
        "origin": [],
        "gives": [
            [
                "PREPROCESSED_FORWARD_READS",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel.empty().set { PREPROCESSED_REVERSE_READS }",
        "origin": [],
        "gives": [
            [
                "PREPROCESSED_REVERSE_READS",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel.fromFilePairs( \"${params.preprocessed_samples}\", size: -1 )\n    .map { it[1][0] }\n    .set { PREPROCESSED_FORWARD_READS }",
        "origin": [
            [
                "\"${params.preprocessed_samples}\", size: -1",
                "A"
            ]
        ],
        "gives": [
            [
                "PREPROCESSED_FORWARD_READS",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel.fromFilePairs( \"${params.preprocessed_samples}\", size: -1 )\n    .map { it[1][1] }\n    .set { PREPROCESSED_REVERSE_READS }",
        "origin": [
            [
                "\"${params.preprocessed_samples}\", size: -1",
                "A"
            ]
        ],
        "gives": [
            [
                "PREPROCESSED_REVERSE_READS",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "Channel.fromPath(\"${params.input_assemblies}\").set { INPUT_ASSEMBLIES }",
        "origin": [
            [
                "\"${params.input_assemblies}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "INPUT_ASSEMBLIES",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "Channel.empty().set { SRR_FILE }",
        "origin": [],
        "gives": [
            [
                "SRR_FILE",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel.fromPath(\"${params.sra_samples}\").set { SRR_FILE }",
        "origin": [
            [
                "\"${params.sra_samples}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "SRR_FILE",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "LOCAL_SAMPLES = Channel.create()",
        "origin": [],
        "gives": [
            [
                "LOCAL_SAMPLES",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "REMOTE_SAMPLES = Channel.create()",
        "origin": [],
        "gives": [
            [
                "REMOTE_SAMPLES",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "REMOTE_SAMPLES_LIST\n  .splitCsv()\n  .groupTuple(by: 1)\n  .map { [it[1], it[0].toString().replaceAll(/[\\[\\]\\'\\,]/,''), 'remote'] }\n  .set{REMOTE_SAMPLES_FOR_STAGING}",
        "origin": [
            [
                "REMOTE_SAMPLES_LIST",
                "P"
            ]
        ],
        "gives": [
            [
                "REMOTE_SAMPLES_FOR_STAGING",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "LOCAL_SAMPLE_FILES_FOR_STAGING\n  .map{ [it[0], it[1], 'local'] }\n  .set{LOCAL_SAMPLES_FOR_STAGING}",
        "origin": [
            [
                "LOCAL_SAMPLE_FILES_FOR_STAGING",
                "P"
            ]
        ],
        "gives": [
            [
                "LOCAL_SAMPLES_FOR_STAGING",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "ALL_SAMPLES = REMOTE_SAMPLES_FOR_STAGING\n  .mix(LOCAL_SAMPLES_FOR_STAGING)",
        "origin": [
            [
                "REMOTE_SAMPLES_FOR_STAGING",
                "P"
            ],
            [
                "LOCAL_SAMPLES_FOR_STAGING",
                "P"
            ]
        ],
        "gives": [
            [
                "ALL_SAMPLES",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "SAMPLE_FILE_CONTENTS\n  .splitCsv(quote: '\"')",
        "origin": [
            [
                "SAMPLE_FILE_CONTENTS",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_21": {
        "string": "LOCAL_SAMPLES\n  .map {[it[0], 'hi']}\n  .mix(LOCAL_SAMPLE_FILES_FOR_JOIN)\n  .groupTuple(size: 2)\n  .map {[it[0], it[1][0]]}\n  .set {LOCAL_SAMPLES_FOR_TRIMMING}",
        "origin": [
            [
                "LOCAL_SAMPLES",
                "P"
            ],
            [
                "LOCAL_SAMPLE_FILES_FOR_JOIN",
                "P"
            ]
        ],
        "gives": [
            [
                "LOCAL_SAMPLES_FOR_TRIMMING",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "COMBINED_SAMPLES = LOCAL_SAMPLES_FOR_TRIMMING.mix(MERGED_SAMPLES_FOR_TRIMMING)",
        "origin": [
            [
                "LOCAL_SAMPLES_FOR_TRIMMING",
                "P"
            ],
            [
                "MERGED_SAMPLES_FOR_TRIMMING",
                "P"
            ]
        ],
        "gives": [
            [
                "COMBINED_SAMPLES",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "FORWARD_READS_FOR_ASSEMBLY\n  .mix( PREPROCESSED_FORWARD_READS )\n  .collectFile(name: \"combined_forward_reads.fq\", newLine: false, skip: 0)\n  .set { COMBINED_FORWARD_READS_FOR_ASSEMBLY }",
        "origin": [
            [
                "FORWARD_READS_FOR_ASSEMBLY",
                "P"
            ],
            [
                "PREPROCESSED_FORWARD_READS",
                "P"
            ]
        ],
        "gives": [
            [
                "COMBINED_FORWARD_READS_FOR_ASSEMBLY",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "REVERSE_READS_FOR_ASSEMBLY\n  .mix( PREPROCESSED_REVERSE_READS )\n  .collectFile(name: \"combined_reverse_reads.fq\", newLine: false, skip: 0)\n  .set  { COMBINED_REVERSE_READS_FOR_ASSEMBLY }",
        "origin": [
            [
                "REVERSE_READS_FOR_ASSEMBLY",
                "P"
            ],
            [
                "PREPROCESSED_REVERSE_READS",
                "P"
            ]
        ],
        "gives": [
            [
                "COMBINED_REVERSE_READS_FOR_ASSEMBLY",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "COMBINED_FORWARD_READS_FOR_ASSEMBLY.into { FORWARD_READS_FOR_TRINITY }",
        "origin": [
            [
                "COMBINED_FORWARD_READS_FOR_ASSEMBLY",
                "P"
            ]
        ],
        "gives": [
            [
                "FORWARD_READS_FOR_TRINITY",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "COMBINED_REVERSE_READS_FOR_ASSEMBLY.into { REVERSE_READS_FOR_TRINITY }",
        "origin": [
            [
                "COMBINED_REVERSE_READS_FOR_ASSEMBLY",
                "P"
            ]
        ],
        "gives": [
            [
                "REVERSE_READS_FOR_TRINITY",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "TRANSCRIPTOME_ASSEMBLIES\n  .mix ( INPUT_ASSEMBLIES )\n  .collectFile(name: \"combined_assemblies.fastq\", newLine: false, skip: 0)\n  .set { COMBINED_ASSEMBLY }",
        "origin": [
            [
                "TRANSCRIPTOME_ASSEMBLIES",
                "P"
            ],
            [
                "INPUT_ASSEMBLIES",
                "P"
            ]
        ],
        "gives": [
            [
                "COMBINED_ASSEMBLY",
                "P"
            ]
        ]
    }
}
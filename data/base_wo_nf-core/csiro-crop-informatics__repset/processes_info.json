{
    "srrDownload": {
        "name_process": "srrDownload",
        "string_process": "\nprocess srrDownload {\n  tag { \"${SRR} R${MATE} attempt=${task.attempt}\" }\n                   \n  storeDir { (task.executor.matches('awsbatch|google-lifesciences') || workflow.profile.contains('CI')) ? null : \"downloaded\" }\n  errorStrategy = 'retry'\n  maxRetries = 2                                        \n  container = { task.attempt == 1 ? getContainer('aspera') : task.attempt == 2 ? getContainer('sra') : getContainer('tools') }\n\n  input:\n    tuple val(META), val(MATE) from srrDownloadChannel\n\n  output:\n    tuple val(META), file(\"${SRR}_${MATE}.fastq.gz\") into SraDownloadsChannel\n\n  script:\n  SRR = META.sra\n  if(task.attempt == 1 )\n  \"\"\"\n  ascp -T --policy=fair -P33001 -i /home/aspera/.aspera/cli/etc/asperaweb_id_dsa.openssh \\\n    era-fasp@fasp.sra.ebi.ac.uk:vol1/fastq/${SRR[0..5]}/${SRR}/${SRR}_${MATE}.fastq.gz ./\n  \"\"\"                                                                                                                                                                                                                                                                                                                        \n  else if(task.attempt == 2 )\n  \"\"\"\n  fastq-dump --split-files --origfmt --gzip ${SRR}\n  \"\"\"\n  else\n  \"\"\"\n  curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/${SRR[0..5]}/${SRR}/${SRR}_${MATE}.fastq.gz -O\n  \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "  SRR = META.sra\n  if(task.attempt == 1 )\n  \"\"\"\n  ascp -T --policy=fair -P33001 -i /home/aspera/.aspera/cli/etc/asperaweb_id_dsa.openssh \\\n    era-fasp@fasp.sra.ebi.ac.uk:vol1/fastq/${SRR[0..5]}/${SRR}/${SRR}_${MATE}.fastq.gz ./\n  \"\"\"                                                                                                                                                                                                                                                                                                                        \n  else if(task.attempt == 2 )\n  \"\"\"\n  fastq-dump --split-files --origfmt --gzip ${SRR}\n  \"\"\"\n  else\n  \"\"\"\n  curl -L ftp://ftp.sra.ebi.ac.uk/vol1/fastq/${SRR[0..5]}/${SRR}/${SRR}_${MATE}.fastq.gz -O\n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "NsRRR",
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/nsrrr",
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "NsRRR",
                "uri": "https://bio.tools/nsrrr",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3295",
                            "term": "Epigenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2259",
                            "term": "Systems biology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3659",
                                    "term": "Regression analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Multivariate regression model capable of using prior biological knowledge expressed as gene interaction networks to guide the search for associations between gene expression and DNA methylation signatures.",
                "homepage": "http://www2.imperial.ac.uk/~gmontana/nsrrr.htm"
            },
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [
            "srrDownloadChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "SraDownloadsChannel"
        ],
        "nb_outputs": 1,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "tag { \"${SRR} R${MATE} attempt=${task.attempt}\" }",
            "storeDir { (task.executor.matches('awsbatch|google-lifesciences') || workflow.profile.contains('CI')) ? null : \"downloaded\" }",
            "errorStrategy = 'retry'",
            "maxRetries = 2",
            "container = { task.attempt == 1 ? getContainer('aspera') : task.attempt == 2 ? getContainer('sra') : getContainer('tools') }"
        ],
        "when": "",
        "stub": ""
    },
    "countRealRads": {
        "name_process": "countRealRads",
        "string_process": "\nprocess countRealRads {\n  tag { META.containsKey('sra') ? META.sra : META.reads }\n                                                                                                                                                                    \n  input: tuple val(META), path(reads) from SraDownloadsChannel.groupTuple().mix(realReadsDefinitionsChannelwithReadFiles)\n  output: tuple val(META), file(reads), stdout into realReadsCounted\n  script: \"zcat ${reads[0]} | awk 'END{print NR/4}'\"\n}",
        "nb_lignes_process": 6,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "tag { META.containsKey('sra') ? META.sra : META.reads } input: tuple val(META), path(reads) from SraDownloadsChannel.groupTuple().mix(realReadsDefinitionsChannelwithReadFiles) output: tuple val(META), file(reads), stdout into realReadsCounted script: \"zcat ${reads[0]} | awk 'END{print NR/4}'\""
        ],
        "when": "",
        "stub": ""
    },
    "subsetRealReads": {
        "name_process": "subsetRealReads",
        "string_process": "\nprocess subsetRealReads {\n  tag { \"${basename}\" }\n  echo true\n  label 'seqtk'\n  input: tuple val(META), file(reads) from realReadsCountedBranched.subsample\n  output: tuple val(META), file('*.fastq.gz'), file('count.1') into realReadsSubsampled\n\n  script:\n    basename = (META.containsKey('sra') ? META.sra : META.label) + \"_subsample_${META.subset}\"\n                                                                                                                                                                                                                                            \n    \"\"\"\n    SEED=\\$RANDOM\n    seqtk sample -s \\${SEED} ${reads[0]} ${META.subset} | tee >(awk 'END{print NR/4}' > count.1) | gzip -c > ${basename}_1.fastq.gz \\\n    && seqtk sample -s \\${SEED} ${reads[1]} ${META.subset}| tee >(awk 'END{print NR/4}' > count.2) | gzip -c > ${basename}_2.fastq.gz \\\n    && cmp -s count.{1,2} || (echo \"Read counts mismatch!\"; head count.{1,2}; exit 1)\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    basename = (META.containsKey('sra') ? META.sra : META.label) + \"_subsample_${META.subset}\"\n                                                                                                                                                                                                                                            \n    \"\"\"\n    SEED=\\$RANDOM\n    seqtk sample -s \\${SEED} ${reads[0]} ${META.subset} | tee >(awk 'END{print NR/4}' > count.1) | gzip -c > ${basename}_1.fastq.gz \\\n    && seqtk sample -s \\${SEED} ${reads[1]} ${META.subset}| tee >(awk 'END{print NR/4}' > count.2) | gzip -c > ${basename}_2.fastq.gz \\\n    && cmp -s count.{1,2} || (echo \"Read counts mismatch!\"; head count.{1,2}; exit 1)\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "tag { \"${basename}\" }",
            "echo true",
            "label 'seqtk' input: tuple val(META), file(reads) from realReadsCountedBranched.subsample output: tuple val(META), file('*.fastq.gz'), file('count.1') into realReadsSubsampled"
        ],
        "when": "",
        "stub": ""
    },
    "parseMapperVersion": {
        "name_process": "parseMapperVersion",
        "string_process": "\nprocess parseMapperVersion {\n  container { \"${mapmeta.container}\" }\n  tag { mapmeta.subMap(['tool','version']) }\n\n  input:  val(mapmeta) from mappersVithVersionCallChannel\n\n  output: tuple val(mapmeta), stdout into mappersCapturedVersionChannel\n\n  script: \"${mapmeta.versionCall}\"\n                                                      \n}",
        "nb_lignes_process": 10,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "container { \"${mapmeta.container}\" }",
            "tag { mapmeta.subMap(['tool','version']) } input: val(mapmeta) from mappersVithVersionCallChannel output: tuple val(mapmeta), stdout into mappersCapturedVersionChannel script: \"${mapmeta.versionCall}\""
        ],
        "when": "",
        "stub": ""
    },
    "stageRemoteInputFile": {
        "name_process": "stageRemoteInputFile",
        "string_process": "\nprocess stageRemoteInputFile {\n  tag{meta.subMap(['species','version'])+[fileType: fileType]}\n  errorStrategy 'finish'\n    \n                                                                             \n                                                                              \n    \n  storeDir { (task.executor.matches('awsbatch|google-lifesciences') || workflow.profile.contains('CI')) ? null : \"downloaded\" }\n\n\n  input:\n    set val(meta), val(fileType) from refsToStage                       \n\n  output:\n    set val(outmeta), file(outfile)  into stagedFilesRemote\n\n  when:\n    (meta.\"${fileType}\").isURL()\n\n  script:\n    basename=getTagFromMeta(meta)\n    outfile =  \"${basename}.${fileType}\"\n    outmeta = meta.subMap(['species', 'version','seqtype'])\n    fpath = meta.\"${fileType}\"\n    decompress = fpath.matches(\"^.*\\\\.gz\\$\") ?  \"| gunzip --stdout \" :  \" \"\n    \"\"\"\n    set -eo pipefail\n    curl ${fpath} ${decompress} > ${outfile}\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    basename=getTagFromMeta(meta)\n    outfile =  \"${basename}.${fileType}\"\n    outmeta = meta.subMap(['species', 'version','seqtype'])\n    fpath = meta.\"${fileType}\"\n    decompress = fpath.matches(\"^.*\\\\.gz\\$\") ?  \"| gunzip --stdout \" :  \" \"\n    \"\"\"\n    set -eo pipefail\n    curl ${fpath} ${decompress} > ${outfile}\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [
            "refsToStage"
        ],
        "nb_inputs": 1,
        "outputs": [
            "stagedFilesRemote"
        ],
        "nb_outputs": 1,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "tag{meta.subMap(['species','version'])+[fileType: fileType]}",
            "errorStrategy 'finish'",
            "storeDir { (task.executor.matches('awsbatch|google-lifesciences') || workflow.profile.contains('CI')) ? null : \"downloaded\" }"
        ],
        "when": "(meta.\"${fileType}\").isURL()",
        "stub": ""
    },
    "stageLocalInputFile": {
        "name_process": "stageLocalInputFile",
        "string_process": "\nprocess stageLocalInputFile {\n  tag{meta.subMap(['species','version'])+[fileType: fileType]}\n  errorStrategy 'finish'\n\n  input:\n    set val(meta), val(fileType), file(infile) from refsToStageLocal\n\n  output:\n    set val(outmeta), file(outfile)  into stagedFilesLocal\n\n  script:\n    basename=getTagFromMeta(meta)\n    outfile = \"${basename}.${fileType}\"\n    outmeta = meta.subMap(['species', 'version','seqtype'])\n    if((infile.name).matches(\"^.*\\\\.gz\\$\")){          \n      \"\"\"gunzip --stdout  ${infile}  > ${outfile} \"\"\"\n    } else {       \n      \"\"\"cp -s  ${infile} ${outfile}\"\"\"\n    }\n}",
        "nb_lignes_process": 19,
        "string_script": "    basename=getTagFromMeta(meta)\n    outfile = \"${basename}.${fileType}\"\n    outmeta = meta.subMap(['species', 'version','seqtype'])\n    if((infile.name).matches(\"^.*\\\\.gz\\$\")){          \n      \"\"\"gunzip --stdout  ${infile}  > ${outfile} \"\"\"\n    } else {       \n      \"\"\"cp -s  ${infile} ${outfile}\"\"\"\n    }",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "refsToStageLocal"
        ],
        "nb_inputs": 1,
        "outputs": [
            "stagedFilesLocal"
        ],
        "nb_outputs": 1,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "tag{meta.subMap(['species','version'])+[fileType: fileType]}",
            "errorStrategy 'finish'"
        ],
        "when": "",
        "stub": ""
    },
    "faidxGenomeFASTA": {
        "name_process": "faidxGenomeFASTA",
        "string_process": "\nprocess faidxGenomeFASTA {\n  tag(\"${refmeta}\")\n  label 'samtools'\n\n  input:\n    set val(refmeta), file(infiles) from stagedReferences\n\n  output:\n    set val(refmeta), file(\"${ref}.fai\") into genomeIndicesForReadCoordinateConversion\n    set val(refmeta), file(ref), file(\"${ref}.fai\") into genomesForIndexing, genomesForRnfSimReads\n    set val(refmeta), file(ref), file(\"${ref}.fai\"), file(\"${gff}\") optional true into referencesForTranscriptomeExtraction                  \n\n  script:\n  ref = infiles[infiles.findIndexOf { fname -> fname =~ /\\.fasta$/ }]\n  gffIdx = infiles.findIndexOf { fname -> fname =~ /\\.gff$/ }\n  gff = gffIdx >= 0 ? infiles[gffIdx] : 'NO_GFF_HERE'\n  \"\"\"\n  samtools faidx ${ref}\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  ref = infiles[infiles.findIndexOf { fname -> fname =~ /\\.fasta$/ }]\n  gffIdx = infiles.findIndexOf { fname -> fname =~ /\\.gff$/ }\n  gff = gffIdx >= 0 ? infiles[gffIdx] : 'NO_GFF_HERE'\n  \"\"\"\n  samtools faidx ${ref}\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "KOREF",
            "GFF-Ex",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/KOREF",
            "https://bio.tools/gff-ex",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "KOREF",
                "uri": "https://bio.tools/KOREF",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffolding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Chromosome-scale assembly comparison of the Korean Reference Genome KOREF from PromethION and PacBio with Hi-C mapping information.\n\nThe first Korean Reference Genome. KOREF_S means KOREF_Single.",
                "homepage": "http://koref.net"
            },
            {
                "name": "GFF-Ex",
                "uri": "https://bio.tools/gff-ex",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0253",
                                    "term": "Sequence feature prediction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Automated feature-based extraction of sequences from a GFF file.",
                "homepage": "http://bioinfo.icgeb.res.in/gff/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "stagedReferences"
        ],
        "nb_inputs": 1,
        "outputs": [
            "genomeIndicesForReadCoordinateConversion",
            "genomesForIndexing",
            "genomesForRnfSimReads",
            "referencesForTranscriptomeExtraction"
        ],
        "nb_outputs": 4,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "tag(\"${refmeta}\")",
            "label 'samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "extractTranscripts": {
        "name_process": "extractTranscripts",
        "string_process": "\nprocess extractTranscripts {\n  echo true\n  label 'gffread'\n  label 'slow'\n  tag{meta.subMap(['species','version'])}\n  scratch false\n\n                       \n\n  input:\n                                                                                         \n    set val(meta), file(ref), file(fai), file(features) from referencesForTranscriptomeExtraction\n                                                                                            \n                                            \n                                                                                                                                                                           \n                                                     \n  output:\n    set val(outmeta), file(outfile) into extractedTranscriptomes                                                \n\n  when:\n    'rna2rna'.matches(params.mapmode) || 'rna2dna'.matches(params.mapmode)\n\n  shell:\n                                         \n    basename=getTagFromMeta(meta)\n    outmeta = meta.subMap(['species','version'])               \n    outmeta.seqtype = 'RNA'\n    outfile = \"${basename}.transcripts.fa\"\n                                            \n                                                                  \n       '''\n    // gffread --merge -W -w !{outfile} -g !{ref} !{features}\n    // '''\n                      \n    '''\n    gffread -W -w- -g !{ref} !{features} \\\n      | awk '/^>/ { if(NR>1) print \"\";  printf(\"%s\\\\t\",$0); next; } { printf(\"%s\",$0);} END {printf(\"\\\\n\");}' \\\n      | tee tmp.fa \\\n      | awk 'NR==FNR{all[$1]+=1}; NR!=FNR{if(all[$1]==1){print}}' - tmp.fa  \\\n      | tr '\\\\t' '\\\\n' \\\n      > !{outfile} && rm tmp.fa\n    '''\n                                                                                                                         \n                                                   \n          \n                                                                                                                       \n                                                               \n}",
        "nb_lignes_process": 47,
        "string_script": "    basename=getTagFromMeta(meta)\n    outmeta = meta.subMap(['species','version'])               \n    outmeta.seqtype = 'RNA'\n    outfile = \"${basename}.transcripts.fa\"\n                                            \n                                                                  \n       '''\n    // gffread --merge -W -w !{outfile} -g !{ref} !{features}\n    // '''\n                      \n    '''\n    gffread -W -w- -g !{ref} !{features} \\\n      | awk '/^>/ { if(NR>1) print \"\";  printf(\"%s\\\\t\",$0); next; } { printf(\"%s\",$0);} END {printf(\"\\\\n\");}' \\\n      | tee tmp.fa \\\n      | awk 'NR==FNR{all[$1]+=1}; NR!=FNR{if(all[$1]==1){print}}' - tmp.fa  \\\n      | tr '\\\\t' '\\\\n' \\\n      > !{outfile} && rm tmp.fa\n    '''",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [
            "gffread",
            "NextSV"
        ],
        "tools_url": [
            "https://bio.tools/gffread",
            "https://bio.tools/nextsv"
        ],
        "tools_dico": [
            {
                "name": "gffread",
                "uri": "https://bio.tools/gffread",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0361",
                                    "term": "Sequence annotation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "program for filtering, converting and manipulating GFF files",
                "homepage": "https://ccb.jhu.edu/software/stringtie/gff.shtml"
            },
            {
                "name": "NextSV",
                "uri": "https://bio.tools/nextsv",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A meta SV caller and a computational pipeline to perform SV calling from low coverage long-read sequencing data. It integrates three aligners and three SV callers and generates two integrated call sets (sensitive/stringent) for different analysis purpose.",
                "homepage": "http://github.com/Nextomics/NextSV"
            }
        ],
        "inputs": [
            "referencesForTranscriptomeExtraction"
        ],
        "nb_inputs": 1,
        "outputs": [
            "extractedTranscriptomes"
        ],
        "nb_outputs": 1,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "echo true",
            "label 'gffread'",
            "label 'slow'",
            "tag{meta.subMap(['species','version'])}",
            "scratch false"
        ],
        "when": "'rna2rna'.matches(params.mapmode) || 'rna2dna'.matches(params.mapmode)",
        "stub": ""
    },
    "faidxTranscriptomeFASTA": {
        "name_process": "faidxTranscriptomeFASTA",
        "string_process": "\nprocess faidxTranscriptomeFASTA {\n  tag(\"${refmeta}\")\n  label 'samtools'\n\n  input:\n    set val(refmeta), file(fa) from extractedTranscriptomes\n\n  output:\n    set val(refmeta), file(fa), file(\"${fa}.fai\") into transcriptomesForIndexing, transcriptomesForRnfSimReads\n\n  script:\n  \"\"\"\n  samtools faidx ${fa}\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  samtools faidx ${fa}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "extractedTranscriptomes"
        ],
        "nb_inputs": 1,
        "outputs": [
            "transcriptomesForIndexing",
            "transcriptomesForRnfSimReads"
        ],
        "nb_outputs": 2,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "tag(\"${refmeta}\")",
            "label 'samtools'"
        ],
        "when": "",
        "stub": ""
    },
    "indexGenerator": {
        "name_process": "indexGenerator",
        "string_process": "\nprocess indexGenerator {\n  label 'index'\n  container { \"${mapper.container}\" }\n                                             \n  tag { [refmeta.subMap(['species','version','seqtype']), mapper.subMap(['tool','version'])] }\n\n  input:\n                                                                                                                                        \n                                                                                                                                            \n    set val(mapper), val(refmeta), file(ref), file(fai) from forIndexing\n\n  output:\n    set val(idxmeta), file(ref), file(fai), file(\"*\") into indices\n\n                                                                                                                                                            \n                                                                                                                                                             \n\n  exec:\n                                                                                                                                          \n                                                           \n                                                                                                   \n    def binding = [ref: \"${ref.name}\", task: task.clone()]\n    idxmeta = [mapper: mapper.subMap(['tool','version']), reference: refmeta]\n  script:\n    if(mapper.idxTemplate == true) {                                  \n      template mapper.index == true ? \"index/${mapper.tool}.sh\" : \"index/${mapper.index}\"                                                \n    } else {                                           \n      resolveScriptVariables(mapper.index, binding)\n    }\n}",
        "nb_lignes_process": 29,
        "string_script": "    def binding = [ref: \"${ref.name}\", task: task.clone()]\n    idxmeta = [mapper: mapper.subMap(['tool','version']), reference: refmeta]\n  script:\n    if(mapper.idxTemplate == true) {                                  \n      template mapper.index == true ? \"index/${mapper.tool}.sh\" : \"index/${mapper.index}\"                                                \n    } else {                                           \n      resolveScriptVariables(mapper.index, binding)\n    }",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "forIndexing"
        ],
        "nb_inputs": 1,
        "outputs": [
            "indices"
        ],
        "nb_outputs": 1,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "label 'index'",
            "container { \"${mapper.container}\" }",
            "tag { [refmeta.subMap(['species','version','seqtype']), mapper.subMap(['tool','version'])] }"
        ],
        "when": "",
        "stub": ""
    },
    "rnfSimReads": {
        "name_process": "rnfSimReads",
        "string_process": "\nprocess rnfSimReads {\n              \n  tag{simmeta}\n  label 'rnftools'\n  label 'slow'\n\n  input:\n                                                                               \n    set val(meta), file(ref), file(fai) from genomesForRnfSimReads.mix(transcriptomesForRnfSimReads)\n                                                            \n                                                                                          \n    each coverage from params.simreadsDNA.coverage\n    each length from params.simreadsDNA.length.toString().tokenize(\",\")*.toInteger()\n    each simulator from params.simreadsDNA.simulator\n    each mode from params.simreadsDNA.mode         \n    each distance from params.simreadsDNA.distance          \n    each distanceDev from params.simreadsDNA.distanceDev          \n\n  output:\n                                                               \n                                                                                     \n    set val(simmeta), file(ref), file(simStats), file(\"*.fq.gz\") into simulatedReads\n\n\n  when:\n    !(mode == \"PE\" && simulator == \"CuReSim\") && \\\n    (meta.seqtype == 'RNA' || (meta.seqtype == 'DNA' && 'dna2dna'.matches(params.mapmode) ))\n                                                                                                                                     \n\n\n          \n                                         \n\n  script:\n    basename=meta.species+\"_\"+meta.version+\"_\"+simulator\n    simmeta = meta.subMap(['species','version','seqtype'])+[\"simulator\": simulator, \"coverage\":coverage, \"mode\": mode, \"length\": length, 'coordinates': meta.seqtype]\n    len1 = length\n    if(mode == \"PE\") {\n                    \n      len2 = length\n      tuple = 2\n      dist=\"distance=\"+distance+\",\"\n      distDev= \"distance_deviation=\"+distanceDev+\",\"\n                \n      simmeta.dist = distance\n      simmeta.distanceDev = distanceDev\n    } else {\n      len2 = 0\n      tuple = 1\n      dist=\"\"\n      distDev=\"\"\n    }\n    \"\"\"\n    set -eo pipefail\n    echo \"import rnftools\n    rnftools.mishmash.sample(\\\\\"${basename}_reads\\\\\",reads_in_tuple=${tuple})\n    rnftools.mishmash.${simulator}(\n            fasta=\\\\\"${ref}\\\\\",\n            coverage=${coverage},\n            ${dist}\n            ${distDev}\n            read_length_1=${len1},\n            read_length_2=${len2}\n    )\n    include: rnftools.include()\n    rule: input: rnftools.input()\n    \" > Snakefile\n    snakemake -p \\\n    && awk 'END{print \"nreads=\"NR/4}' *.fq > simStats \\\n    && for f in *.fq; do\n        paste - - - - < \\$f \\\n        | awk -vFS=\"\\\\t\" -vOFS=\"\\\\n\" '{gsub(/[^ACGTUacgtu]/,\"N\",\\$2);print}' \\\n        | gzip -c > \\${f}.gz\n    done && rm *.fq \\\n    && find . -type d -mindepth 2 | xargs rm -r\n    \"\"\"\n}",
        "nb_lignes_process": 76,
        "string_script": "    basename=meta.species+\"_\"+meta.version+\"_\"+simulator\n    simmeta = meta.subMap(['species','version','seqtype'])+[\"simulator\": simulator, \"coverage\":coverage, \"mode\": mode, \"length\": length, 'coordinates': meta.seqtype]\n    len1 = length\n    if(mode == \"PE\") {\n                    \n      len2 = length\n      tuple = 2\n      dist=\"distance=\"+distance+\",\"\n      distDev= \"distance_deviation=\"+distanceDev+\",\"\n                \n      simmeta.dist = distance\n      simmeta.distanceDev = distanceDev\n    } else {\n      len2 = 0\n      tuple = 1\n      dist=\"\"\n      distDev=\"\"\n    }\n    \"\"\"\n    set -eo pipefail\n    echo \"import rnftools\n    rnftools.mishmash.sample(\\\\\"${basename}_reads\\\\\",reads_in_tuple=${tuple})\n    rnftools.mishmash.${simulator}(\n            fasta=\\\\\"${ref}\\\\\",\n            coverage=${coverage},\n            ${dist}\n            ${distDev}\n            read_length_1=${len1},\n            read_length_2=${len2}\n    )\n    include: rnftools.include()\n    rule: input: rnftools.input()\n    \" > Snakefile\n    snakemake -p \\\n    && awk 'END{print \"nreads=\"NR/4}' *.fq > simStats \\\n    && for f in *.fq; do\n        paste - - - - < \\$f \\\n        | awk -vFS=\"\\\\t\" -vOFS=\"\\\\n\" '{gsub(/[^ACGTUacgtu]/,\"N\",\\$2);print}' \\\n        | gzip -c > \\${f}.gz\n    done && rm *.fq \\\n    && find . -type d -mindepth 2 | xargs rm -r\n    \"\"\"",
        "nb_lignes_script": 41,
        "language_script": "bash",
        "tools": [
            "Snakemake"
        ],
        "tools_url": [
            "https://bio.tools/snakemake"
        ],
        "tools_dico": [
            {
                "name": "Snakemake",
                "uri": "https://bio.tools/snakemake",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software engineering"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Computer programming"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3372",
                            "term": "Software development"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3762",
                                    "term": "Service composition"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Workflow engine and language. It aims to reduce the complexity of creating workflows by providing a fast and comfortable execution environment, together with a clean and modern domain specific specification language (DSL) in python style.",
                "homepage": "https://snakemake.readthedocs.io/en/stable/index.html"
            }
        ],
        "inputs": [
            "genomesForRnfSimReads",
            "transcriptomesForRnfSimReads",
            "params",
            "params",
            "params",
            "params",
            "params",
            "params"
        ],
        "nb_inputs": 8,
        "outputs": [
            "simulatedReads"
        ],
        "nb_outputs": 1,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "tag{simmeta}",
            "label 'rnftools'",
            "label 'slow'"
        ],
        "when": "!(mode == \"PE\" && simulator == \"CuReSim\") && \\\n    (meta.seqtype == 'RNA' || (meta.seqtype == 'DNA' && 'dna2dna'.matches(params.mapmode) ))",
        "stub": ""
    },
    "convertReadCoordinates": {
        "name_process": "convertReadCoordinates",
        "string_process": "\nprocess convertReadCoordinates {\n  label 'groovy'\n  echo true\n  tag{simmeta.subMap(['species','version'])}\n\n\n  input:\n    set val(simmeta), file(ref), file(reads), val(refmeta), file(fai) from readsForCoordinateConversion.combine(genomeIndicesForReadCoordinateConversion)\n\n  output:\n    set val(outmeta), file('*.fq.gz') into convertedCoordinatesReads\n\n  when:\n    simmeta.seqtype == 'RNA' && 'rna2dna'.matches(params.mapmode) \\\n    && simmeta.species == refmeta.species && simmeta.version == refmeta.version\n\n          \n                                            \n                                            \n\n  script:\n  out1 = reads[0].name.replace('.1.fq.gz','.R1.fq.gz')\n  out2 = reads[1].name.replace('.2.fq.gz','.R2.fq.gz')\n  outmeta = [:]\n  outmeta.putAll(simmeta)\n  outmeta.coordinates = 'DNA'\n  \"\"\"\n  tct_rnf.groovy \\\n    --genome-index ${fai} \\\n    --transcriptome ${ref} \\\n    --in-forward ${reads[0]} --in-reverse ${reads[1]} \\\n    --out-forward ${out1} --out-reverse ${out2}\n  \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "  out1 = reads[0].name.replace('.1.fq.gz','.R1.fq.gz')\n  out2 = reads[1].name.replace('.2.fq.gz','.R2.fq.gz')\n  outmeta = [:]\n  outmeta.putAll(simmeta)\n  outmeta.coordinates = 'DNA'\n  \"\"\"\n  tct_rnf.groovy \\\n    --genome-index ${fai} \\\n    --transcriptome ${ref} \\\n    --in-forward ${reads[0]} --in-reverse ${reads[1]} \\\n    --out-forward ${out1} --out-reverse ${out2}\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "readsForCoordinateConversion",
            "genomeIndicesForReadCoordinateConversion"
        ],
        "nb_inputs": 2,
        "outputs": [
            "convertedCoordinatesReads"
        ],
        "nb_outputs": 1,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "label 'groovy'",
            "echo true",
            "tag{simmeta.subMap(['species','version'])}"
        ],
        "when": "simmeta.seqtype == 'RNA' && 'rna2dna'.matches(params.mapmode) \\\n    && simmeta.species == refmeta.species && simmeta.version == refmeta.version",
        "stub": ""
    },
    "mapReads": {
        "name_process": "mapReads",
        "string_process": "\nprocess mapReads {\n  maxForks 1\n  tag { \"${mapper.tool}@${mapper.version} ${reads} params:${par.label}\" }\n  container { \"${mapper.container}\" }\n              \n  input:\n     set val(mapper), val(reads), val(mode), val(par) from indices.combine(readsChn).combine(mapModesChannel).combine(mappersParamsChannel)\n                                               \n\n  when:\n    mapper.tool == par.tool && mapper.version.matches(par.version.join('|')) && mapper.containsKey(mode) && mode.matches(par.mode)\n            \n  exec:\n                                                                                 \n                   \n                                                                              \n    def binding = [task: task.clone(), reads: reads, ref: \"blah\"]\n                                 \n                                                                                              \n                                                     \n            \n    if(mode in mapper.templates) {                            \n                                                                                                      \n      println mapper.\"${mode}\" == true ? \"${mode}/${mapper.tool}.sh\" : \"${mode}/${mapper.${mode}}\"\n    } else {                                   \n                                                          \n      println resolveScriptVariables(mapper.\"${mode}\", binding)\n    }\n}",
        "nb_lignes_process": 28,
        "string_script": "    def binding = [task: task.clone(), reads: reads, ref: \"blah\"]\n                                 \n                                                                                              \n                                                     \n            \n    if(mode in mapper.templates) {                            \n                                                                                                      \n      println mapper.\"${mode}\" == true ? \"${mode}/${mapper.tool}.sh\" : \"${mode}/${mapper.${mode}}\"\n    } else {                                   \n                                                          \n      println resolveScriptVariables(mapper.\"${mode}\", binding)\n    }",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "indices",
            "readsChn",
            "mapModesChannel",
            "mappersParamsChannel"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "maxForks 1",
            "tag { \"${mapper.tool}@${mapper.version} ${reads} params:${par.label}\" }",
            "container { \"${mapper.container}\" }"
        ],
        "when": "mapper.tool == par.tool && mapper.version.matches(par.version.join('|')) && mapper.containsKey(mode) && mode.matches(par.mode)",
        "stub": ""
    },
    "basicMappingStats": {
        "name_process": "basicMappingStats",
        "string_process": "\nprocess basicMappingStats {\n              \n  label 'samtools'\n  tag {\"${meta.target.seqtype}@${meta.target.species}@${meta.target.version} << ${meta.query.nreads}@${meta.query.seqtype}; ${meta.mapper.tool}@${meta.mapper.version}@${meta.params.label}\"}\n\n  input:\n    tuple val(meta), file(ref), file(fai), file(samOrBam) from  mappedReadsWithTrace\n\n  output:\n     tuple val(meta), file(ref), file(fai), file(samOrBam), stdout into mappedWithFlagstats\n\n  script:\n  \"\"\"\n  samtools flagstat --output-fmt json ${samOrBam}\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  samtools flagstat --output-fmt json ${samOrBam}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "mappedReadsWithTrace"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mappedWithFlagstats"
        ],
        "nb_outputs": 1,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "label 'samtools'",
            "tag {\"${meta.target.seqtype}@${meta.target.species}@${meta.target.version} << ${meta.query.nreads}@${meta.query.seqtype}; ${meta.mapper.tool}@${meta.mapper.version}@${meta.params.label}\"}"
        ],
        "when": "",
        "stub": ""
    },
    "evaluateAlignmentsRNF": {
        "name_process": "evaluateAlignmentsRNF",
        "string_process": "\nprocess evaluateAlignmentsRNF {\n  label 'groovy'\n                                                                                                        \n               \n                                                                                                                                                                              \n                                                  \n                                                                                           \n  tag {\"${meta.target.seqtype}@${meta.target.species}@${meta.target.version} << ${meta.query.nreads}@${meta.query.seqtype}; ${meta.mapper.tool}@${meta.mapper.version}@${meta.params.label}\"}\n\n  input:\n    set val(meta), file(ref), file(fai), file(samOrBam) from mappedWithFlagstats2.simulated\n\n  output:\n     set val(meta), file ('*.json') into evaluatedAlignmentsRNF\n                                                                                              \n\n          \n  script:\n                                           \n                                \n                                                                           \n                                                                  \n  \"\"\"\n  set -eo pipefail\n  samtools view ${samOrBam} \\\n  | eval_rnf.groovy \\\n      --allowed-delta ${params.allowedDelta} \\\n      --faidx ${fai} \\\n      --output summary.json\n  \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "  \"\"\"\n  set -eo pipefail\n  samtools view ${samOrBam} \\\n  | eval_rnf.groovy \\\n      --allowed-delta ${params.allowedDelta} \\\n      --faidx ${fai} \\\n      --output summary.json\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "mappedWithFlagstats2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "evaluatedAlignmentsRNF"
        ],
        "nb_outputs": 1,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "label 'groovy'",
            "tag {\"${meta.target.seqtype}@${meta.target.species}@${meta.target.version} << ${meta.query.nreads}@${meta.query.seqtype}; ${meta.mapper.tool}@${meta.mapper.version}@${meta.params.label}\"}"
        ],
        "when": "",
        "stub": ""
    },
    "renderReport": {
        "name_process": "renderReport",
        "string_process": "\nprocess renderReport {\n  tag {\"Render ${Rmd}\"}\n  label 'rrender'\n  label 'report'\n  stageInMode 'copy'\n  cache false                                                             \n\n  input:\n    file(Rmd) from Channel.fromPath(\"$baseDir/report/report.Rmd\")\n    tuple file('allstats.json'), file('runmetapart.json') from resultsJsonChannel\n\n  output:\n    file 'allstats.json'\n    file '*'\n\n\n  when:\n    !(workflow.profile.contains('CI'))                         \n\n  script:\n  \"\"\"\n  #!/usr/bin/env Rscript\n\n  library(rmarkdown)\n  library(rticles)\n  library(bookdown)\n  library(tidyverse)\n  library(jsonlite)\n  library(kableExtra)\n\n  rmarkdown::render(\"${Rmd}\")\n  \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "  \"\"\"\n  #!/usr/bin/env Rscript\n\n  library(rmarkdown)\n  library(rticles)\n  library(bookdown)\n  library(tidyverse)\n  library(jsonlite)\n  library(kableExtra)\n\n  rmarkdown::render(\"${Rmd}\")\n  \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "Rscript",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "resultsJsonChannel"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "tag {\"Render ${Rmd}\"}",
            "label 'rrender'",
            "label 'report'",
            "stageInMode 'copy'",
            "cache false"
        ],
        "when": "!(workflow.profile.contains('CI'))",
        "stub": ""
    },
    "index": {
        "name_process": "index",
        "string_process": "\nprocess index {\n  memory '100.MB'\n  tag { \"${mapper.container}\" }\n  container { \"${mapper.container}\" }\n  echo true\n\n  input:\n    val mapper from mappersChannel\n\n  output:\n    val mapper into indices\n\n  exec:\n                                                                               \n    def ref = 'reference/path.fa'\n    def binding = [ref: ref, task: task.clone()]\n                                                                                            \n  script:\n    if('index' in mapper.templates) {                             \n      template mapper.index == true ? \"index/${mapper.tool}.sh\" : \"index/${mapper.index}\"\n    } else {                                    \n      resolveScriptVariables(mapper.index, binding)\n    }\n}",
        "nb_lignes_process": 23,
        "string_script": "    def ref = 'reference/path.fa'\n    def binding = [ref: ref, task: task.clone()]\n                                                                                            \n  script:\n    if('index' in mapper.templates) {                             \n      template mapper.index == true ? \"index/${mapper.tool}.sh\" : \"index/${mapper.index}\"\n    } else {                                    \n      resolveScriptVariables(mapper.index, binding)\n    }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "mappersChannel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "indices"
        ],
        "nb_outputs": 1,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "memory '100.MB'",
            "tag { \"${mapper.container}\" }",
            "container { \"${mapper.container}\" }",
            "echo true"
        ],
        "when": "",
        "stub": ""
    },
    "pull_container": {
        "name_process": "pull_container",
        "string_process": "\nprocess pull_container {\n  tag { remote }\n  maxForks 1\n  publishDir \"${params.singularitydir}\"\n  echo true\n\ninput:\n  val(remote) from mapperContainers.mix(Channel.from(containers)).unique()\n\noutput:\n  file(img)\n\nscript:\nimg = scache.simpleName(remote)\n\"\"\"\nsingularity pull --name ${img} docker://${Escape.path(remote)}\n\"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "img = scache.simpleName(remote)\n\"\"\"\nsingularity pull --name ${img} docker://${Escape.path(remote)}\n\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "IMG M",
            "Singularity Hub"
        ],
        "tools_url": [
            "https://bio.tools/img_m",
            "https://bio.tools/singularity_hub"
        ],
        "tools_dico": [
            {
                "name": "IMG M",
                "uri": "https://bio.tools/img_m",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0797",
                            "term": "Comparative genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffolding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profiling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Functional profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Feature expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene transcription profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The integrated microbial genomes and metagenomes (IMG/M) system provides support for comparative analysis of microbial community aggregate genomes (metagenomes) in a comprehensive integrated context.",
                "homepage": "http://img.jgi.doe.gov/cgi-bin/m/main.cgi"
            },
            {
                "name": "Singularity Hub",
                "uri": "https://bio.tools/singularity_hub",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3524",
                            "term": "Simulation experiment"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Framework to build and deploy Singularity containers for mobility of compute, and the singularity-python software with novel metrics for assessing reproducibility of such containers.",
                "homepage": "https://singularity-hub.org/"
            }
        ],
        "inputs": [
            "mapperContainers"
        ],
        "nb_inputs": 1,
        "outputs": [
            "img"
        ],
        "nb_outputs": 1,
        "name_workflow": "csiro-crop-informatics__repset",
        "directive": [
            "tag { remote }",
            "maxForks 1",
            "publishDir \"${params.singularitydir}\"",
            "echo true"
        ],
        "when": "",
        "stub": ""
    }
}
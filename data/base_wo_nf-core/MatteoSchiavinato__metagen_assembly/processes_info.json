{
    "remove_host_reads": {
        "name_process": "remove_host_reads",
        "string_process": "\nprocess remove_host_reads {\n\n  executor = \"local\"\n  cpus = params.threads\n\n  publishDir \"${params.output_dir}/filt_reads\", mode: \"copy\"\n\n  input:\n    tuple val(sample_id), val(read_type), file(fasta) from Minimap\n\n  output:\n    tuple val(sample_id), val(read_type), file(\"${sample_id}.${read_type}.no_host.fasta\") into NoHost\n    file \"${sample_id}.${read_type}.no_host.fasta\"  into NoHost_count\n\n  script:\n    \"\"\"\n    ${MINIMAP2} \\\n    -H \\\n    -k ${params.minimap_kmer_size} \\\n    -d host_genome.mm2_index \\\n    -a \\\n    -t ${params.threads} \\\n    -x map-pb \\\n    ${params.host_genome_seq} \\\n    ${fasta} | \\\n    ${SAMTOOLS} fasta \\\n    -@ ${params.threads} \\\n    -f 0x4 -F 0x0100 \\\n    - \\\n    > ${sample_id}.${read_type}.no_host.fasta \\\n\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    ${MINIMAP2} \\\n    -H \\\n    -k ${params.minimap_kmer_size} \\\n    -d host_genome.mm2_index \\\n    -a \\\n    -t ${params.threads} \\\n    -x map-pb \\\n    ${params.host_genome_seq} \\\n    ${fasta} | \\\n    ${SAMTOOLS} fasta \\\n    -@ ${params.threads} \\\n    -f 0x4 -F 0x0100 \\\n    - \\\n    > ${sample_id}.${read_type}.no_host.fasta \\\n\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Minimap"
        ],
        "nb_inputs": 1,
        "outputs": [
            "NoHost",
            "NoHost_count"
        ],
        "nb_outputs": 2,
        "name_workflow": "MatteoSchiavinato__metagen_assembly",
        "directive": [
            "executor = \"local\"",
            "cpus = params.threads",
            "publishDir \"${params.output_dir}/filt_reads\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "count_reads_wo_host": {
        "name_process": "count_reads_wo_host",
        "string_process": "\nprocess count_reads_wo_host {\n\n  executor = \"local\"\n  cpus = 1\n\n  publishDir \"${params.output_dir}/statistics\", mode: \"copy\"\n\n  input:\n    file all_fastas from NoHost_count.collect()\n\n  output:\n    path \"no_host.read_counts.tsv\"\n\n  script:\n    \"\"\"\n    for k in ${all_fastas}\n    do\n      NAME=\\$(echo \\${k} | cut -d \".\" -f 1) &&\n      ${BIOAWK} \\\n      -c fastx \\\n      -v x=\\${NAME} \\\n      '{totseq+=1; totlen+=length(\\$seq); } END {print x\"\\\\t\"totseq\"\\\\t\"totlen\"\\\\t\"totlen/totseq}' \\${k}\n    done \\\n    > no_host.read_counts.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    for k in ${all_fastas}\n    do\n      NAME=\\$(echo \\${k} | cut -d \".\" -f 1) &&\n      ${BIOAWK} \\\n      -c fastx \\\n      -v x=\\${NAME} \\\n      '{totseq+=1; totlen+=length(\\$seq); } END {print x\"\\\\t\"totseq\"\\\\t\"totlen\"\\\\t\"totlen/totseq}' \\${k}\n    done \\\n    > no_host.read_counts.tsv\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "NoHost_count"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MatteoSchiavinato__metagen_assembly",
        "directive": [
            "executor = \"local\"",
            "cpus = 1",
            "publishDir \"${params.output_dir}/statistics\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "remove_human_reads": {
        "name_process": "remove_human_reads",
        "string_process": "\nprocess remove_human_reads {\n\n  executor = \"local\"\n  cpus = params.threads\n\n  publishDir \"${params.output_dir}/filt_reads\", mode: \"copy\"\n\n  input:\n    tuple val(sample_id), val(read_type), file(fasta) from NoHost\n\n  output:\n    tuple val(sample_id), val(read_type), file(\"${sample_id}.${read_type}.no_host.no_human.fasta\") into NoHuman_canu\n    file \"${sample_id}.${read_type}.no_host.no_human.fasta\" into NoHuman_count\n\n  script:\n  \"\"\"\n  ${MINIMAP2} \\\n  -H \\\n  -k ${params.minimap_kmer_size} \\\n  -d human_genome.mm2_index \\\n  -a \\\n  -t ${params.threads} \\\n  -x map-pb \\\n  ${params.human_genome_seq} \\\n  ${fasta} | \\\n  ${SAMTOOLS} fasta \\\n  -@ ${params.threads} \\\n  -f 0x4 -F 0x0100 \\\n  - \\\n  > ${sample_id}.${read_type}.no_host.no_human.fasta\n\n  \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "  \"\"\"\n  ${MINIMAP2} \\\n  -H \\\n  -k ${params.minimap_kmer_size} \\\n  -d human_genome.mm2_index \\\n  -a \\\n  -t ${params.threads} \\\n  -x map-pb \\\n  ${params.human_genome_seq} \\\n  ${fasta} | \\\n  ${SAMTOOLS} fasta \\\n  -@ ${params.threads} \\\n  -f 0x4 -F 0x0100 \\\n  - \\\n  > ${sample_id}.${read_type}.no_host.no_human.fasta\n\n  \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "NoHost"
        ],
        "nb_inputs": 1,
        "outputs": [
            "NoHuman_canu",
            "NoHuman_count"
        ],
        "nb_outputs": 2,
        "name_workflow": "MatteoSchiavinato__metagen_assembly",
        "directive": [
            "executor = \"local\"",
            "cpus = params.threads",
            "publishDir \"${params.output_dir}/filt_reads\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "count_reads_wo_human": {
        "name_process": "count_reads_wo_human",
        "string_process": "\nprocess count_reads_wo_human {\n\n  executor = \"local\"\n  cpus = 1\n\n  publishDir \"${params.output_dir}/statistics\", mode: \"copy\"\n\n  input:\n    file all_fastas from NoHuman_count.collect()\n\n  output:\n    path \"no_host.no_human.read_counts.tsv\"\n\n  script:\n    \"\"\"\n    for k in ${all_fastas}\n    do\n      NAME=\\$(echo \\${k} | cut -d \".\" -f 1) &&\n      ${BIOAWK} \\\n      -c fastx \\\n      -v x=\\${NAME} \\\n      '{totseq+=1; totlen+=length(\\$seq); } END {print x\"\\\\t\"totseq\"\\\\t\"totlen\"\\\\t\"totlen/totseq}' \\${k}\n    done \\\n    > no_host.no_human.read_counts.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    for k in ${all_fastas}\n    do\n      NAME=\\$(echo \\${k} | cut -d \".\" -f 1) &&\n      ${BIOAWK} \\\n      -c fastx \\\n      -v x=\\${NAME} \\\n      '{totseq+=1; totlen+=length(\\$seq); } END {print x\"\\\\t\"totseq\"\\\\t\"totlen\"\\\\t\"totlen/totseq}' \\${k}\n    done \\\n    > no_host.no_human.read_counts.tsv\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "NoHuman_count"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "MatteoSchiavinato__metagen_assembly",
        "directive": [
            "executor = \"local\"",
            "cpus = 1",
            "publishDir \"${params.output_dir}/statistics\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "canu_assembly": {
        "name_process": "canu_assembly",
        "string_process": "\nprocess canu_assembly {\n\n  executor = 'slurm'\n  module = ['gnuplot/5.2.8-gcc-9.1.0-2dqwfce']\n  clusterOptions = \"-N 1 --ntasks-per-node ${params.threads} --partition mem_0096 --qos mem_0096 --account p71579\"\n\n  publishDir \"${params.output_dir}/assembly/canu\", mode: \"copy\"\n\n  input:\n    tuple val(sample_id), val(read_type), file(fasta) from NoHuman_canu\n\n  output:\n    tuple val(sample_id), \\\n    val(read_type), \\\n    file(\"${sample_id}.${read_type}.contigs.fasta\"), \\\n    file(\"${sample_id}.${read_type}.unassembled.fasta\"), \\\n    file(\"${sample_id}.${read_type}.report\") \\\n    into Canu_out\n    file(\"${sample_id}.${read_type}.contigs.fasta\") into Canu_quast\n    tuple val(sample_id), val(read_type), file(\"${sample_id}.${read_type}.contigs.fasta\") into Contigs_plot\n    tuple val(sample_id), val(read_type), file(\"${sample_id}.${read_type}.contigs.fasta\") into Contigs_prokka\n\n  script:\n    \"\"\"\n    ${CANU} \\\n    -d . \\\n    -p ${sample_id}.${read_type} \\\n    useGrid=false \\\n    genomeSize=${params.avg_genome_size} \\\n    maxThreads=${params.threads} \\\n    maxMemory=${params.max_mem} \\\n    merylThreads=${params.meryl_threads} \\\n    merylMemory=${params.meryl_memory} \\\n    corMinCoverage=${params.cor_min_coverage} \\\n    corOutCoverage=${params.cor_out_coverage} \\\n    minReadLength=${params.min_read_length} \\\n    minOverlapLength=${params.min_overlap_length} \\\n    corOvlErrorRate=${params.cor_ovl_error_rate} \\\n    obtOvlErrorRate=${params.obt_ovl_error_rate} \\\n    utgOvlErrorRate=${params.utg_ovl_error_rate} \\\n    corErrorRate=${params.cor_error_rate} \\\n    obtErrorRate=${params.obt_error_rate} \\\n    utgErrorRate=${params.utg_error_rate} \\\n    cnsErrorRate=${params.cns_error_rate} \\\n    MMapMerSize=${params.minimap_kmer_size} \\\n    ovlMerSize=${params.kmer_size} \\\n    mhapMerSize=${params.kmer_size} \\\n    maxInputCoverage=${params.max_input_coverage} \\\n    utgReAlign=true \\\n    MhapSensitivity=high \\\n    -pacbio-hifi ${fasta}\n    \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    \"\"\"\n    ${CANU} \\\n    -d . \\\n    -p ${sample_id}.${read_type} \\\n    useGrid=false \\\n    genomeSize=${params.avg_genome_size} \\\n    maxThreads=${params.threads} \\\n    maxMemory=${params.max_mem} \\\n    merylThreads=${params.meryl_threads} \\\n    merylMemory=${params.meryl_memory} \\\n    corMinCoverage=${params.cor_min_coverage} \\\n    corOutCoverage=${params.cor_out_coverage} \\\n    minReadLength=${params.min_read_length} \\\n    minOverlapLength=${params.min_overlap_length} \\\n    corOvlErrorRate=${params.cor_ovl_error_rate} \\\n    obtOvlErrorRate=${params.obt_ovl_error_rate} \\\n    utgOvlErrorRate=${params.utg_ovl_error_rate} \\\n    corErrorRate=${params.cor_error_rate} \\\n    obtErrorRate=${params.obt_error_rate} \\\n    utgErrorRate=${params.utg_error_rate} \\\n    cnsErrorRate=${params.cns_error_rate} \\\n    MMapMerSize=${params.minimap_kmer_size} \\\n    ovlMerSize=${params.kmer_size} \\\n    mhapMerSize=${params.kmer_size} \\\n    maxInputCoverage=${params.max_input_coverage} \\\n    utgReAlign=true \\\n    MhapSensitivity=high \\\n    -pacbio-hifi ${fasta}\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "NoHuman_canu"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sample_id",
            "read_type",
            "Canu_out",
            "Canu_quast",
            "Contigs_plot",
            "Contigs_prokka"
        ],
        "nb_outputs": 6,
        "name_workflow": "MatteoSchiavinato__metagen_assembly",
        "directive": [
            "executor = 'slurm'",
            "module = ['gnuplot/5.2.8-gcc-9.1.0-2dqwfce']",
            "clusterOptions = \"-N 1 --ntasks-per-node ${params.threads} --partition mem_0096 --qos mem_0096 --account p71579\"",
            "publishDir \"${params.output_dir}/assembly/canu\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "metaquast": {
        "name_process": "metaquast",
        "string_process": "\nprocess metaquast {\n\n    executor = 'local'\n    cpus = params.threads\n\n    publishDir \"${params.output_dir}/assembly\", mode: \"copy\"\n\n  input:\n    file all_fastas from Canu_quast.collect()\n\n  output:\n    path 'metaquast', hidden:false, type:\"dir\" into Metaquast\n\n  script:\n  \"\"\"\n    ${METAQUAST} \\\n    --output-dir metaquast \\\n    --contig-thresholds ${params.contig_thresholds} \\\n    --min-alignment ${params.quast_min_alignment} \\\n    --min-contig ${params.min_read_length} \\\n    --threads ${params.threads} \\\n    --min-identity ${params.min_identity} \\\n    ${all_fastas}\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  \"\"\"\n    ${METAQUAST} \\\n    --output-dir metaquast \\\n    --contig-thresholds ${params.contig_thresholds} \\\n    --min-alignment ${params.quast_min_alignment} \\\n    --min-contig ${params.min_read_length} \\\n    --threads ${params.threads} \\\n    --min-identity ${params.min_identity} \\\n    ${all_fastas}\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Canu_quast"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Metaquast"
        ],
        "nb_outputs": 1,
        "name_workflow": "MatteoSchiavinato__metagen_assembly",
        "directive": [
            "executor = 'local'",
            "cpus = params.threads",
            "publishDir \"${params.output_dir}/assembly\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "get_ctg_lengths": {
        "name_process": "get_ctg_lengths",
        "string_process": "\nprocess get_ctg_lengths {\n\n  executor = \"local\"\n  cpus = 1\n\n  publishDir \"${params.output_dir}/assembly/canu\", mode: \"copy\"\n\n  input:\n    tuple val(sample_id), val(read_type), file(contigs_fasta) from Contigs_plot\n\n  output:\n    tuple val(sample_id), val(read_type), file(\"${sample_id}.${read_type}.contig_lengths.tsv\") into Contig_lengths\n\n  script:\n    \"\"\"\n    ${BIOAWK} \\\n    -c fastx \\\n    '{print \\$name\"\\\\t\"length(\\$seq)}' \\\n    ${contigs_fasta} \\\n    > ${sample_id}.${read_type}.contig_lengths.tsv \\\n\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    ${BIOAWK} \\\n    -c fastx \\\n    '{print \\$name\"\\\\t\"length(\\$seq)}' \\\n    ${contigs_fasta} \\\n    > ${sample_id}.${read_type}.contig_lengths.tsv \\\n\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Contigs_plot"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Contig_lengths"
        ],
        "nb_outputs": 1,
        "name_workflow": "MatteoSchiavinato__metagen_assembly",
        "directive": [
            "executor = \"local\"",
            "cpus = 1",
            "publishDir \"${params.output_dir}/assembly/canu\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "plot_ctg_lengths": {
        "name_process": "plot_ctg_lengths",
        "string_process": "\nprocess plot_ctg_lengths {\n\n  executor = \"local\"\n  cpus = params.threads\n\n  publishDir \"${params.output_dir}/assembly/canu\", mode: \"copy\"\n\n  input:\n    tuple val(sample_id), val(read_type), file(contig_lengths) from Contig_lengths\n\n  output:\n    file \"${sample_id}.${read_type}.contig_lengths.png\" into Ctg_len_pngs\n    file \"${sample_id}.${read_type}.contig_lengths.svg\" into Ctg_len_svgs\n\n  script:\n    \"\"\"\n    ${RSCRIPT} \\\n    ${params.source_dir}/plot-contig-lengths.Rscript \\\n    ${contig_lengths} \\\n    ${sample_id} \\\n    ${read_type} \\\n    100000 \\\n\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    ${RSCRIPT} \\\n    ${params.source_dir}/plot-contig-lengths.Rscript \\\n    ${contig_lengths} \\\n    ${sample_id} \\\n    ${read_type} \\\n    100000 \\\n\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Contig_lengths"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Ctg_len_pngs",
            "Ctg_len_svgs"
        ],
        "nb_outputs": 2,
        "name_workflow": "MatteoSchiavinato__metagen_assembly",
        "directive": [
            "executor = \"local\"",
            "cpus = params.threads",
            "publishDir \"${params.output_dir}/assembly/canu\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "run_prokka": {
        "name_process": "run_prokka",
        "string_process": "\nprocess run_prokka {\n\n  executor = \"local\"\n  cpus = params.threads\n\n  publishDir \"${params.output_dir}/pangenome/prokka\", mode: \"copy\"\n\n  input:\n    tuple val(sample_id), val(read_type), file(fasta) from Contigs_prokka\n\n  output:\n    tuple val(sample_id), path(\"${sample_id}\", type:\"dir\") into Prokka_out\n    file \"${sample_id}/${sample_id}.gff\" into Prokka_gff\n\n  script:\n    \"\"\"\n    ${PROKKA} \\\n    --metagenome \\\n    --cpus ${params.threads} \\\n    --kingdom ${params.kingdom} \\\n    --outdir ${sample_id} \\\n    --prefix ${sample_id} \\\n    --addgenes \\\n    --addmrna \\\n    --gffver 3 \\\n    --evalue ${params.evalue} \\\n    --mincontiglen ${params.min_contig_len} \\\n    ${fasta} \\\n\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    ${PROKKA} \\\n    --metagenome \\\n    --cpus ${params.threads} \\\n    --kingdom ${params.kingdom} \\\n    --outdir ${sample_id} \\\n    --prefix ${sample_id} \\\n    --addgenes \\\n    --addmrna \\\n    --gffver 3 \\\n    --evalue ${params.evalue} \\\n    --mincontiglen ${params.min_contig_len} \\\n    ${fasta} \\\n\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Contigs_prokka"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Prokka_out",
            "Prokka_gff"
        ],
        "nb_outputs": 2,
        "name_workflow": "MatteoSchiavinato__metagen_assembly",
        "directive": [
            "executor = \"local\"",
            "cpus = params.threads",
            "publishDir \"${params.output_dir}/pangenome/prokka\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "run_roary": {
        "name_process": "run_roary",
        "string_process": "\nprocess run_roary {\n\n  executor = \"local\"\n  cpus = params.threads\n\n  publishDir \"${params.output_dir}/pangenome\", mode: \"copy\"\n\n  input:\n    file all_gffs from Prokka_gff.collect()\n\n  output:\n    path \"roary\" into Roary_out\n\n  script:\n    \"\"\"\n    ${ROARY} \\\n    -p ${params.threads} \\\n    -f roary \\\n    -e -n \\\n    -i ${params.min_core_identity} \\\n    -cd ${params.perc_core_isolates} \\\n    -b ${BLASTP} \\\n    -c ${MCL} \\\n    -d ${MCXDEBLAST} \\\n    -m ${MAKEBLASTDB} \\\n    -g ${params.max_num_clusters} \\\n    -r \\\n    -v \\\n    ${all_gffs} \\\n\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    ${ROARY} \\\n    -p ${params.threads} \\\n    -f roary \\\n    -e -n \\\n    -i ${params.min_core_identity} \\\n    -cd ${params.perc_core_isolates} \\\n    -b ${BLASTP} \\\n    -c ${MCL} \\\n    -d ${MCXDEBLAST} \\\n    -m ${MAKEBLASTDB} \\\n    -g ${params.max_num_clusters} \\\n    -r \\\n    -v \\\n    ${all_gffs} \\\n\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "Prokka_gff"
        ],
        "nb_inputs": 1,
        "outputs": [
            "Roary_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "MatteoSchiavinato__metagen_assembly",
        "directive": [
            "executor = \"local\"",
            "cpus = params.threads",
            "publishDir \"${params.output_dir}/pangenome\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    }
}
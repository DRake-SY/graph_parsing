{
    "finalizeFAUSTAnnotationData": {
        "name_process": "finalizeFAUSTAnnotationData",
        "string_process": "\nprocess finalizeFAUSTAnnotationData {\n                     \n    container \"rglab/faust-nextflow:0.5.0\"\n    label \"standard_mem_and_cpu\"\n    publishDir \"FAUST_RESULTS\", mode: \"copy\", overwrite: true\n\n    input:\n               \n              \n                   \n        file metadata_directory name \"./faustData/metaData\"\n        file samples_data_directory name \"./faustData/sampleData\"\n        file experimental_units_directory name \"./faustData/expUnitData/\"\n                             \n        val depth_score_threshold\n        val selection_quantile\n        val plotting_device\n                       \n        val project_path\n        val debug_flag\n\n\n    output:\n        path \"*faustData/metaData\", emit: metadata_directory\n        path \"*faustData/sampleData\", emit: samples_data_directory\n        path \"*faustData/gateData\", emit: gate_data_directory\n        path \"*faustData/plotData/*\", emit: plot_data_directory\n        path \"*faustData/expUnitData/*\", emit: experimental_units_directory\n\n    script:\n        \"\"\"\n        R --no-save <<code\n        # ----------------------------------------------------------------------\n        # -------------------------\n        # Environment\n        # -------------------------\n        library(\"faust\")\n\n        # -------------------------\n        # FAUST Data\n        # -------------------------\n        # Plot data needs to be created because it doesn't exist\n        plot_data_directory <- file.path(normalizePath(\"${project_path}\"),\n                                         \"faustData\",\n                                         \"plotData\")\n        plot_data_histograms_directory <- file.path(plot_data_directory,\n                                                    \"histograms\")\n        dir.create(plot_data_directory)\n        dir.create(plot_data_histograms_directory)\n        # -------------------------\n        # Run FAUST\n        # -------------------------\n        faust:::.selectChannels(depthScoreThreshold=${depth_score_threshold},\n                                selectionQuantile=${selection_quantile},\n                                projectPath=\"${project_path}\")\n        # -----\n        faust:::.reconcileAnnotationBoundaries(projectPath=\"${project_path}\",\n                                               debugFlag=${debug_flag})\n        # -----\n        faust:::.superviseReconciliation(projectPath=\"${project_path}\",\n                                         debugFlag=${debug_flag})\n        # -----\n        faust:::.mkAnnMats(projectPath=\"${project_path}\")\n        # -----\n        faust:::.plotScoreLines(depthScoreThreshold=${depth_score_threshold},\n                                selectionQuantile=${selection_quantile},\n                                plottingDevice=\"${plotting_device}\",\n                                projectPath=\"${project_path}\")\n        # -----\n        faust:::.plotMarkerHistograms(plottingDevice=\"${plotting_device}\",\n                                      projectPath=\"${project_path}\")\n        # -----\n        faust:::.plotSampleHistograms(plottingDevice=\"${plotting_device}\",\n                                      projectPath=\"${project_path}\")\n\n        # ----------------------------------------------------------------------\n        code\n        \"\"\"\n}",
        "nb_lignes_process": 78,
        "string_script": "        \"\"\"\n        R --no-save <<code\n        # ----------------------------------------------------------------------\n        # -------------------------\n        # Environment\n        # -------------------------\n        library(\"faust\")\n\n        # -------------------------\n        # FAUST Data\n        # -------------------------\n        # Plot data needs to be created because it doesn't exist\n        plot_data_directory <- file.path(normalizePath(\"${project_path}\"),\n                                         \"faustData\",\n                                         \"plotData\")\n        plot_data_histograms_directory <- file.path(plot_data_directory,\n                                                    \"histograms\")\n        dir.create(plot_data_directory)\n        dir.create(plot_data_histograms_directory)\n        # -------------------------\n        # Run FAUST\n        # -------------------------\n        faust:::.selectChannels(depthScoreThreshold=${depth_score_threshold},\n                                selectionQuantile=${selection_quantile},\n                                projectPath=\"${project_path}\")\n        # -----\n        faust:::.reconcileAnnotationBoundaries(projectPath=\"${project_path}\",\n                                               debugFlag=${debug_flag})\n        # -----\n        faust:::.superviseReconciliation(projectPath=\"${project_path}\",\n                                         debugFlag=${debug_flag})\n        # -----\n        faust:::.mkAnnMats(projectPath=\"${project_path}\")\n        # -----\n        faust:::.plotScoreLines(depthScoreThreshold=${depth_score_threshold},\n                                selectionQuantile=${selection_quantile},\n                                plottingDevice=\"${plotting_device}\",\n                                projectPath=\"${project_path}\")\n        # -----\n        faust:::.plotMarkerHistograms(plottingDevice=\"${plotting_device}\",\n                                      projectPath=\"${project_path}\")\n        # -----\n        faust:::.plotSampleHistograms(plottingDevice=\"${plotting_device}\",\n                                      projectPath=\"${project_path}\")\n\n        # ----------------------------------------------------------------------\n        code\n        \"\"\"",
        "nb_lignes_script": 47,
        "language_script": "bash",
        "tools": [
            "tcode"
        ],
        "tools_url": [
            "https://bio.tools/tcode"
        ],
        "tools_dico": [
            {
                "name": "tcode",
                "uri": "https://bio.tools/tcode",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0914",
                                "term": "Codon usage data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2887",
                                "term": "Nucleic acid sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2160",
                                "term": "Fickett testcode plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_1276",
                                "term": "Nucleic acid features"
                            }
                        ]
                    }
                ],
                "description": "Identify protein-coding regions using Fickett TESTCODE statistic.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/tcode.html"
            }
        ],
        "inputs": [
            "metadata_directory",
            "samples_data_directory",
            "experimental_units_directory",
            "depth_score_threshold",
            "selection_quantile",
            "plotting_device",
            "project_path",
            "debug_flag"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "gfinak__faust_nextflow",
        "directive": [
            "container \"rglab/faust-nextflow:0.5.0\"",
            "label \"standard_mem_and_cpu\"",
            "publishDir \"FAUST_RESULTS\", mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "prepareFAUSTData": {
        "name_process": "prepareFAUSTData",
        "string_process": "\nprocess prepareFAUSTData {\n                     \n    container \"434514085730.dkr.ecr.us-west-2.amazonaws.com/faust:0.5.0\"\n    label \"high_memory\"\n\n    input:\n               \n        file input_gating_set_directory_channel\n        file active_channels_path_channel\n        file channel_bounds_path_channel\n        file supervised_list_path_channel\n                   \n              \n                             \n        val imputation_hierarchy\n        val experimental_unit\n        val starting_cell_population\n                       \n        val project_path\n        val debug_flag\n\n    output:\n        path \"*faustData/metaData\", emit: metadata_directory\n        path \"*faustData/sampleData\", emit: samples_data_directory\n        path \"*faustData/expUnitData/*\", emit: experimental_unit_directories\n\n    script:\n        \"\"\"\n        R --no-save <<code\n        # ----------------------------------------------------------------------\n        # -------------------------\n        # Environment\n        # -------------------------\n        library(\"flowWorkspace\")\n        library(\"faust\")\n\n        # -------------------------\n        # FAUST Data\n        # -------------------------\n        gating_set_parent_directory_path <- dirname(\"${input_gating_set_directory_channel}\")\n        gating_set <- try(flowWorkspace::load_gs(\"${input_gating_set_directory_channel}\"))\n        if(inherits(gating_set,\"try-error\")){\n            converted_gating_set_directory_path <- file.path(gating_set_parent_directory_path, \"converted_gating_set\")\n            convert_legacy_gs(\"${input_gating_set_directory_channel}\", converted_gating_set_directory_path)\n            gating_set <- try(flowWorkspace::load_gs(converted_gating_set_directory_path))\n        }\n        active_channels_rds_object<-NULL\n        channel_bounds_rds_object<-NULL\n        supervised_list_rds_object<-NULL\n        if(file.exists(\"${active_channels_path_channel}\")){\n            active_channels_rds_object <- readRDS(\"${active_channels_path_channel}\")\n        }\n        if(file.exists(\"${channel_bounds_path_channel}\")){\n            channel_bounds_rds_object <- readRDS(\"${channel_bounds_path_channel}\")\n        }\n        if(file.exists(\"${supervised_list_path_channel}\")){\n            supervised_list_rds_object <- readRDS(\"${supervised_list_path_channel}\")\n        }\n        if(is.null(active_channels_rds_object)){\n            active_channels_rds_object<-flowWorkspace::markernames(gating_set)\n        }else if(is.na(active_channels_rds_object)){\n            active_channels_rds_object<-flowWorkspace::markernames(gating_set)\n        }\n\n        if(is.null(channel_bounds_rds_object)){\n            channel_bounds_rds_object<-\"\"\n        }else if(is.na(channel_bounds_rds_object)){\n            channel_bounds_rds_object<-\"\"\n        }\n\n        if(is.null(supervised_list_rds_object)){\n            supervised_list_rds_object<-NA\n        }\n\n        gating_set_p_data <- flowWorkspace::pData(gating_set)\n        sample_names_rds_object <- flowWorkspace::sampleNames(gating_set)\n\n        saveRDS(gating_set_p_data, \"./gating_set_p_data.rds\")\n        saveRDS(sample_names_rds_object, \"./sample_names.rds\")\n\n        project_path <- normalizePath(\"${project_path}\")\n\n        # -------------------------\n        # Run FAUST\n        # -------------------------\n        faust:::.initializeFaustDataDir(activeChannels=active_channels_rds_object,\n                                        channelBounds=channel_bounds_rds_object,\n                                        supervisedList=supervised_list_rds_object,\n                                        startingCellPop=\"${starting_cell_population}\",\n                                        projectPath=project_path)\n        # -----\n        faust:::.constructAnalysisMap(gspData=gating_set_p_data,\n                                      sampNames=sample_names_rds_object,\n                                      imputationHierarchy=\"${imputation_hierarchy}\",\n                                      experimentalUnit=\"${experimental_unit}\",\n                                      projectPath=project_path,\n                                      debugFlag=${debug_flag})\n        # -----\n        faust:::.extractDataFromGS(gs=gating_set,\n                                   activeChannels=active_channels_rds_object,\n                                   startingCellPop=\"${starting_cell_population}\",\n                                   projectPath=project_path,\n                                   debugFlag=\"${debug_flag}\")\n        # -----\n        faust:::.processChannelBounds(channelBounds=channel_bounds_rds_object,\n                                      samplesInExp=sample_names_rds_object,\n                                      projectPath=\"${project_path}\",\n                                      debugFlag=${debug_flag})\n        # -----\n        faust:::.makeRestrictionMatrices(channelBounds=channel_bounds_rds_object,\n                                         samplesInExp=sample_names_rds_object,\n                                         projectPath=\"${project_path}\",\n                                         debugFlag=${debug_flag})\n        # -----\n        faust:::.prepareExperimentalUnits(projectPath=\"${project_path}\")\n\n        # ----------------------------------------------------------------------\n        code\n        \"\"\"\n}",
        "nb_lignes_process": 119,
        "string_script": "        \"\"\"\n        R --no-save <<code\n        # ----------------------------------------------------------------------\n        # -------------------------\n        # Environment\n        # -------------------------\n        library(\"flowWorkspace\")\n        library(\"faust\")\n\n        # -------------------------\n        # FAUST Data\n        # -------------------------\n        gating_set_parent_directory_path <- dirname(\"${input_gating_set_directory_channel}\")\n        gating_set <- try(flowWorkspace::load_gs(\"${input_gating_set_directory_channel}\"))\n        if(inherits(gating_set,\"try-error\")){\n            converted_gating_set_directory_path <- file.path(gating_set_parent_directory_path, \"converted_gating_set\")\n            convert_legacy_gs(\"${input_gating_set_directory_channel}\", converted_gating_set_directory_path)\n            gating_set <- try(flowWorkspace::load_gs(converted_gating_set_directory_path))\n        }\n        active_channels_rds_object<-NULL\n        channel_bounds_rds_object<-NULL\n        supervised_list_rds_object<-NULL\n        if(file.exists(\"${active_channels_path_channel}\")){\n            active_channels_rds_object <- readRDS(\"${active_channels_path_channel}\")\n        }\n        if(file.exists(\"${channel_bounds_path_channel}\")){\n            channel_bounds_rds_object <- readRDS(\"${channel_bounds_path_channel}\")\n        }\n        if(file.exists(\"${supervised_list_path_channel}\")){\n            supervised_list_rds_object <- readRDS(\"${supervised_list_path_channel}\")\n        }\n        if(is.null(active_channels_rds_object)){\n            active_channels_rds_object<-flowWorkspace::markernames(gating_set)\n        }else if(is.na(active_channels_rds_object)){\n            active_channels_rds_object<-flowWorkspace::markernames(gating_set)\n        }\n\n        if(is.null(channel_bounds_rds_object)){\n            channel_bounds_rds_object<-\"\"\n        }else if(is.na(channel_bounds_rds_object)){\n            channel_bounds_rds_object<-\"\"\n        }\n\n        if(is.null(supervised_list_rds_object)){\n            supervised_list_rds_object<-NA\n        }\n\n        gating_set_p_data <- flowWorkspace::pData(gating_set)\n        sample_names_rds_object <- flowWorkspace::sampleNames(gating_set)\n\n        saveRDS(gating_set_p_data, \"./gating_set_p_data.rds\")\n        saveRDS(sample_names_rds_object, \"./sample_names.rds\")\n\n        project_path <- normalizePath(\"${project_path}\")\n\n        # -------------------------\n        # Run FAUST\n        # -------------------------\n        faust:::.initializeFaustDataDir(activeChannels=active_channels_rds_object,\n                                        channelBounds=channel_bounds_rds_object,\n                                        supervisedList=supervised_list_rds_object,\n                                        startingCellPop=\"${starting_cell_population}\",\n                                        projectPath=project_path)\n        # -----\n        faust:::.constructAnalysisMap(gspData=gating_set_p_data,\n                                      sampNames=sample_names_rds_object,\n                                      imputationHierarchy=\"${imputation_hierarchy}\",\n                                      experimentalUnit=\"${experimental_unit}\",\n                                      projectPath=project_path,\n                                      debugFlag=${debug_flag})\n        # -----\n        faust:::.extractDataFromGS(gs=gating_set,\n                                   activeChannels=active_channels_rds_object,\n                                   startingCellPop=\"${starting_cell_population}\",\n                                   projectPath=project_path,\n                                   debugFlag=\"${debug_flag}\")\n        # -----\n        faust:::.processChannelBounds(channelBounds=channel_bounds_rds_object,\n                                      samplesInExp=sample_names_rds_object,\n                                      projectPath=\"${project_path}\",\n                                      debugFlag=${debug_flag})\n        # -----\n        faust:::.makeRestrictionMatrices(channelBounds=channel_bounds_rds_object,\n                                         samplesInExp=sample_names_rds_object,\n                                         projectPath=\"${project_path}\",\n                                         debugFlag=${debug_flag})\n        # -----\n        faust:::.prepareExperimentalUnits(projectPath=\"${project_path}\")\n\n        # ----------------------------------------------------------------------\n        code\n        \"\"\"",
        "nb_lignes_script": 91,
        "language_script": "bash",
        "tools": [
            "tcode"
        ],
        "tools_url": [
            "https://bio.tools/tcode"
        ],
        "tools_dico": [
            {
                "name": "tcode",
                "uri": "https://bio.tools/tcode",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0914",
                                "term": "Codon usage data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2887",
                                "term": "Nucleic acid sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2160",
                                "term": "Fickett testcode plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_1276",
                                "term": "Nucleic acid features"
                            }
                        ]
                    }
                ],
                "description": "Identify protein-coding regions using Fickett TESTCODE statistic.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/tcode.html"
            }
        ],
        "inputs": [
            "input_gating_set_directory_channel",
            "active_channels_path_channel",
            "channel_bounds_path_channel",
            "supervised_list_path_channel",
            "imputation_hierarchy",
            "experimental_unit",
            "starting_cell_population",
            "project_path",
            "debug_flag"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "gfinak__faust_nextflow",
        "directive": [
            "container \"434514085730.dkr.ecr.us-west-2.amazonaws.com/faust:0.5.0\"",
            "label \"high_memory\""
        ],
        "when": "",
        "stub": ""
    },
    "clusterExperimentalUnitsWithScamp": {
        "name_process": "clusterExperimentalUnitsWithScamp",
        "string_process": "\nprocess clusterExperimentalUnitsWithScamp {\n                     \n    container \"rglab/faust-nextflow:0.5.0\"\n    label \"large_cpu\"\n                \n\n    input:\n               \n              \n                   \n        file metadata_directory name \"./faustData/metaData\"\n        file samples_data_directory name \"./faustData/sampleData\"\n        file experimental_unit_directory name \"./faustData/expUnitData/\"\n        file gate_data_directory name \"./faustData/gateData\"\n                             \n        val starting_cell_population\n        val name_occurrence_number\n        val plotting_device\n                       \n        val project_path\n        val debug_flag\n        val thread_number\n        val seed_value\n\n    output:\n        path \"*faustData/metaData\", emit: metadata_directory\n        path \"*faustData/sampleData/*\", emit: samples_data_directory\n        path \"*faustData/expUnitData/*\", emit: experimental_units_directory\n\n    script:\n        \"\"\"\n        R --no-save <<code\n        # ----------------------------------------------------------------------\n        # -------------------------\n        # Environment\n        # -------------------------\n        library(\"faust\")\n\n        # list.dirs(\"./faustData/expUnitData\")\n        # list.files(\"./faustData/expUnitData/s1\")\n        # list.files(\"./faustData/expUnitData/s2\")\n\n        # -------------------------\n        # FAUST Data\n        # -------------------------\n        number_of_scamp_iterations <- 1\n\n        experimental_unit_name <- basename(\"${experimental_unit_directory}\")\n        # experimental_unit_expressions_file_path <- file.path(\"${experimental_unit_directory}\", \"expUnitExprs.rds\")\n        # experimental_unit_restrictions_file_path <- file.path(\"${experimental_unit_directory}\", \"expUnitRes.rds\")\n        restriction_list_file_path <- file.path(normalizePath(\"${project_path}\"),\n                                                \"faustData\",\n                                                \"gateData\",\n                                                paste0(gsub(\"[[:punct:]]\",\"\",\"${starting_cell_population}\"), \"_resList.rds\"))\n        restriction_list_rds_object <- readRDS(restriction_list_file_path)\n        selected_channels_file_path <- file.path(normalizePath(\"${project_path}\"),\n                                                 \"faustData\",\n                                                 \"gateData\",\n                                                 paste0(gsub(\"[[:punct:]]\",\"\",\"${starting_cell_population}\"), \"_selectedChannels.rds\"))\n        selected_channels_rds_object <- readRDS(selected_channels_file_path)\n\n        # -------------------------\n        # Run FAUST\n        # -------------------------\n        faust:::.clusterExpUnitWithScamp(expUnit=experimental_unit_name,\n                                         resList=restriction_list_rds_object,\n                                         selectedChannels=selected_channels_rds_object,\n                                         numScampIter=number_of_scamp_iterations,\n                                         threadNum=${thread_number},\n                                         seedValue=${seed_value},\n                                         projectPath=\"${project_path}\",\n                                         debugFlag=${debug_flag},\n                                         densitySubSampleThreshold=1e6,\n                                         densitySubSampleSize=1e6,\n                                         densitySubSampleIterations=1)\n\n        # # clusterExperimentalUnitsWithScampTesting\n        # list.files(\"./faustData/sampleData/s1\")\n        # list.files(\"./faustData/sampleData/s2\")\n\n        # -------------------------\n        # Post FAUST\n        # -------------------------\n        # Needs to remove all un-needed sample directories in order to only\n        # return the correct sample files with the correct mutated data\n        experimental_unit_to_sample_lookup_file_path <- file.path(normalizePath(\"${project_path}\"),\n                                                                                \"faustData\",\n                                                                                \"expUnitData\",\n                                                                                experimental_unit_name,\n                                                                                \"expUnitToSampleLookup.rds\")\n        print(experimental_unit_to_sample_lookup_file_path)\n        all_experimental_unit_samples <- names(table(readRDS(experimental_unit_to_sample_lookup_file_path)))\n        print(all_experimental_unit_samples)\n        sample_data_directory_path <- file.path(normalizePath(\"${project_path}\"),\n                                                              \"faustData\",\n                                                              \"sampleData\")\n        print(sample_data_directory_path)\n        all_sample_directories <- list.dirs(sample_data_directory_path, recursive=FALSE)\n        all_sample_directory_names <- basename(all_sample_directories)\n        print(all_sample_directory_names)\n        directory_names_to_delete <- setdiff(all_sample_directory_names, all_experimental_unit_samples)\n        print(directory_names_to_delete)\n        directory_paths_to_delete <- file.path(normalizePath(\"${project_path}\"),\n                                               \"faustData\",\n                                               \"sampleData\",\n                                               directory_names_to_delete)\n        print(directory_paths_to_delete)\n        unlink(directory_paths_to_delete, recursive=TRUE)\n        list.dirs(sample_data_directory_path)\n\n        # ----------------------------------------------------------------------\n        code\n        \"\"\"\n}",
        "nb_lignes_process": 113,
        "string_script": "        \"\"\"\n        R --no-save <<code\n        # ----------------------------------------------------------------------\n        # -------------------------\n        # Environment\n        # -------------------------\n        library(\"faust\")\n\n        # list.dirs(\"./faustData/expUnitData\")\n        # list.files(\"./faustData/expUnitData/s1\")\n        # list.files(\"./faustData/expUnitData/s2\")\n\n        # -------------------------\n        # FAUST Data\n        # -------------------------\n        number_of_scamp_iterations <- 1\n\n        experimental_unit_name <- basename(\"${experimental_unit_directory}\")\n        # experimental_unit_expressions_file_path <- file.path(\"${experimental_unit_directory}\", \"expUnitExprs.rds\")\n        # experimental_unit_restrictions_file_path <- file.path(\"${experimental_unit_directory}\", \"expUnitRes.rds\")\n        restriction_list_file_path <- file.path(normalizePath(\"${project_path}\"),\n                                                \"faustData\",\n                                                \"gateData\",\n                                                paste0(gsub(\"[[:punct:]]\",\"\",\"${starting_cell_population}\"), \"_resList.rds\"))\n        restriction_list_rds_object <- readRDS(restriction_list_file_path)\n        selected_channels_file_path <- file.path(normalizePath(\"${project_path}\"),\n                                                 \"faustData\",\n                                                 \"gateData\",\n                                                 paste0(gsub(\"[[:punct:]]\",\"\",\"${starting_cell_population}\"), \"_selectedChannels.rds\"))\n        selected_channels_rds_object <- readRDS(selected_channels_file_path)\n\n        # -------------------------\n        # Run FAUST\n        # -------------------------\n        faust:::.clusterExpUnitWithScamp(expUnit=experimental_unit_name,\n                                         resList=restriction_list_rds_object,\n                                         selectedChannels=selected_channels_rds_object,\n                                         numScampIter=number_of_scamp_iterations,\n                                         threadNum=${thread_number},\n                                         seedValue=${seed_value},\n                                         projectPath=\"${project_path}\",\n                                         debugFlag=${debug_flag},\n                                         densitySubSampleThreshold=1e6,\n                                         densitySubSampleSize=1e6,\n                                         densitySubSampleIterations=1)\n\n        # # clusterExperimentalUnitsWithScampTesting\n        # list.files(\"./faustData/sampleData/s1\")\n        # list.files(\"./faustData/sampleData/s2\")\n\n        # -------------------------\n        # Post FAUST\n        # -------------------------\n        # Needs to remove all un-needed sample directories in order to only\n        # return the correct sample files with the correct mutated data\n        experimental_unit_to_sample_lookup_file_path <- file.path(normalizePath(\"${project_path}\"),\n                                                                                \"faustData\",\n                                                                                \"expUnitData\",\n                                                                                experimental_unit_name,\n                                                                                \"expUnitToSampleLookup.rds\")\n        print(experimental_unit_to_sample_lookup_file_path)\n        all_experimental_unit_samples <- names(table(readRDS(experimental_unit_to_sample_lookup_file_path)))\n        print(all_experimental_unit_samples)\n        sample_data_directory_path <- file.path(normalizePath(\"${project_path}\"),\n                                                              \"faustData\",\n                                                              \"sampleData\")\n        print(sample_data_directory_path)\n        all_sample_directories <- list.dirs(sample_data_directory_path, recursive=FALSE)\n        all_sample_directory_names <- basename(all_sample_directories)\n        print(all_sample_directory_names)\n        directory_names_to_delete <- setdiff(all_sample_directory_names, all_experimental_unit_samples)\n        print(directory_names_to_delete)\n        directory_paths_to_delete <- file.path(normalizePath(\"${project_path}\"),\n                                               \"faustData\",\n                                               \"sampleData\",\n                                               directory_names_to_delete)\n        print(directory_paths_to_delete)\n        unlink(directory_paths_to_delete, recursive=TRUE)\n        list.dirs(sample_data_directory_path)\n\n        # ----------------------------------------------------------------------\n        code\n        \"\"\"",
        "nb_lignes_script": 82,
        "language_script": "bash",
        "tools": [
            "tcode"
        ],
        "tools_url": [
            "https://bio.tools/tcode"
        ],
        "tools_dico": [
            {
                "name": "tcode",
                "uri": "https://bio.tools/tcode",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0914",
                                "term": "Codon usage data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2887",
                                "term": "Nucleic acid sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2160",
                                "term": "Fickett testcode plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_1276",
                                "term": "Nucleic acid features"
                            }
                        ]
                    }
                ],
                "description": "Identify protein-coding regions using Fickett TESTCODE statistic.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/tcode.html"
            }
        ],
        "inputs": [
            "metadata_directory",
            "samples_data_directory",
            "experimental_unit_directory",
            "gate_data_directory",
            "starting_cell_population",
            "name_occurrence_number",
            "plotting_device",
            "project_path",
            "debug_flag",
            "thread_number",
            "seed_value"
        ],
        "nb_inputs": 11,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "gfinak__faust_nextflow",
        "directive": [
            "container \"rglab/faust-nextflow:0.5.0\"",
            "label \"large_cpu\""
        ],
        "when": "",
        "stub": ""
    },
    "gateScampClusters": {
        "name_process": "gateScampClusters",
        "string_process": "\nprocess gateScampClusters {\n                     \n    container \"rglab/faust-nextflow:0.5.0\"\n    label \"standard_mem_and_cpu\"\n    publishDir \"FAUST_RESULTS\", mode: \"copy\", overwrite: true\n                \n\n    input:\n               \n              \n                   \n        file metadata_directory name \"./faustData/metaData\"\n        file samples_data_directory name \"./faustData/sampleData/\"\n        file gate_data_directory name \"./faustData/gateData\"\n                             \n              \n                       \n        val project_path\n        val debug_flag\n\n    output:\n        path \"./faustData/metaData/colNameMap.rds\", emit: faust_column_name_map\n        path \"./faustData/faustCountMatrix.rds\", emit: faust_count_matrix\n        path \"./faustData/exhaustiveFaustCountMatrix.rds\", emit: exhaustive_faust_count_matrix\n        path \"*faustData/sampleData\", emit: samples_data_directory\n\n    script:\n        \"\"\"\n        R --no-save <<code\n        # ----------------------------------------------------------------------\n        # -------------------------\n        # Environment\n        # -------------------------\n        library(\"faust\")\n\n        # -------------------------\n        # FAUST Data\n        # -------------------------\n        # N/A\n        # gateScampClustersTesting\n        list.dirs()\n        list.files()\n        list.dirs(\"./faustData/sampleData\")\n        list.files(\"./faustData/sampleData/s1\")\n        list.files(\"./faustData/sampleData/s2\")\n\n\n        # -------------------------\n        # Run FAUST\n        # -------------------------\n        faust:::.gateScampClusters(projectPath=\"${project_path}\",\n                                   debugFlag=${debug_flag})\n        faust:::.getFaustCountMatrix(projectPath=\"${project_path}\",\n                                     debugFlag=${debug_flag})\n\n\n        faust:::.gateAllScampClusters(\n            projectPath = \"${project_path}\",\n            debugFlag = ${debug_flag}\n        )\n\n        faust:::.getExhaustiveFaustCountMatrix(\n            projectPath = \"${project_path}\",\n            debugFlag = ${debug_flag}\n        )\n        # ----------------------------------------------------------------------\n        code\n        \"\"\"\n}",
        "nb_lignes_process": 68,
        "string_script": "        \"\"\"\n        R --no-save <<code\n        # ----------------------------------------------------------------------\n        # -------------------------\n        # Environment\n        # -------------------------\n        library(\"faust\")\n\n        # -------------------------\n        # FAUST Data\n        # -------------------------\n        # N/A\n        # gateScampClustersTesting\n        list.dirs()\n        list.files()\n        list.dirs(\"./faustData/sampleData\")\n        list.files(\"./faustData/sampleData/s1\")\n        list.files(\"./faustData/sampleData/s2\")\n\n\n        # -------------------------\n        # Run FAUST\n        # -------------------------\n        faust:::.gateScampClusters(projectPath=\"${project_path}\",\n                                   debugFlag=${debug_flag})\n        faust:::.getFaustCountMatrix(projectPath=\"${project_path}\",\n                                     debugFlag=${debug_flag})\n\n\n        faust:::.gateAllScampClusters(\n            projectPath = \"${project_path}\",\n            debugFlag = ${debug_flag}\n        )\n\n        faust:::.getExhaustiveFaustCountMatrix(\n            projectPath = \"${project_path}\",\n            debugFlag = ${debug_flag}\n        )\n        # ----------------------------------------------------------------------\n        code\n        \"\"\"",
        "nb_lignes_script": 40,
        "language_script": "bash",
        "tools": [
            "tcode"
        ],
        "tools_url": [
            "https://bio.tools/tcode"
        ],
        "tools_dico": [
            {
                "name": "tcode",
                "uri": "https://bio.tools/tcode",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0914",
                                "term": "Codon usage data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2887",
                                "term": "Nucleic acid sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2160",
                                "term": "Fickett testcode plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_1276",
                                "term": "Nucleic acid features"
                            }
                        ]
                    }
                ],
                "description": "Identify protein-coding regions using Fickett TESTCODE statistic.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/tcode.html"
            }
        ],
        "inputs": [
            "metadata_directory",
            "samples_data_directory",
            "gate_data_directory",
            "project_path",
            "debug_flag"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "gfinak__faust_nextflow",
        "directive": [
            "container \"rglab/faust-nextflow:0.5.0\"",
            "label \"standard_mem_and_cpu\"",
            "publishDir \"FAUST_RESULTS\", mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "growAnnotationForest": {
        "name_process": "growAnnotationForest",
        "string_process": "\nprocess growAnnotationForest {\n                     \n    container \"rglab/faust-nextflow:0.5.0\"\n    label \"large_cpu\"\n\n    input:\n               \n        file active_channels_path_channel\n                   \n        file metadata_directory name \"./faustData/metaData\"\n        file experimental_unit_directory name \"./faustData/expUnitData/\"\n                             \n        val starting_cell_population\n        val thread_number\n        val seed_value\n                       \n        val project_path\n        val debug_flag\n\n    output:\n        path \"*faustData/expUnitData/*\", emit: experimental_unit_directory\n\n    script:\n        \"\"\"\n        R --no-save <<code\n        # ----------------------------------------------------------------------\n        # -------------------------\n        # Environment\n        # -------------------------\n        library(\"faust\")\n\n        # -------------------------\n        # FAUST Data\n        # -------------------------\n\n        metadata_directory <- file.path(\"${project_path}\", \"faustData\", \"metaData\")\n        active_channels_rds_object <- readRDS(file.path(metadata_directory,\"activeChannels.rds\"))\n        sanitized_cell_pop_file_path <- file.path(metadata_directory, \"sanitizedCellPopStr.rds\")\n        sanitized_cell_pop_rds_object <- readRDS(sanitized_cell_pop_file_path)\n        analysis_map_file_path <- file.path(metadata_directory, \"analysisMap.rds\")\n\n        experimental_unit_name <- basename(\"${experimental_unit_directory}\")\n\n\n        # -------------------------\n        # Run FAUST\n        # -------------------------\n        faust:::.growForestForExpUnit(activeChannels=active_channels_rds_object,\n                                      expUnit=experimental_unit_name,\n                                      analysisMap=analysis_map_file_path,\n                                      rootPop=sanitized_cell_pop_rds_object,\n                                      numIter=${params.number_of_iterations},\n                                      debugFlag=${debug_flag},\n                                      threadNum=${thread_number},\n                                      seedValue=${seed_value},\n                                      projectPath=\"${project_path}\",\n                                      densitySubSampleThreshold=1e6,\n                                      densitySubSampleSize=1e6,\n                                      densitySubSampleIterations=1)\n\n        # ----------------------------------------------------------------------\n        code\n        \"\"\"\n}",
        "nb_lignes_process": 63,
        "string_script": "        \"\"\"\n        R --no-save <<code\n        # ----------------------------------------------------------------------\n        # -------------------------\n        # Environment\n        # -------------------------\n        library(\"faust\")\n\n        # -------------------------\n        # FAUST Data\n        # -------------------------\n\n        metadata_directory <- file.path(\"${project_path}\", \"faustData\", \"metaData\")\n        active_channels_rds_object <- readRDS(file.path(metadata_directory,\"activeChannels.rds\"))\n        sanitized_cell_pop_file_path <- file.path(metadata_directory, \"sanitizedCellPopStr.rds\")\n        sanitized_cell_pop_rds_object <- readRDS(sanitized_cell_pop_file_path)\n        analysis_map_file_path <- file.path(metadata_directory, \"analysisMap.rds\")\n\n        experimental_unit_name <- basename(\"${experimental_unit_directory}\")\n\n\n        # -------------------------\n        # Run FAUST\n        # -------------------------\n        faust:::.growForestForExpUnit(activeChannels=active_channels_rds_object,\n                                      expUnit=experimental_unit_name,\n                                      analysisMap=analysis_map_file_path,\n                                      rootPop=sanitized_cell_pop_rds_object,\n                                      numIter=${params.number_of_iterations},\n                                      debugFlag=${debug_flag},\n                                      threadNum=${thread_number},\n                                      seedValue=${seed_value},\n                                      projectPath=\"${project_path}\",\n                                      densitySubSampleThreshold=1e6,\n                                      densitySubSampleSize=1e6,\n                                      densitySubSampleIterations=1)\n\n        # ----------------------------------------------------------------------\n        code\n        \"\"\"",
        "nb_lignes_script": 39,
        "language_script": "bash",
        "tools": [
            "tcode"
        ],
        "tools_url": [
            "https://bio.tools/tcode"
        ],
        "tools_dico": [
            {
                "name": "tcode",
                "uri": "https://bio.tools/tcode",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0914",
                                "term": "Codon usage data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2887",
                                "term": "Nucleic acid sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2160",
                                "term": "Fickett testcode plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_1276",
                                "term": "Nucleic acid features"
                            }
                        ]
                    }
                ],
                "description": "Identify protein-coding regions using Fickett TESTCODE statistic.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/tcode.html"
            }
        ],
        "inputs": [
            "active_channels_path_channel",
            "metadata_directory",
            "experimental_unit_directory",
            "starting_cell_population",
            "thread_number",
            "seed_value",
            "project_path",
            "debug_flag"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "gfinak__faust_nextflow",
        "directive": [
            "container \"rglab/faust-nextflow:0.5.0\"",
            "label \"large_cpu\""
        ],
        "when": "",
        "stub": ""
    },
    "plotPhenotypeFilter": {
        "name_process": "plotPhenotypeFilter",
        "string_process": "\nprocess plotPhenotypeFilter {\n                     \n    container \"rglab/faust-nextflow:0.5.0\"\n    label \"standard_mem_and_cpu\"\n    publishDir \"FAUST_RESULTS\", mode: \"copy\", overwrite: true\n\n    input:\n               \n              \n                   \n        file metadata_directory name \"./faustData/metaData\"\n        file experimental_unit_directory name \"./faustData/expUnitData/\"\n                             \n        val name_occurrence_number\n        val plotting_device\n                       \n        val project_path\n        val debug_flag\n\n    output:\n        path \"*faustData/metaData\", emit: metadata_directory\n        path \"*faustData/plotData/*\", emit: plot_data_directory\n        path \"*faustData/expUnitData/*\", emit: experimental_unit_directory\n\n    script:\n        \"\"\"\n        R --no-save <<code\n        # ----------------------------------------------------------------------\n        # -------------------------\n        # Environment\n        # -------------------------\n        library(\"faust\")\n        library(\"fdrtool\")\n\n        # -------------------------\n        # FAUST Data\n        # -------------------------\n        # Need to get all the experimental unit names\n        experimental_unit_data_directory_path <- file.path(\"${project_path}\", \"faustData\", \"expUnitData\")\n        unique_experimental_unit_directory_paths <- list.dirs(experimental_unit_data_directory_path, recursive=FALSE)\n        unique_experimental_unit_names <- basename(unique_experimental_unit_directory_paths)\n\n        # Plot data needs to be created because it doesn't exist\n        plot_data_directory <- file.path(normalizePath(\"${project_path}\"),\n                                         \"faustData\",\n                                         \"plotData\")\n        dir.create(plot_data_directory)\n\n        # -------------------------\n        # Run FAUST\n        # -------------------------\n        # # ---\n        # generate scamp files\n        # ---\n        clusterNames <- c()\n        for (experimentalUnit in unique_experimental_unit_names) {\n            expUnitLabels <- readRDS(file.path(normalizePath(\"${project_path}\"),\n                                             \"faustData\",\n                                             \"expUnitData\",\n                                             experimentalUnit,\n                                             \"scampClusterLabels.rds\"))\n            clusterNames <- append(clusterNames,expUnitLabels)\n        }\n        nameSummary <- table(clusterNames)\n        saveRDS(nameSummary,\n                file.path(normalizePath(\"${project_path}\"),\n                          \"faustData\",\n                          \"metaData\",\n                          \"scampNameSummary.rds\"))\n\n        # ======================================================================\n        nameSummaryPlotDF <- data.frame(x=seq(max(nameSummary)),\n                                y=sapply(seq(max(nameSummary)),function(x){\n                                    length(which(nameSummary >= x))}))\n\n        .computeElbow <- function(phenoDF) {\n            if (nrow(phenoDF) < 4) {\n                #if a dataset has 3 or fewer samples, default to using all\n                #phenotypes from the scamp clusterings.\n                elbowLocation <- 1\n            }\n            else {\n                #dynamically estimate the elbow by projecting knots of the GCM\n                #of the distribution of phenotypes onto the line of\n                #observed phenotypes at 5th and 95th rows of the phenoDF\n                #trim the extremes to moderate the slopes.\n                lowerIndex <- max(2,ceiling(0.05*nrow(phenoDF)))\n                upperIndex <- min((nrow(phenoDF)-1),floor(0.95*nrow(phenoDF)))\n                elbowDF <- phenoDF[seq(lowerIndex,upperIndex),,drop=FALSE]\n                elbX2 <- elbowDF[nrow(elbowDF),\"x\"]\n                elbX1 <- elbowDF[1,\"x\"]\n                elbY2 <- elbowDF[nrow(elbowDF),\"y\"]\n                elbY1 <- elbowDF[1,\"y\"]\n                elbM <- (elbY2-elbY1)/(elbX2-elbX1)\n                elbC <- elbY1-(elbM * elbX1)\n                lineMin <- function(pt){\n                    return(abs(pt[2] - elbM*pt[1] - elbC)/sqrt(1+(elbM^2)))\n                }\n                gcmEst <- fdrtool::gcmlcm(\n                                       x=elbowDF[,\"x\", drop=TRUE],\n                                       y=elbowDF[,\"y\", drop=TRUE],\n                                       type=\"gcm\"\n                                   )\n                candElbow <- apply(cbind(gcmEst[[\"x.knots\"]],gcmEst[[\"y.knots\"]]),1,lineMin)\n                elbowLocation <- gcmEst[[\"x.knots\"]][which(candElbow==max(candElbow))[1]]\n            }\n            return(elbowLocation)\n        }\n        elbowLoc <- .computeElbow(nameSummaryPlotDF)\n\n        #use the automatic value.\n        clusterNames <- names(nameSummary[which(nameSummary >= elbowLoc)])\n        saveRDS(\n            elbowLoc,\n            file.path(normalizePath(\"${project_path}\"),\n                      \"faustData\",\n                      \"metaData\",\n                      \"phenotypeElbowValue.rds\")\n        )\n\n        if (${name_occurrence_number} > 0) {\n            #the user has set this value\n            clusterNames <- names(nameSummary[which(nameSummary >= ${name_occurrence_number})])\n            saveRDS(\n                ${name_occurrence_number},\n                file.path(normalizePath(\"${project_path}\"),\n                          \"faustData\",\n                          \"metaData\",\n                          \"phenotypeElbowValue.rds\")\n            )\n        }\n        saveRDS(clusterNames,\n                file.path(normalizePath(\"${project_path}\"),\n                          \"faustData\",\n                          \"metaData\",\n                          \"scampClusterNames.rds\"))\n\n        allClusterNames <- names(nameSummary[which(nameSummary >= 1)])\n        saveRDS(allClusterNames,\n               file.path(normalizePath(\"${project_path}\"),\n                         \"faustData\",\n                         \"metaData\",\n                          \"allScampClusterNames.rds\"))\n        # ======================================================================\n        # ---\n        faust:::.plotPhenotypeFilter(nameOccuranceNum=${name_occurrence_number},\n                                     plottingDevice=\"${plotting_device}\",\n                                     projectPath=\"${project_path}\")\n        # ----------------------------------------------------------------------\n        code\n        \"\"\"\n}",
        "nb_lignes_process": 151,
        "string_script": "        \"\"\"\n        R --no-save <<code\n        # ----------------------------------------------------------------------\n        # -------------------------\n        # Environment\n        # -------------------------\n        library(\"faust\")\n        library(\"fdrtool\")\n\n        # -------------------------\n        # FAUST Data\n        # -------------------------\n        # Need to get all the experimental unit names\n        experimental_unit_data_directory_path <- file.path(\"${project_path}\", \"faustData\", \"expUnitData\")\n        unique_experimental_unit_directory_paths <- list.dirs(experimental_unit_data_directory_path, recursive=FALSE)\n        unique_experimental_unit_names <- basename(unique_experimental_unit_directory_paths)\n\n        # Plot data needs to be created because it doesn't exist\n        plot_data_directory <- file.path(normalizePath(\"${project_path}\"),\n                                         \"faustData\",\n                                         \"plotData\")\n        dir.create(plot_data_directory)\n\n        # -------------------------\n        # Run FAUST\n        # -------------------------\n        # # ---\n        # generate scamp files\n        # ---\n        clusterNames <- c()\n        for (experimentalUnit in unique_experimental_unit_names) {\n            expUnitLabels <- readRDS(file.path(normalizePath(\"${project_path}\"),\n                                             \"faustData\",\n                                             \"expUnitData\",\n                                             experimentalUnit,\n                                             \"scampClusterLabels.rds\"))\n            clusterNames <- append(clusterNames,expUnitLabels)\n        }\n        nameSummary <- table(clusterNames)\n        saveRDS(nameSummary,\n                file.path(normalizePath(\"${project_path}\"),\n                          \"faustData\",\n                          \"metaData\",\n                          \"scampNameSummary.rds\"))\n\n        # ======================================================================\n        nameSummaryPlotDF <- data.frame(x=seq(max(nameSummary)),\n                                y=sapply(seq(max(nameSummary)),function(x){\n                                    length(which(nameSummary >= x))}))\n\n        .computeElbow <- function(phenoDF) {\n            if (nrow(phenoDF) < 4) {\n                #if a dataset has 3 or fewer samples, default to using all\n                #phenotypes from the scamp clusterings.\n                elbowLocation <- 1\n            }\n            else {\n                #dynamically estimate the elbow by projecting knots of the GCM\n                #of the distribution of phenotypes onto the line of\n                #observed phenotypes at 5th and 95th rows of the phenoDF\n                #trim the extremes to moderate the slopes.\n                lowerIndex <- max(2,ceiling(0.05*nrow(phenoDF)))\n                upperIndex <- min((nrow(phenoDF)-1),floor(0.95*nrow(phenoDF)))\n                elbowDF <- phenoDF[seq(lowerIndex,upperIndex),,drop=FALSE]\n                elbX2 <- elbowDF[nrow(elbowDF),\"x\"]\n                elbX1 <- elbowDF[1,\"x\"]\n                elbY2 <- elbowDF[nrow(elbowDF),\"y\"]\n                elbY1 <- elbowDF[1,\"y\"]\n                elbM <- (elbY2-elbY1)/(elbX2-elbX1)\n                elbC <- elbY1-(elbM * elbX1)\n                lineMin <- function(pt){\n                    return(abs(pt[2] - elbM*pt[1] - elbC)/sqrt(1+(elbM^2)))\n                }\n                gcmEst <- fdrtool::gcmlcm(\n                                       x=elbowDF[,\"x\", drop=TRUE],\n                                       y=elbowDF[,\"y\", drop=TRUE],\n                                       type=\"gcm\"\n                                   )\n                candElbow <- apply(cbind(gcmEst[[\"x.knots\"]],gcmEst[[\"y.knots\"]]),1,lineMin)\n                elbowLocation <- gcmEst[[\"x.knots\"]][which(candElbow==max(candElbow))[1]]\n            }\n            return(elbowLocation)\n        }\n        elbowLoc <- .computeElbow(nameSummaryPlotDF)\n\n        #use the automatic value.\n        clusterNames <- names(nameSummary[which(nameSummary >= elbowLoc)])\n        saveRDS(\n            elbowLoc,\n            file.path(normalizePath(\"${project_path}\"),\n                      \"faustData\",\n                      \"metaData\",\n                      \"phenotypeElbowValue.rds\")\n        )\n\n        if (${name_occurrence_number} > 0) {\n            #the user has set this value\n            clusterNames <- names(nameSummary[which(nameSummary >= ${name_occurrence_number})])\n            saveRDS(\n                ${name_occurrence_number},\n                file.path(normalizePath(\"${project_path}\"),\n                          \"faustData\",\n                          \"metaData\",\n                          \"phenotypeElbowValue.rds\")\n            )\n        }\n        saveRDS(clusterNames,\n                file.path(normalizePath(\"${project_path}\"),\n                          \"faustData\",\n                          \"metaData\",\n                          \"scampClusterNames.rds\"))\n\n        allClusterNames <- names(nameSummary[which(nameSummary >= 1)])\n        saveRDS(allClusterNames,\n               file.path(normalizePath(\"${project_path}\"),\n                         \"faustData\",\n                         \"metaData\",\n                          \"allScampClusterNames.rds\"))\n        # ======================================================================\n        # ---\n        faust:::.plotPhenotypeFilter(nameOccuranceNum=${name_occurrence_number},\n                                     plottingDevice=\"${plotting_device}\",\n                                     projectPath=\"${project_path}\")\n        # ----------------------------------------------------------------------\n        code\n        \"\"\"",
        "nb_lignes_script": 125,
        "language_script": "bash",
        "tools": [
            "tcode"
        ],
        "tools_url": [
            "https://bio.tools/tcode"
        ],
        "tools_dico": [
            {
                "name": "tcode",
                "uri": "https://bio.tools/tcode",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0914",
                                "term": "Codon usage data"
                            },
                            {
                                "uri": "http://edamontology.org/data_2887",
                                "term": "Nucleic acid sequence record"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2160",
                                "term": "Fickett testcode plot"
                            },
                            {
                                "uri": "http://edamontology.org/data_1276",
                                "term": "Nucleic acid features"
                            }
                        ]
                    }
                ],
                "description": "Identify protein-coding regions using Fickett TESTCODE statistic.",
                "homepage": "http://emboss.open-bio.org/rel/rel6/apps/tcode.html"
            }
        ],
        "inputs": [
            "metadata_directory",
            "experimental_unit_directory",
            "name_occurrence_number",
            "plotting_device",
            "project_path",
            "debug_flag"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "gfinak__faust_nextflow",
        "directive": [
            "container \"rglab/faust-nextflow:0.5.0\"",
            "label \"standard_mem_and_cpu\"",
            "publishDir \"FAUST_RESULTS\", mode: \"copy\", overwrite: true"
        ],
        "when": "",
        "stub": ""
    }
}
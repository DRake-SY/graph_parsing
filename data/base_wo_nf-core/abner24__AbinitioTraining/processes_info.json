{
    "split_maker_evidence": {
        "name_process": "split_maker_evidence",
        "string_process": "\nprocess split_maker_evidence {\n\n    tag \"${maker_evidence.baseName}\"\n    publishDir \"${params.outdir}\", mode: 'copy'\n    label 'AGAT'\n\n    input:\n    path maker_evidence\n\n    output:\n    path \"maker_results_noAbinitio_clean/mrna.gff\", emit: transcripts\n    path \"maker_results_noAbinitio_clean/*\", emit: all\n\n    script:\n    \"\"\"\n    agat_sp_separate_by_record_type.pl -g ${maker_evidence} -o maker_results_noAbinitio_clean\n    if test -f maker_results_noAbinitio_clean/mrna.gff && test -f maker_results_noAbinitio_clean/transcript.gff; then\n        agat_sp_merge_annotations.pl --gff maker_results_noAbinitio_clean/mrna.gff \\\\\n            --gff maker_results_noAbinitio_clean/transcript.gff --out merged_transcripts.gff\n        mv merged_transcripts.gff maker_results_noAbinitio_clean/mrna.gff\n    elif test -f maker_results_noAbinitio_clean/transcript.gff; then\n        cp maker_results_noAbinitio_clean/transcript.gff maker_results_noAbinitio_clean/mrna.gff\n    fi\n    \"\"\"\n                                                               \n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    agat_sp_separate_by_record_type.pl -g ${maker_evidence} -o maker_results_noAbinitio_clean\n    if test -f maker_results_noAbinitio_clean/mrna.gff && test -f maker_results_noAbinitio_clean/transcript.gff; then\n        agat_sp_merge_annotations.pl --gff maker_results_noAbinitio_clean/mrna.gff \\\\\n            --gff maker_results_noAbinitio_clean/transcript.gff --out merged_transcripts.gff\n        mv merged_transcripts.gff maker_results_noAbinitio_clean/mrna.gff\n    elif test -f maker_results_noAbinitio_clean/transcript.gff; then\n        cp maker_results_noAbinitio_clean/transcript.gff maker_results_noAbinitio_clean/mrna.gff\n    fi\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "maker_evidence"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "tag \"${maker_evidence.baseName}\"",
            "publishDir \"${params.outdir}\", mode: 'copy'",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "model_selection_by_AED": {
        "name_process": "model_selection_by_AED",
        "string_process": "\nprocess model_selection_by_AED {\n\n    tag \"${mrna_gff.baseName}\"\n    publishDir \"${params.outdir}/filter\", mode: 'copy'\n    label 'AGAT'\n\n    input:\n    path mrna_gff\n\n    output:\n    path \"codingGeneFeatures.filter.gff\", emit: selected_models\n\n    script:\n    \"\"\"\n    agat_sp_filter_feature_by_attribute_value.pl --gff ${mrna_gff} --value ${params.model_selection_value} -a _AED -t \">\" -o codingGeneFeatures.filter.gff\n    \"\"\"\n                                                                         \n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    agat_sp_filter_feature_by_attribute_value.pl --gff ${mrna_gff} --value ${params.model_selection_value} -a _AED -t \">\" -o codingGeneFeatures.filter.gff\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mrna_gff"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "tag \"${mrna_gff.baseName}\"",
            "publishDir \"${params.outdir}/filter\", mode: 'copy'",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "retain_longest_isoform": {
        "name_process": "retain_longest_isoform",
        "string_process": "\nprocess retain_longest_isoform {\n\n    tag \"${coding_gene_features_gff.baseName}\"\n    publishDir \"${params.outdir}/filter\", mode: 'copy'\n    label 'AGAT'\n\n    input:\n    path coding_gene_features_gff\n\n    output:\n    path \"codingGeneFeatures.filter.longest_cds.gff\", emit: longest_isoform\n\n    script:\n    \"\"\"\n    agat_sp_keep_longest_isoform.pl -f ${coding_gene_features_gff} -o codingGeneFeatures.filter.longest_cds.gff\n    \"\"\"\n                                                            \n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    agat_sp_keep_longest_isoform.pl -f ${coding_gene_features_gff} -o codingGeneFeatures.filter.longest_cds.gff\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "coding_gene_features_gff"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "tag \"${coding_gene_features_gff.baseName}\"",
            "publishDir \"${params.outdir}/filter\", mode: 'copy'",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "remove_incomplete_gene_models": {
        "name_process": "remove_incomplete_gene_models",
        "string_process": "\nprocess remove_incomplete_gene_models {\n\n    tag \"${coding_gene_features_gff.baseName}\"\n    publishDir \"${params.outdir}/filter\", mode: 'copy'\n    label 'AGAT'\n\n    input:\n    path coding_gene_features_gff\n    path genome_fasta\n\n    output:\n    path \"codingGeneFeatures.filter.longest_cds.complete.gff\", emit: complete_gene_models\n\n    script:\n    \"\"\"\n    agat_sp_filter_incomplete_gene_coding_models.pl --gff ${coding_gene_features_gff} \\\n        -f ${genome_fasta} -o codingGeneFeatures.filter.longest_cds.complete.gff\n    \"\"\"\n                                                                            \n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    agat_sp_filter_incomplete_gene_coding_models.pl --gff ${coding_gene_features_gff} \\\n        -f ${genome_fasta} -o codingGeneFeatures.filter.longest_cds.complete.gff\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "coding_gene_features_gff",
            "genome_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "tag \"${coding_gene_features_gff.baseName}\"",
            "publishDir \"${params.outdir}/filter\", mode: 'copy'",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_by_locus_distance": {
        "name_process": "filter_by_locus_distance",
        "string_process": "\nprocess filter_by_locus_distance {\n\n    tag \"${coding_gene_features_gff.baseName}\"\n    publishDir \"${params.outdir}/filter\", mode: 'copy'\n    label 'AGAT'\n\n    input:\n    path coding_gene_features_gff\n\n    output:\n    path \"codingGeneFeatures.filter.longest_cds.complete.good_distance.gff\", emit: distanced_models\n\n    script:\n    \"\"\"\n    agat_sp_filter_by_locus_distance.pl --gff ${coding_gene_features_gff} -d ${params.locus_distance} -o codingGeneFeatures.filter.longest_cds.complete.good_distance.gff\n    \"\"\"\n                                                                \n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    agat_sp_filter_by_locus_distance.pl --gff ${coding_gene_features_gff} -d ${params.locus_distance} -o codingGeneFeatures.filter.longest_cds.complete.good_distance.gff\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "coding_gene_features_gff"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "tag \"${coding_gene_features_gff.baseName}\"",
            "publishDir \"${params.outdir}/filter\", mode: 'copy'",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "extract_protein_sequence": {
        "name_process": "extract_protein_sequence",
        "string_process": "\nprocess extract_protein_sequence {\n\n    tag \"${gff_file.baseName}\"\n    label 'AGAT'\n\n    input:\n    path gff_file\n    path genome_fasta\n\n    output:\n    path \"${gff_file.baseName}_proteins.fasta\", emit: proteins\n\n    script:\n    \"\"\"\n    agat_sp_extract_sequences.pl -o ${gff_file.baseName}_proteins.fasta -f $genome_fasta \\\\\n        -p -cfs -cis -ct ${params.codon_table} --g $gff_file\n    \"\"\"\n                                                         \n\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    agat_sp_extract_sequences.pl -o ${gff_file.baseName}_proteins.fasta -f $genome_fasta \\\\\n        -p -cfs -cis -ct ${params.codon_table} --g $gff_file\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gff_file",
            "genome_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "tag \"${gff_file.baseName}\"",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "blast_makeblastdb": {
        "name_process": "blast_makeblastdb",
        "string_process": "\nprocess blast_makeblastdb {\n\n    tag \"${fasta_file.baseName} type: $dbtype\"\n    label 'Blast'\n\n    input:\n    path fasta_file\n\n    output:\n    path \"*.{phr,pin,psq}\"\n\n    script:\n    \"\"\"\n    makeblastdb -in $fasta_file -dbtype prot\n    \"\"\"\n\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    makeblastdb -in $fasta_file -dbtype prot\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fasta_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "tag \"${fasta_file.baseName} type: $dbtype\"",
            "label 'Blast'"
        ],
        "when": "",
        "stub": ""
    },
    "blast_recursive": {
        "name_process": "blast_recursive",
        "string_process": "\nprocess blast_recursive {\n\n    tag \"${fasta_file.baseName}\"\n    label 'Blast'\n\n    input:\n    path fasta_file\n    path blastdb\n\n    output:\n    path \"${fasta_file.baseName}_blast.tsv\"\n\n    script:\n    database = blastdb[0].toString() - ~/.p\\w\\w$/\n    \"\"\"\n    blastp -query $fasta_file -db ${database} -num_threads ${task.cpus} \\\\\n        -outfmt 6 -out ${fasta_file.baseName}_blast.tsv\n    \"\"\"\n\n}",
        "nb_lignes_process": 19,
        "string_script": "    database = blastdb[0].toString() - ~/.p\\w\\w$/\n    \"\"\"\n    blastp -query $fasta_file -db ${database} -num_threads ${task.cpus} \\\\\n        -outfmt 6 -out ${fasta_file.baseName}_blast.tsv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "GEO database",
            "BLASTP-ACC"
        ],
        "tools_url": [
            "https://bio.tools/GEO_database",
            "https://bio.tools/BLASTP-ACC"
        ],
        "tools_dico": [
            {
                "name": "GEO database",
                "uri": "https://bio.tools/GEO_database",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3810",
                            "term": "Agricultural science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3324",
                            "term": "Infectious disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3324",
                            "term": "Transmissable disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3324",
                            "term": "Communicable disease"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic inference"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phlyogenetic tree construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic reconstruction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0323",
                                    "term": "Phylogenetic tree generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Characterisation of Quorum Sensing System and Its Role in Global Regulation in Hafnia alvei.\n\nThis database stores curated gene expression DataSets, as well as original Series and Platform records in the Gene Expression Omnibus (GEO) repository. Enter search terms to locate experiments of interest. DataSet records contain additional resources including cluster tools and differential expression queries.\n\n(smok* OR diet) AND (mammals[organism] NOT human[organism]).\n\n||| COMMON LINK WITH (PUB. & NAME DIFFERENT) bio.tools/GSE33335 (NLM.NIH.GOV/gds), bio.tools/ncbi_resources (NLM.NIH.GOV), bio.tools/genbank (NLM.NIH.GOV).\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'homoserine lactones AHLs Hafnia alvei', 'AHLs Hafnia alvei', 'lactones AHLs Hafnia alvei', 'Hafnia alvei'",
                "homepage": "https://www.ncbi.nlm.nih.gov/gds"
            },
            {
                "name": "BLASTP-ACC",
                "uri": "https://bio.tools/BLASTP-ACC",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3297",
                            "term": "Biotechnology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3802",
                                    "term": "Sorting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Local sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0495",
                                    "term": "Sequence alignment (local)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Parallel Architecture and Hardware Accelerator Design for BLAST-based Protein Sequence Alignment.\n\nIn this study, we design a hardware accelerator for a widely used sequence alignment algorithm, the basic local alignment search tool for proteins (BLASTP). The architecture of the proposed accelerator consists of five stages: a new systolic-array-based one-hit finding stage, a novel RAM-REG-based two-hit finding stage, a refined ungapped extension stage, a faster gapped extension stage, and a highly efficient parallel sorter. The system is implemented on an Altera Stratix V FPGA with a processing speed of more than 500 giga cell updates per second (GCUPS). It can receive a query sequence, compare it with the sequences in the database, and generate a list sorted in descending order of the similarity scores between the query sequence and the subject sequences.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'accelerator', 'Altera', 'Stratix', 'RAM-REG-based'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31581096"
            }
        ],
        "inputs": [
            "fasta_file",
            "blastdb"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "tag \"${fasta_file.baseName}\"",
            "label 'Blast'"
        ],
        "when": "",
        "stub": ""
    },
    "gff_filter_by_blast": {
        "name_process": "gff_filter_by_blast",
        "string_process": "\nprocess gff_filter_by_blast {\n\n    tag \"${gff_file.baseName}\"\n    publishDir \"${params.outdir}/BlastFilteredGFF\", mode: 'copy'\n    label 'AGAT'\n\n    input:\n    path gff_file\n    path blast_file\n\n    output:\n    path \"${gff_file.baseName}_blast-filtered.gff3\", emit: blast_filtered\n\n    script:\n    \"\"\"\n    agat_sp_filter_by_mrnaBlastValue.pl --gff $gff_file --blast $blast_file \\\\\n        --outfile ${gff_file.baseName}_blast-filtered.gff3\n    \"\"\"\n                                                                \n\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    agat_sp_filter_by_mrnaBlastValue.pl --gff $gff_file --blast $blast_file \\\\\n        --outfile ${gff_file.baseName}_blast-filtered.gff3\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gff_file",
            "blast_file"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "tag \"${gff_file.baseName}\"",
            "publishDir \"${params.outdir}/BlastFilteredGFF\", mode: 'copy'",
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "gff2gbk": {
        "name_process": "gff2gbk",
        "string_process": "\nprocess gff2gbk {\n\n    tag \"${gff_file.baseName}\"\n    label 'Augustus'\n\n    input:\n    path gff_file\n    path genome_fasta\n\n    output:\n    path \"${gff_file.baseName}.gbk\"\n\n    script:\n    \"\"\"\n    gff2gbSmallDNA.pl $gff_file $genome_fasta ${params.flank_region_size} ${gff_file.baseName}.gbk\n    \"\"\"\n                                                            \n\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    gff2gbSmallDNA.pl $gff_file $genome_fasta ${params.flank_region_size} ${gff_file.baseName}.gbk\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "gff_file",
            "genome_fasta"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "tag \"${gff_file.baseName}\"",
            "label 'Augustus'"
        ],
        "when": "",
        "stub": ""
    },
    "gbk2augustus": {
        "name_process": "gbk2augustus",
        "string_process": "\nprocess gbk2augustus {\n\n    tag \"Make Augustus training set: ${genbank_file.baseName}\"\n    label 'Augustus'\n    publishDir \"${params.outdir}/Augustus\", mode: 'copy',\n        saveAs: { filename ->\n            if (filename.indexOf(\".train\") > 0)        \"TrainingData/$filename\"\n            else if (filename.indexOf(\".test\") > 0)    \"TestingData/$filename\"\n            else if (filename.indexOf(\".gbk\") > 0)     \"GenbankFile/$filename\"\n            else filename }\n\n    input:\n    path genbank_file\n\n    output:\n    path \"${genbank_file}.train\", emit: training_data\n    path \"${genbank_file}.test\", emit: testing_data\n    path \"${genbank_file}\", emit: genbank_file\n\n    script:\n    \"\"\"\n    randomSplit.pl $genbank_file ${params.test_size}\n    \"\"\"\n                                                         \n\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    randomSplit.pl $genbank_file ${params.test_size}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genbank_file"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "tag \"Make Augustus training set: ${genbank_file.baseName}\"",
            "label 'Augustus'",
            "publishDir \"${params.outdir}/Augustus\", mode: 'copy' , saveAs: { filename -> if (filename.indexOf(\".train\") > 0) \"TrainingData/$filename\" else if (filename.indexOf(\".test\") > 0) \"TestingData/$filename\" else if (filename.indexOf(\".gbk\") > 0) \"GenbankFile/$filename\" else filename }"
        ],
        "when": "",
        "stub": ""
    },
    "augustus_training": {
        "name_process": "augustus_training",
        "string_process": "\nprocess augustus_training {\n\n    tag \"$species_label\"\n    label 'Augustus'\n    publishDir \"${params.outdir}/Augustus_training\", mode: 'copy'\n    publishDir \"${params.maker_species_publishdir}\", mode: 'copy', enabled: file(params.maker_species_publishdir).exists(), pattern: \"${species_label}\"\n\n    input:\n    path training_file\n    path test_file\n    val species_label\n\n    output:\n    path \"${species_label}_run.log\"\n    path \"${species_label}\", emit: training_model\n\n    script:\n    \"\"\"\n    : \\${AUGUSTUS_CONFIG_PATH:=/usr/local/config}\n    cp -rv \\${AUGUSTUS_CONFIG_PATH} .\n    export AUGUSTUS_CONFIG_PATH=\"\\$PWD/config\"\n    new_species.pl --species=$species_label\n    etraining --species=$species_label $training_file\n    augustus --species=$species_label $test_file | tee ${species_label}_run.log\n    mv config/species/${species_label} .\n    \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    : \\${AUGUSTUS_CONFIG_PATH:=/usr/local/config}\n    cp -rv \\${AUGUSTUS_CONFIG_PATH} .\n    export AUGUSTUS_CONFIG_PATH=\"\\$PWD/config\"\n    new_species.pl --species=$species_label\n    etraining --species=$species_label $training_file\n    augustus --species=$species_label $test_file | tee ${species_label}_run.log\n    mv config/species/${species_label} .\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "AUGUSTUS"
        ],
        "tools_url": [
            "https://bio.tools/augustus"
        ],
        "tools_dico": [
            {
                "name": "AUGUSTUS",
                "uri": "https://bio.tools/augustus",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Homology-based gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3662",
                                    "term": "Ab-initio gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0004",
                                    "term": "Operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Evidence-based gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Gene prediction (homology-based)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Empirical gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Similarity-based gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Empirical gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3662",
                                    "term": "Gene prediction (ab-initio)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "AUGUSTUS is a eukaryotic gene prediction tool. It can integrate evidence, e.g. from RNA-Seq, ESTs, proteomics, but can also predict genes ab initio. The PPX extension to AUGUSTUS can take a protein sequence multiple sequence alignment as input to find new members of the family in a genome. It can be run through a web interface (see https://bio.tools/webaugustus), or downloaded and run locally.",
                "homepage": "http://bioinf.uni-greifswald.de/augustus"
            }
        ],
        "inputs": [
            "training_file",
            "test_file",
            "species_label"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "tag \"$species_label\"",
            "label 'Augustus'",
            "publishDir \"${params.outdir}/Augustus_training\", mode: 'copy'",
            "publishDir \"${params.maker_species_publishdir}\", mode: 'copy', enabled: file(params.maker_species_publishdir).exists(), pattern: \"${species_label}\""
        ],
        "when": "",
        "stub": ""
    },
    "convert_gff2zff": {
        "name_process": "convert_gff2zff",
        "string_process": "\nprocess convert_gff2zff {\n\n    label 'AGAT'\n\n    input:\n    path annotation\n    path genome\n\n    output:\n    path \"*.{ann,dna}\"\n\n    script:\n    \"\"\"\n    agat_convert_sp_gff2zff.pl --gff $annotation \\\\\n        --fasta $genome -o ${genome.baseName}\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    agat_convert_sp_gff2zff.pl --gff $annotation \\\\\n        --fasta $genome -o ${genome.baseName}\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "annotation",
            "genome"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "label 'AGAT'"
        ],
        "when": "",
        "stub": ""
    },
    "snap_training": {
        "name_process": "snap_training",
        "string_process": "\nprocess snap_training {\n\n    publishDir \"${params.outdir}/Snap_training\", mode: 'copy'\n\n    input:\n    path training_files\n    val species_label\n\n    output:\n    path \"*.hmm\", emit: training_model\n\n    script:\n    ann_file = training_files.find { it =~ /.ann$/ }\n    dna_file = training_files.find { it =~ /.dna$/ }\n    \"\"\"\n    fathom -categorize ${params.flank_region_size} ${ann_file} ${dna_file}\n    fathom -export ${params.flank_region_size} -plus uni.ann uni.dna\n    forge export.ann export.dna\n    hmm-assembler.pl \"$species_label\" . > \"${species_label}.hmm\"\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    ann_file = training_files.find { it =~ /.ann$/ }\n    dna_file = training_files.find { it =~ /.dna$/ }\n    \"\"\"\n    fathom -categorize ${params.flank_region_size} ${ann_file} ${dna_file}\n    fathom -export ${params.flank_region_size} -plus uni.ann uni.dna\n    forge export.ann export.dna\n    hmm-assembler.pl \"$species_label\" . > \"${species_label}.hmm\"\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "FORGE"
        ],
        "tools_url": [
            "https://bio.tools/forge"
        ],
        "tools_dico": [
            {
                "name": "FORGE",
                "uri": "https://bio.tools/forge",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype and phenotype resources"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0625",
                            "term": "Genotype-phenotype"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "Single nucleotide polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP discovery"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0484",
                                    "term": "SNP calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Functional element Overlap analysis of the Results of GWAS Experiments . Discover cell specific enrichments of GWAS associated SNPs in regulatory regions and provides tabular and graphical summaries of the enrichments.",
                "homepage": "http://phase3browser.1000genomes.org/Homo_sapiens/UserData/Forge"
            }
        ],
        "inputs": [
            "training_files",
            "species_label"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "abner24__AbinitioTraining",
        "directive": [
            "publishDir \"${params.outdir}/Snap_training\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
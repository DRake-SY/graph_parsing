{
    "soapnuke": {
        "name_process": "soapnuke",
        "string_process": "\nprocess soapnuke{\n    tag { sample_name }\n    input:\n        val sample_name from sample\n        file 'sample_R1.fq.gz' from reads1\n        file 'sample_R2.fq.gz' from reads2\n\n    output:\n        set sample_name,file(\"*.fastq.gz\") into clean_samples\n\n    script:\n    \"\"\"\n    SOAPnuke filter -1 sample_R1.fq.gz -2 sample_R2.fq.gz -l 15 -q 0.5 -Q 2 -o . \\\n        -C sample.clean1.fastq.gz -D sample.clean2.fastq.gz\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    SOAPnuke filter -1 sample_R1.fq.gz -2 sample_R2.fq.gz -l 15 -q 0.5 -Q 2 -o . \\\n        -C sample.clean1.fastq.gz -D sample.clean2.fastq.gz\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "SOAPnuke"
        ],
        "tools_url": [
            "https://bio.tools/soapnuke"
        ],
        "tools_dico": [
            {
                "name": "SOAPnuke",
                "uri": "https://bio.tools/soapnuke",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A MapReduce Acceleration supported Software for integrated Quality Control and Preprocessing of High-Throughput Sequencing Data.",
                "homepage": "https://github.com/BGI-flexlab/SOAPnuke"
            }
        ],
        "inputs": [
            "sample",
            "reads1",
            "reads2"
        ],
        "nb_inputs": 3,
        "outputs": [
            "clean_samples"
        ],
        "nb_outputs": 1,
        "name_workflow": "pandora414__dna",
        "directive": [
            "tag { sample_name }"
        ],
        "when": "",
        "stub": ""
    },
    "bwa": {
        "name_process": "bwa",
        "string_process": "\nprocess bwa{\n    input:\n        set sample_name,files from clean_samples\n    \n    output:\n        set sample_name,file('sample.clean.sam') into sam_res\n\n    script:\n    \"\"\"\n    bwa mem -t ${params.bwa_cpu} -M -T 30 ${params.bwa_db_prefix} \\\n        -R \"@RG\\tID:${sample_name}\\tSM:${sample_name}\\tPL:ILLUMINA\\tLB:DG\\tPU:illumina\" \\\n        ${files[0]} ${files[1]} > sample.clean.sam\n    \"\"\"     \n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    bwa mem -t ${params.bwa_cpu} -M -T 30 ${params.bwa_db_prefix} \\\n        -R \"@RG\\tID:${sample_name}\\tSM:${sample_name}\\tPL:ILLUMINA\\tLB:DG\\tPU:illumina\" \\\n        ${files[0]} ${files[1]} > sample.clean.sam\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "BWA"
        ],
        "tools_url": [
            "https://bio.tools/bwa"
        ],
        "tools_dico": [
            {
                "name": "BWA",
                "uri": "https://bio.tools/bwa",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3429",
                                    "term": "Construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_2012",
                                "term": "Sequence coordinates"
                            },
                            {
                                "uri": "http://edamontology.org/data_1916",
                                "term": "Alignment"
                            },
                            {
                                "uri": "http://edamontology.org/data_3210",
                                "term": "Genome index"
                            }
                        ]
                    }
                ],
                "description": "Fast, accurate, memory-efficient aligner for short and long sequencing reads",
                "homepage": "http://bio-bwa.sourceforge.net"
            }
        ],
        "inputs": [
            "clean_samples"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sam_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "pandora414__dna",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "sort": {
        "name_process": "sort",
        "string_process": "\nprocess sort{\n                   \n    input:\n        set sample_name,file('sample.clean.sam') from sam_res\n    \n    output:\n        set sample_name,file('sample.clean.bam') into bam_res\n\n    script:\n    \"\"\"\n    java -Xmx2g -Djava.io.tmpdir=${params.tmp} -jar ${params.picard_jar_path}  SortSam \\\n        INPUT=sample.clean.sam \\\n        OUTPUT=sample.clean.bam \\\n        MAX_RECORDS_IN_RAM=500000 \\\n        SORT_ORDER=coordinate \\\n        VALIDATION_STRINGENCY=LENIENT \\\n        CREATE_INDEX=true\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    java -Xmx2g -Djava.io.tmpdir=${params.tmp} -jar ${params.picard_jar_path}  SortSam \\\n        INPUT=sample.clean.sam \\\n        OUTPUT=sample.clean.bam \\\n        MAX_RECORDS_IN_RAM=500000 \\\n        SORT_ORDER=coordinate \\\n        VALIDATION_STRINGENCY=LENIENT \\\n        CREATE_INDEX=true\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sam_res"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bam_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "pandora414__dna",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "depth": {
        "name_process": "depth",
        "string_process": "\nprocess depth{\n    label 'gatk'\n              \n    input:\n        set sample_name,file('sample.clean.bam') from bam_res1\n    output:\n        file('sample.target.basedepth.sample_interval_summary') into depth_res\n\n    script:\n        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T DepthOfCoverage \\\n            -R ${params.ref_sequence} \\\n            -L ${params.depth_target} \\\n            -I sample.clean.bam \\\n            -ct 1 -ct 10 -ct 20 -ct 30 -ct 50 -ct 100 -ct 200 -ct 1000 \\\n            -o sample.target.basedepth\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T DepthOfCoverage \\\n            -R ${params.ref_sequence} \\\n            -L ${params.depth_target} \\\n            -I sample.clean.bam \\\n            -ct 1 -ct 10 -ct 20 -ct 30 -ct 50 -ct 100 -ct 200 -ct 1000 \\\n            -o sample.target.basedepth\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_res1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "depth_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "pandora414__dna",
        "directive": [
            "label 'gatk'"
        ],
        "when": "",
        "stub": ""
    },
    "UnifiedGenotyper_snp": {
        "name_process": "UnifiedGenotyper_snp",
        "string_process": "\nprocess UnifiedGenotyper_snp{\n    label 'gatk'\n              \n    publishDir \"${params.output}/snp/\", mode: 'copy'\n    input:\n        set sample_name,file('sample.recal.final.clean.bam') from recal_bam_res0\n    output:\n        set sample_name,file('*.snp.vcf') into snp_vcf_res\n    script:\n        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T UnifiedGenotyper \\\n            -R ${params.ref_sequence} \\\n            -I sample.recal.final.clean.bam \\\n            -glm SNP \\\n            -D ${params.dbsnp_137_hg19_vcf} \\\n            -o ${sample_name}.snp.vcf \\\n            -stand_call_conf 30 \\\n            -baqGOP 30 \\\n            -L ${params.gatk_snp_target} \\\n            -nct ${params.gatk_cpu} \\\n            -dcov  10000 \\\n            -U ALLOW_SEQ_DICT_INCOMPATIBILITY -A VariantType -A QualByDepth \\\n            -A HaplotypeScore -A BaseQualityRankSumTest \\\n            -A MappingQualityRankSumTest -A ReadPosRankSumTest \\\n            -A FisherStrand -A DepthPerAlleleBySample \\\n            -A ClippingRankSumTest \\\n            --output_mode EMIT_ALL_SITES\n        \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T UnifiedGenotyper \\\n            -R ${params.ref_sequence} \\\n            -I sample.recal.final.clean.bam \\\n            -glm SNP \\\n            -D ${params.dbsnp_137_hg19_vcf} \\\n            -o ${sample_name}.snp.vcf \\\n            -stand_call_conf 30 \\\n            -baqGOP 30 \\\n            -L ${params.gatk_snp_target} \\\n            -nct ${params.gatk_cpu} \\\n            -dcov  10000 \\\n            -U ALLOW_SEQ_DICT_INCOMPATIBILITY -A VariantType -A QualByDepth \\\n            -A HaplotypeScore -A BaseQualityRankSumTest \\\n            -A MappingQualityRankSumTest -A ReadPosRankSumTest \\\n            -A FisherStrand -A DepthPerAlleleBySample \\\n            -A ClippingRankSumTest \\\n            --output_mode EMIT_ALL_SITES\n        \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "recal_bam_res0"
        ],
        "nb_inputs": 1,
        "outputs": [
            "snp_vcf_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "pandora414__dna",
        "directive": [
            "label 'gatk'",
            "publishDir \"${params.output}/snp/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "UnifiedGenotyper_indel": {
        "name_process": "UnifiedGenotyper_indel",
        "string_process": "\nprocess UnifiedGenotyper_indel{\n    label 'gatk'\n              \n    publishDir \"${params.output}/indel/\", mode: 'copy'\n    input:\n        set sample_name,file('sample.recal.final.clean.bam') from recal_bam_res1\n    output:\n        set sample_name,file('*.indel.vcf') into indel_vcf_res\n    script:\n        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T UnifiedGenotyper \\\n            -R ${params.ref_sequence} \\\n            -I sample.recal.final.clean.bam \\\n            -glm INDEL \\\n            -D ${params.dbsnp_137_hg19_vcf} \\\n            -o ${sample_name}.indel.vcf \\\n            -stand_call_conf 30 \\\n            -baqGOP 30 \\\n            -L ${params.gatk_indel_target} \\\n            -nct ${params.gatk_cpu} \\\n            -U ALLOW_SEQ_DICT_INCOMPATIBILITY -A VariantType -A QualByDepth \\\n            -A HaplotypeScore -A BaseQualityRankSumTest \\\n            -A MappingQualityRankSumTest -A ReadPosRankSumTest \\\n            -A FisherStrand -A DepthPerAlleleBySample \\\n            -A ClippingRankSumTest\n        \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T UnifiedGenotyper \\\n            -R ${params.ref_sequence} \\\n            -I sample.recal.final.clean.bam \\\n            -glm INDEL \\\n            -D ${params.dbsnp_137_hg19_vcf} \\\n            -o ${sample_name}.indel.vcf \\\n            -stand_call_conf 30 \\\n            -baqGOP 30 \\\n            -L ${params.gatk_indel_target} \\\n            -nct ${params.gatk_cpu} \\\n            -U ALLOW_SEQ_DICT_INCOMPATIBILITY -A VariantType -A QualByDepth \\\n            -A HaplotypeScore -A BaseQualityRankSumTest \\\n            -A MappingQualityRankSumTest -A ReadPosRankSumTest \\\n            -A FisherStrand -A DepthPerAlleleBySample \\\n            -A ClippingRankSumTest\n        \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "recal_bam_res1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "indel_vcf_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "pandora414__dna",
        "directive": [
            "label 'gatk'",
            "publishDir \"${params.output}/indel/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "genotype": {
        "name_process": "genotype",
        "string_process": "\nprocess genotype{\n    publishDir \"${params.output}\", mode: 'copy'\n\n    input:\n        set sample_name,file('snp.vcf') from snp_vcf_res\n        set sample_name_1,file('indel.vcf') from indel_vcf_res\n        file('sample.target.basedepth.sample_interval_summary') from depth_res\n\n    output:\n        file(\"${sample_name}.geno\") into genotype_res\n\n    script:\n        \"\"\"\n        Rscript ${workflow.projectDir}/scripts/dgsnpgenotype.R --args \\\n        snp.vcf \\\n        indel.vcf \\\n        sample.target.basedepth.sample_interval_summary \\\n        ./${sample_name} \\\n        ${params.snpbed} \\\n        ${params.indelbed}\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        Rscript ${workflow.projectDir}/scripts/dgsnpgenotype.R --args \\\n        snp.vcf \\\n        indel.vcf \\\n        sample.target.basedepth.sample_interval_summary \\\n        ./${sample_name} \\\n        ${params.snpbed} \\\n        ${params.indelbed}\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "snp_vcf_res",
            "indel_vcf_res",
            "depth_res"
        ],
        "nb_inputs": 3,
        "outputs": [
            "genotype_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "pandora414__dna",
        "directive": [
            "publishDir \"${params.output}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "align_stat": {
        "name_process": "align_stat",
        "string_process": "\nprocess align_stat{\n                   \n    input:\n        set sample_name,file('sample.clean.bam') from bam_res0\n\n    script:\n        \"\"\"\n        java -Xmx2g -Djava.io.tmpdir=${params.tmp} -jar ${params.picard_jar_path} CollectAlignmentSummaryMetrics \\\n            INPUT=sample.clean.bam \\\n            OUTPUT=sample.mapped.stat \\\n            CREATE_INDEX=true \\\n            VALIDATION_STRINGENCY=LENIENT \\\n            REFERENCE_SEQUENCE=${params.ref_sequence}\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        java -Xmx2g -Djava.io.tmpdir=${params.tmp} -jar ${params.picard_jar_path} CollectAlignmentSummaryMetrics \\\n            INPUT=sample.clean.bam \\\n            OUTPUT=sample.mapped.stat \\\n            CREATE_INDEX=true \\\n            VALIDATION_STRINGENCY=LENIENT \\\n            REFERENCE_SEQUENCE=${params.ref_sequence}\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_res0"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "pandora414__dna",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "relign": {
        "name_process": "relign",
        "string_process": "\nprocess relign{\n    label 'gatk'\n              \n    input:\n        set sample_name,file('sample.clean.bam') from bam_res2\n    output:\n        file('sample.realigner.dedupped.clean.intervals') into target_intervals\n    script:\n        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T RealignerTargetCreator \\\n            -R ${params.ref_sequence} \\\n\t    -L ${params.depth_target} \\\n\t    -o sample.realigner.dedupped.clean.intervals \\\t\n            -I sample.clean.bam \\\n            -known ${params.v1000G_phase1_indels_hg19_vcf} \\\n            -known ${params.Mills_and_1000G_gold_standard_indels_hg19_vcf}\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T RealignerTargetCreator \\\n            -R ${params.ref_sequence} \\\n\t    -L ${params.depth_target} \\\n\t    -o sample.realigner.dedupped.clean.intervals \\\t\n            -I sample.clean.bam \\\n            -known ${params.v1000G_phase1_indels_hg19_vcf} \\\n            -known ${params.Mills_and_1000G_gold_standard_indels_hg19_vcf}\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_res2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "target_intervals"
        ],
        "nb_outputs": 1,
        "name_workflow": "pandora414__dna",
        "directive": [
            "label 'gatk'"
        ],
        "when": "",
        "stub": ""
    },
    "IndelRealigner": {
        "name_process": "IndelRealigner",
        "string_process": "\nprocess IndelRealigner{\n    label 'gatk'\n              \n    input:\n        set sample_name,file('sample.clean.bam') from bam_res3\n        file('sample.realigner.dedupped.clean.intervals') from target_intervals\n    \n    output:\n        set sample_name,file('sample.realigned.clean.bam') into realigned_bam_res\n    script:\n        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T IndelRealigner \\\n            -filterNoBases \\\n            -R ${params.ref_sequence} \\\n            -I sample.clean.bam \\\n            -targetIntervals sample.realigner.dedupped.clean.intervals \\\n            -o sample.realigned.clean.bam \\\n            -L ${params.depth_target} \\\n            -known ${params.v1000G_phase1_indels_hg19_vcf} \\\n            -known ${params.Mills_and_1000G_gold_standard_indels_hg19_vcf}\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T IndelRealigner \\\n            -filterNoBases \\\n            -R ${params.ref_sequence} \\\n            -I sample.clean.bam \\\n            -targetIntervals sample.realigner.dedupped.clean.intervals \\\n            -o sample.realigned.clean.bam \\\n            -L ${params.depth_target} \\\n            -known ${params.v1000G_phase1_indels_hg19_vcf} \\\n            -known ${params.Mills_and_1000G_gold_standard_indels_hg19_vcf}\n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "bam_res3",
            "target_intervals"
        ],
        "nb_inputs": 2,
        "outputs": [
            "realigned_bam_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "pandora414__dna",
        "directive": [
            "label 'gatk'"
        ],
        "when": "",
        "stub": ""
    },
    "BQSR": {
        "name_process": "BQSR",
        "string_process": "\nprocess BQSR{\n    label 'gatk'\n              \n    input:\n        set sample_name,file('sample.realigned.clean.bam') from realigned_bam_res0\n    \n    output:\n        file('sample.recal.table') into bsqr_res\n\n    script:\n        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T BaseRecalibrator \\\n            -R ${params.ref_sequence} \\\n            -I sample.realigned.clean.bam \\\n            -knownSites ${params.dbsnp_137_hg19_vcf} \\\n            -knownSites ${params.Mills_and_1000G_gold_standard_indels_hg19_vcf} \\\n            -knownSites ${params.v1000G_phase1_indels_hg19_vcf} \\\n            -L ${params.depth_target} \\\n            -nct ${params.gatk_cpu} \\\n            -o sample.recal.table\n        \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T BaseRecalibrator \\\n            -R ${params.ref_sequence} \\\n            -I sample.realigned.clean.bam \\\n            -knownSites ${params.dbsnp_137_hg19_vcf} \\\n            -knownSites ${params.Mills_and_1000G_gold_standard_indels_hg19_vcf} \\\n            -knownSites ${params.v1000G_phase1_indels_hg19_vcf} \\\n            -L ${params.depth_target} \\\n            -nct ${params.gatk_cpu} \\\n            -o sample.recal.table\n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "realigned_bam_res0"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bsqr_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "pandora414__dna",
        "directive": [
            "label 'gatk'"
        ],
        "when": "",
        "stub": ""
    },
    "print_reads": {
        "name_process": "print_reads",
        "string_process": "\nprocess print_reads{\n    label 'gatk'\n              \n    input:\n        set sample_name,file('sample.realigned.clean.bam') from realigned_bam_res1\n        file('sample.recal.table') from bsqr_res\n    output:\n        set sample_name,file('sample.recal.final.clean.bam') into recal_bam_res\n    script:\n        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T PrintReads \\\n            -R ${params.ref_sequence} \\\n            -I sample.realigned.clean.bam \\\n            -BQSR sample.recal.table \\\n            -L ${params.depth_target} \\\n            -o sample.recal.final.clean.bam\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        java -Xmx15g -jar ${params.gatk_jar_path} \\\n            -T PrintReads \\\n            -R ${params.ref_sequence} \\\n            -I sample.realigned.clean.bam \\\n            -BQSR sample.recal.table \\\n            -L ${params.depth_target} \\\n            -o sample.recal.final.clean.bam\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "realigned_bam_res1",
            "bsqr_res"
        ],
        "nb_inputs": 2,
        "outputs": [
            "recal_bam_res"
        ],
        "nb_outputs": 1,
        "name_workflow": "pandora414__dna",
        "directive": [
            "label 'gatk'"
        ],
        "when": "",
        "stub": ""
    }
}
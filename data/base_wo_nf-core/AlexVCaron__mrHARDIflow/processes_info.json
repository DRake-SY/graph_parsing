{
    "dwi_denoise": {
        "name_process": "dwi_denoise",
        "string_process": "\nprocess dwi_denoise {\n    label params.on_hcp ? \"res_full_node_override\" : params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : remove_alg_suffixes(f) : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwi), file(mask), file(metadata)\n        val(caller_name)\n        val(publish)\n    output:\n        tuple val(sid), path(\"${dwi.simpleName}__dwidenoised.nii.gz\"), emit: image\n        tuple val(sid), path(\"${dwi.simpleName}__dwidenoised_metadata.*\"), optional: true, emit: metadata\n    script:\n        def after_denoise = \"fslmaths -dt double dwidenoise.nii.gz -thr 0 ${dwi.simpleName}__dwidenoised.nii.gz -odt double\\n\"\n        if ( !metadata.empty() )\n            after_denoise += \"cp $metadata ${dwi.simpleName}__dwidenoised_metadata.py\"\n\n        def args = \"-nthreads $task.cpus -datatype float64\"\n        if ( !mask.empty() )\n            args += \" -mask $mask\"\n\n        \"\"\"\n        export MRTRIX_RNG_SEED=$params.random_seed\n        dwidenoise $args $dwi dwidenoise.nii.gz\n        $after_denoise\n        \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "        def after_denoise = \"fslmaths -dt double dwidenoise.nii.gz -thr 0 ${dwi.simpleName}__dwidenoised.nii.gz -odt double\\n\"\n        if ( !metadata.empty() )\n            after_denoise += \"cp $metadata ${dwi.simpleName}__dwidenoised_metadata.py\"\n\n        def args = \"-nthreads $task.cpus -datatype float64\"\n        if ( !mask.empty() )\n            args += \" -mask $mask\"\n\n        \"\"\"\n        export MRTRIX_RNG_SEED=$params.random_seed\n        dwidenoise $args $dwi dwidenoise.nii.gz\n        $after_denoise\n        \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "mask",
            "metadata",
            "dwi",
            "caller_name",
            "publish"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.on_hcp ? \"res_full_node_override\" : params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : remove_alg_suffixes(f) : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "nlmeans_denoise": {
        "name_process": "nlmeans_denoise",
        "string_process": "\nprocess nlmeans_denoise {\n    label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : remove_alg_suffixes(f) : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(image), file(mask), file(metadata)\n        val(caller_name)\n        val(publish)\n    output:\n        tuple val(sid), path(\"${image.simpleName}__nlmeans_denoised.nii.gz\"), emit: image\n        tuple val(sid), path(\"${image.simpleName}__nlmeans_denoised_metadata.*\"), optional: true, emit: metadata\n    script:\n        def args = \"\"\n        if ( !mask.empty() ) args += \"--mask $mask\"\n        def after_script = \"\"\n        if ( !metadata.empty() ) after_script += \"cp $metadata ${image.simpleName}__nlmeans_denoised_metadata.py\"\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        scil_run_nlmeans.py $image ${image.simpleName}__nlmeans_denoised.nii.gz 1 --processes $task.cpus -f $args\n        $after_script\n        \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "        def args = \"\"\n        if ( !mask.empty() ) args += \"--mask $mask\"\n        def after_script = \"\"\n        if ( !metadata.empty() ) after_script += \"cp $metadata ${image.simpleName}__nlmeans_denoised_metadata.py\"\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        scil_run_nlmeans.py $image ${image.simpleName}__nlmeans_denoised.nii.gz 1 --processes $task.cpus -f $args\n        $after_script\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "mask",
            "metadata",
            "image",
            "caller_name",
            "publish"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : remove_alg_suffixes(f) : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "ants_gaussian_denoise": {
        "name_process": "ants_gaussian_denoise",
        "string_process": "\nprocess ants_gaussian_denoise {\n    label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(image), file(mask)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${image.simpleName}__ants_denoised.nii.gz\"), emit: image\n        tuple val(sid), path(\"${image.simpleName}__ants_denoised_metadata.*\"), optional: true, emit: metadata\n    script:\n        def args = \"\"\n        if ( !mask.empty() )\n            args += \"--mask-image $mask\"\n\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        export ANTS_RANDOM_SEED=$params.random_seed\n        DenoiseImage --input-image $image --noise-model Gaussian --output [${image.simpleName}__ants_denoised.nii.gz,${image.simpleName}__ants_denoised_noise_map.nii.gz] --verbose 1 $args\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "        def args = \"\"\n        if ( !mask.empty() )\n            args += \"--mask-image $mask\"\n\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        export ANTS_RANDOM_SEED=$params.random_seed\n        DenoiseImage --input-image $image --noise-model Gaussian --output [${image.simpleName}__ants_denoised.nii.gz,${image.simpleName}__ants_denoised_noise_map.nii.gz] --verbose 1 $args\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "mask",
            "image",
            "caller_name"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "n4_denoise": {
        "name_process": "n4_denoise",
        "string_process": "\nprocess n4_denoise {\n    label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(image), file(anat), file(mask), file(metadata)\n        val(caller_name)\n        path(config)\n    output:\n        tuple val(sid), path(\"${image.simpleName}__n4denoised.nii.gz\"), emit: image\n        tuple val(sid), path(\"${image.simpleName}__n4denoised_metadata.*\"), optional: true, emit: metadata\n    script:\n        def after_denoise = \"\"\n        def args = \"\"\n        if ( anat.empty() )\n            args += \"--in $image\"\n        else\n            args += \"--in $anat --apply $image\"\n\n        if ( !metadata.empty() ) {\n            after_denoise += \"mv n4denoise_metadata.py ${image.simpleName}__n4denoised_metadata.py\\n\"\n            args += \" --metadata $metadata\"\n        }\n        after_denoise += \"fslmaths -dt double n4denoise.nii.gz -thr 0 ${image.simpleName}__n4denoised.nii.gz -odt double\\n\"\n\n        if ( !mask.empty() )\n            args += \" --mask $mask\"\n\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        export ANTS_RANDOM_SEED=$params.random_seed\n        magic-monkey n4 $args --out n4denoise --config $config\n        $after_denoise\n        \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "        def after_denoise = \"\"\n        def args = \"\"\n        if ( anat.empty() )\n            args += \"--in $image\"\n        else\n            args += \"--in $anat --apply $image\"\n\n        if ( !metadata.empty() ) {\n            after_denoise += \"mv n4denoise_metadata.py ${image.simpleName}__n4denoised_metadata.py\\n\"\n            args += \" --metadata $metadata\"\n        }\n        after_denoise += \"fslmaths -dt double n4denoise.nii.gz -thr 0 ${image.simpleName}__n4denoised.nii.gz -odt double\\n\"\n\n        if ( !mask.empty() )\n            args += \" --mask $mask\"\n\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        export ANTS_RANDOM_SEED=$params.random_seed\n        magic-monkey n4 $args --out n4denoise --config $config\n        $after_denoise\n        \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "anat",
            "mask",
            "metadata",
            "image",
            "caller_name",
            "config"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "normalize_inter_b0": {
        "name_process": "normalize_inter_b0",
        "string_process": "\nprocess normalize_inter_b0 {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"${rev_dwi.simpleName}\") ? null : f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwi), path(bval), file(rev_dwi), file(rev_bval), file(dwi_metadata), file(rev_metadata)\n        val(caller_name)\n        file(config)\n    output:\n        tuple val(sid), path(\"${dwi.simpleName}__inter_b0_normalized.nii.gz\"), emit: dwi\n        tuple val(sid), path(\"${rev_dwi.simpleName}__inter_b0_normalized.nii.gz\"), optional: true, emit: rev\n        tuple val(sid), path(\"${dwi.simpleName}*_metadata.*\"), optional: true, emit: dwi_metadata\n        tuple val(sid), path(\"${rev_dwi.simpleName}*_metadata.*\"), optional: true, emit: rev_metadata\n    script:\n        def args = \"--in $dwi --bvals $bval\"\n        def after_script = \"\"\n        if ( !rev_dwi.empty() )\n            args += \" --rev $rev_dwi\"\n        if ( !rev_bval.empty() )\n            args += \" --rvals $rev_bval\"\n        if ( !config.empty() )\n            args += \" --config $config\"\n\n        if (!dwi_metadata.empty())\n            after_script += \"cp $dwi_metadata ${dwi.simpleName}__inter_b0_normalized_metadata.py\\n\"\n        if ( !rev_metadata.empty())\n            after_script += \"cp $rev_metadata ${rev_dwi.simpleName}__inter_b0_normalized_metadata.py\\n\"\n\n        if (params.b0_threshold)\n            args += \" --ceil ${params.b0_threshold}\"\n\n        \"\"\"\n        magic-monkey b0 normalize $args --out ${dwi.simpleName}__inter_b0_normalized --rout ${rev_dwi.simpleName}__inter_b0_normalized --ref $params.b0_normalization_strategy\n        $after_script\n        \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "        def args = \"--in $dwi --bvals $bval\"\n        def after_script = \"\"\n        if ( !rev_dwi.empty() )\n            args += \" --rev $rev_dwi\"\n        if ( !rev_bval.empty() )\n            args += \" --rvals $rev_bval\"\n        if ( !config.empty() )\n            args += \" --config $config\"\n\n        if (!dwi_metadata.empty())\n            after_script += \"cp $dwi_metadata ${dwi.simpleName}__inter_b0_normalized_metadata.py\\n\"\n        if ( !rev_metadata.empty())\n            after_script += \"cp $rev_metadata ${rev_dwi.simpleName}__inter_b0_normalized_metadata.py\\n\"\n\n        if (params.b0_threshold)\n            args += \" --ceil ${params.b0_threshold}\"\n\n        \"\"\"\n        magic-monkey b0 normalize $args --out ${dwi.simpleName}__inter_b0_normalized --rout ${rev_dwi.simpleName}__inter_b0_normalized --ref $params.b0_normalization_strategy\n        $after_script\n        \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "rev_dwi",
            "rev_bval",
            "dwi_metadata",
            "rev_metadata",
            "dwi",
            "bval",
            "caller_name",
            "config"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"${rev_dwi.simpleName}\") ? null : f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "prepare_topup": {
        "name_process": "prepare_topup",
        "string_process": "\nprocess prepare_topup {\n    label \"res_single_cpu\"\n\n    input:\n        tuple val(sid), path(b0s), path(dwi_bval), file(rev_bval), file(metadata)\n        path(config)\n    output:\n        tuple val(sid), path(\"${b0s.simpleName}__topup_script.sh\"), path(\"${b0s.simpleName}__topup_acqp.txt\"), path(\"${b0s.simpleName}__topup_config.cnf\"), val(\"${sid}__topup_results\"), emit: config\n        tuple val(sid), path(\"${b0s.simpleName}__topup_metadata.*\"), emit: metadata\n        tuple val(sid), path(\"{${dwi_bval.collect{ it.simpleName }.join(\",\")},${rev_bval.collect{ it.simpleName }.join(\",\")}}_topup_indexes_metadata.*\"), optional: true, emit : in_metadata_w_topup\n    script:\n        \"\"\"\n        magic-monkey topup --b0s $b0s --bvals ${dwi_bval.join(',')} --rev_bvals ${rev_bval.join(',')} --out ${b0s.simpleName}__topup --config $config --verbose\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        magic-monkey topup --b0s $b0s --bvals ${dwi_bval.join(',')} --rev_bvals ${rev_bval.join(',')} --out ${b0s.simpleName}__topup --config $config --verbose\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "rev_bval",
            "metadata",
            "b0s",
            "dwi_bval",
            "config"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\""
        ],
        "when": "",
        "stub": ""
    },
    "topup": {
        "name_process": "topup",
        "string_process": "\nprocess topup {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"b0\") ? null : f.contains(\"metadata\") ? null : f.contains(\"topup.nii.gz\") ? remove_alg_suffixes(f): null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(topup_script), path(topup_acqp), path(topup_cnf), path(b0), path(output_metadata)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${sid}_b0__topup.nii.gz\"), emit: image\n        tuple val(sid), path(\"${sid}__topup_field.nii.gz\"), emit: field\n        tuple val(sid), path(\"${sid}__topup_results_movpar.txt\"), path(\"${sid}__topup_results_fieldcoef.nii.gz\"), emit: transfo\n        tuple val(sid), path(\"${sid}_b0__topup.nii.gz\"), path(\"${sid}__topup_field.nii.gz\"), path(\"${sid}__topup_results_movpar.txt\"), path(\"${sid}__topup_results_fieldcoef.nii.gz\"), emit: pkg\n        tuple val(sid), path(output_metadata), optional: true, emit: metadata\n    script:\n        \"\"\"\n        fslmaths $b0 -thr 0 topup_in_image.nii.gz\n        ./$topup_script topup_in_image.nii.gz ${sid}__topup\n        mv ${sid}__topup.nii.gz ${sid}_b0__topup.nii.gz\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        fslmaths $b0 -thr 0 topup_in_image.nii.gz\n        ./$topup_script topup_in_image.nii.gz ${sid}__topup\n        mv ${sid}__topup.nii.gz ${sid}_b0__topup.nii.gz\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "topup_script",
            "topup_acqp",
            "topup_cnf",
            "b0",
            "output_metadata",
            "caller_name"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"b0\") ? null : f.contains(\"metadata\") ? null : f.contains(\"topup.nii.gz\") ? remove_alg_suffixes(f): null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "prepare_eddy": {
        "name_process": "prepare_eddy",
        "string_process": "\nprocess prepare_eddy {\n    label \"res_single_cpu\"\n\n    input:\n        tuple val(sid), val(prefix), file(topup_acqp), val(rev_prefix), path(data), path(metadata)\n        path(config)\n    output:\n        tuple val(sid), path(\"${prefix}__eddy_script.sh\"), path(\"${prefix}__eddy_index.txt\"), path(\"${prefix}__eddy_acqp.txt\"), emit: config\n        tuple val(sid), path(\"${prefix}__eddy_slspec.txt\"), emit: slspec, optional: true\n        tuple val(sid), path(\"${sid}*non_zero.bvec\"), emit: bvec, optional: true\n        tuple val(sid), path(\"${prefix}__eddy_metadata.*\"), emit: metadata, optional: true\n    script:\n        def args = \"--in $prefix --debug\"\n        def will_gen_acqp = true\n        if ( !topup_acqp.empty() ) {\n            args += \" --acqp $topup_acqp\"\n            will_gen_acqp = false\n        }\n        if ( rev_prefix ) {\n            args += \" --rev $rev_prefix\"\n            if ( params.eddy_with_reverse )\n                args += \" --rev_eddy\"\n        }\n\n        if ( params.use_cuda ) {\n            args += \" --cuda\"\n            if ( !params.eddy_select_gpu ) {\n                args += \" --dont_gpu\"\n            }\n        }\n\n        if ( params.eddy_force_shelled )\n            args += \" --shelled\"\n\n        if ( will_gen_acqp )\n            \"\"\"\n            magic-monkey eddy $args --out ${prefix}__eddy --config $config --seed\n            \"\"\"\n        else\n            \"\"\"\n            magic-monkey eddy $args --out ${prefix}__eddy --config $config --seed && cp $topup_acqp \"${prefix}__eddy_acqp.txt\"\n            \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "        def args = \"--in $prefix --debug\"\n        def will_gen_acqp = true\n        if ( !topup_acqp.empty() ) {\n            args += \" --acqp $topup_acqp\"\n            will_gen_acqp = false\n        }\n        if ( rev_prefix ) {\n            args += \" --rev $rev_prefix\"\n            if ( params.eddy_with_reverse )\n                args += \" --rev_eddy\"\n        }\n\n        if ( params.use_cuda ) {\n            args += \" --cuda\"\n            if ( !params.eddy_select_gpu ) {\n                args += \" --dont_gpu\"\n            }\n        }\n\n        if ( params.eddy_force_shelled )\n            args += \" --shelled\"\n\n        if ( will_gen_acqp )\n            \"\"\"\n            magic-monkey eddy $args --out ${prefix}__eddy --config $config --seed\n            \"\"\"\n        else\n            \"\"\"\n            magic-monkey eddy $args --out ${prefix}__eddy --config $config --seed && cp $topup_acqp \"${prefix}__eddy_acqp.txt\"\n            \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "prefix",
            "rev_prefix",
            "topup_acqp",
            "data",
            "metadata",
            "config"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\""
        ],
        "when": "",
        "stub": ""
    },
    "eddy": {
        "name_process": "eddy",
        "string_process": "\nprocess eddy {\n    label params.use_cuda ? \"res_single_cpu\" : params.on_hcp ? \"res_full_node_override\" : \"res_max_cpu\"\n    label params.use_cuda ? \"res_gpu\" : \"\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(eddy_script), path(eddy_index), path(eddy_acqp), file(eddy_slspec), path(dwi), path(bval), path(bvec), path(mask), val(topup_prefix), file(topup_package), path(metadata)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${dwi.simpleName}__eddy_corrected.nii.gz\"), emit: dwi\n        tuple val(sid), path(\"${dwi.simpleName}__eddy_corrected.bval\"), emit: bval\n        tuple val(sid), path(\"${dwi.simpleName}__eddy_corrected.bvec\"), emit: bvec\n        tuple val(sid), path(\"${dwi.simpleName}__eddy_corrected_metadata.py\"), optional: true, emit: metadata\n    script:\n        def after_script = \"\"\n        if ( metadata )\n            after_script += \"cp $metadata ${dwi.simpleName}__eddy_corrected_metadata.py\"\n\n        def args = \"eddy_in_image.nii.gz $bval $bvec\"\n\n        if ( mask ) {\n            args += \" $mask\"\n        }\n\n        args += \" $eddy_acqp $eddy_index\"\n\n        if ( topup_prefix ) {\n            args += \" --topup $topup_prefix\"\n        }\n\n        if ( !eddy_slspec.empty() )\n            args += \" --slspec $eddy_slspec\"\n\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        fslmaths $dwi -thr 0 eddy_in_image.nii.gz\n        ./$eddy_script $args eddy_corrected\n        mv eddy_corrected.eddy_rotated_bvecs ${dwi.simpleName}__eddy_corrected.bvec\n        cp $bval ${dwi.simpleName}__eddy_corrected.bval\n        cp eddy_corrected.nii.gz ${dwi.simpleName}__eddy_corrected.nii.gz\n        fslmaths ${dwi.simpleName}__eddy_corrected.nii.gz -thr 0 ${dwi.simpleName}__eddy_corrected.nii.gz\n        $after_script\n        \"\"\"\n}",
        "nb_lignes_process": 47,
        "string_script": "        def after_script = \"\"\n        if ( metadata )\n            after_script += \"cp $metadata ${dwi.simpleName}__eddy_corrected_metadata.py\"\n\n        def args = \"eddy_in_image.nii.gz $bval $bvec\"\n\n        if ( mask ) {\n            args += \" $mask\"\n        }\n\n        args += \" $eddy_acqp $eddy_index\"\n\n        if ( topup_prefix ) {\n            args += \" --topup $topup_prefix\"\n        }\n\n        if ( !eddy_slspec.empty() )\n            args += \" --slspec $eddy_slspec\"\n\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        fslmaths $dwi -thr 0 eddy_in_image.nii.gz\n        ./$eddy_script $args eddy_corrected\n        mv eddy_corrected.eddy_rotated_bvecs ${dwi.simpleName}__eddy_corrected.bvec\n        cp $bval ${dwi.simpleName}__eddy_corrected.bval\n        cp eddy_corrected.nii.gz ${dwi.simpleName}__eddy_corrected.nii.gz\n        fslmaths ${dwi.simpleName}__eddy_corrected.nii.gz -thr 0 ${dwi.simpleName}__eddy_corrected.nii.gz\n        $after_script\n        \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "topup_prefix",
            "eddy_slspec",
            "topup_package",
            "eddy_script",
            "eddy_index",
            "eddy_acqp",
            "dwi",
            "bval",
            "bvec",
            "mask",
            "metadata",
            "caller_name"
        ],
        "nb_inputs": 13,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.use_cuda ? \"res_single_cpu\" : params.on_hcp ? \"res_full_node_override\" : \"res_max_cpu\"",
            "label params.use_cuda ? \"res_gpu\" : \"\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "gibbs_removal": {
        "name_process": "gibbs_removal",
        "string_process": "\nprocess gibbs_removal {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : remove_alg_suffixes(f) : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwi), path(metadata)\n        val(caller_name)\n        val(publish)\n    output:\n        tuple val(sid), path(\"${dwi.simpleName}__gibbs_corrected.nii.gz\"), emit: image\n        tuple val(sid), path(\"${dwi.simpleName}__gibbs_corrected_metadata.*\"), optional: true, emit: metadata\n    script:\n    def after_denoise = \"fslmaths -dt double gibbs_corrected.nii.gz -thr 0 ${dwi.simpleName}__gibbs_corrected.nii.gz -odt double\\n\"\n    if ( metadata )\n        after_denoise += \"cp $metadata ${dwi.simpleName}__gibbs_corrected_metadata.py\"\n\n    \"\"\"\n    export MRTRIX_RNG_SEED=$params.random_seed\n    mrdegibbs -nthreads 1 -datatype float64 $dwi gibbs_corrected.nii.gz\n    $after_denoise\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    def after_denoise = \"fslmaths -dt double gibbs_corrected.nii.gz -thr 0 ${dwi.simpleName}__gibbs_corrected.nii.gz -odt double\\n\"\n    if ( metadata )\n        after_denoise += \"cp $metadata ${dwi.simpleName}__gibbs_corrected_metadata.py\"\n\n    \"\"\"\n    export MRTRIX_RNG_SEED=$params.random_seed\n    mrdegibbs -nthreads 1 -datatype float64 $dwi gibbs_corrected.nii.gz\n    $after_denoise\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "dwi",
            "metadata",
            "caller_name",
            "publish"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : remove_alg_suffixes(f) : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "diamond": {
        "name_process": "diamond",
        "string_process": "\nprocess diamond {\n    label params.on_hcp ? \"res_full_node_override\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/diamond\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(input_dwi), file(mask), path(data)\n        val(caller_name)\n        path(config)\n    output:\n        tuple val(sid), path(\"${sid}_diamond*.nii.gz\"), emit: diamond\n    script:\n        def args = \"\"\n        if ( !mask.empty() )\n            args += \" --mask $mask\"\n        if ( params.model_selection_with_tensor )\n            args += \" --mose-tensor\"\n        if ( params.estimate_restriction )\n            args += \" --restricted\"\n        if ( params.restriction_tensor )\n            args += \" --res-tensor\"\n        if ( !params.normalized_fractions )\n            args += \" --nosum-fractions\"\n        if ( params.free_water_tensor )\n            args += \" --iso-tensor\"\n\n        \"\"\"\n        magic-monkey diamond --in $input_dwi --mask $mask --out ${sid}_diamond --n $params.n_fascicles --f $params.fascicle_model --config $config\n        \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "        def args = \"\"\n        if ( !mask.empty() )\n            args += \" --mask $mask\"\n        if ( params.model_selection_with_tensor )\n            args += \" --mose-tensor\"\n        if ( params.estimate_restriction )\n            args += \" --restricted\"\n        if ( params.restriction_tensor )\n            args += \" --res-tensor\"\n        if ( !params.normalized_fractions )\n            args += \" --nosum-fractions\"\n        if ( params.free_water_tensor )\n            args += \" --iso-tensor\"\n\n        \"\"\"\n        magic-monkey diamond --in $input_dwi --mask $mask --out ${sid}_diamond --n $params.n_fascicles --f $params.fascicle_model --config $config\n        \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "mask",
            "input_dwi",
            "data",
            "caller_name",
            "config"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.on_hcp ? \"res_full_node_override\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/diamond\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "mrtrix_dti": {
        "name_process": "mrtrix_dti",
        "string_process": "\nprocess mrtrix_dti {\n    label \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/dti\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwi), path(bval), path(bvec), path(mask)\n        val(caller_name)\n        path(config)\n    output:\n        tuple val(sid), path(\"${sid}_dti_dti.nii.gz\"), emit: dti\n    script:\n        def args = \"--in $dwi --bvals $bval --bvecs $bvec\"\n        if ( \"${mask}\" != \"\" )\n            args += \" --mask $mask\"\n\n        \"\"\"\n        export MRTRIX_RNG_SEED=$params.random_seed\n        magic-monkey dti $args --out ${sid}_dti --config $config\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        def args = \"--in $dwi --bvals $bval --bvecs $bvec\"\n        if ( \"${mask}\" != \"\" )\n            args += \" --mask $mask\"\n\n        \"\"\"\n        export MRTRIX_RNG_SEED=$params.random_seed\n        magic-monkey dti $args --out ${sid}_dti --config $config\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "dwi",
            "bval",
            "bvec",
            "mask",
            "caller_name",
            "config"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/dti\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "response": {
        "name_process": "response",
        "string_process": "\nprocess response {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwi), path(bval), path(bvec), path(mask)\n        val(caller_name)\n        path(config)\n    output:\n        tuple val(sid), path(\"${sid}_response_*.txt\"), emit: responses\n    script:\n        def args = \"--in $dwi --bvals $bval --bvecs $bvec\"\n        if ( \"${mask}\" != \"\" )\n            args += \" --mask $mask\"\n\n        \"\"\"\n        export MRTRIX_RNG_SEED=$params.random_seed\n        magic-monkey response $args --out ${sid}_response --config $config\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        def args = \"--in $dwi --bvals $bval --bvecs $bvec\"\n        if ( \"${mask}\" != \"\" )\n            args += \" --mask $mask\"\n\n        \"\"\"\n        export MRTRIX_RNG_SEED=$params.random_seed\n        magic-monkey response $args --out ${sid}_response --config $config\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "dwi",
            "bval",
            "bvec",
            "mask",
            "caller_name",
            "config"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "csd": {
        "name_process": "csd",
        "string_process": "\nprocess csd {\n    label \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(responses), path(dwi), path(bval), path(bvec), path(mask)\n        val(caller_name)\n        path(config)\n    output:\n        tuple val(sid), path(\"${sid}_csd_*.nii.gz\"), emit: odfs\n    script:\n        def args = \"--in $dwi --bvals $bval --bvecs $bvec\"\n        if ( \"${mask}\" == \"\" )\n            args += \" --mask $mask\"\n\n        \"\"\"\n        export MRTRIX_RNG_SEED=$params.random_seed\n        magic-monkey csd $args --out ${sid}_csd --responses ${responses.join(',')} --config $config\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        def args = \"--in $dwi --bvals $bval --bvecs $bvec\"\n        if ( \"${mask}\" == \"\" )\n            args += \" --mask $mask\"\n\n        \"\"\"\n        export MRTRIX_RNG_SEED=$params.random_seed\n        magic-monkey csd $args --out ${sid}_csd --responses ${responses.join(',')} --config $config\n        \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "responses",
            "dwi",
            "bval",
            "bvec",
            "mask",
            "caller_name",
            "config"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "scilpy_response": {
        "name_process": "scilpy_response",
        "string_process": "\nprocess scilpy_response {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwi), path(bval), path(bvec), path(mask), file(wm_mask)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${sid}_response.txt\"), emit: response\n    script:\n        def args = \"\"\n        def before_frf = \"\"\n        if (params.frf_radii)\n            args += \" --roi_radii $params.frf_radii\"\n        if (params.frf_center)\n            args += \" --roi_center ${params.frf_center.join(\" \")}\"\n        if (params.frf_on_dti_shell && params.max_dti_bvalue)\n            before_frf += \"magic-monkey shells --in $dwi --bvals $bval --bvecs $bvec --shells $params.max_dti_bvalue --keep leq --out dwi_frf_shells --with_b0\\n\"\n        else {\n            before_frf += \"cp $dwi dwi_frf_shells.nii.gz\\n\"\n            before_frf += \"cp $bval dwi_frf_shells.bval\\n\"\n            before_frf += \"cp $bvec dwi_frf_shells.bvec\\n\"\n        }\n        if ( !wm_mask.empty() )\n            args += \" --mask_wm $wm_mask\"\n\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_image_math.py round $mask mask4scil.nii.gz --data_type uint8 -f\n        $before_frf\n        scil_compute_ssst_frf.py dwi_frf_shells.nii.gz dwi_frf_shells.bval dwi_frf_shells.bvec ${sid}_response.txt --mask mask4scil.nii.gz --fa $params.frf_fa --min_fa $params.frf_min_fa --min_nvox $params.frf_min_nvox $args\n        \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "        def args = \"\"\n        def before_frf = \"\"\n        if (params.frf_radii)\n            args += \" --roi_radii $params.frf_radii\"\n        if (params.frf_center)\n            args += \" --roi_center ${params.frf_center.join(\" \")}\"\n        if (params.frf_on_dti_shell && params.max_dti_bvalue)\n            before_frf += \"magic-monkey shells --in $dwi --bvals $bval --bvecs $bvec --shells $params.max_dti_bvalue --keep leq --out dwi_frf_shells --with_b0\\n\"\n        else {\n            before_frf += \"cp $dwi dwi_frf_shells.nii.gz\\n\"\n            before_frf += \"cp $bval dwi_frf_shells.bval\\n\"\n            before_frf += \"cp $bvec dwi_frf_shells.bvec\\n\"\n        }\n        if ( !wm_mask.empty() )\n            args += \" --mask_wm $wm_mask\"\n\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_image_math.py round $mask mask4scil.nii.gz --data_type uint8 -f\n        $before_frf\n        scil_compute_ssst_frf.py dwi_frf_shells.nii.gz dwi_frf_shells.bval dwi_frf_shells.bvec ${sid}_response.txt --mask mask4scil.nii.gz --fa $params.frf_fa --min_fa $params.frf_min_fa --min_nvox $params.frf_min_nvox $args\n        \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "wm_mask",
            "dwi",
            "bval",
            "bvec",
            "mask",
            "caller_name"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "scilpy_msmt_response": {
        "name_process": "scilpy_msmt_response",
        "string_process": "\nprocess scilpy_msmt_response {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n    tuple val(sid), path(dwi), path(bval), path(bvec), path(mask), path(seg)\n    val(caller_name)\n    output:\n    tuple val(sid), path(\"${sid}_wm_response.txt\"), path(\"${sid}_gm_response.txt\"), path(\"${sid}_csf_response.txt\"), emit: response\n    script:\n        def args = \"\"\n        if (params.frf_radii)\n            args += \" --roi_radii $params.frf_radii\"\n        if (params.frf_center)\n            args += \" --roi_center ${params.frf_center.join(\" \")}\"\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_image_math.py round $mask mask4scil.nii.gz --data_type uint8 -f\n        scil_compute_msmt_frf.py $dwi $bval $bvec ${sid}_wm_response.txt ${sid}_gm_response.txt ${sid}_csf_response.txt --mask mask4scil.nii.gz --mask_wm ${seg[0]} --mask_gm ${seg[1]} --mask_csf ${seg[2]} --fa_thr_wm $params.frf_fa --min_nvox $params.frf_min_nvox $args\n        \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "        def args = \"\"\n        if (params.frf_radii)\n            args += \" --roi_radii $params.frf_radii\"\n        if (params.frf_center)\n            args += \" --roi_center ${params.frf_center.join(\" \")}\"\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_image_math.py round $mask mask4scil.nii.gz --data_type uint8 -f\n        scil_compute_msmt_frf.py $dwi $bval $bvec ${sid}_wm_response.txt ${sid}_gm_response.txt ${sid}_csf_response.txt --mask mask4scil.nii.gz --mask_wm ${seg[0]} --mask_gm ${seg[1]} --mask_csf ${seg[2]} --fa_thr_wm $params.frf_fa --min_nvox $params.frf_min_nvox $args\n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "dwi",
            "bval",
            "bvec",
            "mask",
            "seg",
            "caller_name"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "scilpy_csd": {
        "name_process": "scilpy_csd",
        "string_process": "\nprocess scilpy_csd {\n    label \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwi), path(bval), path(bvec), path(response), path(mask)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${sid}_fodf.nii.gz\"), emit: odfs\n    script:\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_image_math.py round $mask mask4scil.nii.gz --data_type uint8 -f\n        scil_compute_ssst_fodf.py $dwi $bval $bvec $response ${sid}_fodf.nii.gz --mask mask4scil.nii.gz --force_b0_threshold --sh_order $params.sh_order --processes $task.cpus\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_image_math.py round $mask mask4scil.nii.gz --data_type uint8 -f\n        scil_compute_ssst_fodf.py $dwi $bval $bvec $response ${sid}_fodf.nii.gz --mask mask4scil.nii.gz --force_b0_threshold --sh_order $params.sh_order --processes $task.cpus\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "dwi",
            "bval",
            "bvec",
            "response",
            "mask",
            "caller_name"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "scilpy_msmt_csd": {
        "name_process": "scilpy_msmt_csd",
        "string_process": "\nprocess scilpy_msmt_csd {\n    label \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n    tuple val(sid), path(dwi), path(bval), path(bvec), path(wm_response), path(gm_response), path(csf_response), path(mask)\n    val(caller_name)\n    output:\n    tuple val(sid), path(\"${sid}_wm_fodf.nii.gz\"), path(\"${sid}_gm_fodf.nii.gz\"), path(\"${sid}_csf_fodf.nii.gz\"), emit: odfs\n    tuple val(sid), path(\"${sid}_vf.nii.gz\"), emit: vf\n    script:\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_image_math.py round $mask mask4scil.nii.gz --data_type uint8 -f\n        scil_compute_msmt_fodf.py $dwi $bval $bvec $wm_response $gm_response $csf_response --wm_out_fODF ${sid}_wm_fodf.nii.gz --gm_out_fODF ${sid}_gm_fodf.nii.gz --csf_out_fODF ${sid}_csf_fodf.nii.gz --vf ${sid}_vf.nii.gz --mask mask4scil.nii.gz --force_b0_threshold --sh_order $params.sh_order --processes $task.cpus\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_image_math.py round $mask mask4scil.nii.gz --data_type uint8 -f\n        scil_compute_msmt_fodf.py $dwi $bval $bvec $wm_response $gm_response $csf_response --wm_out_fODF ${sid}_wm_fodf.nii.gz --gm_out_fODF ${sid}_gm_fodf.nii.gz --csf_out_fODF ${sid}_csf_fodf.nii.gz --vf ${sid}_vf.nii.gz --mask mask4scil.nii.gz --force_b0_threshold --sh_order $params.sh_order --processes $task.cpus\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "dwi",
            "bval",
            "bvec",
            "wm_response",
            "gm_response",
            "csf_response",
            "mask",
            "caller_name"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "PFT_maps": {
        "name_process": "PFT_maps",
        "string_process": "\nprocess PFT_maps {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/tracking\", saveAs: { f -> remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(wm_vf), path(gm_vf), path(csf_vf)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${sid}_map_include.nii.gz\"), path(\"${sid}_map_exclude.nii.gz\"), emit: maps\n        tuple val(sid), path(\"${sid}_wm_gm_interface.nii.gz\"), emit: wm_gm_interface\n    script:\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_compute_maps_for_particle_filter_tracking.py $wm_vf $gm_vf $csf_vf --include ${sid}_map_include.nii.gz --exclude ${sid}_map_exclude.nii.gz --interface ${sid}_wm_gm_interface.nii.gz -t $params.pve_threshold -f\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_compute_maps_for_particle_filter_tracking.py $wm_vf $gm_vf $csf_vf --include ${sid}_map_include.nii.gz --exclude ${sid}_map_exclude.nii.gz --interface ${sid}_wm_gm_interface.nii.gz -t $params.pve_threshold -f\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "wm_vf",
            "gm_vf",
            "csf_vf",
            "caller_name"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/tracking\", saveAs: { f -> remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "PFT_tracking": {
        "name_process": "PFT_tracking",
        "string_process": "\nprocess PFT_tracking {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/tracking\", saveAs: { f -> remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(fodf), path(map_include), path(map_exclude), path(seeding_mask)\n        val(caller_name)\n        each seed\n        each algo\n    output:\n        tuple val(sid), path(\"${sid}_pft_${algo}_seed_${seed}_tracking.trk\"), emit: tractogram\n    script:\n        def compress = params.streamline_compression_factor ? '--compress ' + params.streamline_compression_factor : ''\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_compute_pft.py $fodf $seeding_mask $map_include $map_exclude ${sid}_pft_${algo}_seed_${seed}_tracking.trk --algo $algo --${params.pft_seeding_strategy} $params.pft_number_of_seeds --seed $seed --step $params.pft_step_size --theta $params.pft_theta_max --sfthres $params.pft_sfthres --sfthres_init $params.pft_sfthres_init --min_length $params.pft_min_tract_length --max_length $params.pft_max_tract_length --particles $params.pft_number_of_particles --back $params.pft_back_tracking_length --forward $params.pft_forward_tracking_length $compress --sh_basis descoteaux07\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        def compress = params.streamline_compression_factor ? '--compress ' + params.streamline_compression_factor : ''\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_compute_pft.py $fodf $seeding_mask $map_include $map_exclude ${sid}_pft_${algo}_seed_${seed}_tracking.trk --algo $algo --${params.pft_seeding_strategy} $params.pft_number_of_seeds --seed $seed --step $params.pft_step_size --theta $params.pft_theta_max --sfthres $params.pft_sfthres --sfthres_init $params.pft_sfthres_init --min_length $params.pft_min_tract_length --max_length $params.pft_max_tract_length --particles $params.pft_number_of_particles --back $params.pft_back_tracking_length --forward $params.pft_forward_tracking_length $compress --sh_basis descoteaux07\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "fodf",
            "map_include",
            "map_exclude",
            "seeding_mask",
            "caller_name",
            "seed",
            "algo"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/tracking\", saveAs: { f -> remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "scilpy_resample": {
        "name_process": "scilpy_resample",
        "string_process": "\nprocess scilpy_resample {\n    label params.force_resampling_sequential ? \"res_max_cpu\" : \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> f.contains(\"metadata\") ? null : f.contains(\"${mask.simpleName}\") ? (\"$publish_mask\" == \"true\") ? mask_prefix ? \"${sid}_${mask_prefix}.nii.gz\" : remove_alg_suffixes(f) : null : remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(image), file(mask), file(metadata)\n        val(caller_name)\n        val(interpolation)\n        val(publish_mask)\n        val(mask_prefix)\n        val(additional_publish_path)\n    output:\n        tuple val(sid), path(\"${image.getSimpleName()}__resampled.nii.gz\"), emit: image\n        tuple val(sid), path(\"${mask.simpleName}__resampled.nii.gz\"), optional: true, emit: mask\n        tuple val(sid), path(\"${image.getSimpleName()}__resampled_metadata.py\"), optional: true, emit: metadata\n    script:\n        def after_script = \"\"\n        if ( !mask.empty() ) {\n            after_script += \"scil_resample_volume.py $mask mask_resampled.nii.gz --ref ${image.simpleName}__resampled.nii.gz --interp nn --enforce_dimensions\\n\"\n            after_script += \"scil_image_math.py round mask_resampled.nii.gz ${mask.simpleName}__resampled.nii.gz --data_type uint8 -f\\n\"\n        }\n        if ( !metadata.empty() )\n            after_script += \"magic-monkey metadata --in ${image.getSimpleName()}__resampled.nii.gz --update_affine --metadata $metadata\\n\"\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_resample_volume.py $image resampled.nii.gz --voxel_size $params.resampling_resolution --interp $interpolation\n        fslmaths resampled.nii.gz -thr 0 ${image.simpleName}__resampled.nii.gz\n        if [ \"\\$(mrinfo -datatype $image)\" != \"\\$(mrinfo -datatype ${image.simpleName}__resampled.nii.gz)\" ]\n        then\n            mrconvert -force -datatype \"\\$(mrinfo -datatype $image)\" ${image.simpleName}__resampled.nii.gz ${image.simpleName}__resampled.nii.gz\n        fi\n        $after_script\n        \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "        def after_script = \"\"\n        if ( !mask.empty() ) {\n            after_script += \"scil_resample_volume.py $mask mask_resampled.nii.gz --ref ${image.simpleName}__resampled.nii.gz --interp nn --enforce_dimensions\\n\"\n            after_script += \"scil_image_math.py round mask_resampled.nii.gz ${mask.simpleName}__resampled.nii.gz --data_type uint8 -f\\n\"\n        }\n        if ( !metadata.empty() )\n            after_script += \"magic-monkey metadata --in ${image.getSimpleName()}__resampled.nii.gz --update_affine --metadata $metadata\\n\"\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        scil_resample_volume.py $image resampled.nii.gz --voxel_size $params.resampling_resolution --interp $interpolation\n        fslmaths resampled.nii.gz -thr 0 ${image.simpleName}__resampled.nii.gz\n        if [ \"\\$(mrinfo -datatype $image)\" != \"\\$(mrinfo -datatype ${image.simpleName}__resampled.nii.gz)\" ]\n        then\n            mrconvert -force -datatype \"\\$(mrinfo -datatype $image)\" ${image.simpleName}__resampled.nii.gz ${image.simpleName}__resampled.nii.gz\n        fi\n        $after_script\n        \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "mask",
            "metadata",
            "image",
            "caller_name",
            "interpolation",
            "publish_mask",
            "mask_prefix",
            "additional_publish_path"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.force_resampling_sequential ? \"res_max_cpu\" : \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> f.contains(\"metadata\") ? null : f.contains(\"${mask.simpleName}\") ? (\"$publish_mask\" == \"true\") ? mask_prefix ? \"${sid}_${mask_prefix}.nii.gz\" : remove_alg_suffixes(f) : null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "dti_metrics": {
        "name_process": "dti_metrics",
        "string_process": "\nprocess dti_metrics {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/dti\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), val(input_prefix), file(mask), path(data), path(metadata)\n        val(caller_name)\n        path(config)\n    output:\n        tuple val(sid), val(\"${sid}_dti_metrics\"), emit: prefix\n        tuple val(sid), path(\"${sid}_dti_metrics*.nii.gz\"), emit: metrics\n    script:\n        \"\"\"\n        export MRTRIX_RNG_SEED=$params.random_seed\n        magic-monkey dti_metrics --in $input_prefix --out ${sid}_dti_metrics --config $config\n        \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "        \"\"\"\n        export MRTRIX_RNG_SEED=$params.random_seed\n        magic-monkey dti_metrics --in $input_prefix --out ${sid}_dti_metrics --config $config\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "input_prefix",
            "mask",
            "data",
            "metadata",
            "caller_name",
            "config"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/dti\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "scil_compute_dti_fa": {
        "name_process": "scil_compute_dti_fa",
        "string_process": "\nprocess scil_compute_dti_fa {\n    label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$processing_caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", saveAs: { f -> f.contains(\"dti_dti\") ? f : f.contains(\"metadata\") ? f : null }, mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/all/${sid}/$measuring_caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\",saveAs: { f -> f.contains(\"dti_dti\") ? null : f.contains(\"metadata\") ? null : f },  mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/dti\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"dti_dti\") ? f : null : null }, mode: params.publish_mode\n    publishDir \"${params.output_root}/${sid}/dti\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"dti_dti\") ? null : f.contains(\"metadata\") ? null : f : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwi), path(bval), path(bvec), file(mask)\n        val(processing_caller_name)\n        val(measuring_caller_name)\n        val(publish)\n    output:\n        tuple val(sid), val(\"${sid}_dti\"), emit: prefix\n        tuple val(sid), path(\"${sid}_dti_dti.nii.gz\"), emit: dti\n        tuple val(sid), path(\"${sid}_dti_fa.nii.gz\"), emit: fa\n        tuple val(sid), path(\"${sid}_dti_md.nii.gz\"), emit: md\n    script:\n        def avail_threads = Math.round(task.cpus / 3)\n        def remainder_threads = task.cpus - avail_threads\n        def args = \"--tensor ${sid}_dti_dti.nii.gz\"\n        args += \" --fa ${sid}_dti_fa.nii.gz --md ${sid}_dti_md.nii.gz\"\n        def before = \"\"\n        if ( !mask.empty() ) {\n            args += \" --mask $mask\"\n            before += \"scil_image_math.py round $mask mask4scil.nii.gz --data_type uint8 -f\\n\"\n        }\n\n        if ( params.max_dti_bvalue ) {\n            before += \"magic-monkey shells --in $dwi --bvals $bval --bvecs $bvec --shells $params.max_dti_bvalue --keep leq --out dwi_for_dti --with_b0\\n\"\n        }\n        else {\n            before += \"cp $dwi dwi_for_dti.nii.gz\\ncp $bval dwi_for_dti.bval\\ncp $bvec dwi_for_dti.bvec\"\n        }\n\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=${avail_threads + remainder_threads}\n        export OMP_NUM_THREADS=$avail_threads\n        export OPENBLAS_NUM_THREADS=1\n        $before\n        scil_compute_dti_metrics.py dwi_for_dti.nii.gz dwi_for_dti.bval dwi_for_dti.bvec -f --not_all $args\n        \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "        def avail_threads = Math.round(task.cpus / 3)\n        def remainder_threads = task.cpus - avail_threads\n        def args = \"--tensor ${sid}_dti_dti.nii.gz\"\n        args += \" --fa ${sid}_dti_fa.nii.gz --md ${sid}_dti_md.nii.gz\"\n        def before = \"\"\n        if ( !mask.empty() ) {\n            args += \" --mask $mask\"\n            before += \"scil_image_math.py round $mask mask4scil.nii.gz --data_type uint8 -f\\n\"\n        }\n\n        if ( params.max_dti_bvalue ) {\n            before += \"magic-monkey shells --in $dwi --bvals $bval --bvecs $bvec --shells $params.max_dti_bvalue --keep leq --out dwi_for_dti --with_b0\\n\"\n        }\n        else {\n            before += \"cp $dwi dwi_for_dti.nii.gz\\ncp $bval dwi_for_dti.bval\\ncp $bvec dwi_for_dti.bvec\"\n        }\n\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=${avail_threads + remainder_threads}\n        export OMP_NUM_THREADS=$avail_threads\n        export OPENBLAS_NUM_THREADS=1\n        $before\n        scil_compute_dti_metrics.py dwi_for_dti.nii.gz dwi_for_dti.bval dwi_for_dti.bvec -f --not_all $args\n        \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [
            "PopTargs",
            "BEFORE"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs",
            "https://bio.tools/BEFORE"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            },
            {
                "name": "BEFORE",
                "uri": "https://bio.tools/BEFORE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3420",
                            "term": "Reproductive health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3420",
                            "term": "https://en.wikipedia.org/wiki/Reproductive_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "development and alpha testing of a fertility tool for premenopausal breast cancer patients.\n\nBACKGROUND:Premenopausal breast cancer patients are at risk of treatment-related infertility. Many patients do not receive sufficient fertility information before treatment. As such, our team developed and alpha tested the Begin Exploring Fertility Options, Risks, and Expectations decision aid (BEFORE DA). METHODS:The BEFORE DA development process was guided by the International Patient Decision Aids Standards and the Ottawa Decision Support Framework. Our team used integrated knowledge translation by collaborating with multiple stakeholders throughout the development process including breast cancer survivors, multi-disciplinary health care providers (HCPs), advocates, and cancer organization representatives.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'fertilityaid', 'fertility', 'fertility fertility', 'premenopausal'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31660965"
            }
        ],
        "inputs": [
            "sid",
            "mask",
            "dwi",
            "bval",
            "bvec",
            "processing_caller_name",
            "measuring_caller_name",
            "publish"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$processing_caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", saveAs: { f -> f.contains(\"dti_dti\") ? f : f.contains(\"metadata\") ? f : null }, mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/all/${sid}/$measuring_caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\",saveAs: { f -> f.contains(\"dti_dti\") ? null : f.contains(\"metadata\") ? null : f }, mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/dti\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"dti_dti\") ? f : null : null }, mode: params.publish_mode",
            "publishDir \"${params.output_root}/${sid}/dti\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"dti_dti\") ? null : f.contains(\"metadata\") ? null : f : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "scil_dti_and_metrics": {
        "name_process": "scil_dti_and_metrics",
        "string_process": "\nprocess scil_dti_and_metrics {\n    label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$processing_caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", saveAs: { f -> f.contains(\"dti_dti\") ? f : f.contains(\"metadata\") ? f : null }, mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/all/${sid}/$measuring_caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\",saveAs: { f -> f.contains(\"dti_dti\") ? null : f.contains(\"metadata\") ? null : f },  mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/dti\", saveAs: { f -> f.contains(\"dti_dti\") ? f : null }, mode: params.publish_mode\n    publishDir \"${params.output_root}/${sid}/dti\", saveAs: { f -> f.contains(\"dti_dti\") ? null : f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwi), path(bval), path(bvec), path(mask)\n        val(processing_caller_name)\n        val(measuring_caller_name)\n    output:\n        tuple val(sid), val(\"${sid}_dti\"), emit: prefix\n        tuple val(sid), path(\"${sid}_dti_dti.nii.gz\"), emit: dti\n        tuple val(sid), path(\"${sid}_dti_evals.nii.gz\"), path(\"${sid}_dti_evecs.nii.gz\"), path(\"${sid}_dti_evals_*.nii.gz\"), path(\"${sid}_dti_evecs_*.nii.gz\"), emit: eigen\n        tuple val(sid), path(\"${sid}_dti_fa.nii.gz\"), path(\"${sid}_dti_ga.nii.gz\"), path(\"${sid}_dti_rgb.nii.gz\"), emit: aniso\n        tuple val(sid), path(\"${sid}_dti_md.nii.gz\"), path(\"${sid}_dti_ad.nii.gz\"), path(\"${sid}_dti_rd.nii.gz\"), path(\"${sid}_dti_mode.nii.gz\"), path(\"${sid}_dti_norm.nii.gz\"), emit: iso\n        tuple val(sid), path(\"${sid}_dti_non_physical.nii.gz\"), path(\"${sid}_dti_pulsation*.nii.gz\"), emit: artifacts, optional: true\n        tuple val(sid), path(\"${sid}_dti_residuals.nii.gz\"), path(\"${sid}_dti_residuals*.nii.gz\"), emit: residuals, optional: true\n    script:\n        def avail_threads = Math.round(task.cpus / 3)\n        def remainder_threads = task.cpus - avail_threads\n        def args = \"--tensor ${sid}_dti_dti.nii.gz --evals ${sid}_dti_evals.nii.gz --evecs ${sid}_dti_evecs.nii.gz\"\n        args += \" --fa ${sid}_dti_fa.nii.gz --ga ${sid}_dti_ga.nii.gz --rgb ${sid}_dti_rgb.nii.gz\"\n        args += \" --md ${sid}_dti_md.nii.gz --ad ${sid}_dti_ad.nii.gz --rd ${sid}_dti_rd.nii.gz --mode ${sid}_dti_mode.nii.gz --norm ${sid}_dti_norm.nii.gz\"\n        args += \" --residual ${sid}_dti_residuals.nii.gz\"\n        if ( params.verbose_outputs )\n            args += \" --non-physical ${sid}_dti_non_physical.nii.gz --pulsation ${sid}_dti_pulsation.nii.gz\"\n\n        before = \"\"\n        if ( params.max_dti_bvalue ) {\n            before += \"magic-monkey shells --in $dwi --bvals $bval --bvecs $bvec --shells $params.max_dti_bvalue --keep leq --out dwi_for_dti --with_b0\\n\"\n        }\n        else {\n            before += \"cp $dwi dwi_for_dti.nii.gz\\ncp $bval dwi_for_dti.bval\\ncp $bvec dwi_for_dti.bvec\"\n        }\n\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=${avail_threads + remainder_threads}\n        export OMP_NUM_THREADS=$avail_threads\n        export OPENBLAS_NUM_THREADS=1\n        scil_image_math.py round $mask mask4scil.nii.gz --data_type uint8 -f\n        $before\n        scil_compute_dti_metrics.py dwi_for_dti.nii.gz dwi_for_dti.bval dwi_for_dti.bvec --mask mask4scil.nii.gz -f --not_all $args\n        \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "        def avail_threads = Math.round(task.cpus / 3)\n        def remainder_threads = task.cpus - avail_threads\n        def args = \"--tensor ${sid}_dti_dti.nii.gz --evals ${sid}_dti_evals.nii.gz --evecs ${sid}_dti_evecs.nii.gz\"\n        args += \" --fa ${sid}_dti_fa.nii.gz --ga ${sid}_dti_ga.nii.gz --rgb ${sid}_dti_rgb.nii.gz\"\n        args += \" --md ${sid}_dti_md.nii.gz --ad ${sid}_dti_ad.nii.gz --rd ${sid}_dti_rd.nii.gz --mode ${sid}_dti_mode.nii.gz --norm ${sid}_dti_norm.nii.gz\"\n        args += \" --residual ${sid}_dti_residuals.nii.gz\"\n        if ( params.verbose_outputs )\n            args += \" --non-physical ${sid}_dti_non_physical.nii.gz --pulsation ${sid}_dti_pulsation.nii.gz\"\n\n        before = \"\"\n        if ( params.max_dti_bvalue ) {\n            before += \"magic-monkey shells --in $dwi --bvals $bval --bvecs $bvec --shells $params.max_dti_bvalue --keep leq --out dwi_for_dti --with_b0\\n\"\n        }\n        else {\n            before += \"cp $dwi dwi_for_dti.nii.gz\\ncp $bval dwi_for_dti.bval\\ncp $bvec dwi_for_dti.bvec\"\n        }\n\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=${avail_threads + remainder_threads}\n        export OMP_NUM_THREADS=$avail_threads\n        export OPENBLAS_NUM_THREADS=1\n        scil_image_math.py round $mask mask4scil.nii.gz --data_type uint8 -f\n        $before\n        scil_compute_dti_metrics.py dwi_for_dti.nii.gz dwi_for_dti.bval dwi_for_dti.bvec --mask mask4scil.nii.gz -f --not_all $args\n        \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "PopTargs",
            "BEFORE"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs",
            "https://bio.tools/BEFORE"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            },
            {
                "name": "BEFORE",
                "uri": "https://bio.tools/BEFORE",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature and language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3420",
                            "term": "Reproductive health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Language"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3068",
                            "term": "Literature"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3420",
                            "term": "https://en.wikipedia.org/wiki/Reproductive_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "Splitting"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3359",
                                    "term": "File splitting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "development and alpha testing of a fertility tool for premenopausal breast cancer patients.\n\nBACKGROUND:Premenopausal breast cancer patients are at risk of treatment-related infertility. Many patients do not receive sufficient fertility information before treatment. As such, our team developed and alpha tested the Begin Exploring Fertility Options, Risks, and Expectations decision aid (BEFORE DA). METHODS:The BEFORE DA development process was guided by the International Patient Decision Aids Standards and the Ottawa Decision Support Framework. Our team used integrated knowledge translation by collaborating with multiple stakeholders throughout the development process including breast cancer survivors, multi-disciplinary health care providers (HCPs), advocates, and cancer organization representatives.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'fertilityaid', 'fertility', 'fertility fertility', 'premenopausal'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31660965"
            }
        ],
        "inputs": [
            "sid",
            "dwi",
            "bval",
            "bvec",
            "mask",
            "processing_caller_name",
            "measuring_caller_name"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$processing_caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", saveAs: { f -> f.contains(\"dti_dti\") ? f : f.contains(\"metadata\") ? f : null }, mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/all/${sid}/$measuring_caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\",saveAs: { f -> f.contains(\"dti_dti\") ? null : f.contains(\"metadata\") ? null : f }, mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/dti\", saveAs: { f -> f.contains(\"dti_dti\") ? f : null }, mode: params.publish_mode",
            "publishDir \"${params.output_root}/${sid}/dti\", saveAs: { f -> f.contains(\"dti_dti\") ? null : f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "diamond_metrics": {
        "name_process": "diamond_metrics",
        "string_process": "\nprocess diamond_metrics {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/diamond\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), val(input_prefix), file(mask), path(data), path(metadata)\n        val(caller_name)\n        path(config)\n    output:\n        tuple val(sid), val(\"${sid}_diamond_metrics\"), emit: prefix\n        tuple val(sid), path(\"${sid}_diamond_metrics*.nii.gz\"), emit: metrics\n    script:\n        def args = \"--in $input_prefix\"\n        if ( !mask.empty() ) {\n            args += \" --mask $mask\"\n        }\n        \"\"\"\n        magic-monkey diamond_metrics $args --out ${sid}_diamond_metrics --config $config\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        def args = \"--in $input_prefix\"\n        if ( !mask.empty() ) {\n            args += \" --mask $mask\"\n        }\n        \"\"\"\n        magic-monkey diamond_metrics $args --out ${sid}_diamond_metrics --config $config\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "input_prefix",
            "mask",
            "data",
            "metadata",
            "caller_name",
            "config"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/diamond\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "odf_metrics": {
        "name_process": "odf_metrics",
        "string_process": "\nprocess odf_metrics {\n    label params.conservative_resources ? \"res_conservative\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(wm_odfs), file(csf_odfs), path(fa), path(md), path(mask)\n        val(caller_name)\n        val(basis)\n    output:\n        tuple val(sid), val(\"${sid}_fodf_metrics\"), emit: prefix\n        tuple val(sid), path(\"${sid}_fodf_metrics*.nii.gz\"), emit: metrics\n    script:\n        def args = \"\"\n        def csf_f = csf_odfs.empty() ? \"$wm_odfs\" : \"$csf_odfs\"\n        if ( params.ventricles_center )\n            args += \" --center ${ params.ventricles_center.join(' ') }\"\n        \"\"\"\n        scil_compute_fodf_max_in_ventricles.py $csf_f $fa $md --max_value_output vmax.txt --sh_basis descoteaux07 --fa_t $params.max_fa_ventricle --md_t $params.min_md_ventricle --mask_output vmask.nii.gz -f $args\n        abs_threshold=\\$(echo $params.fodf_max_absolute_factor*\\$(cat vmax.txt)|bc)\n        scil_compute_fodf_metrics.py --rt $params.fodf_relative_thr --at \\${abs_threshold} --sh_basis $basis --mask $mask --afd_max ${sid}_fodf_metrics_afd.nii.gz --afd_total ${sid}_fodf_metrics_afdt.nii.gz --afd_sum ${sid}_fodf_metrics_afds.nii.gz --nufo ${sid}_fodf_metrics_nufo.nii.gz --peaks ${sid}_fodf_metrics_peaks.nii.gz --rgb ${sid}_fodf_metrics_rgb.nii.gz --peak_values ${sid}_fodf_metrics_peaks_values.nii.gz --peak_indices ${sid}_fodf_metrics_peaks_indices.nii.gz $wm_odfs\n        \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "        def args = \"\"\n        def csf_f = csf_odfs.empty() ? \"$wm_odfs\" : \"$csf_odfs\"\n        if ( params.ventricles_center )\n            args += \" --center ${ params.ventricles_center.join(' ') }\"\n        \"\"\"\n        scil_compute_fodf_max_in_ventricles.py $csf_f $fa $md --max_value_output vmax.txt --sh_basis descoteaux07 --fa_t $params.max_fa_ventricle --md_t $params.min_md_ventricle --mask_output vmask.nii.gz -f $args\n        abs_threshold=\\$(echo $params.fodf_max_absolute_factor*\\$(cat vmax.txt)|bc)\n        scil_compute_fodf_metrics.py --rt $params.fodf_relative_thr --at \\${abs_threshold} --sh_basis $basis --mask $mask --afd_max ${sid}_fodf_metrics_afd.nii.gz --afd_total ${sid}_fodf_metrics_afdt.nii.gz --afd_sum ${sid}_fodf_metrics_afds.nii.gz --nufo ${sid}_fodf_metrics_nufo.nii.gz --peaks ${sid}_fodf_metrics_peaks.nii.gz --rgb ${sid}_fodf_metrics_rgb.nii.gz --peak_values ${sid}_fodf_metrics_peaks_values.nii.gz --peak_indices ${sid}_fodf_metrics_peaks_indices.nii.gz $wm_odfs\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "csf_odfs",
            "wm_odfs",
            "fa",
            "md",
            "mask",
            "caller_name",
            "basis"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.conservative_resources ? \"res_conservative\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "extract_b0": {
        "name_process": "extract_b0",
        "string_process": "\nprocess extract_b0 {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : add_suffix(remove_alg_suffixes(f), \"_b0\") : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwi), path(bval), path(metadata)\n        val(caller_name)\n        val(publish)\n        path(config)\n    output:\n        tuple val(sid), path(\"${dwi.simpleName}_b0.nii.gz\"), emit: b0\n        tuple val(sid), path(\"${dwi.simpleName}_b0*_metadata.*\"), optional: true, emit: metadata\n    script:\n        def extra_args = params.b0_threshold ? \"--ceil ${params.b0_threshold}\" : \"\"\n        \"\"\"\n        magic-monkey b0 extract --in $dwi --bvals $bval --out ${dwi.simpleName}_b0 --config $config $extra_args\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        def extra_args = params.b0_threshold ? \"--ceil ${params.b0_threshold}\" : \"\"\n        \"\"\"\n        magic-monkey b0 extract --in $dwi --bvals $bval --out ${dwi.simpleName}_b0 --config $config $extra_args\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "dwi",
            "bval",
            "metadata",
            "caller_name",
            "publish",
            "config"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : add_suffix(remove_alg_suffixes(f), \"_b0\") : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "squash_b0": {
        "name_process": "squash_b0",
        "string_process": "\nprocess squash_b0 {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : remove_alg_suffixes(f) : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwi), path(bval), path(bvec), path(metadata)\n        val(caller_name)\n        val(publish)\n        path(config)\n        val(additional_publish_path)\n    output:\n        tuple val(sid), path(\"${dwi.simpleName}__b0_squashed.nii.gz\"), path(\"${dwi.simpleName}__b0_squashed.bval\"), path(\"${dwi.simpleName}__b0_squashed.bvec\"), emit: dwi\n        tuple val(sid), path(\"${dwi.simpleName}__b0_squashed_metadata.*\"), optional: true, emit: metadata\n    script:\n        def extra_args = params.b0_threshold ? \"--ceil ${params.b0_threshold}\" : \"\"\n        \"\"\"\n        magic-monkey b0 squash --in $dwi --bvals $bval --bvecs $bvec --out ${dwi.simpleName}__b0_squashed --config $config $extra_args\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        def extra_args = params.b0_threshold ? \"--ceil ${params.b0_threshold}\" : \"\"\n        \"\"\"\n        magic-monkey b0 squash --in $dwi --bvals $bval --bvecs $bvec --out ${dwi.simpleName}__b0_squashed --config $config $extra_args\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "dwi",
            "bval",
            "bvec",
            "metadata",
            "caller_name",
            "publish",
            "config",
            "additional_publish_path"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : remove_alg_suffixes(f) : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "prepare_metadata": {
        "name_process": "prepare_metadata",
        "string_process": "\nprocess prepare_metadata {\n    label \"res_single_cpu\"\n    input:\n        tuple val(sid), path(image), file(metadata), val(reverse)\n    output:\n        tuple val(sid), path(\"${image.simpleName}_metadata.py\")\n    script:\n        def args = \"\"\n        if ( !metadata.empty() )\n            args += \"--json $metadata\"\n        else\n            args = metadata_from_params(reverse)\n\n        \"\"\"\n        magic-monkey metadata --in $image $args\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        def args = \"\"\n        if ( !metadata.empty() )\n            args += \"--json $metadata\"\n        else\n            args = metadata_from_params(reverse)\n\n        \"\"\"\n        magic-monkey metadata --in $image $args\n        \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "reverse",
            "metadata",
            "image"
        ],
        "nb_inputs": 4,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\""
        ],
        "when": "",
        "stub": ""
    },
    "ants_register_dwi_repetition": {
        "name_process": "ants_register_dwi_repetition",
        "string_process": "\nprocess ants_register_dwi_repetition {\n    label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(target_b0), val(rep_idx), path(dwi), path(bval), path(bvec), path(metadata)\n        val(caller_name)\n        path(b0_config)\n        path(reg_config)\n        path(trans_config)\n    output:\n        tuple val(\"${sid}_${rep_idx}\"), path(\"${dwi.simpleName}__rep_registered.nii.gz\"), path(\"${dwi.simpleName}__rep_registered.bval\"), path(\"${dwi.simpleName}__rep_registered.bvec\"), emit: dwi\n        tuple val(\"${sid}_${rep_idx}\"), path(\"${dwi.simpleName}__rep_registered_metadata.*\"), emit: metadata\n    script:\n    \"\"\"\n    export OMP_NUM_THREADS=$task.cpus\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n    export OPENBLAS_NUM_THREADS=1\n    magic-monkey b0 extract --in $dwi --bvals $bval --out rep_b0 --config $b0_config\n    magic-monkey ants_registration --target ${target_b0} --moving rep_b0.nii.gz --out b0_registration --config $reg_config\n    magic-monkey ants_transform --in $dwi --ref ${target_b0} --trans b0_registration0GenericAffine.mat --bvecs $bvec --out ${dwi.simpleName}__rep_registered --config $trans_config\n    cp $bval ${dwi.simpleName}__rep_registered.bval\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    export OMP_NUM_THREADS=$task.cpus\n    export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n    export OPENBLAS_NUM_THREADS=1\n    magic-monkey b0 extract --in $dwi --bvals $bval --out rep_b0 --config $b0_config\n    magic-monkey ants_registration --target ${target_b0} --moving rep_b0.nii.gz --out b0_registration --config $reg_config\n    magic-monkey ants_transform --in $dwi --ref ${target_b0} --trans b0_registration0GenericAffine.mat --bvecs $bvec --out ${dwi.simpleName}__rep_registered --config $trans_config\n    cp $bval ${dwi.simpleName}__rep_registered.bval\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "rep_idx",
            "target_b0",
            "dwi",
            "bval",
            "bvec",
            "metadata",
            "caller_name",
            "b0_config",
            "reg_config",
            "trans_config"
        ],
        "nb_inputs": 11,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "ants_register_t1_repetition": {
        "name_process": "ants_register_t1_repetition",
        "string_process": "\nprocess ants_register_t1_repetition {\n    label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(ref_t1), val(rep_idx), path(t1), file(mask)\n        val(caller_name)\n        file(reg_config)\n    output:\n        tuple val(\"${sid}_${rep_idx}\"), path(\"${t1.simpleName}__rep_registered.nii.gz\"), emit: t1\n        tuple val(\"${sid}_${rep_idx}\"), path(\"${mask.simpleName}__rep_registered.nii.gz\"), emit: mask, optional: true\n    script:\n        def command = \"\"\n        if (!mask.empty()) {\n            command += \"magic-monkey ants_transform --in $mask --ref $ref_t1 --trans t1_registration0GenericAffine.mat --out ${mask.simpleName}__rep_registered\"\n        }\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        magic-monkey ants_registration --target $ref_t1 --moving $t1 --out t1_registration --config $reg_config\n        magic-monkey ants_transform --in $t1 --ref $ref_t1 --trans t1_registration0GenericAffine.mat --out ${t1.simpleName}__rep_registered\n        $command\n        \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "        def command = \"\"\n        if (!mask.empty()) {\n            command += \"magic-monkey ants_transform --in $mask --ref $ref_t1 --trans t1_registration0GenericAffine.mat --out ${mask.simpleName}__rep_registered\"\n        }\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        magic-monkey ants_registration --target $ref_t1 --moving $t1 --out t1_registration --config $reg_config\n        magic-monkey ants_transform --in $t1 --ref $ref_t1 --trans t1_registration0GenericAffine.mat --out ${t1.simpleName}__rep_registered\n        $command\n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "COMMAND"
        ],
        "tools_url": [
            "https://bio.tools/COMMAND"
        ],
        "tools_dico": [
            {
                "name": "COMMAND",
                "uri": "https://bio.tools/COMMAND",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarray experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3518",
                            "term": "Microarrays"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3800",
                                    "term": "RNA-Seq quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Web-based application used to download, collect and manage gene expression data from public databases.",
                "homepage": "https://github.com/marcomoretto/command"
            }
        ],
        "inputs": [
            "sid",
            "rep_idx",
            "mask",
            "ref_t1",
            "t1",
            "caller_name",
            "reg_config"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "deepbet_t1": {
        "name_process": "deepbet_t1",
        "string_process": "\nprocess deepbet_t1 {\n    label params.use_cuda ? \"res_single_cpu\" : params.on_hcp ? \"res_full_node_override\" : \"res_max_cpu\"\n    label params.use_cuda ? \"res_gpu\" : \"\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(t1_image)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${t1_image.simpleName}_mask.nii.gz\"), emit: mask\n    script:\n        \"\"\"\n        muSkullStrip.py -in $t1_image -model ${params.deep_bet_model} -suffix mask\n        \"\"\"\n\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        muSkullStrip.py -in $t1_image -model ${params.deep_bet_model} -suffix mask\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "t1_image",
            "caller_name"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.use_cuda ? \"res_single_cpu\" : params.on_hcp ? \"res_full_node_override\" : \"res_max_cpu\"",
            "label params.use_cuda ? \"res_gpu\" : \"\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "bet_mask": {
        "name_process": "bet_mask",
        "string_process": "\nprocess bet_mask {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : add_suffix(remove_alg_suffixes(f), \"_bet_mask\") : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(img)\n        val(caller_name)\n        val(publish)\n    output:\n        tuple val(sid), path(\"${img.simpleName}_bet_mask.nii.gz\")\n    script:\n        \"\"\"\n        fslmaths $img -Tmean mean_image.nii.gz\n        bet mean_image.nii.gz \"${img.simpleName}_bet.nii.gz\" -m -R -f $params.bet_f\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        fslmaths $img -Tmean mean_image.nii.gz\n        bet mean_image.nii.gz \"${img.simpleName}_bet.nii.gz\" -m -R -f $params.bet_f\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "DBETH"
        ],
        "tools_url": [
            "https://bio.tools/dbeth"
        ],
        "tools_dico": [
            {
                "name": "DBETH",
                "uri": "https://bio.tools/dbeth",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2840",
                            "term": "Toxicology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2815",
                            "term": "Human biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_2815",
                            "term": "Humans"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Fold recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Virulence prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3439",
                                    "term": "Pathway or network prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3092",
                                    "term": "Protein feature detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Protein domain prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Fold prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Protein fold recognition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Domain prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0303",
                                    "term": "Protein fold prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3461",
                                    "term": "Pathogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Protein structure comparative modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0477",
                                    "term": "Homology structure modelling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3092",
                                    "term": "Protein feature prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3092",
                                    "term": "Protein feature recognition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database of sequences, structures, interaction networks and analytical results for 229 exotoxins, from 26 different human pathogenic bacterial genus. All toxins are classified into 24 different Toxin classes. The aim is to provide a comprehensive database for human pathogenic bacterial exotoxins.",
                "homepage": "http://www.hpppi.iicb.res.in/btox/"
            }
        ],
        "inputs": [
            "sid",
            "img",
            "caller_name",
            "publish"
        ],
        "nb_inputs": 4,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : add_suffix(remove_alg_suffixes(f), \"_bet_mask\") : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "apply_mask": {
        "name_process": "apply_mask",
        "string_process": "\nprocess apply_mask {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : add_suffix(remove_alg_suffixes(f), \"_masked\") : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(img), path(mask), file(metadata)\n        val(caller_name)\n        val(publish)\n    output:\n        tuple val(sid), path(\"${img.simpleName}__masked.nii.gz\"), emit: image\n        tuple val(sid), path(\"${img.simpleName}__masked_metadata.*\"), optional: true, emit: metadata\n    script:\n        \"\"\"\n        magic-monkey apply_mask --in $img --mask $mask --out ${img.simpleName}__masked.nii.gz\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        magic-monkey apply_mask --in $img --mask $mask --out ${img.simpleName}__masked.nii.gz\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "metadata",
            "img",
            "mask",
            "caller_name",
            "publish"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : add_suffix(remove_alg_suffixes(f), \"_masked\") : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "cat_datasets": {
        "name_process": "cat_datasets",
        "string_process": "\nprocess cat_datasets {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n\n    input:\n        tuple val(sid), path(imgs), file(bval), file(bvec), file(metadatas)\n        val(prefix)\n        val(caller_name)\n        path(config)\n    output:\n        tuple val(sid), path(\"${sid}_${prefix}__concatenated.nii.gz\"), emit: image\n        tuple val(sid), path(\"${sid}_${prefix}__concatenated.bval\"), optional: true, emit: bval\n        tuple val(sid), path(\"${sid}_${prefix}__concatenated.bvec\"), optional: true, emit: bvec\n        tuple val(sid), path(\"${sid}_${prefix}__concatenated_metadata.*\"), optional: true, emit: metadata\n    script:\n        def args = \"--in ${imgs.join(',')}\"\n\n        if ( bval.size() > 0 )\n            args += \" --bvals ${bval.join(',')}\"\n        if ( bvec.size() > 0 )\n            args += \" --bvecs ${bvec.join(',')}\"\n\n        \"\"\"\n        magic-monkey concatenate $args --out ${sid}_${prefix}__concatenated --config $config\n        \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "        def args = \"--in ${imgs.join(',')}\"\n\n        if ( bval.size() > 0 )\n            args += \" --bvals ${bval.join(',')}\"\n        if ( bvec.size() > 0 )\n            args += \" --bvecs ${bvec.join(',')}\"\n\n        \"\"\"\n        magic-monkey concatenate $args --out ${sid}_${prefix}__concatenated --config $config\n        \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "bval",
            "bvec",
            "metadatas",
            "imgs",
            "prefix",
            "caller_name",
            "config"
        ],
        "nb_inputs": 8,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all"
        ],
        "when": "",
        "stub": ""
    },
    "split_image": {
        "name_process": "split_image",
        "string_process": "\nprocess split_image {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/$caller_name\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(img), path(metadata)\n        val(split_axis)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${img.simpleName}_splitted_ax${split_axis}_[0-9]*.nii.gz\"), emit: images\n        tuple val(sid), path(\"${img.simpleName}_splitted_ax${split_axis}_*_metadata.*\"), optional: true, emit: metadata\n    script:\n        \"\"\"\n        magic-monkey split --image $img --prefix \"${img.simpleName}_splitted\" --axis $split_axis\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        magic-monkey split --image $img --prefix \"${img.simpleName}_splitted\" --axis $split_axis\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "img",
            "metadata",
            "split_axis",
            "caller_name"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/$caller_name\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "join_images": {
        "name_process": "join_images",
        "string_process": "\nprocess join_images {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/$caller_name\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), val(prefix), path(imgs), path(metadatas)\n        val(split_axis)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${sid}__joined_ax${split_axis}.nii.gz\"), emit: image\n        tuple val(sid), path(\"${sid}__joined_ax${split_axis}_*_metadata.*\"), optional: true, emit: metadata\n    script:\n        \"\"\"\n        magic-monkey split --image ${sid}__joined_ax${split_axis}.nii.gz --prefix $prefix --axis $split_axis --inverse\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        magic-monkey split --image ${sid}__joined_ax${split_axis}.nii.gz --prefix $prefix --axis $split_axis --inverse\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "prefix",
            "imgs",
            "metadatas",
            "split_axis",
            "caller_name"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/$caller_name\", saveAs: { f -> f.contains(\"metadata\") ? null : f }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "apply_topup": {
        "name_process": "apply_topup",
        "string_process": "\nprocess apply_topup {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwis), path(bvals), path(bvecs), path(revs), path(topup_params), val(topup_prefix), path(topup_files), path(metadata)\n        val(caller_name)\n        val(additional_publish_path)\n    output:\n        tuple val(sid), path(\"${sid}_dwi__topup_corrected_*.nii.gz\"), path(\"${sid}_dwi__topup_corrected_*.bval\"), path(\"${sid}_dwi__topup_corrected_*.bvec\"), emit: dwi\n        tuple val(sid), path(\"${sid}_dwi__topup_corrected_*_metadata.*\"), optional: true, emit: metadata\n    script:\n        \"\"\"\n        magic-monkey apply_topup --dwi ${dwis.join(\",\")} --bvals ${bvals.join(\",\")} --bvecs ${bvecs.join(\",\")} --rev ${revs.join(\",\")} --acqp $topup_params --topup $topup_prefix --out ${sid}_dwi__topup_corrected\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        magic-monkey apply_topup --dwi ${dwis.join(\",\")} --bvals ${bvals.join(\",\")} --bvecs ${bvecs.join(\",\")} --rev ${revs.join(\",\")} --acqp $topup_params --topup $topup_prefix --out ${sid}_dwi__topup_corrected\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "topup_prefix",
            "dwis",
            "bvals",
            "bvecs",
            "revs",
            "topup_params",
            "topup_files",
            "metadata",
            "caller_name",
            "additional_publish_path"
        ],
        "nb_inputs": 11,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "tournier2descoteaux_odf": {
        "name_process": "tournier2descoteaux_odf",
        "string_process": "\nprocess tournier2descoteaux_odf {\n    label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(odfs)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${odfs.simpleName}_desc07_odf.nii.gz\"), emit: odfs\n    script:\n        \"\"\"\n        scil_convert_sh_basis.py $odfs ${odfs.simpleName}_desc07_odf.nii.gz tournier07\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        scil_convert_sh_basis.py $odfs ${odfs.simpleName}_desc07_odf.nii.gz tournier07\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "odfs",
            "caller_name"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/fodf\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "convert_float_to_integer": {
        "name_process": "convert_float_to_integer",
        "string_process": "\nprocess convert_float_to_integer {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : publish_suffix ? \"${sid}_${publish_suffix}.nii.gz\" : remove_alg_suffixes(f) : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(image)\n        val(datatype)\n        val(caller_name)\n        val(publish)\n        val(publish_suffix)\n        val(additional_publish_path)\n    output:\n        tuple val(sid), path(\"${image.simpleName}__uint8.nii.gz\"), emit: image\n    script:\n        \"\"\"\n        scil_image_math.py round $image ${image.simpleName}__${datatype}.nii.gz -f --data_type $datatype\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        scil_image_math.py round $image ${image.simpleName}__${datatype}.nii.gz -f --data_type $datatype\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "image",
            "datatype",
            "caller_name",
            "publish",
            "publish_suffix",
            "additional_publish_path"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : publish_suffix ? \"${sid}_${publish_suffix}.nii.gz\" : remove_alg_suffixes(f) : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "replicate_image": {
        "name_process": "replicate_image",
        "string_process": "\nprocess replicate_image {\n    label \"res_single_cpu\"\n\n    input:\n        tuple val(sid), path(img), path(ref_img)\n        val(idx_to_rep)\n    output:\n        tuple val(sid), path(\"${img.simpleName}__replicated.nii.gz\"), emit: image\n    script:\n        def args = \"\"\n        if ( \"$idx_to_rep\" )\n            args += \"--idx $idx_to_rep\"\n        \"\"\"\n        magic-monkey replicate --in $img --ref $ref_img --out ${img.simpleName}__replicated.nii.gz $args\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        def args = \"\"\n        if ( \"$idx_to_rep\" )\n            args += \"--idx $idx_to_rep\"\n        \"\"\"\n        magic-monkey replicate --in $img --ref $ref_img --out ${img.simpleName}__replicated.nii.gz $args\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "img",
            "ref_img",
            "idx_to_rep"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\""
        ],
        "when": "",
        "stub": ""
    },
    "check_dwi_conformity": {
        "name_process": "check_dwi_conformity",
        "string_process": "\nprocess check_dwi_conformity {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode\n    \n    input:\n        tuple val(sid), path(dwi), path(bval), path(bvec), file(metadata)\n        val(error_strategy)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${dwi.simpleName}__checked.nii.gz\"), path(\"${dwi.simpleName}__checked.bval\"), path(\"${dwi.simpleName}__checked.bvec\"), emit: dwi\n        tuple val(sid), path(\"${dwi.simpleName}__checked_metadata.*\"), emit: metadata, optional: true\n    script:\n        \"\"\"\n        magic-monkey check --in $dwi --bvals $bval --bvecs $bvec --strat $error_strategy --out ${dwi.simpleName}__checked\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        \"\"\"\n        magic-monkey check --in $dwi --bvals $bval --bvecs $bvec --strat $error_strategy --out ${dwi.simpleName}__checked\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "metadata",
            "dwi",
            "bval",
            "bvec",
            "error_strategy",
            "caller_name"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "pvf_to_mask": {
        "name_process": "pvf_to_mask",
        "string_process": "\nprocess pvf_to_mask {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(wm_pvf), path(gm_pvf), path(csf_pvf), path(brain_mask)\n        val(caller_name)\n        val(additional_publish_path)\n    output:\n        tuple val(sid), path(\"${sid}_wm_mask.nii.gz\"), emit: wm_mask\n        tuple val(sid), path(\"${sid}_gm_mask.nii.gz\"), emit: gm_mask\n        tuple val(sid), path(\"${sid}_csf_mask.nii.gz\"), emit: csf_mask\n        tuple val(sid), path(\"${sid}_safe_wm_mask.nii.gz\"), emit: safe_wm_mask\n    script:\n        \"\"\"\n        scil_image_math.py round $wm_pvf ${sid}_wm_mask.nii.gz --data_type uint8\n        scil_image_math.py round $gm_pvf ${sid}_gm_mask.nii.gz --data_type uint8\n        scil_image_math.py round $csf_pvf ${sid}_csf_mask.nii.gz --data_type uint8\n\n        scil_image_math.py lower_threshold_eq $csf_pvf 0.001 csf_map.nii.gz\n        scil_image_math.py dilation csf_map.nii.gz 1 csf_map.nii.gz -f --data_type uint8\n        scil_image_math.py difference ${sid}_wm_mask.nii.gz csf_map.nii.gz ${sid}_safe_wm_mask.nii.gz\n        scil_image_math.py difference ${sid}_safe_wm_mask.nii.gz ${sid}_gm_mask.nii.gz ${sid}_safe_wm_mask.nii.gz -f\n        scil_image_math.py intersection ${sid}_safe_wm_mask.nii.gz $brain_mask ${sid}_safe_wm_mask.nii.gz -f\n        \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "        \"\"\"\n        scil_image_math.py round $wm_pvf ${sid}_wm_mask.nii.gz --data_type uint8\n        scil_image_math.py round $gm_pvf ${sid}_gm_mask.nii.gz --data_type uint8\n        scil_image_math.py round $csf_pvf ${sid}_csf_mask.nii.gz --data_type uint8\n\n        scil_image_math.py lower_threshold_eq $csf_pvf 0.001 csf_map.nii.gz\n        scil_image_math.py dilation csf_map.nii.gz 1 csf_map.nii.gz -f --data_type uint8\n        scil_image_math.py difference ${sid}_wm_mask.nii.gz csf_map.nii.gz ${sid}_safe_wm_mask.nii.gz\n        scil_image_math.py difference ${sid}_safe_wm_mask.nii.gz ${sid}_gm_mask.nii.gz ${sid}_safe_wm_mask.nii.gz -f\n        scil_image_math.py intersection ${sid}_safe_wm_mask.nii.gz $brain_mask ${sid}_safe_wm_mask.nii.gz -f\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "wm_pvf",
            "gm_pvf",
            "csf_pvf",
            "brain_mask",
            "caller_name",
            "additional_publish_path"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "crop_image": {
        "name_process": "crop_image",
        "string_process": "\nprocess crop_image {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> f.contains(\"${mask.simpleName}\") ? (\"$publish_mask\" == \"true\") ? mask_prefix ? \"${sid}_${mask_prefix}.nii.gz\" : remove_alg_suffixes(f) : null : f.contains(\"cropped.nii.gz\") ? remove_alg_suffixes(f) : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(image), file(mask), file(bounding_box), file(metadata)\n        val(caller_name)\n        val(publish_mask)\n        val(mask_prefix)\n        val(additional_publish_path)\n    output:\n        tuple val(sid), path(\"${image.simpleName}__cropped.nii.gz\"), emit: image\n        tuple val(sid), path(\"${image.simpleName}__bbox.pkl\"), emit: bbox, optional: true\n        tuple val(sid), path(\"${mask.simpleName}__cropped.nii.gz\"), emit: mask, optional: true\n        tuple val(sid), path(\"${image.simpleName}__cropped_metadata.py\"), emit: metadata, optional: true\n    script:\n        def args = \"\"\n        def img = \"$image\"\n        def before_script = []\n        def after_script = []\n\n        if ( !bounding_box.empty() ) {\n            args += \"--input_bbox $bounding_box\"\n            after_script += [\"magic-monkey fit2box --in ${image.simpleName}__cropped.nii.gz --out ${image.simpleName}__cropped.nii.gz --pbox $bounding_box\"]\n        }\n        else\n            args += \"--output_bbox ${image.simpleName}__bbox.pkl\"\n\n        if ( !mask.empty() ) {\n            before_script = \"magic-monkey apply_mask --in $image --mask $mask --out masked_image.nii.gz\"\n            img = \"masked_image.nii.gz\"\n            mask_script = \"magic-monkey fit2box --in $mask --out ${mask.simpleName}__cropped.nii.gz\"\n            img_script = \"magic-monkey fit2box --in $image --out ${image.simpleName}__cropped.nii.gz\"\n            if ( !bounding_box.empty() ) {\n                mask_script += \" --pbox $bounding_box\"\n                img_script += \" --pbox $bounding_box\"\n            }\n            else {\n                mask_script += \" --pbox ${image.simpleName}__bbox.pkl\"\n                img_script += \" --pbox ${image.simpleName}__bbox.pkl\"\n            }\n            after_script += [img_script]\n            after_script += [mask_script]\n            after_script += [\"scil_image_math.py round ${mask.simpleName}__cropped.nii.gz ${mask.simpleName}__cropped.nii.gz --data_type uint8 -f\"]\n        }\n\n        if ( metadata instanceof nextflow.util.BlankSeparatedList ? !metadata.isEmpty() : !metadata.empty() )\n            after_script += [\"magic-monkey metadata --in ${image.getSimpleName()}__cropped.nii.gz --update_affine --metadata $metadata\"]\n\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        $before_script\n        scil_crop_volume.py $img ${image.simpleName}__cropped.nii.gz $args\n        ${after_script.join('\\n')}\n        if [ \"\\$(mrinfo -datatype $image)\" != \"\\$(mrinfo -datatype ${image.simpleName}__cropped.nii.gz)\" ]\n        then\n            mrconvert -force -datatype \"\\$(mrinfo -datatype $image)\" ${image.simpleName}__cropped.nii.gz ${image.simpleName}__cropped.nii.gz\n        fi\n        \"\"\"\n}",
        "nb_lignes_process": 63,
        "string_script": "        def args = \"\"\n        def img = \"$image\"\n        def before_script = []\n        def after_script = []\n\n        if ( !bounding_box.empty() ) {\n            args += \"--input_bbox $bounding_box\"\n            after_script += [\"magic-monkey fit2box --in ${image.simpleName}__cropped.nii.gz --out ${image.simpleName}__cropped.nii.gz --pbox $bounding_box\"]\n        }\n        else\n            args += \"--output_bbox ${image.simpleName}__bbox.pkl\"\n\n        if ( !mask.empty() ) {\n            before_script = \"magic-monkey apply_mask --in $image --mask $mask --out masked_image.nii.gz\"\n            img = \"masked_image.nii.gz\"\n            mask_script = \"magic-monkey fit2box --in $mask --out ${mask.simpleName}__cropped.nii.gz\"\n            img_script = \"magic-monkey fit2box --in $image --out ${image.simpleName}__cropped.nii.gz\"\n            if ( !bounding_box.empty() ) {\n                mask_script += \" --pbox $bounding_box\"\n                img_script += \" --pbox $bounding_box\"\n            }\n            else {\n                mask_script += \" --pbox ${image.simpleName}__bbox.pkl\"\n                img_script += \" --pbox ${image.simpleName}__bbox.pkl\"\n            }\n            after_script += [img_script]\n            after_script += [mask_script]\n            after_script += [\"scil_image_math.py round ${mask.simpleName}__cropped.nii.gz ${mask.simpleName}__cropped.nii.gz --data_type uint8 -f\"]\n        }\n\n        if ( metadata instanceof nextflow.util.BlankSeparatedList ? !metadata.isEmpty() : !metadata.empty() )\n            after_script += [\"magic-monkey metadata --in ${image.getSimpleName()}__cropped.nii.gz --update_affine --metadata $metadata\"]\n\n        \"\"\"\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=1\n        export OMP_NUM_THREADS=1\n        export OPENBLAS_NUM_THREADS=1\n        $before_script\n        scil_crop_volume.py $img ${image.simpleName}__cropped.nii.gz $args\n        ${after_script.join('\\n')}\n        if [ \"\\$(mrinfo -datatype $image)\" != \"\\$(mrinfo -datatype ${image.simpleName}__cropped.nii.gz)\" ]\n        then\n            mrconvert -force -datatype \"\\$(mrinfo -datatype $image)\" ${image.simpleName}__cropped.nii.gz ${image.simpleName}__cropped.nii.gz\n        fi\n        \"\"\"",
        "nb_lignes_script": 44,
        "language_script": "bash",
        "tools": [
            "PopTargs",
            "IMG M"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs",
            "https://bio.tools/img_m"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            },
            {
                "name": "IMG M",
                "uri": "https://bio.tools/img_m",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0797",
                            "term": "Comparative genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Microbial ecology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3697",
                            "term": "Environmental microbiology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffolding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profiling"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3216",
                                    "term": "Scaffold generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Functional profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Feature expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene transcription profiling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression quantification"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0314",
                                    "term": "Gene expression profile generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The integrated microbial genomes and metagenomes (IMG/M) system provides support for comparative analysis of microbial community aggregate genomes (metagenomes) in a comprehensive integrated context.",
                "homepage": "http://img.jgi.doe.gov/cgi-bin/m/main.cgi"
            }
        ],
        "inputs": [
            "sid",
            "mask",
            "bounding_box",
            "metadata",
            "image",
            "caller_name",
            "publish_mask",
            "mask_prefix",
            "additional_publish_path"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> f.contains(\"${mask.simpleName}\") ? (\"$publish_mask\" == \"true\") ? mask_prefix ? \"${sid}_${mask_prefix}.nii.gz\" : remove_alg_suffixes(f) : null : f.contains(\"cropped.nii.gz\") ? remove_alg_suffixes(f) : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "fit_bounding_box": {
        "name_process": "fit_bounding_box",
        "string_process": "\nprocess fit_bounding_box {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"cropped.nii.gz\") ? remove_alg_suffixes(f) : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(image), path(reference), path(bounding_box)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${image.simpleName}__bbox.pkl\"), emit: bbox, optional: true\n    script:\n        \"\"\"\n        magic-monkey fitbox --in $image --ref $reference --pbox $bounding_box --out ${image.simpleName}__bbox\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        magic-monkey fitbox --in $image --ref $reference --pbox $bounding_box --out ${image.simpleName}__bbox\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "image",
            "reference",
            "bounding_box",
            "caller_name"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"cropped.nii.gz\") ? remove_alg_suffixes(f) : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "average": {
        "name_process": "average",
        "string_process": "\nprocess average {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(images), val(base_name)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${base_name}__averaged.nii.gz\"), emit: image\n    script:\n        \"\"\"\n        magic-monkey concatenate --in ${images.join(\",\")} --out cat_images --ts\n        fslmaths cat_images.nii.gz -Tmean ${base_name}__averaged.nii.gz\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        magic-monkey concatenate --in ${images.join(\",\")} --out cat_images --ts\n        fslmaths cat_images.nii.gz -Tmean ${base_name}__averaged.nii.gz\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "base_name",
            "images",
            "caller_name"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "merge_masks": {
        "name_process": "merge_masks",
        "string_process": "\nprocess merge_masks {\n    input:\n        tuple val(sid), path(masks), val(base_name)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${base_name}__merged.nii.gz\"), emit: mask\n    script:\n        \"\"\"\n        magic-monkey concatenate --in ${masks.join(\",\")} --out cat_images --ts\n        fslmaths cat_images.nii.gz -Tmax ${base_name}__merged.nii.gz\n        \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "        \"\"\"\n        magic-monkey concatenate --in ${masks.join(\",\")} --out cat_images --ts\n        fslmaths cat_images.nii.gz -Tmax ${base_name}__merged.nii.gz\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "base_name",
            "masks",
            "caller_name"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "timeseries_mean": {
        "name_process": "timeseries_mean",
        "string_process": "\nprocess timeseries_mean {\n    input:\n        tuple val(sid), path(image)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${image.simpleName}__mean.nii.gz\"), emit: image\n    script:\n        \"\"\"\n        fslmaths $image -Tmean ${image.simpleName}__mean.nii.gz\n        \"\"\"\n}",
        "nb_lignes_process": 10,
        "string_script": "        \"\"\"\n        fslmaths $image -Tmean ${image.simpleName}__mean.nii.gz\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "image",
            "caller_name"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "extract_shells": {
        "name_process": "extract_shells",
        "string_process": "\nprocess extract_shells {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n\n    input:\n        tuple val(sid), path(dwi), path(bval), path(bvec)\n        val(caller_name)\n        path(config)\n    output:\n        tuple val(sid), path(\"${dwi.simpleName}__extracted_shells.nii.gz\"), path(\"${dwi.simpleName}__extracted_shells.bval\"), path(\"${dwi.simpleName}__extracted_shells.bvec\"), emit: dwi\n    script:\n        \"\"\"\n        magic-monkey shells --in $dwi --bvals $bval --bvecs $bvec --out ${dwi.simpleName}__extracted_shells --config $config\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        magic-monkey shells --in $dwi --bvals $bval --bvecs $bvec --out ${dwi.simpleName}__extracted_shells --config $config\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "dwi",
            "bval",
            "bvec",
            "caller_name",
            "config"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all"
        ],
        "when": "",
        "stub": ""
    },
    "dilate_mask": {
        "name_process": "dilate_mask",
        "string_process": "\nprocess dilate_mask {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n\n    input:\n        tuple val(sid), path(mask)\n        val(dilation_factor)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${mask.simpleName}__dilated.nii.gz\")\n    script:\n        \"\"\"\n        scil_image_math.py dilation $mask $dilation_factor ${mask.simpleName}__dilated.nii.gz --data_type uint8\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        \"\"\"\n        scil_image_math.py dilation $mask $dilation_factor ${mask.simpleName}__dilated.nii.gz --data_type uint8\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "mask",
            "dilation_factor",
            "caller_name"
        ],
        "nb_inputs": 4,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all"
        ],
        "when": "",
        "stub": ""
    },
    "segmentation_to_binary": {
        "name_process": "segmentation_to_binary",
        "string_process": "\nprocess segmentation_to_binary {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(segmentation)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${segmentation.simpleName}_wm.nii.gz\"), emit: wm_seg\n        tuple val(sid), path(\"${segmentation.simpleName}_gm.nii.gz\"), emit: gm_seg\n        tuple val(sid), path(\"${segmentation.simpleName}_csf.nii.gz\"), emit: csf_seg\n        tuple val(sid), path(\"${segmentation.simpleName}_dgm.nii.gz\"), emit: dgm_seg\n        tuple val(sid), path(\"${segmentation.simpleName}_all_gm.nii.gz\"), emit: all_gm_seg\n    script:\n        \"\"\"\n        magic-monkey seg2mask --in $segmentation --values 1,2,3,4 --labels csf,gm,dgm,wm --out ${segmentation.simpleName}\n        scil_image_math.py addition ${segmentation.simpleName}_gm.nii.gz ${segmentation.simpleName}_dgm.nii.gz ${segmentation.simpleName}_all_gm.nii.gz --data_type uint8 -f\n        \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "        \"\"\"\n        magic-monkey seg2mask --in $segmentation --values 1,2,3,4 --labels csf,gm,dgm,wm --out ${segmentation.simpleName}\n        scil_image_math.py addition ${segmentation.simpleName}_gm.nii.gz ${segmentation.simpleName}_dgm.nii.gz ${segmentation.simpleName}_all_gm.nii.gz --data_type uint8 -f\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "segmentation",
            "caller_name"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "prepend_sid": {
        "name_process": "prepend_sid",
        "string_process": "\nprocess prepend_sid {\n    label \"res_single_cpu\"\n\n    input:\n        tuple val(sid), path(file)\n    output:\n        tuple val(sid), path(\"${sid}_${file.getName()}\")\n    script:\n        \"\"\"\n        ln -s $file ${sid}_${file.getName()}\n        \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "        \"\"\"\n        ln -s $file ${sid}_${file.getName()}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid"
        ],
        "nb_inputs": 1,
        "outputs": [
            "sid"
        ],
        "nb_outputs": 1,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\""
        ],
        "when": "",
        "stub": ""
    },
    "generate_b0_bval": {
        "name_process": "generate_b0_bval",
        "string_process": "\nprocess generate_b0_bval {\n    label \"res_single_cpu\"\n\n    input:\n        tuple val(sid), path(b0_image)\n        val(with_bvec)\n    output:\n        tuple val(sid), path(\"${b0_image.simpleName}.bval\"), emit: bval\n        tuple val(sid), path(\"${b0_image.simpleName}.bvec\"), optional: true, emit: bvec\n    script:\n        if (with_bvec == \"true\") {\n            \"\"\"\n            echo \"0\" >> ${b0_image.simpleName}.bval\n            echo \"0\\n0\\n0\" >> ${b0_image.simpleName}.bvec\n            \"\"\"\n        }\n        else {\n            \"\"\"\n            echo \"0\" >> ${b0_image.simpleName}.bval\n            \"\"\"\n        }\n}",
        "nb_lignes_process": 21,
        "string_script": "        if (with_bvec == \"true\") {\n            \"\"\"\n            echo \"0\" >> ${b0_image.simpleName}.bval\n            echo \"0\\n0\\n0\" >> ${b0_image.simpleName}.bvec\n            \"\"\"\n        }\n        else {\n            \"\"\"\n            echo \"0\" >> ${b0_image.simpleName}.bval\n            \"\"\"\n        }",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "b0_image",
            "with_bvec"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\""
        ],
        "when": "",
        "stub": ""
    },
    "check_odd_dimensions": {
        "name_process": "check_odd_dimensions",
        "string_process": "\nprocess check_odd_dimensions {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"${reverse.simpleName}\") ? null : f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(dwi), path(bval), path(bvec), file(reverse), file(rval), file(rvec), file(mask), file(metadata)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${dwi.simpleName}__even_dims.nii.gz\"), path(\"${dwi.simpleName}__even_dims.bval\"), path(\"${dwi.simpleName}__even_dims.bvec\"), emit: dwi\n        tuple val(sid), path(\"${reverse.simpleName}__even_dims.nii.gz\"), optional: true, emit: rev\n        tuple val(sid), path(\"${reverse.simpleName}__even_dims.bval\"), path(\"${reverse.simpleName}__even_dims.bvec\"), optional: true, emit: rev_bval_bvec\n        tuple val(sid), path(\"${mask.simpleName}__even_dims.nii.gz\"), optional: true, emit: mask\n        tuple val(sid), path(\"*__even_dims_metadata.*\"), optional: true, emit: metadata\n    script:\n        def args = \"--strat ${params.add_odd_dimension ? \"add\" : \"sub\"}\"\n        def after_script = \"\"\n        def assoc = []\n        if ( !reverse.empty() ) assoc += [\"$reverse\"]\n        if ( !mask.empty() ) assoc += [\"$mask\"]\n        args += \" --assoc ${assoc.join(\",\")}\"\n        if ( !rval.empty() ) after_script += \"cp $rval ${reverse.simpleName}__even_dims.bval\\n\"\n        if ( !rvec.empty() ) after_script += \"cp $rvec ${reverse.simpleName}__even_dims.bvec\\n\"\n        \"\"\"\n        magic-monkey even_dimensions --in $dwi --suffix __even_dims $args\n        cp $bval ${dwi.simpleName}__even_dims.bval\n        cp $bvec ${dwi.simpleName}__even_dims.bvec\n        $after_script\n        \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "        def args = \"--strat ${params.add_odd_dimension ? \"add\" : \"sub\"}\"\n        def after_script = \"\"\n        def assoc = []\n        if ( !reverse.empty() ) assoc += [\"$reverse\"]\n        if ( !mask.empty() ) assoc += [\"$mask\"]\n        args += \" --assoc ${assoc.join(\",\")}\"\n        if ( !rval.empty() ) after_script += \"cp $rval ${reverse.simpleName}__even_dims.bval\\n\"\n        if ( !rvec.empty() ) after_script += \"cp $rvec ${reverse.simpleName}__even_dims.bvec\\n\"\n        \"\"\"\n        magic-monkey even_dimensions --in $dwi --suffix __even_dims $args\n        cp $bval ${dwi.simpleName}__even_dims.bval\n        cp $bvec ${dwi.simpleName}__even_dims.bvec\n        $after_script\n        \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "reverse",
            "rval",
            "rvec",
            "mask",
            "metadata",
            "dwi",
            "bval",
            "bvec",
            "caller_name"
        ],
        "nb_inputs": 10,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"${reverse.simpleName}\") ? null : f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "atropos": {
        "name_process": "atropos",
        "string_process": "\nprocess atropos {\n    label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}/segmentation\", saveAs: { f -> remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(t1_image), path(mask), path(segmentation)\n        val(caller_name)\n    output:\n        tuple val(sid), path(\"${sid}_segmentation.nii.gz\"), emit: segmentation\n        tuple val(sid), path(\"${sid}_{${params.segmentation_classes.join(',')}}_pvf.nii.gz\"), emit: vol_fractions\n    script:\n        def after_script = \"\"\n        def i = 1\n        for (cl in params.segmentation_classes) {\n            after_script += \"mv ${sid}_SegmentationPosteriors0${i}.nii.gz ${sid}_${cl}_pvf.nii.gz\\n\"\n            i += 1\n        }\n        \"\"\"\n        export ANTS_RANDOM_SEED=$params.random_seed\n        magic-monkey seg2mask --in $segmentation --values 1,2,3,4,5 --labels 01,02,04,03,05 --out ${segmentation.simpleName}\n        scil_image_math.py addition ${segmentation.simpleName}_02.nii.gz ${segmentation.simpleName}_04.nii.gz ${segmentation.simpleName}_02.nii.gz --data_type uint8 -f\n        scil_image_math.py addition ${segmentation.simpleName}_01.nii.gz ${segmentation.simpleName}_05.nii.gz ${segmentation.simpleName}_01.nii.gz --data_type uint8 -f\n        rm ${segmentation.simpleName}_04.nii.gz ${segmentation.simpleName}_05.nii.gz\n        antsAtroposN4.sh -d 3 -a $t1_image -x $mask -c ${params.segmentation_classes.size()} -p ${segmentation.simpleName}_%02d.nii.gz -o ${sid}_\n        mv ${sid}_Segmentation.nii.gz ${sid}_segmentation.nii.gz\n        $after_script\n        \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "        def after_script = \"\"\n        def i = 1\n        for (cl in params.segmentation_classes) {\n            after_script += \"mv ${sid}_SegmentationPosteriors0${i}.nii.gz ${sid}_${cl}_pvf.nii.gz\\n\"\n            i += 1\n        }\n        \"\"\"\n        export ANTS_RANDOM_SEED=$params.random_seed\n        magic-monkey seg2mask --in $segmentation --values 1,2,3,4,5 --labels 01,02,04,03,05 --out ${segmentation.simpleName}\n        scil_image_math.py addition ${segmentation.simpleName}_02.nii.gz ${segmentation.simpleName}_04.nii.gz ${segmentation.simpleName}_02.nii.gz --data_type uint8 -f\n        scil_image_math.py addition ${segmentation.simpleName}_01.nii.gz ${segmentation.simpleName}_05.nii.gz ${segmentation.simpleName}_01.nii.gz --data_type uint8 -f\n        rm ${segmentation.simpleName}_04.nii.gz ${segmentation.simpleName}_05.nii.gz\n        antsAtroposN4.sh -d 3 -a $t1_image -x $mask -c ${params.segmentation_classes.size()} -p ${segmentation.simpleName}_%02d.nii.gz -o ${sid}_\n        mv ${sid}_Segmentation.nii.gz ${sid}_segmentation.nii.gz\n        $after_script\n        \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "t1_image",
            "mask",
            "segmentation",
            "caller_name"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}/segmentation\", saveAs: { f -> remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "ants_register": {
        "name_process": "ants_register",
        "string_process": "\nprocess ants_register {\n    label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : f.contains(\"registration_warped.nii.gz\") ? publish_suffix ? \"${sid}_${publish_suffix}.nii.gz\" : remove_alg_suffixes(f) : null : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(moving), path(target), val(reference), file(mask), file(metadata)\n        val(caller_name)\n        val(additional_publish_path)\n        val(publish)\n        val(publish_suffix)\n        path(config)\n    output:\n        tuple val(sid), path(\"${moving[0].simpleName}__registration_ref.nii.gz\"), emit: reference\n        tuple val(sid), path(\"${moving[0].simpleName}__[A-Z]_registration_*.*\"), emit: transformation\n        tuple val(sid), path(\"${moving[0].simpleName}__registration_warped.nii.gz\"), optional: true, emit: image\n        tuple val(sid), path(\"${moving[0].simpleName}__registration_warped_metadata.*\"), optional: true, emit: metadata\n    script:\n        def mask_arg = \"\"\n        if ( !mask.iterator().inject(false) { c, i -> c || i.empty() } ) {\n            mask_arg = \"--mask ${mask.iterator().collect{ it.name }.join(',')}\"\n        }\n\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        export ANTS_RANDOM_SEED=$params.random_seed\n        magic-monkey ants_registration --moving ${moving.join(\",\")} --target ${target.join(\",\")} --out ${moving[0].simpleName}__registration $mask_arg --config $config\n        cp ${file(reference).name} ${moving[0].simpleName}__registration_ref.nii.gz\n        cnt1=0\n        cnt2=1\n        while true\n        do\n            found=false\n            if [ -f ${moving[0].simpleName}__registration\\${cnt1}GenericRigid.mat ]\n            then\n                printf -v letter \"\\\\x\\$(printf %x \\$((\\$cnt2 + 64)))\"\n                (( ++cnt2 ))\n                mv ${moving[0].simpleName}__registration\\${cnt1}GenericRigid.mat ${moving[0].simpleName}__\\${letter}_registration_rigid.mat\n                found=true\n            fi\n            if [ -f ${moving[0].simpleName}__registration\\${cnt1}GenericAffine.mat ]\n            then\n                printf -v letter \"\\\\x\\$(printf %x \\$((\\$cnt2 + 64)))\"\n                (( ++cnt2 ))\n                mv ${moving[0].simpleName}__registration\\${cnt1}GenericAffine.mat ${moving[0].simpleName}__\\${letter}_registration_affine.mat\n                found=true\n            fi\n            if [ -f ${moving[0].simpleName}__registration\\${cnt1}Warp.nii.gz ]\n            then\n                printf -v letter \"\\\\x\\$(printf %x \\$((\\$cnt2 + 64)))\"\n                (( ++cnt2 ))\n                mv ${moving[0].simpleName}__registration\\${cnt1}Warp.nii.gz ${moving[0].simpleName}__\\${letter}_registration_syn.nii.gz\n                found=true\n            fi\n            \n            if \\$found\n            then\n                (( ++cnt1 ))\n            else\n                break\n            fi\n        done\n            \n        \"\"\"\n}",
        "nb_lignes_process": 67,
        "string_script": "        def mask_arg = \"\"\n        if ( !mask.iterator().inject(false) { c, i -> c || i.empty() } ) {\n            mask_arg = \"--mask ${mask.iterator().collect{ it.name }.join(',')}\"\n        }\n\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        export ANTS_RANDOM_SEED=$params.random_seed\n        magic-monkey ants_registration --moving ${moving.join(\",\")} --target ${target.join(\",\")} --out ${moving[0].simpleName}__registration $mask_arg --config $config\n        cp ${file(reference).name} ${moving[0].simpleName}__registration_ref.nii.gz\n        cnt1=0\n        cnt2=1\n        while true\n        do\n            found=false\n            if [ -f ${moving[0].simpleName}__registration\\${cnt1}GenericRigid.mat ]\n            then\n                printf -v letter \"\\\\x\\$(printf %x \\$((\\$cnt2 + 64)))\"\n                (( ++cnt2 ))\n                mv ${moving[0].simpleName}__registration\\${cnt1}GenericRigid.mat ${moving[0].simpleName}__\\${letter}_registration_rigid.mat\n                found=true\n            fi\n            if [ -f ${moving[0].simpleName}__registration\\${cnt1}GenericAffine.mat ]\n            then\n                printf -v letter \"\\\\x\\$(printf %x \\$((\\$cnt2 + 64)))\"\n                (( ++cnt2 ))\n                mv ${moving[0].simpleName}__registration\\${cnt1}GenericAffine.mat ${moving[0].simpleName}__\\${letter}_registration_affine.mat\n                found=true\n            fi\n            if [ -f ${moving[0].simpleName}__registration\\${cnt1}Warp.nii.gz ]\n            then\n                printf -v letter \"\\\\x\\$(printf %x \\$((\\$cnt2 + 64)))\"\n                (( ++cnt2 ))\n                mv ${moving[0].simpleName}__registration\\${cnt1}Warp.nii.gz ${moving[0].simpleName}__\\${letter}_registration_syn.nii.gz\n                found=true\n            fi\n            \n            if \\$found\n            then\n                (( ++cnt1 ))\n            else\n                break\n            fi\n        done\n            \n        \"\"\"",
        "nb_lignes_script": 47,
        "language_script": "bash",
        "tools": [
            "BreakSeq"
        ],
        "tools_url": [
            "https://bio.tools/breakseq"
        ],
        "tools_dico": [
            {
                "name": "BreakSeq",
                "uri": "https://bio.tools/breakseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Read alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Oligonucleotide alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short sequence read mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3198",
                                    "term": "Short read alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Database of known human breakpoint junctions and software to search short reads against them.",
                "homepage": "http://sv.gersteinlab.org/breakseq/"
            }
        ],
        "inputs": [
            "sid",
            "reference",
            "mask",
            "metadata",
            "moving",
            "target",
            "caller_name",
            "additional_publish_path",
            "publish",
            "publish_suffix",
            "config"
        ],
        "nb_inputs": 11,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : f.contains(\"registration_warped.nii.gz\") ? publish_suffix ? \"${sid}_${publish_suffix}.nii.gz\" : remove_alg_suffixes(f) : null : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "ants_correct_motion": {
        "name_process": "ants_correct_motion",
        "string_process": "\nprocess ants_correct_motion {\n    label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(moving), path(target), path(metadata)\n        val(caller_name)\n        path(config)\n    output:\n        tuple val(sid), path(\"${moving[0].simpleName}__motion_correct_warped.nii.gz\"), emit: image\n        tuple val(sid), path(\"${moving[0].simpleName}__motion_correct_warped_metadata.*\"), optional: true, emit: metadata\n    script:\n        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        export ANTS_RANDOM_SEED=$params.random_seed\n        magic-monkey ants_motion --moving ${moving.join(\",\")} --target ${target.join(\",\")} --out ${sid}__motion_correct --config $config\n        \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "        \"\"\"\n        export OMP_NUM_THREADS=$task.cpus\n        export ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS=$task.cpus\n        export OPENBLAS_NUM_THREADS=1\n        export ANTS_RANDOM_SEED=$params.random_seed\n        magic-monkey ants_motion --moving ${moving.join(\",\")} --target ${target.join(\",\")} --out ${sid}__motion_correct --config $config\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sid",
            "moving",
            "target",
            "metadata",
            "caller_name",
            "config"
        ],
        "nb_inputs": 6,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label params.conservative_resources ? \"res_conservative_cpu\" : \"res_max_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${params.output_root}/${sid}\", saveAs: { f -> f.contains(\"metadata\") ? null : remove_alg_suffixes(f) }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    },
    "ants_transform": {
        "name_process": "ants_transform",
        "string_process": "\nprocess ants_transform {\n    label \"res_single_cpu\"\n\n    publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all\n    publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : publish_suffix ? \"${sid}_${publish_suffix}.nii.gz\" : remove_alg_suffixes(f) : null }, mode: params.publish_mode\n\n    input:\n        tuple val(sid), path(img), path(ref), path(trans), file(bvec), file(metadata)\n        val(caller_name)\n        val(additional_publish_path)\n        val(publish)\n        val(publish_suffix)\n        path(config)\n    output:\n        tuple val(sid), path(\"${img.simpleName}__transformed.nii.gz\"), emit: image\n        tuple val(sid), path(\"${img.simpleName}__transformed.bvec\"), optional: true, emit: bvec\n        tuple val(sid), path(\"${img.simpleName}__transformed_metadata.*\"), optional: true, emit: metadata\n    script:\n        def args = \"--in $img --ref $ref\"\n        def trans_str = (trans instanceof Path) ? trans : trans.join(',')\n        if ( trans && (trans instanceof Path) ? !trans.empty() : !trans.isEmpty() ) {\n            args += \" --trans $trans_str\"\n        }\n        if ( !bvec.empty() ) {\n            args += \" --bvecs $bvec\"\n        }\n        \"\"\"\n        export ANTS_RANDOM_SEED=$params.random_seed\n        magic-monkey ants_transform $args --out ${img.simpleName}__transformed --config $config\n        \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "        def args = \"--in $img --ref $ref\"\n        def trans_str = (trans instanceof Path) ? trans : trans.join(',')\n        if ( trans && (trans instanceof Path) ? !trans.empty() : !trans.isEmpty() ) {\n            args += \" --trans $trans_str\"\n        }\n        if ( !bvec.empty() ) {\n            args += \" --bvecs $bvec\"\n        }\n        \"\"\"\n        export ANTS_RANDOM_SEED=$params.random_seed\n        magic-monkey ants_transform $args --out ${img.simpleName}__transformed --config $config\n        \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "PopTargs"
        ],
        "tools_url": [
            "https://bio.tools/PopTargs"
        ],
        "tools_dico": [
            {
                "name": "PopTargs",
                "uri": "https://bio.tools/PopTargs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0659",
                            "term": "Functional, regulatory and non-coding RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA target prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Database search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA target detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "miRNA prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0463",
                                    "term": "microRNA detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2421",
                                    "term": "Search"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "PopTargs is a database for studying population evolutionary genetics of human microRNA target sites.\n\nThese are the scripts used to create the MySQL database that is used by PopTargs.essex.ac.uk. The pipeline can be altered to create similar databases with different species, it may need to be adjusted to fit your file names.",
                "homepage": "https://poptargs.essex.ac.uk/"
            }
        ],
        "inputs": [
            "sid",
            "bvec",
            "metadata",
            "img",
            "ref",
            "trans",
            "caller_name",
            "additional_publish_path",
            "publish",
            "publish_suffix",
            "config"
        ],
        "nb_inputs": 11,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "AlexVCaron__mrHARDIflow",
        "directive": [
            "label \"res_single_cpu\"",
            "publishDir \"${params.output_root}/all/${sid}/$caller_name/${task.index}_${task.process.replaceAll(\":\", \"_\")}\", mode: params.publish_mode, enabled: params.publish_all",
            "publishDir \"${[\"${params.output_root}/${sid}\", additional_publish_path].findAll({ it }).join(\"/\")}\", saveAs: { f -> (\"$publish\" == \"true\") ? f.contains(\"metadata\") ? null : publish_suffix ? \"${sid}_${publish_suffix}.nii.gz\" : remove_alg_suffixes(f) : null }, mode: params.publish_mode"
        ],
        "when": "",
        "stub": ""
    }
}
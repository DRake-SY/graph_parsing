{
    "OPERATION_1": {
        "string": "Channel\n    .fromFilePairs( params.reads )\n    .ifEmpty { error \"Cannot find any reads matching: ${params.reads}\"  }\n    .tap { read_pairs_ch }\n    .subscribe({ num_samples += 1 })",
        "origin": [
            [
                "params.reads",
                "A"
            ]
        ],
        "gives": [
            [
                "read_pairs_ch",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "recalibrated_bam_ch = Channel.create()PROCESS DEF haplotypeCaller",
        "origin": [],
        "gives": [
            [
                "recalibrated_bam_ch",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "filtered_snps_ch_1.filter({it[1] == 1}).tap{filtered_snps_for_recal}.tap{snps_1_qc_ch}",
        "origin": [
            [
                "filtered_snps_ch_1",
                "P"
            ]
        ],
        "gives": [
            [
                "filtered_snps_for_recal",
                "P"
            ],
            [
                "snps_1_qc_ch",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "filtered_snps_ch_2.filter({it[1] == 2}).tap{snps_2_qc_ch}.tap{filtered_snps_for_snpeff}",
        "origin": [
            [
                "filtered_snps_ch_2",
                "P"
            ]
        ],
        "gives": [
            [
                "snps_2_qc_ch",
                "P"
            ],
            [
                "filtered_snps_for_snpeff",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "qc_output.collectFile(name: \"${workflow.runName}_report.csv\", keepHeader: true, storeDir: \"${params.out}/reports\")",
        "origin": [
            [
                "qc_output",
                "P"
            ]
        ],
        "gives": []
    }
}
{
    "OPERATION_1": {
        "string": "Channel.from(\n    file(\n        params.manifest\n    ).splitCsv(\n        header: true, \n        sep: \",\"\n    )\n).ifEmpty { \n    error \"Could not find any lines in ${params.manifest}\" \n}.filter {\n    r -> (r.name != null)\n}.ifEmpty { \n    error \"Could not find the 'name' header in ${params.manifest}\" \n}.filter {\n    r -> (r.reads != null)\n}.ifEmpty { \n    error \"Could not find the 'reads' header in ${params.manifest}\" \n}.filter {\n    r -> (!file(r.reads).isEmpty())\n}.ifEmpty { \n    error \"Could not find the files under the 'reads' header in ${params.manifest}\" \n}.map {\n    r -> [r[\"name\"], file(r[\"reads\"])]\n}.set {\n    input_ch\n}",
        "origin": [],
        "gives": [
            [
                "input_ch",
                "P"
            ]
        ]
    }
}
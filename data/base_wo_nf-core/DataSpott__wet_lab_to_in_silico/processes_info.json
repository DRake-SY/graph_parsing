{
    "guppy_gpu": {
        "name_process": "guppy_gpu",
        "string_process": "process guppy_gpu {\n        maxForks 1\n        container = 'nanozoo/guppy_gpu:4.2.2-1--5fc71df'\n        containerOptions '--gpus all'\n                                                            \n    \n    input:\n        tuple val(name), path(dir)\n    \n    output:\n        tuple val(name), path(\"*.fastq.gz\")\n    \n    script:\n        if (params.single == true)\n        \"\"\"\n        guppy_basecaller -c dna_r9.4.1_450bps_hac.cfg -i ${dir} -s fastq -x auto -r --trim_strategy dna -q 0\n\n        find -L fastq -name '*.fastq' -exec cat {} +  | gzip > ${name}.fastq.gz\n        \"\"\"\n        else if (params.single == false)\n        \"\"\"\n        guppy_basecaller -c dna_r9.4.1_450bps_hac.cfg -i ${dir} -s fastq_tmp -x auto -r\n        guppy_barcoder --require_barcodes_both_ends -i fastq_tmp -s fastq --arrangements_files \"barcode_arrs_nb12.cfg barcode_arrs_nb24.cfg\"\n\n        for barcodes in fastq/barcode??; do\n            find -L \\${barcodes} -name '*.fastq' -exec cat {} + | gzip > \\${barcodes##*/}.fastq.gz\n        done\n        \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "        if (params.single == true)\n        \"\"\"\n        guppy_basecaller -c dna_r9.4.1_450bps_hac.cfg -i ${dir} -s fastq -x auto -r --trim_strategy dna -q 0\n\n        find -L fastq -name '*.fastq' -exec cat {} +  | gzip > ${name}.fastq.gz\n        \"\"\"\n        else if (params.single == false)\n        \"\"\"\n        guppy_basecaller -c dna_r9.4.1_450bps_hac.cfg -i ${dir} -s fastq_tmp -x auto -r\n        guppy_barcoder --require_barcodes_both_ends -i fastq_tmp -s fastq --arrangements_files \"barcode_arrs_nb12.cfg barcode_arrs_nb24.cfg\"\n\n        for barcodes in fastq/barcode??; do\n            find -L \\${barcodes} -name '*.fastq' -exec cat {} + | gzip > \\${barcodes##*/}.fastq.gz\n        done\n        \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "dir"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "DataSpott__wet_lab_to_in_silico",
        "directive": [
            "maxForks 1",
            "container = 'nanozoo/guppy_gpu:4.2.2-1--5fc71df'",
            "containerOptions '--gpus all'"
        ],
        "when": "",
        "stub": ""
    },
    "combiner": {
        "name_process": "combiner",
        "string_process": "process combiner {\n    publishDir \"${params.output}/\", mode: 'copy'\n\n    input:\n        val(sampleNumber)                                                           \n        val(kitInfo)\n        tuple val(name), path(dir)\n\n    output:\n        tuple val(\"${name}\"), path(\"*\")//path(\"/\\$sample_number/*.gz\"), path(\"/\\$sample_number/*.txt\") \n\n    script:\n    \"\"\"\n    sample_barcode=\\$(echo \"${sampleNumber}\" | cut -f1 -d\"#\" |grep -o -E '[0-9]+')\n    sample_number=\\$(echo \"${sampleNumber}\" |  cut -f2 -d\"#\")\n    fastq_barcode=\\$(echo ${name} | grep -o -E '[0-9]+')\n    \n    if [[ \"\\$sample_barcode\" == \"\\$fastq_barcode\" ]]\n    then\n        mkdir ./\"\\$sample_number\"\n        for elements in ${kitInfo}; do\n            echo \"\\$elements\" | tr -d \"[]\"  >> \"\\$sample_number\"/runInfo.txt\n        done\n        cp -r ${dir} \"\\$sample_number\"/\n    fi\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    sample_barcode=\\$(echo \"${sampleNumber}\" | cut -f1 -d\"#\" |grep -o -E '[0-9]+')\n    sample_number=\\$(echo \"${sampleNumber}\" |  cut -f2 -d\"#\")\n    fastq_barcode=\\$(echo ${name} | grep -o -E '[0-9]+')\n    \n    if [[ \"\\$sample_barcode\" == \"\\$fastq_barcode\" ]]\n    then\n        mkdir ./\"\\$sample_number\"\n        for elements in ${kitInfo}; do\n            echo \"\\$elements\" | tr -d \"[]\"  >> \"\\$sample_number\"/runInfo.txt\n        done\n        cp -r ${dir} \"\\$sample_number\"/\n    fi\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sampleNumber",
            "kitInfo",
            "name",
            "dir"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "DataSpott__wet_lab_to_in_silico",
        "directive": [
            "publishDir \"${params.output}/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
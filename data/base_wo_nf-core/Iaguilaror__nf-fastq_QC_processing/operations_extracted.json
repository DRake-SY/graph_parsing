{
    "OPERATION_1": {
        "string": "Channel\n  .fromPath( \"${params.input_dir}/*.fastq.gz\" )\n  .map{ file -> tuple(get_sample_prefix(file), file) }\n\t.groupTuple()\n            \n  .into{ fastq_inputs; fastq_inputs_again }",
        "origin": [
            [
                "\"${params.input_dir}/*.fastq.gz\"",
                "A"
            ]
        ],
        "gives": [
            [
                "fastq_inputs",
                "P"
            ],
            [
                "fastq_inputs_again",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "Channel\n\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-fastqc/*\")\n\t.toList()\n\t.set{ mkfiles_pre1 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-fastqc/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_pre1",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel\n\t\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-trimmomatic/*\")\n\t\t.toList()\n\t\t.set{ mkfiles_001 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-trimmomatic/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_001",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel\n\t\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-trimmomatic-SE/*\")\n\t\t.toList()\n\t\t.set{ mkfiles_001 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-trimmomatic-SE/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_001",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel\n\t\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-trimreport/*\")\n\t\t.toList()\n\t\t.set{ mkfiles_an1 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-trimreport/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_an1",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel\n\t\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-trimreport-SE/*\")\n\t\t.toList()\n\t\t.set{ mkfiles_an1 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-trimreport-SE/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_an1",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel\n\t\t.fromPath(\"${workflow.projectDir}/mkmodules/mk-gather-sample/*\")\n\t\t.toList()\n\t\t.set{ mkfiles_pos1 }",
        "origin": [
            [
                "\"${workflow.projectDir}/mkmodules/mk-gather-sample/*\"",
                "A"
            ]
        ],
        "gives": [
            [
                "mkfiles_pos1",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel\n\t.fromPath(\"${workflow.projectDir}/nextflow.config\")\n\t.set{ nfconfig }",
        "origin": [
            [
                "\"${workflow.projectDir}/nextflow.config\"",
                "A"
            ]
        ],
        "gives": [
            [
                "nfconfig",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "nfsummary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "nfsummary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_10": {
        "string": "pipelinesummary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "pipelinesummary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_11": {
        "string": "results_001_trimmomatic_trimreport\n\t.flatten()\n\t.toList()\n\t          \n\t.set{ all_trimreports }",
        "origin": [
            [
                "results_001_trimmomatic_trimreport",
                "P"
            ]
        ],
        "gives": [
            [
                "all_trimreports",
                "P"
            ]
        ]
    }
}
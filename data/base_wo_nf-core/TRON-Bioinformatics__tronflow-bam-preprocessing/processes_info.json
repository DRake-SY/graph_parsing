{
    "REALIGNMENT_AROUND_INDELS": {
        "name_process": "REALIGNMENT_AROUND_INDELS",
        "string_process": "\nprocess REALIGNMENT_AROUND_INDELS {\n    cpus \"${params.realignment_around_indels_cpus}\"\n    memory \"${params.realignment_around_indels_memory}\"\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}/metrics/realignment\", mode: \"copy\", pattern: \"*.RA.intervals\"\n    publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"\n\n                                                                                                                    \n                                                                                            \n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.0.0 bioconda::gatk=3.8\" : null)\n\n    input:\n    tuple val(name), val(type), file(bam), file(bai)\n\n    output:\n    tuple val(name), val(type), file(\"${name}.realigned.bam\"), file(\"${name}.realigned.bai\"), emit: realigned_bams\n    file(\"${name}.RA.intervals\")\n    file(\"software_versions.${task.process}.txt\")\n\n    script:\n    known_indels1 = params.known_indels1 ? \" --known ${params.known_indels1}\" : \"\"\n    known_indels2 = params.known_indels2 ? \" --known ${params.known_indels2}\" : \"\"\n    known_alleles1 = params.known_indels1 ? \" --knownAlleles ${params.known_indels1}\" : \"\"\n    known_alleles2 = params.known_indels2 ? \" --knownAlleles ${params.known_indels2}\" : \"\"\n    \"\"\"\n    mkdir tmp\n\n    gatk3 -Xmx${params.realignment_around_indels_memory} -Djava.io.tmpdir=./tmp -T RealignerTargetCreator \\\n    --input_file ${bam} \\\n    --out ${name}.RA.intervals \\\n    --reference_sequence ${params.reference} ${known_indels1} ${known_indels2}\n\n    gatk3 -Xmx${params.realignment_around_indels_memory} -Djava.io.tmpdir=./tmp -T IndelRealigner \\\n    --input_file ${bam} \\\n    --out ${name}.realigned.bam \\\n    --reference_sequence ${params.reference} \\\n    --targetIntervals ${name}.RA.intervals \\\n    --consensusDeterminationModel USE_SW \\\n    --LODThresholdForCleaning 0.4 \\\n    --maxReadsInMemory 600000 ${known_alleles1} ${known_alleles2}\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk3 --version >> software_versions.${task.process}.txt\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    known_indels1 = params.known_indels1 ? \" --known ${params.known_indels1}\" : \"\"\n    known_indels2 = params.known_indels2 ? \" --known ${params.known_indels2}\" : \"\"\n    known_alleles1 = params.known_indels1 ? \" --knownAlleles ${params.known_indels1}\" : \"\"\n    known_alleles2 = params.known_indels2 ? \" --knownAlleles ${params.known_indels2}\" : \"\"\n    \"\"\"\n    mkdir tmp\n\n    gatk3 -Xmx${params.realignment_around_indels_memory} -Djava.io.tmpdir=./tmp -T RealignerTargetCreator \\\n    --input_file ${bam} \\\n    --out ${name}.RA.intervals \\\n    --reference_sequence ${params.reference} ${known_indels1} ${known_indels2}\n\n    gatk3 -Xmx${params.realignment_around_indels_memory} -Djava.io.tmpdir=./tmp -T IndelRealigner \\\n    --input_file ${bam} \\\n    --out ${name}.realigned.bam \\\n    --reference_sequence ${params.reference} \\\n    --targetIntervals ${name}.RA.intervals \\\n    --consensusDeterminationModel USE_SW \\\n    --LODThresholdForCleaning 0.4 \\\n    --maxReadsInMemory 600000 ${known_alleles1} ${known_alleles2}\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk3 --version >> software_versions.${task.process}.txt\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "type",
            "bam",
            "bai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-bam-preprocessing",
        "directive": [
            "cpus \"${params.realignment_around_indels_cpus}\"",
            "memory \"${params.realignment_around_indels_memory}\"",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}/metrics/realignment\", mode: \"copy\", pattern: \"*.RA.intervals\"",
            "publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.0.0 bioconda::gatk=3.8\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "HS_METRICS": {
        "name_process": "HS_METRICS",
        "string_process": "\nprocess HS_METRICS {\n    cpus params.metrics_cpus\n    memory params.metrics_memory\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}/metrics/hs_metrics\", mode: \"copy\"\n    publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)\n\n    input:\n    tuple val(name), val(type), file(bam), file(bai)\n\n    output:\n    file(\"*_metrics\") optional true\n    file(\"*.pdf\") optional true\n    file(\"${name}.hs_metrics.txt\")\n    file(\"software_versions.${task.process}.txt\")\n\n    script:\n    minimum_base_quality = params.collect_hs_metrics_min_base_quality ?\n        \"--MINIMUM_BASE_QUALITY ${params.collect_hs_metrics_min_base_quality}\" : \"\"\n    minimum_mapping_quality = params.collect_hs_metrics_min_mapping_quality ?\n        \"--MINIMUM_MAPPING_QUALITY ${params.collect_hs_metrics_min_mapping_quality}\" : \"\"\n    \"\"\"\n    mkdir tmp\n\n    gatk BedToIntervalList \\\n    --INPUT ${params.intervals} \\\n    --OUTPUT my.intervals \\\n    --SEQUENCE_DICTIONARY ${bam}\n\n    gatk CollectHsMetrics \\\n    --java-options '-Xmx${params.metrics_memory}  -Djava.io.tmpdir=./tmp' \\\n    --INPUT  ${bam} \\\n    --OUTPUT ${name}.hs_metrics.txt \\\n    --TARGET_INTERVALS my.intervals \\\n    --BAIT_INTERVALS my.intervals \\\n    ${minimum_base_quality} ${minimum_mapping_quality}\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk --version >> software_versions.${task.process}.txt\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    minimum_base_quality = params.collect_hs_metrics_min_base_quality ?\n        \"--MINIMUM_BASE_QUALITY ${params.collect_hs_metrics_min_base_quality}\" : \"\"\n    minimum_mapping_quality = params.collect_hs_metrics_min_mapping_quality ?\n        \"--MINIMUM_MAPPING_QUALITY ${params.collect_hs_metrics_min_mapping_quality}\" : \"\"\n    \"\"\"\n    mkdir tmp\n\n    gatk BedToIntervalList \\\n    --INPUT ${params.intervals} \\\n    --OUTPUT my.intervals \\\n    --SEQUENCE_DICTIONARY ${bam}\n\n    gatk CollectHsMetrics \\\n    --java-options '-Xmx${params.metrics_memory}  -Djava.io.tmpdir=./tmp' \\\n    --INPUT  ${bam} \\\n    --OUTPUT ${name}.hs_metrics.txt \\\n    --TARGET_INTERVALS my.intervals \\\n    --BAIT_INTERVALS my.intervals \\\n    ${minimum_base_quality} ${minimum_mapping_quality}\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk --version >> software_versions.${task.process}.txt\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "name",
            "type",
            "bam",
            "bai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-bam-preprocessing",
        "directive": [
            "cpus params.metrics_cpus",
            "memory params.metrics_memory",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}/metrics/hs_metrics\", mode: \"copy\"",
            "publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "METRICS": {
        "name_process": "METRICS",
        "string_process": "\nprocess METRICS {\n    cpus params.metrics_cpus\n    memory params.metrics_memory\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}/metrics/gatk_multiple_metrics\", mode: \"copy\"\n    publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"\n\n                                                                                            \n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0 r::r=3.6.0\" : null)\n\n    input:\n    tuple val(name), val(type), file(bam), file(bai)\n\n    output:\n    file(\"*_metrics\") optional true\n    file(\"*.pdf\") optional true\n    file(\"software_versions.${task.process}.txt\")\n\n    \"\"\"\n    mkdir tmp\n\n    gatk CollectMultipleMetrics \\\n    --java-options '-Xmx${params.metrics_memory}  -Djava.io.tmpdir=./tmp' \\\n    --INPUT  ${bam} \\\n    --OUTPUT ${name} \\\n    --REFERENCE_SEQUENCE ${params.reference} \\\n    --PROGRAM QualityScoreDistribution \\\n    --PROGRAM MeanQualityByCycle \\\n    --PROGRAM CollectAlignmentSummaryMetrics \\\n    --PROGRAM CollectBaseDistributionByCycle \\\n    --PROGRAM CollectGcBiasMetrics \\\n    --PROGRAM CollectInsertSizeMetrics \\\n    --PROGRAM CollectSequencingArtifactMetrics \\\n    --PROGRAM CollectSequencingArtifactMetrics\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk --version >> software_versions.${task.process}.txt\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "\"\"\"\n    mkdir tmp\n\n    gatk CollectMultipleMetrics \\\n    --java-options '-Xmx${params.metrics_memory}  -Djava.io.tmpdir=./tmp' \\\n    --INPUT  ${bam} \\\n    --OUTPUT ${name} \\\n    --REFERENCE_SEQUENCE ${params.reference} \\\n    --PROGRAM QualityScoreDistribution \\\n    --PROGRAM MeanQualityByCycle \\\n    --PROGRAM CollectAlignmentSummaryMetrics \\\n    --PROGRAM CollectBaseDistributionByCycle \\\n    --PROGRAM CollectGcBiasMetrics \\\n    --PROGRAM CollectInsertSizeMetrics \\\n    --PROGRAM CollectSequencingArtifactMetrics \\\n    --PROGRAM CollectSequencingArtifactMetrics\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk --version >> software_versions.${task.process}.txt\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "name",
            "type",
            "bam",
            "bai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-bam-preprocessing",
        "directive": [
            "cpus params.metrics_cpus",
            "memory params.metrics_memory",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}/metrics/gatk_multiple_metrics\", mode: \"copy\"",
            "publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0 r::r=3.6.0\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "COVERAGE_ANALYSIS": {
        "name_process": "COVERAGE_ANALYSIS",
        "string_process": "\nprocess COVERAGE_ANALYSIS {\n    cpus params.metrics_cpus\n    memory params.metrics_memory\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}/metrics/coverage\", mode: \"copy\"\n    publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"\n\n    conda (params.enable_conda ? \"bioconda::samtools=1.12\" : null)\n\n    input:\n        tuple val(name), val(type), file(bam), file(bai)\n\n    output:\n        file(\"${name}.coverage.tsv\")\n        file(\"${name}.depth.tsv\")\n        file(\"software_versions.${task.process}.txt\")\n\n    script:\n    minimum_base_quality = params.collect_hs_metrics_min_base_quality ?\n        \"--min-BQ ${params.collect_hs_metrics_min_base_quality}\" : \"\"\n    minimum_mapping_quality = params.collect_hs_metrics_min_mapping_quality ?\n        \"--min-MQ ${params.collect_hs_metrics_min_mapping_quality}\" : \"\"\n    intervals = params.intervals ? \"-b ${params.intervals}\" : \"\"\n    \"\"\"\n    samtools coverage ${minimum_base_quality} ${minimum_mapping_quality} ${bam} > ${name}.coverage.tsv\n    samtools depth -s -d 0 -H ${intervals} ${bam} > ${name}.depth.tsv\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    samtools --version >> software_versions.${task.process}.txt\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    minimum_base_quality = params.collect_hs_metrics_min_base_quality ?\n        \"--min-BQ ${params.collect_hs_metrics_min_base_quality}\" : \"\"\n    minimum_mapping_quality = params.collect_hs_metrics_min_mapping_quality ?\n        \"--min-MQ ${params.collect_hs_metrics_min_mapping_quality}\" : \"\"\n    intervals = params.intervals ? \"-b ${params.intervals}\" : \"\"\n    \"\"\"\n    samtools coverage ${minimum_base_quality} ${minimum_mapping_quality} ${bam} > ${name}.coverage.tsv\n    samtools depth -s -d 0 -H ${intervals} ${bam} > ${name}.depth.tsv\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    samtools --version >> software_versions.${task.process}.txt\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "type",
            "bam",
            "bai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-bam-preprocessing",
        "directive": [
            "cpus params.metrics_cpus",
            "memory params.metrics_memory",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}/metrics/coverage\", mode: \"copy\"",
            "publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"",
            "conda (params.enable_conda ? \"bioconda::samtools=1.12\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "BQSR": {
        "name_process": "BQSR",
        "string_process": "\nprocess BQSR {\n    cpus \"${params.bqsr_cpus}\"\n    memory \"${params.bqsr_memory}\"\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}\", mode: \"copy\"\n    publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)\n\n    input:\n    tuple val(name), val(type), file(bam), file(bai)\n\n    output:\n    tuple val(\"${name}\"), val(\"${type}\"), val(\"${params.output}/${name}/${bam_name}.preprocessed.bam\"), emit: recalibrated_bams\n    file \"${name}.recalibration_report.grp\"\n    file \"${name}.preprocessed.bam\"\n    file \"${name}.preprocessed.bai\"\n    file(\"software_versions.${task.process}.txt\")\n\n    \"\"\"\n    mkdir tmp\n\n    gatk BaseRecalibrator \\\n    --java-options '-Xmx${params.bqsr_memory} -Djava.io.tmpdir=./tmp' \\\n    --input ${bam} \\\n    --output ${name}.recalibration_report.grp \\\n    --reference ${params.reference} \\\n    --known-sites ${params.dbsnp}\n\n    gatk ApplyBQSR \\\n    --java-options '-Xmx${params.bqsr_memory} -Djava.io.tmpdir=./tmp' \\\n    --input ${bam} \\\n    --output ${name}.preprocessed.bam \\\n    --reference ${params.reference} \\\n    --bqsr-recal-file ${name}.recalibration_report.grp\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk --version >> software_versions.${task.process}.txt\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "\"\"\"\n    mkdir tmp\n\n    gatk BaseRecalibrator \\\n    --java-options '-Xmx${params.bqsr_memory} -Djava.io.tmpdir=./tmp' \\\n    --input ${bam} \\\n    --output ${name}.recalibration_report.grp \\\n    --reference ${params.reference} \\\n    --known-sites ${params.dbsnp}\n\n    gatk ApplyBQSR \\\n    --java-options '-Xmx${params.bqsr_memory} -Djava.io.tmpdir=./tmp' \\\n    --input ${bam} \\\n    --output ${name}.preprocessed.bam \\\n    --reference ${params.reference} \\\n    --bqsr-recal-file ${name}.recalibration_report.grp\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk --version >> software_versions.${task.process}.txt\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "name",
            "type",
            "bam",
            "bai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-bam-preprocessing",
        "directive": [
            "cpus \"${params.bqsr_cpus}\"",
            "memory \"${params.bqsr_memory}\"",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}\", mode: \"copy\"",
            "publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "CREATE_OUTPUT": {
        "name_process": "CREATE_OUTPUT",
        "string_process": "\nprocess CREATE_OUTPUT {\n    cpus 1\n    memory '1g'\n    publishDir \"${params.output}/${name}\", mode: \"copy\"\n    tag \"${name}\"\n\n    input:\n    tuple val(name), val(type), file(bam), file(bai)\n\n    output:\n    tuple val(\"${name}\"), val(\"${type}\"), val(\"${params.output}/${name}/${name}.preprocessed.bam\"), emit: recalibrated_bams\n    file \"${name}.preprocessed.bam\"\n    file \"${name}.preprocessed.bai\"\n\n    \"\"\"\n    cp ${bam} ${name}.preprocessed.bam\n    cp ${bai} ${name}.preprocessed.bai\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "\"\"\"\n    cp ${bam} ${name}.preprocessed.bam\n    cp ${bai} ${name}.preprocessed.bai\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "type",
            "bam",
            "bai"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-bam-preprocessing",
        "directive": [
            "cpus 1",
            "memory '1g'",
            "publishDir \"${params.output}/${name}\", mode: \"copy\"",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "MARK_DUPLICATES": {
        "name_process": "MARK_DUPLICATES",
        "string_process": "\nprocess MARK_DUPLICATES {\n    cpus \"${params.mark_duplicates_cpus}\"\n    memory \"${params.mark_duplicates_memory}\"\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}/metrics/mark_duplicates\", mode: \"copy\", pattern: \"*.dedup_metrics.txt\"\n    publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)\n\n    input:\n    tuple val(name), val(type), file(bam)\n\n    output:\n    tuple val(name), val(type), file(\"${name}.dedup.bam\"), file(\"${name}.dedup.bam.bai\"), emit: deduplicated_bams\n    file(\"${name}.dedup_metrics.txt\") optional true\n    file(\"software_versions.${task.process}.txt\")\n\n    script:\n    dedup_metrics = params.skip_metrics ? \"\": \"--METRICS_FILE ${name}.dedup_metrics.txt\"\n    remove_duplicates = params.remove_duplicates ? \"--REMOVE_DUPLICATES true\" : \"--REMOVE_DUPLICATES false\"\n    \"\"\"\n    mkdir tmp\n\n    gatk SortSam \\\n    --java-options '-Xmx${params.mark_duplicates_memory}  -Djava.io.tmpdir=./tmp' \\\n    --INPUT ${bam} \\\n    --OUTPUT ${name}.sorted.bam \\\n    --SORT_ORDER coordinate\n\n    gatk MarkDuplicates \\\n    --java-options '-Xmx${params.mark_duplicates_memory}  -Djava.io.tmpdir=./tmp' \\\n    --INPUT  ${name}.sorted.bam \\\n    --OUTPUT ${name}.dedup.bam \\\n    --ASSUME_SORT_ORDER coordinate \\\n    --CREATE_INDEX true ${remove_duplicates} ${dedup_metrics}\n\n    cp ${name}.dedup.bai ${name}.dedup.bam.bai\n\n    rm -f ${name}.sorted.bam\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk --version >> software_versions.${task.process}.txt\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    dedup_metrics = params.skip_metrics ? \"\": \"--METRICS_FILE ${name}.dedup_metrics.txt\"\n    remove_duplicates = params.remove_duplicates ? \"--REMOVE_DUPLICATES true\" : \"--REMOVE_DUPLICATES false\"\n    \"\"\"\n    mkdir tmp\n\n    gatk SortSam \\\n    --java-options '-Xmx${params.mark_duplicates_memory}  -Djava.io.tmpdir=./tmp' \\\n    --INPUT ${bam} \\\n    --OUTPUT ${name}.sorted.bam \\\n    --SORT_ORDER coordinate\n\n    gatk MarkDuplicates \\\n    --java-options '-Xmx${params.mark_duplicates_memory}  -Djava.io.tmpdir=./tmp' \\\n    --INPUT  ${name}.sorted.bam \\\n    --OUTPUT ${name}.dedup.bam \\\n    --ASSUME_SORT_ORDER coordinate \\\n    --CREATE_INDEX true ${remove_duplicates} ${dedup_metrics}\n\n    cp ${name}.dedup.bai ${name}.dedup.bam.bai\n\n    rm -f ${name}.sorted.bam\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk --version >> software_versions.${task.process}.txt\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "name",
            "type",
            "bam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-bam-preprocessing",
        "directive": [
            "cpus \"${params.mark_duplicates_cpus}\"",
            "memory \"${params.mark_duplicates_memory}\"",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}/metrics/mark_duplicates\", mode: \"copy\", pattern: \"*.dedup_metrics.txt\"",
            "publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "PREPARE_BAM": {
        "name_process": "PREPARE_BAM",
        "string_process": "\nprocess PREPARE_BAM {\n    cpus \"${params.prepare_bam_cpus}\"\n    memory \"${params.prepare_bam_memory}\"\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0 bioconda::samtools=1.12\" : null)\n\n    input:\n    tuple val(name), val(type), file(bam)\n\n    output:\n    tuple val(name), val(type), file(\"${name}.prepared.bam\"), emit: prepared_bams\n    file(\"software_versions.${task.process}.txt\")\n\n    script:\n    order = params.skip_deduplication ? \"--SORT_ORDER coordinate\": \"--SORT_ORDER queryname\"\n    \"\"\"\n    mkdir tmp\n\n    samtools sort \\\n    --threads ${params.prepare_bam_cpus} \\\n    -o ${name}.sorted.bam ${bam}\n\n    gatk AddOrReplaceReadGroups \\\n    --java-options '-Xmx${params.prepare_bam_memory} -Djava.io.tmpdir=./tmp' \\\n    --VALIDATION_STRINGENCY SILENT \\\n    --INPUT ${name}.sorted.bam \\\n    --OUTPUT /dev/stdout \\\n    --REFERENCE_SEQUENCE ${params.reference} \\\n    --RGPU 1 \\\n    --RGID 1 \\\n    --RGSM ${type} \\\n    --RGLB 1 \\\n    --RGPL ${params.platform} ${order} | \\\n    gatk CleanSam \\\n    --java-options '-Xmx${params.prepare_bam_memory} -Djava.io.tmpdir=./tmp' \\\n    --INPUT /dev/stdin \\\n    --OUTPUT /dev/stdout | \\\n    gatk ReorderSam \\\n    --java-options '-Xmx${params.prepare_bam_memory} -Djava.io.tmpdir=./tmp' \\\n    --INPUT /dev/stdin \\\n    --OUTPUT ${name}.prepared.bam \\\n    --SEQUENCE_DICTIONARY ${params.reference}\n\n    rm -f ${name}.sorted.bam\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk --version >> software_versions.${task.process}.txt\n    samtools --version >> software_versions.${task.process}.txt\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    order = params.skip_deduplication ? \"--SORT_ORDER coordinate\": \"--SORT_ORDER queryname\"\n    \"\"\"\n    mkdir tmp\n\n    samtools sort \\\n    --threads ${params.prepare_bam_cpus} \\\n    -o ${name}.sorted.bam ${bam}\n\n    gatk AddOrReplaceReadGroups \\\n    --java-options '-Xmx${params.prepare_bam_memory} -Djava.io.tmpdir=./tmp' \\\n    --VALIDATION_STRINGENCY SILENT \\\n    --INPUT ${name}.sorted.bam \\\n    --OUTPUT /dev/stdout \\\n    --REFERENCE_SEQUENCE ${params.reference} \\\n    --RGPU 1 \\\n    --RGID 1 \\\n    --RGSM ${type} \\\n    --RGLB 1 \\\n    --RGPL ${params.platform} ${order} | \\\n    gatk CleanSam \\\n    --java-options '-Xmx${params.prepare_bam_memory} -Djava.io.tmpdir=./tmp' \\\n    --INPUT /dev/stdin \\\n    --OUTPUT /dev/stdout | \\\n    gatk ReorderSam \\\n    --java-options '-Xmx${params.prepare_bam_memory} -Djava.io.tmpdir=./tmp' \\\n    --INPUT /dev/stdin \\\n    --OUTPUT ${name}.prepared.bam \\\n    --SEQUENCE_DICTIONARY ${params.reference}\n\n    rm -f ${name}.sorted.bam\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk --version >> software_versions.${task.process}.txt\n    samtools --version >> software_versions.${task.process}.txt\n    \"\"\"",
        "nb_lignes_script": 34,
        "language_script": "bash",
        "tools": [
            "CORDERLY",
            "SAMtools",
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/CORDERLY",
            "https://bio.tools/samtools",
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "CORDERLY",
                "uri": "https://bio.tools/CORDERLY",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0602",
                            "term": "Molecular interactions, pathways and networks"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3382",
                            "term": "Imaging"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3443",
                                    "term": "Image analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The CORDERLY software analyses colloidal ordering via the 2D fast Fourier transform, the radial distribution function, the spatial distribution function, and the angular distribution. The spatial distribution function plots the resulting analysis in Cartesian and polar coordinates (angular distribution).",
                "homepage": "https://github.com/adrena-lab/CORDERLY"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "name",
            "type",
            "bam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-bam-preprocessing",
        "directive": [
            "cpus \"${params.prepare_bam_cpus}\"",
            "memory \"${params.prepare_bam_memory}\"",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}/\", mode: \"copy\", pattern: \"software_versions.*\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0 bioconda::samtools=1.12\" : null)"
        ],
        "when": "",
        "stub": ""
    },
    "INDEX_BAM": {
        "name_process": "INDEX_BAM",
        "string_process": "\nprocess INDEX_BAM {\n    cpus \"${params.index_cpus}\"\n    memory \"${params.index_memory}\"\n    tag \"${name}\"\n    publishDir \"${params.output}/${name}\", mode: \"copy\", pattern: \"software_versions.*\"\n\n    conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)\n\n    input:\n    tuple val(name), val(type), file(bam)\n\n    output:\n    tuple val(name), val(type), file(\"${bam}\"), file(\"${bam.baseName}.bai\"), emit: indexed_bams\n    file(\"software_versions.${task.process}.txt\")\n\n    script:\n    \"\"\"\n    mkdir tmp\n\n    gatk BuildBamIndex \\\n    --java-options '-Xmx8g  -Djava.io.tmpdir=./tmp' \\\n    --INPUT  ${bam}\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk --version >> software_versions.${task.process}.txt\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    mkdir tmp\n\n    gatk BuildBamIndex \\\n    --java-options '-Xmx8g  -Djava.io.tmpdir=./tmp' \\\n    --INPUT  ${bam}\n\n    echo ${params.manifest} >> software_versions.${task.process}.txt\n    gatk --version >> software_versions.${task.process}.txt\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "GATK"
        ],
        "tools_url": [
            "https://bio.tools/gatk"
        ],
        "tools_dico": [
            {
                "name": "GATK",
                "uri": "https://bio.tools/gatk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Workflows"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0769",
                            "term": "Pipelines"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3202",
                                    "term": "Polymorphism detection"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3196",
                                    "term": "Genotyping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2403",
                                    "term": "Sequence analysis (general)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Genome Analysis Toolkit (GATK) is a set of bioinformatic tools for analyzing high-throughput sequencing (HTS) and variant call format (VCF) data. The toolkit is well established for germline short variant discovery from whole genome and exome sequencing data. GATK4 expands functionality into copy number and somatic analyses and offers pipeline scripts for workflows.  \n\nVersion 4 (GATK4) is open-source at https://github.com/broadinstitute/gatk.",
                "homepage": "https://software.broadinstitute.org/gatk/"
            }
        ],
        "inputs": [
            "name",
            "type",
            "bam"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "TRON-Bioinformatics__tronflow-bam-preprocessing",
        "directive": [
            "cpus \"${params.index_cpus}\"",
            "memory \"${params.index_memory}\"",
            "tag \"${name}\"",
            "publishDir \"${params.output}/${name}\", mode: \"copy\", pattern: \"software_versions.*\"",
            "conda (params.enable_conda ? \"bioconda::gatk4=4.2.5.0\" : null)"
        ],
        "when": "",
        "stub": ""
    }
}
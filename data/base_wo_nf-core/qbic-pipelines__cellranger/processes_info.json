{
    "get_software_versions": {
        "name_process": "get_software_versions",
        "string_process": "\nprocess get_software_versions {\n    publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode,\n        saveAs: { filename ->\n                        if (filename.indexOf('.csv') > 0) filename\n                        else null\n        }\n\n    output:\n    file 'software_versions_mqc.yaml' into ch_software_versions_yaml\n    file 'software_versions.csv'\n\n    script:\n    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    fastqc --version > v_fastqc.txt\n    multiqc --version > v_multiqc.txt\n    cellranger --version > v_cellranger.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > v_pipeline.txt\n    echo $workflow.nextflow.version > v_nextflow.txt\n    fastqc --version > v_fastqc.txt\n    multiqc --version > v_multiqc.txt\n    cellranger --version > v_cellranger.txt\n    scrape_software_versions.py &> software_versions_mqc.yaml\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "FastQC",
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc",
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            },
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ch_software_versions_yaml"
        ],
        "nb_outputs": 1,
        "name_workflow": "qbic-pipelines__cellranger",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode , saveAs: { filename -> if (filename.indexOf('.csv') > 0) filename else null }"
        ],
        "when": "",
        "stub": ""
    },
    "get_references": {
        "name_process": "get_references",
        "string_process": "\nprocess get_references {\n    tag 'references'\n    label 'process_low'\n    publishDir path: { params.save_reference ? \"${params.outdir}/references\" : params.outdir },\n                saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode\n\n\n    output:\n    file \"refdata*\" into ch_reference_sources\n\n    when:\n    (!params.prebuilt_reference & !params.fasta & !params.gtf)\n\n    script:\n    if (params.genome == 'GRCh38') {\n        \"\"\"\n        wget https://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-GRCh38-3.0.0.tar.gz\n        \"\"\" \n    } else if ( params.genome == 'mm10' ) {\n        \"\"\"\n        wget https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-mm10-2020-A.tar.gz\n        \"\"\" \n    }\n}",
        "nb_lignes_process": 23,
        "string_script": "    if (params.genome == 'GRCh38') {\n        \"\"\"\n        wget https://cf.10xgenomics.com/supp/cell-exp/refdata-cellranger-GRCh38-3.0.0.tar.gz\n        \"\"\" \n    } else if ( params.genome == 'mm10' ) {\n        \"\"\"\n        wget https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-mm10-2020-A.tar.gz\n        \"\"\" \n    }",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "ch_reference_sources"
        ],
        "nb_outputs": 1,
        "name_workflow": "qbic-pipelines__cellranger",
        "directive": [
            "tag 'references'",
            "label 'process_low'",
            "publishDir path: { params.save_reference ? \"${params.outdir}/references\" : params.outdir } , saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode"
        ],
        "when": "(!params.prebuilt_reference & !params.fasta & !params.gtf)",
        "stub": ""
    },
    "build_references": {
        "name_process": "build_references",
        "string_process": "\nprocess build_references {\n    tag 'build_references'\n    label 'process_high'\n    publishDir path: { params.save_reference ? \"${params.outdir}/references\" : params.outdir },\n                saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode\n\n    input:\n    file(fasta) from ch_fasta\n    file(gtf) from ch_gtf\n\n    output:\n    file \"${params.reference_name}\" into ch_reference_build\n\n    when:\n    (!params.prebuilt_reference & !params.genome)\n\n    script:\n    \"\"\"\n    cellranger mkgtf \\\n        $gtf \\\n        '${gtf.baseName}.filtered.gtf' \\\n        --attribute=gene_biotype:protein_coding\n    \n    cellranger mkref \\\n        --genome=${params.reference_name} \\\n        --fasta=${fasta} \\\n        --genes=${gtf}\n    \"\"\" \n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    cellranger mkgtf \\\n        $gtf \\\n        '${gtf.baseName}.filtered.gtf' \\\n        --attribute=gene_biotype:protein_coding\n    \n    cellranger mkref \\\n        --genome=${params.reference_name} \\\n        --fasta=${fasta} \\\n        --genes=${gtf}\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_fasta",
            "ch_gtf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ch_reference_build"
        ],
        "nb_outputs": 1,
        "name_workflow": "qbic-pipelines__cellranger",
        "directive": [
            "tag 'build_references'",
            "label 'process_high'",
            "publishDir path: { params.save_reference ? \"${params.outdir}/references\" : params.outdir } , saveAs: { params.save_reference ? it : null }, mode: params.publish_dir_mode"
        ],
        "when": "(!params.prebuilt_reference & !params.genome)",
        "stub": ""
    },
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    tag \"$sample\"\n    label 'process_medium'\n    publishDir \"${params.outdir}/fastqc\", mode: params.publish_dir_mode,\n        saveAs: { filename ->\n                    filename.indexOf('.zip') > 0 ? \"zips/$filename\" : \"$filename\"\n        }\n\n    input:\n    tuple val(GEM), val(sample), val(lane), file(R1), file(R2) from ch_read_files_fastqc\n\n    output:\n    file '*_fastqc.{zip,html}' into ch_fastqc_results\n\n    script:\n    \"\"\"\n    fastqc --quiet --threads $task.cpus ${R1} ${R2} \n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    fastqc --quiet --threads $task.cpus ${R1} ${R2} \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "ch_read_files_fastqc"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ch_fastqc_results"
        ],
        "nb_outputs": 1,
        "name_workflow": "qbic-pipelines__cellranger",
        "directive": [
            "tag \"$sample\"",
            "label 'process_medium'",
            "publishDir \"${params.outdir}/fastqc\", mode: params.publish_dir_mode , saveAs: { filename -> filename.indexOf('.zip') > 0 ? \"zips/$filename\" : \"$filename\" }"
        ],
        "when": "",
        "stub": ""
    },
    "count": {
        "name_process": "count",
        "string_process": "\nprocess count {\n    tag \"$GEM\"\n    label 'cellranger'\n    publishDir \"${params.outdir}/cellranger_count\", mode: params.publish_dir_mode\n\n    input:\n    tuple val(GEM), val(sample), val(lane), file(R1), file(R2) from ch_read_files_count.groupTuple()\n    file(reference) from ch_reference_sources.mix( ch_reference_path ).mix( ch_reference_build ).collect()\n\n    output:\n    file \"sample-${GEM}/outs/*\"\n\n    script:\n    def reference_folder = params.prebuilt_reference ?: (params.genome == 'GRCh38') ? 'refdata-cellranger-GRCh38-3.0.0' : ( params.genome == 'mm10') ? 'refdata-gex-mm10-2020-A' : ''\n    def sample_arg = sample.unique().join(\",\")\n    if ( params.prebuilt_reference ) {\n        \"\"\"\n        cellranger count --id='sample-${GEM}' \\\n            --fastqs=. \\\n            --transcriptome=${reference_folder} \\\n            --sample=${sample_arg} \\\n            --localcores=${task.cpus} \\\n            --localmem=${task.memory.toGiga()}\n        \"\"\"\n    } else if ( params.genome ) {\n        \"\"\"\n        tar -zxvf ${reference}\n        cellranger count --id='sample-${GEM}' \\\n            --fastqs=. \\\n            --transcriptome=${reference_folder} \\\n            --sample=${sample_arg} \\\n            --localcores=${task.cpus} \\\n            --localmem=${task.memory.toGiga()}\n        \"\"\"\n    } else {\n        \"\"\"\n        cellranger count --id='sample-${GEM}' \\\n            --fastqs=. \\\n            --transcriptome=${params.reference_name} \\\n            --sample=${sample_arg} \\\n            --localcores=${task.cpus} \\\n            --localmem=${task.memory.toGiga()}\n        \"\"\"\n    }\n\n    stub:\n    \"\"\"\n    mkdir -p \"sample-${GEM}/outs/\"\n    touch sample-${GEM}/outs/fake_file.txt\n    \"\"\"\n}",
        "nb_lignes_process": 50,
        "string_script": "    def reference_folder = params.prebuilt_reference ?: (params.genome == 'GRCh38') ? 'refdata-cellranger-GRCh38-3.0.0' : ( params.genome == 'mm10') ? 'refdata-gex-mm10-2020-A' : ''\n    def sample_arg = sample.unique().join(\",\")\n    if ( params.prebuilt_reference ) {\n        \"\"\"\n        cellranger count --id='sample-${GEM}' \\\n            --fastqs=. \\\n            --transcriptome=${reference_folder} \\\n            --sample=${sample_arg} \\\n            --localcores=${task.cpus} \\\n            --localmem=${task.memory.toGiga()}\n        \"\"\"\n    } else if ( params.genome ) {\n        \"\"\"\n        tar -zxvf ${reference}\n        cellranger count --id='sample-${GEM}' \\\n            --fastqs=. \\\n            --transcriptome=${reference_folder} \\\n            --sample=${sample_arg} \\\n            --localcores=${task.cpus} \\\n            --localmem=${task.memory.toGiga()}\n        \"\"\"\n    } else {\n        \"\"\"\n        cellranger count --id='sample-${GEM}' \\\n            --fastqs=. \\\n            --transcriptome=${params.reference_name} \\\n            --sample=${sample_arg} \\\n            --localcores=${task.cpus} \\\n            --localmem=${task.memory.toGiga()}\n        \"\"\"\n    }",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_read_files_count",
            "ch_reference_sources",
            "ch_reference_path",
            "ch_reference_build"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "qbic-pipelines__cellranger",
        "directive": [
            "tag \"$GEM\"",
            "label 'cellranger'",
            "publishDir \"${params.outdir}/cellranger_count\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": "\n    \"\"\"\n    mkdir -p \"sample-${GEM}/outs/\"\n    touch sample-${GEM}/outs/fake_file.txt\n    \"\"\""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    publishDir \"${params.outdir}/MultiQC\", mode: params.publish_dir_mode\n\n    input:\n    file (multiqc_config) from ch_multiqc_config\n    file (mqc_custom_config) from ch_multiqc_custom_config.collect().ifEmpty([])\n    file ('fastqc/*') from ch_fastqc_results.collect().ifEmpty([])\n    file ('software_versions/*') from ch_software_versions_yaml.collect()\n    file workflow_summary from ch_workflow_summary.collectFile(name: \"workflow_summary_mqc.yaml\")\n\n    output:\n    file \"*multiqc_report.html\" into ch_multiqc_report\n    file \"*_data\"\n    file \"multiqc_plots\"\n\n    script:\n    rtitle = ''\n    rfilename = ''\n    if (!(workflow.runName ==~ /[a-z]+_[a-z]+/)) {\n        rtitle = \"--title \\\"${workflow.runName}\\\"\"\n        rfilename = \"--filename \" + workflow.runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\"\n    }\n    custom_config_file = params.multiqc_config ? \"--config $mqc_custom_config\" : ''\n    \"\"\"\n    multiqc -f $rtitle $rfilename $custom_config_file .\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    rtitle = ''\n    rfilename = ''\n    if (!(workflow.runName ==~ /[a-z]+_[a-z]+/)) {\n        rtitle = \"--title \\\"${workflow.runName}\\\"\"\n        rfilename = \"--filename \" + workflow.runName.replaceAll('\\\\W','_').replaceAll('_+','_') + \"_multiqc_report\"\n    }\n    custom_config_file = params.multiqc_config ? \"--config $mqc_custom_config\" : ''\n    \"\"\"\n    multiqc -f $rtitle $rfilename $custom_config_file .\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "ch_multiqc_config",
            "ch_multiqc_custom_config",
            "ch_fastqc_results",
            "ch_software_versions_yaml",
            "ch_workflow_summary"
        ],
        "nb_inputs": 5,
        "outputs": [
            "ch_multiqc_report"
        ],
        "nb_outputs": 1,
        "name_workflow": "qbic-pipelines__cellranger",
        "directive": [
            "publishDir \"${params.outdir}/MultiQC\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    },
    "output_documentation": {
        "name_process": "output_documentation",
        "string_process": "\nprocess output_documentation {\n    publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode\n\n    input:\n    file output_docs from ch_output_docs\n    file images from ch_output_docs_images\n\n    output:\n    file 'results_description.html'\n\n    script:\n    \"\"\"\n    markdown_to_html.py $output_docs -o results_description.html\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    markdown_to_html.py $output_docs -o results_description.html\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ch_output_docs",
            "ch_output_docs_images"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "qbic-pipelines__cellranger",
        "directive": [
            "publishDir \"${params.outdir}/pipeline_info\", mode: params.publish_dir_mode"
        ],
        "when": "",
        "stub": ""
    }
}
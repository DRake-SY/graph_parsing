{
    "add_rowindex_and_sortindex": {
        "name_process": "add_rowindex_and_sortindex",
        "string_process": "\nprocess add_rowindex_and_sortindex {\n    publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true\n    publishDir \"${params.outdir}/nr_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.linecount'\n    input:\n      tuple val(id), path(qcin), path(map)\n    output:\n      tuple val(id), path(\"unzipped_rowindexed_qcin_${id}\"), path(\"unzipped_rowindexed_map_${id}\"), path(\"merged_header_${id}\")\n      path(\"*.linecount\")\n    script:\n      \"\"\"\n      # remove the header, which can be added later again\n      paste -d\" \" <(zcat ${map} | head -n1 | awk '{print \"sortindex\", \\$12}' ) <(zcat ${qcin} | head -n1 | awk '{print 1, \"sortindex\", \\$0}' ) > merged_header_${id}\n      gunzip -c ${map} | awk 'NR>1{print \\$2\"-\"\\$3\"-\"\\$5\"-\"\\$6, \\$12}' > unzipped_rowindexed_map_${id}\n      gunzip -c ${qcin} | awk 'NR>1{print NR, \\$1\"-\"\\$2\"-\"\\$4\"-\"\\$5, \\$0}' > unzipped_rowindexed_qcin_${id}\n      wc -l unzipped_rowindexed_map_${id} > unzipped_rowindexed_map_${id}.linecount\n      wc -l unzipped_rowindexed_qcin_${id} > unzipped_rowindexed_qcin_${id}.linecount\n      \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "      \"\"\"\n      # remove the header, which can be added later again\n      paste -d\" \" <(zcat ${map} | head -n1 | awk '{print \"sortindex\", \\$12}' ) <(zcat ${qcin} | head -n1 | awk '{print 1, \"sortindex\", \\$0}' ) > merged_header_${id}\n      gunzip -c ${map} | awk 'NR>1{print \\$2\"-\"\\$3\"-\"\\$5\"-\"\\$6, \\$12}' > unzipped_rowindexed_map_${id}\n      gunzip -c ${qcin} | awk 'NR>1{print NR, \\$1\"-\"\\$2\"-\"\\$4\"-\"\\$5, \\$0}' > unzipped_rowindexed_qcin_${id}\n      wc -l unzipped_rowindexed_map_${id} > unzipped_rowindexed_map_${id}.linecount\n      wc -l unzipped_rowindexed_qcin_${id} > unzipped_rowindexed_qcin_${id}.linecount\n      \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "qcin",
            "map"
        ],
        "nb_inputs": 3,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "pappewaio__replace_rsid_in_qcfiles",
        "directive": [
            "publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true",
            "publishDir \"${params.outdir}/nr_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.linecount'"
        ],
        "when": "",
        "stub": ""
    },
    "sort_on_chrpos_refalt": {
        "name_process": "sort_on_chrpos_refalt",
        "string_process": "\nprocess sort_on_chrpos_refalt {\n    publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true\n    publishDir \"${params.outdir}/nr_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.linecount'\n    input:\n      tuple val(id), path(qcin), path(map), path(mergedheader)\n    output:\n      tuple val(id), path(\"sorted_rowindexed_qcin_${id}\"), path(\"sorted_rowindexed_map_${id}\"), path(mergedheader)\n      path(\"*.linecount\")\n    script:\n      \"\"\"\n      LC_ALL=C sort -k1,1 ${map} > sorted_rowindexed_map_${id}\n      LC_ALL=C sort -k2,2 ${qcin} > sorted_rowindexed_qcin_${id}\n      wc -l sorted_rowindexed_map_${id} > sorted_rowindexed_map_${id}.linecount\n      wc -l sorted_rowindexed_qcin_${id} > sorted_rowindexed_qcin_${id}.linecount\n      \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "      \"\"\"\n      LC_ALL=C sort -k1,1 ${map} > sorted_rowindexed_map_${id}\n      LC_ALL=C sort -k2,2 ${qcin} > sorted_rowindexed_qcin_${id}\n      wc -l sorted_rowindexed_map_${id} > sorted_rowindexed_map_${id}.linecount\n      wc -l sorted_rowindexed_qcin_${id} > sorted_rowindexed_qcin_${id}.linecount\n      \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "qcin",
            "map",
            "mergedheader"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "pappewaio__replace_rsid_in_qcfiles",
        "directive": [
            "publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true",
            "publishDir \"${params.outdir}/nr_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.linecount'"
        ],
        "when": "",
        "stub": ""
    },
    "check_index_duplicates": {
        "name_process": "check_index_duplicates",
        "string_process": "\nprocess check_index_duplicates {\n    publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true\n    publishDir \"${params.outdir}/nr_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.linecount'\n    input:\n      tuple val(id), path(qcin), path(map), path(mergedheader)\n    output:\n      tuple val(id), path(\"check_rowindex_dups_qcin_${id}\"), path(\"check_rowindex_dups_map_${id}\")\n      path(\"*.linecount\")\n    script:\n      \"\"\"\n      check_index_duplicates.sh \"${map}\" \"1,1\" > check_rowindex_dups_map_${id}\n      check_index_duplicates.sh \"${qcin}\" \"2,2\" > check_rowindex_dups_qcin_${id}\n      wc -l check_rowindex_dups_map_${id} > check_rowindex_dups_map_${id}.linecount\n      wc -l check_rowindex_dups_qcin_${id} > check_rowindex_dups_qcin_${id}.linecount\n      \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "      \"\"\"\n      check_index_duplicates.sh \"${map}\" \"1,1\" > check_rowindex_dups_map_${id}\n      check_index_duplicates.sh \"${qcin}\" \"2,2\" > check_rowindex_dups_qcin_${id}\n      wc -l check_rowindex_dups_map_${id} > check_rowindex_dups_map_${id}.linecount\n      wc -l check_rowindex_dups_qcin_${id} > check_rowindex_dups_qcin_${id}.linecount\n      \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "qcin",
            "map",
            "mergedheader"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "pappewaio__replace_rsid_in_qcfiles",
        "directive": [
            "publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true",
            "publishDir \"${params.outdir}/nr_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.linecount'"
        ],
        "when": "",
        "stub": ""
    },
    "join_sortindex": {
        "name_process": "join_sortindex",
        "string_process": "\nprocess join_sortindex {\n    publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true\n    publishDir \"${params.outdir}/nr_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.linecount'\n    input:\n      tuple val(id), path(qcin), path(map), path(mergedheader)\n    output:\n      tuple val(id), path(\"joined_sortindex_${id}\")\n      path(\"*.linecount\")\n    script:\n      \"\"\"\n      cat $mergedheader | cut -d\" \" -f1,2,3,5- > joined_sortindex_${id}\n      LC_ALL=C join -1 1 -2 2 ${map} ${qcin} >> joined_sortindex_${id}\n      wc -l joined_sortindex_${id} | awk '{\\$1=\\$1-1;print \\$0}' > joined_sortindex_${id}.linecount\n      \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "      \"\"\"\n      cat $mergedheader | cut -d\" \" -f1,2,3,5- > joined_sortindex_${id}\n      LC_ALL=C join -1 1 -2 2 ${map} ${qcin} >> joined_sortindex_${id}\n      wc -l joined_sortindex_${id} | awk '{\\$1=\\$1-1;print \\$0}' > joined_sortindex_${id}.linecount\n      \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "qcin",
            "map",
            "mergedheader"
        ],
        "nb_inputs": 4,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "pappewaio__replace_rsid_in_qcfiles",
        "directive": [
            "publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true",
            "publishDir \"${params.outdir}/nr_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.linecount'"
        ],
        "when": "",
        "stub": ""
    },
    "replace_rsid_and_reformat": {
        "name_process": "replace_rsid_and_reformat",
        "string_process": "\nprocess replace_rsid_and_reformat {\n    publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true\n    publishDir \"${params.outdir}/nr_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.linecount'\n    input:\n      tuple val(id), path(qcin)\n    output:\n      tuple val(id), path(\"reformatted_${id}\")\n      path(\"*.linecount\")\n    script:\n      \"\"\"\n      replace_and_format.sh ${qcin} > reformatted_${id}\n      #remove header line count using awk\n      wc -l reformatted_${id} | awk '{\\$1=\\$1-1;print \\$0}' > reformatted_${id}.linecount\n      \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "      \"\"\"\n      replace_and_format.sh ${qcin} > reformatted_${id}\n      #remove header line count using awk\n      wc -l reformatted_${id} | awk '{\\$1=\\$1-1;print \\$0}' > reformatted_${id}.linecount\n      \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "qcin"
        ],
        "nb_inputs": 2,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "pappewaio__replace_rsid_in_qcfiles",
        "directive": [
            "publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true",
            "publishDir \"${params.outdir}/nr_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.linecount'"
        ],
        "when": "",
        "stub": ""
    },
    "original_sorting": {
        "name_process": "original_sorting",
        "string_process": "\nprocess original_sorting {\n    publishDir \"${params.outdir}/updated_qc_files\", mode: 'copy', overwrite: false\n    publishDir \"${params.outdir}/nr_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.linecount'\n    input:\n      tuple val(id), path(\"qcin\")\n    output:\n      tuple val(id), path(\"${id}.gz\")\n      path(\"*.linecount\")\n    script:\n      \"\"\"\n      LC_ALL=C sort -k1,1 -n qcin | cut -d ' ' -f2- | gzip -c > ${id}.gz\n      wc -l <(zcat ${id}.gz) | awk '{\\$1=\\$1-1;print \\$0}' > ${id}.linecount\n      \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "      \"\"\"\n      LC_ALL=C sort -k1,1 -n qcin | cut -d ' ' -f2- | gzip -c > ${id}.gz\n      wc -l <(zcat ${id}.gz) | awk '{\\$1=\\$1-1;print \\$0}' > ${id}.linecount\n      \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id"
        ],
        "nb_inputs": 1,
        "outputs": [
            "id"
        ],
        "nb_outputs": 1,
        "name_workflow": "pappewaio__replace_rsid_in_qcfiles",
        "directive": [
            "publishDir \"${params.outdir}/updated_qc_files\", mode: 'copy', overwrite: false",
            "publishDir \"${params.outdir}/nr_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.linecount'"
        ],
        "when": "",
        "stub": ""
    },
    "compare_bp_new_and_original": {
        "name_process": "compare_bp_new_and_original",
        "string_process": "\nprocess compare_bp_new_and_original {\n    publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true\n    publishDir \"${params.outdir}/diff_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.diff'\n    input:\n      tuple val(id), path(\"updatedqcin.gz\"), path(qcin), path(map)\n    output:\n      path(\"*.diff\")\n      path(\"*_bp\")\n    script:\n      \"\"\"\n      zcat ${qcin} | awk '{print \\$2}' > qcin_bp\n      zcat updatedqcin.gz | awk '{print \\$2}' > updatedqcin_bp\n      diff -s qcin_bp updatedqcin_bp > matched_bp_old_and_new_${id}.diff\n      \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "      \"\"\"\n      zcat ${qcin} | awk '{print \\$2}' > qcin_bp\n      zcat updatedqcin.gz | awk '{print \\$2}' > updatedqcin_bp\n      diff -s qcin_bp updatedqcin_bp > matched_bp_old_and_new_${id}.diff\n      \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "RDiff"
        ],
        "tools_url": [
            "https://bio.tools/rdiff"
        ],
        "tools_dico": [
            {
                "name": "RDiff",
                "uri": "https://bio.tools/rdiff",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "rDiff is an open source tool for accurate detection of differential RNA processing from RNA-Seq data. It implements two statistical tests to detect changes of the RNA processing between two samples. rDiff.parametric is a powerful test, which can be applied for well annotated organisms to detect changes in the relative abundance of isoforms. rDiff.nonparametric is an alternative when the annotation is incomplete or missing.",
                "homepage": "http://bioweb.me/rdiff"
            }
        ],
        "inputs": [
            "id",
            "qcin",
            "map"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "pappewaio__replace_rsid_in_qcfiles",
        "directive": [
            "publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true",
            "publishDir \"${params.outdir}/diff_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.diff'"
        ],
        "when": "",
        "stub": ""
    },
    "compare_columns_new_and_original": {
        "name_process": "compare_columns_new_and_original",
        "string_process": "\nprocess compare_columns_new_and_original {\n    publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true\n    publishDir \"${params.outdir}/diff_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.diff'\n    input:\n      tuple val(id), path(\"updatedqcin.gz\"), path(qcin), path(map)\n    output:\n      path(\"*.diff\")\n      path(\"*_head\")\n    script:\n      \"\"\"\n      head -n1 <(zcat ${qcin}) > qcin_head\n      head -n1 <(zcat updatedqcin.gz) > updatedqcin_head\n      diff -s qcin_head updatedqcin_head > matched_columns_old_and_new_${id}.diff\n      \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "      \"\"\"\n      head -n1 <(zcat ${qcin}) > qcin_head\n      head -n1 <(zcat updatedqcin.gz) > updatedqcin_head\n      diff -s qcin_head updatedqcin_head > matched_columns_old_and_new_${id}.diff\n      \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "RDiff"
        ],
        "tools_url": [
            "https://bio.tools/rdiff"
        ],
        "tools_dico": [
            {
                "name": "RDiff",
                "uri": "https://bio.tools/rdiff",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "RNA splicing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3320",
                            "term": "Alternative splicing"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "rDiff is an open source tool for accurate detection of differential RNA processing from RNA-Seq data. It implements two statistical tests to detect changes of the RNA processing between two samples. rDiff.parametric is a powerful test, which can be applied for well annotated organisms to detect changes in the relative abundance of isoforms. rDiff.nonparametric is an alternative when the annotation is incomplete or missing.",
                "homepage": "http://bioweb.me/rdiff"
            }
        ],
        "inputs": [
            "id",
            "qcin",
            "map"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "pappewaio__replace_rsid_in_qcfiles",
        "directive": [
            "publishDir \"${params.outdir}/intermediates/${id}\", mode: 'rellink', overwrite: true",
            "publishDir \"${params.outdir}/diff_checks/${id}\", mode: 'copy', overwrite: true, pattern: '*.diff'"
        ],
        "when": "",
        "stub": ""
    }
}
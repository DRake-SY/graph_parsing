{
    "get_spaln_index": {
        "name_process": "get_spaln_index",
        "string_process": "\nprocess get_spaln_index {\n\n    label \"spaln\"\n    label \"small_task\"\n    time '3h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name), path(\"in.fasta\")\n\n    output:\n    tuple val(name),\n        path(\"${name}_spaln_index.bkn\"),\n        path(\"${name}_spaln_index.ent\"),\n        path(\"${name}_spaln_index.idx\"),\n        path(\"${name}_spaln_index.bkp\"),\n        path(\"${name}_spaln_index.grp\"),\n        path(\"${name}_spaln_index.seq\")\n\n    script:\n    \"\"\"\n    makeidx.pl -inp in.fasta\n\n    mv \"in.bkn\" \"${name}_spaln_index.bkn\"\n    mv \"in.ent\" \"${name}_spaln_index.ent\"\n    mv \"in.idx\" \"${name}_spaln_index.idx\"\n    mv \"in.bkp\" \"${name}_spaln_index.bkp\"\n    mv \"in.grp\" \"${name}_spaln_index.grp\"\n    mv \"in.seq\" \"${name}_spaln_index.seq\"\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    makeidx.pl -inp in.fasta\n\n    mv \"in.bkn\" \"${name}_spaln_index.bkn\"\n    mv \"in.ent\" \"${name}_spaln_index.ent\"\n    mv \"in.idx\" \"${name}_spaln_index.idx\"\n    mv \"in.bkp\" \"${name}_spaln_index.bkp\"\n    mv \"in.grp\" \"${name}_spaln_index.grp\"\n    mv \"in.seq\" \"${name}_spaln_index.seq\"\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"spaln\"",
            "label \"small_task\"",
            "time '3h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "spaln_align_transcripts": {
        "name_process": "spaln_align_transcripts",
        "string_process": "\nprocess spaln_align_transcripts {\n\n    label \"spaln\"\n    label \"medium_task\"\n    time '5h'\n\n    tag \"${name}\"\n\n    input:\n    val species\n    val max_gene_hard\n    val min_intron_soft\n    tuple val(name),\n        path(\"db.bkn\"),\n        path(\"db.ent\"),\n        path(\"db.idx\"),\n        path(\"db.bkp\"),\n        path(\"db.grp\"),\n        path(\"db.seq\"),\n        path(\"transcripts.fasta\")\n\n    output:\n    tuple val(name), path(\"${name}_spaln_transcripts.gff3\")\n\n    script:\n    def species_params = species ? \"-T${species} -yS \" : \"\"\n\n    \"\"\"\n    spaln \\\n      -LS \\\n      -O0 \\\n      -Q7 \\\n      -S3 \\\n      -yX \\\n      -ya1 \\\n      ${species_params} \\\n      -XG ${max_gene_hard} \\\n      -yL${min_intron_soft} \\\n      -t ${task.cpus} \\\n      -d db \\\n      \"transcripts.fasta\" \\\n    > \"${name}_spaln_transcripts.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def species_params = species ? \"-T${species} -yS \" : \"\"\n\n    \"\"\"\n    spaln \\\n      -LS \\\n      -O0 \\\n      -Q7 \\\n      -S3 \\\n      -yX \\\n      -ya1 \\\n      ${species_params} \\\n      -XG ${max_gene_hard} \\\n      -yL${min_intron_soft} \\\n      -t ${task.cpus} \\\n      -d db \\\n      \"transcripts.fasta\" \\\n    > \"${name}_spaln_transcripts.gff3\"\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "species",
            "max_gene_hard",
            "min_intron_soft",
            "name"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"spaln\"",
            "label \"medium_task\"",
            "time '5h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "spaln_align_proteins": {
        "name_process": "spaln_align_proteins",
        "string_process": "\nprocess spaln_align_proteins {\n\n    label \"spaln\"\n    label \"medium_task\"\n    time '6h'\n\n    tag \"${name}\"\n\n    input:\n    val trans_table\n    val min_intron_soft\n    val max_gene_hard\n    tuple val(name),\n        path(\"db.bkn\"),\n        path(\"db.ent\"),\n        path(\"db.idx\"),\n        path(\"db.bkp\"),\n        path(\"db.grp\"),\n        path(\"db.seq\"),\n        path(\"proteins.fasta\")\n\n    output:\n    tuple val(name), path(\"${name}_spaln_proteins.gff3\")\n\n    script:\n    \"\"\"\n    spaln \\\n      -C${trans_table} \\\n      -KP \\\n      -LS \\\n      -M3 \\\n      -O0 \\\n      -Q7 \\\n      -ya1 \\\n      -yX \\\n      -yL${min_intron_soft} \\\n      -XG${max_gene_hard} \\\n      -t ${task.cpus} \\\n      -d db \\\n      \"proteins.fasta\" \\\n    > \"${name}_spaln_proteins.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    \"\"\"\n    spaln \\\n      -C${trans_table} \\\n      -KP \\\n      -LS \\\n      -M3 \\\n      -O0 \\\n      -Q7 \\\n      -ya1 \\\n      -yX \\\n      -yL${min_intron_soft} \\\n      -XG${max_gene_hard} \\\n      -t ${task.cpus} \\\n      -d db \\\n      \"proteins.fasta\" \\\n    > \"${name}_spaln_proteins.gff3\"\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trans_table",
            "min_intron_soft",
            "max_gene_hard",
            "name"
        ],
        "nb_inputs": 4,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"spaln\"",
            "label \"medium_task\"",
            "time '6h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "fix_spaln_proteins_stop": {
        "name_process": "fix_spaln_proteins_stop",
        "string_process": "\nprocess fix_spaln_proteins_stop {\n\n    label \"gffpal\"\n    label \"small_task\"\n    time '2h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name), path(\"spaln.gff3\")\n\n    output:\n    tuple val(name), path(\"${name}_spaln_proteins_fixed_stop.gff3\")\n\n    script:\n    \"\"\"\n      awk -F '\\\\t' 'BEGIN {OFS=\"\\\\t\"} \\$3 == \"cds\" {\\$3=\"CDS\"} {print}' \"spaln.gff3\" \\\n    | gffpal expandcds -o \"${name}_spaln_proteins_fixed_stop.gff3\" --cds-type \"CDS\" -\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n      awk -F '\\\\t' 'BEGIN {OFS=\"\\\\t\"} \\$3 == \"cds\" {\\$3=\"CDS\"} {print}' \"spaln.gff3\" \\\n    | gffpal expandcds -o \"${name}_spaln_proteins_fixed_stop.gff3\" --cds-type \"CDS\" -\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gffpal\"",
            "label \"small_task\"",
            "time '2h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_gmap_index": {
        "name_process": "get_gmap_index",
        "string_process": "\nprocess get_gmap_index {\n\n    label \"gmap\"\n    label \"medium_task\"\n    time '3h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name), path(genome)\n\n    output:\n    tuple val(name), path(\"${name}_gmap_index\")\n\n    script:\n    \"\"\"\n    gmap_build \\\n      -k 13 \\\n      -D \"${name}_gmap_index\" \\\n      -d \"${name}\" \\\n      ${genome}\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    gmap_build \\\n      -k 13 \\\n      -D \"${name}_gmap_index\" \\\n      -d \"${name}\" \\\n      ${genome}\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "gmap_build"
        ],
        "tools_url": [
            "https://bio.tools/gmap_build"
        ],
        "tools_dico": [
            {
                "name": "gmap_build",
                "uri": "https://bio.tools/gmap_build",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3211",
                                    "term": "Genome indexing"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A database genome index for GMAP and GSNAP.",
                "homepage": "http://research-pub.gene.com/gmap/"
            }
        ],
        "inputs": [
            "name",
            "genome"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gmap\"",
            "label \"medium_task\"",
            "time '3h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "gmap_align_transcripts": {
        "name_process": "gmap_align_transcripts",
        "string_process": "\nprocess gmap_align_transcripts {\n\n    label \"gmap\"\n    label \"medium_task\"\n    time '6h'\n\n    tag \"${name}\"\n\n    input:\n    val min_intron_hard\n    val max_intron_hard\n    tuple val(name),\n        path(\"db\"),\n        path(\"transcripts.fasta\")\n\n    output:\n    tuple val(name), path(\"${name}_gmap_transcripts.gff3\")\n\n    script:\n    def trim_end_exons = 12\n    def microexon_spliceprob = 0.95\n    def canonical_mode = 1\n    def cross_species = \"\" // \"--cross-species \"\n\n    \"\"\"\n    gmap \\\n      --npaths=0 \\\n      --chimera-margin=50 \\\n      --min-intronlength=\"${min_intron_hard}\" \\\n      --max-intronlength-middle=\"${max_intron_hard}\" \\\n      --max-intronlength-ends=\"${max_intron_hard}\" \\\n      --trim-end-exons=\"${trim_end_exons}\" \\\n      --microexon-spliceprob=\"${microexon_spliceprob}\" \\\n      --canonical-mode=1 \\\n      ${cross_species} \\\n      --format=gff3_match_cdna \\\n      --nthreads \"${task.cpus}\" \\\n      -D db \\\n      -d \"${name}\" \\\n      transcripts.fasta \\\n    > ${name}_gmap_transcripts.gff3\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def trim_end_exons = 12\n    def microexon_spliceprob = 0.95\n    def canonical_mode = 1\n    def cross_species = \"\" // \"--cross-species \"\n\n    \"\"\"\n    gmap \\\n      --npaths=0 \\\n      --chimera-margin=50 \\\n      --min-intronlength=\"${min_intron_hard}\" \\\n      --max-intronlength-middle=\"${max_intron_hard}\" \\\n      --max-intronlength-ends=\"${max_intron_hard}\" \\\n      --trim-end-exons=\"${trim_end_exons}\" \\\n      --microexon-spliceprob=\"${microexon_spliceprob}\" \\\n      --canonical-mode=1 \\\n      ${cross_species} \\\n      --format=gff3_match_cdna \\\n      --nthreads \"${task.cpus}\" \\\n      -D db \\\n      -d \"${name}\" \\\n      transcripts.fasta \\\n    > ${name}_gmap_transcripts.gff3\n    \"\"\"",
        "nb_lignes_script": 22,
        "language_script": "bash",
        "tools": [
            "GMAP"
        ],
        "tools_url": [
            "https://bio.tools/gmap"
        ],
        "tools_dico": [
            {
                "name": "GMAP",
                "uri": "https://bio.tools/gmap",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Linkage mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Functional mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic cartography"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0282",
                                    "term": "Genetic map generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "Genomic Mapping and Alignment Program for mRNA and EST Sequences.",
                "homepage": "http://research-pub.gene.com/gmap/"
            }
        ],
        "inputs": [
            "min_intron_hard",
            "max_intron_hard",
            "name"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gmap\"",
            "label \"medium_task\"",
            "time '6h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_mmseqs_protein_db": {
        "name_process": "get_mmseqs_protein_db",
        "string_process": "\nprocess get_mmseqs_protein_db {\n\n    label \"mmseqs\"\n    label \"small_task\"\n    time '3h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name), path(\"seqs.fasta\")\n\n    output:\n    tuple val(name), path(\"${name}_mmseqs_protein_db\")\n\n    script:\n    \"\"\"\n    mkdir -p tmp \"${name}_mmseqs_protein_db\"\n\n    mmseqs createdb seqs.fasta \"${name}_mmseqs_protein_db/db\"\n    # mmseqs createindex \"${name}_mmseqs_protein_db/db\" tmp --threads \"${task.cpus}\"\n\n    rm -rf -- tmp\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    mkdir -p tmp \"${name}_mmseqs_protein_db\"\n\n    mmseqs createdb seqs.fasta \"${name}_mmseqs_protein_db/db\"\n    # mmseqs createindex \"${name}_mmseqs_protein_db/db\" tmp --threads \"${task.cpus}\"\n\n    rm -rf -- tmp\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "MMseqs"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            }
        ],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"mmseqs\"",
            "label \"small_task\"",
            "time '3h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_mmseqs_genome_db": {
        "name_process": "get_mmseqs_genome_db",
        "string_process": "\nprocess get_mmseqs_genome_db {\n\n    label \"mmseqs\"\n    label \"small_task\"\n    time '3h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name), path(\"seqs.fasta\")\n\n    output:\n    tuple val(name), path(\"${name}_mmseqs_genome_db\")\n\n    script:\n    \"\"\"\n    mkdir -p \"${name}_mmseqs_genome_db\"\n    mmseqs createdb seqs.fasta \"${name}_mmseqs_genome_db/db\" --dont-split-seq-by-len\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    mkdir -p \"${name}_mmseqs_genome_db\"\n    mmseqs createdb seqs.fasta \"${name}_mmseqs_genome_db/db\" --dont-split-seq-by-len\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MMseqs"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            }
        ],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"mmseqs\"",
            "label \"small_task\"",
            "time '3h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "mmseqs_search_genome_against_proteins": {
        "name_process": "mmseqs_search_genome_against_proteins",
        "string_process": "\nprocess mmseqs_search_genome_against_proteins {\n\n    label \"mmseqs\"\n    label \"big_task\"\n    time '6h'\n\n    tag \"${genome_name} - ${protein_name}\"\n\n    input:\n    val trans_table\n    tuple val(genome_name),\n        path(\"genome\"),\n        val(protein_name),\n        path(\"proteins\")\n\n    output:\n    tuple val(genome_name),\n        val(protein_name),\n        path(\"${genome_name}_${protein_name}_genome_v_protein_mmseqs_matches.tsv\")\n\n    script:\n    \"\"\"\n    mkdir result tmp\n    cp -rL proteins proteins_tmp\n\n    # Searching with genome as query is ~3X faster\n    mmseqs search \\\n      genome/db \\\n      proteins_tmp/db \\\n      result/db \\\n      tmp \\\n      --threads \"${task.cpus}\" \\\n      -e 0.00001 \\\n      --min-length 10 \\\n      --comp-bias-corr 1 \\\n      --split-mode 1 \\\n      --max-seqs 50 \\\n      --mask 0 \\\n      --orf-start-mode 1 \\\n      --translation-table \"${trans_table}\" \\\n      --use-all-table-starts\n\n    # Extract match results.\n    mmseqs convertalis \\\n      genome/db \\\n      proteins_tmp/db \\\n      result/db \\\n      results_unsorted.tsv \\\n      --threads \"${task.cpus}\" \\\n      --format-mode 0 \\\n      --format-output \"query,target,qstart,qend,qlen,tstart,tend,tlen,alnlen,pident,mismatch,gapopen,evalue,bits\"\n\n    sort \\\n      -k1,1 \\\n      -k3,3n \\\n      -k4,4n \\\n      -k2,2 \\\n      --parallel=\"${task.cpus}\" \\\n      --temporary-directory=tmp \\\n      results_unsorted.tsv \\\n    > \"${genome_name}_${protein_name}_genome_v_protein_mmseqs_matches.tsv\"\n\n    sed -i '1i query\\ttarget\\tqstart\\tqend\\tqlen\\ttstart\\ttend\\ttlen\\talnlen\\tpident\\tmismatch\\tgapopen\\tevalue\\tbitscore' \"${genome_name}_${protein_name}_genome_v_protein_mmseqs_matches.tsv\"\n\n    rm -rf -- tmp genome result results_unsorted.tsv proteins_tmp\n    \"\"\"\n}",
        "nb_lignes_process": 66,
        "string_script": "    \"\"\"\n    mkdir result tmp\n    cp -rL proteins proteins_tmp\n\n    # Searching with genome as query is ~3X faster\n    mmseqs search \\\n      genome/db \\\n      proteins_tmp/db \\\n      result/db \\\n      tmp \\\n      --threads \"${task.cpus}\" \\\n      -e 0.00001 \\\n      --min-length 10 \\\n      --comp-bias-corr 1 \\\n      --split-mode 1 \\\n      --max-seqs 50 \\\n      --mask 0 \\\n      --orf-start-mode 1 \\\n      --translation-table \"${trans_table}\" \\\n      --use-all-table-starts\n\n    # Extract match results.\n    mmseqs convertalis \\\n      genome/db \\\n      proteins_tmp/db \\\n      result/db \\\n      results_unsorted.tsv \\\n      --threads \"${task.cpus}\" \\\n      --format-mode 0 \\\n      --format-output \"query,target,qstart,qend,qlen,tstart,tend,tlen,alnlen,pident,mismatch,gapopen,evalue,bits\"\n\n    sort \\\n      -k1,1 \\\n      -k3,3n \\\n      -k4,4n \\\n      -k2,2 \\\n      --parallel=\"${task.cpus}\" \\\n      --temporary-directory=tmp \\\n      results_unsorted.tsv \\\n    > \"${genome_name}_${protein_name}_genome_v_protein_mmseqs_matches.tsv\"\n\n    sed -i '1i query\\ttarget\\tqstart\\tqend\\tqlen\\ttstart\\ttend\\ttlen\\talnlen\\tpident\\tmismatch\\tgapopen\\tevalue\\tbitscore' \"${genome_name}_${protein_name}_genome_v_protein_mmseqs_matches.tsv\"\n\n    rm -rf -- tmp genome result results_unsorted.tsv proteins_tmp\n    \"\"\"",
        "nb_lignes_script": 44,
        "language_script": "bash",
        "tools": [
            "MMseqs",
            "ODB",
            "TMPD"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs",
            "https://bio.tools/odb",
            "https://bio.tools/tmpd"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            },
            {
                "name": "ODB",
                "uri": "https://bio.tools/odb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0435",
                                    "term": "Operon prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3432",
                                    "term": "Clustering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0579",
                                    "term": "Operon drawing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer design"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0579",
                                    "term": "Operon rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "Primer design"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Contains all known and conserved operons in completely sequenced genomes.",
                "homepage": "http://operondb.jp/"
            },
            {
                "name": "TMPD",
                "uri": "https://bio.tools/tmpd",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Tobacco Markers & Primers Database.",
                "homepage": "http://biodb.sdau.edu.cn/tmpd/index.html"
            }
        ],
        "inputs": [
            "trans_table",
            "genome_name",
            "protein_name"
        ],
        "nb_inputs": 3,
        "outputs": [
            "protein_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"mmseqs\"",
            "label \"big_task\"",
            "time '6h'",
            "tag \"${genome_name} - ${protein_name}\""
        ],
        "when": "",
        "stub": ""
    },
    "cluster_genome_vs_protein_matches": {
        "name_process": "cluster_genome_vs_protein_matches",
        "string_process": "\nprocess cluster_genome_vs_protein_matches {\n\n    label \"bedtools\"\n    label \"small_task\"\n    time \"2h\"\n\n    tag \"${name}\"\n\n    input:\n    val pad_size                                                                                        \n    val merge_distance                \n    tuple val(genome_name),\n        path(faidx),\n        path(protein_name),\n        path(\"matches.tsv\")\n\n    output:\n    tuple val(genome_name),\n        val(protein_name),\n        path(\"${genome_name}_${protein_name}_genome_v_proteins_clustered_matches.bed\")\n\n    script:\n    \"\"\"\n    mkdir -p tmp\n\n      tail -n+2 matches.tsv \\\n    | awk '\n        BEGIN { OFS=\"\\t\" }\n        \\$3 > \\$4 { print \\$1, \\$4, \\$3, \\$2 }\n        \\$3 < \\$4 { print \\$1, \\$3, \\$4, \\$2 }\n      ' \\\n    | sort \\\n        -k1,1 -k2,2n -k3,3n \\\n        --temporary-directory=tmp \\\n    | sed 's/,/%2C/g' \\\n    | bedtools merge -d \"${merge_distance}\" -c 4 -o distinct -i - \\\n    | bedtools slop -g \"${faidx}\" -b \"${pad_size}\" -i - \\\n    > \"${genome_name}_${protein_name}_genome_v_proteins_clustered_matches.bed\"\n\n    rm -rf -- tmp\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    \"\"\"\n    mkdir -p tmp\n\n      tail -n+2 matches.tsv \\\n    | awk '\n        BEGIN { OFS=\"\\t\" }\n        \\$3 > \\$4 { print \\$1, \\$4, \\$3, \\$2 }\n        \\$3 < \\$4 { print \\$1, \\$3, \\$4, \\$2 }\n      ' \\\n    | sort \\\n        -k1,1 -k2,2n -k3,3n \\\n        --temporary-directory=tmp \\\n    | sed 's/,/%2C/g' \\\n    | bedtools merge -d \"${merge_distance}\" -c 4 -o distinct -i - \\\n    | bedtools slop -g \"${faidx}\" -b \"${pad_size}\" -i - \\\n    > \"${genome_name}_${protein_name}_genome_v_proteins_clustered_matches.bed\"\n\n    rm -rf -- tmp\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "pad_size",
            "merge_distance",
            "genome_name",
            "faidx",
            "protein_name"
        ],
        "nb_inputs": 5,
        "outputs": [
            "protein_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"bedtools\"",
            "label \"small_task\"",
            "time \"2h\"",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "exonerate_regions": {
        "name_process": "exonerate_regions",
        "string_process": "\nprocess exonerate_regions {\n\n    label \"exonerate\"\n    label \"big_task\"\n    time '6h'\n\n    tag \"${name}\"\n\n    input:\n    val trans_table\n    val min_intron_hard\n    val max_intron_hard\n    tuple val(genome_name),\n        fasta(fasta),\n        val(protein_name),\n        fasta(\"clustered.bed\"),\n        fasta(\"proteins.tsv\")\n\n    output:\n    set val(genome_name),\n        val(protein_name),\n        file(\"${genome_name}_${protein_name}_genome_v_proteins_exonerate.gff\")\n\n    script:\n    \"\"\"\n    mkdir -p tmp\n    # Sometimes this gets touched, so the checkpointing goes a bit skiwiff.\n    cp -L proteins.tsv proteins_tmp.tsv\n\n    exonerate_parallel.sh \\\n      -g \"${fasta}\" \\\n      -q \"proteins_tmp.tsv\" \\\n      -b \"clustered.bed\" \\\n      -n \"${task.cpus}\" \\\n      -t \"tmp\" \\\n      -m \"${min_intron_hard}\" \\\n      -x \"${max_intron_hard}\" \\\n      -r \"${trans_table}\" \\\n      -o \"${genome_name}_${protein_name}_genome_v_proteins_exonerate.gff\"\n\n    rm -rf -- tmp proteins_tmp.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    \"\"\"\n    mkdir -p tmp\n    # Sometimes this gets touched, so the checkpointing goes a bit skiwiff.\n    cp -L proteins.tsv proteins_tmp.tsv\n\n    exonerate_parallel.sh \\\n      -g \"${fasta}\" \\\n      -q \"proteins_tmp.tsv\" \\\n      -b \"clustered.bed\" \\\n      -n \"${task.cpus}\" \\\n      -t \"tmp\" \\\n      -m \"${min_intron_hard}\" \\\n      -x \"${max_intron_hard}\" \\\n      -r \"${trans_table}\" \\\n      -o \"${genome_name}_${protein_name}_genome_v_proteins_exonerate.gff\"\n\n    rm -rf -- tmp proteins_tmp.tsv\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trans_table",
            "min_intron_hard",
            "max_intron_hard",
            "genome_name",
            "protein_name"
        ],
        "nb_inputs": 5,
        "outputs": [
            "protein_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"exonerate\"",
            "label \"big_task\"",
            "time '6h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_star_index": {
        "name_process": "get_star_index",
        "string_process": "\nprocess get_star_index {\n\n    label \"star\"\n    label \"medium_task\"\n    time '4h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n        path(fasta),\n        path(gff)\n\n    output:\n    tuple val(name), file(\"${name}_star_index\")\n\n    script:\n                                                           \n    def sjdb = gff.name != 'WAS_NULL' ? \"--sjdbGTFfile ${gff} --sjdbOverhang 149 \" : ''\n                                                                                     \n    def exon_feature = \"exon\"\n\n    \"\"\"\n    mkdir -p \"${name}_star_index\"\n    STAR \\\n      --runThreadN ${task.cpus} \\\n      --runMode genomeGenerate \\\n      --genomeDir \"${name}_star_index\" \\\n      --genomeFastaFiles \"${fasta}\" \\\n      --genomeSAindexNbases 11 \\\n      --sjdbGTFtagExonParentTranscript Parent \\\n      --sjdbGTFfeatureExon \"${exon_feature}\" \\\n      ${sjdb}\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def sjdb = gff.name != 'WAS_NULL' ? \"--sjdbGTFfile ${gff} --sjdbOverhang 149 \" : ''\n                                                                                     \n    def exon_feature = \"exon\"\n\n    \"\"\"\n    mkdir -p \"${name}_star_index\"\n    STAR \\\n      --runThreadN ${task.cpus} \\\n      --runMode genomeGenerate \\\n      --genomeDir \"${name}_star_index\" \\\n      --genomeFastaFiles \"${fasta}\" \\\n      --genomeSAindexNbases 11 \\\n      --sjdbGTFtagExonParentTranscript Parent \\\n      --sjdbGTFfeatureExon \"${exon_feature}\" \\\n      ${sjdb}\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "name",
            "fasta",
            "gff"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"star\"",
            "label \"medium_task\"",
            "time '4h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "star_find_splicesites": {
        "name_process": "star_find_splicesites",
        "string_process": "\nprocess star_find_splicesites {\n\n    label \"star\"\n    label \"medium_task\"\n    time '1d'\n\n    tag \"${name} - ${read_group}\"\n\n    input:\n    val min_intron_len\n    val max_intron_len\n    val extra_params\n    tuple val(name),\n        path(\"index\"),\n        val(read_group),\n        path(r1s),\n        path(r2s)\n\n    output:\n    tuple val(name),\n        val(read_group),\n        path(\"${name}_${read_group}.SJ.out.tab\")\n\n    script:\n    def r1_joined = r1s.join(',')\n    def r2_joined = r2s.join(',')\n\n    \"\"\"\n    STAR \\\n      --runThreadN \"${task.cpus}\" \\\n      --readFilesCommand zcat \\\n      --genomeDir \"index\" \\\n      --outSAMtype None \\\n      --outSAMmode None \\\n      ${extra_params} \\\n      --alignIntronMin ${min_intron_len} \\\n      --alignIntronMax ${max_intron_len} \\\n      --alignSJoverhangMin 10 \\\n      --alignSJDBoverhangMin 3 \\\n      --alignSoftClipAtReferenceEnds No \\\n      --outFileNamePrefix \"${name}_${read_group}.\" \\\n      --readFilesIn \"${r1_joined}\" \"${r2_joined}\"\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    def r1_joined = r1s.join(',')\n    def r2_joined = r2s.join(',')\n\n    \"\"\"\n    STAR \\\n      --runThreadN \"${task.cpus}\" \\\n      --readFilesCommand zcat \\\n      --genomeDir \"index\" \\\n      --outSAMtype None \\\n      --outSAMmode None \\\n      ${extra_params} \\\n      --alignIntronMin ${min_intron_len} \\\n      --alignIntronMax ${max_intron_len} \\\n      --alignSJoverhangMin 10 \\\n      --alignSJDBoverhangMin 3 \\\n      --alignSoftClipAtReferenceEnds No \\\n      --outFileNamePrefix \"${name}_${read_group}.\" \\\n      --readFilesIn \"${r1_joined}\" \"${r2_joined}\"\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "STAR"
        ],
        "tools_url": [
            "https://bio.tools/star"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            }
        ],
        "inputs": [
            "min_intron_len",
            "max_intron_len",
            "extra_params",
            "name",
            "read_group",
            "r1s",
            "r2s"
        ],
        "nb_inputs": 7,
        "outputs": [
            "read_group"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"star\"",
            "label \"medium_task\"",
            "time '1d'",
            "tag \"${name} - ${read_group}\""
        ],
        "when": "",
        "stub": ""
    },
    "star_align_reads": {
        "name_process": "star_align_reads",
        "string_process": "\nprocess star_align_reads {\n\n    label \"star\"\n    label \"medium_task\"\n    time '1d'\n\n    tag \"${name} - ${read_group}\"\n\n    input:\n    val min_intron_len\n    val max_intron_len\n    val extra_params\n    tuple val(name),\n        val(read_group),\n        path(\"genome.fasta\"),\n        path(\"index\"),\n        path(r1s),\n        path(r2s),\n        path(\"*SJ.out.tab\")\n\n    output:\n    tuple val(name),\n        val(read_group),\n        path(\"${name}_${read_group}.cram\")\n\n    script:\n    def r1_joined = r1s.join(',')\n    def r2_joined = r2s.join(',')\n\n    \"\"\"\n    STAR \\\n      --runThreadN ${task.cpus} \\\n      --readFilesCommand zcat \\\n      --genomeDir \"index\" \\\n      --sjdbFileChrStartEnd *SJ.out.tab \\\n      --outSAMtype BAM Unsorted \\\n      --outBAMcompression 1 \\\n      ${extra_params} \\\n      --alignIntronMin ${min_intron_len} \\\n      --alignIntronMax ${max_intron_len} \\\n      --alignSJoverhangMin 10 \\\n      --alignSJDBoverhangMin 3 \\\n      --alignSoftClipAtReferenceEnds No \\\n      --outFilterType BySJout \\\n      --outFilterMultimapNmax 1 \\\n      --outFilterMismatchNmax 10 \\\n      --outFilterMismatchNoverLmax 0.2 \\\n      --outFilterIntronMotifs RemoveNoncanonicalUnannotated \\\n      --outFilterIntronStrands RemoveInconsistentStrands \\\n      --outMultimapperOrder Random \\\n      --outSAMattributes All \\\n      --outSAMstrandField intronMotif \\\n      --outSAMattrIHstart 0 \\\n      --outFileNamePrefix \"${name}_${read_group}.\" \\\n      --readFilesIn \"${r1_joined}\" \"${r2_joined}\"\n\n    mkdir tmp\n    samtools view \\\n        -u \\\n        -C \\\n        -T \"genome.fasta\" \\\n        \"${name}_${read_group}.Aligned.out.bam\" \\\n    | samtools sort \\\n        -O cram \\\n        -@ \"${task.cpus}\" \\\n        -T tmp \\\n        -l 9 \\\n        -o \"${name}_${read_group}.cram\"\n\n    rm -rf -- tmp\n    rm -f *.bam\n    \"\"\"\n}",
        "nb_lignes_process": 72,
        "string_script": "    def r1_joined = r1s.join(',')\n    def r2_joined = r2s.join(',')\n\n    \"\"\"\n    STAR \\\n      --runThreadN ${task.cpus} \\\n      --readFilesCommand zcat \\\n      --genomeDir \"index\" \\\n      --sjdbFileChrStartEnd *SJ.out.tab \\\n      --outSAMtype BAM Unsorted \\\n      --outBAMcompression 1 \\\n      ${extra_params} \\\n      --alignIntronMin ${min_intron_len} \\\n      --alignIntronMax ${max_intron_len} \\\n      --alignSJoverhangMin 10 \\\n      --alignSJDBoverhangMin 3 \\\n      --alignSoftClipAtReferenceEnds No \\\n      --outFilterType BySJout \\\n      --outFilterMultimapNmax 1 \\\n      --outFilterMismatchNmax 10 \\\n      --outFilterMismatchNoverLmax 0.2 \\\n      --outFilterIntronMotifs RemoveNoncanonicalUnannotated \\\n      --outFilterIntronStrands RemoveInconsistentStrands \\\n      --outMultimapperOrder Random \\\n      --outSAMattributes All \\\n      --outSAMstrandField intronMotif \\\n      --outSAMattrIHstart 0 \\\n      --outFileNamePrefix \"${name}_${read_group}.\" \\\n      --readFilesIn \"${r1_joined}\" \"${r2_joined}\"\n\n    mkdir tmp\n    samtools view \\\n        -u \\\n        -C \\\n        -T \"genome.fasta\" \\\n        \"${name}_${read_group}.Aligned.out.bam\" \\\n    | samtools sort \\\n        -O cram \\\n        -@ \"${task.cpus}\" \\\n        -T tmp \\\n        -l 9 \\\n        -o \"${name}_${read_group}.cram\"\n\n    rm -rf -- tmp\n    rm -f *.bam\n    \"\"\"",
        "nb_lignes_script": 45,
        "language_script": "bash",
        "tools": [
            "STAR",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/star",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "STAR",
                "uri": "https://bio.tools/star",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Ultrafast universal RNA-seq aligner",
                "homepage": "http://code.google.com/p/rna-star/"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "min_intron_len",
            "max_intron_len",
            "extra_params",
            "name",
            "read_group",
            "r1s",
            "r2s"
        ],
        "nb_inputs": 7,
        "outputs": [
            "read_group"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"star\"",
            "label \"medium_task\"",
            "time '1d'",
            "tag \"${name} - ${read_group}\""
        ],
        "when": "",
        "stub": ""
    },
    "press_antifam_hmms": {
        "name_process": "press_antifam_hmms",
        "string_process": "\nprocess press_antifam_hmms {\n\n    label \"hmmer\"\n    label \"medium_task\"\n\n    input:\n    path \"in.tar.gz\"\n\n    output:\n    tuple path(\"AntiFam.hmm\"),\n          path(\"AntiFam.hmm.h3f\"),\n          path(\"AntiFam.hmm.h3i\"),\n          path(\"AntiFam.hmm.h3m\"),\n          path(\"AntiFam.hmm.h3p\")\n\n    script:\n    \"\"\"\n    tar -zxf in.tar.gz\n    hmmpress AntiFam.hmm\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    tar -zxf in.tar.gz\n    hmmpress AntiFam.hmm\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"hmmer\"",
            "label \"medium_task\""
        ],
        "when": "",
        "stub": ""
    },
    "search_hmm_vs_proteins": {
        "name_process": "search_hmm_vs_proteins",
        "string_process": "\nprocess search_hmm_vs_proteins {\n\n    label \"hmmer\"\n    label \"medium_task\"\n\n    tag \"${name}\"\n\n    input:\n    tuple path(\"db.hmm\"),\n          path(\"db.hmm.h3f\"),\n          path(\"db.hmm.h3i\"),\n          path(\"db.hmm.h3m\"),\n          path(\"db.hmm.h3p\")\n    tuple val(name),\n          path(\"proteins.fasta\")\n\n    output:\n    tuple val(name),\n          path(\"hmm_matches.domtbl\")\n\n    script:\n    \"\"\"\n    hmmsearch --domtblout hmm_matches.domtbl --cut_ga db.hmm proteins.fasta > /dev/null\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    hmmsearch --domtblout hmm_matches.domtbl --cut_ga db.hmm proteins.fasta > /dev/null\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"hmmer\"",
            "label \"medium_task\"",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "stringtie_assemble": {
        "name_process": "stringtie_assemble",
        "string_process": "\nprocess stringtie_assemble {\n\n    label \"stringtie\"\n    label \"medium_task\"\n    time '6h'\n\n    tag \"${name} - ${read_group}\"\n\n    input:\n    tuple val(name),\n        val(read_group),\n        path(fasta),\n        path(cram),\n        val(strand),\n        path(gff)\n\n    output:\n    tuple val(name),\n        val(read_group),\n        path(\"${name}_${read_group}_stringtie.gtf\")\n\n    script:\n    def strand_flag = strand == \"fr\" ? \"--fr\" : \"--rf\"\n    def known = gff.name != 'WAS_NULL' ? \"-G ${gff}\" : ''\n\n    \"\"\"\n    # Convert cram to bam.\n    samtools view \\\n        -b \\\n        -T \"${fasta}\" \\\n        -@ \"${task.cpus}\" \\\n        -o \"tmp.bam\" \\\n        \"${cram}\"\n\n    stringtie \\\n      -p \"${task.cpus}\" \\\n      ${strand_flag} \\\n      ${known} \\\n      -o \"${name}_${read_group}_stringtie.gtf\" \\\n      -m 150 \\\n      \"tmp.bam\"\n\n    rm -f tmp.bam\n    \"\"\"\n}",
        "nb_lignes_process": 44,
        "string_script": "    def strand_flag = strand == \"fr\" ? \"--fr\" : \"--rf\"\n    def known = gff.name != 'WAS_NULL' ? \"-G ${gff}\" : ''\n\n    \"\"\"\n    # Convert cram to bam.\n    samtools view \\\n        -b \\\n        -T \"${fasta}\" \\\n        -@ \"${task.cpus}\" \\\n        -o \"tmp.bam\" \\\n        \"${cram}\"\n\n    stringtie \\\n      -p \"${task.cpus}\" \\\n      ${strand_flag} \\\n      ${known} \\\n      -o \"${name}_${read_group}_stringtie.gtf\" \\\n      -m 150 \\\n      \"tmp.bam\"\n\n    rm -f tmp.bam\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "SAMtools",
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/samtools",
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            },
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "name",
            "read_group",
            "strand",
            "fasta",
            "cram",
            "gff"
        ],
        "nb_inputs": 6,
        "outputs": [
            "read_group"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"stringtie\"",
            "label \"medium_task\"",
            "time '6h'",
            "tag \"${name} - ${read_group}\""
        ],
        "when": "",
        "stub": ""
    },
    "stringtie_merge": {
        "name_process": "stringtie_merge",
        "string_process": "\nprocess stringtie_merge {\n\n    label \"stringtie\"\n    label \"medium_task\"\n    time '6h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name), path(\"*gtf\"), path(gff)\n\n    output:\n    tuple val(name), path(\"${name}_stringtie.gtf\")\n\n    script:\n    def known = gff.name != 'WAS_NULL' ? \"-G ${gff}\" : ''\n\n    \"\"\"\n    stringtie \\\n      -p \"${task.cpus}\" \\\n      ${known} \\\n      --merge \\\n      -o \"${name}_stringtie.gtf\" \\\n      *gtf\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    def known = gff.name != 'WAS_NULL' ? \"-G ${gff}\" : ''\n\n    \"\"\"\n    stringtie \\\n      -p \"${task.cpus}\" \\\n      ${known} \\\n      --merge \\\n      -o \"${name}_stringtie.gtf\" \\\n      *gtf\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [
            "StringTie"
        ],
        "tools_url": [
            "https://bio.tools/stringtie"
        ],
        "tools_dico": [
            {
                "name": "StringTie",
                "uri": "https://bio.tools/stringtie",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast and highly efficient assembler of RNA-Seq alignments into potential transcripts. It uses a novel network flow algorithm as well as an optional de novo assembly step to assemble and quantitate full-length transcripts representing multiple splice variants for each gene locus.",
                "homepage": "https://ccb.jhu.edu/software/stringtie/"
            }
        ],
        "inputs": [
            "name",
            "gff"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"stringtie\"",
            "label \"medium_task\"",
            "time '6h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "trinity_assemble_denovo": {
        "name_process": "trinity_assemble_denovo",
        "string_process": "\nprocess trinity_assemble_denovo {\n\n    label \"trinity\"\n    label \"big_task\"\n    time '1d'\n\n    tag \"${read_group}\"\n\n    input:\n    val not_fungus\n    tuple val(read_group),\n        path(r1s),\n        path(r2s),\n        val(strand)\n\n    output:\n    tuple val(read_group), path(\"${read_group}_trinity_denovo.fasta\")\n\n    script:\n    def r1_joined = r1s.join(',')\n    def r2_joined = r2s.join(',')\n    def use_jaccard = not_fungus ? '' : \"--jaccard_clip \"\n    def strand_flag = strand == \"fr\" ? \"--SS_lib_type FR \" : \"--SS_lib_type RF \"\n\n    \"\"\"\n    Trinity \\\n      --seqType fq \\\n      --max_memory \"${task.memory.toGiga()}G\" \\\n      --CPU \"${task.cpus}\" \\\n      ${use_jaccard} \\\n      ${strand_flag} \\\n      --output trinity_assembly \\\n      --left \"${r1_joined}\" \\\n      --right \"${r2_joined}\"\n\n    mv trinity_assembly/Trinity.fasta \"${read_group}_trinity_denovo.fasta\"\n    rm -rf -- trinity_assembly\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def r1_joined = r1s.join(',')\n    def r2_joined = r2s.join(',')\n    def use_jaccard = not_fungus ? '' : \"--jaccard_clip \"\n    def strand_flag = strand == \"fr\" ? \"--SS_lib_type FR \" : \"--SS_lib_type RF \"\n\n    \"\"\"\n    Trinity \\\n      --seqType fq \\\n      --max_memory \"${task.memory.toGiga()}G\" \\\n      --CPU \"${task.cpus}\" \\\n      ${use_jaccard} \\\n      ${strand_flag} \\\n      --output trinity_assembly \\\n      --left \"${r1_joined}\" \\\n      --right \"${r2_joined}\"\n\n    mv trinity_assembly/Trinity.fasta \"${read_group}_trinity_denovo.fasta\"\n    rm -rf -- trinity_assembly\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "Trinity"
        ],
        "tools_url": [
            "https://bio.tools/trinity"
        ],
        "tools_dico": [
            {
                "name": "Trinity",
                "uri": "https://bio.tools/trinity",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3258",
                                    "term": "Transcriptome assembly"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Trinity is a transcriptome assembler which relies on three different tools, inchworm an assembler, chrysalis which pools contigs and butterfly which amongst others compacts a graph resulting from butterfly with reads.",
                "homepage": "https://github.com/trinityrnaseq/trinityrnaseq/wiki"
            }
        ],
        "inputs": [
            "not_fungus",
            "read_group",
            "strand",
            "r1s",
            "r2s"
        ],
        "nb_inputs": 5,
        "outputs": [
            "read_group"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"trinity\"",
            "label \"big_task\"",
            "time '1d'",
            "tag \"${read_group}\""
        ],
        "when": "",
        "stub": ""
    },
    "genemark": {
        "name_process": "genemark",
        "string_process": "\nprocess genemark {\n\n    label \"genemarkes\"\n    label \"medium_task\"\n    time '12h'\n\n    tag \"${name}\"\n\n    input:\n    val not_fungus\n    val training\n    tuple val(name),\n        path(genome),\n        path(faidx),\n        path(\"*introns.gff3\")\n\n    output:\n    tuple val(name), path(\"${name}_genemark.gtf\")\n\n    script:\n    def use_fungus = not_fungus ? '' : '--fungus '\n    def is_training = training ? '--min_contig 300 ': ''\n\n    \"\"\"\n    sort -k1,1V -k4,4n -k5,5rn -k3,3r *introns.gff3 > hints.gff3\n\n    gmes_petap.pl \\\n      --cores \"${task.cpus}\" \\\n      --soft_mask 100 \\\n      --ET \"hints.gff3\" \\\n      ${use_fungus} \\\n      ${is_training} \\\n      --sequence \"${genome}\"\n\n    mv genemark.gtf \"${name}_genemark.gtf\"\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    def use_fungus = not_fungus ? '' : '--fungus '\n    def is_training = training ? '--min_contig 300 ': ''\n\n    \"\"\"\n    sort -k1,1V -k4,4n -k5,5rn -k3,3r *introns.gff3 > hints.gff3\n\n    gmes_petap.pl \\\n      --cores \"${task.cpus}\" \\\n      --soft_mask 100 \\\n      --ET \"hints.gff3\" \\\n      ${use_fungus} \\\n      ${is_training} \\\n      --sequence \"${genome}\"\n\n    mv genemark.gtf \"${name}_genemark.gtf\"\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "not_fungus",
            "training",
            "name",
            "genome",
            "faidx"
        ],
        "nb_inputs": 5,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"genemarkes\"",
            "label \"medium_task\"",
            "time '12h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "pasa": {
        "name_process": "pasa",
        "string_process": "\nprocess pasa {\n\n    label \"pasa\"\n    label \"small_task\"\n    time '1d'\n\n    tag \"${name}\"\n\n    input:\n    val not_fungus\n    val max_intron_hard\n    tuple val(name),\n        path(genome_fasta),\n        path(known_sites),\n        path(stringtie_gtf),\n        path(gmap_aligned),\n        path(transcripts_fasta),\n        path(transcripts_fasta_cln),\n        path(transcripts_fasta_clean)\n\n    output:\n    tuple val(name), path(\"${name}_pasa.gff3\")\n\n    script:\n    def use_stringent = not_fungus ? '' : \"--stringent_alignment_overlap 30.0 \"\n\n                                          \n                                                                  \n                                                                    \n    def use_stringtie = (stringtie_gtf.name == \"STRINTIE_WAS_NULL\" || !not_fungus) ? '' : \"--trans_gtf ${stringtie_gtf} \"\n    def use_known = known_sites.name == \"KNOWN_WAS_NULL\" ? '' : \"-L --annots ${known_sites} \"\n\n                                                                        \n    def gen_code = \"Universal\"\n\n    \"\"\"\n    echo \"DATABASE=\\${PWD}/pasa.sqlite\" > align_assembly.config\n    echo \"validate_alignments_in_db.dbi:--MIN_PERCENT_ALIGNED=80\" >> align_assembly.config\n    echo \"validate_alignments_in_db.dbi:--MIN_AVG_PER_ID=90\" >> align_assembly.config\n    echo \"subcluster_builder.dbi:-m=50\" >> align_assembly.config\n\n    Launch_PASA_pipeline.pl \\\n      --config align_assembly.config \\\n      --create \\\n      --run \\\n      --genome \"${genome_fasta}\" \\\n      --transcripts \"${transcripts_fasta_clean}\" \\\n      --IMPORT_CUSTOM_ALIGNMENTS_GFF3 \"${gmap_aligned}\" \\\n      -T -u \"${transcripts_fasta}\" \\\n      --MAX_INTRON_LENGTH \"${max_intron_hard}\" \\\n      --ALIGNERS blat \\\n      --CPU \"${task.cpus}\" \\\n      --transcribed_is_aligned_orient \\\n      --TRANSDECODER \\\n      ${use_stringent} \\\n      ${use_stringtie} \\\n      ${use_known}\n\n    pasa_asmbls_to_training_set.dbi \\\n      -G \"${gen_code}\" \\\n      --pasa_transcripts_fasta pasa.sqlite.assemblies.fasta \\\n      --pasa_transcripts_gff3 pasa.sqlite.pasa_assemblies.gff3\n\n    mv \\${PWD}/pasa.sqlite.assemblies.fasta.transdecoder.genome.gff3 \\${PWD}/${name}_pasa.gff3\n    \"\"\"\n}",
        "nb_lignes_process": 65,
        "string_script": "    def use_stringent = not_fungus ? '' : \"--stringent_alignment_overlap 30.0 \"\n\n                                          \n                                                                  \n                                                                    \n    def use_stringtie = (stringtie_gtf.name == \"STRINTIE_WAS_NULL\" || !not_fungus) ? '' : \"--trans_gtf ${stringtie_gtf} \"\n    def use_known = known_sites.name == \"KNOWN_WAS_NULL\" ? '' : \"-L --annots ${known_sites} \"\n\n                                                                        \n    def gen_code = \"Universal\"\n\n    \"\"\"\n    echo \"DATABASE=\\${PWD}/pasa.sqlite\" > align_assembly.config\n    echo \"validate_alignments_in_db.dbi:--MIN_PERCENT_ALIGNED=80\" >> align_assembly.config\n    echo \"validate_alignments_in_db.dbi:--MIN_AVG_PER_ID=90\" >> align_assembly.config\n    echo \"subcluster_builder.dbi:-m=50\" >> align_assembly.config\n\n    Launch_PASA_pipeline.pl \\\n      --config align_assembly.config \\\n      --create \\\n      --run \\\n      --genome \"${genome_fasta}\" \\\n      --transcripts \"${transcripts_fasta_clean}\" \\\n      --IMPORT_CUSTOM_ALIGNMENTS_GFF3 \"${gmap_aligned}\" \\\n      -T -u \"${transcripts_fasta}\" \\\n      --MAX_INTRON_LENGTH \"${max_intron_hard}\" \\\n      --ALIGNERS blat \\\n      --CPU \"${task.cpus}\" \\\n      --transcribed_is_aligned_orient \\\n      --TRANSDECODER \\\n      ${use_stringent} \\\n      ${use_stringtie} \\\n      ${use_known}\n\n    pasa_asmbls_to_training_set.dbi \\\n      -G \"${gen_code}\" \\\n      --pasa_transcripts_fasta pasa.sqlite.assemblies.fasta \\\n      --pasa_transcripts_gff3 pasa.sqlite.pasa_assemblies.gff3\n\n    mv \\${PWD}/pasa.sqlite.assemblies.fasta.transdecoder.genome.gff3 \\${PWD}/${name}_pasa.gff3\n    \"\"\"",
        "nb_lignes_script": 40,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "not_fungus",
            "max_intron_hard",
            "name",
            "genome_fasta",
            "known_sites",
            "stringtie_gtf",
            "gmap_aligned",
            "transcripts_fasta",
            "transcripts_fasta_cln",
            "transcripts_fasta_clean"
        ],
        "nb_inputs": 10,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"pasa\"",
            "label \"small_task\"",
            "time '1d'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "codingquarry": {
        "name_process": "codingquarry",
        "string_process": "\nprocess codingquarry {\n\n    label \"codingquarry\"\n    label \"big_task\"\n    time '1d'\n\n    errorStrategy \"retry\"\n    maxRetries 10\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n        path(\"transcripts.gtf\"),\n        path(\"genome.fasta\")\n\n    output:\n    tuple val(name), path(\"${name}_codingquarry_fixed.gff3\")\n    tuple val(name), path(\"${name}_codingquarry.gff3\")                                                                           \n    tuple val(name), path(\"${name}_codingquarry.faa\")\n    path \"${name}_codingquarry.fna\"\n    path \"${name}_codingquarry_dubiousset.gff3\"\n    path \"${name}_codingquarry_fusions.txt\"\n    path \"${name}_codingquarry_overlapreport.txt\"\n\n    script:\n    \"\"\"\n    grep -v \"^#\" transcripts.gtf > transcripts.tmp.gtf\n    CufflinksGTF_to_CodingQuarryGFF3.py transcripts.tmp.gtf > transcripts.gff3\n\n    CodingQuarry -f genome.fasta -t transcripts.gff3 -p \"${task.cpus}\"\n\n    \\${QUARRY_PATH}/scripts/fastaTranslate.py out/Predicted_CDS.fa \\\n    | sed 's/*\\$//g' \\\n    > Predicted_Proteins.faa\n\n    \\${QUARRY_PATH}/scripts/gene_errors_Xs.py Predicted_Proteins.faa out/Predicted_Proteins.faa\n    rm Predicted_Proteins.faa\n\n    # Tidy some of the CQ weirdness.\n    # Sometimes you can get a -ve cds phase for unknown reasons.\n    # CQ puts the CDS directly on the gene, which breaks some tools.\n    awk -F '\\t' 'BEGIN {OFS=\"\\\\t\"} \\$8 = \"-1\" {\\$8=\"0\"} {print}' out/PredictedPass.gff3 \\\n    | awk -F '\\t' \\\n      '\n        BEGIN {OFS=\"\\\\t\"}\n        \\$3 == \"gene\" {\n            print;\n            \\$9=gensub(/.*ID=([^;]+).*/, \"ID=mRNA:\\\\\\\\1;Parent=\\\\\\\\1;\", \"1\", \\$9);\n            \\$3=\"mRNA\";\n            print\n        }\n        \\$3 == \"CDS\" {\n            \\$9=gensub(/Parent=/, \"Parent=mRNA:\", \"1\", \\$9);\n            print\n        }\n      ' \\\n    > \"${name}_codingquarry_fixed.gff3\"\n\n    mv out/PredictedPass.gff3 \"${name}_codingquarry.gff3\"\n\n    mv out/DubiousSet.gff3 \"${name}_codingquarry_dubiousset.gff3\"\n    mv out/Predicted_CDS.fa \"${name}_codingquarry.fna\"\n    mv out/Predicted_Proteins.faa \"${name}_codingquarry.faa\"\n    mv out/fusions.txt \"${name}_codingquarry_fusions.txt\"\n    mv out/overlapReport.txt \"${name}_codingquarry_overlapreport.txt\"\n\n    rm -rf -- out\n    \"\"\"\n}",
        "nb_lignes_process": 69,
        "string_script": "    \"\"\"\n    grep -v \"^#\" transcripts.gtf > transcripts.tmp.gtf\n    CufflinksGTF_to_CodingQuarryGFF3.py transcripts.tmp.gtf > transcripts.gff3\n\n    CodingQuarry -f genome.fasta -t transcripts.gff3 -p \"${task.cpus}\"\n\n    \\${QUARRY_PATH}/scripts/fastaTranslate.py out/Predicted_CDS.fa \\\n    | sed 's/*\\$//g' \\\n    > Predicted_Proteins.faa\n\n    \\${QUARRY_PATH}/scripts/gene_errors_Xs.py Predicted_Proteins.faa out/Predicted_Proteins.faa\n    rm Predicted_Proteins.faa\n\n    # Tidy some of the CQ weirdness.\n    # Sometimes you can get a -ve cds phase for unknown reasons.\n    # CQ puts the CDS directly on the gene, which breaks some tools.\n    awk -F '\\t' 'BEGIN {OFS=\"\\\\t\"} \\$8 = \"-1\" {\\$8=\"0\"} {print}' out/PredictedPass.gff3 \\\n    | awk -F '\\t' \\\n      '\n        BEGIN {OFS=\"\\\\t\"}\n        \\$3 == \"gene\" {\n            print;\n            \\$9=gensub(/.*ID=([^;]+).*/, \"ID=mRNA:\\\\\\\\1;Parent=\\\\\\\\1;\", \"1\", \\$9);\n            \\$3=\"mRNA\";\n            print\n        }\n        \\$3 == \"CDS\" {\n            \\$9=gensub(/Parent=/, \"Parent=mRNA:\", \"1\", \\$9);\n            print\n        }\n      ' \\\n    > \"${name}_codingquarry_fixed.gff3\"\n\n    mv out/PredictedPass.gff3 \"${name}_codingquarry.gff3\"\n\n    mv out/DubiousSet.gff3 \"${name}_codingquarry_dubiousset.gff3\"\n    mv out/Predicted_CDS.fa \"${name}_codingquarry.fna\"\n    mv out/Predicted_Proteins.faa \"${name}_codingquarry.faa\"\n    mv out/fusions.txt \"${name}_codingquarry_fusions.txt\"\n    mv out/overlapReport.txt \"${name}_codingquarry_overlapreport.txt\"\n\n    rm -rf -- out\n    \"\"\"",
        "nb_lignes_script": 42,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name",
            "name",
            "name"
        ],
        "nb_outputs": 3,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"codingquarry\"",
            "label \"big_task\"",
            "time '1d'",
            "errorStrategy \"retry\"",
            "maxRetries 10",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "signalp": {
        "name_process": "signalp",
        "string_process": "\nprocess signalp {\n\n    label \"signalp\"\n    label \"medium_task\"\n    time '12h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n        path(\"proteins.faa\")\n\n    output:\n    tuple val(name),\n        path(\"${name}_secreted.txt\")\n\n    script:\n    \"\"\"\n    mkdir tmp\n    signalp \\\n      -fasta \"proteins.faa\" \\\n      -prefix \"cq\" \\\n      -org euk \\\n      -tmp tmp\n\n    rm -rf -- tmp\n\n    gawk '\n      BEGIN {\n        OFS=\" \"\n      }\n      \\$2 ~ /^SP/ {\n        match(\\$0, /CS pos: ([0-9]*)-/, x)\n        print \\$1, x[1]\n      }\n    ' < \"cq_summary.signalp5\" \\\n    > \"${name}_secreted.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    \"\"\"\n    mkdir tmp\n    signalp \\\n      -fasta \"proteins.faa\" \\\n      -prefix \"cq\" \\\n      -org euk \\\n      -tmp tmp\n\n    rm -rf -- tmp\n\n    gawk '\n      BEGIN {\n        OFS=\" \"\n      }\n      \\$2 ~ /^SP/ {\n        match(\\$0, /CS pos: ([0-9]*)-/, x)\n        print \\$1, x[1]\n      }\n    ' < \"cq_summary.signalp5\" \\\n    > \"${name}_secreted.txt\"\n    \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [
            "SignalP"
        ],
        "tools_url": [
            "https://bio.tools/signalp"
        ],
        "tools_dico": [
            {
                "name": "SignalP",
                "uri": "https://bio.tools/signalp",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3510",
                            "term": "Protein sites, features and motifs"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0422",
                                    "term": "Protein cleavage site prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0418",
                                    "term": "Protein signal peptide detection"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2044",
                                "term": "Sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1277",
                                "term": "Protein features"
                            },
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Prediction of the presence and location of signal peptide cleavage sites in amino acid sequences from different organisms.",
                "homepage": "http://cbs.dtu.dk/services/SignalP/"
            }
        ],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"signalp\"",
            "label \"medium_task\"",
            "time '12h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "deepsig": {
        "name_process": "deepsig",
        "string_process": "\nprocess deepsig {\n\n    label \"deepsig\"\n    label \"medium_task\"\n    time '12h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n        path(\"proteins.faa\")\n\n    output:\n    tuple val(name),\n        path(\"${name}_secreted.txt\")\n\n    script:\n    \"\"\"\n    deepsig.py \\\n      -f \"proteins.faa\" \\\n      -o secreted.txt \\\n      -k euk\n\n    gawk '\n      BEGIN {\n        OFS=\" \"\n      }\n      \\$2 == \"SignalPeptide\" {\n        print \\$1, \\$4\n      }\n    ' < secreted.txt > \"${name}_secreted.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    \"\"\"\n    deepsig.py \\\n      -f \"proteins.faa\" \\\n      -o secreted.txt \\\n      -k euk\n\n    gawk '\n      BEGIN {\n        OFS=\" \"\n      }\n      \\$2 == \"SignalPeptide\" {\n        print \\$1, \\$4\n      }\n    ' < secreted.txt > \"${name}_secreted.txt\"\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"deepsig\"",
            "label \"medium_task\"",
            "time '12h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "codingquarrypm": {
        "name_process": "codingquarrypm",
        "string_process": "\nprocess codingquarrypm {\n\n    label \"codingquarry\"\n    label \"big_task\"\n    time '1d'\n\n    errorStrategy \"retry\"\n    maxRetries 10\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n        path(\"transcripts.gtf\"),\n        path(\"genome.fasta\"),\n        path(\"codingquarry.gff3\"),\n        path(\"secretome.txt\")\n\n    output:\n    tuple val(name),\n        path(\"${name}_codingquarrypm.gff3\") optional true\n    path \"${name}_codingquarrypm_fusions.txt\" optional true\n    path \"${name}_codingquarrypm_overlapreport.txt\" optional true\n\n    script:\n    \"\"\"\n    mkdir -p ParameterFiles/RNA_secreted\n\n    NSECRETED=\\$(wc -l < secretome.txt)\n    if [ \\${NSECRETED} -lt 501 ]\n    then\n        exit 0\n    fi\n\n    grep -v \"^#\" transcripts.gtf > transcripts.tmp.gtf\n    CufflinksGTF_to_CodingQuarryGFF3.py transcripts.tmp.gtf > transcripts.gff3\n\n    CodingQuarry \\\n      -f genome.fasta \\\n      -t transcripts.gff3 \\\n      -2 \"codingquarry.gff3\" \\\n      -p \"${task.cpus}\" \\\n      -g secretome.txt \\\n      -h\n\n    # Tidy some of the CQ weirdness.\n    # Sometimes you can get a -ve cds phase for unknown reasons.\n    # CQ puts the CDS directly on the gene, which breaks some tools.\n    awk -F '\\t' 'BEGIN {OFS=\"\\\\t\"} \\$8 = \"-1\" {\\$8=\"0\"} {print}' out/PGN_predictedPass.gff3 \\\n    | awk -F '\\t' \\\n      '\n        BEGIN {OFS=\"\\\\t\"}\n        \\$3 == \"gene\" {\n            print;\n            \\$9=gensub(/.*ID=([^;]+).*/, \"ID=mRNA:\\\\\\\\1;Parent=\\\\\\\\1;\", \"1\", \\$9);\n            \\$3=\"mRNA\";\n            print\n        }\n        \\$3 == \"CDS\" {\n            \\$9=gensub(/Parent=/, \"Parent=mRNA:\", \"1\", \\$9);\n            print\n        }\n      ' \\\n    > \"${name}_codingquarrypm.gff3\"\n\n    mv out/fusions.txt \"${name}_codingquarrypm_fusions.txt\"\n    mv out/overlapReport.txt \"${name}_codingquarrypm_overlapreport.txt\"\n    rm -rf -- out\n    \"\"\"\n}",
        "nb_lignes_process": 69,
        "string_script": "    \"\"\"\n    mkdir -p ParameterFiles/RNA_secreted\n\n    NSECRETED=\\$(wc -l < secretome.txt)\n    if [ \\${NSECRETED} -lt 501 ]\n    then\n        exit 0\n    fi\n\n    grep -v \"^#\" transcripts.gtf > transcripts.tmp.gtf\n    CufflinksGTF_to_CodingQuarryGFF3.py transcripts.tmp.gtf > transcripts.gff3\n\n    CodingQuarry \\\n      -f genome.fasta \\\n      -t transcripts.gff3 \\\n      -2 \"codingquarry.gff3\" \\\n      -p \"${task.cpus}\" \\\n      -g secretome.txt \\\n      -h\n\n    # Tidy some of the CQ weirdness.\n    # Sometimes you can get a -ve cds phase for unknown reasons.\n    # CQ puts the CDS directly on the gene, which breaks some tools.\n    awk -F '\\t' 'BEGIN {OFS=\"\\\\t\"} \\$8 = \"-1\" {\\$8=\"0\"} {print}' out/PGN_predictedPass.gff3 \\\n    | awk -F '\\t' \\\n      '\n        BEGIN {OFS=\"\\\\t\"}\n        \\$3 == \"gene\" {\n            print;\n            \\$9=gensub(/.*ID=([^;]+).*/, \"ID=mRNA:\\\\\\\\1;Parent=\\\\\\\\1;\", \"1\", \\$9);\n            \\$3=\"mRNA\";\n            print\n        }\n        \\$3 == \"CDS\" {\n            \\$9=gensub(/Parent=/, \"Parent=mRNA:\", \"1\", \\$9);\n            print\n        }\n      ' \\\n    > \"${name}_codingquarrypm.gff3\"\n\n    mv out/fusions.txt \"${name}_codingquarrypm_fusions.txt\"\n    mv out/overlapReport.txt \"${name}_codingquarrypm_overlapreport.txt\"\n    rm -rf -- out\n    \"\"\"",
        "nb_lignes_script": 43,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"codingquarry\"",
            "label \"big_task\"",
            "time '1d'",
            "errorStrategy \"retry\"",
            "maxRetries 10",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_gemoma_cds_parts": {
        "name_process": "extract_gemoma_cds_parts",
        "string_process": "\nprocess extract_gemoma_cds_parts {\n\n    label \"gemoma\"\n    label \"small_task\"\n    time '2h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n        path(fasta),\n        path(gff)\n\n    output:\n    tuple val(name),\n        path(\"${name}_gemoma_cds_parts.fasta\"),\n        path(\"${name}_gemoma_assignment.tabular\"),\n        path(\"${name}_gemoma_proteins.fasta\")\n\n    script:\n    \"\"\"\n    java -jar \\${GEMOMA_JAR} CLI Extractor \\\n      a=${gff} \\\n      g=${fasta} \\\n      p=true \\\n      outdir=.\n\n    mv cds-parts.fasta \"${name}_gemoma_cds_parts.fasta\"\n    mv assignment.tabular \"${name}_gemoma_assignment.tabular\"\n    mv proteins.fasta \"${name}_gemoma_proteins.fasta\"\n\n    rm -rf -- GeMoMa_temp\n    rm protocol_Extractor.txt\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    java -jar \\${GEMOMA_JAR} CLI Extractor \\\n      a=${gff} \\\n      g=${fasta} \\\n      p=true \\\n      outdir=.\n\n    mv cds-parts.fasta \"${name}_gemoma_cds_parts.fasta\"\n    mv assignment.tabular \"${name}_gemoma_assignment.tabular\"\n    mv proteins.fasta \"${name}_gemoma_proteins.fasta\"\n\n    rm -rf -- GeMoMa_temp\n    rm protocol_Extractor.txt\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "fasta",
            "gff"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gemoma\"",
            "label \"small_task\"",
            "time '2h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_gemoma_comparative_cds_parts": {
        "name_process": "extract_gemoma_comparative_cds_parts",
        "string_process": "\nprocess extract_gemoma_comparative_cds_parts {\n\n    label \"gemoma\"\n    label \"small_task\"\n    time '3h'\n\n    tag \"${name} - ${analysis}\"\n\n    input:\n    tuple val(name),\n        val(analysis),\n        path(fasta),\n        path(gff)\n\n    output:\n    tuple val(name),\n        val(analysis),\n        path(\"${name}_${analysis}_cdsparts.fasta\"),\n        path(\"${name}_${analysis}_assignment.tsv\"),\n        path(\"${name}_${analysis}_proteins.fasta\")\n\n    script:\n    \"\"\"\n    # The length thing in awk is just to skip empty lines.\n\n    awk -F'\\\\t' -v name=\"${name}\" -v analysis=\"${analysis}\" '\n      BEGIN { OFS=\"\\\\t\" }\n      !/^#/ && length {\n        \\$1=name\".\"\\$1;\n        \\$9=gensub(/Parent=([^;]+)/, \"Parent=\"name\".\"analysis\".\\\\\\\\1\", \"g\", \\$9);\n        \\$9=gensub(/ID=([^;]+)/, \"ID=\"name\".\"analysis\".\\\\\\\\1\", \"g\", \\$9);\n        print\n      }\n    ' < \"${gff}\" \\\n    > renamed.gff3\n\n    sed \"/^>/s/^>/>${name}./\" < \"${fasta}\" > renamed.fasta\n\n    java -jar \\${GEMOMA_JAR} CLI Extractor \\\n      a=renamed.gff3 \\\n      g=renamed.fasta \\\n      p=true \\\n      outdir=.\n\n    mv cds-parts.fasta \"${name}_${analysis}_cdsparts.fasta\"\n    mv assignment.tabular \"${name}_${analysis}_assignment.tsv\"\n    mv proteins.fasta \"${name}_${analysis}_proteins.fasta\"\n\n    rm -rf -- GeMoMa_temp\n    rm protocol_Extractor.txt\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    \"\"\"\n    # The length thing in awk is just to skip empty lines.\n\n    awk -F'\\\\t' -v name=\"${name}\" -v analysis=\"${analysis}\" '\n      BEGIN { OFS=\"\\\\t\" }\n      !/^#/ && length {\n        \\$1=name\".\"\\$1;\n        \\$9=gensub(/Parent=([^;]+)/, \"Parent=\"name\".\"analysis\".\\\\\\\\1\", \"g\", \\$9);\n        \\$9=gensub(/ID=([^;]+)/, \"ID=\"name\".\"analysis\".\\\\\\\\1\", \"g\", \\$9);\n        print\n      }\n    ' < \"${gff}\" \\\n    > renamed.gff3\n\n    sed \"/^>/s/^>/>${name}./\" < \"${fasta}\" > renamed.fasta\n\n    java -jar \\${GEMOMA_JAR} CLI Extractor \\\n      a=renamed.gff3 \\\n      g=renamed.fasta \\\n      p=true \\\n      outdir=.\n\n    mv cds-parts.fasta \"${name}_${analysis}_cdsparts.fasta\"\n    mv assignment.tabular \"${name}_${analysis}_assignment.tsv\"\n    mv proteins.fasta \"${name}_${analysis}_proteins.fasta\"\n\n    rm -rf -- GeMoMa_temp\n    rm protocol_Extractor.txt\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "analysis",
            "fasta",
            "gff"
        ],
        "nb_inputs": 4,
        "outputs": [
            "analysis"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gemoma\"",
            "label \"small_task\"",
            "time '3h'",
            "tag \"${name} - ${analysis}\""
        ],
        "when": "",
        "stub": ""
    },
    "cluster_gemoma_cds_parts": {
        "name_process": "cluster_gemoma_cds_parts",
        "string_process": "\nprocess cluster_gemoma_cds_parts {\n\n    label \"mmseqs\"\n    label \"medium_task\"\n\n    time '1d'\n\n    input:\n    tuple path(\"*c.fasta\"), path(\"*a.tsv\"), path(\"*p.fasta\")\n\n    output:\n    tuple path(\"cdsparts.fasta\"),\n          path(\"assignment.tsv\"),\n          path(\"proteins.fasta\")\n\n    script:\n    \"\"\"\n    mkdir -p proteins protein_clusters tmp\n\n    cat *c.fasta > \"old_cdsparts.fasta\"\n    cat *p.fasta > \"old_proteins.fasta\"\n\n    FIRST_FILE=1\n    for f in *a.tsv;\n    do\n      if [ \\${FIRST_FILE} == 1 ];\n      then\n        cat \"\\${f}\" > old_assignment.tsv\n        FIRST_FILE=0\n      else\n        tail -n+2 \"\\${f}\" >> old_assignment.tsv\n      fi\n    done\n\n    mmseqs createdb old_proteins.fasta proteins/db\n    mmseqs cluster \\\n      proteins/db \\\n      protein_clusters/db \\\n      tmp \\\n      --threads \"${task.cpus}\" \\\n      --min-seq-id 0.9 \\\n      -c 0.98 \\\n      --cov-mode 0 \\\n      --cluster-mode 0\n\n    mmseqs createtsv proteins/db proteins/db protein_clusters/db protein_clusters.tsv\n\n    rm -rf -- proteins protein_clusters tmp\n\n    # The script outputs are hardcoded.\n    select_comparative_proteins.py \\\n      --clusters protein_clusters.tsv \\\n      --assignments old_assignment.tsv \\\n      --cdsparts old_cdsparts.fasta \\\n      --proteins old_proteins.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    \"\"\"\n    mkdir -p proteins protein_clusters tmp\n\n    cat *c.fasta > \"old_cdsparts.fasta\"\n    cat *p.fasta > \"old_proteins.fasta\"\n\n    FIRST_FILE=1\n    for f in *a.tsv;\n    do\n      if [ \\${FIRST_FILE} == 1 ];\n      then\n        cat \"\\${f}\" > old_assignment.tsv\n        FIRST_FILE=0\n      else\n        tail -n+2 \"\\${f}\" >> old_assignment.tsv\n      fi\n    done\n\n    mmseqs createdb old_proteins.fasta proteins/db\n    mmseqs cluster \\\n      proteins/db \\\n      protein_clusters/db \\\n      tmp \\\n      --threads \"${task.cpus}\" \\\n      --min-seq-id 0.9 \\\n      -c 0.98 \\\n      --cov-mode 0 \\\n      --cluster-mode 0\n\n    mmseqs createtsv proteins/db proteins/db protein_clusters/db protein_clusters.tsv\n\n    rm -rf -- proteins protein_clusters tmp\n\n    # The script outputs are hardcoded.\n    select_comparative_proteins.py \\\n      --clusters protein_clusters.tsv \\\n      --assignments old_assignment.tsv \\\n      --cdsparts old_cdsparts.fasta \\\n      --proteins old_proteins.fasta\n    \"\"\"",
        "nb_lignes_script": 39,
        "language_script": "bash",
        "tools": [
            "MMseqs",
            "ODB",
            "TMPD"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs",
            "https://bio.tools/odb",
            "https://bio.tools/tmpd"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            },
            {
                "name": "ODB",
                "uri": "https://bio.tools/odb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0435",
                                    "term": "Operon prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3432",
                                    "term": "Clustering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0579",
                                    "term": "Operon drawing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer design"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0579",
                                    "term": "Operon rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "Primer design"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Contains all known and conserved operons in completely sequenced genomes.",
                "homepage": "http://operondb.jp/"
            },
            {
                "name": "TMPD",
                "uri": "https://bio.tools/tmpd",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Tobacco Markers & Primers Database.",
                "homepage": "http://biodb.sdau.edu.cn/tmpd/index.html"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"mmseqs\"",
            "label \"medium_task\"",
            "time '1d'"
        ],
        "when": "",
        "stub": ""
    },
    "mmseqs_search_gemoma_cds_parts": {
        "name_process": "mmseqs_search_gemoma_cds_parts",
        "string_process": "\nprocess mmseqs_search_gemoma_cds_parts {\n\n    label \"mmseqs\"\n    label \"medium_task\"\n    time '6h'\n\n    tag \"${target_name} - ${ref_name}\"\n\n    input:\n    val trans_table\n    tuple val(ref_name),\n        path(\"cds-parts.fasta\"),\n        path(\"assignment.tabular\"),\n        path(\"proteins.fasta\"),\n        val(target_name),\n        path(\"genome\")                       \n\n    output:\n    tuple val(target_name),\n        val(ref_name),\n        path(\"${target_name}_${ref_name}_mmseqs_search_gemoma_cds_parts_matches.tsv\")\n\n    script:\n    \"\"\"\n    mkdir -p proteins\n    mmseqs createdb cds-parts.fasta proteins/db\n\n    mkdir -p alignment tmp\n    mmseqs search \\\n      proteins/db \\\n      genome/db \\\n      alignment/db \\\n      tmp \\\n      --threads ${task.cpus} \\\n      -e 100 \\\n      --min-length 10 \\\n      --comp-bias-corr 1 \\\n      --split-mode 1 \\\n      --realign \\\n      --max-seqs 100 \\\n      --mask 0 \\\n      --orf-start-mode 1 \\\n      --translation-table \"${trans_table}\" \\\n      --use-all-table-starts\n\n    mmseqs convertalis \\\n      proteins/db \\\n      genome/db \\\n      alignment/db \\\n      \"${target_name}_${ref_name}_mmseqs_search_gemoma_cds_parts_matches.tsv\" \\\n      --threads ${task.cpus} \\\n      --format-mode 0 \\\n      --format-output 'query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,empty,raw,nident,empty,empty,empty,qframe,tframe,qaln,taln,qlen,tlen'\n\n    rm -rf -- proteins alignment tmp\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    \"\"\"\n    mkdir -p proteins\n    mmseqs createdb cds-parts.fasta proteins/db\n\n    mkdir -p alignment tmp\n    mmseqs search \\\n      proteins/db \\\n      genome/db \\\n      alignment/db \\\n      tmp \\\n      --threads ${task.cpus} \\\n      -e 100 \\\n      --min-length 10 \\\n      --comp-bias-corr 1 \\\n      --split-mode 1 \\\n      --realign \\\n      --max-seqs 100 \\\n      --mask 0 \\\n      --orf-start-mode 1 \\\n      --translation-table \"${trans_table}\" \\\n      --use-all-table-starts\n\n    mmseqs convertalis \\\n      proteins/db \\\n      genome/db \\\n      alignment/db \\\n      \"${target_name}_${ref_name}_mmseqs_search_gemoma_cds_parts_matches.tsv\" \\\n      --threads ${task.cpus} \\\n      --format-mode 0 \\\n      --format-output 'query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,empty,raw,nident,empty,empty,empty,qframe,tframe,qaln,taln,qlen,tlen'\n\n    rm -rf -- proteins alignment tmp\n    \"\"\"",
        "nb_lignes_script": 32,
        "language_script": "bash",
        "tools": [
            "MMseqs",
            "ODB",
            "TMPD"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs",
            "https://bio.tools/odb",
            "https://bio.tools/tmpd"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            },
            {
                "name": "ODB",
                "uri": "https://bio.tools/odb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0435",
                                    "term": "Operon prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3432",
                                    "term": "Clustering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0579",
                                    "term": "Operon drawing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer design"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0579",
                                    "term": "Operon rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "Primer design"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Contains all known and conserved operons in completely sequenced genomes.",
                "homepage": "http://operondb.jp/"
            },
            {
                "name": "TMPD",
                "uri": "https://bio.tools/tmpd",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Tobacco Markers & Primers Database.",
                "homepage": "http://biodb.sdau.edu.cn/tmpd/index.html"
            }
        ],
        "inputs": [
            "trans_table",
            "ref_name",
            "target_name"
        ],
        "nb_inputs": 3,
        "outputs": [
            "ref_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"mmseqs\"",
            "label \"medium_task\"",
            "time '6h'",
            "tag \"${target_name} - ${ref_name}\""
        ],
        "when": "",
        "stub": ""
    },
    "gemoma": {
        "name_process": "gemoma",
        "string_process": "\nprocess gemoma {\n\n    label \"gemoma\"\n    label \"medium_task\"\n    time '6h'\n\n    tag \"${target_name} - ${ref_name}\"\n\n    input:\n    tuple val(target_name),\n          val(ref_name),\n          path(\"genome.fasta\"),\n          path(\"cds-parts.fasta\"),\n          path(\"assignment.tabular\"),\n          path(\"proteins.fasta\"),\n          path(\"matches.tsv\"),\n          path(\"introns.gff\")\n\n    output:\n    tuple val(target_name),\n        val(ref_name),\n        path(\"${target_name}_${ref_name}_gemoma.gff3\")\n\n    script:\n                                                                         \n    \"\"\"\n    mkdir -p out\n    java -jar \\${GEMOMA_JAR} CLI GeMoMa \\\n      s=matches.tsv \\\n      t=genome.fasta \\\n      c=cds-parts.fasta \\\n      a=assignment.tabular \\\n      q=proteins.fasta \\\n      outdir=out \\\n      sort=true \\\n      i=introns.gff \\\n      r=2\n\n    mv out/predicted_annotation.gff \"${target_name}_${ref_name}_gemoma.gff3\"\n\n    rm -rf -- GeMoMa_temp out\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    \"\"\"\n    mkdir -p out\n    java -jar \\${GEMOMA_JAR} CLI GeMoMa \\\n      s=matches.tsv \\\n      t=genome.fasta \\\n      c=cds-parts.fasta \\\n      a=assignment.tabular \\\n      q=proteins.fasta \\\n      outdir=out \\\n      sort=true \\\n      i=introns.gff \\\n      r=2\n\n    mv out/predicted_annotation.gff \"${target_name}_${ref_name}_gemoma.gff3\"\n\n    rm -rf -- GeMoMa_temp out\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "target_name",
            "ref_name"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ref_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gemoma\"",
            "label \"medium_task\"",
            "time '6h'",
            "tag \"${target_name} - ${ref_name}\""
        ],
        "when": "",
        "stub": ""
    },
    "gemoma_combine": {
        "name_process": "gemoma_combine",
        "string_process": "\nprocess gemoma_combine {\n\n    label \"gemoma\"\n    label \"small_task\"\n    time '6h'\n\n    tag \"${name}\"\n\n    input:\n    val analysis\n    tuple val(name),\n        val(ref_names),\n        path(pred_gffs),\n        path(fasta),\n        path(\"introns.gff\")\n\n    output:\n    tuple val(name),\n        path(\"${name}_${analysis}_combined.gff3\")\n\n    script:\n    def ref_names_list = ref_names\n    def pred_gffs_list = (pred_gffs instanceof List) ? pred_gffs : [pred_gffs]\n    assert pred_gffs_list.size() == ref_names_list.size()\n\n                                                      \n                                                      \n    def preds = [ref_names_list, pred_gffs_list]\n        .transpose()\n        .collect { rn, pred -> \"p=${rn} g=${pred.name}\" }\n        .join(' ')\n\n    \"\"\"\n    mkdir -p gaf\n    java -jar \\${GEMOMA_JAR} CLI GAF \\\n      ${preds} \\\n      outdir=gaf\n\n    # if \\${get_utr}\n    # then\n    #   mkdir -p finalised\n    #   java -jar \\${GEMOMA_JAR} CLI AnnotationFinalizer \\\n    #     g=${fasta} \\\n    #     a=gaf/filtered_predictions.gff \\\n    #     i=introns.gff \\\n    #     u=YES \\\n    #     c=STRANDED \\\n    #     coverage_forward=coverage_forward.bedgraph \\\n    #     coverage_reverse=coverage_reverse.bedgraph \\\n    #     outdir=finalised \\\n    #     rename=NO\n\n    #   mv finalised/final_annotation.gff gemoma_tmp.gff3\n    # else\n    #   mv gaf/filtered_predictions.gff gemoma_tmp.gff3\n    # fi\n\n    mv gaf/filtered_predictions.gff gemoma_tmp.gff3\n\n    awk 'BEGIN {OFS=\"\\\\t\"} \\$3 == \"prediction\" {\\$3=\"mRNA\"} {print}' \\\n      gemoma_tmp.gff3 > \"${name}_${analysis}_combined.gff3\"\n\n    rm -rf -- gaf finalised GeMoMa_temp gemoma_tmp.gff3\n    \"\"\"\n}",
        "nb_lignes_process": 64,
        "string_script": "    def ref_names_list = ref_names\n    def pred_gffs_list = (pred_gffs instanceof List) ? pred_gffs : [pred_gffs]\n    assert pred_gffs_list.size() == ref_names_list.size()\n\n                                                      \n                                                      \n    def preds = [ref_names_list, pred_gffs_list]\n        .transpose()\n        .collect { rn, pred -> \"p=${rn} g=${pred.name}\" }\n        .join(' ')\n\n    \"\"\"\n    mkdir -p gaf\n    java -jar \\${GEMOMA_JAR} CLI GAF \\\n      ${preds} \\\n      outdir=gaf\n\n    # if \\${get_utr}\n    # then\n    #   mkdir -p finalised\n    #   java -jar \\${GEMOMA_JAR} CLI AnnotationFinalizer \\\n    #     g=${fasta} \\\n    #     a=gaf/filtered_predictions.gff \\\n    #     i=introns.gff \\\n    #     u=YES \\\n    #     c=STRANDED \\\n    #     coverage_forward=coverage_forward.bedgraph \\\n    #     coverage_reverse=coverage_reverse.bedgraph \\\n    #     outdir=finalised \\\n    #     rename=NO\n\n    #   mv finalised/final_annotation.gff gemoma_tmp.gff3\n    # else\n    #   mv gaf/filtered_predictions.gff gemoma_tmp.gff3\n    # fi\n\n    mv gaf/filtered_predictions.gff gemoma_tmp.gff3\n\n    awk 'BEGIN {OFS=\"\\\\t\"} \\$3 == \"prediction\" {\\$3=\"mRNA\"} {print}' \\\n      gemoma_tmp.gff3 > \"${name}_${analysis}_combined.gff3\"\n\n    rm -rf -- gaf finalised GeMoMa_temp gemoma_tmp.gff3\n    \"\"\"",
        "nb_lignes_script": 42,
        "language_script": "bash",
        "tools": [
            "GPU-CASSERT"
        ],
        "tools_url": [
            "https://bio.tools/gpu-cassert"
        ],
        "tools_dico": [
            {
                "name": "GPU-CASSERT",
                "uri": "https://bio.tools/gpu-cassert",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_1317",
                            "term": "Structural biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structure analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Structural bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0081",
                            "term": "Biomolecular structure"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structure alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0295",
                                    "term": "Structural alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The GPU-based implementation of the CASSERT algorithm for protein 3D structure similarity searching. The algorithm is based on the two-phase alignment of protein structures when matching fragments of compared proteins.",
                "homepage": "http://zti.polsl.pl/dmrozek/science/gpucassert/cassert.htm"
            }
        ],
        "inputs": [
            "analysis",
            "name",
            "ref_names",
            "pred_gffs",
            "fasta"
        ],
        "nb_inputs": 5,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gemoma\"",
            "label \"small_task\"",
            "time '6h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "augustus_denovo": {
        "name_process": "augustus_denovo",
        "string_process": "\nprocess augustus_denovo {\n\n    label \"augustus\"\n    label \"small_task\"\n    time '1d'\n\n    tag \"${name} - ${strand}\"\n\n    input:\n    val augustus_species\n    val augustus_utr\n    val not_fungus\n    val min_intron_hard\n    tuple val(name), val(strand), path(fasta)\n    path \"augustus_config\"\n\n    output:\n    tuple val(name),\n        val(strand),\n        path(\"${name}_${strand}_augustus_denovo.gff\")\n\n    script:\n    if ( augustus_utr && not_fungus ) {\n        strand_param = \"--singlestrand=false --UTR=on\"\n    } else if ( !augustus_utr && not_fungus ) {\n        strand_param = \"--singlestrand=true --UTR=off\"\n    } else if ( !augustus_utr && !not_fungus ) {\n        strand_param = \"--singlestrand=true --UTR=off\"\n    } else if ( strand == \"forward\" ) {\n        strand_param = \"--strand=forward --UTR=on\"\n    } else if ( strand == \"reverse\" ) {\n        strand_param = \"--strand=backward --UTR=on\"\n    }\n\n    \"\"\"\n    export AUGUSTUS_CONFIG_PATH=\"\\${PWD}/augustus_config\"\n\n    augustus \\\n      --species=\"${augustus_species}\" \\\n      --softmasking=on \\\n      ${strand_param} \\\n      --min_intron_len=${min_intron_hard} \\\n      --start=on \\\n      --stop=on \\\n      --introns=on \\\n      --cds=on \\\n      --gff3=on \\\n      --codingseq=on \\\n      --protein=on \\\n      --outfile=\"${name}_${strand}_augustus_denovo.gff\" \\\n      --errfile=augustus.err \\\n      \"${fasta}\"\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    if ( augustus_utr && not_fungus ) {\n        strand_param = \"--singlestrand=false --UTR=on\"\n    } else if ( !augustus_utr && not_fungus ) {\n        strand_param = \"--singlestrand=true --UTR=off\"\n    } else if ( !augustus_utr && !not_fungus ) {\n        strand_param = \"--singlestrand=true --UTR=off\"\n    } else if ( strand == \"forward\" ) {\n        strand_param = \"--strand=forward --UTR=on\"\n    } else if ( strand == \"reverse\" ) {\n        strand_param = \"--strand=backward --UTR=on\"\n    }\n\n    \"\"\"\n    export AUGUSTUS_CONFIG_PATH=\"\\${PWD}/augustus_config\"\n\n    augustus \\\n      --species=\"${augustus_species}\" \\\n      --softmasking=on \\\n      ${strand_param} \\\n      --min_intron_len=${min_intron_hard} \\\n      --start=on \\\n      --stop=on \\\n      --introns=on \\\n      --cds=on \\\n      --gff3=on \\\n      --codingseq=on \\\n      --protein=on \\\n      --outfile=\"${name}_${strand}_augustus_denovo.gff\" \\\n      --errfile=augustus.err \\\n      \"${fasta}\"\n    \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [
            "AUGUSTUS"
        ],
        "tools_url": [
            "https://bio.tools/augustus"
        ],
        "tools_dico": [
            {
                "name": "AUGUSTUS",
                "uri": "https://bio.tools/augustus",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Homology-based gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3662",
                                    "term": "Ab-initio gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0004",
                                    "term": "Operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Evidence-based gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Gene prediction (homology-based)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Empirical gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Similarity-based gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Empirical gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3662",
                                    "term": "Gene prediction (ab-initio)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "AUGUSTUS is a eukaryotic gene prediction tool. It can integrate evidence, e.g. from RNA-Seq, ESTs, proteomics, but can also predict genes ab initio. The PPX extension to AUGUSTUS can take a protein sequence multiple sequence alignment as input to find new members of the family in a genome. It can be run through a web interface (see https://bio.tools/webaugustus), or downloaded and run locally.",
                "homepage": "http://bioinf.uni-greifswald.de/augustus"
            }
        ],
        "inputs": [
            "augustus_species",
            "augustus_utr",
            "not_fungus",
            "min_intron_hard",
            "name",
            "strand",
            "fasta"
        ],
        "nb_inputs": 7,
        "outputs": [
            "strand"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"augustus\"",
            "label \"small_task\"",
            "time '1d'",
            "tag \"${name} - ${strand}\""
        ],
        "when": "",
        "stub": ""
    },
    "augustus_hints": {
        "name_process": "augustus_hints",
        "string_process": "\nprocess augustus_hints {\n\n    label \"augustus\"\n    label \"small_task\"\n    time '1d'\n\n    tag \"${name} - ${strand}\"\n\n    input:\n    val augustus_species\n    val augustus_utr\n    val not_fungus\n    val min_intron_hard\n    val valid_splicesites\n    tuple val(name),\n        val(strand),\n        path(fasta),\n        path(\"*hints\")\n\n    path \"augustus_config\"\n    path \"extrinsic.cfg\"\n\n    output:\n    tuple val(name),\n        val(strand),\n        path(\"${name}_${strand}_augustus_hints.gff3\")\n\n    script:\n    if ( augustus_utr && not_fungus ) {\n        strand_param = \"--singlestrand=false --UTR=on\"\n    } else if ( !augustus_utr && not_fungus ) {\n        strand_param = \"--singlestrand=true --UTR=off\"\n    } else if ( !augustus_utr && !not_fungus ) {\n        strand_param = \"--singlestrand=true --UTR=off\"\n    } else if ( strand == \"forward\" ) {\n        strand_param = \"--strand=forward --UTR=on\"\n    } else if ( strand == \"reverse\" ) {\n        strand_param = \"--strand=backward --UTR=on\"\n    }\n\n    is_utr = augustus_utr ? \"true\" : \"false\"\n    is_fungus = not_fungus ? \"false\" : \"true\"\n\n    \"\"\"\n    export AUGUSTUS_CONFIG_PATH=\"\\${PWD}/augustus_config\"\n    perl -n -e'/>(\\\\S+)/ && print \\$1.\"\\\\n\"' < \"${fasta}\" > seqids.txt\n\n    if ${is_utr} && ${is_fungus}\n    then\n      # Gemoma doesn't do fungal utrs well.\n      cat *hints \\\n      | awk -F '\\t' '! (\\$2 == \"GeMoMa\" && (\\$3 == \"exon\" || \\$3 == \"UTRpart\"))' \\\n      > hints.gff\n    elif ${is_utr} && ! ${is_fungus}\n    then\n      cat *hints > hints.gff\n    else\n      cat *hints \\\n      | awk -F '\\t' '\\$3 != \"exonpart\" && \\$3 != \"exon\" && \\$3 != \"UTRpart\"' \\\n      > hints.gff\n    fi\n\n    getLinesMatching.pl seqids.txt 1 < hints.gff > hints_filtered.gff\n\n    augustus \\\n      --species=\"${augustus_species}\" \\\n      --extrinsicCfgFile=extrinsic.cfg \\\n      --hintsfile=hints_filtered.gff \\\n      ${strand_param} \\\n      --allow_hinted_splicesites=\"${valid_splicesites}\" \\\n      --softmasking=on \\\n      --alternatives-from-evidence=true \\\n      --min_intron_len=\"${min_intron_hard}\" \\\n      --start=off \\\n      --stop=off \\\n      --introns=off \\\n      --gff3=on \\\n      --outfile=\"out.gff3\" \\\n      --errfile=augustus.err \\\n      \"${fasta}\"\n\n    awk -F '\\\\t' '\n      BEGIN {OFS=\"\\\\t\"}\n      \\$3 == \"transcript\" {\\$3=\"mRNA\"}\n      \\$0 !~ /^#/ {print}\n    ' out.gff3 \\\n    > \"${name}_${strand}_augustus_hints.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 88,
        "string_script": "    if ( augustus_utr && not_fungus ) {\n        strand_param = \"--singlestrand=false --UTR=on\"\n    } else if ( !augustus_utr && not_fungus ) {\n        strand_param = \"--singlestrand=true --UTR=off\"\n    } else if ( !augustus_utr && !not_fungus ) {\n        strand_param = \"--singlestrand=true --UTR=off\"\n    } else if ( strand == \"forward\" ) {\n        strand_param = \"--strand=forward --UTR=on\"\n    } else if ( strand == \"reverse\" ) {\n        strand_param = \"--strand=backward --UTR=on\"\n    }\n\n    is_utr = augustus_utr ? \"true\" : \"false\"\n    is_fungus = not_fungus ? \"false\" : \"true\"\n\n    \"\"\"\n    export AUGUSTUS_CONFIG_PATH=\"\\${PWD}/augustus_config\"\n    perl -n -e'/>(\\\\S+)/ && print \\$1.\"\\\\n\"' < \"${fasta}\" > seqids.txt\n\n    if ${is_utr} && ${is_fungus}\n    then\n      # Gemoma doesn't do fungal utrs well.\n      cat *hints \\\n      | awk -F '\\t' '! (\\$2 == \"GeMoMa\" && (\\$3 == \"exon\" || \\$3 == \"UTRpart\"))' \\\n      > hints.gff\n    elif ${is_utr} && ! ${is_fungus}\n    then\n      cat *hints > hints.gff\n    else\n      cat *hints \\\n      | awk -F '\\t' '\\$3 != \"exonpart\" && \\$3 != \"exon\" && \\$3 != \"UTRpart\"' \\\n      > hints.gff\n    fi\n\n    getLinesMatching.pl seqids.txt 1 < hints.gff > hints_filtered.gff\n\n    augustus \\\n      --species=\"${augustus_species}\" \\\n      --extrinsicCfgFile=extrinsic.cfg \\\n      --hintsfile=hints_filtered.gff \\\n      ${strand_param} \\\n      --allow_hinted_splicesites=\"${valid_splicesites}\" \\\n      --softmasking=on \\\n      --alternatives-from-evidence=true \\\n      --min_intron_len=\"${min_intron_hard}\" \\\n      --start=off \\\n      --stop=off \\\n      --introns=off \\\n      --gff3=on \\\n      --outfile=\"out.gff3\" \\\n      --errfile=augustus.err \\\n      \"${fasta}\"\n\n    awk -F '\\\\t' '\n      BEGIN {OFS=\"\\\\t\"}\n      \\$3 == \"transcript\" {\\$3=\"mRNA\"}\n      \\$0 !~ /^#/ {print}\n    ' out.gff3 \\\n    > \"${name}_${strand}_augustus_hints.gff3\"\n    \"\"\"",
        "nb_lignes_script": 59,
        "language_script": "bash",
        "tools": [
            "AUGUSTUS"
        ],
        "tools_url": [
            "https://bio.tools/augustus"
        ],
        "tools_dico": [
            {
                "name": "AUGUSTUS",
                "uri": "https://bio.tools/augustus",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Homology-based gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3662",
                                    "term": "Ab-initio gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0004",
                                    "term": "Operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Evidence-based gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Gene prediction (homology-based)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Empirical gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Similarity-based gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3663",
                                    "term": "Empirical gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3662",
                                    "term": "Gene prediction (ab-initio)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "AUGUSTUS is a eukaryotic gene prediction tool. It can integrate evidence, e.g. from RNA-Seq, ESTs, proteomics, but can also predict genes ab initio. The PPX extension to AUGUSTUS can take a protein sequence multiple sequence alignment as input to find new members of the family in a genome. It can be run through a web interface (see https://bio.tools/webaugustus), or downloaded and run locally.",
                "homepage": "http://bioinf.uni-greifswald.de/augustus"
            }
        ],
        "inputs": [
            "augustus_species",
            "augustus_utr",
            "not_fungus",
            "min_intron_hard",
            "valid_splicesites",
            "name",
            "strand",
            "fasta"
        ],
        "nb_inputs": 8,
        "outputs": [
            "strand"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"augustus\"",
            "label \"small_task\"",
            "time '1d'",
            "tag \"${name} - ${strand}\""
        ],
        "when": "",
        "stub": ""
    },
    "evm": {
        "name_process": "evm",
        "string_process": "\nprocess evm {\n\n    label \"evm\"\n    label \"big_task\"\n    time '1d'\n\n    tag \"${name}\"\n\n    input:\n    val min_intron_hard\n    path \"weights.txt\"\n    tuple val(name),\n        path(\"genome.fasta\"),\n        path(\"transcripts/*\"),\n        path(\"proteins/*\"),\n        path(\"genes/*\")\n\n    output:\n    tuple val(name),\n        path(\"${name}_evm.gff3\")\n\n    script:\n    \"\"\"\n    mkdir -p genes transcripts proteins\n\n    if [ \"\\$(ls -A genes)\" ]\n    then\n        grep --no-filename -v \"^#\" genes/* > genes.gff3\n    else\n        touch genes.gff3\n    fi\n\n    if [ \"\\$(ls -A transcripts)\" ]\n    then\n        grep --no-filename -v \"^#\" transcripts/* > transcripts.gff3\n    else\n        touch transcripts.gff3\n    fi\n\n    if [ \"\\$(ls -A proteins)\" ]\n    then\n        grep --no-filename -v \"^#\" proteins/* > proteins.gff3\n    else\n        touch proteins.gff3\n    fi\n\n    partition_EVM_inputs.pl \\\n      --genome genome.fasta \\\n      --gene_predictions genes.gff3 \\\n      --protein_alignments proteins.gff3 \\\n      --transcript_alignments transcripts.gff3 \\\n      --segmentSize 500000 \\\n      --overlapSize 10000 \\\n      --partition partitions_list.out\n\n    write_EVM_commands.pl \\\n      --genome genome.fasta \\\n      --weights \"\\${PWD}/weights.txt\" \\\n      --gene_predictions genes.gff3 \\\n      --min_intron_length \"${min_intron_hard}\" \\\n      --protein_alignments proteins.gff3 \\\n      --transcript_alignments transcripts.gff3 \\\n      --output_file_name evm.out \\\n      --partitions partitions_list.out \\\n    > commands.list\n\n    xargs -I{} -P${task.cpus} -- sh -c \"{};\" < commands.list\n\n    recombine_EVM_partial_outputs.pl \\\n      --partitions partitions_list.out \\\n      --output_file_name evm.out\n\n    convert_EVM_outputs_to_GFF3.pl \\\n      --partitions partitions_list.out \\\n      --output evm.out \\\n      --genome genome.fasta\n\n    find . -regex \".*evm.out.gff3\" -exec cat {} \\\\; > \"${name}_evm.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 79,
        "string_script": "    \"\"\"\n    mkdir -p genes transcripts proteins\n\n    if [ \"\\$(ls -A genes)\" ]\n    then\n        grep --no-filename -v \"^#\" genes/* > genes.gff3\n    else\n        touch genes.gff3\n    fi\n\n    if [ \"\\$(ls -A transcripts)\" ]\n    then\n        grep --no-filename -v \"^#\" transcripts/* > transcripts.gff3\n    else\n        touch transcripts.gff3\n    fi\n\n    if [ \"\\$(ls -A proteins)\" ]\n    then\n        grep --no-filename -v \"^#\" proteins/* > proteins.gff3\n    else\n        touch proteins.gff3\n    fi\n\n    partition_EVM_inputs.pl \\\n      --genome genome.fasta \\\n      --gene_predictions genes.gff3 \\\n      --protein_alignments proteins.gff3 \\\n      --transcript_alignments transcripts.gff3 \\\n      --segmentSize 500000 \\\n      --overlapSize 10000 \\\n      --partition partitions_list.out\n\n    write_EVM_commands.pl \\\n      --genome genome.fasta \\\n      --weights \"\\${PWD}/weights.txt\" \\\n      --gene_predictions genes.gff3 \\\n      --min_intron_length \"${min_intron_hard}\" \\\n      --protein_alignments proteins.gff3 \\\n      --transcript_alignments transcripts.gff3 \\\n      --output_file_name evm.out \\\n      --partitions partitions_list.out \\\n    > commands.list\n\n    xargs -I{} -P${task.cpus} -- sh -c \"{};\" < commands.list\n\n    recombine_EVM_partial_outputs.pl \\\n      --partitions partitions_list.out \\\n      --output_file_name evm.out\n\n    convert_EVM_outputs_to_GFF3.pl \\\n      --partitions partitions_list.out \\\n      --output evm.out \\\n      --genome genome.fasta\n\n    find . -regex \".*evm.out.gff3\" -exec cat {} \\\\; > \"${name}_evm.gff3\"\n    \"\"\"",
        "nb_lignes_script": 56,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "min_intron_hard",
            "name"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"evm\"",
            "label \"big_task\"",
            "time '1d'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "find_missing_evm_predictions": {
        "name_process": "find_missing_evm_predictions",
        "string_process": "\nprocess find_missing_evm_predictions {\n\n    label \"bedtools\"\n    label \"small_task\"\n    time '3h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n        path(\"evm.gff3\"),\n        path(\"genes/*\"),\n        path(\"genome.faidx\")\n\n    output:\n    tuple val(name), path(\"clustered.bed\")\n\n    script:\n    \"\"\"\n    if [ -d genes ]\n    then\n        grep --no-filename -v \"^#\" genes/* > genes.gff3\n    else\n        touch genes.gff3\n    fi\n\n    if [ -d transcripts ]\n    then\n        grep --no-filename -v \"^#\" transcripts/* > transcripts.gff3\n    else\n        touch transcripts.gff3\n    fi\n\n    if [ -d proteins ]\n    then\n        grep --no-filename -v \"^#\" proteins/* > proteins.gff3\n    else\n        touch proteins.gff3\n    fi\n\n    mkdir tmp\n\n    awk -F'\\\\t' '\n      BEGIN { OFS=\"\\\\t\" }\n      \\$3 == \"mRNA\" {\n        print \\$1, \\$4, \\$5, \".\", \".\", \\$7\n      }' genes.gff3 \\\n    | sort \\\n      -k1,1 -k2,2n -k3,3n \\\n      --temporary-directory=tmp \\\n    | bedtools subtract \\\n        -a - \\\n        -b <(awk '\\$3 == \"CDS\"' \"evm.gff3\") \\\n        -s \\\n        -A \\\n    | bedtools merge -s -c 6 -o distinct -i - \\\n    | bedtools slop -g genome.faidx -b 5 -i - \\\n    > clustered.bed\n\n    rm -rf -- tmp\n    \"\"\"\n}",
        "nb_lignes_process": 61,
        "string_script": "    \"\"\"\n    if [ -d genes ]\n    then\n        grep --no-filename -v \"^#\" genes/* > genes.gff3\n    else\n        touch genes.gff3\n    fi\n\n    if [ -d transcripts ]\n    then\n        grep --no-filename -v \"^#\" transcripts/* > transcripts.gff3\n    else\n        touch transcripts.gff3\n    fi\n\n    if [ -d proteins ]\n    then\n        grep --no-filename -v \"^#\" proteins/* > proteins.gff3\n    else\n        touch proteins.gff3\n    fi\n\n    mkdir tmp\n\n    awk -F'\\\\t' '\n      BEGIN { OFS=\"\\\\t\" }\n      \\$3 == \"mRNA\" {\n        print \\$1, \\$4, \\$5, \".\", \".\", \\$7\n      }' genes.gff3 \\\n    | sort \\\n      -k1,1 -k2,2n -k3,3n \\\n      --temporary-directory=tmp \\\n    | bedtools subtract \\\n        -a - \\\n        -b <(awk '\\$3 == \"CDS\"' \"evm.gff3\") \\\n        -s \\\n        -A \\\n    | bedtools merge -s -c 6 -o distinct -i - \\\n    | bedtools slop -g genome.faidx -b 5 -i - \\\n    > clustered.bed\n\n    rm -rf -- tmp\n    \"\"\"",
        "nb_lignes_script": 42,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"bedtools\"",
            "label \"small_task\"",
            "time '3h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "augustus_gap_filler": {
        "name_process": "augustus_gap_filler",
        "string_process": "\nprocess augustus_gap_filler {\n\n    label \"augustus\"\n    label \"big_task\"\n    time '1d'\n\n    tag \"${name}\"\n\n    input:\n    val augustus_species\n    val not_fungus\n    val augustus_utr\n    val valid_splicesites\n    val min_intron_hard\n    tuple val(name),\n        path(fasta),\n        path(\"toredo.bed\"),\n        path(\"*hints\")\n\n    path \"augustus_config\"\n    path \"extrinsic.cfg\"\n\n    output:\n    tuple val(name), path(\"augustus_gaps/*.gff3\")\n\n    script:\n    is_utr = augustus_utr ? \"true\" : \"false\"\n    is_fungus = not_fungus ? \"false\" : \"true\"\n    utr_flag = augustus_utr ? \"-u\" : \"\"\n\n    \"\"\"\n    export AUGUSTUS_CONFIG_PATH=\"\\${PWD}/augustus_config\"\n    perl -n -e'/>(\\\\S+)/ && print \\$1.\"\\\\n\"' < \"${fasta}\" > seqids.txt\n\n    if ${is_utr} && ${is_fungus}\n    then\n      # Gemoma doesn't do fungal utrs well.\n      cat *hints \\\n      | awk -F '\\t' '! ((\\$2 == \"GeMoMa\" || \\$2 == \"ComparativeGeMoMa\") &&\n                        (\\$3 == \"exon\" || \\$3 == \"UTRpart\"))' \\\n      > hints.gff\n    elif ${is_utr} && ! ${is_fungus}\n    then\n      cat *hints > hints.gff\n    else\n      cat *hints \\\n      | awk -F '\\t' '\\$3 != \"exonpart\" && \\$3 != \"exon\" && \\$3 != \"UTRpart\"' \\\n      > hints.gff\n    fi\n\n    getLinesMatching.pl seqids.txt 1 < hints.gff > hints_filtered.gff\n    getLinesMatching.pl seqids.txt 1 < toredo.bed > toredo_filtered.bed\n\n    augustus_region.sh \\\n      -f \"${fasta}\" \\\n      -b \"toredo_filtered.bed\" \\\n      -g \"hints_filtered.gff\" \\\n      -s \"${augustus_species}\" \\\n      -c \"extrinsic.cfg\" \\\n      -a \"\\${PWD}/augustus_config\" \\\n      -p \"${valid_splicesites}\" \\\n      ${utr_flag} \\\n      -n \"${task.cpus}\" \\\n      -m \"${min_intron_hard}\" \\\n      -o \"augustus_gaps_tmp\"\n\n    mkdir augustus_gaps\n    for f in augustus_gaps_tmp/*.gff3\n    do\n        BNAME=\\$(basename \"\\${f}\")\n        awk -F '\\\\t' '\n          BEGIN {OFS=\"\\\\t\"}\n          \\$3 == \"transcript\" {\\$3=\"mRNA\"}\n          \\$0 !~ /^#/ {print}\n        ' \"\\${f}\" \\\n        > \"augustus_gaps/\\${BNAME}\"\n\n        # Remove any empty files.\n        if [ ! -s \"augustus_gaps/\\${BNAME}\" ]\n        then\n            rm \"augustus_gaps/\\${BNAME}\"\n        fi\n    done\n\n    rm -rf -- augustus_gaps_tmp\n    \"\"\"\n}",
        "nb_lignes_process": 86,
        "string_script": "    is_utr = augustus_utr ? \"true\" : \"false\"\n    is_fungus = not_fungus ? \"false\" : \"true\"\n    utr_flag = augustus_utr ? \"-u\" : \"\"\n\n    \"\"\"\n    export AUGUSTUS_CONFIG_PATH=\"\\${PWD}/augustus_config\"\n    perl -n -e'/>(\\\\S+)/ && print \\$1.\"\\\\n\"' < \"${fasta}\" > seqids.txt\n\n    if ${is_utr} && ${is_fungus}\n    then\n      # Gemoma doesn't do fungal utrs well.\n      cat *hints \\\n      | awk -F '\\t' '! ((\\$2 == \"GeMoMa\" || \\$2 == \"ComparativeGeMoMa\") &&\n                        (\\$3 == \"exon\" || \\$3 == \"UTRpart\"))' \\\n      > hints.gff\n    elif ${is_utr} && ! ${is_fungus}\n    then\n      cat *hints > hints.gff\n    else\n      cat *hints \\\n      | awk -F '\\t' '\\$3 != \"exonpart\" && \\$3 != \"exon\" && \\$3 != \"UTRpart\"' \\\n      > hints.gff\n    fi\n\n    getLinesMatching.pl seqids.txt 1 < hints.gff > hints_filtered.gff\n    getLinesMatching.pl seqids.txt 1 < toredo.bed > toredo_filtered.bed\n\n    augustus_region.sh \\\n      -f \"${fasta}\" \\\n      -b \"toredo_filtered.bed\" \\\n      -g \"hints_filtered.gff\" \\\n      -s \"${augustus_species}\" \\\n      -c \"extrinsic.cfg\" \\\n      -a \"\\${PWD}/augustus_config\" \\\n      -p \"${valid_splicesites}\" \\\n      ${utr_flag} \\\n      -n \"${task.cpus}\" \\\n      -m \"${min_intron_hard}\" \\\n      -o \"augustus_gaps_tmp\"\n\n    mkdir augustus_gaps\n    for f in augustus_gaps_tmp/*.gff3\n    do\n        BNAME=\\$(basename \"\\${f}\")\n        awk -F '\\\\t' '\n          BEGIN {OFS=\"\\\\t\"}\n          \\$3 == \"transcript\" {\\$3=\"mRNA\"}\n          \\$0 !~ /^#/ {print}\n        ' \"\\${f}\" \\\n        > \"augustus_gaps/\\${BNAME}\"\n\n        # Remove any empty files.\n        if [ ! -s \"augustus_gaps/\\${BNAME}\" ]\n        then\n            rm \"augustus_gaps/\\${BNAME}\"\n        fi\n    done\n\n    rm -rf -- augustus_gaps_tmp\n    \"\"\"",
        "nb_lignes_script": 59,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "augustus_species",
            "not_fungus",
            "augustus_utr",
            "valid_splicesites",
            "min_intron_hard",
            "name",
            "fasta"
        ],
        "nb_inputs": 7,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"augustus\"",
            "label \"big_task\"",
            "time '1d'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_augustus_hints": {
        "name_process": "extract_augustus_hints",
        "string_process": "\nprocess extract_augustus_hints {\n\n    label \"gffpal\"\n    label \"small_task\"\n    time '2h'\n\n    tag \"${name}\"\n\n    input:\n    val analysis\n    val source\n    val hint_source                   \n    val priority\n    val exon_trim\n    val cds_trim\n    val utr_trim\n    val gene_trim\n    val is_final\n    tuple val(name), path(\"in.gff3\")\n\n    output:\n    tuple val(name),\n        val(analysis),\n        path(\"${name}_${analysis}_hints.gff3\")\n\n    script:\n\n    def use_part = is_final ? \"\": \"part\"\n    \"\"\"\n    gffpal hints \\\n        --source \"${hint_source}\" \\\n        --group-level mRNA \\\n        --priority \"${priority}\" \\\n        --exon \"exon${use_part}\" \\\n        --cds \"CDS${use_part}\" \\\n        --utr \"UTR${use_part}\" \\\n        --utr3 \"UTR${use_part}\" \\\n        --utr5 \"UTR${use_part}\" \\\n        --intron \"intron\" \\\n        --exon-trim \"${exon_trim}\" \\\n        --cds-trim \"${cds_trim}\" \\\n        --utr-trim \"${utr_trim}\" \\\n        --gene-trim \"${gene_trim}\" \\\n        --intron-trim 0 \\\n        in.gff3 \\\n    | awk '\n        BEGIN {OFS=\"\\\\t\"}\n        {\n          sub(/group=/, \"group=${name}_${analysis}_\", \\$9);\n          \\$2 = \"${source}\";\n          print\n        }\n      ' \\\n    > \"${name}_${analysis}_hints.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 55,
        "string_script": "    def use_part = is_final ? \"\": \"part\"\n    \"\"\"\n    gffpal hints \\\n        --source \"${hint_source}\" \\\n        --group-level mRNA \\\n        --priority \"${priority}\" \\\n        --exon \"exon${use_part}\" \\\n        --cds \"CDS${use_part}\" \\\n        --utr \"UTR${use_part}\" \\\n        --utr3 \"UTR${use_part}\" \\\n        --utr5 \"UTR${use_part}\" \\\n        --intron \"intron\" \\\n        --exon-trim \"${exon_trim}\" \\\n        --cds-trim \"${cds_trim}\" \\\n        --utr-trim \"${utr_trim}\" \\\n        --gene-trim \"${gene_trim}\" \\\n        --intron-trim 0 \\\n        in.gff3 \\\n    | awk '\n        BEGIN {OFS=\"\\\\t\"}\n        {\n          sub(/group=/, \"group=${name}_${analysis}_\", \\$9);\n          \\$2 = \"${source}\";\n          print\n        }\n      ' \\\n    > \"${name}_${analysis}_hints.gff3\"\n    \"\"\"",
        "nb_lignes_script": 27,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "analysis",
            "source",
            "hint_source",
            "priority",
            "exon_trim",
            "cds_trim",
            "utr_trim",
            "gene_trim",
            "is_final",
            "name"
        ],
        "nb_inputs": 10,
        "outputs": [
            "analysis"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gffpal\"",
            "label \"small_task\"",
            "time '2h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_augustus_split_hints": {
        "name_process": "extract_augustus_split_hints",
        "string_process": "\nprocess extract_augustus_split_hints {\n\n    label \"gffpal\"\n    label \"small_task\"\n    time '2h'\n\n    tag \"${name}\"\n\n    input:\n    val analysis\n    val exon_source\n    val cds_source\n    val exon_hint_source              \n    val cds_hint_source              \n    val exon_priority\n    val cds_priority\n    val exon_trim\n    val cds_trim\n    val utr_trim\n    val gene_trim\n    val is_final\n    tuple val(name), path(\"in.gff3\")\n\n    output:\n    tuple val(name),\n        val(analysis),\n        path(\"${name}_${analysis}_hints.gff3\")\n\n    script:\n\n    def use_part = is_final ? \"\": \"part\"\n    \"\"\"\n    awk -F '\\t' '\\$3 == \"exon\" || \\$3 == \"intron\" || \\$3 == \"mRNA\"' in.gff3 \\\n    | gffpal hints \\\n        --source \"${exon_hint_source}\" \\\n        --group-level mRNA \\\n        --priority \"${exon_priority}\" \\\n        --exon \"exon${use_part}\" \\\n        --intron \"intron\" \\\n        --exon-trim \"${exon_trim}\" \\\n        --gene-trim \"${gene_trim}\" \\\n        --intron-trim 0 \\\n        - \\\n    | awk '\n        BEGIN {OFS=\"\\\\t\"}\n        {\n          sub(/group=/, \"group=${name}_${exon_source}_\", \\$9);\n          \\$2 = \"${exon_source}\";\n          print\n        }\n      ' \\\n    > exon_hints.gff3\n\n    awk -F '\\t' '\\$3 != \"exon\" && \\$3 != \"intron\"' in.gff3 \\\n    | gffpal hints \\\n        --source \"${cds_hint_source}\" \\\n        --group-level mRNA \\\n        --priority \"${cds_priority}\" \\\n        --cds \"CDS${use_part}\" \\\n        --utr \"UTR${use_part}\" \\\n        --utr3 \"UTR${use_part}\" \\\n        --utr5 \"UTR${use_part}\" \\\n        --cds-trim \"${cds_trim}\" \\\n        --utr-trim \"${utr_trim}\" \\\n        - \\\n    | awk -F '\\t' '\n        BEGIN {OFS=\"\\\\t\"}\n        \\$3 != \"genicpart\" {\n          sub(/group=/, \"group=${name}_${cds_source}_\", \\$9);\n          \\$2 = \"${cds_source}\";\n          print\n        }\n      ' \\\n    > \"cds_hints.gff3\"\n\n    cat exon_hints.gff3 cds_hints.gff3 > \"${name}_${analysis}_hints.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 77,
        "string_script": "    def use_part = is_final ? \"\": \"part\"\n    \"\"\"\n    awk -F '\\t' '\\$3 == \"exon\" || \\$3 == \"intron\" || \\$3 == \"mRNA\"' in.gff3 \\\n    | gffpal hints \\\n        --source \"${exon_hint_source}\" \\\n        --group-level mRNA \\\n        --priority \"${exon_priority}\" \\\n        --exon \"exon${use_part}\" \\\n        --intron \"intron\" \\\n        --exon-trim \"${exon_trim}\" \\\n        --gene-trim \"${gene_trim}\" \\\n        --intron-trim 0 \\\n        - \\\n    | awk '\n        BEGIN {OFS=\"\\\\t\"}\n        {\n          sub(/group=/, \"group=${name}_${exon_source}_\", \\$9);\n          \\$2 = \"${exon_source}\";\n          print\n        }\n      ' \\\n    > exon_hints.gff3\n\n    awk -F '\\t' '\\$3 != \"exon\" && \\$3 != \"intron\"' in.gff3 \\\n    | gffpal hints \\\n        --source \"${cds_hint_source}\" \\\n        --group-level mRNA \\\n        --priority \"${cds_priority}\" \\\n        --cds \"CDS${use_part}\" \\\n        --utr \"UTR${use_part}\" \\\n        --utr3 \"UTR${use_part}\" \\\n        --utr5 \"UTR${use_part}\" \\\n        --cds-trim \"${cds_trim}\" \\\n        --utr-trim \"${utr_trim}\" \\\n        - \\\n    | awk -F '\\t' '\n        BEGIN {OFS=\"\\\\t\"}\n        \\$3 != \"genicpart\" {\n          sub(/group=/, \"group=${name}_${cds_source}_\", \\$9);\n          \\$2 = \"${cds_source}\";\n          print\n        }\n      ' \\\n    > \"cds_hints.gff3\"\n\n    cat exon_hints.gff3 cds_hints.gff3 > \"${name}_${analysis}_hints.gff3\"\n    \"\"\"",
        "nb_lignes_script": 46,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "analysis",
            "exon_source",
            "cds_source",
            "exon_hint_source",
            "cds_hint_source",
            "exon_priority",
            "cds_priority",
            "exon_trim",
            "cds_trim",
            "utr_trim",
            "gene_trim",
            "is_final",
            "name"
        ],
        "nb_inputs": 13,
        "outputs": [
            "analysis"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gffpal\"",
            "label \"small_task\"",
            "time '2h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_exonerate_hints": {
        "name_process": "extract_exonerate_hints",
        "string_process": "\nprocess extract_exonerate_hints {\n\n    label \"braker\"\n    label \"small_task\"\n    time '2h'\n\n    tag \"${genome_name} - ${protein_name}\"\n\n    input:\n    val min_intron_hard\n    val max_intron_hard\n    tuple val(genome_name),\n          val(protein_name),\n          path(\"exonerate.gff\")\n\n    output:\n    tuple val(genome_name),\n          val(protein_name),\n          path(\"${genome_name}_${protein_name}_exonerate_hints.gff3\")\n\n    script:\n    \"\"\"\n    align2hints.pl \\\n      --in=exonerate.gff \\\n      --out=hints.gff3 \\\n      --prg=exonerate \\\n      --CDSpart_cutoff=15 \\\n      --minintronlen=\"${min_intron_hard}\" \\\n      --maxintronlen=\"${max_intron_hard}\" \\\n      --priority=2 \\\n      --source=T\n\n    awk -F '\\\\t' '\n      BEGIN {OFS=\"\\\\t\"}\n      \\$3 == \"CDSpart\" {\n        sub(/grp=/, \"grp=${genome_name}_${protein_name}_exonerate_\", \\$9)\n        \\$2 = \"exonerate\";\n        print\n      }\n      ' \\\n      hints.gff3 \\\n    > \"${genome_name}_${protein_name}_exonerate_hints.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 43,
        "string_script": "    \"\"\"\n    align2hints.pl \\\n      --in=exonerate.gff \\\n      --out=hints.gff3 \\\n      --prg=exonerate \\\n      --CDSpart_cutoff=15 \\\n      --minintronlen=\"${min_intron_hard}\" \\\n      --maxintronlen=\"${max_intron_hard}\" \\\n      --priority=2 \\\n      --source=T\n\n    awk -F '\\\\t' '\n      BEGIN {OFS=\"\\\\t\"}\n      \\$3 == \"CDSpart\" {\n        sub(/grp=/, \"grp=${genome_name}_${protein_name}_exonerate_\", \\$9)\n        \\$2 = \"exonerate\";\n        print\n      }\n      ' \\\n      hints.gff3 \\\n    > \"${genome_name}_${protein_name}_exonerate_hints.gff3\"\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "min_intron_hard",
            "max_intron_hard",
            "genome_name",
            "protein_name"
        ],
        "nb_inputs": 4,
        "outputs": [
            "protein_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"braker\"",
            "label \"small_task\"",
            "time '2h'",
            "tag \"${genome_name} - ${protein_name}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_exonerate_evm_hints": {
        "name_process": "extract_exonerate_evm_hints",
        "string_process": "\nprocess extract_exonerate_evm_hints {\n\n    label \"braker\"\n    label \"small_task\"\n    time '2h'\n\n    tag \"${genome_name} - ${protein_name}\"\n\n    input:\n    val min_intron_hard\n    val max_intron_hard\n    set val(genome_name),\n        val(protein_name),\n        file(\"exonerate.gff\")\n\n    output:\n    set val(genome_name),\n        val(protein_name),\n        file(\"${genome_name}_${protein_name}_exonerate_evm_hints.gff3\")\n\n    script:\n    \"\"\"\n    align2hints.pl \\\n      --in=exonerate.gff \\\n      --out=evm.gff3 \\\n      --prg=exonerate \\\n      --CDSpart_cutoff=0 \\\n      --minintronlen=\"${min_intron_hard}\" \\\n      --maxintronlen=\"${max_intron_hard}\" \\\n      --priority=2 \\\n      --source=T\n\n    awk -F '\\\\t' '\n      BEGIN {OFS=\"\\\\t\"}\n      \\$3 == \"CDSpart\" {\n        id=gensub(/.*grp=([^;]+).*/, \"\\\\\\\\1\", \"g\", \\$9);\n        \\$9=\"ID=${genome_name}_${protein_name}_exonerate_\"id;\n        \\$2 = \"exonerate\";\n        \\$3 = \"nucleotide_to_protein_match\";\n        print\n      }\n      ' \\\n      evm.gff3 \\\n    > \"${genome_name}_${protein_name}_exonerate_evm_hints.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    \"\"\"\n    align2hints.pl \\\n      --in=exonerate.gff \\\n      --out=evm.gff3 \\\n      --prg=exonerate \\\n      --CDSpart_cutoff=0 \\\n      --minintronlen=\"${min_intron_hard}\" \\\n      --maxintronlen=\"${max_intron_hard}\" \\\n      --priority=2 \\\n      --source=T\n\n    awk -F '\\\\t' '\n      BEGIN {OFS=\"\\\\t\"}\n      \\$3 == \"CDSpart\" {\n        id=gensub(/.*grp=([^;]+).*/, \"\\\\\\\\1\", \"g\", \\$9);\n        \\$9=\"ID=${genome_name}_${protein_name}_exonerate_\"id;\n        \\$2 = \"exonerate\";\n        \\$3 = \"nucleotide_to_protein_match\";\n        print\n      }\n      ' \\\n      evm.gff3 \\\n    > \"${genome_name}_${protein_name}_exonerate_evm_hints.gff3\"\n    \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "min_intron_hard",
            "max_intron_hard",
            "genome_name",
            "protein_name"
        ],
        "nb_inputs": 4,
        "outputs": [
            "protein_name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"braker\"",
            "label \"small_task\"",
            "time '2h'",
            "tag \"${genome_name} - ${protein_name}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_augustus_rnaseq_hints": {
        "name_process": "extract_augustus_rnaseq_hints",
        "string_process": "\nprocess extract_augustus_rnaseq_hints {\n\n    label \"braker\"\n    label \"medium_task\"\n    time '4h'\n\n    tag \"${name} - ${read_group}\"\n\n    input:\n    val min_intron_hard\n    val max_intron_hard\n    val valid_splicesites\n    tuple val(name),\n        val(read_group),\n        path(fasta),\n        path(cram)\n\n    output:\n    tuple val(name),\n        val(read_group),\n        path(\"${name}_${read_group}_intron_hints.gff3\")\n\n    script:\n    max_gap_len = min_intron_hard - 1\n\n    \"\"\"\n    # Convert cram to bam.\n    # `-F 3328`  excludes these flags\n    # not primary alignment (0x100)\n    # read is PCR or optical duplicate (0x400)\n    # supplementary alignment (0x800)\n    samtools view \\\n        -b \\\n        -T \"${fasta}\" \\\n        -F 3328 \\\n        -q 25 \\\n        -@ \"${task.cpus}\" \\\n        -o \"tmp.bam\" \\\n        \"${cram}\"\n\n    # Extract introns\n    bam2hints \\\n      --intronsonly \\\n      --maxgaplen=\"${max_gap_len}\" \\\n      --minintronlen=\"${min_intron_hard}\" \\\n      --maxintronlen=\"${max_intron_hard}\" \\\n      --maxcoverage=1000 \\\n      --priority=4 \\\n      --ssOn \\\n      --source=\"I\" \\\n      --in=\"tmp.bam\" \\\n      --out=\"tmp.gff3\"\n\n    filterIntronsFindStrand.pl \\\n        \"${fasta}\" \\\n        tmp.gff3 \\\n        --allowed=\"${valid_splicesites}\" \\\n        --score \\\n    > \"${name}_${read_group}_intron_hints.gff3\"\n\n    rm -f tmp.gff3\n    \"\"\"\n}",
        "nb_lignes_process": 62,
        "string_script": "    max_gap_len = min_intron_hard - 1\n\n    \"\"\"\n    # Convert cram to bam.\n    # `-F 3328`  excludes these flags\n    # not primary alignment (0x100)\n    # read is PCR or optical duplicate (0x400)\n    # supplementary alignment (0x800)\n    samtools view \\\n        -b \\\n        -T \"${fasta}\" \\\n        -F 3328 \\\n        -q 25 \\\n        -@ \"${task.cpus}\" \\\n        -o \"tmp.bam\" \\\n        \"${cram}\"\n\n    # Extract introns\n    bam2hints \\\n      --intronsonly \\\n      --maxgaplen=\"${max_gap_len}\" \\\n      --minintronlen=\"${min_intron_hard}\" \\\n      --maxintronlen=\"${max_intron_hard}\" \\\n      --maxcoverage=1000 \\\n      --priority=4 \\\n      --ssOn \\\n      --source=\"I\" \\\n      --in=\"tmp.bam\" \\\n      --out=\"tmp.gff3\"\n\n    filterIntronsFindStrand.pl \\\n        \"${fasta}\" \\\n        tmp.gff3 \\\n        --allowed=\"${valid_splicesites}\" \\\n        --score \\\n    > \"${name}_${read_group}_intron_hints.gff3\"\n\n    rm -f tmp.gff3\n    \"\"\"",
        "nb_lignes_script": 38,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "min_intron_hard",
            "max_intron_hard",
            "valid_splicesites",
            "name",
            "read_group",
            "fasta",
            "cram"
        ],
        "nb_inputs": 7,
        "outputs": [
            "read_group"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"braker\"",
            "label \"medium_task\"",
            "time '4h'",
            "tag \"${name} - ${read_group}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_gemoma_rnaseq_hints": {
        "name_process": "extract_gemoma_rnaseq_hints",
        "string_process": "\nprocess extract_gemoma_rnaseq_hints {\n\n    label \"gemoma\"\n    label \"medium_task\"\n    time '2h'\n\n    tag \"${name} - ${read_group}\"\n\n    input:\n    tuple val(name),\n        val(read_group),\n        path(fasta),\n        path(cram),\n        val(strand)\n\n    output:\n    tuple val(name),\n        val(read_group),\n        path(\"${name}_${read_group}_gemoma_introns.gff\"),\n        path(\"${name}_${read_group}_gemoma_forward.bedgraph\"),\n        path(\"${name}_${read_group}_gemoma_reverse.bedgraph\")\n\n    script:\n                                      \n    def strand_flag = strand == \"fr\" ? \"s=FR_SECOND_STRAND \" : \"s=FR_FIRST_STRAND \"\n\n    \"\"\"\n    # Convert cram to bam.\n    # `-F 3328`  excludes these flags\n    # not primary alignment (0x100)\n    # read is PCR or optical duplicate (0x400)\n    # supplementary alignment (0x800)\n    samtools view \\\n        -b \\\n        -T \"${fasta}\" \\\n        -F 3328 \\\n        -q 25 \\\n        -@ \"${task.cpus}\" \\\n        -o \"tmp.bam\" \\\n        \"${cram}\"\n\n    java -jar \\${GEMOMA_JAR} CLI ERE ${strand_flag} m=tmp.bam c=true\n\n    # m - mapped reads file (BAM/SAM files containing the mapped reads)\t= null\n    # u - use secondary alignments (allows to filter flags in the SAM or BAM, default = true)\t= true\n\n    mv introns.gff \"${name}_${read_group}_gemoma_introns.gff\"\n    mv coverage_forward.bedgraph \"${name}_${read_group}_gemoma_forward.bedgraph\"\n    mv coverage_reverse.bedgraph \"${name}_${read_group}_gemoma_reverse.bedgraph\"\n\n    rm -f *.bam protocol_ERE.txt\n    rm -rf -- GeMoMa_temp\n    \"\"\"\n}",
        "nb_lignes_process": 53,
        "string_script": "    def strand_flag = strand == \"fr\" ? \"s=FR_SECOND_STRAND \" : \"s=FR_FIRST_STRAND \"\n\n    \"\"\"\n    # Convert cram to bam.\n    # `-F 3328`  excludes these flags\n    # not primary alignment (0x100)\n    # read is PCR or optical duplicate (0x400)\n    # supplementary alignment (0x800)\n    samtools view \\\n        -b \\\n        -T \"${fasta}\" \\\n        -F 3328 \\\n        -q 25 \\\n        -@ \"${task.cpus}\" \\\n        -o \"tmp.bam\" \\\n        \"${cram}\"\n\n    java -jar \\${GEMOMA_JAR} CLI ERE ${strand_flag} m=tmp.bam c=true\n\n    # m - mapped reads file (BAM/SAM files containing the mapped reads)\t= null\n    # u - use secondary alignments (allows to filter flags in the SAM or BAM, default = true)\t= true\n\n    mv introns.gff \"${name}_${read_group}_gemoma_introns.gff\"\n    mv coverage_forward.bedgraph \"${name}_${read_group}_gemoma_forward.bedgraph\"\n    mv coverage_reverse.bedgraph \"${name}_${read_group}_gemoma_reverse.bedgraph\"\n\n    rm -f *.bam protocol_ERE.txt\n    rm -rf -- GeMoMa_temp\n    \"\"\"",
        "nb_lignes_script": 28,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name",
            "read_group",
            "strand",
            "fasta",
            "cram"
        ],
        "nb_inputs": 5,
        "outputs": [
            "read_group"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gemoma\"",
            "label \"medium_task\"",
            "time '2h'",
            "tag \"${name} - ${read_group}\""
        ],
        "when": "",
        "stub": ""
    },
    "combine_gemoma_rnaseq_hints": {
        "name_process": "combine_gemoma_rnaseq_hints",
        "string_process": "\nprocess combine_gemoma_rnaseq_hints {\n\n    label \"gemoma\"\n    label \"small_task\"\n    time '2h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n        tuple(\"*i.gff\"),\n        tuple(\"*f.bedgraph\"),\n        tuple(\"*r.bedgraph\")\n\n    output:\n    tuple val(name),\n        path(\"${name}_gemoma_introns.gff\"),\n        path(\"${name}_gemoma_forward.bedgraph\"),\n        path(\"${name}_gemoma_reverse.bedgraph\")\n\n    script:\n    \"\"\"\n    java -cp \\${GEMOMA_JAR} \\\n      projects.gemoma.CombineIntronFiles \\\n      ${name}_gemoma_introns.gff \\\n      *i.gff\n\n    java -cp \\${GEMOMA_JAR} \\\n      projects.gemoma.CombineCoverageFiles \\\n      \"${name}_gemoma_forward.bedgraph\" \\\n      *f.bedgraph\n\n    java -cp \\${GEMOMA_JAR} \\\n      projects.gemoma.CombineCoverageFiles \\\n      \"${name}_gemoma_reverse.bedgraph\" \\\n      *r.bedgraph\n    \"\"\"\n}",
        "nb_lignes_process": 37,
        "string_script": "    \"\"\"\n    java -cp \\${GEMOMA_JAR} \\\n      projects.gemoma.CombineIntronFiles \\\n      ${name}_gemoma_introns.gff \\\n      *i.gff\n\n    java -cp \\${GEMOMA_JAR} \\\n      projects.gemoma.CombineCoverageFiles \\\n      \"${name}_gemoma_forward.bedgraph\" \\\n      *f.bedgraph\n\n    java -cp \\${GEMOMA_JAR} \\\n      projects.gemoma.CombineCoverageFiles \\\n      \"${name}_gemoma_reverse.bedgraph\" \\\n      *r.bedgraph\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gemoma\"",
            "label \"small_task\"",
            "time '2h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_gmap_evm_hints": {
        "name_process": "extract_gmap_evm_hints",
        "string_process": "\nprocess extract_gmap_evm_hints {\n\n    label \"posix\"\n    label \"small_task\"\n    time \"1h\"\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n          path(\"in.gff3\")\n\n    output:\n    tuple val(name),\n          path(\"${name}_gmap_evm_hints.gff3\")\n\n    script:\n    \"\"\"\n    awk -F'\\t' '\n      BEGIN { OFS=\"\\t\" }\n      \\$3 == \"cDNA_match\" {\n        \\$2=\"gmap\";\n        print\n      }\n    ' in.gff3 \\\n    >> \"${name}_gmap_evm_hints.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    awk -F'\\t' '\n      BEGIN { OFS=\"\\t\" }\n      \\$3 == \"cDNA_match\" {\n        \\$2=\"gmap\";\n        print\n      }\n    ' in.gff3 \\\n    >> \"${name}_gmap_evm_hints.gff3\"\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"posix\"",
            "label \"small_task\"",
            "time \"1h\"",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_spaln_transcript_evm_hints": {
        "name_process": "extract_spaln_transcript_evm_hints",
        "string_process": "\nprocess extract_spaln_transcript_evm_hints {\n\n    label \"posix\"\n    label \"small_task\"\n    time \"1h\"\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n          path(\"in.gff3\")\n\n    output:\n    tuple val(name),\n          path(\"${name}_spaln_transcript_evm_hints.gff3\")\n\n    script:\n    \"\"\"\n    awk -F'\\t' '\n      BEGIN { OFS=\"\\t\" }\n      \\$3 == \"exon\" {\n        parent=gensub(/.*Parent=([^;]+).*/, \"\\\\\\\\1\", \"g\", \\$9);\n        target=gensub(/.*Target=([^;]+).*/, \"\\\\\\\\1\", \"g\", \\$9);\n        \\$9=\"ID=${name}_spaln_transcript\" parent \";Target=\" target;\n        \\$2=\"spaln_transcript\";\n        \\$3=\"cDNA_match\";\n        print\n      }\n    ' in.gff3 \\\n    >> \"${name}_spaln_transcript_evm_hints.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    awk -F'\\t' '\n      BEGIN { OFS=\"\\t\" }\n      \\$3 == \"exon\" {\n        parent=gensub(/.*Parent=([^;]+).*/, \"\\\\\\\\1\", \"g\", \\$9);\n        target=gensub(/.*Target=([^;]+).*/, \"\\\\\\\\1\", \"g\", \\$9);\n        \\$9=\"ID=${name}_spaln_transcript\" parent \";Target=\" target;\n        \\$2=\"spaln_transcript\";\n        \\$3=\"cDNA_match\";\n        print\n      }\n    ' in.gff3 \\\n    >> \"${name}_spaln_transcript_evm_hints.gff3\"\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"posix\"",
            "label \"small_task\"",
            "time \"1h\"",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_spaln_protein_evm_hints": {
        "name_process": "extract_spaln_protein_evm_hints",
        "string_process": "\nprocess extract_spaln_protein_evm_hints {\n\n    label \"posix\"\n    label \"small_task\"\n    time \"1h\"\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n          path(\"in.gff3\")\n\n    output:\n    tuple val(name),\n          path(\"${name}_spaln_protein_evm_hints.gff3\")\n\n    script:\n    \"\"\"\n    awk -F'\\t' '\n      BEGIN { OFS=\"\\t\" }\n      \\$3 == \"CDS\" || \\$3 == \"cds\" {\n        parent=gensub(/.*Parent=([^;]+).*/, \"\\\\\\\\1\", \"g\", \\$9);\n        target=gensub(/.*Target=([^;]+).*/, \"\\\\\\\\1\", \"g\", \\$9);\n        \\$9=\"ID=${name}_spaln_protein\" parent \";Target=\" target;\n        \\$2=\"spaln_protein\";\n        \\$3=\"nucleotide_to_protein_match\";\n        print\n      }\n    ' in.gff3 \\\n    >> \"${name}_spaln_protein_evm_hints.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    awk -F'\\t' '\n      BEGIN { OFS=\"\\t\" }\n      \\$3 == \"CDS\" || \\$3 == \"cds\" {\n        parent=gensub(/.*Parent=([^;]+).*/, \"\\\\\\\\1\", \"g\", \\$9);\n        target=gensub(/.*Target=([^;]+).*/, \"\\\\\\\\1\", \"g\", \\$9);\n        \\$9=\"ID=${name}_spaln_protein\" parent \";Target=\" target;\n        \\$2=\"spaln_protein\";\n        \\$3=\"nucleotide_to_protein_match\";\n        print\n      }\n    ' in.gff3 \\\n    >> \"${name}_spaln_protein_evm_hints.gff3\"\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"posix\"",
            "label \"small_task\"",
            "time \"1h\"",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "download_database": {
        "name_process": "download_database",
        "string_process": "\nprocess download_database {\n\n    label \"download\"\n    label \"small_task\"\n\n    time '3h'\n\n    input:\n    val url\n\n    output:\n    path \"download\"\n\n    script:\n    \"\"\"\n    wget -O ./download \"${url}\"\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    wget -O ./download \"${url}\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "url"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"download\"",
            "label \"small_task\"",
            "time '3h'"
        ],
        "when": "",
        "stub": ""
    },
    "get_univec": {
        "name_process": "get_univec",
        "string_process": "\nprocess get_univec {\n\n    label \"download\"\n    label \"small_task\"\n\n    time '3h'\n\n    output:\n    path \"univec.fasta\"\n\n    script:\n    \"\"\"\n    wget -O univec.fasta ftp://ftp.ncbi.nlm.nih.gov/pub/UniVec/UniVec_Core\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    wget -O univec.fasta ftp://ftp.ncbi.nlm.nih.gov/pub/UniVec/UniVec_Core\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"download\"",
            "label \"small_task\"",
            "time '3h'"
        ],
        "when": "",
        "stub": ""
    },
    "get_augustus_config": {
        "name_process": "get_augustus_config",
        "string_process": "\nprocess get_augustus_config {\n\n    label \"augustus\"\n    label \"small_task\"\n\n    time '1h'\n\n    output:\n    path \"config\"\n\n    script:\n    \"\"\"\n    cp -r \\${AUGUSTUS_CONFIG_PATH} ./config\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    cp -r \\${AUGUSTUS_CONFIG_PATH} ./config\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"augustus\"",
            "label \"small_task\"",
            "time '1h'"
        ],
        "when": "",
        "stub": ""
    },
    "clean_transcripts": {
        "name_process": "clean_transcripts",
        "string_process": "\nprocess clean_transcripts {\n\n    label \"pasa\"\n    label \"small_task\"\n    time '2h'\n\n    input:\n    path \"transcripts.fasta\"\n    path \"univec.fasta\"\n\n    output:\n    tuple path(\"transcripts.fasta\"),\n          path(\"transcripts.fasta.cln\"),\n          path(\"transcripts.fasta.clean\")\n\n    script:\n    \"\"\"\n    # this user thing is needed for seqclean. Unknown reasons\n    export USER=\"root\"\n    seqclean \"transcripts.fasta\" -v \"univec.fasta\"\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    # this user thing is needed for seqclean. Unknown reasons\n    export USER=\"root\"\n    seqclean \"transcripts.fasta\" -v \"univec.fasta\"\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"pasa\"",
            "label \"small_task\"",
            "time '2h'"
        ],
        "when": "",
        "stub": ""
    },
    "tidy_genome": {
        "name_process": "tidy_genome",
        "string_process": "\nprocess tidy_genome {\n\n    label \"posix\"\n    label \"small_task\"\n\n    time '1h'\n\n    tag \"${name}\"\n\n    input:\n    val min_contig_length\n    tuple val(name), path(\"in.fa\")\n\n    output:\n    tuple val(name), path(\"${name}.fasta\")\n\n    script:\n    \"\"\"\n    # braker panics if the genome has descriptions\n    sed -r 's/^(>[^[:space:]]*).*\\$/\\\\1/' in.fa \\\n    | fasta_to_tsv.sh \\\n    | awk 'length(\\$2) >= ${min_contig_length}' \\\n    | tsv_to_fasta.sh \\\n    > \"${name}.fasta\"\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    # braker panics if the genome has descriptions\n    sed -r 's/^(>[^[:space:]]*).*\\$/\\\\1/' in.fa \\\n    | fasta_to_tsv.sh \\\n    | awk 'length(\\$2) >= ${min_contig_length}' \\\n    | tsv_to_fasta.sh \\\n    > \"${name}.fasta\"\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "min_contig_length",
            "name"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"posix\"",
            "label \"small_task\"",
            "time '1h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_faidx": {
        "name_process": "get_faidx",
        "string_process": "\nprocess get_faidx {\n\n    label \"samtools\"\n    label \"small_task\"\n\n    time '1h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name), path(\"orig.fa\")\n\n    output:\n    tuple val(name), path(\"${name}.fasta.fai\")\n\n    script:\n    \"\"\"\n    samtools faidx \"orig.fa\"\n\n    mv orig.fa.fai \"${name}.fasta.fai\"\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    samtools faidx \"orig.fa\"\n\n    mv orig.fa.fai \"${name}.fasta.fai\"\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"samtools\"",
            "label \"small_task\"",
            "time '1h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "fasta_to_tsv": {
        "name_process": "fasta_to_tsv",
        "string_process": "\nprocess fasta_to_tsv {\n\n    label \"posix\"\n    label \"small_task\"\n    time \"1h\"\n\n    input:\n    tuple val(name), path(\"seqs.fasta\")\n\n    output:\n    tuple val(name), path(\"${name}.tsv\")\n\n    script:\n    \"\"\"\n    awk '\n      /^>/ {\n        b=gensub(/^>\\\\s*(\\\\S+).*\\$/, \"\\\\\\\\1\", \"g\", \\$0);\n        printf(\"%s%s\\\\t\", (N>0?\"\\\\n\":\"\"), b);\n        N++;\n        next;\n      }\n      {\n        printf(\"%s\", \\$0)\n      }\n      END {\n        printf(\"\\\\n\");\n      }\n    ' < seqs.fasta \\\n    > \"${name}.tsv\"\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    \"\"\"\n    awk '\n      /^>/ {\n        b=gensub(/^>\\\\s*(\\\\S+).*\\$/, \"\\\\\\\\1\", \"g\", \\$0);\n        printf(\"%s%s\\\\t\", (N>0?\"\\\\n\":\"\"), b);\n        N++;\n        next;\n      }\n      {\n        printf(\"%s\", \\$0)\n      }\n      END {\n        printf(\"\\\\n\");\n      }\n    ' < seqs.fasta \\\n    > \"${name}.tsv\"\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "NextSV",
            "ENdb"
        ],
        "tools_url": [
            "https://bio.tools/nextsv",
            "https://bio.tools/ENdb"
        ],
        "tools_dico": [
            {
                "name": "NextSV",
                "uri": "https://bio.tools/nextsv",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A meta SV caller and a computational pipeline to perform SV calling from low coverage long-read sequencing data. It integrates three aligners and three SV callers and generates two integrated call sets (sensitive/stringent) for different analysis purpose.",
                "homepage": "http://github.com/Nextomics/NextSV"
            },
            {
                "name": "ENdb",
                "uri": "https://bio.tools/ENdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0440",
                                    "term": "Promoter prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A manually curated database of experimentally supported enhancers for human and mouse. Enhancers are a class of cis-regulatory elements that can increase gene transcription by forming loops in intergenic regions, introns and exons",
                "homepage": "http://www.licpathway.net/ENdb"
            }
        ],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"posix\"",
            "label \"small_task\"",
            "time \"1h\""
        ],
        "when": "",
        "stub": ""
    },
    "tidy_gff3": {
        "name_process": "tidy_gff3",
        "string_process": "\nprocess tidy_gff3 {\n\n    label \"aegean\"\n    label \"small_task\"\n    time '1h'\n\n    tag \"${name}\"\n\n    input:\n    val analysis\n    val source\n    tuple val(name), path(\"in.gff3\")\n\n    output:\n    tuple val(name), path(\"${name}_${analysis}_tidied.gff3\")\n\n    script:\n    setsource = (source == null || source == \"\") ? \"\" : \"-setsource ${source} \"\n\n    \"\"\"\n    grep -v \"^#\" in.gff3 \\\n    | awk '\\$3 != \"intron\"' \\\n    | gt gff3 \\\n      -tidy \\\n      -sort \\\n      -retainids \\\n      -addintrons \\\n      ${setsource} \\\n    | canon-gff3 -i - \\\n    > \"${name}_${analysis}_tidied.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    setsource = (source == null || source == \"\") ? \"\" : \"-setsource ${source} \"\n\n    \"\"\"\n    grep -v \"^#\" in.gff3 \\\n    | awk '\\$3 != \"intron\"' \\\n    | gt gff3 \\\n      -tidy \\\n      -sort \\\n      -retainids \\\n      -addintrons \\\n      ${setsource} \\\n    | canon-gff3 -i - \\\n    > \"${name}_${analysis}_tidied.gff3\"\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [
            "PGT"
        ],
        "tools_url": [
            "https://bio.tools/pgt"
        ],
        "tools_dico": [
            {
                "name": "PGT",
                "uri": "https://bio.tools/pgt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software to find motifs using random projections.",
                "homepage": "http://www1.cse.wustl.edu/~jbuhler/pgt/"
            }
        ],
        "inputs": [
            "analysis",
            "source",
            "name"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"aegean\"",
            "label \"small_task\"",
            "time '1h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "combine_and_tidy_gff3": {
        "name_process": "combine_and_tidy_gff3",
        "string_process": "\nprocess combine_and_tidy_gff3 {\n\n    label \"aegean\"\n    label \"small_task\"\n    time '1h'\n\n    tag \"${name}\"\n\n    input:\n    val analysis\n    val source\n    tuple val(name), path(\"*chunks.gff\")\n\n    output:\n    tuple val(name), path(\"${name}_${analysis}_tidied.gff3\")\n\n    script:\n    setsource = (source == null || source == \"\") ? \"\" : \"-setsource ${source} \"\n\n    \"\"\"\n    for f in *chunks.gff\n    do\n      if [ -s \"\\${f}\" ]\n      then\n        gt gff3 -tidy -sort -addintrons ${setsource} -o \"\\${f}_tidied.gff3\" \"\\${f}\"\n      fi\n    done\n\n      gt merge -tidy *_tidied.gff3 \\\n    | canon-gff3 -i - \\\n    > \"${name}_${analysis}_tidied.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    setsource = (source == null || source == \"\") ? \"\" : \"-setsource ${source} \"\n\n    \"\"\"\n    for f in *chunks.gff\n    do\n      if [ -s \"\\${f}\" ]\n      then\n        gt gff3 -tidy -sort -addintrons ${setsource} -o \"\\${f}_tidied.gff3\" \"\\${f}\"\n      fi\n    done\n\n      gt merge -tidy *_tidied.gff3 \\\n    | canon-gff3 -i - \\\n    > \"${name}_${analysis}_tidied.gff3\"\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "PGT"
        ],
        "tools_url": [
            "https://bio.tools/pgt"
        ],
        "tools_dico": [
            {
                "name": "PGT",
                "uri": "https://bio.tools/pgt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software to find motifs using random projections.",
                "homepage": "http://www1.cse.wustl.edu/~jbuhler/pgt/"
            }
        ],
        "inputs": [
            "analysis",
            "source",
            "name"
        ],
        "nb_inputs": 3,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"aegean\"",
            "label \"small_task\"",
            "time '1h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "merge_gffs": {
        "name_process": "merge_gffs",
        "string_process": "\nprocess merge_gffs {\n\n    label \"genometools\"\n    label \"small_task\"\n    time '2h'\n\n    tag \"${name}\"\n\n    input:\n    val analysis\n    tuple val(name), path(\"to_merge/*gff3\")\n\n    output:\n    tuple val(name), path(\"${name}_${analysis}.gff3\")\n\n    script:\n    \"\"\"\n    gt merge -tidy to_merge/*gff3 > \"${name}_${analysis}.gff3\"\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    gt merge -tidy to_merge/*gff3 > \"${name}_${analysis}.gff3\"\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "PGT"
        ],
        "tools_url": [
            "https://bio.tools/pgt"
        ],
        "tools_dico": [
            {
                "name": "PGT",
                "uri": "https://bio.tools/pgt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software to find motifs using random projections.",
                "homepage": "http://www1.cse.wustl.edu/~jbuhler/pgt/"
            }
        ],
        "inputs": [
            "analysis",
            "name"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"genometools\"",
            "label \"small_task\"",
            "time '2h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "combine_fastas": {
        "name_process": "combine_fastas",
        "string_process": "\nprocess combine_fastas {\n\n    label \"seqrenamer\"\n    label \"small_task\"\n    time '2h'\n\n    input:\n    path \"*fasta\"\n\n    output:\n    path \"combined.fasta\"\n    path \"combined.tsv\"\n\n    script:\n    \"\"\"\n    sr encode \\\n      --format fasta \\\n      --column id \\\n      --deduplicate \\\n      --upper \\\n      --drop-desc \\\n      --strip \"*-\" \\\n      --map \"combined.tsv\" \\\n      --outfile \"combined.fasta\" \\\n      *fasta\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    sr encode \\\n      --format fasta \\\n      --column id \\\n      --deduplicate \\\n      --upper \\\n      --drop-desc \\\n      --strip \"*-\" \\\n      --map \"combined.tsv\" \\\n      --outfile \"combined.fasta\" \\\n      *fasta\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "LSR"
        ],
        "tools_url": [
            "https://bio.tools/lsr"
        ],
        "tools_dico": [
            {
                "name": "LSR",
                "uri": "https://bio.tools/lsr",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3678",
                            "term": "Experimental design and studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3678",
                            "term": "Studies"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3678",
                            "term": "Experimental design"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3678",
                            "term": "Design of experiments"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "LSR (Longest Run Test) is an S-plus program computes the distribution and the first moment of the length of the longest k-interrupted run (Lk) in a binary sequence.",
                "homepage": "http://www.csjfann.ibms.sinica.edu.tw/eag/programlist/LSR/LSR.html"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"seqrenamer\"",
            "label \"small_task\"",
            "time '2h'"
        ],
        "when": "",
        "stub": ""
    },
    "chunkify_genomes": {
        "name_process": "chunkify_genomes",
        "string_process": "\nprocess chunkify_genomes {\n\n    label \"python3\"\n    label \"small_task\"\n    time '1h'\n\n    tag \"${name}\"\n\n    input:\n    val nchunks\n    tuple val(name),\n        path(\"input.fasta\")\n\n    output:\n    tuple val(name), path(\"${name}_chunkfied_*.fasta\")\n\n    script:\n    \"\"\"\n    chunk_genomes.py -n \"${nchunks}\" --prefix \"${name}_chunkfied_\" input.fasta\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    chunk_genomes.py -n \"${nchunks}\" --prefix \"${name}_chunkfied_\" input.fasta\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "nchunks",
            "name"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"python3\"",
            "label \"small_task\"",
            "time '1h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "gff_to_bed": {
        "name_process": "gff_to_bed",
        "string_process": "\nprocess gff_to_bed {\n\n    label \"posix\"\n    label \"small_task\"\n\n    tag \"${name}\"\n\n    input:\n    val field\n    val ftype\n    val source\n    val is_gff2\n    tuple val(name),\n          path(\"in.gff3\")\n\n    output:\n    tuple val(name),\n          path(\"out.bed\")\n\n    script:\n    gff2 = is_gff2 ? \"-2\" : \"\"\n\n    \"\"\"\n    gff2bed.sh \\\n      -o out.bed \\\n      -f \"${field}\" \\\n      -t \"${ftype}\" \\\n      ${gff2} \\\n      -s \"${source}\" \\\n      in.gff3\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    gff2 = is_gff2 ? \"-2\" : \"\"\n\n    \"\"\"\n    gff2bed.sh \\\n      -o out.bed \\\n      -f \"${field}\" \\\n      -t \"${ftype}\" \\\n      ${gff2} \\\n      -s \"${source}\" \\\n      in.gff3\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [
            "gff2ps"
        ],
        "tools_url": [
            "https://bio.tools/gff2ps"
        ],
        "tools_dico": [
            {
                "name": "gff2ps",
                "uri": "https://bio.tools/gff2ps",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_1255",
                                "term": "Sequence features"
                            }
                        ]
                    }
                ],
                "description": "Program for visualizing annotations of genomic sequences. The program takes the annotated features on a genomic sequence in GFF format as input, and produces a visual output in PostScript. While it can be used in a very simple way, it also allows for a great degree of customization through a number of options and/or customization files.",
                "homepage": "http://big.crg.cat/services/gff2ps"
            }
        ],
        "inputs": [
            "field",
            "ftype",
            "source",
            "is_gff2",
            "name"
        ],
        "nb_inputs": 5,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"posix\"",
            "label \"small_task\"",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_hint_coverage": {
        "name_process": "get_hint_coverage",
        "string_process": "\nprocess get_hint_coverage {\n\n    label \"bedtools\"\n    label \"small_task\"\n\n    tag \"${name}\"\n\n    input:\n    val ftype\n    tuple val(name),\n          path(\"in.gff3\"),\n          path(\"hints*.bed\")\n\n    output:\n    tuple val(name),\n          path(\"out.gff3\")\n\n    script:\n    \"\"\"\n    mkdir tmp\n    get_hint_coverage.sh -o out.gff3 -t \"${ftype}\" -m \"./tmp\" in.gff3 hints*.bed\n    rm -rf -- tmp\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    mkdir tmp\n    get_hint_coverage.sh -o out.gff3 -t \"${ftype}\" -m \"./tmp\" in.gff3 hints*.bed\n    rm -rf -- tmp\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ftype",
            "name"
        ],
        "nb_inputs": 2,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"bedtools\"",
            "label \"small_task\"",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "filter_genes_by_hints": {
        "name_process": "filter_genes_by_hints",
        "string_process": "\nprocess filter_genes_by_hints {\n\n    label \"gffpal\"\n    label \"small_task\"\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n          path(\"in.gff3\")\n\n    output:\n    tuple val(name),\n          path(\"${name}_hint_filter.gff3\"),\n          path(\"${name}_hint_filter_excluded.gff3\"),\n          path(\"${name}_hint_filter_stats.ldjson\")\n\n    script:\n    \"\"\"\n    filter_genes_by_hints.py \\\n      -o \"${name}_hint_filter.gff3\" \\\n      --filtered \"${name}_hint_filter_excluded.gff3\" \\\n      -s \"${name}_hint_filter_stats.ldjson\" \\\n      --exclude gemoma_comparative spaln_protein spaln_transcript gmap_transcript exonerate \\\n      -- \\\n      in.gff3\n\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    filter_genes_by_hints.py \\\n      -o \"${name}_hint_filter.gff3\" \\\n      --filtered \"${name}_hint_filter_excluded.gff3\" \\\n      -s \"${name}_hint_filter_stats.ldjson\" \\\n      --exclude gemoma_comparative spaln_protein spaln_transcript gmap_transcript exonerate \\\n      -- \\\n      in.gff3\n\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gffpal\"",
            "label \"small_task\"",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "mark_genes_with_antifam": {
        "name_process": "mark_genes_with_antifam",
        "string_process": "\nprocess mark_genes_with_antifam {\n\n    label \"gffpal\"\n    label \"small_task\"\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name),\n          path(\"in.gff3\"),\n          path(\"matches.domtbl\")\n\n    output:\n    tuple val(name),\n        path(\"${name}_marked_antifam.gff3\")\n\n    script:\n    \"\"\"\n    gffpal add_antifam -o \"${name}_marked_antifam.gff3\" in.gff3 matches.domtbl\n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    \"\"\"\n    gffpal add_antifam -o \"${name}_marked_antifam.gff3\" in.gff3 matches.domtbl\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gffpal\"",
            "label \"small_task\"",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "exonerate_to_gff3": {
        "name_process": "exonerate_to_gff3",
        "string_process": "\nprocess exonerate_to_gff3 {\n\n    label \"gffpal\"\n    label \"small_task\"\n\n    input:\n    tuple val(name),\n          path(\"in.gff2\")\n\n    output:\n    tuple val(name),\n          path(\"out.gff3\")\n\n    script:\n    \"\"\"\n    gffpal exonerate2gff -o out.gff3 in.gff2\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    gffpal exonerate2gff -o out.gff3 in.gff2\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gffpal\"",
            "label \"small_task\""
        ],
        "when": "",
        "stub": ""
    },
    "filter_by_hint_coverage": {
        "name_process": "filter_by_hint_coverage",
        "string_process": "\nprocess filter_by_hint_coverage {\n\n    label \"gffpal\"\n    label \"small_task\"\n\n    input:\n    tuple val(name),\n          path(\"in.gff3\")\n\n    output:\n    tuple val(name),\n          path(\"${name}_passed_filter.gff3\")\n\n    tuple val(name),\n          path(\"${name}_failed_filter.gff3\")\n\n    tuple val(name),\n          path(\"${name}_filter_stats.ldjson\")\n\n    script:\n    \"\"\"\n    filter_genes_by_hints.py \\\n      --filtered \"${name}_failed_filter.gff3\" \\\n      --outfile \"${name}_passed_filter.gff3\" \\\n      --stats \"${name}_filter_stats.ldjson\" \\\n      --exclude gemoma_comparative spaln_protein spaln_transcript gmap_transcript exonerate \\\n      -- \\\n      in.gff3\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    filter_genes_by_hints.py \\\n      --filtered \"${name}_failed_filter.gff3\" \\\n      --outfile \"${name}_passed_filter.gff3\" \\\n      --stats \"${name}_filter_stats.ldjson\" \\\n      --exclude gemoma_comparative spaln_protein spaln_transcript gmap_transcript exonerate \\\n      -- \\\n      in.gff3\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name"
        ],
        "nb_inputs": 1,
        "outputs": [
            "name",
            "name",
            "name"
        ],
        "nb_outputs": 3,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"gffpal\"",
            "label \"small_task\""
        ],
        "when": "",
        "stub": ""
    },
    "extract_seqs": {
        "name_process": "extract_seqs",
        "string_process": "\nprocess extract_seqs {\n\n    label \"genometools\"\n    label \"small_task\"\n    time '3h'\n\n    tag \"${name} - ${analysis}\"\n\n    input:\n    val trans_table\n    tuple val(name),\n        val(analysis),\n        path(gff3),\n        path(fasta)\n\n    output:\n    tuple val(name),\n        val(analysis),\n        path(\"${name}_${analysis}.faa\")\n\n    tuple val(name),\n        val(analysis),\n        path(\"${name}_${analysis}.fna\")\n\n    script:\n    \"\"\"\n    gt gff3 \\\n      -sort \\\n      -retainids \\\n      \"${gff3}\" \\\n    > sorted.gff3\n\n    gt extractfeat \\\n      -type CDS \\\n      -join \\\n      -translate \\\n      -retainids \\\n      -gcode \"${trans_table}\" \\\n      -matchdescstart \\\n      -seqfile \"${fasta}\" \\\n      \"sorted.gff3\" \\\n    > \"${name}_${analysis}.faa\"\n\n    gt extractfeat \\\n      -type CDS \\\n      -join \\\n      -retainids \\\n      -gcode \"${trans_table}\" \\\n      -matchdescstart \\\n      -seqfile \"${fasta}\" \\\n      \"sorted.gff3\" \\\n    > \"${name}_${analysis}.fna\"\n\n    gt clean\n    rm sorted.gff3\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    \"\"\"\n    gt gff3 \\\n      -sort \\\n      -retainids \\\n      \"${gff3}\" \\\n    > sorted.gff3\n\n    gt extractfeat \\\n      -type CDS \\\n      -join \\\n      -translate \\\n      -retainids \\\n      -gcode \"${trans_table}\" \\\n      -matchdescstart \\\n      -seqfile \"${fasta}\" \\\n      \"sorted.gff3\" \\\n    > \"${name}_${analysis}.faa\"\n\n    gt extractfeat \\\n      -type CDS \\\n      -join \\\n      -retainids \\\n      -gcode \"${trans_table}\" \\\n      -matchdescstart \\\n      -seqfile \"${fasta}\" \\\n      \"sorted.gff3\" \\\n    > \"${name}_${analysis}.fna\"\n\n    gt clean\n    rm sorted.gff3\n    \"\"\"",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [
            "PGT"
        ],
        "tools_url": [
            "https://bio.tools/pgt"
        ],
        "tools_dico": [
            {
                "name": "PGT",
                "uri": "https://bio.tools/pgt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software to find motifs using random projections.",
                "homepage": "http://www1.cse.wustl.edu/~jbuhler/pgt/"
            }
        ],
        "inputs": [
            "trans_table",
            "name",
            "analysis",
            "gff3",
            "fasta"
        ],
        "nb_inputs": 5,
        "outputs": [
            "analysis",
            "analysis"
        ],
        "nb_outputs": 2,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"genometools\"",
            "label \"small_task\"",
            "time '3h'",
            "tag \"${name} - ${analysis}\""
        ],
        "when": "",
        "stub": ""
    },
    "addUtrs": {
        "name_process": "addUtrs",
        "string_process": "\nprocess addUtrs {\n\n    label \"bedtools\"\n    label \"small_task\"\n\n    when:\n    params.add_utr\n\n    input:\n    file genome genes.gff3\n    file add_utr ests.gff3\n\n    output:\n    file genes, best_match_ids\n\n    script:\n    \"\"\"\n    add_utr.sh \\\n      -g \"genes.gff3\" \\\n      -e \"ests.gff3\" \\\n      -t ./tmp \\\n      -o \"genes_with_utrs.gtf\"\n\n    mv tmp/best_match_ids.tsv ./\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    add_utr.sh \\\n      -g \"genes.gff3\" \\\n      -e \"ests.gff3\" \\\n      -t ./tmp \\\n      -o \"genes_with_utrs.gtf\"\n\n    mv tmp/best_match_ids.tsv ./\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome",
            "add_utr"
        ],
        "nb_inputs": 2,
        "outputs": [
            "genes"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"bedtools\"",
            "label \"small_task\""
        ],
        "when": "params.add_utr",
        "stub": ""
    },
    "filterProteins": {
        "name_process": "filterProteins",
        "string_process": "\nprocess filterProteins {\n    label \"posix\"\n    label \"small_task\"\n\n    input:\n    proteins\n\n    output:\n    filtered_proteins\n\n    script:\n    \"\"\"\n    # This removes proteins with internal stop codons.\n    # Convert to tab-separated file\n    awk '\n      /^>/ {\n        b=gensub(/^>\\\\s*(\\\\S+).*$/, \"\\\\\\\\1\", \"g\", \\$0);\n        printf(\"%s%s\\\\t\", (N>0?\"\\\\n\":\"\"), b);\n        N++;\n        next;\n      }\n      {\n        printf(\"%s\", \\$0)\n      }\n      END {\n        printf(\"\\\\n\");\n      }\n    ' < \"${PROTEIN_FILE}\" \\\n    | sed 's/\\\\*\\$//g' \\\n    | awk -F '\\\\t' '!($2 ~ /\\\\*/) {printf(\">%s\\\\n\", \\$0)}' \\\n    | tr '\\\\t' '\\\\n' \\\n    > \"${OUTDIR}/complete.faa\"\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    # This removes proteins with internal stop codons.\n    # Convert to tab-separated file\n    awk '\n      /^>/ {\n        b=gensub(/^>\\\\s*(\\\\S+).*$/, \"\\\\\\\\1\", \"g\", \\$0);\n        printf(\"%s%s\\\\t\", (N>0?\"\\\\n\":\"\"), b);\n        N++;\n        next;\n      }\n      {\n        printf(\"%s\", \\$0)\n      }\n      END {\n        printf(\"\\\\n\");\n      }\n    ' < \"${PROTEIN_FILE}\" \\\n    | sed 's/\\\\*\\$//g' \\\n    | awk -F '\\\\t' '!($2 ~ /\\\\*/) {printf(\">%s\\\\n\", \\$0)}' \\\n    | tr '\\\\t' '\\\\n' \\\n    > \"${OUTDIR}/complete.faa\"\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "NextSV",
            "ENdb"
        ],
        "tools_url": [
            "https://bio.tools/nextsv",
            "https://bio.tools/ENdb"
        ],
        "tools_dico": [
            {
                "name": "NextSV",
                "uri": "https://bio.tools/nextsv",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "Genomic structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3175",
                            "term": "DNA structural variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation detection"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3228",
                                    "term": "Structural variation discovery"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A meta SV caller and a computational pipeline to perform SV calling from low coverage long-read sequencing data. It integrates three aligners and three SV callers and generates two integrated call sets (sensitive/stringent) for different analysis purpose.",
                "homepage": "http://github.com/Nextomics/NextSV"
            },
            {
                "name": "ENdb",
                "uri": "https://bio.tools/ENdb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0219",
                            "term": "Data submission, annotation and curation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0749",
                            "term": "Transcription factors and regulatory sites"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0440",
                                    "term": "Promoter prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Query and retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2495",
                                    "term": "Expression data analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0224",
                                    "term": "Database retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A manually curated database of experimentally supported enhancers for human and mouse. Enhancers are a class of cis-regulatory elements that can increase gene transcription by forming loops in intergenic regions, introns and exons",
                "homepage": "http://www.licpathway.net/ENdb"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"posix\"",
            "label \"small_task\""
        ],
        "when": "",
        "stub": ""
    },
    "findSelfMatches": {
        "name_process": "findSelfMatches",
        "string_process": "\nprocess findSelfMatches {\n\n    label \"mmseqs\"\n    label \"big_task\"\n\n    input:\n    filtered_proteins\n\n    output:\n\n    script:\n    \"\"\"\n    mkdir -p \"proteins\"\n    mmseqs createdb \"${FILTERED_PROTEINS}\" \"proteins/db\"\n\n    mkdir -p \"clustered\"\n    mkdir -p \"tmp\"\n    mmseqs cluster \\\n      \"proteins/db\" \\\n      \"clustered/db\" \\\n      \"tmp\" \\\n      --min-seq-id 0.6 \\\n      -c 0.5 \\\n      --cov-mode 0\n\n    mmseqs createtsv \\\n      \"proteins/db\" \\\n      \"proteins/db\" \\\n      \"clustered/db\" \\\n      \"clustered.tsv\"\n\n    rm -rf -- \"tmp\"\n\n    awk '$1 != $2' \"clustered.tsv\" \\\n    | grep \\\n      -F \\\n      -f <(cut -f2 01-get_utrs/best_match_ids.tsv) \\\n    | sort -u -k1,1 \\\n    > \"clustered_utr.tsv\"\n\n    cut -f 2 \"clustered_utr.tsv\" > \"clustered_utr_ids.txt\" \n\n    grep \\\n      -F \\\n      -f <(cut -f 1 clustered_utr.tsv) \\\n      -v \\\n    < \"clustered.tsv\" \\\n    | cut -f 1 \\\n    | sort -u \\\n    > \"clustered_non_utr_ids.txt\"\n\n    cat \"clustered_utr_ids.txt\" \"clustered_non_utr_ids.txt\" \\\n    | grep -v \"^#\" \\\n    | sort -u \\\n    > \"non_redundant_ids.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 56,
        "string_script": "    \"\"\"\n    mkdir -p \"proteins\"\n    mmseqs createdb \"${FILTERED_PROTEINS}\" \"proteins/db\"\n\n    mkdir -p \"clustered\"\n    mkdir -p \"tmp\"\n    mmseqs cluster \\\n      \"proteins/db\" \\\n      \"clustered/db\" \\\n      \"tmp\" \\\n      --min-seq-id 0.6 \\\n      -c 0.5 \\\n      --cov-mode 0\n\n    mmseqs createtsv \\\n      \"proteins/db\" \\\n      \"proteins/db\" \\\n      \"clustered/db\" \\\n      \"clustered.tsv\"\n\n    rm -rf -- \"tmp\"\n\n    awk '$1 != $2' \"clustered.tsv\" \\\n    | grep \\\n      -F \\\n      -f <(cut -f2 01-get_utrs/best_match_ids.tsv) \\\n    | sort -u -k1,1 \\\n    > \"clustered_utr.tsv\"\n\n    cut -f 2 \"clustered_utr.tsv\" > \"clustered_utr_ids.txt\" \n\n    grep \\\n      -F \\\n      -f <(cut -f 1 clustered_utr.tsv) \\\n      -v \\\n    < \"clustered.tsv\" \\\n    | cut -f 1 \\\n    | sort -u \\\n    > \"clustered_non_utr_ids.txt\"\n\n    cat \"clustered_utr_ids.txt\" \"clustered_non_utr_ids.txt\" \\\n    | grep -v \"^#\" \\\n    | sort -u \\\n    > \"non_redundant_ids.txt\"\n    \"\"\"",
        "nb_lignes_script": 44,
        "language_script": "bash",
        "tools": [
            "MMseqs",
            "ODB",
            "TMPD"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs",
            "https://bio.tools/odb",
            "https://bio.tools/tmpd"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            },
            {
                "name": "ODB",
                "uri": "https://bio.tools/odb",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene structure"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Gene expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0114",
                            "term": "Gene features"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0203",
                            "term": "Expression"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0435",
                                    "term": "Operon prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3432",
                                    "term": "Clustering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0579",
                                    "term": "Operon drawing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer design"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Enrichment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3501",
                                    "term": "Over-representation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0579",
                                    "term": "Operon rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "PCR primer prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0308",
                                    "term": "Primer design"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Contains all known and conserved operons in completely sequenced genomes.",
                "homepage": "http://operondb.jp/"
            },
            {
                "name": "TMPD",
                "uri": "https://bio.tools/tmpd",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0160",
                            "term": "Sequence sites, features and motifs"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plants"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Botany"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0780",
                            "term": "Plant"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data retrieval"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Data extraction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2422",
                                    "term": "Retrieval"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The Tobacco Markers & Primers Database.",
                "homepage": "http://biodb.sdau.edu.cn/tmpd/index.html"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"mmseqs\"",
            "label \"big_task\""
        ],
        "when": "",
        "stub": ""
    },
    "getTrainingSet": {
        "name_process": "getTrainingSet",
        "string_process": "\nprocess getTrainingSet {\n\n}",
        "nb_lignes_process": 2,
        "string_script": "",
        "nb_lignes_script": 0,
        "language_script": "",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "busco": {
        "name_process": "busco",
        "string_process": "\nprocess busco {\n\n    label \"busco\"\n    label \"medium_task\"\n    time '12h'\n\n    tag \"${name}\"\n\n    input:\n    tuple val(name), file(fasta), file(faidx) from genomes4Busco\n    path \"lineage\" from buscoLineage\n    path \"augustus_config\" from augustusConfig\n\n    output:\n    path \"${name}\" into buscoResults\n\n    script:\n    \"\"\"\n    export AUGUSTUS_CONFIG_PATH=\"\\${PWD}/augustus_config\"\n\n    run_BUSCO.py \\\n      --in \"${fasta}\" \\\n      --out \"${name}\" \\\n      --cpu ${task.cpus} \\\n      --mode \"genome\" \\\n      --lineage_path \"lineage\"\n\n    mv \"run_${name}\" \"${name}\"\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    \"\"\"\n    export AUGUSTUS_CONFIG_PATH=\"\\${PWD}/augustus_config\"\n\n    run_BUSCO.py \\\n      --in \"${fasta}\" \\\n      --out \"${name}\" \\\n      --cpu ${task.cpus} \\\n      --mode \"genome\" \\\n      --lineage_path \"lineage\"\n\n    mv \"run_${name}\" \"${name}\"\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomes4Busco",
            "buscoLineage",
            "augustusConfig"
        ],
        "nb_inputs": 3,
        "outputs": [
            "buscoResults"
        ],
        "nb_outputs": 1,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"busco\"",
            "label \"medium_task\"",
            "time '12h'",
            "tag \"${name}\""
        ],
        "when": "",
        "stub": ""
    },
    "busco_proteins": {
        "name_process": "busco_proteins",
        "string_process": "\nprocess busco_proteins {\n\n    label \"busco\"\n    label \"medium_task\"\n    time '6h'\n\n    tag \"${name} - ${analysis}\"\n\n    input:\n    tuple val(name),\n          val(analysis),\n          path(fasta)\n    path \"lineage\"\n    path \"augustus_config\"\n\n    output:\n    path \"${name}_${analysis}_busco\"\n\n    script:\n    \"\"\"\n    export AUGUSTUS_CONFIG_PATH=\"\\${PWD}/augustus_config\"\n\n    run_BUSCO.py \\\n      --in \"${fasta}\" \\\n      --out \"${name}\" \\\n      --cpu ${task.cpus} \\\n      --mode \"proteins\" \\\n      --lineage_path \"lineage\"\n\n    mv \"run_${name}\" \"${name}_${analysis}_busco\"\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    \"\"\"\n    export AUGUSTUS_CONFIG_PATH=\"\\${PWD}/augustus_config\"\n\n    run_BUSCO.py \\\n      --in \"${fasta}\" \\\n      --out \"${name}\" \\\n      --cpu ${task.cpus} \\\n      --mode \"proteins\" \\\n      --lineage_path \"lineage\"\n\n    mv \"run_${name}\" \"${name}_${analysis}_busco\"\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "analysis",
            "fasta"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"busco\"",
            "label \"medium_task\"",
            "time '6h'",
            "tag \"${name} - ${analysis}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_stats": {
        "name_process": "get_stats",
        "string_process": "\nprocess get_stats {\n\n    label \"genometools\"\n    label \"small_task\"\n    time '3h'\n\n    tag \"${name} - ${analysis}\"\n\n    input:\n    tuple val(name), val(analysis), path(preds)\n\n    output:\n    path \"${name}_${analysis}_stats.txt\"\n\n    script:\n    \"\"\"\n    gt stat \\\n      -addintrons \\\n      -genelengthdistri \\\n      -genescoredistri \\\n      -exonlengthdistri \\\n      -exonnumberdistri \\\n      -intronlengthdistri \\\n      -cdslengthdistri \\\n      \"${preds}\" \\\n    > \"${name}_${analysis}_stats.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    gt stat \\\n      -addintrons \\\n      -genelengthdistri \\\n      -genescoredistri \\\n      -exonlengthdistri \\\n      -exonnumberdistri \\\n      -intronlengthdistri \\\n      -cdslengthdistri \\\n      \"${preds}\" \\\n    > \"${name}_${analysis}_stats.txt\"\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "PGT"
        ],
        "tools_url": [
            "https://bio.tools/pgt"
        ],
        "tools_dico": [
            {
                "name": "PGT",
                "uri": "https://bio.tools/pgt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software to find motifs using random projections.",
                "homepage": "http://www1.cse.wustl.edu/~jbuhler/pgt/"
            }
        ],
        "inputs": [
            "name",
            "analysis",
            "preds"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"genometools\"",
            "label \"small_task\"",
            "time '3h'",
            "tag \"${name} - ${analysis}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_splice_site_info": {
        "name_process": "get_splice_site_info",
        "string_process": "\nprocess get_splice_site_info {\n\n    label \"genometools\"\n    label \"small_task\"\n    time '3h'\n\n    tag \"${name} - ${analysis}\"\n\n    input:\n    tuple val(name),\n        val(analysis),\n        path(preds),\n        path(fasta)\n\n    output:\n    path \"${name}_${analysis}_splice_sites.txt\"\n\n    script:\n    \"\"\"\n    gt splicesiteinfo \\\n      -seqfile \"${fasta}\" \\\n      -matchdescstart \\\n      -addintrons \\\n      \"${preds}\" \\\n    > \"${name}_${analysis}_splice_sites.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    gt splicesiteinfo \\\n      -seqfile \"${fasta}\" \\\n      -matchdescstart \\\n      -addintrons \\\n      \"${preds}\" \\\n    > \"${name}_${analysis}_splice_sites.txt\"\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "PGT"
        ],
        "tools_url": [
            "https://bio.tools/pgt"
        ],
        "tools_dico": [
            {
                "name": "PGT",
                "uri": "https://bio.tools/pgt",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genome comparison"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3209",
                                    "term": "Genomic region matching"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software to find motifs using random projections.",
                "homepage": "http://www1.cse.wustl.edu/~jbuhler/pgt/"
            }
        ],
        "inputs": [
            "name",
            "analysis",
            "preds",
            "fasta"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"genometools\"",
            "label \"small_task\"",
            "time '3h'",
            "tag \"${name} - ${analysis}\""
        ],
        "when": "",
        "stub": ""
    },
    "get_known_stats": {
        "name_process": "get_known_stats",
        "string_process": "\nprocess get_known_stats {\n\n    label \"aegean\"\n    label \"small_task\"\n    time '3h'\n\n    tag \"${name} - ${analysis}\"\n\n    input:\n    tuple val(name),\n          val(analysis),\n          path(preds),\n          path(known)\n\n    output:\n    path \"${name}_${analysis}_parseval.txt\"\n\n    script:\n    \"\"\"\n    parseval \\\n      --nogff3 \\\n      --outformat \"text\" \\\n      --summary \\\n      --outfile \"${name}_${analysis}_parseval.txt\" \\\n      \"${known}\" \\\n      \"${preds}\"\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    parseval \\\n      --nogff3 \\\n      --outformat \"text\" \\\n      --summary \\\n      --outfile \"${name}_${analysis}_parseval.txt\" \\\n      \"${known}\" \\\n      \"${preds}\"\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "name",
            "analysis",
            "preds",
            "known"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "darcyabjones__panann",
        "directive": [
            "label \"aegean\"",
            "label \"small_task\"",
            "time '3h'",
            "tag \"${name} - ${analysis}\""
        ],
        "when": "",
        "stub": ""
    }
}
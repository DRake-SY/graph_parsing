{
    "plast": {
        "name_process": "plast",
        "string_process": "process plast {\n    label 'plast'\n    publishDir \"${params.outdir}/${params.plast_dirname}\", mode: 'copy', pattern: '*.xml'\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'plast.cmd', saveAs : { plast_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n      val(singularity_ok)\n      val(db_ok)\n      path(seq)\n\n    output:\n      path(\"*.xml\"), emit: hit_files\n      path \"plast.cmd\", emit: plast_cmd\n\n    script:\n    \"\"\"\n    beedeem-plast.sh ${params.db_dir} log ${task.cpus} ${params.query_type} ${seq} ${params.plast_db} plast_hits.xml plast.cmd >& plast.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    beedeem-plast.sh ${params.db_dir} log ${task.cpus} ${params.query_type} ${seq} ${params.plast_db} plast_hits.xml plast.cmd >& plast.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "singularity_ok",
            "db_ok",
            "seq"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "label 'plast'",
            "publishDir \"${params.outdir}/${params.plast_dirname}\", mode: 'copy', pattern: '*.xml'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'plast.cmd', saveAs : { plast_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    },
    "mergeXML_plast": {
        "name_process": "mergeXML_plast",
        "string_process": "\nprocess mergeXML_plast {\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'merged_plast.xml'\n\n    input:\n      path(plastXML)\n\n    output:\n      path \"merged_plast.xml\", emit: merged_plast_xml\n\n    script:\n    \"\"\"\n    BlastXMLmerge.py merged_plast.xml ${plastXML} >& merged_plast_xml.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    BlastXMLmerge.py merged_plast.xml ${plastXML} >& merged_plast_xml.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "plastXML"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'merged_plast.xml'"
        ],
        "when": "",
        "stub": ""
    },
    "diamond": {
        "name_process": "diamond",
        "string_process": "process diamond {\n    label 'diamond'\n    publishDir \"${params.outdir}/${params.diamond_dirname}\", mode: 'copy', pattern: '*.xml'\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'diamond.cmd', saveAs : { diamond_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n      val(singularity_ok)\n      val(db_ok)\n      path(chunks)\n\n    output:\n      path(\"*.xml\"), emit: hit_files\n      path \"diamond.cmd\", emit: diamond_cmd\n\n    script:\n    \"\"\"\n    diamond.sh ${task.cpus} ${params.query_type} ${chunks} ${params.blast_db} diamond_hits.xml diamond.cmd >& diamond.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    diamond.sh ${task.cpus} ${params.query_type} ${chunks} ${params.blast_db} diamond_hits.xml diamond.cmd >& diamond.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "singularity_ok",
            "db_ok",
            "chunks"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "label 'diamond'",
            "publishDir \"${params.outdir}/${params.diamond_dirname}\", mode: 'copy', pattern: '*.xml'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'diamond.cmd', saveAs : { diamond_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    },
    "mergeXML_diamond": {
        "name_process": "mergeXML_diamond",
        "string_process": "\nprocess mergeXML_diamond {\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'merged_diamond.xml'\n\n    input:\n      path(diamondXML)\n\n    output:\n      path \"merged_diamond.xml\", emit: merged_diamond_xml\n\n    script:\n    \"\"\"\n    BlastXMLmerge.py merged_diamond.xml ${diamondXML} >& merged_diamond_xml.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    BlastXMLmerge.py merged_diamond.xml ${diamondXML} >& merged_diamond_xml.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "diamondXML"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'merged_diamond.xml'"
        ],
        "when": "",
        "stub": ""
    },
    "get_test_data": {
        "name_process": "get_test_data",
        "string_process": "process get_test_data {\n    label 'internet_access'\n\n    output:\n      path(\"query.fasta\"), emit: query\n\n    script:\n    \"\"\"\n    get_test_data.sh ${baseDir} query.fasta >& get_test_data.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "    \"\"\"\n    get_test_data.sh ${baseDir} query.fasta >& get_test_data.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "label 'internet_access'"
        ],
        "when": "",
        "stub": ""
    },
    "busco": {
        "name_process": "busco",
        "string_process": "process busco {\n    label 'busco'\n    publishDir \"${params.outdir}/${params.busco_dirname}\", mode: 'copy', pattern: 'busco_results*'\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'busco_results*/short_summary.*'\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'busco.cmd', saveAs : { busco_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n      val(singularity_ok)\n      path(transcriptome)\n      each(lineageList)\n    \n    output:\n      path(\"busco_results*\"), emit: busco_dir\n      path \"busco.cmd\", emit: busco_cmd\n      path(\"busco_results*/short_summary.*\")\n\n    script:\n    \"\"\"\n    busco.sh ${task.cpus} ${transcriptome} busco_results ${lineageList} busco.cmd >& busco.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    busco.sh ${task.cpus} ${transcriptome} busco_results ${lineageList} busco.cmd >& busco.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "singularity_ok",
            "transcriptome",
            "lineageList"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "label 'busco'",
            "publishDir \"${params.outdir}/${params.busco_dirname}\", mode: 'copy', pattern: 'busco_results*'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'busco_results*/short_summary.*'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'busco.cmd', saveAs : { busco_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    },
    "downloadDB": {
        "name_process": "downloadDB",
        "string_process": "process downloadDB {\n    label 'internet_access'\n\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'downloadDB.cmd', saveAs : { downloadDB_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n        val(singularity_ok)\n\n    output:\n        path \"downloadDB.cmd\", emit: downloadDB_cmd\n        path \"database_present\", emit: db_ok\n\n    script:\n    \"\"\"\n    downloadDB.sh ${params.db_dir} ${workflow.workDir}/databases ${params.bank_list} database_present downloadDB.cmd >& downloadDB.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    downloadDB.sh ${params.db_dir} ${workflow.workDir}/databases ${params.bank_list} database_present downloadDB.cmd >& downloadDB.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "singularity_ok"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "label 'internet_access'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'downloadDB.cmd', saveAs : { downloadDB_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    },
    "blast": {
        "name_process": "blast",
        "string_process": "process blast {\n    label 'blast'\n    publishDir \"${params.outdir}/${params.blast_dirname}\", mode: 'copy', pattern: '*.xml'\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'blast.cmd', saveAs : { blast_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n      val(singularity_ok)\n      val(db_ok)\n      path(sequences)\n\n    output:\n      path(\"*.xml\"), emit: hit_files\n      path \"blast.cmd\", emit: blast_cmd\n\n    script:\n    \"\"\"\n    blast.sh ${task.cpus} ${params.query_type} ${sequences} ${params.blast_db} blast_hits.xml blast.cmd >& blast.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    \"\"\"\n    blast.sh ${task.cpus} ${params.query_type} ${sequences} ${params.blast_db} blast_hits.xml blast.cmd >& blast.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "singularity_ok",
            "db_ok",
            "sequences"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "label 'blast'",
            "publishDir \"${params.outdir}/${params.blast_dirname}\", mode: 'copy', pattern: '*.xml'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'blast.cmd', saveAs : { blast_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    },
    "mergeXML_blast": {
        "name_process": "mergeXML_blast",
        "string_process": "\nprocess mergeXML_blast {\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'merged_blast.xml'\n\n    input:\n      path(blastXML)\n\n    output:\n      path \"merged_blast.xml\", emit: merged_blast_xml\n\n    script:\n    \"\"\"\n    BlastXMLmerge.py merged_blast.xml ${blastXML} >& merged_blast_xml.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    BlastXMLmerge.py merged_blast.xml ${blastXML} >& merged_blast_xml.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blastXML"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'merged_blast.xml'"
        ],
        "when": "",
        "stub": ""
    },
    "eggnogmapper": {
        "name_process": "eggnogmapper",
        "string_process": "process eggnogmapper {\n    label 'eggnogmapper'\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'result.*'\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'eggnog-mapper.cmd', saveAs : { eggnogmapper_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n      val(singularity_ok)\n      path(query)\n\n    output:\n      path \"result.*\", emit: eggnogmapper_dir\n      path \"eggnog-mapper.cmd\", emit: eggnogmapper_cmd\n\n    script:\n    \"\"\"\n    eggnogmapper.sh ${task.cpus} ${params.query_type} ${query} result eggnog-mapper.cmd >& eggnog-mapper.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    eggnogmapper.sh ${task.cpus} ${params.query_type} ${query} result eggnog-mapper.cmd >& eggnog-mapper.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "singularity_ok",
            "query"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "label 'eggnogmapper'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'result.*'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'eggnog-mapper.cmd', saveAs : { eggnogmapper_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    },
    "beedeem_annotation": {
        "name_process": "beedeem_annotation",
        "string_process": "process beedeem_annotation {\n    label 'beedeem'\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: '*.zml'\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'beedeem_annotation.cmd', saveAs : { beedeem_annotation_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n      path(xml)\n\n    output:\n      path(\"*.zml\"), emit: zml_files\n      path \"beedeem_annotation.cmd\", emit: beedeem_annot_cmd\n\n    script:\n    \"\"\"\n    beedeem_annotation.sh ${params.db_dir} ${params.steps_data} ${xml} beedeem_annotation.zml ${params.annot_type} beedeem_annotation.cmd >& beedeem_annotation.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "    \"\"\"\n    beedeem_annotation.sh ${params.db_dir} ${params.steps_data} ${xml} beedeem_annotation.zml ${params.annot_type} beedeem_annotation.cmd >& beedeem_annotation.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "xml"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "label 'beedeem'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: '*.zml'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'beedeem_annotation.cmd', saveAs : { beedeem_annotation_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    },
    "interpro": {
        "name_process": "interpro",
        "string_process": "process interpro {\n    label 'interpro'\n    publishDir \"${params.outdir}/${params.interpro_dirname}\", mode: 'copy', pattern: '*.xml'\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'iprscan.cmd', saveAs : { iprscan_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n      val(singularity_ok)\n      path(query)\n\n    output:\n      path(\"*.xml\"), emit: iprscan_files\n      path \"iprscan.cmd\", emit: iprscan_cmd\n\n    script:\n    \"\"\"\n    interpro.sh ${task.cpus} ${query} ${params.query_type} iprscan_results.xml iprscan.cmd >& iprscan.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    interpro.sh ${task.cpus} ${query} ${params.query_type} iprscan_results.xml iprscan.cmd >& iprscan.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "singularity_ok",
            "query"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "label 'interpro'",
            "publishDir \"${params.outdir}/${params.interpro_dirname}\", mode: 'copy', pattern: '*.xml'",
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern : 'iprscan.cmd', saveAs : { iprscan_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    },
    "mergeXML_interpro": {
        "name_process": "mergeXML_interpro",
        "string_process": "\nprocess mergeXML_interpro {\n    publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'merged_iprscan.xml'\n\n    input:\n      path(iprscanXML)\n\n    output:\n      path \"merged_iprscan.xml\", emit: merged_iprscan_xml\n\n    script:\n    \"\"\"\n    IPRScanXMLmerge.sh merged_iprscan.xml ${params.query_type} >& merged_iprscan_xml.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "    \"\"\"\n    IPRScanXMLmerge.sh merged_iprscan.xml ${params.query_type} >& merged_iprscan_xml.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "iprscanXML"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "publishDir \"${params.outdir}/${params.report_dirname}\", mode: 'copy', pattern: 'merged_iprscan.xml'"
        ],
        "when": "",
        "stub": ""
    },
    "get_singularity_images": {
        "name_process": "get_singularity_images",
        "string_process": "process get_singularity_images {\n    label 'internet_access'\n\n    output:\n      path(\"singularity_images_ok\"), emit: singularity_ok\n\n    script:\n    \"\"\"\n    get_singularity_images.sh ${baseDir} singularity_images_ok >& get_singularity_images.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "    \"\"\"\n    get_singularity_images.sh ${baseDir} singularity_images_ok >& get_singularity_images.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__orson",
        "directive": [
            "label 'internet_access'"
        ],
        "when": "",
        "stub": ""
    }
}
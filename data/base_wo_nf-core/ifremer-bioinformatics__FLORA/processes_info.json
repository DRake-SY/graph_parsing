{
    "assembly": {
        "name_process": "assembly",
        "string_process": "process assembly {\n\n    label 'assembly'\n    beforeScript '. /appli/bioinfo/trinity/2.8.5/env.sh'\n \n    publishDir \"${params.outdir}/${params.results_dirname}/assembly\", mode: 'copy', pattern : 'trinity_out_dir.Trinity.fasta'\n    publishDir \"${params.outdir}/${params.results_dirname}/assembly\", mode: 'copy', pattern : 'trinity_out_dir.Trinity.fasta.gene_trans_map'\n    publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'trinity_assembly.cmd', saveAs : { trinity_assembly_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n        path(valid_reads)\n\n    output:\n        path(\"trinity_out_dir.Trinity.fasta\"), emit: assembly_fasta\n        path(\"trinity_out_dir.Trinity.fasta.gene_trans_map\"), emit: gene_trans_map\n        path(\"trinity_assembly.cmd\"), emit: trinity_assembly_cmd\n\n    script:\n    avail_memory = task.memory.toGiga()\n    \"\"\"\n    assembly.sh ${task.cpus} ${params.samples_file} ${avail_memory}G trinity_assembly.cmd &> trinity_assembly.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "    avail_memory = task.memory.toGiga()\n    \"\"\"\n    assembly.sh ${task.cpus} ${params.samples_file} ${avail_memory}G trinity_assembly.cmd &> trinity_assembly.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "valid_reads"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__FLORA",
        "directive": [
            "label 'assembly'",
            "beforeScript '. /appli/bioinfo/trinity/2.8.5/env.sh'",
            "publishDir \"${params.outdir}/${params.results_dirname}/assembly\", mode: 'copy', pattern : 'trinity_out_dir.Trinity.fasta'",
            "publishDir \"${params.outdir}/${params.results_dirname}/assembly\", mode: 'copy', pattern : 'trinity_out_dir.Trinity.fasta.gene_trans_map'",
            "publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'trinity_assembly.cmd', saveAs : { trinity_assembly_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    },
    "stats_assembly": {
        "name_process": "stats_assembly",
        "string_process": "\nprocess stats_assembly {\n\n    beforeScript '. /appli/bioinfo/trinity/2.8.5/env.sh'\n\n    publishDir \"${params.outdir}/${params.results_dirname}/assembly\", mode: 'copy', pattern : 'trinity_out_dir.Trinity.fasta'\n    publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'trinity_assembly.cmd', saveAs : { trinity_assembly_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    Input:\n        path(assembly)\n\n    output:\n        path(\"trinity_assembly_stats.txt\"), emit: assembly_stats\n        path(\"trinity_stats-assembly.cmd\"), emit: trinity_stats_assembly_cmd\n\n    script:\n    avail_memory = task.memory.toGiga()\n    \"\"\"\n    TrinityStats.pl ${assembly} > trinity_assembly_stats.txt\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    avail_memory = task.memory.toGiga()\n    \"\"\"\n    TrinityStats.pl ${assembly} > trinity_assembly_stats.txt\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__FLORA",
        "directive": [
            "beforeScript '. /appli/bioinfo/trinity/2.8.5/env.sh'",
            "publishDir \"${params.outdir}/${params.results_dirname}/assembly\", mode: 'copy', pattern : 'trinity_out_dir.Trinity.fasta'",
            "publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'trinity_assembly.cmd', saveAs : { trinity_assembly_cmd -> \"cmd/${task.process}_complete.sh\" } Input: path(assembly)"
        ],
        "when": "",
        "stub": ""
    },
    "quality_trimming": {
        "name_process": "quality_trimming",
        "string_process": "process quality_trimming {\n\n    tag \"$id\"\n    label 'quality_trimming'\n    beforeScript '. /appli/bioinfo/trim-galore/0.6.7/env.sh'\n \n    publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'trimmed_reads_output/filtered_rrna_read_*.fq.{1,2}.gz_val_{1,2}.fq.gz'\n    publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'trimmed_reads_output/*_trimming_report.txt'\n    publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'trimgalore.cmd', saveAs : { trimgalore_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n        tuple val(id), path(filtered_reads)\n\n    output:\n        path(\"trimmed_reads_output/*_trimming_report.txt\"), emit: report\n        path(\"trimmed_reads_output/*val_*.fq.gz\"), emit: reads4assembly\n        tuple val(id), path(\"trimmed_reads_output/filtered_rrna_read_*.fq.{1,2}.gz_val_{1,2}.fq.gz\"), emit: validate_reads\n        path(\"trimgalore.cmd\"), emit: trimgalore_cmd\n\n    script:\n    \"\"\"\n    quality_trimming.sh ${task.cpus} ${filtered_reads[0]} ${filtered_reads[1]} ${params.min_length} ${params.min_quality} ${params.stringency} ${params.error_rate} trimmed_reads_output trimgalore.cmd &> trimgalore_${id}.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "    \"\"\"\n    quality_trimming.sh ${task.cpus} ${filtered_reads[0]} ${filtered_reads[1]} ${params.min_length} ${params.min_quality} ${params.stringency} ${params.error_rate} trimmed_reads_output trimgalore.cmd &> trimgalore_${id}.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "filtered_reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__FLORA",
        "directive": [
            "tag \"$id\"",
            "label 'quality_trimming'",
            "beforeScript '. /appli/bioinfo/trim-galore/0.6.7/env.sh'",
            "publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'trimmed_reads_output/filtered_rrna_read_*.fq.{1,2}.gz_val_{1,2}.fq.gz'",
            "publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'trimmed_reads_output/*_trimming_report.txt'",
            "publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'trimgalore.cmd', saveAs : { trimgalore_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    },
    "rnaseq_correction": {
        "name_process": "rnaseq_correction",
        "string_process": "process rnaseq_correction {\n\n    tag \"$id\"\n    label 'rcorrector'\n    beforeScript '. /appli/bioinfo/rcorrector/1.0.4/env.sh'\n \n    publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'rcorrector.cmd', saveAs : { rcorrector_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n        tuple val(id), path(fastq)\n\n    output:\n        tuple val(id), path(\"*_R{1,2}_001.cor.fq.gz\"), emit: fastq_corrected\n        path(\"rcorrector.cmd\"), emit: rcorrector_cmd\n\n    script:\n    \"\"\"\n    rcorrector.sh ${task.cpus} ${fastq[0]} ${fastq[1]} rcorrector.cmd &> rcorrector_${id}.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    rcorrector.sh ${task.cpus} ${fastq[0]} ${fastq[1]} rcorrector.cmd &> rcorrector_${id}.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fastq"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__FLORA",
        "directive": [
            "tag \"$id\"",
            "label 'rcorrector'",
            "beforeScript '. /appli/bioinfo/rcorrector/1.0.4/env.sh'",
            "publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'rcorrector.cmd', saveAs : { rcorrector_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    },
    "filter_uncorrectable_fastq": {
        "name_process": "filter_uncorrectable_fastq",
        "string_process": "\nprocess filter_uncorrectable_fastq {\n\n    tag \"$id\"\n    label 'filter_uncorrect'\n    beforeScript '. /appli/bioinfo/rcorrector/1.0.4/env.sh'\n\n    publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'filter_uncorrectable_fastq.cmd', saveAs : { filter_uncorrectable_fastq_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n        tuple val(id), path(fastq_corrected)\n\n    output:\n        tuple val(id), path(\"corrected_*_R{1,2}_001.cor.fq\"), emit: fastq_only_corrected\n        path(\"filter_uncorrectable_fastq.cmd\"), emit: filter_uncorrectable_fastq_cmd\n\n    script:\n    \"\"\"\n    FilterUncorrectabledPEfastq.sh ${baseDir}/bin/FilterUncorrectabledPEfastq.py ${fastq_corrected[0]} ${fastq_corrected[1]} corrected filter_uncorrectable_fastq.cmd &> filter_uncorrectable_fastq_${id}.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    FilterUncorrectabledPEfastq.sh ${baseDir}/bin/FilterUncorrectabledPEfastq.py ${fastq_corrected[0]} ${fastq_corrected[1]} corrected filter_uncorrectable_fastq.cmd &> filter_uncorrectable_fastq_${id}.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "fastq_corrected"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__FLORA",
        "directive": [
            "tag \"$id\"",
            "label 'filter_uncorrect'",
            "beforeScript '. /appli/bioinfo/rcorrector/1.0.4/env.sh'",
            "publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'filter_uncorrectable_fastq.cmd', saveAs : { filter_uncorrectable_fastq_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    },
    "rrna_removal": {
        "name_process": "rrna_removal",
        "string_process": "process rrna_removal {\n\n    tag \"$id\"\n    label 'rrna_removal'\n    beforeScript '. /appli/bioinfo/bowtie2/2.4.1/env.sh'\n \n    publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'bowtie2.cmd', saveAs : { bowtie2_cmd -> \"cmd/${task.process}_complete.sh\" }\n\n    input:\n        tuple val(id), path(corrected_reads)\n\n    output:\n        tuple val(id), path(\"filtered_rrna_read_*.fq.{1,2}.gz\"), emit: filtered_rrna\n        path(\"bowtie2.cmd\"), emit: bowtie2_cmd\n\n    script:\n    \"\"\"\n    remove_rrna.sh ${task.cpus} ${params.rrna_db} ${corrected_reads[0]} ${corrected_reads[1]} filtered_rrna_read_${id}.fq.gz bowtie2.cmd &> bowtie2_${id}.log 2>&1\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    \"\"\"\n    remove_rrna.sh ${task.cpus} ${params.rrna_db} ${corrected_reads[0]} ${corrected_reads[1]} filtered_rrna_read_${id}.fq.gz bowtie2.cmd &> bowtie2_${id}.log 2>&1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "id",
            "corrected_reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ifremer-bioinformatics__FLORA",
        "directive": [
            "tag \"$id\"",
            "label 'rrna_removal'",
            "beforeScript '. /appli/bioinfo/bowtie2/2.4.1/env.sh'",
            "publishDir \"${params.outdir}/${params.results_dirname}\", mode: 'copy', pattern : 'bowtie2.cmd', saveAs : { bowtie2_cmd -> \"cmd/${task.process}_complete.sh\" }"
        ],
        "when": "",
        "stub": ""
    }
}
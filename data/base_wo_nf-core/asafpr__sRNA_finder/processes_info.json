{
    "download_genome_patric": {
        "name_process": "download_genome_patric",
        "string_process": "\nprocess download_genome_patric{\n  publishDir path:params.outdir, mode:'copy'\n  label 'single_cpu'\n  input:\n    tuple gen, name from genomes\n\n  output:\n    tuple gen, name, file(\"${gen}.fna\") into ffiles\n\n  script:\n\"\"\"\nwget ftp://ftp.patricbrc.org/genomes/${gen}/*.fna\n\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\nwget ftp://ftp.patricbrc.org/genomes/${gen}/*.fna\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomes"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ffiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "asafpr__sRNA_finder",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'single_cpu'"
        ],
        "when": "",
        "stub": ""
    },
    "download_genomes": {
        "name_process": "download_genomes",
        "string_process": "\nprocess download_genomes{\n  publishDir path:params.outdir, mode:'copy'\n\n  label 'eutils'\n  label 'long_run'\n  input:\n    tuple gen, name from genomes\n    env NCBI_API_KEY from apikey\n  output:\n    tuple gen, name, file (\"library/gtdb/*.fna\") into ffiles\n\n  script:\n  \"\"\"\n  gtdbToTaxonomy.pl --genome $gen \n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  gtdbToTaxonomy.pl --genome $gen \n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genomes",
            "apikey"
        ],
        "nb_inputs": 2,
        "outputs": [
            "ffiles"
        ],
        "nb_outputs": 1,
        "name_workflow": "asafpr__sRNA_finder",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'eutils'",
            "label 'long_run'"
        ],
        "when": "",
        "stub": ""
    },
    "build_db": {
        "name_process": "build_db",
        "string_process": "\nprocess build_db{\n  publishDir path:params.outdir, mode:'copy'\n  \n  label 'blast'\n  label 'high_mem'\n\n  input:\n    tuple fn, name, file(f) from ffiles\n\n  output:\n    tuple fn, name, file(f), file(\"$f.*\") into bdb\n\n  script:\n  \"\"\"\n  makeblastdb -in $f -dbtype nucl\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  makeblastdb -in $f -dbtype nucl\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ffiles"
        ],
        "nb_inputs": 1,
        "outputs": [
            "bdb"
        ],
        "nb_outputs": 1,
        "name_workflow": "asafpr__sRNA_finder",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'blast'",
            "label 'high_mem'"
        ],
        "when": "",
        "stub": ""
    },
    "run_blast": {
        "name_process": "run_blast",
        "string_process": "\nprocess run_blast{\n  publishDir path:params.outdir, mode:'copy'\n\n  label 'blast'\n  label 'high_mem'\n\n  input:\n  tuple fn, name, file(fname), file(fall ) from bdb\n  file seq from seqs\n\n  output:\n    tuple fn, name, file(\"${fname}.blout\"), file(fname) into blout\n\n  script:\n  \"\"\"\n  blastn -db $fname -query $seq -out ${fname}.blout -outfmt '6 std qlen slen'  -template_type coding_and_optimal -template_length 16 -evalue 1000 -num_threads ${task.cpus} -task dc-megablast \n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  blastn -db $fname -query $seq -out ${fname}.blout -outfmt '6 std qlen slen'  -template_type coding_and_optimal -template_length 16 -evalue 1000 -num_threads ${task.cpus} -task dc-megablast \n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "bdb",
            "seqs"
        ],
        "nb_inputs": 2,
        "outputs": [
            "blout"
        ],
        "nb_outputs": 1,
        "name_workflow": "asafpr__sRNA_finder",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'blast'",
            "label 'high_mem'"
        ],
        "when": "",
        "stub": ""
    },
    "filter_blast": {
        "name_process": "filter_blast",
        "string_process": "\nprocess filter_blast{\n  publishDir path:params.outdir, mode:'copy'\n  label 'biopython'\n  tag \"$fn\"\n  input:\n    tuple fn, name, file(blo), file(orig) from blout\n    file sq from seqs\n  output:\n    file \"${fn}.txt\" into digest\n    file \"${fn}*.fa\" optional true into outseqs\n  script:\n\"\"\"\n#!/usr/bin/env python\n\nfrom Bio import SeqIO\n# Read the sequences file and get the names in order\nord = []\nwith open(\"${sq}\") as fin:\n  for line in fin:\n    if (line.startswith(\">\")):\n      ord.append(line.strip()[1:])\n\n# Read the blast input\nhasb = {o:-1 for o in ord}\noutseq = {}\nrecords = SeqIO.to_dict(SeqIO.parse(\"$orig\", \"fasta\"))\nmaxid = {o : 80 for o in ord}\nmaxcov = {o : 0.8 for o in ord}\nwith open(\"${blo}\") as bin:\n  for line in bin:\n    spl = line.strip().split(\"\\\\t\")\n    if ((float(spl[2]) > maxid[spl[0]]) & (float(spl[3]) > float(spl[12])*maxcov[spl[0]])):\n      maxid[spl[0]] = float(spl[2])\n      maxcov[spl[0]] = float(spl[3])/float(spl[12])\n      hasb[spl[0]] = 1\n      mfrom = min(int(spl[8]), int(spl[9]))-1\n      mto = max(int(spl[8]), int(spl[9]))\n      rev = int(spl[9]) < int(spl[8])\n      outseq[spl[0]] = str(records[spl[1]].seq[mfrom:mto])\n      if rev:\n        outseq[spl[0]] = str(records[spl[1]].seq[mfrom:mto].reverse_complement())\noutstr = \"${fn},\" + \",\".join(str(hasb[o]) for o in ord)\nwith open(\"${fn}.txt\", 'w') as fout:\n  fout.write(outstr + \"\\\\n\")\nfor k in  outseq:\n  with open(\"${fn}_\" + k + \".fa\", \"w\") as sout:\n    sout.write(\">${fn} ${name}\\\\n\" + outseq[k] + \"\\\\n\") \n\"\"\"\n}",
        "nb_lignes_process": 48,
        "string_script": "\"\"\"\n#!/usr/bin/env python\n\nfrom Bio import SeqIO\n# Read the sequences file and get the names in order\nord = []\nwith open(\"${sq}\") as fin:\n  for line in fin:\n    if (line.startswith(\">\")):\n      ord.append(line.strip()[1:])\n\n# Read the blast input\nhasb = {o:-1 for o in ord}\noutseq = {}\nrecords = SeqIO.to_dict(SeqIO.parse(\"$orig\", \"fasta\"))\nmaxid = {o : 80 for o in ord}\nmaxcov = {o : 0.8 for o in ord}\nwith open(\"${blo}\") as bin:\n  for line in bin:\n    spl = line.strip().split(\"\\\\t\")\n    if ((float(spl[2]) > maxid[spl[0]]) & (float(spl[3]) > float(spl[12])*maxcov[spl[0]])):\n      maxid[spl[0]] = float(spl[2])\n      maxcov[spl[0]] = float(spl[3])/float(spl[12])\n      hasb[spl[0]] = 1\n      mfrom = min(int(spl[8]), int(spl[9]))-1\n      mto = max(int(spl[8]), int(spl[9]))\n      rev = int(spl[9]) < int(spl[8])\n      outseq[spl[0]] = str(records[spl[1]].seq[mfrom:mto])\n      if rev:\n        outseq[spl[0]] = str(records[spl[1]].seq[mfrom:mto].reverse_complement())\noutstr = \"${fn},\" + \",\".join(str(hasb[o]) for o in ord)\nwith open(\"${fn}.txt\", 'w') as fout:\n  fout.write(outstr + \"\\\\n\")\nfor k in  outseq:\n  with open(\"${fn}_\" + k + \".fa\", \"w\") as sout:\n    sout.write(\">${fn} ${name}\\\\n\" + outseq[k] + \"\\\\n\") \n\"\"\"",
        "nb_lignes_script": 36,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blout",
            "seqs"
        ],
        "nb_inputs": 2,
        "outputs": [
            "digest",
            "outseqs"
        ],
        "nb_outputs": 2,
        "name_workflow": "asafpr__sRNA_finder",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'biopython'",
            "tag \"$fn\""
        ],
        "when": "",
        "stub": ""
    },
    "msa": {
        "name_process": "msa",
        "string_process": "\nprocess msa{\n  publishDir path:params.outdir, mode:'copy'\n\n  label 'mafft'\n  input:\n    file fa from outseqs.collect()\n  output:\n    file \"*.mafft\" into msa\n\n  script:\n\"\"\"\nfor m in \\$(ls *.fa | awk -F\"_\" '{print \\$NF}'| sort |uniq) ; do cat *\"\\$m\" > all\"\\$m\".fa &&  mafft all\"\\$m\".fa > MSA_\"\\$m\".mafft; done\n\"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "\"\"\"\nfor m in \\$(ls *.fa | awk -F\"_\" '{print \\$NF}'| sort |uniq) ; do cat *\"\\$m\" > all\"\\$m\".fa &&  mafft all\"\\$m\".fa > MSA_\"\\$m\".mafft; done\n\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outseqs"
        ],
        "nb_inputs": 1,
        "outputs": [
            "msa"
        ],
        "nb_outputs": 1,
        "name_workflow": "asafpr__sRNA_finder",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'mafft'"
        ],
        "when": "",
        "stub": ""
    },
    "combine_out": {
        "name_process": "combine_out",
        "string_process": "\nprocess combine_out{\n  publishDir path:params.outdir, mode:'copy'\n  input:\n    file allout from digest.collect()\n    file sq from seqs\n  \n  output:\n    file \"all_srnas_status.txt\" into allout\n\n  script:\n\"\"\"\ncat <<EOF > all_srnas_status.txt\nDATASET_BINARY\nSEPARATOR COMMA\n\nFIELD_COLORS,${params.colors}\nFIELD_SHAPES,${params.shapes}\nDATASET_LABEL,${params.label}\nEOF\n\nprintf \"FIELD_LABELS\" >> all_srnas_status.txt\ngrep \">\" $sq | tr  \">\"  \",\" | tr -d \"\\\\n\" >> all_srnas_status.txt\necho \"\" >> all_srnas_status.txt\necho \"DATA\" >> all_srnas_status.txt\n\ncat $allout >> all_srnas_status.txt\n\"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "\"\"\"\ncat <<EOF > all_srnas_status.txt\nDATASET_BINARY\nSEPARATOR COMMA\n\nFIELD_COLORS,${params.colors}\nFIELD_SHAPES,${params.shapes}\nDATASET_LABEL,${params.label}\nEOF\n\nprintf \"FIELD_LABELS\" >> all_srnas_status.txt\ngrep \">\" $sq | tr  \">\"  \",\" | tr -d \"\\\\n\" >> all_srnas_status.txt\necho \"\" >> all_srnas_status.txt\necho \"DATA\" >> all_srnas_status.txt\n\ncat $allout >> all_srnas_status.txt\n\"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "NeoFuse"
        ],
        "tools_url": [
            "https://bio.tools/NeoFuse"
        ],
        "tools_dico": [
            {
                "name": "NeoFuse",
                "uri": "https://bio.tools/NeoFuse",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2830",
                            "term": "Immunoproteins and antigens"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "Gene transcripts"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "Cancer biology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2640",
                            "term": "https://en.wikipedia.org/wiki/Oncology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3512",
                            "term": "mRNA features"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0310",
                                    "term": "Sequence assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0252",
                                    "term": "Peptide immunogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0252",
                                    "term": "Immunogenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0252",
                                    "term": "Antigenicity prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3799",
                                    "term": "Quantitation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Predicting fusion neoantigens from RNA sequencing data.\n\nThe Section for Bioinformatrics at the Biocenter of Innsbruck Medical University is commited to the generation, management, integration, and leveraging data from genomics studies.\n\nQuantification of the tumor immune contexture.\n\nZlatko Trajanoski awarded with ERC Advanced Grant.",
                "homepage": "https://icbi.i-med.ac.at/NeoFuse/"
            }
        ],
        "inputs": [
            "digest",
            "seqs"
        ],
        "nb_inputs": 2,
        "outputs": [
            "allout"
        ],
        "nb_outputs": 1,
        "name_workflow": "asafpr__sRNA_finder",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "prune_tree": {
        "name_process": "prune_tree",
        "string_process": "\nprocess prune_tree{\n  publishDir path:params.outdir, mode:'copy'\n  label 'ete3'\n\n  input:\n    file tree from tree_ch\n    file leaves from genomes_lst\n\n  output:\n    file \"${tree.baseName}.pruned.newick\" into prntree\n\n  script:\n\"\"\"\n#!/usr/bin/env python\nfrom ete3 import Tree\nfrom ete3.coretype.tree import TreeError\n# Read the tree\nt = Tree(\"$tree\", format=1, quoted_node_names=True)\n\n# Read the genomes (first column)\nlv = []\nwith open(\"$leaves\") as fin:\n    for line in fin:\n        lv.append(line.strip().split(\"\\\\t\")[0])\ntlv = t.get_leaf_names()\ntry:\n  t.prune(set(lv) & set(tlv))\nexcept TreeError:\n  raise\nt.write(format=1, outfile=\"${tree.baseName}.pruned.newick\")\n\"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "\"\"\"\n#!/usr/bin/env python\nfrom ete3 import Tree\nfrom ete3.coretype.tree import TreeError\n# Read the tree\nt = Tree(\"$tree\", format=1, quoted_node_names=True)\n\n# Read the genomes (first column)\nlv = []\nwith open(\"$leaves\") as fin:\n    for line in fin:\n        lv.append(line.strip().split(\"\\\\t\")[0])\ntlv = t.get_leaf_names()\ntry:\n  t.prune(set(lv) & set(tlv))\nexcept TreeError:\n  raise\nt.write(format=1, outfile=\"${tree.baseName}.pruned.newick\")\n\"\"\"",
        "nb_lignes_script": 18,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tree_ch",
            "genomes_lst"
        ],
        "nb_inputs": 2,
        "outputs": [
            "prntree"
        ],
        "nb_outputs": 1,
        "name_workflow": "asafpr__sRNA_finder",
        "directive": [
            "publishDir path:params.outdir, mode:'copy'",
            "label 'ete3'"
        ],
        "when": "",
        "stub": ""
    }
}
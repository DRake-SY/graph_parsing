{
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "process fastqc {\n    tag \"read qc: ${prefix}\"\n    label \"fastqc\"\n    input:\n        tuple val(prefix), path(reads)\n    output:\n        path(\"*_fastqc.{zip,html}\"), emit: all\n    script:\n        \"\"\"\n        fastqc -t \"${task.cpus}\" ${reads}\n        \"\"\"\n    }",
        "nb_lignes_process": 10,
        "string_script": "        \"\"\"\n        fastqc -t \"${task.cpus}\" ${reads}\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "prefix",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"read qc: ${prefix}\"",
            "label \"fastqc\""
        ],
        "when": "",
        "stub": ""
    },
    "fastp": {
        "name_process": "fastp",
        "string_process": "\nprocess fastp {\n    tag \"trimming: ${prefix}\"\n    label \"fastp\"\n    input:\n        tuple val(prefix), path(reads)\n        val(trim)\n        val(filter)\n        val(len)\n    output:\n        tuple val(prefix), path(\"${prefix}Trimmed.fastq.gz\"),\n            emit :trimmed_reads\n    script:\n        \"\"\"\n        fastp -w \"${task.cpus}\" -q \"${filter}\" -l \"${len}\" -3 -5 -M \"${trim}\" \\\n            -i \"${reads}\" -o \"${prefix}Trimmed.fastq.gz\"\n        \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "        \"\"\"\n        fastp -w \"${task.cpus}\" -q \"${filter}\" -l \"${len}\" -3 -5 -M \"${trim}\" \\\n            -i \"${reads}\" -o \"${prefix}Trimmed.fastq.gz\"\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "fastPHASE"
        ],
        "tools_url": [
            "https://bio.tools/fastphase"
        ],
        "tools_dico": [
            {
                "name": "fastPHASE",
                "uri": "https://bio.tools/fastphase",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3056",
                            "term": "Population genetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3454",
                                    "term": "Phasing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Imputation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3557",
                                    "term": "Data imputation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "fastPHASE is a program to estimate missing genotypes and unobserved haplotypes. It is an implementation of the model described in Scheet & Stephens (2006). This is a cluster-based model for haplotype variation, and gains its utility from implicitly modeling the genealogy of chromosomes in a random sample from a population as a tree but summarizing all haplotype variation in the \"tips\" of the trees.",
                "homepage": "http://scheet.org/software.html"
            }
        ],
        "inputs": [
            "prefix",
            "reads",
            "trim",
            "filter",
            "len"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"trimming: ${prefix}\"",
            "label \"fastp\""
        ],
        "when": "",
        "stub": ""
    },
    "quast": {
        "name_process": "quast",
        "string_process": "\nprocess quast {\n    tag \"assembly qc\"\n    label \"quast\"\n    publishDir \"${params.output}/\", mode: \"copy\"\n    input:\n        tuple val(prefix), path(assembly)\n        tuple val(prefix_long), path(assembly_long)\n    output:\n        path(\"quast_results/\"), emit: report\n    script:\n        \"\"\"\n        quast.py -t \"${task.cpus}\" -l \"${prefix}\",\"${prefix_long}\" \\\n            \"${assembly}\" \"${assembly_long}\"\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        quast.py -t \"${task.cpus}\" -l \"${prefix}\",\"${prefix_long}\" \\\n            \"${assembly}\" \"${assembly_long}\"\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "assembly",
            "prefix_long",
            "assembly_long"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"assembly qc\"",
            "label \"quast\"",
            "publishDir \"${params.output}/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n    label \"multiqc\"\n    publishDir \"${params.output}/\", mode: \"copy\"\n    input:\n        path(fastqc_for_multiqc)\n        path(quast_report)\n    output:\n        path(\"multiqc_report.html\")\n    script:\n        \"\"\"\n        multiqc .\n        \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        multiqc .\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "fastqc_for_multiqc",
            "quast_report"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "label \"multiqc\"",
            "publishDir \"${params.output}/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "cd_hit": {
        "name_process": "cd_hit",
        "string_process": "process cd_hit {\n    tag \"clustering: ${prefix}\"\n    label \"cd_hit\"\n    input:\n        tuple val(prefix), path(proteins), path(related_proteomes)\n    output:\n        tuple val(prefix), path(\"${prefix}.clustered.faa.clstr\"), emit: clusters\n    script:\n        \"\"\"\n        # first concatenate inputs\n        cat *.faa > cdhit_proteins.faa\n        # then run cd-hit\n        cd-hit -i cdhit_proteins.faa -o \"${prefix}.clustered.faa\" \\\n            -d 0 -d 0.95 -n 5 -T 6 -d 80\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        # first concatenate inputs\n        cat *.faa > cdhit_proteins.faa\n        # then run cd-hit\n        cd-hit -i cdhit_proteins.faa -o \"${prefix}.clustered.faa\" \\\n            -d 0 -d 0.95 -n 5 -T 6 -d 80\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "cd-hit"
        ],
        "tools_url": [
            "https://bio.tools/cd-hit"
        ],
        "tools_dico": [
            {
                "name": "cd-hit",
                "uri": "https://bio.tools/cd-hit",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "Cluster a nucleotide dataset into representative sequences.",
                "homepage": "https://github.com/weizhongli/cdhit"
            }
        ],
        "inputs": [
            "prefix",
            "proteins",
            "related_proteomes"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"clustering: ${prefix}\"",
            "label \"cd_hit\""
        ],
        "when": "",
        "stub": ""
    },
    "select_clusters": {
        "name_process": "select_clusters",
        "string_process": "\nprocess select_clusters {\n    tag \"clustering: ${prefix}\"\n    label \"biopython\"\n    input:\n        tuple val(prefix), path(clusters)\n        tuple val(prefix), path(proteins), path(related_proteomes)\n    output:\n        path(\"clusters/*.faa\"), emit: clusters\n    script:\n        \"\"\"\n        mkdir clusters\n        select_clusters.py --clstr \"${clusters}\" --faa_dir . --outdir clusters\n        \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        mkdir clusters\n        select_clusters.py --clstr \"${clusters}\" --faa_dir . --outdir clusters\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "clusters",
            "prefix",
            "proteins",
            "related_proteomes"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"clustering: ${prefix}\"",
            "label \"biopython\""
        ],
        "when": "",
        "stub": ""
    },
    "mafft": {
        "name_process": "mafft",
        "string_process": "\nprocess mafft {\n    tag \"msa\"\n    label \"mafft\"\n    input:\n        path(cluster)\n    output:\n        path(\"*.aln\"), emit: msa\n    script:\n        \"\"\"\n        mafft \"${cluster}\" > \"${cluster}.aln\"\n        \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "        \"\"\"\n        mafft \"${cluster}\" > \"${cluster}.aln\"\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MAFFT"
        ],
        "tools_url": [
            "https://bio.tools/MAFFT"
        ],
        "tools_dico": [
            {
                "name": "MAFFT",
                "uri": "https://bio.tools/MAFFT",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0492",
                                    "term": "Multiple alignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ]
                    }
                ],
                "description": "MAFFT (Multiple Alignment using Fast Fourier Transform) is a high speed multiple sequence alignment program.",
                "homepage": "http://mafft.cbrc.jp/alignment/server/index.html"
            }
        ],
        "inputs": [
            "cluster"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"msa\"",
            "label \"mafft\""
        ],
        "when": "",
        "stub": ""
    },
    "concat_msa": {
        "name_process": "concat_msa",
        "string_process": "\nprocess concat_msa {\n    tag \"msa\"\n    label \"biopython\"\n    input:\n        path(msas)\n    output:\n        path(\"msa_concat.align\"), emit: msa\n    script:\n        \"\"\"\n        concat_msa.py --msa ${msas} --output msa_concat.align\n        \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "        \"\"\"\n        concat_msa.py --msa ${msas} --output msa_concat.align\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "msas"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"msa\"",
            "label \"biopython\""
        ],
        "when": "",
        "stub": ""
    },
    "fasttree": {
        "name_process": "fasttree",
        "string_process": "\nprocess fasttree {\n    tag \"phylogeny\"\n    label \"fasttree\"\n    publishDir \"${params.output}/\", mode: \"copy\"\n    input:\n        path(msa)\n    output:\n        path(\"phylo.tree\")\n    script:\n        \"\"\"\n        fasttree < \"${msa}\" > phylo.tree\n        \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        fasttree < \"${msa}\" > phylo.tree\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastTree"
        ],
        "tools_url": [
            "https://bio.tools/fasttree"
        ],
        "tools_dico": [
            {
                "name": "FastTree",
                "uri": "https://bio.tools/fasttree",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic inference (from molecular sequences)"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree construction (from molecular sequences)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0540",
                                    "term": "Phylogenetic tree generation (from molecular sequences)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Infers approximately-maximum-likelihood phylogenetic trees from alignments of nucleotide or protein sequences.",
                "homepage": "http://www.microbesonline.org/fasttree/"
            }
        ],
        "inputs": [
            "msa"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"phylogeny\"",
            "label \"fasttree\"",
            "publishDir \"${params.output}/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "make_report": {
        "name_process": "make_report",
        "string_process": "process make_report {\n    label \"R\"\n    cache false\n    publishDir \"${params.output}/\", mode: \"copy\"\n    input:\n        path(rmd)\n        path(css)\n        path(fastqc_out)\n        path(quast_out)\n        tuple val(prefix_0), path(best_hit)\n        tuple val(prefix_1), path(mlst)\n        tuple val(prefix_2), path(abricate)\n        tuple val(prefix_3), path(platon)\n    output:\n        path(\"report.html\"), emit: report\n    script:\n        \"\"\"\n        cp ${rmd} here.Rmd  # otherwise renders in assets/ directory\n        Rscript -e \"rmarkdown::render('here.Rmd', output_file = 'report.html')\"\n        \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "        \"\"\"\n        cp ${rmd} here.Rmd  # otherwise renders in assets/ directory\n        Rscript -e \"rmarkdown::render('here.Rmd', output_file = 'report.html')\"\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "rmd",
            "css",
            "fastqc_out",
            "quast_out",
            "prefix_0",
            "best_hit",
            "prefix_1",
            "mlst",
            "prefix_2",
            "abricate",
            "prefix_3",
            "platon"
        ],
        "nb_inputs": 12,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "label \"R\"",
            "cache false",
            "publishDir \"${params.output}/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "unicycler": {
        "name_process": "unicycler",
        "string_process": "process unicycler {\n    tag \"assembly: ${prefix}\"\n    label \"unicycler\"\n    input:\n        tuple val(prefix), path(reads)\n    output:\n        tuple val(prefix), path(\"assembly/assembly.fasta\"), emit: contigs\n    script:\n        \"\"\"\n        unicycler -t \"${task.cpus}\" -s \"${reads}\" -o assembly\n        \"\"\"\n\n}",
        "nb_lignes_process": 11,
        "string_script": "        \"\"\"\n        unicycler -t \"${task.cpus}\" -s \"${reads}\" -o assembly\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "prefix",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"assembly: ${prefix}\"",
            "label \"unicycler\""
        ],
        "when": "",
        "stub": ""
    },
    "spades": {
        "name_process": "spades",
        "string_process": "\nprocess spades {\n    tag \"assembly: ${prefix}\"\n    label \"spades\"\n    publishDir \"${params.output}/\", mode: \"copy\"\n    input:\n        tuple val(prefix), path(reads)\n    output:\n        tuple val(prefix), path(\"${prefix}.contigs.fasta\"), emit: contigs\n    script:\n        def mem = \"${task.memory.toString().replaceAll(/[\\sGB]/,'')}\"\n        \"\"\"\n        spades.py --threads \"${task.cpus}\" -m \"${mem}\" \\\n            -k 27,47,77,107,127 -s \"${reads}\" -o assembly\n        mv assembly/scaffolds.fasta \"${prefix}.contigs.fasta\"\n        \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "        def mem = \"${task.memory.toString().replaceAll(/[\\sGB]/,'')}\"\n        \"\"\"\n        spades.py --threads \"${task.cpus}\" -m \"${mem}\" \\\n            -k 27,47,77,107,127 -s \"${reads}\" -o assembly\n        mv assembly/scaffolds.fasta \"${prefix}.contigs.fasta\"\n        \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"assembly: ${prefix}\"",
            "label \"spades\"",
            "publishDir \"${params.output}/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "spades_hybrid": {
        "name_process": "spades_hybrid",
        "string_process": "\nprocess spades_hybrid {\n    tag \"assembly: hybrid\"\n    label \"spades\"\n    publishDir \"${params.output}/\", mode: \"copy\"\n    input:\n        tuple val(_0), path(reads)\n        tuple val(_1), path(long_reads)\n    output:\n        tuple val(\"hybrid\"), path(\"hybrid.contigs.fasta\"), emit: contigs\n    script:\n        def mem = \"${task.memory.toString().replaceAll(/[\\sGB]/,'')}\"\n        \"\"\"\n        spades.py --threads \"${task.cpus}\" -m \"${mem}\" \\\n            -k 27,47,77,107,127 -s \"${reads}\" --nanopore \"${long_reads}\" \\\n            -o assembly\n        mv assembly/scaffolds.fasta hybrid.contigs.fasta\n        \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "        def mem = \"${task.memory.toString().replaceAll(/[\\sGB]/,'')}\"\n        \"\"\"\n        spades.py --threads \"${task.cpus}\" -m \"${mem}\" \\\n            -k 27,47,77,107,127 -s \"${reads}\" --nanopore \"${long_reads}\" \\\n            -o assembly\n        mv assembly/scaffolds.fasta hybrid.contigs.fasta\n        \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "0",
            "reads",
            "1",
            "long_reads"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"assembly: hybrid\"",
            "label \"spades\"",
            "publishDir \"${params.output}/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "build_db": {
        "name_process": "build_db",
        "string_process": "process build_db {\n    tag \"db\"\n    label \"mmseqs2\"\n    output:\n        path(\"db/\"), emit: database\n    script:\n        \"\"\"\n        mkdir db\n        mmseqs databases UniProtKB/Swiss-Prot db/swissprot tmp\n        \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "        \"\"\"\n        mkdir db\n        mmseqs databases UniProtKB/Swiss-Prot db/swissprot tmp\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "MMseqs"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"db\"",
            "label \"mmseqs2\""
        ],
        "when": "",
        "stub": ""
    },
    "assign_taxonomy": {
        "name_process": "assign_taxonomy",
        "string_process": "\nprocess assign_taxonomy {\n    tag \"${prefix}\"\n    label \"mmseqs2\"\n    input:\n        tuple val(prefix), path(assembly)\n        path(db)\n    output:\n        tuple val(prefix), path(\"taxonomy_lca.tsv\"), emit: lca\n    script:\n        \"\"\"\n        mmseqs easy-taxonomy \"${assembly}\" \"${db}/swissprot\" taxonomy tmp\n        \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        mmseqs easy-taxonomy \"${assembly}\" \"${db}/swissprot\" taxonomy tmp\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MMseqs"
        ],
        "tools_url": [
            "https://bio.tools/mmseqs"
        ],
        "tools_dico": [
            {
                "name": "MMseqs",
                "uri": "https://bio.tools/mmseqs",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Gene and protein families"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0623",
                            "term": "Genes, gene family or system"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence clustering"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster construction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0291",
                                    "term": "Sequence cluster generation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software suite for very fast protein sequence searches and clustering of huge protein sequence data sets.",
                "homepage": "https://github.com/soedinglab/MMseqs"
            }
        ],
        "inputs": [
            "prefix",
            "assembly",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"${prefix}\"",
            "label \"mmseqs2\""
        ],
        "when": "",
        "stub": ""
    },
    "download_related": {
        "name_process": "download_related",
        "string_process": "\nprocess download_related {\n    label \"biopython\"\n    input:\n        tuple val(prefix), path(taxonomy)\n    output:\n        tuple val(prefix), path(\"GCF*.fasta.gz\"), emit: genomes\n        tuple val(prefix), path(\"renamed/GCF*.faa\"), emit: proteomes\n        tuple val(prefix), path(\"best_hit.txt\"), emit: best_hit\n    script:\n        \"\"\"\n        mkdir renamed\n        download.py --lca \"${taxonomy}\" > best_hit.txt\n        rename.py --outdir renamed --faa *.faa.gz\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        mkdir renamed\n        download.py --lca \"${taxonomy}\" > best_hit.txt\n        rename.py --outdir renamed --faa *.faa.gz\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "taxonomy"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "label \"biopython\""
        ],
        "when": "",
        "stub": ""
    },
    "prodigal": {
        "name_process": "prodigal",
        "string_process": "process prodigal {\n    tag \"annotation: ${prefix}\"\n    label \"prodigal\"\n    input:\n        tuple val(prefix), path(assembly)\n    output:\n        tuple val(prefix), path(\"${prefix}.faa.gz\"), emit: proteins\n        tuple val(prefix), path(\"${prefix}.gff.gz\"), emit: annotations\n    script:\n        \"\"\"\n        prodigal -a \"${prefix}.faa\" -f gff -m \\\n            -i \"${assembly}\" -o \"${prefix}.gff\"\n        gzip ${prefix}.{faa,gff}\n        \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "        \"\"\"\n        prodigal -a \"${prefix}.faa\" -f gff -m \\\n            -i \"${assembly}\" -o \"${prefix}.gff\"\n        gzip ${prefix}.{faa,gff}\n        \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "assembly"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"annotation: ${prefix}\"",
            "label \"prodigal\""
        ],
        "when": "",
        "stub": ""
    },
    "rename_proteins": {
        "name_process": "rename_proteins",
        "string_process": "\nprocess rename_proteins {\n    tag \"rename: ${prefix}\"\n    label \"biopython\"\n    input:\n        tuple val(prefix), path(proteins)\n    output:\n        tuple val(prefix), path(\"renamed/${prefix}.faa\"), emit: proteins\n    script:\n        \"\"\"\n        mkdir renamed\n        rename.py --outdir renamed --faa \"${proteins}\"\n        \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        mkdir renamed\n        rename.py --outdir renamed --faa \"${proteins}\"\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "proteins"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"rename: ${prefix}\"",
            "label \"biopython\""
        ],
        "when": "",
        "stub": ""
    },
    "mlst_check": {
        "name_process": "mlst_check",
        "string_process": "\nprocess mlst_check {\n    tag \"mlst: ${prefix}\"\n    label \"mlst_check\"\n    publishDir \"${params.output}/\", mode: \"copy\"\n    input:\n        tuple val(prefix), path(assembly), val(species)\n    output:\n        tuple val(prefix), path(\"mlst_results.allele.csv\"), emit: mlst\n    script:\n        \"\"\"\n        get_sequence_type -s \"\\$(cat ${species})\" \"${assembly}\"\n        \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        get_sequence_type -s \"\\$(cat ${species})\" \"${assembly}\"\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "prefix",
            "species",
            "assembly"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"mlst: ${prefix}\"",
            "label \"mlst_check\"",
            "publishDir \"${params.output}/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "abricate": {
        "name_process": "abricate",
        "string_process": "\nprocess abricate {\n    tag \"antiobiotic resistance: ${prefix}\"\n    label \"abricate\"\n    publishDir \"${params.output}/\", mode: \"copy\"\n    input:\n        tuple val(prefix), path(assembly)\n    output:\n        tuple val(prefix), path(\"${prefix}.resistance.txt\"), emit: results\n    script:\n        \"\"\"\n        abricate \"${assembly}\" > \"${prefix}.resistance.txt\"\n        \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "        \"\"\"\n        abricate \"${assembly}\" > \"${prefix}.resistance.txt\"\n        \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "ABRicate"
        ],
        "tools_url": [
            "https://bio.tools/ABRicate"
        ],
        "tools_dico": [
            {
                "name": "ABRicate",
                "uri": "https://bio.tools/ABRicate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3482",
                                    "term": "Antimicrobial resistance prediction"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            },
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0916",
                                "term": "Gene report"
                            }
                        ]
                    }
                ],
                "description": "Mass screening of contigs for antimicrobial resistance or virulence genes.",
                "homepage": "https://github.com/tseemann/abricate"
            }
        ],
        "inputs": [
            "prefix",
            "assembly"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"antiobiotic resistance: ${prefix}\"",
            "label \"abricate\"",
            "publishDir \"${params.output}/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    },
    "platon_db": {
        "name_process": "platon_db",
        "string_process": "\nprocess platon_db {\n    tag \"plasmid detection: db download\"\n    output:\n        path(\"db\"), emit: database\n    script:\n        \"\"\"\n        wget https://zenodo.org/record/4066768/files/db.tar.gz\n        tar -xzf db.tar.gz\n        \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "        \"\"\"\n        wget https://zenodo.org/record/4066768/files/db.tar.gz\n        tar -xzf db.tar.gz\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"plasmid detection: db download\""
        ],
        "when": "",
        "stub": ""
    },
    "platon": {
        "name_process": "platon",
        "string_process": "\nprocess platon {\n    tag \"plasmid detection: ${prefix}\"\n    label \"platon\"\n    publishDir \"${params.output}/\", mode: \"copy\"\n    input:\n        tuple val(prefix), path(assembly)\n        path(database)\n    output:\n        tuple val(prefix), path(\"hybrid.contigs.tsv\"), emit: results\n    script:\n        \"\"\"\n        platon --threads \"${task.cpus}\" --db \"${database}\" \\\n            \"${assembly}\"\n        \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "        \"\"\"\n        platon --threads \"${task.cpus}\" --db \"${database}\" \\\n            \"${assembly}\"\n        \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Platon"
        ],
        "tools_url": [
            "https://bio.tools/Platon"
        ],
        "tools_dico": [
            {
                "name": "Platon",
                "uri": "https://bio.tools/Platon",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0798",
                            "term": "Mobile genetic elements"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2995",
                                    "term": "Sequence classification"
                                }
                            ],
                            []
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": []
                    }
                ],
                "description": "Identification and characterization of bacterial plasmid contigs from short-read draft assemblies.",
                "homepage": "https://github.com/oschwengers/platon"
            }
        ],
        "inputs": [
            "prefix",
            "assembly",
            "database"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "HadrienG__arbetsprov",
        "directive": [
            "tag \"plasmid detection: ${prefix}\"",
            "label \"platon\"",
            "publishDir \"${params.output}/\", mode: \"copy\""
        ],
        "when": "",
        "stub": ""
    }
}
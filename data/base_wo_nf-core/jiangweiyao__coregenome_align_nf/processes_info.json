{
    "fastqc": {
        "name_process": "fastqc",
        "string_process": "\nprocess fastqc {\n    \n                            \n    publishDir params.out, pattern: \"*.html\", mode: 'copy', overwrite: true\n\n    input:\n    set val(name), file(fastq) from fastq_files2\n \n    output:\n    file \"*_fastqc.{zip,html}\" into qc_files\n\n    \"\"\"\n    fastqc -q ${fastq}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    fastqc -q ${fastq}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "fastq_files2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "qc_files"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__coregenome_align_nf",
        "directive": [
            "publishDir params.out, pattern: \"*.html\", mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "multiqc": {
        "name_process": "multiqc",
        "string_process": "\nprocess multiqc {\n\n    errorStrategy 'ignore'\n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    file reports from qc_files.collect().ifEmpty([])\n\n    output:\n    path \"multiqc_report.html\" into multiqc_output\n\n    \"\"\"\n    multiqc $reports\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    multiqc $reports\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "qc_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "multiqc_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__coregenome_align_nf",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "mash_screen_genome": {
        "name_process": "mash_screen_genome",
        "string_process": "\nprocess mash_screen_genome {\n\n                            \n                                                          \n    memory '8 GB'\n\n    input:\n    tuple val(name), file(fastq) from fastq_files3\n\n    output:\n    tuple val(name), path(\"*_pathogen_id_raw.out\") into mash_screen_genome_out\n\n    \"\"\"\n    cat ${fastq} | mash screen ${mash_genome_db} - | sort -gr > ${name}_pathogen_id_raw.out\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    cat ${fastq} | mash screen ${mash_genome_db} - | sort -gr > ${name}_pathogen_id_raw.out\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Mash"
        ],
        "tools_url": [
            "https://bio.tools/mash"
        ],
        "tools_dico": [
            {
                "name": "Mash",
                "uri": "https://bio.tools/mash",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_2533",
                            "term": "DNA mutation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2269",
                            "term": "Statistics and probability"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Phylogenetic distance matrix generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0289",
                                    "term": "Sequence distance matrix construction"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Fast genome and metagenome distance estimation using MinHash.",
                "homepage": "https://github.com/marbl/mash"
            }
        ],
        "inputs": [
            "fastq_files3"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mash_screen_genome_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__coregenome_align_nf",
        "directive": [
            "memory '8 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "tabulate_mash_genome": {
        "name_process": "tabulate_mash_genome",
        "string_process": "\nprocess tabulate_mash_genome {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(name), file(table) from mash_screen_genome_out\n\n    output:\n    path \"*_pathogen_id.out\" into tabulate_mash_genome_out\n\n    \"\"\"\n    python3 ${mash_parser} -i ${table} -o ${name}_pathogen_id.out -n ${params.mashtopn}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    python3 ${mash_parser} -i ${table} -o ${name}_pathogen_id.out -n ${params.mashtopn}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mash_screen_genome_out"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tabulate_mash_genome_out"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__coregenome_align_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "prokka_fasta": {
        "name_process": "prokka_fasta",
        "string_process": "\nprocess prokka_fasta {\n\n                            \n                                                          \n\n    cpus params.thread\n\n    input:\n    file(fasta) from refseq_files\n\n    output:\n    path(\"*.gff\") into prokka_fasta_output\n\n    \"\"\"\n    prokka --cpus ${params.thread} --outdir ${fasta.simpleName}_prokka --prefix ${fasta.simpleName} ${fasta}\n    cp ${fasta.simpleName}_prokka/${fasta.simpleName}.gff ./\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    prokka --cpus ${params.thread} --outdir ${fasta.simpleName}_prokka --prefix ${fasta.simpleName} ${fasta}\n    cp ${fasta.simpleName}_prokka/${fasta.simpleName}.gff ./\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "refseq_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "prokka_fasta_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__coregenome_align_nf",
        "directive": [
            "cpus params.thread"
        ],
        "when": "",
        "stub": ""
    },
    "bbmap_adapter_trimming": {
        "name_process": "bbmap_adapter_trimming",
        "string_process": "\nprocess bbmap_adapter_trimming {\n\n                            \n                                                          \n\n    input:\n    tuple val(name), file(fastq) from fastq_files\n\n    output:\n    tuple val(name), file(\"*_clean{1,2}.fq.gz\") into trimmed_fastq\n\n    \"\"\"\n    bbduk.sh -Xmx1g in1=${fastq[0]} in2=${fastq[1]} out1=int1.fq.gz out2=int2.fq.gz ref=${phix} k=31 hdist=1 t=1\n    bbduk.sh -Xmx1g in1=int1.fq.gz in2=int2.fq.gz out1=${name}_clean1.fq.gz out2=${name}_clean2.fq.gz ref=${adapters} ktrim=r k=23 mink=11 hdist=1 t=1 tpe tbo\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    bbduk.sh -Xmx1g in1=${fastq[0]} in2=${fastq[1]} out1=int1.fq.gz out2=int2.fq.gz ref=${phix} k=31 hdist=1 t=1\n    bbduk.sh -Xmx1g in1=int1.fq.gz in2=int2.fq.gz out1=${name}_clean1.fq.gz out2=${name}_clean2.fq.gz ref=${adapters} ktrim=r k=23 mink=11 hdist=1 t=1 tpe tbo\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fastq_files"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimmed_fastq"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__coregenome_align_nf",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "assembly": {
        "name_process": "assembly",
        "string_process": "\nprocess assembly {\n\n                            \n                                                          \n    errorStrategy  { task.attempt <= maxRetries  ? 'retry' : 'ignore' }\n    maxRetries 3\n\n    memory { 4.GB * params.thread * task.attempt * task.attempt }\n    cpus params.thread\n\n    input:\n    tuple val(name), file(fastq) from trimmed_fastq\n\n    output:\n    tuple val(name), path(\"*_scaffolds.fasta\") into assembly_output\n\n    \"\"\"\n    spades.py -1 ${fastq[0]} -2 ${fastq[1]} -o ${name} -t ${params.thread} -m \\$((4 * $params.thread * $task.attempt * $task.attempt))\n    cp ${name}/scaffolds.fasta ${name}_scaffolds.fasta\n    \"\"\"\n\n}",
        "nb_lignes_process": 21,
        "string_script": "\"\"\"\n    spades.py -1 ${fastq[0]} -2 ${fastq[1]} -o ${name} -t ${params.thread} -m \\$((4 * $params.thread * $task.attempt * $task.attempt))\n    cp ${name}/scaffolds.fasta ${name}_scaffolds.fasta\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trimmed_fastq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "assembly_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__coregenome_align_nf",
        "directive": [
            "errorStrategy { task.attempt <= maxRetries ? 'retry' : 'ignore' }",
            "maxRetries 3",
            "memory { 4.GB * params.thread * task.attempt * task.attempt }",
            "cpus params.thread"
        ],
        "when": "",
        "stub": ""
    },
    "bbmap_size_filter": {
        "name_process": "bbmap_size_filter",
        "string_process": "\nprocess bbmap_size_filter {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    input:\n    tuple val(name), file(assembly) from assembly_output\n\n    output:\n    tuple val(name), path(\"*_scaffolds_filtered.fasta\") into assembly_filter_output, assembly_filter_output2\n\n    \"\"\"\n    reformat.sh in=${assembly} out=${assembly.simpleName}_filtered.fasta minlength=${params.sizefilter}\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n    reformat.sh in=${assembly} out=${assembly.simpleName}_filtered.fasta minlength=${params.sizefilter}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "assembly_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "assembly_filter_output",
            "assembly_filter_output2"
        ],
        "nb_outputs": 2,
        "name_workflow": "jiangweiyao__coregenome_align_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true"
        ],
        "when": "",
        "stub": ""
    },
    "busco": {
        "name_process": "busco",
        "string_process": "\nprocess busco {\n\n    errorStrategy 'ignore'\n    publishDir params.out, mode: 'copy', overwrite: true\n    memory '8 GB'\n\n    input:\n    tuple val(name), file(assembly) from assembly_filter_output2\n\n    output:\n    path(\"*/short_summary*.txt\") into busco_output\n\n    \"\"\"\n    busco --auto-lineage-prok -f -m geno -o ${name}_busco -i ${assembly} -c 1\n    \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    busco --auto-lineage-prok -f -m geno -o ${name}_busco -i ${assembly} -c 1\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BUSCO"
        ],
        "tools_url": [
            "https://bio.tools/busco"
        ],
        "tools_dico": [
            {
                "name": "BUSCO",
                "uri": "https://bio.tools/busco",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3308",
                            "term": "Transcriptomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly validation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Assembly quality evaluation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3180",
                                    "term": "Sequence assembly QC"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_1234",
                                "term": "Sequence set (nucleic acid)"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "Provides measures for quantitative assessment of genome assembly, gene set, and transcriptome completeness based on evolutionarily informed expectations of gene content from near-universal single-copy orthologs.",
                "homepage": "http://busco.ezlab.org/"
            }
        ],
        "inputs": [
            "assembly_filter_output2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "busco_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__coregenome_align_nf",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir params.out, mode: 'copy', overwrite: true",
            "memory '8 GB'"
        ],
        "when": "",
        "stub": ""
    },
    "prokka_assembly": {
        "name_process": "prokka_assembly",
        "string_process": "\nprocess prokka_assembly {\n\n                            \n                                                          \n\n    cpus params.thread\n\n    input:\n    tuple val(name), file(assembly) from assembly_filter_output\n\n    output:\n    tuple val(name), path(\"*.gff\") into prokka_assembly_output\n\n    \"\"\"\n    prokka --cpus ${params.thread} --outdir ${name}_prokka --prefix ${name} ${assembly}\n    cp ${name}_prokka/${name}.gff ./\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    prokka --cpus ${params.thread} --outdir ${name}_prokka --prefix ${name} ${assembly}\n    cp ${name}_prokka/${name}.gff ./\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [
            "assembly_filter_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "prokka_assembly_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__coregenome_align_nf",
        "directive": [
            "cpus params.thread"
        ],
        "when": "",
        "stub": ""
    },
    "roary": {
        "name_process": "roary",
        "string_process": "\nprocess roary {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    memory { 2.GB * params.roarythread }\n    cpus params.roarythread\n\n    input:\n    file gff from prokka_fasta_output.mix(prokka_assembly_output).collect()\n\n    output:\n    path(\"*\") into roary_output\n\n    \"\"\"\n    roary -f . -e -n -v -r *.gff -p ${params.roarythread}\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    roary -f . -e -n -v -r *.gff -p ${params.roarythread}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Roary"
        ],
        "tools_url": [
            "https://bio.tools/roary"
        ],
        "tools_dico": [
            {
                "name": "Roary",
                "uri": "https://bio.tools/roary",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high speed stand alone pan genome pipeline, which takes annotated assemblies in GFF3 format (produced by Prokka (Seemann, 2014)) and calculates the pan genome.",
                "homepage": "http://sanger-pathogens.github.io/Roary/"
            }
        ],
        "inputs": [
            "prokka_fasta_output",
            "prokka_assembly_output"
        ],
        "nb_inputs": 2,
        "outputs": [
            "roary_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__coregenome_align_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true",
            "memory { 2.GB * params.roarythread }",
            "cpus params.roarythread"
        ],
        "when": "",
        "stub": ""
    },
    "raxmlng": {
        "name_process": "raxmlng",
        "string_process": "\nprocess raxmlng {\n\n                            \n    publishDir params.out, mode: 'copy', overwrite: true\n\n    memory '16 GB'\n    cpus params.thread\n\n    input:\n    file roary_output from roary_output\n\n    output:\n    path(\"core_gene.raxml*\") into raxml_output\n\n    \"\"\"\n    raxml-ng --msa core_gene_alignment.aln --model GTR+G --prefix core_gene --threads ${params.thread} --seed 1234 \n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "\"\"\"\n    raxml-ng --msa core_gene_alignment.aln --model GTR+G --prefix core_gene --threads ${params.thread} --seed 1234 \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "RAxML-NG"
        ],
        "tools_url": [
            "https://bio.tools/RAxML-NG"
        ],
        "tools_dico": [
            {
                "name": "RAxML-NG",
                "uri": "https://bio.tools/RAxML-NG",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3810",
                            "term": "Agricultural science"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0194",
                            "term": "Phylogenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3293",
                            "term": "Phylogenetics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic inference (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0552",
                                    "term": "Phylogenetic tree bootstrapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree construction (maximum likelihood and Bayesian methods)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0547",
                                    "term": "Phylogenetic tree generation (maximum likelihood and Bayesian methods)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Phylogenetic tree inference tool which uses maximum-likelihood (ML) optimality criterion.",
                "homepage": "https://raxml-ng.vital-it.ch/"
            }
        ],
        "inputs": [
            "roary_output"
        ],
        "nb_inputs": 1,
        "outputs": [
            "raxml_output"
        ],
        "nb_outputs": 1,
        "name_workflow": "jiangweiyao__coregenome_align_nf",
        "directive": [
            "publishDir params.out, mode: 'copy', overwrite: true",
            "memory '16 GB'",
            "cpus params.thread"
        ],
        "when": "",
        "stub": ""
    }
}
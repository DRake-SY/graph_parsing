{
    "make_lowercase": {
        "name_process": "make_lowercase",
        "string_process": "\nprocess make_lowercase {\n\n    tag \"MAKE ALL LINES LOWERCASE\"\n\n\tlabel \"nolabel\"\n   \n    memory '1 GB'\n    \n    cpus 1\n\n    errorStrategy 'finish'\n    \n    input: \n    \tset name, group, file(filename) from input_channel\n    \n    output: \n                                                               \n    \ttuple val(group),  val(name), file(\"${filename}.lowercase.tsv\") into output_channel\n\n    script:\n    \"\"\"\n    make_lowercase.py ${filename}\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    make_lowercase.py ${filename}\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_channel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "output_channel"
        ],
        "nb_outputs": 1,
        "name_workflow": "kmayerb__nf-templates",
        "directive": [
            "tag \"MAKE ALL LINES LOWERCASE\"",
            "label \"nolabel\"",
            "memory '1 GB'",
            "cpus 1",
            "errorStrategy 'finish'"
        ],
        "when": "",
        "stub": ""
    },
    "tar_files_by_group": {
        "name_process": "tar_files_by_group",
        "string_process": "\nprocess tar_files_by_group {\n\n    tag \"COMNBINE FILES BY GROUP\"\n    \n    label \"nolabel\"\n\n    publishDir params.output_folder, mode: 'copy', overwrite: true\n    \n    memory '1 GB'\n    \n    cpus 1\n\n    errorStrategy 'finish'\n    \n    input: \n        set val(group), file(file_list) from output_channel.groupTuple()\n    \n    output: \n       file(\"${group}.tar.gz\") into final_output_channel\n\n    script:\n    \n    \"\"\"\n    mkdir ${group}\n    for file in \\$(echo ${file_list.join(' ')}); do mv \"\\$file\" ${group}; done\n    tar -czvf ${group}.tar.gz ${group}\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    mkdir ${group}\n    for file in \\$(echo ${file_list.join(' ')}); do mv \"\\$file\" ${group}; done\n    tar -czvf ${group}.tar.gz ${group}\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "output_channel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "final_output_channel"
        ],
        "nb_outputs": 1,
        "name_workflow": "kmayerb__nf-templates",
        "directive": [
            "tag \"COMNBINE FILES BY GROUP\"",
            "label \"nolabel\"",
            "publishDir params.output_folder, mode: 'copy', overwrite: true",
            "memory '1 GB'",
            "cpus 1",
            "errorStrategy 'finish'"
        ],
        "when": "",
        "stub": ""
    },
    "combine_files_by_group": {
        "name_process": "combine_files_by_group",
        "string_process": "\nprocess combine_files_by_group {\n\n    tag \"WORK ON GROUPS OF FILES WITH PYTHON\"\n    \n    label \"nolabel\"\n\n    publishDir params.output_folder, mode: 'copy', overwrite: true\n    \n    memory '1 GB'\n    \n    cpus 1\n\n    errorStrategy 'finish'\n    \n    input: \n        set val(group), val(name), file(file_list) from output_channel.groupTuple(sort: { it[1]} )\n    \n    output: \n       file(\"${group}.tsv\") into final_output_channel\n\n    script:\n    \"\"\"\n    concat.py ${file_list.join(' ')} > ${group}.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    concat.py ${file_list.join(' ')} > ${group}.tsv\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "output_channel"
        ],
        "nb_inputs": 1,
        "outputs": [
            "final_output_channel"
        ],
        "nb_outputs": 1,
        "name_workflow": "kmayerb__nf-templates",
        "directive": [
            "tag \"WORK ON GROUPS OF FILES WITH PYTHON\"",
            "label \"nolabel\"",
            "publishDir params.output_folder, mode: 'copy', overwrite: true",
            "memory '1 GB'",
            "cpus 1",
            "errorStrategy 'finish'"
        ],
        "when": "",
        "stub": ""
    }
}
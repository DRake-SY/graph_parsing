{
    "makedb": {
        "name_process": "makedb",
        "string_process": "\nprocess makedb {\n    storeDir \"$dbDir\"\n\n    input:\n    set basename, file(blastFile) from file_for_db\n\n    output:\n             \n    set basename, file(\"${basename}_db.*\") into db\n\n    script:\n    \"\"\"\n    makeblastdb -in $blastFile -dbtype $dbtype -out ${basename}_db -parse_seqids -hash_index \n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    makeblastdb -in $blastFile -dbtype $dbtype -out ${basename}_db -parse_seqids -hash_index \n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "file_for_db"
        ],
        "nb_inputs": 1,
        "outputs": [
            "db"
        ],
        "nb_outputs": 1,
        "name_workflow": "rnharmening__DupGeneIdentifier",
        "directive": [
            "storeDir \"$dbDir\""
        ],
        "when": "",
        "stub": ""
    },
    "blast": {
        "name_process": "blast",
        "string_process": "\nprocess blast {\n    publishDir \"$pubDir\", mode: 'copy'\n\n    input:\n    set basename, file(db), file(blastFile) from db.join(file_for_blast)\n    val dbDir\n\n    output:\n    file out_file into blast_table_ch\n\n    script:\n    out_file = \"${basename}.blast_hits.tsv\"\n    \"\"\"\n    $blast_cmd -query $blastFile \\\n    -db $dbDir/${basename}_db \\\n    -out $out_file \\\n    -outfmt '6 qaccver saccver pident length mismatch gapopen qstart qend sstart send evalue bitscore qframe sframe qlen slen qcovs qcovhsp' \\\n    -evalue $params.eval \\\n    -max_target_seqs $params.max_target_seqs -num_threads 10 \n    \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "    out_file = \"${basename}.blast_hits.tsv\"\n    \"\"\"\n    $blast_cmd -query $blastFile \\\n    -db $dbDir/${basename}_db \\\n    -out $out_file \\\n    -outfmt '6 qaccver saccver pident length mismatch gapopen qstart qend sstart send evalue bitscore qframe sframe qlen slen qcovs qcovhsp' \\\n    -evalue $params.eval \\\n    -max_target_seqs $params.max_target_seqs -num_threads 10 \n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "db",
            "file_for_blast",
            "dbDir"
        ],
        "nb_inputs": 3,
        "outputs": [
            "blast_table_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "rnharmening__DupGeneIdentifier",
        "directive": [
            "publishDir \"$pubDir\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "identify_duplicated_genes": {
        "name_process": "identify_duplicated_genes",
        "string_process": "\nprocess identify_duplicated_genes {\n    publishDir \"$pubDir\", mode: 'copy'\n\n    input:\n    file blast_table from blast_table_ch\n \n    output:\n    file out_file into identical_identification_ch\n\n    script:\n    out_file = \"${blast_table.simpleName}.duplicates.tsv\"\n    \"\"\"\n    identify_duplicated_genes.py \\\n        -i $blast_table \\\n        -o $out_file \\\n        --pident $params.pident_threshold \\\n        --qcovs $params.qcovs_threshold\n    \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "    out_file = \"${blast_table.simpleName}.duplicates.tsv\"\n    \"\"\"\n    identify_duplicated_genes.py \\\n        -i $blast_table \\\n        -o $out_file \\\n        --pident $params.pident_threshold \\\n        --qcovs $params.qcovs_threshold\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "blast_table_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "identical_identification_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "rnharmening__DupGeneIdentifier",
        "directive": [
            "publishDir \"$pubDir\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "identify_idetical_to_remove_genes": {
        "name_process": "identify_idetical_to_remove_genes",
        "string_process": "\nprocess identify_idetical_to_remove_genes {\n    publishDir \"$pubDir\", mode: 'copy'\n\n    input:\n    file in_file from identical_identification_ch\n \n    output:\n    file out_file\n\n    script:\n    out_file = \"${in_file.simpleName}.identical_to_remove.tsv\"\n    \"\"\"\n      identical_genes.py \\\n      -i $in_file \\\n      -o $out_file\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    out_file = \"${in_file.simpleName}.identical_to_remove.tsv\"\n    \"\"\"\n      identical_genes.py \\\n      -i $in_file \\\n      -o $out_file\n    \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "identical_identification_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "out_file"
        ],
        "nb_outputs": 1,
        "name_workflow": "rnharmening__DupGeneIdentifier",
        "directive": [
            "publishDir \"$pubDir\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "align_paralogs_01": {
        "name_process": "align_paralogs_01",
        "string_process": "\nprocess align_paralogs_01 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  file(external_outgroups_file) from outgroups_file_ch\n  file(paralog_folder) from paralogs_ch_1\n\n  output:\n  stdout outgroup_coverage_ch\n  file(\"01_alignments\")\n  file(\"02_alignments_hmmcleaned\") into (alignments_hmmcleaned_ch_1,\n                                         alignments_hmmcleaned_ch_2,\n                                         alignments_hmmcleaned_ch_3,\n                                         alignments_hmmcleaned_ch_4)\n\n  script:\n  external_outgroups_list = params.external_outgroups?.tokenize(',')\n  external_outgroups_string = ''\n\n  for (outgroup in external_outgroups_list) {\n    external_outgroup_string = \"-external_outgroup ${outgroup} \"\n    external_outgroups_string = external_outgroups_string + external_outgroup_string\n  }\n                                       \n\n  internal_outgroups_list = params.internal_outgroups?.tokenize(',')\n  internal_outgroups_string = ''\n\n  for (outgroup in internal_outgroups_list) {\n    internal_outgroup_string = \"-internal_outgroup ${outgroup} \"\n    internal_outgroups_string = internal_outgroups_string + internal_outgroup_string\n  }\n                                       \n\n  if (!params.no_supercontigs) {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/01_check_outgroups_align_and_hmmclean.py  \\\n   ${paralog_folder} \\\n  -external_outgroups_file ${external_outgroups_file} \\\n  ${external_outgroups_string} \\\n  ${internal_outgroups_string} \\\n  -pool ${params.pool} \\\n  -threads ${params.threads} \\\n  \"\"\"\n  } else if (params.no_supercontigs) {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/01_check_outgroups_align_and_hmmclean.py \\\n  ${paralog_folder} \\\n  -external_outgroups_file ${external_outgroups_file} \\\n  ${external_outgroups_string} \\\n  ${internal_outgroups_string} \\\n  -pool ${params.pool} \\\n  -threads ${params.threads} \\\n  -no_supercontigs\n  \"\"\"\n  }\n}",
        "nb_lignes_process": 58,
        "string_script": "  external_outgroups_list = params.external_outgroups?.tokenize(',')\n  external_outgroups_string = ''\n\n  for (outgroup in external_outgroups_list) {\n    external_outgroup_string = \"-external_outgroup ${outgroup} \"\n    external_outgroups_string = external_outgroups_string + external_outgroup_string\n  }\n                                       \n\n  internal_outgroups_list = params.internal_outgroups?.tokenize(',')\n  internal_outgroups_string = ''\n\n  for (outgroup in internal_outgroups_list) {\n    internal_outgroup_string = \"-internal_outgroup ${outgroup} \"\n    internal_outgroups_string = internal_outgroups_string + internal_outgroup_string\n  }\n                                       \n\n  if (!params.no_supercontigs) {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/01_check_outgroups_align_and_hmmclean.py  \\\n   ${paralog_folder} \\\n  -external_outgroups_file ${external_outgroups_file} \\\n  ${external_outgroups_string} \\\n  ${internal_outgroups_string} \\\n  -pool ${params.pool} \\\n  -threads ${params.threads} \\\n  \"\"\"\n  } else if (params.no_supercontigs) {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/01_check_outgroups_align_and_hmmclean.py \\\n  ${paralog_folder} \\\n  -external_outgroups_file ${external_outgroups_file} \\\n  ${external_outgroups_string} \\\n  ${internal_outgroups_string} \\\n  -pool ${params.pool} \\\n  -threads ${params.threads} \\\n  -no_supercontigs\n  \"\"\"\n  }",
        "nb_lignes_script": 39,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "outgroups_file_ch",
            "paralogs_ch_1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "outgroup_coverage_ch",
            ""
        ],
        "nb_outputs": 2,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "alignment_to_tree_03": {
        "name_process": "alignment_to_tree_03",
        "string_process": "\nprocess alignment_to_tree_03 {\n             \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  file(alignments_folder) from alignments_hmmcleaned_ch_1\n\n  output:\n  file(\"03_tree_files\") into tree_folder_ch\n\n  script:\n  \"\"\" \n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/03_alignment_to_tree.py \\\n  ${alignments_folder} \\\n  -threads_pool ${params.pool} \\\n  -threads_iqtree ${params.threads}\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\" \n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/03_alignment_to_tree.py \\\n  ${alignments_folder} \\\n  -threads_pool ${params.pool} \\\n  -threads_iqtree ${params.threads}\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignments_hmmcleaned_ch_1"
        ],
        "nb_inputs": 1,
        "outputs": [
            "tree_folder_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "trim_tips_04": {
        "name_process": "trim_tips_04",
        "string_process": "\nprocess trim_tips_04 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  file(trees_folder) from tree_folder_ch\n\n  output:\n  file(\"04_trim_tips\") into trim_tips_ch\n\n  script:\n  \"\"\"  \n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/04_trim_tips.py \\\n  ${trees_folder} \\\n  .treefile \\\n  ${params.process_04_trim_tips_relative_cutoff} \\\n  ${params.process_04_trim_tips_absolute_cutoff} \\\n  04_trim_tips\n  echo \"Finished running trim_tips_04\"\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"  \n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/04_trim_tips.py \\\n  ${trees_folder} \\\n  .treefile \\\n  ${params.process_04_trim_tips_relative_cutoff} \\\n  ${params.process_04_trim_tips_absolute_cutoff} \\\n  04_trim_tips\n  echo \"Finished running trim_tips_04\"\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tree_folder_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trim_tips_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mask_tips_05": {
        "name_process": "mask_tips_05",
        "string_process": "\nprocess mask_tips_05 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  file(trimmed_tips_folder) from trim_tips_ch\n  file(alignments_folder) from alignments_hmmcleaned_ch_2\n\n  output:\n  file(\"05_masked_tips\") into masked_tips_ch \n\n  script:\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/05_mask_tips_by_taxonID_transcripts.py \\\n  ${trimmed_tips_folder} \\\n  ${alignments_folder} \\\n  y \\\n  05_masked_tips\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/05_mask_tips_by_taxonID_transcripts.py \\\n  ${trimmed_tips_folder} \\\n  ${alignments_folder} \\\n  y \\\n  05_masked_tips\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trim_tips_ch",
            "alignments_hmmcleaned_ch_2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "masked_tips_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "cut_long_internal_branches_06": {
        "name_process": "cut_long_internal_branches_06",
        "string_process": "\nprocess cut_long_internal_branches_06 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  file(masked_tips_folder) from masked_tips_ch\n\n  output:\n  file(\"06_cut_internal_branches\") into cut_internal_branches_ch\n\n  script:\n  \"\"\"\n  mkdir 06_cut_internal_branches\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/06_cut_long_internal_branches.py \\\n  ${masked_tips_folder} \\\n  .mm \\\n  ${params.process_06_branch_length_cutoff} \\\n  ${params.process_06_minimum_taxa} \\\n  06_cut_internal_branches\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  mkdir 06_cut_internal_branches\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/06_cut_long_internal_branches.py \\\n  ${masked_tips_folder} \\\n  .mm \\\n  ${params.process_06_branch_length_cutoff} \\\n  ${params.process_06_minimum_taxa} \\\n  06_cut_internal_branches\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "masked_tips_ch"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cut_internal_branches_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "write_alignment_subset_07": {
        "name_process": "write_alignment_subset_07",
        "string_process": "\nprocess write_alignment_subset_07 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n                    \n  input:\n  file(cut_internal_branches_folder) from cut_internal_branches_ch\n  file(alignment_folder) from alignments_hmmcleaned_ch_3\n\n  output:\n  file(\"07_selected_alignments\") into selected_alignments_ch\n\n  script:\n  \"\"\"\n  mkdir 07_selected_alignments\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/07_subset_fasta_from_tree.py \\\n  ${cut_internal_branches_folder} \\\n  .subtree \\\n  ${alignment_folder} \\\n  NotApplicable \\\n  07_selected_alignments\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  mkdir 07_selected_alignments\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/07_subset_fasta_from_tree.py \\\n  ${cut_internal_branches_folder} \\\n  .subtree \\\n  ${alignment_folder} \\\n  NotApplicable \\\n  07_selected_alignments\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cut_internal_branches_ch",
            "alignments_hmmcleaned_ch_3"
        ],
        "nb_inputs": 2,
        "outputs": [
            "selected_alignments_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "realign_and_iqtree_08": {
        "name_process": "realign_and_iqtree_08",
        "string_process": "\nprocess realign_and_iqtree_08 {\n   echo  true\n   label 'in_container'\n   publishDir \"${params.outdir}\", mode: 'copy'\n\n   input:\n   file(selected_alignments_ch) from selected_alignments_ch\n   file(hmm_cleaned_alignments) from alignments_hmmcleaned_ch_4\n   file(external_outgroups_file) from outgroups_file_ch\n\n   output:\n   file(\"08_outgroups_added\")\n   file(\"09_realigned\") into (realigned_with_outgroups_ch_1,realigned_with_outgroups_ch_2, realigned_with_outgroups_ch_3) \n   file(\"10_realigned_trees\") into (realigned_trees_ch_1, realigned_trees_ch_2, realigned_trees_ch_3)\n   file(\"in_and_outgroups_list.txt\") into (in_out_list_ch_1, in_out_list_ch_2, in_out_list_ch_3)\n\n   script:\n   external_outgroups_list = params.external_outgroups?.tokenize(',')\n   external_outgroups_string = ''\n \n   for (outgroup in external_outgroups_list) {\n     external_outgroup_string = \"-external_outgroup ${outgroup} \"\n     external_outgroups_string = external_outgroups_string + external_outgroup_string\n   }\n                                        \n \n   internal_outgroups_list = params.internal_outgroups?.tokenize(',')\n   internal_outgroups_string = ''\n \n   for (outgroup in internal_outgroups_list) {\n     internal_outgroup_string = \"-internal_outgroup ${outgroup} \"\n     internal_outgroups_string = internal_outgroups_string + internal_outgroup_string\n   }\n                                        \n\n   if (!params.no_supercontigs) {\n   \"\"\"\n   python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/08_mafft_alignment_and_iqtree.py \\\n   ${hmm_cleaned_alignments} \\\n   ${selected_alignments_ch} \\\n   -external_outgroups_file ${external_outgroups_file} \\\n   ${external_outgroups_string} \\\n   ${internal_outgroups_string} \\\n   -threads_pool ${params.pool} \\\n   -threads_mafft ${params.threads}\n   \"\"\"\n   } else {\n   \"\"\"\n   python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/08_mafft_alignment_and_iqtree.py \\\n   ${hmm_cleaned_alignments} \\\n   ${selected_alignments_ch} \\\n   -external_outgroups_file ${external_outgroups_file} \\\n   ${external_outgroups_string} \\\n   ${internal_outgroups_string} \\\n   -threads_pool ${params.pool} \\\n   -threads_mafft ${params.threads} \\\n   -no_supercontigs\n   \"\"\"\n   }\n }",
        "nb_lignes_process": 59,
        "string_script": "   external_outgroups_list = params.external_outgroups?.tokenize(',')\n   external_outgroups_string = ''\n \n   for (outgroup in external_outgroups_list) {\n     external_outgroup_string = \"-external_outgroup ${outgroup} \"\n     external_outgroups_string = external_outgroups_string + external_outgroup_string\n   }\n                                        \n \n   internal_outgroups_list = params.internal_outgroups?.tokenize(',')\n   internal_outgroups_string = ''\n \n   for (outgroup in internal_outgroups_list) {\n     internal_outgroup_string = \"-internal_outgroup ${outgroup} \"\n     internal_outgroups_string = internal_outgroups_string + internal_outgroup_string\n   }\n                                        \n\n   if (!params.no_supercontigs) {\n   \"\"\"\n   python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/08_mafft_alignment_and_iqtree.py \\\n   ${hmm_cleaned_alignments} \\\n   ${selected_alignments_ch} \\\n   -external_outgroups_file ${external_outgroups_file} \\\n   ${external_outgroups_string} \\\n   ${internal_outgroups_string} \\\n   -threads_pool ${params.pool} \\\n   -threads_mafft ${params.threads}\n   \"\"\"\n   } else {\n   \"\"\"\n   python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/08_mafft_alignment_and_iqtree.py \\\n   ${hmm_cleaned_alignments} \\\n   ${selected_alignments_ch} \\\n   -external_outgroups_file ${external_outgroups_file} \\\n   ${external_outgroups_string} \\\n   ${internal_outgroups_string} \\\n   -threads_pool ${params.pool} \\\n   -threads_mafft ${params.threads} \\\n   -no_supercontigs\n   \"\"\"\n   }",
        "nb_lignes_script": 41,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "selected_alignments_ch",
            "alignments_hmmcleaned_ch_4",
            "outgroups_file_ch"
        ],
        "nb_inputs": 3,
        "outputs": [
            "",
            "",
            ""
        ],
        "nb_outputs": 3,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "echo true",
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "prune_paralogs_MO_09": {
        "name_process": "prune_paralogs_MO_09",
        "string_process": "\nprocess prune_paralogs_MO_09 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  file(in_out_file) from in_out_list_ch_1\n  file(realigned_trees_folder) from realigned_trees_ch_1\n\n  output:\n  file(\"11_prune_MO_trees\") into MO_ch\n\n  script:\n  \"\"\"\n  mkdir 11_prune_MO_trees\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/09_prune_paralogs_MO.py \\\n  ${realigned_trees_folder} \\\n  .treefile \\\n  ${params.process_09_prune_paralog_MO_minimum_taxa} \\\n  11_prune_MO_trees \\\n  ${in_out_file}\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  mkdir 11_prune_MO_trees\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/09_prune_paralogs_MO.py \\\n  ${realigned_trees_folder} \\\n  .treefile \\\n  ${params.process_09_prune_paralog_MO_minimum_taxa} \\\n  11_prune_MO_trees \\\n  ${in_out_file}\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_out_list_ch_1",
            "realigned_trees_ch_1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "MO_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "prune_paralogs_RT_10": {
        "name_process": "prune_paralogs_RT_10",
        "string_process": "\nprocess prune_paralogs_RT_10 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  file(in_out_file) from in_out_list_ch_2\n  file(realigned_trees_folder) from realigned_trees_ch_2\n\n  output:\n  file(\"12_prune_RT_trees\") into RT_ch\n\n  script:\n  \"\"\"\n  mkdir 12_prune_RT_trees\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/10_prune_paralogs_RT.py \\\n  ${realigned_trees_folder} \\\n  .treefile 12_prune_RT_trees \\\n  ${params.process_10_prune_paralogs_RT_minimum_ingroup_taxa} \\\n  ${in_out_file}\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  mkdir 12_prune_RT_trees\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/10_prune_paralogs_RT.py \\\n  ${realigned_trees_folder} \\\n  .treefile 12_prune_RT_trees \\\n  ${params.process_10_prune_paralogs_RT_minimum_ingroup_taxa} \\\n  ${in_out_file}\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_out_list_ch_2",
            "realigned_trees_ch_2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "RT_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "prune_paralogs_MI_11": {
        "name_process": "prune_paralogs_MI_11",
        "string_process": "\nprocess prune_paralogs_MI_11 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  file(in_out_file) from in_out_list_ch_3\n  file(realigned_trees_folder) from realigned_trees_ch_3\n\n  output:\n  file(\"13_prune_MI_trees\") into MI_ch\n\n  script:\n  \"\"\"\n  mkdir 13_prune_MI_trees\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/11_prune_paralogs_MI.py \\\n  ${realigned_trees_folder} \\\n  .treefile \\\n  ${params.process_11_prune_paralogs_MI_relative_tip_cutoff} \\\n  ${params.process_11_prune_paralogs_MI_absolute_tip_cutoff} \\\n  ${params.process_11_prune_paralogs_MI_minimum_taxa} \\\n  13_prune_MI_trees\n  \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "  \"\"\"\n  mkdir 13_prune_MI_trees\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/11_prune_paralogs_MI.py \\\n  ${realigned_trees_folder} \\\n  .treefile \\\n  ${params.process_11_prune_paralogs_MI_relative_tip_cutoff} \\\n  ${params.process_11_prune_paralogs_MI_absolute_tip_cutoff} \\\n  ${params.process_11_prune_paralogs_MI_minimum_taxa} \\\n  13_prune_MI_trees\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_out_list_ch_3",
            "realigned_trees_ch_3"
        ],
        "nb_inputs": 2,
        "outputs": [
            "MI_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "write_alignment_subset_MO_12": {
        "name_process": "write_alignment_subset_MO_12",
        "string_process": "\nprocess write_alignment_subset_MO_12 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  file(MO_folder) from MO_ch\n  file(alignment_folder) from realigned_with_outgroups_ch_1\n\n  output:\n  file(\"14_selected_alignments_MO\") into selected_alignments_MO_ch\n\n  script:\n  \"\"\"\n  mkdir 14_selected_alignments_MO\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/07_subset_fasta_from_tree.py \\\n  ${MO_folder} \\\n  .tre \\\n  ${alignment_folder} \\\n  NotApplicable \\\n  14_selected_alignments_MO\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  mkdir 14_selected_alignments_MO\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/07_subset_fasta_from_tree.py \\\n  ${MO_folder} \\\n  .tre \\\n  ${alignment_folder} \\\n  NotApplicable \\\n  14_selected_alignments_MO\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "MO_ch",
            "realigned_with_outgroups_ch_1"
        ],
        "nb_inputs": 2,
        "outputs": [
            "selected_alignments_MO_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "write_alignment_subset_RT_13": {
        "name_process": "write_alignment_subset_RT_13",
        "string_process": "\nprocess write_alignment_subset_RT_13 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  file(RT_folder) from RT_ch\n  file(alignment_folder) from realigned_with_outgroups_ch_2\n\n  output:\n  file(\"15_selected_alignments_RT\") into selected_alignments_RT_ch\n\n  script:\n  \"\"\"\n  mkdir 15_selected_alignments_RT\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/07_subset_fasta_from_tree.py \\\n  ${RT_folder} \\\n  .tre \\\n  ${alignment_folder} \\\n  NotApplicable \\\n  15_selected_alignments_RT\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  mkdir 15_selected_alignments_RT\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/07_subset_fasta_from_tree.py \\\n  ${RT_folder} \\\n  .tre \\\n  ${alignment_folder} \\\n  NotApplicable \\\n  15_selected_alignments_RT\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "RT_ch",
            "realigned_with_outgroups_ch_2"
        ],
        "nb_inputs": 2,
        "outputs": [
            "selected_alignments_RT_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "write_alignment_subset_MI_14": {
        "name_process": "write_alignment_subset_MI_14",
        "string_process": "\nprocess write_alignment_subset_MI_14 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  file(MI_folder) from MI_ch\n  file(alignment_folder) from realigned_with_outgroups_ch_3\n\n  output:\n  file(\"16_selected_alignments_MI\") into selected_alignments_MI_ch\n\n  script:\n  \"\"\"\n  mkdir 16_selected_alignments_MI\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/07_subset_fasta_from_tree.py \\\n  ${MI_folder} \\\n  .tre \\\n  ${alignment_folder} \\\n  NotApplicable \\\n  16_selected_alignments_MI\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  mkdir 16_selected_alignments_MI\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/07_subset_fasta_from_tree.py \\\n  ${MI_folder} \\\n  .tre \\\n  ${alignment_folder} \\\n  NotApplicable \\\n  16_selected_alignments_MI\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "MI_ch",
            "realigned_with_outgroups_ch_3"
        ],
        "nb_inputs": 2,
        "outputs": [
            "selected_alignments_MI_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "strip_names_and_realign_MO_15": {
        "name_process": "strip_names_and_realign_MO_15",
        "string_process": "\nprocess strip_names_and_realign_MO_15 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: '16_alignments_stripped_names', saveAs: { \"17_alignments_stripped_names_MO\"}\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: '17_alignments_stripped_names_realigned', saveAs: { \"18_alignments_stripped_names_MO_realigned\"}\n\n  input:\n  file(selected_alignments_MO) from selected_alignments_MO_ch\n\n  output:\n  file(\"16_alignments_stripped_names\") \n  file(\"17_alignments_stripped_names_realigned\")\n\n  script:\n  if (!params.no_supercontigs) {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/12_strip_names_and_mafft.py \\\n  ${selected_alignments_MO} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \n  \"\"\"\n  } else {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/12_strip_names_and_mafft.py \\\n  ${selected_alignments_MO} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \\\n  -no_supercontigs\n  \"\"\"\n  }\n}",
        "nb_lignes_process": 30,
        "string_script": "  if (!params.no_supercontigs) {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/12_strip_names_and_mafft.py \\\n  ${selected_alignments_MO} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \n  \"\"\"\n  } else {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/12_strip_names_and_mafft.py \\\n  ${selected_alignments_MO} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \\\n  -no_supercontigs\n  \"\"\"\n  }",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "selected_alignments_MO_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: '16_alignments_stripped_names', saveAs: { \"17_alignments_stripped_names_MO\"}",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: '17_alignments_stripped_names_realigned', saveAs: { \"18_alignments_stripped_names_MO_realigned\"}"
        ],
        "when": "",
        "stub": ""
    },
    "strip_names_and_realign_RT_16": {
        "name_process": "strip_names_and_realign_RT_16",
        "string_process": "\nprocess strip_names_and_realign_RT_16 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: '16_alignments_stripped_names', saveAs: { \"19_alignments_stripped_names_RT\"}\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: '17_alignments_stripped_names_realigned', saveAs: { \"20_alignments_stripped_names_RT_realigned\"}\n\n  input:\n  file(selected_alignments_RT) from selected_alignments_RT_ch\n\n  output:\n  file(\"16_alignments_stripped_names\") \n  file(\"17_alignments_stripped_names_realigned\")\n\n  script:\n  if (!params.no_supercontigs) {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/12_strip_names_and_mafft.py \\\n  ${selected_alignments_RT} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \n  \"\"\"\n  } else {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/12_strip_names_and_mafft.py \\\n  ${selected_alignments_RT} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} -no_supercontigs\n  \"\"\"\n  }\n}",
        "nb_lignes_process": 29,
        "string_script": "  if (!params.no_supercontigs) {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/12_strip_names_and_mafft.py \\\n  ${selected_alignments_RT} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \n  \"\"\"\n  } else {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/12_strip_names_and_mafft.py \\\n  ${selected_alignments_RT} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} -no_supercontigs\n  \"\"\"\n  }",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "selected_alignments_RT_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: '16_alignments_stripped_names', saveAs: { \"19_alignments_stripped_names_RT\"}",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: '17_alignments_stripped_names_realigned', saveAs: { \"20_alignments_stripped_names_RT_realigned\"}"
        ],
        "when": "",
        "stub": ""
    },
    "strip_names_and_realign_MI_17": {
        "name_process": "strip_names_and_realign_MI_17",
        "string_process": "\nprocess strip_names_and_realign_MI_17 {\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: '16_alignments_stripped_names', saveAs: { \"21_alignments_stripped_names_MI\"}\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: '17_alignments_stripped_names_realigned', saveAs: { \"22_alignments_stripped_names_MI_realigned\"}\n\n  input:\n  file(selected_alignments_MI) from selected_alignments_MI_ch\n\n  output:\n  file(\"16_alignments_stripped_names\")\n  file(\"17_alignments_stripped_names_realigned\")\n\n  script:\n  if (!params.no_supercontigs) {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/12_strip_names_and_mafft.py \\\n  ${selected_alignments_MI} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \n  \"\"\"\n  } else {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/12_strip_names_and_mafft.py \\\n  ${selected_alignments_MI} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \\\n  -no_supercontigs\n  \"\"\"\n  }\n}",
        "nb_lignes_process": 30,
        "string_script": "  if (!params.no_supercontigs) {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/12_strip_names_and_mafft.py \\\n  ${selected_alignments_MI} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \n  \"\"\"\n  } else {\n  \"\"\"\n  python /Users/chrisjackson/PycharmProjects/Yang-and-Smith-RBGV-scripts/12_strip_names_and_mafft.py \\\n  ${selected_alignments_MI} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \\\n  -no_supercontigs\n  \"\"\"\n  }",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "selected_alignments_MI_ch"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: '16_alignments_stripped_names', saveAs: { \"21_alignments_stripped_names_MI\"}",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: '17_alignments_stripped_names_realigned', saveAs: { \"22_alignments_stripped_names_MI_realigned\"}"
        ],
        "when": "",
        "stub": ""
    },
    "CHECK_AND_BATCH_PARALOGS_01": {
        "name_process": "CHECK_AND_BATCH_PARALOGS_01",
        "string_process": "\nprocess CHECK_AND_BATCH_PARALOGS_01 {\n    \n                                             \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n    path(external_outgroups_file)\n    path(paralog_folder)\n\n  output:\n    stdout emit: outgroup_coverage_ch\n    path(\"01_batch_folders/batch_*\"), emit: batch_folders_ch\n    path(\"outgroup_coverage_report.tsv\")\n    path(\"*sanitised.*\"), emit: external_outgroups_sanitised_ch optional true\n    \n\n  script:\n    if (params.external_outgroups_file) {\n      external_outgroups_file_string = \"-external_outgroups_file ${external_outgroups_file}\"\n    } else {\n      external_outgroups_file_string = ''\n    }\n  \n    if (params.external_outgroups) {\n      external_outgroups_list = params.external_outgroups?.tokenize(',')\n      external_outgroups_string = ''\n  \n      for (outgroup in external_outgroups_list) {\n        external_outgroup_string = \"-external_outgroup ${outgroup} \"\n        external_outgroups_string = external_outgroups_string + external_outgroup_string\n      }\n    } else {\n      external_outgroups_string = ''\n    }\n  \n    if (params.internal_outgroups) {\n      internal_outgroups_list = params.internal_outgroups?.tokenize(',')\n      internal_outgroups_string = ''\n  \n      for (outgroup in internal_outgroups_list) {\n        internal_outgroup_string = \"-internal_outgroup ${outgroup} \"\n        internal_outgroups_string = internal_outgroups_string + internal_outgroup_string\n      }\n    } else {\n      internal_outgroups_string = ''\n    }\n  \n\n    \"\"\"\n    python /Yang-and-Smith-RBGV-scripts/01a_check_outgroups_and_batch.py \\\n    ${paralog_folder} \\\n    ${external_outgroups_file_string} \\\n    ${external_outgroups_string} \\\n    ${internal_outgroups_string} \\\n    -batch_size ${params.batch_size}\n    \"\"\"\n}",
        "nb_lignes_process": 60,
        "string_script": "    if (params.external_outgroups_file) {\n      external_outgroups_file_string = \"-external_outgroups_file ${external_outgroups_file}\"\n    } else {\n      external_outgroups_file_string = ''\n    }\n  \n    if (params.external_outgroups) {\n      external_outgroups_list = params.external_outgroups?.tokenize(',')\n      external_outgroups_string = ''\n  \n      for (outgroup in external_outgroups_list) {\n        external_outgroup_string = \"-external_outgroup ${outgroup} \"\n        external_outgroups_string = external_outgroups_string + external_outgroup_string\n      }\n    } else {\n      external_outgroups_string = ''\n    }\n  \n    if (params.internal_outgroups) {\n      internal_outgroups_list = params.internal_outgroups?.tokenize(',')\n      internal_outgroups_string = ''\n  \n      for (outgroup in internal_outgroups_list) {\n        internal_outgroup_string = \"-internal_outgroup ${outgroup} \"\n        internal_outgroups_string = internal_outgroups_string + internal_outgroup_string\n      }\n    } else {\n      internal_outgroups_string = ''\n    }\n  \n\n    \"\"\"\n    python /Yang-and-Smith-RBGV-scripts/01a_check_outgroups_and_batch.py \\\n    ${paralog_folder} \\\n    ${external_outgroups_file_string} \\\n    ${external_outgroups_string} \\\n    ${internal_outgroups_string} \\\n    -batch_size ${params.batch_size}\n    \"\"\"",
        "nb_lignes_script": 38,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "external_outgroups_file",
            "paralog_folder"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "ALIGN_AND_HMMCLEAN_02": {
        "name_process": "ALIGN_AND_HMMCLEAN_02",
        "string_process": "\nprocess ALIGN_AND_HMMCLEAN_02 {\n    \n                           \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}/02_alignments\", mode: 'copy', pattern: \"batch_*_alignments\"\n  publishDir \"${params.outdir}/03_alignments_hmmcleaned\", mode: 'copy', pattern: \"batch_*_alignments_hmmcleaned\"\n\n  input:\n    path(alignments_folder)\n\n  output:\n    path(\"batch_*_alignments\")\n    path(\"batch_*_alignments_hmmcleaned\"), emit: batch_alignments_hmmcleaned_ch\n\n  script:\n    if (params.no_supercontigs) {\n      no_supercontigs_string = \"-no_supercontigs\"\n    } else {\n      no_supercontigs_string = ''\n    }\n\n    if (params.mafft_algorithm) {\n      mafft_algorithm_string = \"-mafft_algorithm ${params.mafft_algorithm}\"\n    } else {\n      mafft_algorithm_string = ''\n    }\n\n    if (params.use_muscle) {\n      muscle_string = \"-use_muscle\"\n    } else {\n      muscle_string = ''\n    }\n\n    \"\"\" \n    python /Yang-and-Smith-RBGV-scripts/02a_align_and_hmmclean.py \\\n    ${alignments_folder} \\\n    ${no_supercontigs_string} \\\n    ${muscle_string} \\\n    ${mafft_algorithm_string} \\\n    -pool ${params.pool} \\\n    -threads ${params.threads}\\\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    if (params.no_supercontigs) {\n      no_supercontigs_string = \"-no_supercontigs\"\n    } else {\n      no_supercontigs_string = ''\n    }\n\n    if (params.mafft_algorithm) {\n      mafft_algorithm_string = \"-mafft_algorithm ${params.mafft_algorithm}\"\n    } else {\n      mafft_algorithm_string = ''\n    }\n\n    if (params.use_muscle) {\n      muscle_string = \"-use_muscle\"\n    } else {\n      muscle_string = ''\n    }\n\n    \"\"\" \n    python /Yang-and-Smith-RBGV-scripts/02a_align_and_hmmclean.py \\\n    ${alignments_folder} \\\n    ${no_supercontigs_string} \\\n    ${muscle_string} \\\n    ${mafft_algorithm_string} \\\n    -pool ${params.pool} \\\n    -threads ${params.threads}\\\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignments_folder"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}/02_alignments\", mode: 'copy', pattern: \"batch_*_alignments\"",
            "publishDir \"${params.outdir}/03_alignments_hmmcleaned\", mode: 'copy', pattern: \"batch_*_alignments_hmmcleaned\""
        ],
        "when": "",
        "stub": ""
    },
    "ALIGNMENT_TO_TREE_03": {
        "name_process": "ALIGNMENT_TO_TREE_03",
        "string_process": "\nprocess ALIGNMENT_TO_TREE_03 {\n    \n                                     \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}/04_tree_files\", mode: 'copy', pattern: \"batch_*_alignments_hmmcleaned_tree_files\"\n\n  input:\n    path(alignments_folder)\n\n  output:\n    path(\"batch_*_alignments_hmmcleaned_tree_files\"), emit: batch_treefiles_ch\n\n  script:\n    if (params.bootstraps) {\n      bootstraps_string = \"-generate_bootstraps\"\n    } else {\n      bootstraps_string = ''\n    }\n\n    if (params.use_fasttree) {\n      fasttree_string = \"-use_fasttree\"\n    } else {\n      fasttree_string = ''\n    }\n\n    \"\"\" \n    python /Yang-and-Smith-RBGV-scripts/03a_alignment_to_tree.py \\\n    ${alignments_folder} \\\n    -threads_pool ${params.pool} \\\n    -threads_iqtree ${params.threads} \\\n    ${bootstraps_string} \\\n    ${fasttree_string}\n    \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "    if (params.bootstraps) {\n      bootstraps_string = \"-generate_bootstraps\"\n    } else {\n      bootstraps_string = ''\n    }\n\n    if (params.use_fasttree) {\n      fasttree_string = \"-use_fasttree\"\n    } else {\n      fasttree_string = ''\n    }\n\n    \"\"\" \n    python /Yang-and-Smith-RBGV-scripts/03a_alignment_to_tree.py \\\n    ${alignments_folder} \\\n    -threads_pool ${params.pool} \\\n    -threads_iqtree ${params.threads} \\\n    ${bootstraps_string} \\\n    ${fasttree_string}\n    \"\"\"",
        "nb_lignes_script": 19,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignments_folder"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}/04_tree_files\", mode: 'copy', pattern: \"batch_*_alignments_hmmcleaned_tree_files\""
        ],
        "when": "",
        "stub": ""
    },
    "TRIM_TIPS_04": {
        "name_process": "TRIM_TIPS_04",
        "string_process": "\nprocess TRIM_TIPS_04 {\n    \n                            \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n    path(trees_folder)\n\n  output:\n    path(\"05_trim_tips\")\n\n  script:\n    \"\"\" \n    mkdir all_trees_combined\n    for trees_folder in ${trees_folder}\n      do\n        echo \\${trees_folder}\n        cp -r \\${trees_folder}/* all_trees_combined\n      done\n\n    python /Yang-and-Smith-RBGV-scripts/04_trim_tips.py \\\n    all_trees_combined \\\n    .treefile \\\n    ${params.process_04_trim_tips_relative_cutoff} \\\n    ${params.process_04_trim_tips_absolute_cutoff} \\\n    05_trim_tips\n    echo \"Finished running trim_tips_04\"\n\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\" \n    mkdir all_trees_combined\n    for trees_folder in ${trees_folder}\n      do\n        echo \\${trees_folder}\n        cp -r \\${trees_folder}/* all_trees_combined\n      done\n\n    python /Yang-and-Smith-RBGV-scripts/04_trim_tips.py \\\n    all_trees_combined \\\n    .treefile \\\n    ${params.process_04_trim_tips_relative_cutoff} \\\n    ${params.process_04_trim_tips_absolute_cutoff} \\\n    05_trim_tips\n    echo \"Finished running trim_tips_04\"\n\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trees_folder"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "MASK_TIPS_05": {
        "name_process": "MASK_TIPS_05",
        "string_process": "\nprocess MASK_TIPS_05 {\n    \n                                                   \n    \n\n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy', pattern: \"06_masked_tips\"\n\n  input:\n    path(trimmed_tips_folder)\n    path(alignments_folder)\n\n  output:\n    path(\"06_masked_tips\"), emit: masked_tips_ch\n    path(\"all_hmmclean_alignments_combined\"), emit: all_hmmclean_alignments_combined_ch\n\n  script:\n    \"\"\"\n    mkdir all_hmmclean_alignments_combined\n    for alignment_folder in ${alignments_folder}\n      do\n        echo \\${alignment_folder}\n        cp -r \\${alignment_folder}/* all_hmmclean_alignments_combined\n      done\n\n    python /Yang-and-Smith-RBGV-scripts/05_mask_tips_by_taxonID_transcripts.py \\\n    ${trimmed_tips_folder} \\\n    all_hmmclean_alignments_combined \\\n    y \\\n    06_masked_tips\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    mkdir all_hmmclean_alignments_combined\n    for alignment_folder in ${alignments_folder}\n      do\n        echo \\${alignment_folder}\n        cp -r \\${alignment_folder}/* all_hmmclean_alignments_combined\n      done\n\n    python /Yang-and-Smith-RBGV-scripts/05_mask_tips_by_taxonID_transcripts.py \\\n    ${trimmed_tips_folder} \\\n    all_hmmclean_alignments_combined \\\n    y \\\n    06_masked_tips\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trimmed_tips_folder",
            "alignments_folder"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy', pattern: \"06_masked_tips\""
        ],
        "when": "",
        "stub": ""
    },
    "CUT_LONG_INTERNAL_BRANCHES_06": {
        "name_process": "CUT_LONG_INTERNAL_BRANCHES_06",
        "string_process": "\nprocess CUT_LONG_INTERNAL_BRANCHES_06 {\n    \n                                             \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n    path(masked_tips_folder)\n\n  output:\n    path(\"07_cut_internal_branches\")\n\n  script:\n    \"\"\"\n    mkdir 07_cut_internal_branches\n    python /Yang-and-Smith-RBGV-scripts/06_cut_long_internal_branches.py \\\n    ${masked_tips_folder} \\\n    .mm \\\n    ${params.process_06_branch_length_cutoff} \\\n    ${params.process_06_minimum_taxa} \\\n    07_cut_internal_branches\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    mkdir 07_cut_internal_branches\n    python /Yang-and-Smith-RBGV-scripts/06_cut_long_internal_branches.py \\\n    ${masked_tips_folder} \\\n    .mm \\\n    ${params.process_06_branch_length_cutoff} \\\n    ${params.process_06_minimum_taxa} \\\n    07_cut_internal_branches\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "masked_tips_folder"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "WRITE_ALIGNMENT_SUBSET_07": {
        "name_process": "WRITE_ALIGNMENT_SUBSET_07",
        "string_process": "\nprocess WRITE_ALIGNMENT_SUBSET_07 {\n    \n                                                    \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n                    \n  input:\n    path(cut_internal_branches_folder)\n    path(alignment_folder)\n\n  output:\n    path(\"08_selected_alignments_batch_folders/batch_*\"), emit: subset_batch_folders_ch\n\n  script:\n    \"\"\"\n    mkdir 08_selected_alignments\n    python /Yang-and-Smith-RBGV-scripts/07a_subset_fasta_from_tree_and_batch.py \\\n    ${cut_internal_branches_folder} \\\n    .subtree \\\n    ${alignment_folder} \\\n    08_selected_alignments \\\n    -from_cut_internal_branches \\\n    -batch_size ${params.batch_size}\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    mkdir 08_selected_alignments\n    python /Yang-and-Smith-RBGV-scripts/07a_subset_fasta_from_tree_and_batch.py \\\n    ${cut_internal_branches_folder} \\\n    .subtree \\\n    ${alignment_folder} \\\n    08_selected_alignments \\\n    -from_cut_internal_branches \\\n    -batch_size ${params.batch_size}\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cut_internal_branches_folder",
            "alignment_folder"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "REALIGN_AND_IQTREE_08": {
        "name_process": "REALIGN_AND_IQTREE_08",
        "string_process": "\nprocess REALIGN_AND_IQTREE_08 {\n    \n                                             \n    \n\n               \n  label 'in_container'\n  publishDir \"${params.outdir}/09_outgroups_added\", mode: 'copy', pattern: \"batch_*_outgroups_added\"\n  publishDir \"${params.outdir}/10_realigned\", mode: 'copy', pattern: \"batch_*_outgroups_added_alignments\"\n  publishDir \"${params.outdir}/11_realigned_trees\", mode: 'copy', pattern: \"batch_*_outgroups_added_alignments_tree_files\"\n\n  input:\n    path(selected_alignments_ch)\n    path(hmm_cleaned_alignments)\n    path(external_outgroups_file)\n\n  output:\n    path(\"batch_*_outgroups_added\")\n    path(\"batch_*_outgroups_added_alignments\"), emit: realigned_fasta_ch\n    path(\"batch_*_outgroups_added_alignments_tree_files\"), emit: realigned_trees_ch\n    path(\"in_and_outgroups_list*.txt\"), emit: in_and_outgroups_list_ch\n\n\n  script:\n    if (params.external_outgroups_file) {\n      external_outgroups_file_string = \"-external_outgroups_file ${external_outgroups_file}\"\n    } else {\n      external_outgroups_file_string = ''\n    }\n\n    if (params.external_outgroups) {\n      external_outgroups_list = params.external_outgroups?.tokenize(',')\n      external_outgroups_string = ''\n\n      for (outgroup in external_outgroups_list) {\n        external_outgroup_string = \"-external_outgroup ${outgroup} \"\n        external_outgroups_string = external_outgroups_string + external_outgroup_string\n      }\n    } else {\n      external_outgroups_string = ''\n    }\n\n    if (params.internal_outgroups) {\n      internal_outgroups_list = params.internal_outgroups?.tokenize(',')\n      internal_outgroups_string = ''\n\n    for (outgroup in internal_outgroups_list) {\n      internal_outgroup_string = \"-internal_outgroup ${outgroup} \"\n      internal_outgroups_string = internal_outgroups_string + internal_outgroup_string\n      }\n    } else {\n    internal_outgroups_string = ''\n    }\n\n    if (params.no_supercontigs) {\n      no_supercontigs_string = \"-no_supercontigs\"\n    } else {\n      no_supercontigs_string = ''\n    }\n\n    if (params.use_fasttree) {\n      fasttree_string = \"-use_fasttree\"\n    } else {\n      fasttree_string = ''\n    }\n\n    if (params.use_muscle) {\n      muscle_string = \"-use_muscle\"\n    } else {\n      muscle_string = ''\n    }\n\n    if (params.mafft_algorithm) {\n      mafft_algorithm_string = \"-mafft_algorithm ${params.mafft_algorithm}\"\n    } else {\n      mafft_algorithm_string = ''\n    }\n\n    \"\"\"\n    python /Yang-and-Smith-RBGV-scripts/08a_alignment_and_tree.py \\\n    ${hmm_cleaned_alignments} \\\n    ${selected_alignments_ch} \\\n    ${external_outgroups_file_string} \\\n    ${external_outgroups_string} \\\n    ${internal_outgroups_string} \\\n    ${no_supercontigs_string} \\\n    ${muscle_string} \\\n    ${mafft_algorithm_string} \\\n    ${fasttree_string} \\\n    -threads_pool ${params.pool} \\\n    -threads_mafft ${params.threads}\n    \"\"\"\n  }",
        "nb_lignes_process": 92,
        "string_script": "    if (params.external_outgroups_file) {\n      external_outgroups_file_string = \"-external_outgroups_file ${external_outgroups_file}\"\n    } else {\n      external_outgroups_file_string = ''\n    }\n\n    if (params.external_outgroups) {\n      external_outgroups_list = params.external_outgroups?.tokenize(',')\n      external_outgroups_string = ''\n\n      for (outgroup in external_outgroups_list) {\n        external_outgroup_string = \"-external_outgroup ${outgroup} \"\n        external_outgroups_string = external_outgroups_string + external_outgroup_string\n      }\n    } else {\n      external_outgroups_string = ''\n    }\n\n    if (params.internal_outgroups) {\n      internal_outgroups_list = params.internal_outgroups?.tokenize(',')\n      internal_outgroups_string = ''\n\n    for (outgroup in internal_outgroups_list) {\n      internal_outgroup_string = \"-internal_outgroup ${outgroup} \"\n      internal_outgroups_string = internal_outgroups_string + internal_outgroup_string\n      }\n    } else {\n    internal_outgroups_string = ''\n    }\n\n    if (params.no_supercontigs) {\n      no_supercontigs_string = \"-no_supercontigs\"\n    } else {\n      no_supercontigs_string = ''\n    }\n\n    if (params.use_fasttree) {\n      fasttree_string = \"-use_fasttree\"\n    } else {\n      fasttree_string = ''\n    }\n\n    if (params.use_muscle) {\n      muscle_string = \"-use_muscle\"\n    } else {\n      muscle_string = ''\n    }\n\n    if (params.mafft_algorithm) {\n      mafft_algorithm_string = \"-mafft_algorithm ${params.mafft_algorithm}\"\n    } else {\n      mafft_algorithm_string = ''\n    }\n\n    \"\"\"\n    python /Yang-and-Smith-RBGV-scripts/08a_alignment_and_tree.py \\\n    ${hmm_cleaned_alignments} \\\n    ${selected_alignments_ch} \\\n    ${external_outgroups_file_string} \\\n    ${external_outgroups_string} \\\n    ${internal_outgroups_string} \\\n    ${no_supercontigs_string} \\\n    ${muscle_string} \\\n    ${mafft_algorithm_string} \\\n    ${fasttree_string} \\\n    -threads_pool ${params.pool} \\\n    -threads_mafft ${params.threads}\n    \"\"\"",
        "nb_lignes_script": 67,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "selected_alignments_ch",
            "hmm_cleaned_alignments",
            "external_outgroups_file"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}/09_outgroups_added\", mode: 'copy', pattern: \"batch_*_outgroups_added\"",
            "publishDir \"${params.outdir}/10_realigned\", mode: 'copy', pattern: \"batch_*_outgroups_added_alignments\"",
            "publishDir \"${params.outdir}/11_realigned_trees\", mode: 'copy', pattern: \"batch_*_outgroups_added_alignments_tree_files\""
        ],
        "when": "",
        "stub": ""
    },
    "PRUNE_PARALOGS_MO_09": {
        "name_process": "PRUNE_PARALOGS_MO_09",
        "string_process": "\nprocess PRUNE_PARALOGS_MO_09 {\n    \n                                    \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n    path(in_out_file)\n    path(realigned_trees_folder)\n\n  output:\n    path(\"12_prune_MO_trees\")\n\n  script:\n    \"\"\"\n    mkdir all_realigned_trees_combined\n    for tree_folder in ${realigned_trees_folder}\n      do\n        echo \\${tree_folder}\n        cp -r \\${tree_folder}/* all_realigned_trees_combined\n      done\n\n    mkdir 12_prune_MO_trees\n\n    python /Yang-and-Smith-RBGV-scripts/09_prune_paralogs_MO.py \\\n    all_realigned_trees_combined \\\n    .treefile \\\n    ${params.process_09_prune_paralog_MO_minimum_taxa} \\\n    12_prune_MO_trees \\\n    ${in_out_file}\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    \"\"\"\n    mkdir all_realigned_trees_combined\n    for tree_folder in ${realigned_trees_folder}\n      do\n        echo \\${tree_folder}\n        cp -r \\${tree_folder}/* all_realigned_trees_combined\n      done\n\n    mkdir 12_prune_MO_trees\n\n    python /Yang-and-Smith-RBGV-scripts/09_prune_paralogs_MO.py \\\n    all_realigned_trees_combined \\\n    .treefile \\\n    ${params.process_09_prune_paralog_MO_minimum_taxa} \\\n    12_prune_MO_trees \\\n    ${in_out_file}\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_out_file",
            "realigned_trees_folder"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "PRUNE_PARALOGS_RT_10": {
        "name_process": "PRUNE_PARALOGS_RT_10",
        "string_process": "\nprocess PRUNE_PARALOGS_RT_10 {\n    \n                                    \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  path(in_out_file)\n  path(realigned_trees_folder)\n\n  output:\n  path(\"13_prune_RT_trees\")\n\n  script:\n  \"\"\"\n  mkdir all_realigned_trees_combined\n    for tree_folder in ${realigned_trees_folder}\n      do\n        echo \\${tree_folder}\n        cp -r \\${tree_folder}/* all_realigned_trees_combined\n      done\n\n  mkdir 13_prune_RT_trees\n\n  python /Yang-and-Smith-RBGV-scripts/10_prune_paralogs_RT.py \\\n  all_realigned_trees_combined \\\n  .treefile 13_prune_RT_trees \\\n  ${params.process_10_prune_paralogs_RT_minimum_ingroup_taxa} \\\n  ${in_out_file}\n  \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "  \"\"\"\n  mkdir all_realigned_trees_combined\n    for tree_folder in ${realigned_trees_folder}\n      do\n        echo \\${tree_folder}\n        cp -r \\${tree_folder}/* all_realigned_trees_combined\n      done\n\n  mkdir 13_prune_RT_trees\n\n  python /Yang-and-Smith-RBGV-scripts/10_prune_paralogs_RT.py \\\n  all_realigned_trees_combined \\\n  .treefile 13_prune_RT_trees \\\n  ${params.process_10_prune_paralogs_RT_minimum_ingroup_taxa} \\\n  ${in_out_file}\n  \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_out_file",
            "realigned_trees_folder"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "PRUNE_PARALOGS_MI_11": {
        "name_process": "PRUNE_PARALOGS_MI_11",
        "string_process": "\nprocess PRUNE_PARALOGS_MI_11 {\n    \n                                    \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  path(in_out_file)\n  path(realigned_trees_folder)\n\n  output:\n  path(\"14_prune_MI_trees\")\n\n  script:\n  \"\"\"\n  mkdir all_realigned_trees_combined\n    for tree_folder in ${realigned_trees_folder}\n      do\n        echo \\${tree_folder}\n        cp -r \\${tree_folder}/* all_realigned_trees_combined\n      done\n\n  mkdir 14_prune_MI_trees\n\n  python /Yang-and-Smith-RBGV-scripts/11_prune_paralogs_MI.py \\\n  all_realigned_trees_combined \\\n  .treefile \\\n  ${params.process_11_prune_paralogs_MI_relative_tip_cutoff} \\\n  ${params.process_11_prune_paralogs_MI_absolute_tip_cutoff} \\\n  ${params.process_11_prune_paralogs_MI_minimum_taxa} \\\n  14_prune_MI_trees\n\n  \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "  \"\"\"\n  mkdir all_realigned_trees_combined\n    for tree_folder in ${realigned_trees_folder}\n      do\n        echo \\${tree_folder}\n        cp -r \\${tree_folder}/* all_realigned_trees_combined\n      done\n\n  mkdir 14_prune_MI_trees\n\n  python /Yang-and-Smith-RBGV-scripts/11_prune_paralogs_MI.py \\\n  all_realigned_trees_combined \\\n  .treefile \\\n  ${params.process_11_prune_paralogs_MI_relative_tip_cutoff} \\\n  ${params.process_11_prune_paralogs_MI_absolute_tip_cutoff} \\\n  ${params.process_11_prune_paralogs_MI_minimum_taxa} \\\n  14_prune_MI_trees\n\n  \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "in_out_file",
            "realigned_trees_folder"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "WRITE_ALIGNMENT_SUBSET_MO_12": {
        "name_process": "WRITE_ALIGNMENT_SUBSET_MO_12",
        "string_process": "\nprocess WRITE_ALIGNMENT_SUBSET_MO_12 {\n    \n                                                    \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  path(MO_folder)\n  path(alignment_folder)\n\n  output:\n  path(\"15_selected_alignments_MO_batch_folders/batch_*\"), emit: mo_subset_batch_folders_ch\n\n  script:\n  \"\"\"\n  mkdir all_realignments_combined\n    for alignment in ${alignment_folder}\n      do\n        echo \\${alignment}\n        cp -r \\${alignment}/* all_realignments_combined\n      done\n\n\n  mkdir 15_selected_alignments_MO\n\n  python /Yang-and-Smith-RBGV-scripts/07a_subset_fasta_from_tree_and_batch.py \\\n  ${MO_folder} \\\n  .tre \\\n  all_realignments_combined \\\n  15_selected_alignments_MO \\\n  -batch_size ${params.batch_size}\n\n  mv 08_selected_alignments_batch_folders 15_selected_alignments_MO_batch_folders\n\n  \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "  \"\"\"\n  mkdir all_realignments_combined\n    for alignment in ${alignment_folder}\n      do\n        echo \\${alignment}\n        cp -r \\${alignment}/* all_realignments_combined\n      done\n\n\n  mkdir 15_selected_alignments_MO\n\n  python /Yang-and-Smith-RBGV-scripts/07a_subset_fasta_from_tree_and_batch.py \\\n  ${MO_folder} \\\n  .tre \\\n  all_realignments_combined \\\n  15_selected_alignments_MO \\\n  -batch_size ${params.batch_size}\n\n  mv 08_selected_alignments_batch_folders 15_selected_alignments_MO_batch_folders\n\n  \"\"\"",
        "nb_lignes_script": 20,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "MO_folder",
            "alignment_folder"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "WRITE_ALIGNMENT_SUBSET_RT_13": {
        "name_process": "WRITE_ALIGNMENT_SUBSET_RT_13",
        "string_process": "\nprocess WRITE_ALIGNMENT_SUBSET_RT_13 {\n    \n                                                    \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  path(RT_folder)\n  path(alignment_folder)\n\n  output:\n  path(\"16_selected_alignments_RT_batch_folders/batch_*\"), emit: rt_subset_batch_folders_ch\n\n  script:\n  \"\"\"\n  mkdir all_realignments_combined\n    for alignment in ${alignment_folder}\n      do\n        echo \\${alignment}\n        cp -r \\${alignment}/* all_realignments_combined\n      done\n\n  mkdir 16_selected_alignments_RT\n\n  python /Yang-and-Smith-RBGV-scripts/07a_subset_fasta_from_tree_and_batch.py \\\n  ${RT_folder} \\\n  .tre \\\n  all_realignments_combined \\\n  16_selected_alignments_RT \\\n  -batch_size ${params.batch_size}\n\n  mv 08_selected_alignments_batch_folders 16_selected_alignments_RT_batch_folders\n  \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "  \"\"\"\n  mkdir all_realignments_combined\n    for alignment in ${alignment_folder}\n      do\n        echo \\${alignment}\n        cp -r \\${alignment}/* all_realignments_combined\n      done\n\n  mkdir 16_selected_alignments_RT\n\n  python /Yang-and-Smith-RBGV-scripts/07a_subset_fasta_from_tree_and_batch.py \\\n  ${RT_folder} \\\n  .tre \\\n  all_realignments_combined \\\n  16_selected_alignments_RT \\\n  -batch_size ${params.batch_size}\n\n  mv 08_selected_alignments_batch_folders 16_selected_alignments_RT_batch_folders\n  \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "RT_folder",
            "alignment_folder"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "WRITE_ALIGNMENT_SUBSET_MI_14": {
        "name_process": "WRITE_ALIGNMENT_SUBSET_MI_14",
        "string_process": "\nprocess WRITE_ALIGNMENT_SUBSET_MI_14 {\n    \n                                                    \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}\", mode: 'copy'\n\n  input:\n  path(MI_folder)\n  path(alignment_folder)\n\n  output:\n  path(\"17_selected_alignments_MI_batch_folders/batch_*\"), emit: mi_subset_batch_folders_ch\n\n  script:\n  \"\"\"\n  mkdir all_realignments_combined\n    for alignment in ${alignment_folder}\n      do\n        echo \\${alignment}\n        cp -r \\${alignment}/* all_realignments_combined\n      done\n\n  mkdir 17_selected_alignments_MI\n\n  python /Yang-and-Smith-RBGV-scripts/07a_subset_fasta_from_tree_and_batch.py \\\n  ${MI_folder} \\\n  .tre \\\n  all_realignments_combined \\\n  17_selected_alignments_MI \\\n  -batch_size ${params.batch_size}\n\n  mv 08_selected_alignments_batch_folders 17_selected_alignments_MI_batch_folders\n  \"\"\"\n}",
        "nb_lignes_process": 36,
        "string_script": "  \"\"\"\n  mkdir all_realignments_combined\n    for alignment in ${alignment_folder}\n      do\n        echo \\${alignment}\n        cp -r \\${alignment}/* all_realignments_combined\n      done\n\n  mkdir 17_selected_alignments_MI\n\n  python /Yang-and-Smith-RBGV-scripts/07a_subset_fasta_from_tree_and_batch.py \\\n  ${MI_folder} \\\n  .tre \\\n  all_realignments_combined \\\n  17_selected_alignments_MI \\\n  -batch_size ${params.batch_size}\n\n  mv 08_selected_alignments_batch_folders 17_selected_alignments_MI_batch_folders\n  \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "MI_folder",
            "alignment_folder"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "STRIP_NAMES_AND_REALIGN_MO_15": {
        "name_process": "STRIP_NAMES_AND_REALIGN_MO_15",
        "string_process": "\nprocess STRIP_NAMES_AND_REALIGN_MO_15 {\n    \n                                                \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}/18_alignments_stripped_names_MO\", mode: 'copy', pattern: \"batch_*_stripped_names/*\", saveAs: { filename -> file(filename).getName() }\n  publishDir \"${params.outdir}/19_alignments_stripped_names_MO_realigned\", mode: 'copy', pattern: \"batch_*_alignments/*\", saveAs: { filename -> file(filename).getName() }\n\n\n  input:\n  path(selected_alignments_MO)\n\n  output:\n  path(\"batch_*_stripped_names/*\"), emit: stripped_names_ch\n  path(\"batch_*_alignments/*\"), emit: stripped_names_aligned_ch\n\n  script:\n  if (params.no_supercontigs) {\n      no_supercontigs_string = \"-no_supercontigs\"\n    } else {\n      no_supercontigs_string = ''\n    }\n\n  \"\"\"\n  echo ${selected_alignments_MO}\n  python /Yang-and-Smith-RBGV-scripts/12a_strip_names_and_align.py \\\n  ${selected_alignments_MO} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \\\n  ${no_supercontigs_string} \n  \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "  if (params.no_supercontigs) {\n      no_supercontigs_string = \"-no_supercontigs\"\n    } else {\n      no_supercontigs_string = ''\n    }\n\n  \"\"\"\n  echo ${selected_alignments_MO}\n  python /Yang-and-Smith-RBGV-scripts/12a_strip_names_and_align.py \\\n  ${selected_alignments_MO} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \\\n  ${no_supercontigs_string} \n  \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "selected_alignments_MO"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}/18_alignments_stripped_names_MO\", mode: 'copy', pattern: \"batch_*_stripped_names/*\", saveAs: { filename -> file(filename).getName() }",
            "publishDir \"${params.outdir}/19_alignments_stripped_names_MO_realigned\", mode: 'copy', pattern: \"batch_*_alignments/*\", saveAs: { filename -> file(filename).getName() }"
        ],
        "when": "",
        "stub": ""
    },
    "STRIP_NAMES_AND_REALIGN_RT_16": {
        "name_process": "STRIP_NAMES_AND_REALIGN_RT_16",
        "string_process": "\nprocess STRIP_NAMES_AND_REALIGN_RT_16 {\n    \n                                                \n    \n\n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}/20_alignments_stripped_names_RT\", mode: 'copy', pattern: \"batch_*_stripped_names/*\", saveAs: { filename -> file(filename).getName() }\n  publishDir \"${params.outdir}/21_alignments_stripped_names_RT_realigned\", mode: 'copy', pattern: \"batch_*_alignments/*\", saveAs: { filename -> file(filename).getName() }\n\n  input:\n  path(selected_alignments_RT)\n\n  output:\n  path(\"batch_*_stripped_names/*\"), emit: stripped_names_ch\n  path(\"batch_*_alignments/*\"), emit: stripped_names_aligned_ch\n\n  script:\n  if (params.no_supercontigs) {\n      no_supercontigs_string = \"-no_supercontigs\"\n    } else {\n      no_supercontigs_string = ''\n    }\n\n  \"\"\"\n  python /Yang-and-Smith-RBGV-scripts/12a_strip_names_and_align.py \\\n  ${selected_alignments_RT} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \\\n  ${no_supercontigs_string}\n  \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "  if (params.no_supercontigs) {\n      no_supercontigs_string = \"-no_supercontigs\"\n    } else {\n      no_supercontigs_string = ''\n    }\n\n  \"\"\"\n  python /Yang-and-Smith-RBGV-scripts/12a_strip_names_and_align.py \\\n  ${selected_alignments_RT} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \\\n  ${no_supercontigs_string}\n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "selected_alignments_RT"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}/20_alignments_stripped_names_RT\", mode: 'copy', pattern: \"batch_*_stripped_names/*\", saveAs: { filename -> file(filename).getName() }",
            "publishDir \"${params.outdir}/21_alignments_stripped_names_RT_realigned\", mode: 'copy', pattern: \"batch_*_alignments/*\", saveAs: { filename -> file(filename).getName() }"
        ],
        "when": "",
        "stub": ""
    },
    "STRIP_NAMES_AND_REALIGN_MI_17": {
        "name_process": "STRIP_NAMES_AND_REALIGN_MI_17",
        "string_process": "\nprocess STRIP_NAMES_AND_REALIGN_MI_17 {\n    \n                                                \n    \n\n              \n  label 'in_container'\n  publishDir \"${params.outdir}/22_alignments_stripped_names_MI\", mode: 'copy', pattern: \"batch_*_stripped_names/*\", saveAs: { filename -> file(filename).getName() }\n  publishDir \"${params.outdir}/23_alignments_stripped_names_MI_realigned\", mode: 'copy', pattern: \"batch_*_alignments/*\"  , saveAs: { filename -> file(filename).getName() }\n\n  input:\n  path(selected_alignments_MI)\n\n  output:\n  path(\"batch_*_stripped_names/*\"), emit: stripped_names_ch\n  path(\"batch_*_alignments/*\"), emit: stripped_names_aligned_ch\n\n  script:\n  if (params.no_supercontigs) {\n      no_supercontigs_string = \"-no_supercontigs\"\n    } else {\n      no_supercontigs_string = ''\n    }\n\n  \"\"\"\n  python /Yang-and-Smith-RBGV-scripts/12a_strip_names_and_align.py \\\n  ${selected_alignments_MI} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \\\n  ${no_supercontigs_string}\n  \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "  if (params.no_supercontigs) {\n      no_supercontigs_string = \"-no_supercontigs\"\n    } else {\n      no_supercontigs_string = ''\n    }\n\n  \"\"\"\n  python /Yang-and-Smith-RBGV-scripts/12a_strip_names_and_align.py \\\n  ${selected_alignments_MI} \\\n  -threads_pool ${params.pool} \\\n  -threads_mafft ${params.threads} \\\n  ${no_supercontigs_string}\n  \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "selected_alignments_MI"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "chrisjackson-pellicle__Yang-and-Smith-paralogy-resolution",
        "directive": [
            "label 'in_container'",
            "publishDir \"${params.outdir}/22_alignments_stripped_names_MI\", mode: 'copy', pattern: \"batch_*_stripped_names/*\", saveAs: { filename -> file(filename).getName() }",
            "publishDir \"${params.outdir}/23_alignments_stripped_names_MI_realigned\", mode: 'copy', pattern: \"batch_*_alignments/*\" , saveAs: { filename -> file(filename).getName() }"
        ],
        "when": "",
        "stub": ""
    }
}
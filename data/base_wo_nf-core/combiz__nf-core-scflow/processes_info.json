{
    "SCFLOW_DGE": {
        "name_process": "SCFLOW_DGE",
        "string_process": "\nprocess SCFLOW_DGE {\n    tag \"${celltype} (${n_cells_str} cells) | ${de_method}\"\n    label 'process_high'\n    errorStrategy 'ignore'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:\"${celltype}_${de_method}\") }\n\n                                                \n\n    input:\n    path sce\n    each de_method\n    each ct_tuple\n    path ensembl_mappings\n\n    output:\n    path '*.tsv'              , emit: de_table      , optional: true\n    path '*.html'             , emit: de_report     , optional: true\n    path '*_volcano_plot.png' , emit: de_plot       , optional: true\n                                                                              \n\n    script:\n    celltype     = ct_tuple[0]\n    n_cells      = ct_tuple[1].toInteger()\n    n_cells_str  = (Math.round(n_cells * 100) / 100000).round(1).toString() + 'k'\n    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    echo \"celltype: ${celltype} n_cells: ${n_cells_str}\"\n    export MC_CORES=${task.cpus}\n    export MKL_NUM_THREADS=1\n    export NUMEXPR_NUM_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n    export VECLIB_MAXIMUM_THREADS=1\n    scflow_dge.r \\\n    $options.args \\\n    --sce ${sce} \\\n    --celltype ${celltype} \\\n    --de_method ${de_method} \\\n    --ensembl_mappings ${ensembl_mappings}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 45,
        "string_script": "    celltype     = ct_tuple[0]\n    n_cells      = ct_tuple[1].toInteger()\n    n_cells_str  = (Math.round(n_cells * 100) / 100000).round(1).toString() + 'k'\n    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    echo \"celltype: ${celltype} n_cells: ${n_cells_str}\"\n    export MC_CORES=${task.cpus}\n    export MKL_NUM_THREADS=1\n    export NUMEXPR_NUM_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n    export VECLIB_MAXIMUM_THREADS=1\n    scflow_dge.r \\\n    $options.args \\\n    --sce ${sce} \\\n    --celltype ${celltype} \\\n    --de_method ${de_method} \\\n    --ensembl_mappings ${ensembl_mappings}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sce",
            "de_method",
            "ct_tuple",
            "ensembl_mappings"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag \"${celltype} (${n_cells_str} cells) | ${de_method}\"",
            "label 'process_high'",
            "errorStrategy 'ignore'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:\"${celltype}_${de_method}\") }"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_INTEGRATE": {
        "name_process": "SCFLOW_INTEGRATE",
        "string_process": "\nprocess SCFLOW_INTEGRATE {\n    tag 'MERGED'\n    label 'process_high_memory'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                                \n\n    input:\n    path sce\n\n    output:\n    path 'integrated_sce/', emit: integrated_sce\n\n    script:\n    def software = getSoftwareName(task.process)\n\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n    export MKL_NUM_THREADS=1\n    export NUMEXPR_NUM_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n    export VECLIB_MAXIMUM_THREADS=1\n    scflow_integrate.r \\\n    $options.args \\\n    --sce_path ${sce}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software = getSoftwareName(task.process)\n\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n    export MKL_NUM_THREADS=1\n    export NUMEXPR_NUM_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n    export VECLIB_MAXIMUM_THREADS=1\n    scflow_integrate.r \\\n    $options.args \\\n    --sce_path ${sce}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sce"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag 'MERGED'",
            "label 'process_high_memory'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }"
        ],
        "when": "",
        "stub": ""
    },
    "GET_SOFTWARE_VERSIONS": {
        "name_process": "GET_SOFTWARE_VERSIONS",
        "string_process": "\nprocess GET_SOFTWARE_VERSIONS {\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    tag 'Version Info'\n    label 'process_tiny'\n    errorStrategy 'ignore'\n                 \n\n    output:\n    path \"software_versions.tsv\"     , emit: tsv\n\n    script:                                                                    \n    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.r software_versions.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "    \"\"\"\n    echo $workflow.manifest.version > pipeline.version.txt\n    echo $workflow.nextflow.version > nextflow.version.txt\n    scrape_software_versions.r software_versions.tsv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "tag 'Version Info'",
            "label 'process_tiny'",
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_MERGEQCTABLES": {
        "name_process": "SCFLOW_MERGEQCTABLES",
        "string_process": "\nprocess SCFLOW_MERGEQCTABLES {\n    tag 'MERGEQCTABLES'\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                                \n\n    input:\n    path qcs_tsv\n\n    output:\n    path '*.tsv', emit: qc_summary\n\n    script:\n    def software = getSoftwareName(task.process)\n\n\n    \"\"\"\n    merge_tables.r \\\n    $options.args \\\n    --filepaths ${qcs_tsv.join(',')}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def software = getSoftwareName(task.process)\n\n\n    \"\"\"\n    merge_tables.r \\\n    $options.args \\\n    --filepaths ${qcs_tsv.join(',')}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qcs_tsv"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag 'MERGEQCTABLES'",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_PLOTREDDIMGENES": {
        "name_process": "SCFLOW_PLOTREDDIMGENES",
        "string_process": "\nprocess SCFLOW_PLOTREDDIMGENES {\n    tag 'MERGED'\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                                \n\n    input:\n    path sce\n    path reddim_genes_yml\n\n    output:\n    path 'reddim_gene_plots/', emit: reddim_gene_plots\n\n    script:\n    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    scflow_plot_reddim_genes.r \\\n    $options.args \\\n    --sce ${sce} \\\n    --reddim_genes_yml ${reddim_genes_yml}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    scflow_plot_reddim_genes.r \\\n    $options.args \\\n    --sce ${sce} \\\n    --reddim_genes_yml ${reddim_genes_yml}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sce",
            "reddim_genes_yml"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag 'MERGED'",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_CHECKINPUTS": {
        "name_process": "SCFLOW_CHECKINPUTS",
        "string_process": "\nprocess SCFLOW_CHECKINPUTS {\n    tag 'SCFLOW_CHECKINPUTS'\n    label 'process_tiny'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                            \n\n    input:\n    path manifest\n    path input\n\n    output:\n    path 'checked_manifest.txt', emit: checked_manifest\n\n    script:\n    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    check_inputs.r \\\\\n        --input $input \\\n        --manifest $manifest\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    check_inputs.r \\\\\n        --input $input \\\n        --manifest $manifest\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "manifest",
            "input"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag 'SCFLOW_CHECKINPUTS'",
            "label 'process_tiny'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }"
        ],
        "when": "",
        "stub": ""
    },
    "SAMPLESHEET_CHECK": {
        "name_process": "SAMPLESHEET_CHECK",
        "string_process": "\nprocess SAMPLESHEET_CHECK {\n    tag \"$samplesheet\"\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }\n\n    conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null)\n    if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) {\n        container \"https://depot.galaxyproject.org/singularity/python:3.8.3\"\n    } else {\n        container \"quay.io/biocontainers/python:3.8.3\"\n    }\n\n    input:\n    path samplesheet\n\n    output:\n    path '*.csv'\n\n    script:                                                                    \n    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    check_samplesheet.py \\\\\n        $samplesheet \\\\\n        samplesheet.valid.csv\n    \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag \"$samplesheet\"",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:'pipeline_info', meta:[:], publish_by_meta:[]) }",
            "conda (params.enable_conda ? \"conda-forge::python=3.8.3\" : null) if (workflow.containerEngine == 'singularity' && !params.singularity_pull_docker_container) { container \"https://depot.galaxyproject.org/singularity/python:3.8.3\" } else { container \"quay.io/biocontainers/python:3.8.3\" }"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_FINALIZE": {
        "name_process": "SCFLOW_FINALIZE",
        "string_process": "\nprocess SCFLOW_FINALIZE {\n    tag 'MERGED'\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                                \n\n    input:\n    path sce\n    path celltype_mappings\n\n    output:\n    path 'final_sce'                , emit: final_sce, type: 'dir'\n    path 'celltypes.tsv'            , emit: celltypes\n    path 'celltype_metrics_report'  , emit: celltype_metrics_report, type: 'dir'\n    path 'celltype_marker_tables'   , emit: celltype_marker_tables, type: 'dir'\n    path 'celltype_marker_plots'    , emit: celltype_marker_plots, type: 'dir'\n\n    script:\n    def software = getSoftwareName(task.process)\n    def ctm = celltype_mappings.simpleName != 'NO_FILE' ? \"$celltype_mappings\" : 'nofile'\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    scflow_finalize_sce.r \\\n    $options.args \\\n    --sce_path ${sce} \\\n    --celltype_mappings ${ctm}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def software = getSoftwareName(task.process)\n    def ctm = celltype_mappings.simpleName != 'NO_FILE' ? \"$celltype_mappings\" : 'nofile'\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    scflow_finalize_sce.r \\\n    $options.args \\\n    --sce_path ${sce} \\\n    --celltype_mappings ${ctm}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sce",
            "celltype_mappings"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag 'MERGED'",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_REPORTINTEGRATED": {
        "name_process": "SCFLOW_REPORTINTEGRATED",
        "string_process": "\nprocess SCFLOW_REPORTINTEGRATED {\n    tag 'MERGED'\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                                \n\n    input:\n    path( sce )\n\n    output:\n    path 'integration_report', emit: integration_report, type: 'dir'\n\n    script:\n    def software = getSoftwareName(task.process)\n\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    scflow_report_integrated.r \\\n    $options.args \\\n    --sce_path ${sce}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    def software = getSoftwareName(task.process)\n\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    scflow_report_integrated.r \\\n    $options.args \\\n    --sce_path ${sce}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sce"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag 'MERGED'",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_DIRICHLET": {
        "name_process": "SCFLOW_DIRICHLET",
        "string_process": "\nprocess SCFLOW_DIRICHLET {\n    tag 'DIRICHLET'\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                                \n\n    input:\n    path sce\n\n    output:\n    path 'dirichlet_report', emit: dirichlet_report\n\n    script:\n    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    scflow_dirichlet.r \\\n    $options.args \\\n    --sce_path ${sce}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    scflow_dirichlet.r \\\n    $options.args \\\n    --sce_path ${sce}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sce"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag 'DIRICHLET'",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_MAPCELLTYPES": {
        "name_process": "SCFLOW_MAPCELLTYPES",
        "string_process": "\nprocess SCFLOW_MAPCELLTYPES {\n    tag 'MERGED'\n    label 'process_high'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                                \n\n    input:\n    path sce\n    path ctd_path\n\n    output:\n    path 'celltype_mapped_sce/' , emit: celltype_mapped_sce, type: 'dir'\n    path 'celltype_mappings.tsv', emit: celltype_mappings\n\n    script:\n    def software = getSoftwareName(task.process)\n\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    mkdir ctd_folder && unzip ${ctd_path} -d ./ctd_folder\n\n\n    scflow_map_celltypes.r \\\n    $options.args \\\n    --sce_path ${sce} \\\n    --ctd_folder ctd_folder\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def software = getSoftwareName(task.process)\n\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    mkdir ctd_folder && unzip ${ctd_path} -d ./ctd_folder\n\n\n    scflow_map_celltypes.r \\\n    $options.args \\\n    --sce_path ${sce} \\\n    --ctd_folder ctd_folder\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sce",
            "ctd_path"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag 'MERGED'",
            "label 'process_high'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_CLUSTER": {
        "name_process": "SCFLOW_CLUSTER",
        "string_process": "\nprocess SCFLOW_CLUSTER {\n    tag 'MERGED'\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                            \n\n    input:\n        path sce\n\n    output:\n        path 'clustered_sce/'       , emit: clustered_sce, type: 'dir'\n\n    script:\n        def software = getSoftwareName(task.process)\n\n        \"\"\"\n        export MC_CORES=${task.cpus}\n\n        scflow_cluster.r \\\n        $options.args \\\n        --sce_path ${sce}\n\n        scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n        \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "        def software = getSoftwareName(task.process)\n\n        \"\"\"\n        export MC_CORES=${task.cpus}\n\n        scflow_cluster.r \\\n        $options.args \\\n        --sce_path ${sce}\n\n        scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n        \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sce"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag 'MERGED'",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_QC": {
        "name_process": "SCFLOW_QC",
        "string_process": "\nprocess SCFLOW_QC {\n    tag \"${key}\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:\"${key}\") }\n\n                                            \n\n    input:\n    tuple val(key), path(mat_path)\n    path input\n    path ensembl_mappings\n\n    output:\n    path '*.html'               , emit: qc_report\n    path 'qc_plot_data'         , emit: qc_plot_data, type: 'dir'\n    path 'qc_summary/*.tsv'     , emit: qc_summary\n    path 'qc_plots'             , emit: qc_plots, type: 'dir'\n    path 'sce/*_sce'            , emit: qc_sce, type: 'dir'\n\n    script:\n    def software = getSoftwareName(task.process)\n\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    if [[ -d ${mat_path} ]]; then\n        echo \"${mat_path} is a directory\"\n        MATPATH=${mat_path}\n    elif [[ -f ${mat_path} ]]; then\n        echo \"${mat_path} is a file\"\n        mkdir mat_folder && unzip ${mat_path} -d ./mat_folder\n        MATPATH=mat_folder\n    else\n        echo \"${mat_path} is not valid\"\n        MATPATH=${mat_path}\n        exit 1\n    fi\n\n    scflow_qc.r \\\n    $options.args \\\n    --input ${input} \\\n    --mat_path \\${MATPATH} \\\n    --key ${key} \\\n    --ensembl_mappings ${ensembl_mappings}\n\n    mkdir sce; mv ${key}_sce sce/\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 52,
        "string_script": "    def software = getSoftwareName(task.process)\n\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    if [[ -d ${mat_path} ]]; then\n        echo \"${mat_path} is a directory\"\n        MATPATH=${mat_path}\n    elif [[ -f ${mat_path} ]]; then\n        echo \"${mat_path} is a file\"\n        mkdir mat_folder && unzip ${mat_path} -d ./mat_folder\n        MATPATH=mat_folder\n    else\n        echo \"${mat_path} is not valid\"\n        MATPATH=${mat_path}\n        exit 1\n    fi\n\n    scflow_qc.r \\\n    $options.args \\\n    --input ${input} \\\n    --mat_path \\${MATPATH} \\\n    --key ${key} \\\n    --ensembl_mappings ${ensembl_mappings}\n\n    mkdir sce; mv ${key}_sce sce/\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 29,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "key",
            "mat_path",
            "input",
            "ensembl_mappings"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag \"${key}\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:\"${key}\") }"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_MERGE": {
        "name_process": "SCFLOW_MERGE",
        "string_process": "\nprocess SCFLOW_MERGE {\n    tag 'MERGED'\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                                \n\n    input:\n    path qc_passed_sces\n    path ensembl_mappings\n\n    output:\n    path 'merged_sce/'              , emit: merged_sce          , type: 'dir'\n    path 'merge_plots'              , emit: merge_plots         , type: 'dir'\n    path 'merge_summary_plots'      , emit: merge_summary_plots , type: 'dir'\n    path 'merged_report'            , emit: merged_report       , type: 'dir'\n\n    script:\n    def software = getSoftwareName(task.process)\n\n    \"\"\"\n\n    scflow_merge.r \\\n    $options.args \\\n    --sce_paths ${qc_passed_sces.join(',')} \\\n    --ensembl_mappings ${ensembl_mappings} \\\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    def software = getSoftwareName(task.process)\n\n    \"\"\"\n\n    scflow_merge.r \\\n    $options.args \\\n    --sce_paths ${qc_passed_sces.join(',')} \\\n    --ensembl_mappings ${ensembl_mappings} \\\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "qc_passed_sces",
            "ensembl_mappings"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag 'MERGED'",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_REDUCEDIMS": {
        "name_process": "SCFLOW_REDUCEDIMS",
        "string_process": "\nprocess SCFLOW_REDUCEDIMS {\n    tag 'MERGED'\n    label 'process_medium'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                                \n\n    input:\n    path sce\n\n    output:\n    path 'reddim_sce/', emit: reddim_sce\n\n    script:\n    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n    export MKL_NUM_THREADS=1\n    export NUMEXPR_NUM_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n    export VECLIB_MAXIMUM_THREADS=1\n\n    scflow_reduce_dims.r \\\n    $options.args \\\n    --sce_path ${sce}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n    export MKL_NUM_THREADS=1\n    export NUMEXPR_NUM_THREADS=1\n    export OMP_NUM_THREADS=1\n    export OPENBLAS_NUM_THREADS=1\n    export VECLIB_MAXIMUM_THREADS=1\n\n    scflow_reduce_dims.r \\\n    $options.args \\\n    --sce_path ${sce}\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sce"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag 'MERGED'",
            "label 'process_medium'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }"
        ],
        "when": "",
        "stub": ""
    },
    "SCFLOW_IPA": {
        "name_process": "SCFLOW_IPA",
        "string_process": "\nprocess SCFLOW_IPA {\n    tag \"${de_table_basename}\"\n    label 'process_low'\n    publishDir \"${params.outdir}\",\n        mode: params.publish_dir_mode,\n        saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }\n\n                                                \n\n    input:\n    path de_table\n\n    output:\n    path '*_ipa'      , emit: ipa_results , optional: true, type: 'dir'\n    path '*.html'   , emit: ipa_report  , optional: true\n\n    script:\n    de_table_basename = \"${de_table.baseName}\"\n    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    scflow_ipa.r \\\n    $options.args \\\n    --gene_file ${de_table.join(',')}\n\n    mv ipa ${de_table_basename}_ipa\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"\n}",
        "nb_lignes_process": 31,
        "string_script": "    de_table_basename = \"${de_table.baseName}\"\n    def software = getSoftwareName(task.process)\n\n    \"\"\"\n    export MC_CORES=${task.cpus}\n\n    scflow_ipa.r \\\n    $options.args \\\n    --gene_file ${de_table.join(',')}\n\n    mv ipa ${de_table_basename}_ipa\n\n    scflow_version=\\$(Rscript -e 'cat(as.character(utils::packageVersion(\"scFlow\")))'); echo \"scFlow \\${scflow_version}\" > \"scFlow_\\${scflow_version}.version.txt\"\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "de_table"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "combiz__nf-core-scflow",
        "directive": [
            "tag \"${de_table_basename}\"",
            "label 'process_low'",
            "publishDir \"${params.outdir}\" , mode: params.publish_dir_mode , saveAs: { filename -> saveFiles(filename:filename, options:params.options, publish_dir:getSoftwareName(task.process), publish_id:'') }"
        ],
        "when": "",
        "stub": ""
    }
}
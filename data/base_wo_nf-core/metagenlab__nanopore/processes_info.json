{
    "stop_watch": {
        "name_process": "stop_watch",
        "string_process": "\nprocess stop_watch {\nscript:\n\"\"\"\nsleep $params.wait\necho \"spent $params.wait seconds watching fast5 dir\" > $params.fast5/$fileName\n\"\"\"\n}",
        "nb_lignes_process": 6,
        "string_script": "\"\"\"\nsleep $params.wait\necho \"spent $params.wait seconds watching fast5 dir\" > $params.fast5/$fileName\n\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metagenlab__nanopore",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "guppy_basecalling": {
        "name_process": "guppy_basecalling",
        "string_process": "\nprocess guppy_basecalling  {\n  container 'genomicpariscentre/guppy:4.5.3'\n\n  cpus params.cores\n\n  when: params.basecall\n\n  input: file fast5List from fast5_ch.buffer(size: params.batch, remainder: true)\n\n  output: \n  file \"fail/*.fastq\" into failed_fastq_ch\n  file \"pass/*.fastq\" into passed_fastq_ch\n  file '*.txt' into basecall_summary_ch\n      \n  script:\n  if (params.basecall == 'cpu')\n      if (params.trim)\n        \"\"\"\n        guppy_basecaller -i . --save_path . \\\n        --config $params.model --cpu_threads_per_caller ${task.cpus} \\\n        --num_callers 1  --trim_strategy \"dna\" --trim_barcodes --compress_fastq\n        \"\"\"\n      else\n        \"\"\"\n        guppy_basecaller -i . --save_path . \\\n        --config $params.model --cpu_threads_per_caller ${task.cpus} \\\n        --num_callers 1\n        \"\"\"\n\n  else if (params.basecall == 'gpu')\n     if (params.trim)\n        \"\"\"\n        guppy_basecaller -i . --save_path . \\\n        --config $params.model -x \"cuda:0\" \\\n        --num_callers ${task.cpus} --gpu_runners_per_device ${task.cpus} --trim_strategy \"dna\" --trim_barcodes \n        \"\"\"\n    else\n        \"\"\"\n        guppy_basecaller -i . --save_path . \\\n        --config $params.model -x \"cuda:0\" \\\n        --num_callers ${task.cpus} --gpu_runners_per_device ${task.cpus}\n        \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "  if (params.basecall == 'cpu')\n      if (params.trim)\n        \"\"\"\n        guppy_basecaller -i . --save_path . \\\n        --config $params.model --cpu_threads_per_caller ${task.cpus} \\\n        --num_callers 1  --trim_strategy \"dna\" --trim_barcodes --compress_fastq\n        \"\"\"\n      else\n        \"\"\"\n        guppy_basecaller -i . --save_path . \\\n        --config $params.model --cpu_threads_per_caller ${task.cpus} \\\n        --num_callers 1\n        \"\"\"\n\n  else if (params.basecall == 'gpu')\n     if (params.trim)\n        \"\"\"\n        guppy_basecaller -i . --save_path . \\\n        --config $params.model -x \"cuda:0\" \\\n        --num_callers ${task.cpus} --gpu_runners_per_device ${task.cpus} --trim_strategy \"dna\" --trim_barcodes \n        \"\"\"\n    else\n        \"\"\"\n        guppy_basecaller -i . --save_path . \\\n        --config $params.model -x \"cuda:0\" \\\n        --num_callers ${task.cpus} --gpu_runners_per_device ${task.cpus}\n        \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "failed_fastq_ch",
            "passed_fastq_ch",
            "basecall_summary_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'genomicpariscentre/guppy:4.5.3'",
            "cpus params.cores when: params.basecall input: file fast5List from fast5_ch.buffer(size: params.batch, remainder: true)"
        ],
        "when": "",
        "stub": ""
    },
    "quality_reads_filtering": {
        "name_process": "quality_reads_filtering",
        "string_process": "\nprocess quality_reads_filtering {\n  container 'quay.io/biocontainers/nanofilt:2.8.0--py_0'\n\n  conda 'bioconda::nanofilt=2.8.0'\n  \n  tag \"${sampleId}\"\n  \n  publishDir \"$params.outdir/filtered/$sampleId\", mode: 'copy', pattern: \"*\"\n\n  when: params.filter\n\n  input: set sampleId, file(fastq) from filter_fastqs_ch\n  \n  output: tuple(sampleId, file(\"${sampleId}.fastq\")) into quality_fastqs_ch\n  \n  script:\n  \"\"\"\n  NanoFilt $fastq -q $params.phred > ${sampleId}.fastq\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  NanoFilt $fastq -q $params.phred > ${sampleId}.fastq\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'quay.io/biocontainers/nanofilt:2.8.0--py_0'",
            "conda 'bioconda::nanofilt=2.8.0'",
            "tag \"${sampleId}\"",
            "publishDir \"$params.outdir/filtered/$sampleId\", mode: 'copy', pattern: \"*\" when: params.filter input: set sampleId, file(fastq) from filter_fastqs_ch output: tuple(sampleId, file(\"${sampleId}.fastq\")) into quality_fastqs_ch"
        ],
        "when": "",
        "stub": ""
    },
    "pyco_qc": {
        "name_process": "pyco_qc",
        "string_process": "\nprocess pyco_qc {\n  container 'quay.io/biocontainers/pycoqc:2.5.2--py_0'\n  \n  conda 'bioconda::pycoqc=2.5.2'\n  \n  tag \"${sampleId}\"\n\n  publishDir \"$params.outdir/qc/$sampleId\", mode: 'copy', pattern: \"*\"\n\n  when: (params.qc=='pycoqc' && params.summary)\n  \n  input: set sampleId, file(summary) from summary_qc_ch\n  \n  output: tuple(sampleId, file(\"${sampleId}.html\")) into html_report_ch\n  \n  script:\n  \"\"\"\n  pycoQC -f $summary -o ${sampleId}.html\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  pycoQC -f $summary -o ${sampleId}.html\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'quay.io/biocontainers/pycoqc:2.5.2--py_0'",
            "conda 'bioconda::pycoqc=2.5.2'",
            "tag \"${sampleId}\"",
            "publishDir \"$params.outdir/qc/$sampleId\", mode: 'copy', pattern: \"*\" when: (params.qc=='pycoqc' && params.summary) input: set sampleId, file(summary) from summary_qc_ch output: tuple(sampleId, file(\"${sampleId}.html\")) into html_report_ch"
        ],
        "when": "",
        "stub": ""
    },
    "nanoplot_qc": {
        "name_process": "nanoplot_qc",
        "string_process": "\nprocess nanoplot_qc {\n  container 'quay.io/biocontainers/nanoplot:1.38.0--pyhdfd78af_0'\n  \n  conda 'bioconda::nanoplot=1.38.0'\n  \n  tag \"${sampleId}\"\n\n  cpus params.cores\n  \n  publishDir \"$params.outdir/qc/$sampleId\", mode: 'copy', pattern: \"*\"\n  \n  when: params.qc=='nanoplot'\n\n  input: set sampleId, file(fastq) from fastq_qc_ch\n\n  output: tuple(sampleId, file(\"${sampleId}*\")) into nanoplot_ch\n  \n  script:\n  \"\"\"\n  NanoPlot -t ${task.cpus} -p $sampleId -o . --fastq $fastq\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  NanoPlot -t ${task.cpus} -p $sampleId -o . --fastq $fastq\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'quay.io/biocontainers/nanoplot:1.38.0--pyhdfd78af_0'",
            "conda 'bioconda::nanoplot=1.38.0'",
            "tag \"${sampleId}\"",
            "cpus params.cores",
            "publishDir \"$params.outdir/qc/$sampleId\", mode: 'copy', pattern: \"*\" when: params.qc=='nanoplot' input: set sampleId, file(fastq) from fastq_qc_ch output: tuple(sampleId, file(\"${sampleId}*\")) into nanoplot_ch"
        ],
        "when": "",
        "stub": ""
    },
    "centrifuge_fastqs": {
        "name_process": "centrifuge_fastqs",
        "string_process": "\nprocess centrifuge_fastqs {\n  container 'quay.io/biocontainers/centrifuge:1.0.4_beta--h9a82719_6'\n\n  conda 'bioconda::centrifuge=1.0.4_beta'\n\n  tag \"${sampleId}\"\n  \n  cpus params.cores\n  \n  publishDir \"$params.outdir/centrifuge/$sampleId\", mode: 'copy', pattern: \"*\"\n  \n  when: params.tax\n\n  input: set sampleId, file(fastq) from fastq_tax_ch\n  \n  output: tuple(sampleId, file(\"${sampleId}*\")) into centrifuge_reports_ch\n  \n  script:\n  \"\"\"\n  centrifuge -p ${task.cpus} -x $params.cendb/$params.cenin -U $fastq -S ${sampleId}-out.txt\n  centrifuge-kreport -x $params.cendb/$params.cenin ${sampleId}-out.txt > ${sampleId}-kreport.txt\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  centrifuge -p ${task.cpus} -x $params.cendb/$params.cenin -U $fastq -S ${sampleId}-out.txt\n  centrifuge-kreport -x $params.cendb/$params.cenin ${sampleId}-out.txt > ${sampleId}-kreport.txt\n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "Centrifuge"
        ],
        "tools_url": [
            "https://bio.tools/centrifuge"
        ],
        "tools_dico": [
            {
                "name": "Centrifuge",
                "uri": "https://bio.tools/centrifuge",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Nucleic acid sequence analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2478",
                                    "term": "Sequence analysis (nucleic acid)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A very rapid and memory-efficient system for the classification of DNA sequences from microbial samples. The system uses a novel indexing scheme based on the Burrows-Wheeler transform and the Ferragina-Manzini index, optimized specifically for the metagenomic classification problem. Together these advances enable timely and accurate analysis of large metagenomics data sets on conventional desktop computers.",
                "homepage": "https://ccb.jhu.edu/software/centrifuge/"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'quay.io/biocontainers/centrifuge:1.0.4_beta--h9a82719_6'",
            "conda 'bioconda::centrifuge=1.0.4_beta'",
            "tag \"${sampleId}\"",
            "cpus params.cores",
            "publishDir \"$params.outdir/centrifuge/$sampleId\", mode: 'copy', pattern: \"*\" when: params.tax input: set sampleId, file(fastq) from fastq_tax_ch output: tuple(sampleId, file(\"${sampleId}*\")) into centrifuge_reports_ch"
        ],
        "when": "",
        "stub": ""
    },
    "assembly_with_flye": {
        "name_process": "assembly_with_flye",
        "string_process": "\nprocess assembly_with_flye {\n  container 'quay.io/biocontainers/flye:2.8.3--py27h6a42192_1' \n\n  conda 'bioconda::flye=2.8.3'\n\n  tag \"${sampleId}\"\n\n  cpus params.cores\n\n  publishDir \"$params.outdir/assembly/$sampleId\", mode: 'copy', pattern: \"*\"\n\n  when: params.assembly\n\n  input: set sampleId, file(fastq) from fastq_assembly_ch\n  \n  output: \n  tuple(sampleId, file(\"assembly.fasta\")) into fasta_ch\n  tuple(sampleId, file(\"assembly_graph.gfa\")) into gfa_ch\n  tuple(sampleId, file(\"assembly_info.txt\")) into assembly_info_ch\n  \n  script:\n  if (params.meta)\n    \"\"\"\n    flye --nano-raw $fastq -t ${task.cpus} --meta -o . \n    \"\"\"\n  else\n    \"\"\"\n    flye --nano-raw $fastq -t ${task.cpus} -o .\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "  if (params.meta)\n    \"\"\"\n    flye --nano-raw $fastq -t ${task.cpus} --meta -o . \n    \"\"\"\n  else\n    \"\"\"\n    flye --nano-raw $fastq -t ${task.cpus} -o .\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [
            "Flye"
        ],
        "tools_url": [
            "https://bio.tools/Flye"
        ],
        "tools_dico": [
            {
                "name": "Flye",
                "uri": "https://bio.tools/Flye",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Whole genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "Genome sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3673",
                            "term": "WGS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Mapping assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De-novo assembly"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0523",
                                    "term": "Sequence assembly (mapping assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "De Bruijn graph"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0524",
                                    "term": "Sequence assembly (de-novo assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Flye is a de novo assembler for single molecule sequencing reads, such as those produced by PacBio and Oxford Nanopore Technologies. It is designed for a wide range of datasets, from small bacterial projects to large mammalian-scale assemblies. The package represents a complete pipeline: it takes raw PB / ONT reads as input and outputs polished contigs.",
                "homepage": "https://github.com/fenderglass/Flye"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "fasta_ch",
            "gfa_ch",
            "assembly_info_ch"
        ],
        "nb_outputs": 3,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'quay.io/biocontainers/flye:2.8.3--py27h6a42192_1'",
            "conda 'bioconda::flye=2.8.3'",
            "tag \"${sampleId}\"",
            "cpus params.cores",
            "publishDir \"$params.outdir/assembly/$sampleId\", mode: 'copy', pattern: \"*\" when: params.assembly input: set sampleId, file(fastq) from fastq_assembly_ch"
        ],
        "when": "",
        "stub": ""
    },
    "hybrid_assembly_unicycler": {
        "name_process": "hybrid_assembly_unicycler",
        "string_process": "\nprocess hybrid_assembly_unicycler {\n  container 'quay.io/biocontainers/unicycler:0.4.8--py38h8162308_3'\n\n  conda 'bioconda::unicycler=0.4.8'\n\n  tag \"${sampleId}\"   \n\n  cpus params.cores\n\n  publishDir \"$params.outdir/hybrid-assembly/$sampleId\", mode: 'copy', pattern: \"*\"\n\n  when: params.hybrid \n\n  input: \n  set sampleId, file(fastq) from fastq_hybrid_assembly_ch\n  set sampleId, file(r1), file(r2) from illumina_fastq_ch\n  \n  output: \n  tuple(sampleId, file(\"assembly.fasta\")) into hybrid_fasta_ch\n  tuple(sampleId, file(\"assembly.gfa\")) into hybrid_gfa_ch\n\n  script:\n  \"\"\"\n  unicycler -1 $r1 -2 $r2 -l $fastq -t ${task.cpus} -o .\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  \"\"\"\n  unicycler -1 $r1 -2 $r2 -l $fastq -t ${task.cpus} -o .\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Unicycler"
        ],
        "tools_url": [
            "https://bio.tools/unicycler"
        ],
        "tools_dico": [
            {
                "name": "Unicycler",
                "uri": "https://bio.tools/unicycler",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3436",
                                    "term": "Aggregation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0925",
                                "term": "Sequence assembly"
                            }
                        ]
                    }
                ],
                "description": "A tool for assembling bacterial genomes from a combination of short (2nd generation) and long (3rd generation) sequencing reads.",
                "homepage": "https://github.com/rrwick/Unicycler"
            }
        ],
        "inputs": [
            "fastq_hybrid_assembly_ch",
            "illumina_fastq_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "hybrid_fasta_ch",
            "hybrid_gfa_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'quay.io/biocontainers/unicycler:0.4.8--py38h8162308_3'",
            "conda 'bioconda::unicycler=0.4.8'",
            "tag \"${sampleId}\"",
            "cpus params.cores",
            "publishDir \"$params.outdir/hybrid-assembly/$sampleId\", mode: 'copy', pattern: \"*\" when: params.hybrid"
        ],
        "when": "",
        "stub": ""
    },
    "mapping_reads_against_assembly": {
        "name_process": "mapping_reads_against_assembly",
        "string_process": "\nprocess mapping_reads_against_assembly {\n  container 'quay.io/biocontainers/minimap2:2.20--h5bf99c6_0'\n  \n  conda 'bioconda::minimap2=2.20'\n  \n  tag \"${sampleId}\"\n\n  cpus params.cores\n\n  publishDir \"$params.outdir/mapping/$sampleId\", mode: 'copy', pattern: \"*\"\n  \n  when: (params.map && params.assembly)\n  \n  input: \n  set sampleId, file(fastq) from fastq_mapping_assembly_ch\n  set sampleId, file(fasta) from assemblies_map_ch\n  \n  output: \n  tuple(sampleId, file(\"${sampleId}-assembly.bam\")) into bam_assembly_ch\n  \n  script:\n  \"\"\"\n  minimap2 -t ${task.cpus} -ax map-ont $fasta $fastq | samtools sort -@ ${task.cpus} -o ${sampleId}-assembly.bam\n  \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "  \"\"\"\n  minimap2 -t ${task.cpus} -ax map-ont $fasta $fastq | samtools sort -@ ${task.cpus} -o ${sampleId}-assembly.bam\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fastq_mapping_assembly_ch",
            "assemblies_map_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bam_assembly_ch"
        ],
        "nb_outputs": 1,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'quay.io/biocontainers/minimap2:2.20--h5bf99c6_0'",
            "conda 'bioconda::minimap2=2.20'",
            "tag \"${sampleId}\"",
            "cpus params.cores",
            "publishDir \"$params.outdir/mapping/$sampleId\", mode: 'copy', pattern: \"*\" when: (params.map && params.assembly)"
        ],
        "when": "",
        "stub": ""
    },
    "minimap2_reads_to_reference": {
        "name_process": "minimap2_reads_to_reference",
        "string_process": "\nprocess minimap2_reads_to_reference {\n  container 'quay.io/biocontainers/minimap2:2.20--h5bf99c6_0'\n  \n  conda 'bioconda::minimap2=2.20'\n  \n  tag \"${sampleId}\"\n\n  cpus params.cores\n\n  publishDir \"$params.outdir/mapping/$sampleId\", mode: 'copy', pattern: \"*\"\n\n  when: (params.map && params.reference)\n\n  input: \n  set sampleId, file(fastq) from fastq_mapping_reads_ch\n  set sampleId, file(reference) from references_ch \n\n  output: \n  tuple(sampleId, file(\"${sampleId}-ref.bam\")) into bam_ref_ch\n  tuple(sampleId, file(\"${sampleId}-ref.bam.bai\")) into bai_ch\n  \n  script:\n  \"\"\"\n  minimap2 -t ${task.cpus} -ax map-ont $reference $fastq | samtools sort -@ ${task.cpus} -o ${sampleId}-ref.bam\n  samtools index ${sampleId}-ref.bam\n  samtools view -c -F 260 ${sampleId}-ref.bam > ${sampleId}-ref.bam\n  \"\"\"\n}",
        "nb_lignes_process": 27,
        "string_script": "  \"\"\"\n  minimap2 -t ${task.cpus} -ax map-ont $reference $fastq | samtools sort -@ ${task.cpus} -o ${sampleId}-ref.bam\n  samtools index ${sampleId}-ref.bam\n  samtools view -c -F 260 ${sampleId}-ref.bam > ${sampleId}-ref.bam\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [
            "Minimap2",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/minimap2",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "Minimap2",
                "uri": "https://bio.tools/minimap2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise sequence alignment"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0491",
                                    "term": "Pairwise alignment"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Pairwise aligner for genomic and spliced nucleotide sequences",
                "homepage": "https://github.com/lh3/minimap2"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "fastq_mapping_reads_ch",
            "references_ch"
        ],
        "nb_inputs": 2,
        "outputs": [
            "bam_ref_ch",
            "bai_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'quay.io/biocontainers/minimap2:2.20--h5bf99c6_0'",
            "conda 'bioconda::minimap2=2.20'",
            "tag \"${sampleId}\"",
            "cpus params.cores",
            "publishDir \"$params.outdir/mapping/$sampleId\", mode: 'copy', pattern: \"*\" when: (params.map && params.reference)"
        ],
        "when": "",
        "stub": ""
    },
    "bam_to_bed": {
        "name_process": "bam_to_bed",
        "string_process": "\nprocess bam_to_bed{\n  container 'quay.io/biocontainers/bedtools:2.30.0--h7d7f7ad_1'\n\n  conda 'bioconda::bedtools=2.30.0'\n  \n  tag \"${sampleId}\"\n\n  publishDir \"$params.outdir/coverage/$sampleId\", mode: 'copy', pattern: \"*\"\n\n  when: (params.map && params.reference)\n  \n  input: set sampleId, file(bam) from bed_bam_ch\n\n  output: tuple(sampleId, file(\"${bam.baseName}.tsv\")) into cov_tsv_ch\n  \n  script:\n  \"\"\"\n  bedtools genomecov -d -ibam $bam > ${bam.baseName}.tsv\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  bedtools genomecov -d -ibam $bam > ${bam.baseName}.tsv\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'quay.io/biocontainers/bedtools:2.30.0--h7d7f7ad_1'",
            "conda 'bioconda::bedtools=2.30.0'",
            "tag \"${sampleId}\"",
            "publishDir \"$params.outdir/coverage/$sampleId\", mode: 'copy', pattern: \"*\" when: (params.map && params.reference) input: set sampleId, file(bam) from bed_bam_ch output: tuple(sampleId, file(\"${bam.baseName}.tsv\")) into cov_tsv_ch"
        ],
        "when": "",
        "stub": ""
    },
    "pycoQC_coverage_plot": {
        "name_process": "pycoQC_coverage_plot",
        "string_process": "\nprocess pycoQC_coverage_plot {\n  container 'quay.io/biocontainers/pycoqc:2.5.2--py_0'\n  \n  conda 'bioconda::pycoqc=2.5.2'\n  \n  tag \"${sampleId}\"\n\n  publishDir \"$params.outdir/coverage/$sampleId\", mode: 'copy', pattern: \"*.html\"\n  \n  when: (params.coverage && params.reference && params.summary)\n  \n  input: \n  set sampleId, file(bam) from pyco_bam_ch\n  set sampleId, file(bai) from bai_ch\n  set sampleId, file(summary) from summary_aln_ch\n\n  output: tuple(sampleId, file(\"*_cov.html\")) into cov_ch\n  \n  script:\n  \"\"\"\n  pycoQC --summary_file $summary -a $bam -o ${bam.baseName}_cov.html\n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  pycoQC --summary_file $summary -a $bam -o ${bam.baseName}_cov.html\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "pyco_bam_ch",
            "bai_ch",
            "sampleId",
            "file(\"*_cov"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'quay.io/biocontainers/pycoqc:2.5.2--py_0'",
            "conda 'bioconda::pycoqc=2.5.2'",
            "tag \"${sampleId}\"",
            "publishDir \"$params.outdir/coverage/$sampleId\", mode: 'copy', pattern: \"*.html\" when: (params.coverage && params.reference && params.summary)"
        ],
        "when": "",
        "stub": ""
    },
    "rgi": {
        "name_process": "rgi",
        "string_process": "\nprocess rgi {\n  container 'docker-daemon:metagenlab/rgi:5.2.0-3.1.2'\n\n  conda 'bioconda::rgi=5.2.0'\n  \n  tag \"${sampleId}\"\n\n  publishDir \"$params.outdir/resistance\", mode: 'copy', pattern: \"*\"\n\n  cpus params.cores\n  \n  when params.res\n\n  input: set sampleId, file(fasta) from assemblies_resistance_ch\n  \n  output: \n  tuple(sampleId, file(\"${sampleId}.txt\")) into rgi_txt_ch\n  tuple(sampleId, file(\"${sampleId}.json\")) into rgi_json_ch\n  \n  script:\n  \"\"\"\n  rgi load -i $params.card/card.json --card_annotation $params.card/card_database_*.fasta \\\n  --wildcard_annotation $params.card/wildcard_database_*.fasta \\\n  --wildcard_index $params.card/wildcard/index-for-model-sequences.txt\n  rgi main -i $fasta -o ${sampleId} -t contig -a BLAST -n ${task.cpus} --split_prodigal_jobs --clean\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  rgi load -i $params.card/card.json --card_annotation $params.card/card_database_*.fasta \\\n  --wildcard_annotation $params.card/wildcard_database_*.fasta \\\n  --wildcard_index $params.card/wildcard/index-for-model-sequences.txt\n  rgi main -i $fasta -o ${sampleId} -t contig -a BLAST -n ${task.cpus} --split_prodigal_jobs --clean\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "Rgin"
        ],
        "tools_url": [
            "https://bio.tools/rgin"
        ],
        "tools_dico": [
            {
                "name": "Rgin",
                "uri": "https://bio.tools/rgin",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "C++ implementation of SConES.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rgin.html"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [
            "rgi_txt_ch",
            "rgi_json_ch"
        ],
        "nb_outputs": 2,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'docker-daemon:metagenlab/rgi:5.2.0-3.1.2'",
            "conda 'bioconda::rgi=5.2.0'",
            "tag \"${sampleId}\"",
            "publishDir \"$params.outdir/resistance\", mode: 'copy', pattern: \"*\"",
            "cpus params.cores when params.res input: set sampleId, file(fasta) from assemblies_resistance_ch"
        ],
        "when": "",
        "stub": ""
    },
    "rgi_heatmap": {
        "name_process": "rgi_heatmap",
        "string_process": "\nprocess rgi_heatmap {\n  container 'docker-daemon:metagenlab/rgi:5.2.0-3.1.2'\n\n  conda 'bioconda::rgi=5.2.0'\n\n  publishDir \"$params.outdir/resistance\", mode: 'copy', pattern: \"*\"\n\n  input: file json from rgi_json_ch.collect()\n  \n  output: file \"heatmap-all.png\" into rgi_heatmap_ch\n  \n  script:\n  \"\"\"\n  rgi heatmap -i . -o heatmap-all.png -cat drug_class -clus samples\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  rgi heatmap -i . -o heatmap-all.png -cat drug_class -clus samples\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Rgin"
        ],
        "tools_url": [
            "https://bio.tools/rgin"
        ],
        "tools_dico": [
            {
                "name": "Rgin",
                "uri": "https://bio.tools/rgin",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3053",
                            "term": "Genetics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "Genetic variation"
                        },
                        {
                            "uri": "http://edamontology.org/topic_2885",
                            "term": "DNA polymorphism"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "GWAS"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3517",
                            "term": "Genome-wide association study"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0199",
                            "term": "DNA variation"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2497",
                                    "term": "Pathway or network analysis"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "C++ implementation of SConES.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rgin.html"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'docker-daemon:metagenlab/rgi:5.2.0-3.1.2'",
            "conda 'bioconda::rgi=5.2.0'",
            "publishDir \"$params.outdir/resistance\", mode: 'copy', pattern: \"*\" input: file json from rgi_json_ch.collect() output: file \"heatmap-all.png\" into rgi_heatmap_ch"
        ],
        "when": "",
        "stub": ""
    },
    "prokka_annotation": {
        "name_process": "prokka_annotation",
        "string_process": "\nprocess prokka_annotation {\n  container 'quay.io/biocontainers/prokka:1.14.6--pl526_0'\n  \n  conda 'bioconda::prokka=1.14.6'\n  \n  tag \"${sampleId}\"\n\n  publishDir \"$params.outdir/annotation/$sampleId\", mode: 'copy', pattern: \"*\"\n\n  cpus params.cores\n  \n  when params.res\n\n  input: set sampleId, file(fasta) from assemblies_prokka_ch\n  \n  output: tuple(sampleId, file(\"PROKKA/${sampleId}\")) into prokka_out_ch\n  \n  script:\n  \"\"\"\n  prokka --outdir PROKKA --prefix ${sampleId} $fasta\n  \"\"\"\n}",
        "nb_lignes_process": 21,
        "string_script": "  \"\"\"\n  prokka --outdir PROKKA --prefix ${sampleId} $fasta\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [
            "Prokka"
        ],
        "tools_url": [
            "https://bio.tools/prokka"
        ],
        "tools_dico": [
            {
                "name": "Prokka",
                "uri": "https://bio.tools/prokka",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Model organisms"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0781",
                            "term": "Virology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0621",
                            "term": "Organisms"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "Coding region prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0362",
                                    "term": "Genome annotation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF prediction"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0436",
                                    "term": "ORF finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene finding"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2454",
                                    "term": "Gene calling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Software tool to annotate bacterial, archaeal and viral genomes quickly and produce standards-compliant output files.",
                "homepage": "https://github.com/tseemann/prokka"
            }
        ],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "metagenlab__nanopore",
        "directive": [
            "container 'quay.io/biocontainers/prokka:1.14.6--pl526_0'",
            "conda 'bioconda::prokka=1.14.6'",
            "tag \"${sampleId}\"",
            "publishDir \"$params.outdir/annotation/$sampleId\", mode: 'copy', pattern: \"*\"",
            "cpus params.cores when params.res input: set sampleId, file(fasta) from assemblies_prokka_ch output: tuple(sampleId, file(\"PROKKA/${sampleId}\")) into prokka_out_ch"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "KRAKEN2": {
        "name_process": "KRAKEN2",
        "string_process": "\nprocess KRAKEN2 {\n    tag \"$meta.id\"\n    label 'process_high'\n    label 'process_high_memory'\n\n    conda (params.enable_conda ? 'bioconda::kraken2=2.1.2 conda-forge::pigz=2.6' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' :\n        'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n    path(db)\n\n    output:\n    tuple val(meta), path(\"*classified*\")  , emit: classified\n    tuple val(meta), path(\"*unclassified*\"), emit: unclassified\n    tuple val(meta), path(\"*.kraken.gz\")   , emit: kraken\n    tuple val(meta), path(\"*.kreport\")     , emit: kreport\n    path \"versions.yml\"                    , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def pairedFlag = meta.single_end ? '' : '--paired'\n    def classifiedFlag = meta.single_end ? \"${prefix}_classified.fastq\" : \"${prefix}_classified#.fastq\"\n    def unclassifiedFlag = meta.single_end ? \"${prefix}_unclassified.fastq\" : \"${prefix}_unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n            --db ${db} \\\\\n            --threads ${task.cpus} \\\\\n            --classified-out ${classifiedFlag} \\\\\n            --unclassified-out ${unclassifiedFlag} \\\\\n            --report ${prefix}.kreport \\\\\n            ${pairedFlag} \\\\\n            ${args} \\\\\n            ${reads} \\\\\n        | gzip \\\\\n        > ${prefix}.kraken.gz\n\n    pigz -p${task.cpus} *.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def pairedFlag = meta.single_end ? '' : '--paired'\n    def classifiedFlag = meta.single_end ? \"${prefix}_classified.fastq\" : \"${prefix}_classified#.fastq\"\n    def unclassifiedFlag = meta.single_end ? \"${prefix}_unclassified.fastq\" : \"${prefix}_unclassified#.fastq\"\n    \"\"\"\n    kraken2 \\\\\n            --db ${db} \\\\\n            --threads ${task.cpus} \\\\\n            --classified-out ${classifiedFlag} \\\\\n            --unclassified-out ${unclassifiedFlag} \\\\\n            --report ${prefix}.kreport \\\\\n            ${pairedFlag} \\\\\n            ${args} \\\\\n            ${reads} \\\\\n        | gzip \\\\\n        > ${prefix}.kraken.gz\n\n    pigz -p${task.cpus} *.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kraken2: \\$(echo \\$(kraken2 --version 2>&1) | sed 's/^.*Kraken version //; s/ .*\\$//')\n        pigz: \\$( pigz --version 2>&1 | sed 's/pigz //g' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 25,
        "language_script": "bash",
        "tools": [
            "kraken2"
        ],
        "tools_url": [
            "https://bio.tools/kraken2"
        ],
        "tools_dico": [
            {
                "name": "kraken2",
                "uri": "https://bio.tools/kraken2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0637",
                            "term": "Taxonomy"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3174",
                            "term": "Metagenomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomic classification"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3460",
                                    "term": "Taxonomy assignment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3028",
                                "term": "Taxonomy"
                            }
                        ]
                    }
                ],
                "description": "Kraken 2 is the newest version of Kraken, a taxonomic classification system using exact k-mer matches to achieve high accuracy and fast classification speeds. This classifier matches each k-mer within a query sequence to the lowest common ancestor (LCA) of all genomes containing the given k-mer. The k-mer assignments inform the classification algorithm.",
                "homepage": "https://ccb.jhu.edu/software/kraken2/"
            }
        ],
        "inputs": [
            "meta",
            "reads",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_high'",
            "label 'process_high_memory'",
            "conda (params.enable_conda ? 'bioconda::kraken2=2.1.2 conda-forge::pigz=2.6' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' : 'quay.io/biocontainers/mulled-v2-5799ab18b5fc681e75923b2450abaa969907ec98:87fc08d11968d081f3e8a37131c1f1f6715b6542-0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "FASTQC": {
        "name_process": "FASTQC",
        "string_process": "process FASTQC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' :\n        'quay.io/biocontainers/fastqc:0.11.9--0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.html\"), emit: html\n    tuple val(meta), path(\"*.zip\") , emit: zip\n    path  \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 45,
        "string_script": "    def args = task.ext.args ?: ''\n                                                                          \n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        [ ! -f  ${prefix}.fastq.gz ] && ln -s $reads ${prefix}.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        [ ! -f  ${prefix}_1.fastq.gz ] && ln -s ${reads[0]} ${prefix}_1.fastq.gz\n        [ ! -f  ${prefix}_2.fastq.gz ] && ln -s ${reads[1]} ${prefix}_2.fastq.gz\n        fastqc $args --threads $task.cpus ${prefix}_1.fastq.gz ${prefix}_2.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            fastqc: \\$( fastqc --version | sed -e \"s/FastQC v//g\" )\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "FastQC"
        ],
        "tools_url": [
            "https://bio.tools/fastqc"
        ],
        "tools_dico": [
            {
                "name": "FastQC",
                "uri": "https://bio.tools/fastqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality control"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0236",
                                    "term": "Sequence composition calculation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Significance testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical testing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical test"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2238",
                                    "term": "Statistical analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing QC"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3218",
                                    "term": "Sequencing quality assessment"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0848",
                                "term": "Raw sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2955",
                                "term": "Sequence report"
                            }
                        ]
                    }
                ],
                "description": "This tool aims to provide a QC report which can spot problems or biases which originate either in the sequencer or in the starting library material. It can be run in one of two modes. It can either run as a stand alone interactive application for the immediate analysis of small numbers of FastQ files, or it can be run in a non-interactive mode where it would be suitable for integrating into a larger analysis pipeline for the systematic processing of large numbers of files.",
                "homepage": "http://www.bioinformatics.babraham.ac.uk/projects/fastqc/"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::fastqc=0.11.9\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/fastqc:0.11.9--0' : 'quay.io/biocontainers/fastqc:0.11.9--0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KRAKENTOOLS_KREPORT2KRONA": {
        "name_process": "KRAKENTOOLS_KREPORT2KRONA",
        "string_process": "\nprocess KRAKENTOOLS_KREPORT2KRONA {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::krakentools=1.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/krakentools:1.2--pyh5e36f6f_0':\n        'quay.io/biocontainers/krakentools:1.2--pyh5e36f6f_0' }\"\n\n    input:\n    tuple val(meta), path(kreport)\n\n    output:\n    tuple val(meta), path(\"*.krona\"), emit: krona\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    kreport2krona.py \\\\\n        -r ${kreport} \\\\\n        -o ${prefix}.krona \\\\\n        ${args}\n\n    # Remove ugly 'x__' prefixes for each of the taxonomic levels\n    LEVELS=(d k p c o f g s)\n    for L in \"\\${LEVELS[@]}\"; do\n        sed -i \"s/\\${L}__//g\" ${prefix}.krona\n    done\n\n    # Remove underscores that are standing in place of spaces\n    sed -i \"s/_/ /g\" ${prefix}.krona\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kreport2krona.py: ${VERSION}\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    kreport2krona.py \\\\\n        -r ${kreport} \\\\\n        -o ${prefix}.krona \\\\\n        ${args}\n\n    # Remove ugly 'x__' prefixes for each of the taxonomic levels\n    LEVELS=(d k p c o f g s)\n    for L in \"\\${LEVELS[@]}\"; do\n        sed -i \"s/\\${L}__//g\" ${prefix}.krona\n    done\n\n    # Remove underscores that are standing in place of spaces\n    sed -i \"s/_/ /g\" ${prefix}.krona\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        kreport2krona.py: ${VERSION}\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "kreport"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::krakentools=1.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/krakentools:1.2--pyh5e36f6f_0': 'quay.io/biocontainers/krakentools:1.2--pyh5e36f6f_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KRONA_IMPORTTEXT": {
        "name_process": "KRONA_IMPORTTEXT",
        "string_process": "\nprocess KRONA_IMPORTTEXT {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::krona=2.8.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/krona:2.8.1--pl5321hdfd78af_1':\n        'quay.io/biocontainers/krona:2.8.1--pl5321hdfd78af_1' }\"\n\n    input:\n    path '*'\n\n    output:\n    path \"krona.html\", emit: html\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    ktImportText * \\\\\n        -o krona.html \\\\\n        ${args}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        KronaTools: ${VERSION}\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 30,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    ktImportText * \\\\\n        -o krona.html \\\\\n        ${args}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        KronaTools: ${VERSION}\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [],
        "nb_inputs": 0,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::krona=2.8.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/krona:2.8.1--pl5321hdfd78af_1': 'quay.io/biocontainers/krona:2.8.1--pl5321hdfd78af_1' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BLAST_DBPREPARATION": {
        "name_process": "BLAST_DBPREPARATION",
        "string_process": "process BLAST_DBPREPARATION {\n    tag \"$db\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.1.0_cv2/biocontainers_v1.1.0_cv2.img' :\n        'docker.io/biocontainers/biocontainers:v1.1.0_cv2' }\"\n\n    input:\n    path db\n\n    output:\n    path \"${dbname}\", emit: db\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    dbname = db.getSimpleName()\n    \"\"\"\n    find . -name \"*.tar.gz\" -exec tar -xvf {} \\\\;\n    find . -name \"*.tgz\" -exec tar -xvf {} \\\\;\n    mkdir -p ${dbname}\n    find . -name \"*.p*\" -exec mv -v {} ${dbname} \\\\;\n    find . -name \"*.n*\" -exec mv -v {} ${dbname} \\\\;\n    find . -name \"*.bt*\" -exec mv -v {} ${dbname} \\\\;\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    dbname = db.getSimpleName()\n    \"\"\"\n    find . -name \"*.tar.gz\" -exec tar -xvf {} \\\\;\n    find . -name \"*.tgz\" -exec tar -xvf {} \\\\;\n    mkdir -p ${dbname}\n    find . -name \"*.p*\" -exec mv -v {} ${dbname} \\\\;\n    find . -name \"*.n*\" -exec mv -v {} ${dbname} \\\\;\n    find . -name \"*.bt*\" -exec mv -v {} ${dbname} \\\\;\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "db"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$db\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.1.0_cv2/biocontainers_v1.1.0_cv2.img' : 'docker.io/biocontainers/biocontainers:v1.1.0_cv2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQTK_MERGEPE": {
        "name_process": "SEQTK_MERGEPE",
        "string_process": "process SEQTK_MERGEPE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' :\n        'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: reads\n    path \"versions.yml\"          , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        ln -s ${reads} ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        seqtk \\\\\n            mergepe \\\\\n            $args \\\\\n            ${reads} \\\\\n            | gzip -n >> ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 44,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if (meta.single_end) {\n        \"\"\"\n        ln -s ${reads} ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        seqtk \\\\\n            mergepe \\\\\n            $args \\\\\n            ${reads} \\\\\n            | gzip -n >> ${prefix}.fastq.gz\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [
            "seqtk"
        ],
        "tools_url": [
            "https://bio.tools/seqtk"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' : 'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NANOSTAT": {
        "name_process": "NANOSTAT",
        "string_process": "process NANOSTAT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::nanostat=1.6.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/nanostat:1.6.0--pyhdfd78af_0' :\n        'quay.io/biocontainers/nanostat:1.6.0--pyhdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*_NanoStats\"), emit: log\n    path \"versions.yml\"           , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n                                                              \n                                                                   \n                         \n    def analysis_flag = 'summary'\n    analysis_flag = (reads.getName().contains('.fa') || reads.getName().contains('.fasta')) ? 'fasta' : analysis_flag\n    analysis_flag = (reads.getName().contains('.fq') || reads.getName().contains('.fastq')) ? 'fastq' : analysis_flag\n    analysis_flag = (reads.getName().contains('.bam')) ? 'bam' : analysis_flag\n    \"\"\"\n    NanoStat \\\\\n            -t ${task.cpus} \\\\\n            --${analysis_flag} ${reads} \\\\\n            ${args} \\\\\n        > ${prefix}_NanoStats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nanostat: \\$(NanoStat -v | sed 's/NanoStat //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 41,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n                                                              \n                                                                   \n                         \n    def analysis_flag = 'summary'\n    analysis_flag = (reads.getName().contains('.fa') || reads.getName().contains('.fasta')) ? 'fasta' : analysis_flag\n    analysis_flag = (reads.getName().contains('.fq') || reads.getName().contains('.fastq')) ? 'fastq' : analysis_flag\n    analysis_flag = (reads.getName().contains('.bam')) ? 'bam' : analysis_flag\n    \"\"\"\n    NanoStat \\\\\n            -t ${task.cpus} \\\\\n            --${analysis_flag} ${reads} \\\\\n            ${args} \\\\\n        > ${prefix}_NanoStats\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nanostat: \\$(NanoStat -v | sed 's/NanoStat //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::nanostat=1.6.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/nanostat:1.6.0--pyhdfd78af_0' : 'quay.io/biocontainers/nanostat:1.6.0--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "TRIMMOMATIC": {
        "name_process": "TRIMMOMATIC",
        "string_process": "process TRIMMOMATIC {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::trimmomatic=0.39\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/trimmomatic:0.39--hdfd78af_2':\n        'quay.io/biocontainers/trimmomatic:0.39--hdfd78af_2' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: fastq\n    tuple val(meta), path(\"*.log\")     , emit: log\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args   = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def readtype = meta.single_end ? 'SE' : 'PE'\n    def trimmed = meta.single_end ?\n        \"${prefix}_trimmed.fastq.gz\" :\n        \"${prefix}_trimmed_R1.fastq.gz /dev/null ${prefix}_trimmed_R2.fastq.gz /dev/null\"\n    def jmemstring = task.memory.toMega() + 'M'\n    \"\"\"\n    trimmomatic \\\\\n            -Xmx${jmemstring} \\\\\n            ${readtype} \\\\\n            -threads ${task.cpus} \\\\\n            ${reads} \\\\\n            ${trimmed} \\\\\n            ${args} \\\\\n        2> >(tee ${prefix}.log >&2)\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        trimmomatic: \\$(trimmomatic -version)\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 42,
        "string_script": "    def args   = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def readtype = meta.single_end ? 'SE' : 'PE'\n    def trimmed = meta.single_end ?\n        \"${prefix}_trimmed.fastq.gz\" :\n        \"${prefix}_trimmed_R1.fastq.gz /dev/null ${prefix}_trimmed_R2.fastq.gz /dev/null\"\n    def jmemstring = task.memory.toMega() + 'M'\n    \"\"\"\n    trimmomatic \\\\\n            -Xmx${jmemstring} \\\\\n            ${readtype} \\\\\n            -threads ${task.cpus} \\\\\n            ${reads} \\\\\n            ${trimmed} \\\\\n            ${args} \\\\\n        2> >(tee ${prefix}.log >&2)\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        trimmomatic: \\$(trimmomatic -version)\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 21,
        "language_script": "bash",
        "tools": [
            "Trimmomatic"
        ],
        "tools_url": [
            "https://bio.tools/trimmomatic"
        ],
        "tools_dico": [
            {
                "name": "Trimmomatic",
                "uri": "https://bio.tools/trimmomatic",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3572",
                            "term": "Data quality management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Sequence trimming"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3192",
                                    "term": "Trimming"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            },
                            {
                                "uri": "http://edamontology.org/data_0863",
                                "term": "Sequence alignment"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0006",
                                "term": "Data"
                            }
                        ]
                    }
                ],
                "description": "A flexible read trimming tool for Illumina NGS data",
                "homepage": "http://www.usadellab.org/cms/index.php?page=trimmomatic"
            }
        ],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::trimmomatic=0.39\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/trimmomatic:0.39--hdfd78af_2': 'quay.io/biocontainers/trimmomatic:0.39--hdfd78af_2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQKIT_SPLIT2": {
        "name_process": "SEQKIT_SPLIT2",
        "string_process": "process SEQKIT_SPLIT2 {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::seqkit=2.1.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqkit:2.1.0--h9ee0642_0' :\n        'quay.io/biocontainers/seqkit:2.1.0--h9ee0642_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"**/*.gz\"), emit: reads\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if(meta.single_end){\n        \"\"\"\n        seqkit \\\\\n            split2 \\\\\n            $args \\\\\n            --threads $task.cpus \\\\\n            $reads \\\\\n            --out-dir ${prefix}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqkit: \\$(echo \\$(seqkit 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        seqkit \\\\\n            split2 \\\\\n            $args \\\\\n            --threads $task.cpus \\\\\n            --read1 ${reads[0]} \\\\\n            --read2 ${reads[1]} \\\\\n            --out-dir ${prefix}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqkit: \\$(echo \\$(seqkit 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 51,
        "string_script": "    def args   = task.ext.args   ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if(meta.single_end){\n        \"\"\"\n        seqkit \\\\\n            split2 \\\\\n            $args \\\\\n            --threads $task.cpus \\\\\n            $reads \\\\\n            --out-dir ${prefix}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqkit: \\$(echo \\$(seqkit 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        \"\"\"\n        seqkit \\\\\n            split2 \\\\\n            $args \\\\\n            --threads $task.cpus \\\\\n            --read1 ${reads[0]} \\\\\n            --read2 ${reads[1]} \\\\\n            --out-dir ${prefix}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqkit: \\$(echo \\$(seqkit 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 31,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::seqkit=2.1.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqkit:2.1.0--h9ee0642_0' : 'quay.io/biocontainers/seqkit:2.1.0--h9ee0642_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "SEQTK_SEQ": {
        "name_process": "SEQTK_SEQ",
        "string_process": "process SEQTK_SEQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' :\n        'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\"\n\n    input:\n    tuple val(meta), path(fastx)\n\n    output:\n    tuple val(meta), path(\"*.gz\")     , emit: fastx\n    path \"versions.yml\"               , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def extension = \"fastq\"\n    if (\"$fastx\" ==~ /.+\\.fasta|.+\\.fasta.gz|.+\\.fa|.+\\.fa.gz|.+\\.fas|.+\\.fas.gz|.+\\.fna|.+\\.fna.gz/ || \"$args\" ==~ /\\-[aA]/ ) {\n        extension = \"fasta\"\n    }\n    \"\"\"\n    seqtk \\\\\n        seq \\\\\n        $args \\\\\n        $fastx | \\\\\n        gzip -c > ${prefix}.seqtk-seq.${extension}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 38,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    def extension = \"fastq\"\n    if (\"$fastx\" ==~ /.+\\.fasta|.+\\.fasta.gz|.+\\.fa|.+\\.fa.gz|.+\\.fas|.+\\.fas.gz|.+\\.fna|.+\\.fna.gz/ || \"$args\" ==~ /\\-[aA]/ ) {\n        extension = \"fasta\"\n    }\n    \"\"\"\n    seqtk \\\\\n        seq \\\\\n        $args \\\\\n        $fastx | \\\\\n        gzip -c > ${prefix}.seqtk-seq.${extension}.gz\n\n    cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            seqtk: \\$(echo \\$(seqtk 2>&1) | sed 's/^.*Version: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [
            "seqtk",
            "rSeq"
        ],
        "tools_url": [
            "https://bio.tools/seqtk",
            "https://bio.tools/rseq"
        ],
        "tools_dico": [
            {
                "name": "seqtk",
                "uri": "https://bio.tools/seqtk",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Data handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2121",
                                    "term": "Sequence file editing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Utility operation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File handling"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "File processing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2409",
                                    "term": "Report handling"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool for processing sequences in the FASTA or FASTQ format. It parses both FASTA and FASTQ files which can also be optionally compressed by gzip.",
                "homepage": "https://github.com/lh3/seqtk"
            },
            {
                "name": "rSeq",
                "uri": "https://bio.tools/rseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0099",
                            "term": "RNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Transcriptome profiling"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA-Seq analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small RNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Small-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "Whole transcriptome shotgun sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "RNA sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3170",
                            "term": "WTSS"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3680",
                                    "term": "RNA-Seq analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2871",
                                    "term": "Sequence tagged site (STS) mapping"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0230",
                                    "term": "Sequence generation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2871",
                                    "term": "Sequence mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Set of tools for RNA-Seq data analysis. It consists of programs that deal with many aspects of RNA-Seq data analysis, such as reference sequence generation, sequence mapping, gene and isoform expressions (RPKMs) computation, etc.",
                "homepage": "http://www-personal.umich.edu/~jianghui/rseq/"
            }
        ],
        "inputs": [
            "meta",
            "fastx"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::seqtk=1.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/seqtk:1.3--h5bf99c6_3' : 'quay.io/biocontainers/seqtk:1.3--h5bf99c6_3' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "NANOFILT": {
        "name_process": "NANOFILT",
        "string_process": "process NANOFILT {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::nanofilt=2.8.0\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/nanofilt:2.8.0--py_0':\n        'quay.io/biocontainers/nanofilt:2.8.0--py_0' }\"\n\n    input:\n    tuple val(meta), path(reads)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: fastq\n    tuple val(meta), path(\"*.log\")     , emit: log\n    path \"versions.yml\"                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    gzip -cdf ${reads} \\\\\n        | NanoFilt \\\\\n            --logfile ${prefix}.nanofilt.log \\\\\n            ${args} \\\\\n        | gzip \\\\\n        > ${prefix}_trimmed.fastq.gz\n\n    # Workaround for no log file output\n    # See https://github.com/wdecoster/nanofilt/issues/50\n    echo \" \" >> ${prefix}.nanofilt.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nanofilt: \\$(NanoFilt -v | sed 's/NanoFilt //')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    gzip -cdf ${reads} \\\\\n        | NanoFilt \\\\\n            --logfile ${prefix}.nanofilt.log \\\\\n            ${args} \\\\\n        | gzip \\\\\n        > ${prefix}_trimmed.fastq.gz\n\n    # Workaround for no log file output\n    # See https://github.com/wdecoster/nanofilt/issues/50\n    echo \" \" >> ${prefix}.nanofilt.log\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        nanofilt: \\$(NanoFilt -v | sed 's/NanoFilt //')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 18,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::nanofilt=2.8.0\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/nanofilt:2.8.0--py_0': 'quay.io/biocontainers/nanofilt:2.8.0--py_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CAT_FASTQ": {
        "name_process": "CAT_FASTQ",
        "string_process": "\nprocess CAT_FASTQ {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.1.0_cv2/biocontainers_v1.1.0_cv2.img' :\n        'docker.io/biocontainers/biocontainers:v1.1.0_cv2' }\"\n\n    input:\n    tuple val(meta), path(reads, stageAs: \"input*/*\")\n    val(gzipped)\n\n    output:\n    tuple val(meta), path(\"*.merged.fastq*\"), emit: reads\n    path \"versions.yml\"                       , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def zipcmd = (gzipped) ? '| gzip' : ''\n    def ext = (gzipped) ? 'fastq.gz' : 'fastq'\n    def readList = reads.collect{ it.toString() }\n                                                                               \n                         \n    def joiner = (readList[0] == 'input1') ? '/' : ' '\n    if (meta.single_end) {\n        \"\"\"\n        zcat -f ${readList.join(joiner)} ${zipcmd} > ${prefix}.merged.${ext}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            gzip: echo \\$(gzip --version | head -n1 | sed 's/^gzip //')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def read1 = []\n        def read2 = []\n        readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n        \"\"\"\n        zcat -f ${read1.join(joiner)} ${zipcmd} > ${prefix}_1.merged.${ext}\n        zcat -f ${read2.join(joiner)} ${zipcmd} > ${prefix}_2.merged.${ext}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            gzip: echo \\$(gzip --version | head -n1 | sed 's/^gzip //')\n        END_VERSIONS\n        \"\"\"\n    }\n}",
        "nb_lignes_process": 52,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def zipcmd = (gzipped) ? '| gzip' : ''\n    def ext = (gzipped) ? 'fastq.gz' : 'fastq'\n    def readList = reads.collect{ it.toString() }\n                                                                               \n                         \n    def joiner = (readList[0] == 'input1') ? '/' : ' '\n    if (meta.single_end) {\n        \"\"\"\n        zcat -f ${readList.join(joiner)} ${zipcmd} > ${prefix}.merged.${ext}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            gzip: echo \\$(gzip --version | head -n1 | sed 's/^gzip //')\n        END_VERSIONS\n        \"\"\"\n    } else {\n        def read1 = []\n        def read2 = []\n        readList.eachWithIndex{ v, ix -> ( ix & 1 ? read2 : read1 ) << v }\n        \"\"\"\n        zcat -f ${read1.join(joiner)} ${zipcmd} > ${prefix}_1.merged.${ext}\n        zcat -f ${read2.join(joiner)} ${zipcmd} > ${prefix}_2.merged.${ext}\n\n        cat <<-END_VERSIONS > versions.yml\n        \"${task.process}\":\n            gzip: echo \\$(gzip --version | head -n1 | sed 's/^gzip //')\n        END_VERSIONS\n        \"\"\"\n    }",
        "nb_lignes_script": 30,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "gzipped"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.1.0_cv2/biocontainers_v1.1.0_cv2.img' : 'docker.io/biocontainers/biocontainers:v1.1.0_cv2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KRAKEN2_DBPREPARATION": {
        "name_process": "KRAKEN2_DBPREPARATION",
        "string_process": "process KRAKEN2_DBPREPARATION {\n    tag \"$db\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.1.0_cv2/biocontainers_v1.1.0_cv2.img' :\n        'docker.io/biocontainers/biocontainers:v1.1.0_cv2' }\"\n\n    input:\n    path db\n\n    output:\n    path \"${dbname}\", emit: db\n    path \"versions.yml\", emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    dbname = db.getSimpleName()\n    \"\"\"\n    find . -name \"*.tar.gz\" -exec tar -xvf {} \\\\;\n    find . -name \"*.tgz\" -exec tar -xvf {} \\\\;\n    mkdir -p ${dbname}\n    find . -name \"*.k2d\" -exec mv {} ${dbname} \\\\;\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    dbname = db.getSimpleName()\n    \"\"\"\n    find . -name \"*.tar.gz\" -exec tar -xvf {} \\\\;\n    find . -name \"*.tgz\" -exec tar -xvf {} \\\\;\n    mkdir -p ${dbname}\n    find . -name \"*.k2d\" -exec mv {} ${dbname} \\\\;\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        tar: \\$(echo \\$(tar --version 2>&1) | sed 's/^.*(GNU tar) //; s/ Copyright.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "db"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$db\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.1.0_cv2/biocontainers_v1.1.0_cv2.img' : 'docker.io/biocontainers/biocontainers:v1.1.0_cv2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BLAST_BLASTN": {
        "name_process": "BLAST_BLASTN",
        "string_process": "process BLAST_BLASTN {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::blast=2.12.0' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/blast:2.12.0--pl5262h3289130_0' :\n        'quay.io/biocontainers/blast:2.12.0--pl5262h3289130_0' }\"\n\n    input:\n    tuple val(meta), path(fasta)\n    path  db\n\n    output:\n    tuple val(meta), path('*.blastn.txt'), emit: txt\n    path \"versions.yml\"                  , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    DB=`find -L ./ -name \"*.ndb\" | sed 's/.ndb//'`\n    blastn \\\\\n        -num_threads $task.cpus \\\\\n        -db \\$DB \\\\\n        -query $fasta \\\\\n        $args \\\\\n        -out ${prefix}.blastn.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        blast: \\$(blastn -version 2>&1 | sed 's/^.*blastn: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    DB=`find -L ./ -name \"*.ndb\" | sed 's/.ndb//'`\n    blastn \\\\\n        -num_threads $task.cpus \\\\\n        -db \\$DB \\\\\n        -query $fasta \\\\\n        $args \\\\\n        -out ${prefix}.blastn.txt\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        blast: \\$(blastn -version 2>&1 | sed 's/^.*blastn: //; s/ .*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "G-BLASTN"
        ],
        "tools_url": [
            "https://bio.tools/g-blastn"
        ],
        "tools_dico": [
            {
                "name": "G-BLASTN",
                "uri": "https://bio.tools/g-blastn",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acids"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0077",
                            "term": "Nucleic acid informatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0346",
                                    "term": "Sequence similarity search"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment generation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0292",
                                    "term": "Sequence alignment construction"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_2976",
                                "term": "Protein sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0857",
                                "term": "Sequence search results"
                            }
                        ]
                    }
                ],
                "description": "GPU-accelerated nucleotide alignment tool based on the widely used NCBI-BLAST.",
                "homepage": "http://www.comp.hkbu.edu.hk/~chxw/software/G-BLASTN.html"
            }
        ],
        "inputs": [
            "meta",
            "fasta",
            "db"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::blast=2.12.0' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/blast:2.12.0--pl5262h3289130_0' : 'quay.io/biocontainers/blast:2.12.0--pl5262h3289130_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "KRAKENTOOLS_EXTRACT": {
        "name_process": "KRAKENTOOLS_EXTRACT",
        "string_process": "\nprocess KRAKENTOOLS_EXTRACT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::krakentools=1.2\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/krakentools:1.2--pyh5e36f6f_0':\n        'quay.io/biocontainers/krakentools:1.2--pyh5e36f6f_0' }\"\n\n    input:\n    tuple val(meta), path(reads), path(krakenfile), path(kreport)\n    val(taxids)\n\n    output:\n    tuple val(meta), path(\"*.fastq.gz\"), emit: fastq\n    path 'versions.yml'                , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def readsFlag = (meta.single_end) ? \"-s ${reads}\" : \"-s1 ${reads[0]} -s2 ${reads[1]}\"\n    def filteredFlag = (meta.single_end) ? \"-o ${prefix}_filtered.fastq\" : \"-o ${prefix}_filtered_R1.fastq -o2 ${prefix}_filtered_R2.fastq\"\n    def kreportFlag = kreport ? \"-r ${kreport}\" : ''\n    \"\"\"\n    # Kraken files should be gzipped, and are **VERY** large, so use a named pipe to\n    # prevent storage overload\n    mkfifo krakenfile\n    gzip -cdf ${krakenfile} > krakenfile &\n    extract_kraken_reads.py \\\\\n        -k krakenfile \\\\\n        ${readsFlag} \\\\\n        ${filteredFlag} \\\\\n        -t ${taxids} \\\\\n        --fastq-output \\\\\n        ${kreportFlag} \\\\\n        ${args}\n    gzip *.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        extract_kraken_reads.py: ${VERSION}\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    def readsFlag = (meta.single_end) ? \"-s ${reads}\" : \"-s1 ${reads[0]} -s2 ${reads[1]}\"\n    def filteredFlag = (meta.single_end) ? \"-o ${prefix}_filtered.fastq\" : \"-o ${prefix}_filtered_R1.fastq -o2 ${prefix}_filtered_R2.fastq\"\n    def kreportFlag = kreport ? \"-r ${kreport}\" : ''\n    \"\"\"\n    # Kraken files should be gzipped, and are **VERY** large, so use a named pipe to\n    # prevent storage overload\n    mkfifo krakenfile\n    gzip -cdf ${krakenfile} > krakenfile &\n    extract_kraken_reads.py \\\\\n        -k krakenfile \\\\\n        ${readsFlag} \\\\\n        ${filteredFlag} \\\\\n        -t ${taxids} \\\\\n        --fastq-output \\\\\n        ${kreportFlag} \\\\\n        ${args}\n    gzip *.fastq\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        extract_kraken_reads.py: ${VERSION}\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 24,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "reads",
            "krakenfile",
            "kreport",
            "taxids"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::krakentools=1.2\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/krakentools:1.2--pyh5e36f6f_0': 'quay.io/biocontainers/krakentools:1.2--pyh5e36f6f_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "CUSTOM_DUMPSOFTWAREVERSIONS": {
        "name_process": "CUSTOM_DUMPSOFTWAREVERSIONS",
        "string_process": "process CUSTOM_DUMPSOFTWAREVERSIONS {\n    label 'process_low'\n\n                                                                                                  \n    conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\"\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.yml\"    , emit: yml\n    path \"software_versions_mqc.yml\", emit: mqc_yml\n    path \"versions.yml\"             , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'\n}",
        "nb_lignes_process": 22,
        "string_script": "    def args = task.ext.args ?: ''\n    template 'dumpsoftwareversions.py'",
        "nb_lignes_script": 1,
        "language_script": "bash",
        "tools": [
            "docxtemplate"
        ],
        "tools_url": [
            "https://bio.tools/docxtemplate"
        ],
        "tools_dico": [
            {
                "name": "docxtemplate",
                "uri": "https://bio.tools/docxtemplate",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3314",
                            "term": "Chemistry"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0176",
                            "term": "Molecular dynamics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database management"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3489",
                            "term": "Database administration"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0249",
                                    "term": "Protein geometry calculation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0322",
                                    "term": "Molecular model refinement"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Deposition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database deposition"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Database submission"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3431",
                                    "term": "Data deposition"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "> VERY_LOW CONFIDENCE! | > CORRECT NAME OF TOOL COULD ALSO BE 'Phenix', 'restraints', 'Amber', 'refinement' | Improved chemistry restraints for crystallographic refinement by integrating the Amber force field into Phenix | Word templates and tools for Windows | The IUCr Word templates utilize the content management features and document styles of Word to format your manuscript and to store essential details for submission of your manuscript",
                "homepage": "http://journals.iucr.org/services/docxtemplate/"
            }
        ],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "BLAST_ADDHEADER": {
        "name_process": "BLAST_ADDHEADER",
        "string_process": "process BLAST_ADDHEADER {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.1.0_cv2/biocontainers_v1.1.0_cv2.img' :\n        'docker.io/biocontainers/biocontainers:v1.1.0_cv2' }\"\n\n    input:\n    tuple val(meta), path(blast, stageAs: 'blast.txt')\n    path(header, stageAs: 'header.txt')\n\n    output:\n    tuple val(meta), path(\"*.blast.tsv\"), emit: tsv\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    cat ${header} ${blast} > ${prefix}.blast.tsv\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    \"\"\"\n    cat ${header} ${blast} > ${prefix}.blast.tsv\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "blast",
            "header"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::sed=4.7\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.1.0_cv2/biocontainers_v1.1.0_cv2.img' : 'docker.io/biocontainers/biocontainers:v1.1.0_cv2' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    },
    "MULTIQC": {
        "name_process": "MULTIQC",
        "string_process": "process MULTIQC {\n    label 'process_medium'\n\n    conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\"\n\n    input:\n    path multiqc_files\n\n    output:\n    path \"*multiqc_report.html\", emit: report\n    path \"*_data\"              , emit: data\n    path \"*_plots\"             , optional:true, emit: plots\n    path \"versions.yml\"        , emit: versions\n\n    when:\n    task.ext.when == null || task.ext.when\n\n    script:\n    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args = task.ext.args ?: ''\n    \"\"\"\n    multiqc -f $args .\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        multiqc: \\$( multiqc --version | sed -e \"s/multiqc, version //g\" )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [
            "MultiQC"
        ],
        "tools_url": [
            "https://bio.tools/multiqc"
        ],
        "tools_dico": [
            {
                "name": "MultiQC",
                "uri": "https://bio.tools/multiqc",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0091",
                            "term": "Bioinformatics"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2428",
                                    "term": "Validation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_2048",
                                "term": "Report"
                            }
                        ]
                    }
                ],
                "description": "MultiQC aggregates results from multiple bioinformatics analyses across many samples into a single report. It searches a given directory for analysis logs and compiles a HTML report. It's a general use tool, perfect for summarising the output from numerous bioinformatics tools.",
                "homepage": "http://multiqc.info/"
            }
        ],
        "inputs": [
            "multiqc_files"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ksumngs__v-met",
        "directive": [
            "label 'process_medium'",
            "conda (params.enable_conda ? 'bioconda::multiqc=1.12' : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.12--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0' }\""
        ],
        "when": "task.ext.when == null || task.ext.when",
        "stub": ""
    }
}
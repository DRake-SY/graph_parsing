{
    "runSeqyclean": {
        "name_process": "runSeqyclean",
        "string_process": "\nprocess runSeqyclean {\n\n    storeDir resultsDir+'/cleanedreads'\n\tstageInMode = 'copy'\n\tmaxForks = seqycleanforks\n\n\tinput:\n\tset id, file(fastq_names) from readsQueue\n\n\toutput:\n\tset val(id), file(\"${id}_clean_PE1.fastq.gz\"), file(\"${id}_clean_PE2.fastq.gz\") into cleanreadsQueue\n\n\t\"\"\"\n    seqyclean -gz -minlen 25 -qual -c /Adapters_plus_PhiX_174.fasta -1 ${fastq_names[0]} -2 ${fastq_names[1]} -o ${id}_clean\n\t\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n    seqyclean -gz -minlen 25 -qual -c /Adapters_plus_PhiX_174.fasta -1 ${fastq_names[0]} -2 ${fastq_names[1]} -o ${id}_clean\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "readsQueue"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cleanreadsQueue"
        ],
        "nb_outputs": 1,
        "name_workflow": "garfinjm__legsta-nf",
        "directive": [
            "storeDir resultsDir+'/cleanedreads'",
            "stageInMode = 'copy'",
            "maxForks = seqycleanforks"
        ],
        "when": "",
        "stub": ""
    },
    "runShovill": {
        "name_process": "runShovill",
        "string_process": "\nprocess runShovill {\n\n    storeDir resultsDir+'/shovill'\n\tstageInMode = 'copy'\n\tmaxForks = 1\n\n\tinput:\n\tset id, file(R1), file(R2) from cleanreadsQueue\n\n\toutput:\n\tset val(id), file(\"${id}.fasta\") into quastQueue, legstaQueue\n\n\t\"\"\"\n    shovill --outdir . --force --cpus ${params.cpus} --ram ${params.memory} --gsize 3400000 --R1 ${R1} --R2 ${R2};\n    mv contigs.fa ${id}.fasta\n\t\"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n    shovill --outdir . --force --cpus ${params.cpus} --ram ${params.memory} --gsize 3400000 --R1 ${R1} --R2 ${R2};\n    mv contigs.fa ${id}.fasta\n\t\"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [
            "shovill"
        ],
        "tools_url": [
            "https://bio.tools/shovill"
        ],
        "tools_dico": [
            {
                "name": "shovill",
                "uri": "https://bio.tools/shovill",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0196",
                            "term": "Sequence assembly"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3301",
                            "term": "Microbiology"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genome assembly"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Sequence assembly (genome assembly)"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0525",
                                    "term": "Genomic assembly"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_3494",
                                "term": "DNA sequence"
                            }
                        ]
                    }
                ],
                "description": "Shovill is a pipeline for assembly of bacterial isolate genomes from Illumina paired-end reads.  Shovill uses SPAdes at its core, but alters the steps before and after the primary assembly step to get similar results in less time. Shovill also supports other assemblers like SKESA, Velvet and Megahit, so you can take advantage of the pre- and post-processing the Shovill provides with those too.",
                "homepage": "https://github.com/tseemann/shovill"
            }
        ],
        "inputs": [
            "cleanreadsQueue"
        ],
        "nb_inputs": 1,
        "outputs": [
            "quastQueue",
            "legstaQueue"
        ],
        "nb_outputs": 2,
        "name_workflow": "garfinjm__legsta-nf",
        "directive": [
            "storeDir resultsDir+'/shovill'",
            "stageInMode = 'copy'",
            "maxForks = 1"
        ],
        "when": "",
        "stub": ""
    },
    "runQuast": {
        "name_process": "runQuast",
        "string_process": "\nprocess runQuast {\n\n    storeDir resultsDir+'/quast'\n\tstageInMode = 'copy'\n\n\tinput:\n\tfile assemblies from quastQueue.collect()\n\n\toutput:\n\tfile \"report.tsv\" into quastResults\n\tfile \"report.html\" into quastReports\n\n\t\"\"\"\n\tquast.py -o . -t ${params.cpus} ${assemblies}\n\t\"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "\"\"\"\n\tquast.py -o . -t ${params.cpus} ${assemblies}\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "quastQueue"
        ],
        "nb_inputs": 1,
        "outputs": [
            "quastResults",
            "quastReports"
        ],
        "nb_outputs": 2,
        "name_workflow": "garfinjm__legsta-nf",
        "directive": [
            "storeDir resultsDir+'/quast'",
            "stageInMode = 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "runLegsta": {
        "name_process": "runLegsta",
        "string_process": "\nprocess runLegsta {\n\n    storeDir resultsDir\n\tstageInMode = 'copy'\n\n\tinput:\n\tfile assemblies from legstaQueue.collect()\n\n\toutput:\n\tfile \"legsta_results.tsv\" into legstaResults\n\n\t\"\"\"\n\tlegsta *.fasta > legsta_results.tsv\n\t\"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "\"\"\"\n\tlegsta *.fasta > legsta_results.tsv\n\t\"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "legstaQueue"
        ],
        "nb_inputs": 1,
        "outputs": [
            "legstaResults"
        ],
        "nb_outputs": 1,
        "name_workflow": "garfinjm__legsta-nf",
        "directive": [
            "storeDir resultsDir",
            "stageInMode = 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}
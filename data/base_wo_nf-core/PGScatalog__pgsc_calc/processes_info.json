{
    "PGSCATALOG_PARSE": {
        "name_process": "PGSCATALOG_PARSE",
        "string_process": "process PGSCATALOG_PARSE {\n    tag \"$accession\"\n    label 'process_low'\n    label 'error_retry'\n\n    conda (params.enable_conda ? \"bioconda::jq=1.6\" : null)\n        container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/jq:1.6' :\n        'quay.io/biocontainers/jq:1.6' }\"\n\n    input:\n    tuple val(accession), path(json)\n\n    output:\n    tuple val(accession), path(\"*.txt\"), emit: url\n    path \"versions.yml\"                , emit: versions\n\n    script:\n    \"\"\"\n    jq '[.ftp_scoring_file] | @tsv' ${json} > ${accession}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        jq: \\$(jq --version 2>&1 | sed 's/jq-//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "    \"\"\"\n    jq '[.ftp_scoring_file] | @tsv' ${json} > ${accession}.txt\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        jq: \\$(jq --version 2>&1 | sed 's/jq-//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "accession",
            "json"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "tag \"$accession\"",
            "label 'process_low'",
            "label 'error_retry'",
            "conda (params.enable_conda ? \"bioconda::jq=1.6\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/jq:1.6' : 'quay.io/biocontainers/jq:1.6' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SAMPLESHEET_JSON": {
        "name_process": "SAMPLESHEET_JSON",
        "string_process": "process SAMPLESHEET_JSON {\n    tag \"$samplesheet\"\n\n    conda (params.enable_conda ? \"conda-forge::pandas=1.1.5\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pandas:1.1.5' :\n        'quay.io/biocontainers/pandas:1.1.5' }\"\n\n    input:\n    path samplesheet\n\n    output:\n    path \"out.json\"    , emit: json\n    path \"versions.yml\", emit: versions\n\n    script:\n    \"\"\"\n    samplesheet_to_json.py $samplesheet out.json\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        python: \\$(echo \\$(python --version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 23,
        "string_script": "    \"\"\"\n    samplesheet_to_json.py $samplesheet out.json\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        python: \\$(echo \\$(python --version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "samplesheet"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "tag \"$samplesheet\"",
            "conda (params.enable_conda ? \"conda-forge::pandas=1.1.5\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pandas:1.1.5' : 'quay.io/biocontainers/pandas:1.1.5' }\""
        ],
        "when": "",
        "stub": ""
    },
    "COMBINE_SCORES": {
        "name_process": "COMBINE_SCORES",
        "string_process": "process COMBINE_SCORES {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::mawk=1.3.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mawk:1.3.4--h779adbc_4' :\n        'quay.io/biocontainers/mawk:1.3.4--h779adbc_4' }\"\n\n    input:\n    tuple val(meta), path(\"*.sscore\")\n\n    output:\n    tuple val(meta), path(\"*.sscore\"), emit: scorefiles\n    path \"versions.yml\"              , emit: versions\n\n    script:\n    \"\"\"\n    mawk -f ${projectDir}/bin/combine_scorefile.awk \\\\\n        *.sscore > ${meta.id}_combined.sscore\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        mawk: \\$(echo \\$(mawk -W version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 24,
        "string_script": "    \"\"\"\n    mawk -f ${projectDir}/bin/combine_scorefile.awk \\\\\n        *.sscore > ${meta.id}_combined.sscore\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        mawk: \\$(echo \\$(mawk -W version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::mawk=1.3.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mawk:1.3.4--h779adbc_4' : 'quay.io/biocontainers/mawk:1.3.4--h779adbc_4' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SPLIT_BIM": {
        "name_process": "SPLIT_BIM",
        "string_process": "process SPLIT_BIM {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::mawk=1.3.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mawk:1.3.4--h779adbc_4' :\n        'quay.io/biocontainers/mawk:1.3.4--h779adbc_4' }\"\n\n    input:\n    tuple val(meta), path(bim)\n    val split_mode\n\n    output:\n    tuple val(meta), path(\"*.keep\"), emit: variants\n    path \"versions.yml\"            , emit: versions\n\n    script:\n    \"\"\"\n    mawk -v split_mode=${split_mode} \\\n        -f ${projectDir}/bin/split_bim.awk \\\n        ${bim}\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        mawk: \\$(echo \\$(mawk -W version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    \"\"\"\n    mawk -v split_mode=${split_mode} \\\n        -f ${projectDir}/bin/split_bim.awk \\\n        ${bim}\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        mawk: \\$(echo \\$(mawk -W version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bim",
            "split_mode"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::mawk=1.3.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mawk:1.3.4--h779adbc_4' : 'quay.io/biocontainers/mawk:1.3.4--h779adbc_4' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PGSCATALOG_API": {
        "name_process": "PGSCATALOG_API",
        "string_process": "process PGSCATALOG_API {\n    tag \"$accession\"\n    label 'process_low'\n    label 'error_retry'\n\n    conda (params.enable_conda ? \"conda-forge::curl=7.79.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    val(accession)\n\n    output:\n    tuple val(accession), path(\"*.json\"), emit: json\n    path \"versions.yml\"                 , emit: versions\n\n    script:\n    \"\"\"\n    pgs_api=\\$(printf 'https://www.pgscatalog.org/rest/score/%s' ${accession})\n    curl -s \\$pgs_api -o ${accession}.json\n\n    # check for a valid response. empty response: {} = 2 chars\n    if [ \\$(wc -m < ${accession}.json) -eq 2 ]\n    then\n        echo \"PGS Catalog API error. Is --accession valid?\"\n        exit 1\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        curl: \\$(curl --version 2>&1 | head -n 1 | sed 's/curl //; s/ (x86.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    pgs_api=\\$(printf 'https://www.pgscatalog.org/rest/score/%s' ${accession})\n    curl -s \\$pgs_api -o ${accession}.json\n\n    # check for a valid response. empty response: {} = 2 chars\n    if [ \\$(wc -m < ${accession}.json) -eq 2 ]\n    then\n        echo \"PGS Catalog API error. Is --accession valid?\"\n        exit 1\n    fi\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        curl: \\$(curl --version 2>&1 | head -n 1 | sed 's/curl //; s/ (x86.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [
            "accession"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "tag \"$accession\"",
            "label 'process_low'",
            "label 'error_retry'",
            "conda (params.enable_conda ? \"conda-forge::curl=7.79.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "COMBINE_BIM": {
        "name_process": "COMBINE_BIM",
        "string_process": "process COMBINE_BIM {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::mawk=1.3.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mawk:1.3.4--h779adbc_4' :\n        'quay.io/biocontainers/mawk:1.3.4--h779adbc_4' }\"\n\n    input:\n    tuple val(meta), path(bims)\n\n    output:\n    tuple val(meta), path(\"*.combined\"), emit: variants\n    path \"versions.yml\"            , emit: versions\n\n    script:\n    def prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    mawk \\\\\n        'FNR == 1 && NR != 1 { next }\n        { print }' ${bims} > ${prefix}.combined\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        mawk: \\$(echo \\$(mawk -W version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    mawk \\\\\n        'FNR == 1 && NR != 1 { next }\n        { print }' ${bims} > ${prefix}.combined\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        mawk: \\$(echo \\$(mawk -W version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bims"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::mawk=1.3.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mawk:1.3.4--h779adbc_4' : 'quay.io/biocontainers/mawk:1.3.4--h779adbc_4' }\""
        ],
        "when": "",
        "stub": ""
    },
    "DUMPSOFTWAREVERSIONS": {
        "name_process": "DUMPSOFTWAREVERSIONS",
        "string_process": "process DUMPSOFTWAREVERSIONS {\n    label 'process_low'\n\n                                                                                                  \n    conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' :\n        'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\"\n\n    input:\n    path versions\n\n    output:\n    path \"software_versions.yml\"    , emit: yml\n    path \"software_versions_mqc.yml\", emit: mqc_yml\n    path \"versions.yml\"             , emit: versions\n\n    script:\n    \"\"\"\n    #!/usr/bin/env python\n    import yaml\n    import platform\n    from textwrap import dedent\n    def _make_versions_html(versions):\n        html = [\n            dedent(\n                '''\\\\\n                <style>\n                #nf-core-versions tbody:nth-child(even) {\n                    background-color: #f2f2f2;\n                }\n                </style>\n                <table class=\"table\" style=\"width:100%\" id=\"nf-core-versions\">\n                    <thead>\n                        <tr>\n                            <th> Process Name </th>\n                            <th> Software </th>\n                            <th> Version  </th>\n                        </tr>\n                    </thead>\n                '''\n            )\n        ]\n        for process, tmp_versions in sorted(versions.items()):\n            html.append(\"<tbody>\")\n            for i, (tool, version) in enumerate(sorted(tmp_versions.items())):\n                html.append(\n                    dedent(\n                        f'''\\\\\n                        <tr>\n                            <td><samp>{process if (i == 0) else ''}</samp></td>\n                            <td><samp>{tool}</samp></td>\n                            <td><samp>{version}</samp></td>\n                        </tr>\n                        '''\n                    )\n                )\n            html.append(\"</tbody>\")\n        html.append(\"</table>\")\n        return \"\\\\n\".join(html)\n    module_versions = {}\n    module_versions[\"${task.process.tokenize(':').last()}\"] = {\n        'python': platform.python_version(),\n        'yaml': yaml.__version__\n    }\n    with open(\"$versions\") as f:\n        workflow_versions = yaml.load(f, Loader=yaml.BaseLoader) | module_versions\n    workflow_versions[\"Workflow\"] = {\n        \"Nextflow\": \"$workflow.nextflow.version\",\n        \"$workflow.manifest.name\": \"$workflow.manifest.version\"\n    }\n    versions_mqc = {\n        'id': 'software_versions',\n        'section_name': '${workflow.manifest.name} Software Versions',\n        'section_href': 'https://github.com/${workflow.manifest.name}',\n        'plot_type': 'html',\n        'description': 'are collected at run time from the software output.',\n        'data': _make_versions_html(workflow_versions)\n    }\n    with open(\"software_versions.yml\", 'w') as f:\n        yaml.dump(workflow_versions, f, default_flow_style=False)\n    with open(\"software_versions_mqc.yml\", 'w') as f:\n        yaml.dump(versions_mqc, f, default_flow_style=False)\n    with open('versions.yml', 'w') as f:\n        yaml.dump(module_versions, f, default_flow_style=False)\n    \"\"\"\n}",
        "nb_lignes_process": 85,
        "string_script": "    \"\"\"\n    #!/usr/bin/env python\n    import yaml\n    import platform\n    from textwrap import dedent\n    def _make_versions_html(versions):\n        html = [\n            dedent(\n                '''\\\\\n                <style>\n                #nf-core-versions tbody:nth-child(even) {\n                    background-color: #f2f2f2;\n                }\n                </style>\n                <table class=\"table\" style=\"width:100%\" id=\"nf-core-versions\">\n                    <thead>\n                        <tr>\n                            <th> Process Name </th>\n                            <th> Software </th>\n                            <th> Version  </th>\n                        </tr>\n                    </thead>\n                '''\n            )\n        ]\n        for process, tmp_versions in sorted(versions.items()):\n            html.append(\"<tbody>\")\n            for i, (tool, version) in enumerate(sorted(tmp_versions.items())):\n                html.append(\n                    dedent(\n                        f'''\\\\\n                        <tr>\n                            <td><samp>{process if (i == 0) else ''}</samp></td>\n                            <td><samp>{tool}</samp></td>\n                            <td><samp>{version}</samp></td>\n                        </tr>\n                        '''\n                    )\n                )\n            html.append(\"</tbody>\")\n        html.append(\"</table>\")\n        return \"\\\\n\".join(html)\n    module_versions = {}\n    module_versions[\"${task.process.tokenize(':').last()}\"] = {\n        'python': platform.python_version(),\n        'yaml': yaml.__version__\n    }\n    with open(\"$versions\") as f:\n        workflow_versions = yaml.load(f, Loader=yaml.BaseLoader) | module_versions\n    workflow_versions[\"Workflow\"] = {\n        \"Nextflow\": \"$workflow.nextflow.version\",\n        \"$workflow.manifest.name\": \"$workflow.manifest.version\"\n    }\n    versions_mqc = {\n        'id': 'software_versions',\n        'section_name': '${workflow.manifest.name} Software Versions',\n        'section_href': 'https://github.com/${workflow.manifest.name}',\n        'plot_type': 'html',\n        'description': 'are collected at run time from the software output.',\n        'data': _make_versions_html(workflow_versions)\n    }\n    with open(\"software_versions.yml\", 'w') as f:\n        yaml.dump(workflow_versions, f, default_flow_style=False)\n    with open(\"software_versions_mqc.yml\", 'w') as f:\n        yaml.dump(versions_mqc, f, default_flow_style=False)\n    with open('versions.yml', 'w') as f:\n        yaml.dump(module_versions, f, default_flow_style=False)\n    \"\"\"",
        "nb_lignes_script": 67,
        "language_script": "python",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "versions"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::multiqc=1.11\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/multiqc:1.11--pyhdfd78af_0' : 'quay.io/biocontainers/multiqc:1.11--pyhdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PLINK2_RELABEL": {
        "name_process": "PLINK2_RELABEL",
        "string_process": "process PLINK2_RELABEL {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::plink2=2.00a2.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/plink2:2.00a2.3--h712d239_1' :\n        'quay.io/biocontainers/plink2:2.00a2.3--h712d239_1' }\"\n\n    input:\n    tuple val(meta), path(bed), path(bim), path(fam)\n\n    output:\n    tuple val(meta), path(\"*.pgen\"), emit: pgen\n    tuple val(meta), path(\"*.psam\"), emit: psam\n    tuple val(meta), path(\"*.pvar\"), emit: pvar\n    path \"versions.yml\"            , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    plink2 \\\\\n        $args \\\\\n        --set-all-var-ids '@:#:\\$r:\\$a' \\\\\n        --bfile ${bed.baseName} \\\\\n        --make-pgen \\\\\n        --out ${prefix}_${meta.chrom}\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    plink2 \\\\\n        $args \\\\\n        --set-all-var-ids '@:#:\\$r:\\$a' \\\\\n        --bfile ${bed.baseName} \\\\\n        --make-pgen \\\\\n        --out ${prefix}_${meta.chrom}\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "bed",
            "bim",
            "fam"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::plink2=2.00a2.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/plink2:2.00a2.3--h712d239_1' : 'quay.io/biocontainers/plink2:2.00a2.3--h712d239_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MAKE_REPORT": {
        "name_process": "MAKE_REPORT",
        "string_process": "process MAKE_REPORT {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::r-tidyverse=1.3.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/bioconductor-biocworkflowtools:1.20.0--r41hdfd78af_0' :\n        'quay.io/biocontainers/bioconductor-biocworkflowtools:1.20.0--r41hdfd78af_0' }\"\n\n    input:\n    tuple val(meta), path('results.scorefile')\n    path(report)\n    path(logo)\n\n    output:\n    path \"*.html\"      , emit: report\n    path \"versions.yml\", emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    # dumb workaround symlink & out_dir (rmarkdown)\n    # don't want to stageInMode very big score files\n    cp $report report.rmd\n    R -e 'rmarkdown::render(\"report.rmd\", \\\n        params = list(file = \"results.scorefile\"), \\\n        output_options = list(self_contained=TRUE))'\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        R: \\$(echo \\$(R --version 2>&1) | head -n 1 | cut -f 3 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 32,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    # dumb workaround symlink & out_dir (rmarkdown)\n    # don't want to stageInMode very big score files\n    cp $report report.rmd\n    R -e 'rmarkdown::render(\"report.rmd\", \\\n        params = list(file = \"results.scorefile\"), \\\n        output_options = list(self_contained=TRUE))'\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        R: \\$(echo \\$(R --version 2>&1) | head -n 1 | cut -f 3 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "PDEparams"
        ],
        "tools_url": [
            "https://bio.tools/PDEparams"
        ],
        "tools_dico": [
            {
                "name": "PDEparams",
                "uri": "https://bio.tools/PDEparams",
                "topic": [
                    [],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Parameter fitting toolbox for partial differential equations in Python.",
                "homepage": "http://github.com/systemsmedicine/PDE_params"
            }
        ],
        "inputs": [
            "meta",
            "report",
            "logo"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::r-tidyverse=1.3.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/bioconductor-biocworkflowtools:1.20.0--r41hdfd78af_0' : 'quay.io/biocontainers/bioconductor-biocworkflowtools:1.20.0--r41hdfd78af_0' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PLINK2_SCORE": {
        "name_process": "PLINK2_SCORE",
        "string_process": "process PLINK2_SCORE {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::plink2=2.00a2.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/plink2:2.00a2.3--h712d239_1' :\n        'quay.io/biocontainers/plink2:2.00a2.3--h712d239_1' }\"\n\n    input:\n    tuple val(meta), path(pgen), path(psam), path(pvar), val(scoremeta), path(scorefile), val(n_samples)\n\n    output:\n    tuple val(meta), path(\"*.sscore\"), emit: score\n    path \"versions.yml\"              , emit: versions\n\n    script:\n    if (n_samples < 50)\n        \"\"\"\n        plink2 \\\\\n            --score ${scorefile} no-mean-imputation \\\\\n            --pfile ${pgen.baseName} \\\\\n            --out ${meta.id}_${meta.chrom}\n\n        cat <<-END_VERSIONS > versions.yml\n        ${task.process.tokenize(':').last()}:\n            plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n        END_VERSIONS\n        \"\"\"\n    else if (n_samples > 50)\n        \"\"\"\n        plink2 \\\\\n            --score ${scorefile} \\\\\n            --pfile ${pgen.baseName} \\\\\n            --out ${meta.id}_${meta.chrom}\n\n        cat <<-END_VERSIONS > versions.yml\n        ${task.process.tokenize(':').last()}:\n            plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n        END_VERSIONS\n        \"\"\"\n}",
        "nb_lignes_process": 40,
        "string_script": "    if (n_samples < 50)\n        \"\"\"\n        plink2 \\\\\n            --score ${scorefile} no-mean-imputation \\\\\n            --pfile ${pgen.baseName} \\\\\n            --out ${meta.id}_${meta.chrom}\n\n        cat <<-END_VERSIONS > versions.yml\n        ${task.process.tokenize(':').last()}:\n            plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n        END_VERSIONS\n        \"\"\"\n    else if (n_samples > 50)\n        \"\"\"\n        plink2 \\\\\n            --score ${scorefile} \\\\\n            --pfile ${pgen.baseName} \\\\\n            --out ${meta.id}_${meta.chrom}\n\n        cat <<-END_VERSIONS > versions.yml\n        ${task.process.tokenize(':').last()}:\n            plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n        END_VERSIONS\n        \"\"\"",
        "nb_lignes_script": 23,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "scoremeta",
            "n_samples",
            "pgen",
            "psam",
            "pvar",
            "scorefile"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::plink2=2.00a2.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/plink2:2.00a2.3--h712d239_1' : 'quay.io/biocontainers/plink2:2.00a2.3--h712d239_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PLINK_EXTRACT": {
        "name_process": "PLINK_EXTRACT",
        "string_process": "process PLINK_EXTRACT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::plink=1.90b6.21\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/plink:1.90b6.21--h779adbc_1' :\n        'quay.io/biocontainers/plink:1.90b6.21--h779adbc_1' }\"\n\n    input:\n    tuple val(meta), path(bed), path(bim), path(fam), path(variants)\n\n    output:\n    tuple val(meta), path(\"*.bed\"), emit: bed\n    tuple val(meta), path(\"*.bim\"), emit: bim\n    tuple val(meta), path(\"*.fam\"), emit: fam\n    path \"versions.yml\"           , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if( \"$bed\" == \"${prefix}.bed\" ) error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    plink \\\\\n        --bfile ${meta.id} \\\\\n        $args \\\\\n        --extract $variants \\\\\n        --threads $task.cpus \\\\\n        --make-bed \\\\\n        --out $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink: \\$(echo \\$(plink --version) | sed 's/^PLINK v//;s/64.*//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 35,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n    if( \"$bed\" == \"${prefix}.bed\" ) error \"Input and output names are the same, use \\\"task.ext.prefix\\\" to disambiguate!\"\n    \"\"\"\n    plink \\\\\n        --bfile ${meta.id} \\\\\n        $args \\\\\n        --extract $variants \\\\\n        --threads $task.cpus \\\\\n        --make-bed \\\\\n        --out $prefix\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink: \\$(echo \\$(plink --version) | sed 's/^PLINK v//;s/64.*//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "meta",
            "bed",
            "bim",
            "fam",
            "variants"
        ],
        "nb_inputs": 5,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::plink=1.90b6.21\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/plink:1.90b6.21--h779adbc_1' : 'quay.io/biocontainers/plink:1.90b6.21--h779adbc_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PLINK2_EXTRACT": {
        "name_process": "PLINK2_EXTRACT",
        "string_process": "process PLINK2_EXTRACT {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::plink2=2.00a2.3\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/plink2:2.00a2.3--h712d239_1' :\n        'quay.io/biocontainers/plink2:2.00a2.3--h712d239_1' }\"\n\n    input:\n    tuple val(meta), path(pgen)\n    tuple val(meta), path(psam)\n    tuple val(meta), path(pvar)\n    path scorefile\n\n    output:\n    tuple val(meta), path(\"*.pgen\"), emit: pgen\n    tuple val(meta), path(\"*.psam\"), emit: psam\n    tuple val(meta), path(\"*.pvar\"), emit: pvar\n    path \"versions.yml\"            , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if( \"$pgen\" == \"${prefix}.pgen\" ) error \"Input and output names are the same, use the suffix option to disambiguate\"\n    \"\"\"\n    awk 'BEGIN{OFS=\":\"} {print \\$1,\\$2}' $scorefile > variants.txt\n\n    plink2 \\\\\n        $args \\\\\n        --extract variants.txt \\\\\n        --pfile ${pgen.baseName} \\\\\n        --make-pgen \\\\\n        --out ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 39,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = options.suffix ? \"${meta.id}${options.suffix}\" : \"${meta.id}\"\n    if( \"$pgen\" == \"${prefix}.pgen\" ) error \"Input and output names are the same, use the suffix option to disambiguate\"\n    \"\"\"\n    awk 'BEGIN{OFS=\":\"} {print \\$1,\\$2}' $scorefile > variants.txt\n\n    plink2 \\\\\n        $args \\\\\n        --extract variants.txt \\\\\n        --pfile ${pgen.baseName} \\\\\n        --make-pgen \\\\\n        --out ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        plink2: \\$(plink2 --version 2>&1 | sed 's/^PLINK v//; s/ 64.*\\$//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "pgen",
            "meta",
            "psam",
            "meta",
            "pvar",
            "scorefile"
        ],
        "nb_inputs": 7,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::plink2=2.00a2.3\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/plink2:2.00a2.3--h712d239_1' : 'quay.io/biocontainers/plink2:2.00a2.3--h712d239_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SCOREFILE_QC": {
        "name_process": "SCOREFILE_QC",
        "string_process": "process SCOREFILE_QC {\n    tag \"$meta.accession\"\n\n    conda (params.enable_conda ? \"bioconda::mawk=1.3.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mawk:1.3.4--h779adbc_4' :\n        'quay.io/biocontainers/mawk:1.3.4--h779adbc_4' }\"\n\n    input:\n    tuple val(meta), path(datafile)\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: data\n    path \"versions.yml\"           , emit: versions\n\n    script:\n    def prefix  = \"${meta.accession}\"\n    \"\"\"\n    mawk -v out=${prefix}.txt \\\n        -f ${projectDir}/bin/qc_scorefile.awk \\\n        ${datafile}\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        mawk: \\$(echo \\$(mawk -W version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def prefix  = \"${meta.accession}\"\n    \"\"\"\n    mawk -v out=${prefix}.txt \\\n        -f ${projectDir}/bin/qc_scorefile.awk \\\n        ${datafile}\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        mawk: \\$(echo \\$(mawk -W version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "datafile"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "tag \"$meta.accession\"",
            "conda (params.enable_conda ? \"bioconda::mawk=1.3.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mawk:1.3.4--h779adbc_4' : 'quay.io/biocontainers/mawk:1.3.4--h779adbc_4' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PGSCATALOG_GET": {
        "name_process": "PGSCATALOG_GET",
        "string_process": "process PGSCATALOG_GET {\n    tag \"$accession\"\n    label 'process_low'\n    maxRetries 5\n    errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }\n\n    conda (params.enable_conda ? \"conda-forge::curl=7.79.1\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' :\n        'biocontainers/biocontainers:v1.2.0_cv1' }\"\n\n    input:\n    tuple val(accession), path(url)\n\n    output:\n    tuple val(accession), path(\"scorefile\"), emit: scorefile\n    path \"versions.yml\"                    , emit: versions\n\n    script:\n    \"\"\"\n    sed -i '1s/^/url = /' ${url}\n    curl --connect-timeout 5 \\\\\n        --speed-time 10 \\\\\n        --speed-limit 1000 \\\\\n         -O -K ${url}\n    gunzip -c *.gz > scorefile\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        sed: \\$(sed --version 2>&1 | head -n 1 | cut -f 4 -d ' ')\n        gzip: \\$(gzip --version 2>&1 | head -n 1 | cut -f 2 -d ' ')\n        curl: \\$(curl --version 2>&1 | head -n 1 | sed 's/curl //; s/ (x86.*\\$//')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    \"\"\"\n    sed -i '1s/^/url = /' ${url}\n    curl --connect-timeout 5 \\\\\n        --speed-time 10 \\\\\n        --speed-limit 1000 \\\\\n         -O -K ${url}\n    gunzip -c *.gz > scorefile\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        sed: \\$(sed --version 2>&1 | head -n 1 | cut -f 4 -d ' ')\n        gzip: \\$(gzip --version 2>&1 | head -n 1 | cut -f 2 -d ' ')\n        curl: \\$(curl --version 2>&1 | head -n 1 | sed 's/curl //; s/ (x86.*\\$//')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "CURLS"
        ],
        "tools_url": [
            "https://bio.tools/CURLS"
        ],
        "tools_dico": [
            {
                "name": "CURLS",
                "uri": "https://bio.tools/CURLS",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "Public health and epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Pathology"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3335",
                            "term": "Cardiovascular medicine"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Public_health"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3305",
                            "term": "https://en.wikipedia.org/wiki/Epidemiology"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3421",
                            "term": "https://en.wikipedia.org/wiki/Surgery"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "Disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0634",
                            "term": "https://en.wikipedia.org/wiki/Pathology"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "towards a wider use of basic echo applications in Africa.\n\nBACKGROUND:Point-of-care ultrasound is increasingly being used as a diagnostic tool in resource-limited settings. The majority of existing ultrasound protocols have been developed and implemented in high-resource settings. In sub-Saharan Africa (SSA), patients with heart failure of various etiologies commonly present late in the disease process, with a similar syndrome of dyspnea, edema and cardiomegaly on chest X-ray. The causes of heart failure in SSA differ from those in high-resource settings. Point-of-care ultrasound has the potential to identify the underlying etiology of heart failure, and lead to targeted therapy.\n\n||| HOMEPAGE MISSING!.\n\n||| CORRECT NAME OF TOOL COULD ALSO BE 'ultrasound', 'Cardiac ultrasound resource-limited settings', 'high-resource', 'cardiomegaly SSA'",
                "homepage": "https://www.ncbi.nlm.nih.gov/pubmed/?term=31883027"
            }
        ],
        "inputs": [
            "accession",
            "url"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "tag \"$accession\"",
            "label 'process_low'",
            "maxRetries 5",
            "errorStrategy { sleep(Math.pow(2, task.attempt) * 200 as long); return 'retry' }",
            "conda (params.enable_conda ? \"conda-forge::curl=7.79.1\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://containers.biocontainers.pro/s3/SingImgsRepo/biocontainers/v1.2.0_cv1/biocontainers_v1.2.0_cv1.img' : 'biocontainers/biocontainers:v1.2.0_cv1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "PLINK_VCF": {
        "name_process": "PLINK_VCF",
        "string_process": "process PLINK_VCF {\n    tag \"$meta.id\"\n    label 'process_medium'\n\n    conda (params.enable_conda ? \"bioconda::plink=1.90b6.21\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/plink:1.90b6.21--h779adbc_1' :\n        'quay.io/biocontainers/plink:1.90b6.21--h779adbc_1' }\"\n\n    input:\n    tuple val(meta), path(vcf)\n\n    output:\n    tuple val(meta), path(\"*.bed\"), emit: bed, optional: true\n    tuple val(meta), path(\"*.bim\"), emit: bim, optional: true\n    tuple val(meta), path(\"*.fam\"), emit: fam, optional: true\n\n    path \"versions.yml\" , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    plink \\\\\n        --vcf ${vcf} \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --out ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink: \\$(echo \\$(plink --version 2>&1) | sed 's/^PLINK v//' | sed 's/..-bit.*//' )\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 34,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.prefix ?: \"${meta.id}\"\n\n    \"\"\"\n    plink \\\\\n        --vcf ${vcf} \\\\\n        $args \\\\\n        --threads $task.cpus \\\\\n        --out ${prefix}\n\n    cat <<-END_VERSIONS > versions.yml\n    \"${task.process}\":\n        plink: \\$(echo \\$(plink --version 2>&1) | sed 's/^PLINK v//' | sed 's/..-bit.*//' )\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 14,
        "language_script": "bash",
        "tools": [
            "pLink"
        ],
        "tools_url": [
            "https://bio.tools/pLink-2"
        ],
        "tools_dico": [
            {
                "name": "pLink",
                "uri": "https://bio.tools/pLink-2",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3520",
                            "term": "Proteomics experiment"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0154",
                            "term": "Small molecules"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0121",
                            "term": "Proteomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3649",
                                    "term": "Target-Decoy"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fragment weight comparison"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "PMF"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Peptide mass fingerprinting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2929",
                                    "term": "Protein fingerprinting"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A high-speed search engine pLink 2 with systematic evaluation for proteome-scale identification of cross-linked peptides.",
                "homepage": "http://pfind.ict.ac.cn/software/pLink/index.html"
            }
        ],
        "inputs": [
            "meta",
            "vcf"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_medium'",
            "conda (params.enable_conda ? \"bioconda::plink=1.90b6.21\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/plink:1.90b6.21--h779adbc_1' : 'quay.io/biocontainers/plink:1.90b6.21--h779adbc_1' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SCOREFILE_SPLIT": {
        "name_process": "SCOREFILE_SPLIT",
        "string_process": "process SCOREFILE_SPLIT {\n    label 'process_low'\n\n    conda (params.enable_conda ? \"bioconda::mawk=1.3.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mawk:1.3.4--h779adbc_4' :\n        'quay.io/biocontainers/mawk:1.3.4--h779adbc_4' }\"\n\n    input:\n    tuple val(meta), path(scorefile)\n    val split_mode\n\n    output:\n    tuple val(meta), path(\"*.keep\"), emit: scorefile\n    path \"versions.yml\"            , emit: versions\n\n    script:\n    \"\"\"\n    sed -i -e 's/:/\\\\t/' ${scorefile} > scorefile # fix first column\n    mawk -v split_mode=${split_mode} \\\n        -f ${projectDir}/bin/split_bim.awk \\\n        $scorefile\n    sed -i -e 's/\\\\t/:/' *.keep # restore first column\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        mawk: \\$(echo \\$(mawk -W version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 28,
        "string_script": "    \"\"\"\n    sed -i -e 's/:/\\\\t/' ${scorefile} > scorefile # fix first column\n    mawk -v split_mode=${split_mode} \\\n        -f ${projectDir}/bin/split_bim.awk \\\n        $scorefile\n    sed -i -e 's/\\\\t/:/' *.keep # restore first column\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        mawk: \\$(echo \\$(mawk -W version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "scorefile",
            "split_mode"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "label 'process_low'",
            "conda (params.enable_conda ? \"bioconda::mawk=1.3.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mawk:1.3.4--h779adbc_4' : 'quay.io/biocontainers/mawk:1.3.4--h779adbc_4' }\""
        ],
        "when": "",
        "stub": ""
    },
    "MATCH_VARIANTS": {
        "name_process": "MATCH_VARIANTS",
        "string_process": "process MATCH_VARIANTS {\n    tag \"$meta.id\"\n    label 'process_low'\n\n    conda (params.enable_conda ? \"conda-forge::pandas=1.1.5 sqlite\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/pandas:1.1.5' :\n        'quay.io/biocontainers/pandas:1.1.5' }\"\n\n    input:\n    tuple val(meta), path(target), val(scoremeta), path(scorefile)\n\n    output:\n    tuple val(scoremeta), path(\"*.scorefile\"), emit: scorefile\n    path \"*.log\"                             , emit: log\n    path \"versions.yml\"                      , emit: versions\n\n    script:\n    def args = task.ext.args ?: ''\n    def prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    match_variants.py \\\n        $args \\\n        --scorefile $scorefile \\\n        --target $target \\\n        --db match.db \\\n        --out ${prefix}.scorefile\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        python: \\$(echo \\$(python -V 2>&1) | cut -f 2 -d ' ')\n        sqlite: \\$(echo \\$(sqlite3 -version 2>&1) | cut -f 1 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 33,
        "string_script": "    def args = task.ext.args ?: ''\n    def prefix = task.ext.suffix ? \"${meta.id}${task.ext.suffix}\" : \"${meta.id}\"\n    \"\"\"\n    match_variants.py \\\n        $args \\\n        --scorefile $scorefile \\\n        --target $target \\\n        --db match.db \\\n        --out ${prefix}.scorefile\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        python: \\$(echo \\$(python -V 2>&1) | cut -f 2 -d ' ')\n        sqlite: \\$(echo \\$(sqlite3 -version 2>&1) | cut -f 1 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 15,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "scoremeta",
            "target",
            "scorefile"
        ],
        "nb_inputs": 4,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "tag \"$meta.id\"",
            "label 'process_low'",
            "conda (params.enable_conda ? \"conda-forge::pandas=1.1.5 sqlite\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/pandas:1.1.5' : 'quay.io/biocontainers/pandas:1.1.5' }\""
        ],
        "when": "",
        "stub": ""
    },
    "SCOREFILE_CHECK": {
        "name_process": "SCOREFILE_CHECK",
        "string_process": "process SCOREFILE_CHECK {\n    tag \"$meta.accession\"\n\n    conda (params.enable_conda ? \"bioconda::mawk=1.3.4\" : null)\n    container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?\n        'https://depot.galaxyproject.org/singularity/mawk:1.3.4--h779adbc_4' :\n        'quay.io/biocontainers/mawk:1.3.4--h779adbc_4' }\"\n\n    input:\n    tuple val(meta), path(datafile)\n\n    output:\n    tuple val(meta), path(\"*.txt\"), emit: data\n    path \"versions.yml\"           , emit: versions\n\n    script:\n    def prefix  = \"${meta.accession}\"\n    \"\"\"\n    mawk -v out=${prefix}_checked.txt \\\n        -f ${projectDir}/bin/check_scorefile.awk \\\n        ${datafile}\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        mawk: \\$(echo \\$(mawk -W version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "    def prefix  = \"${meta.accession}\"\n    \"\"\"\n    mawk -v out=${prefix}_checked.txt \\\n        -f ${projectDir}/bin/check_scorefile.awk \\\n        ${datafile}\n\n    cat <<-END_VERSIONS > versions.yml\n    ${task.process.tokenize(':').last()}:\n        mawk: \\$(echo \\$(mawk -W version 2>&1) | cut -f 2 -d ' ')\n    END_VERSIONS\n    \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "meta",
            "datafile"
        ],
        "nb_inputs": 2,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "PGScatalog__pgsc_calc",
        "directive": [
            "tag \"$meta.accession\"",
            "conda (params.enable_conda ? \"bioconda::mawk=1.3.4\" : null)",
            "container \"${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ? 'https://depot.galaxyproject.org/singularity/mawk:1.3.4--h779adbc_4' : 'quay.io/biocontainers/mawk:1.3.4--h779adbc_4' }\""
        ],
        "when": "",
        "stub": ""
    }
}
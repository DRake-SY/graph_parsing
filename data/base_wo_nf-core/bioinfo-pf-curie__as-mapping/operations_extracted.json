{
    "OPERATION_1": {
        "string": "chMultiqcConfig = Channel.fromPath(params.multiqc_config)",
        "origin": [
            [
                "params.multiqc_config",
                "A"
            ]
        ],
        "gives": [
            [
                "chMultiqcConfig",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "chOutputDocs = Channel.fromPath(\"$baseDir/docs/output.md\")",
        "origin": [
            [
                "\"$baseDir/docs/output.md\"",
                "A"
            ]
        ],
        "gives": [
            [
                "chOutputDocs",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "Channel.from( params.asfasta )\n         .splitCsv()\n         .flatten()\n         .map { file(it) }\n         .into { genomeFastaStar; genomeFastaBowtie2; genomeFastaHisat2 }",
        "origin": [
            [
                "params.asfasta",
                "V"
            ]
        ],
        "gives": [
            [
                "genomeFastaStar",
                "P"
            ],
            [
                "genomeFastaBowtie2",
                "P"
            ],
            [
                "genomeFastaHisat2",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "Channel.fromPath(\"${params.fasta}\")\n         .ifEmpty { exit 1, \"Reference Genome not found: ${params.fasta}\" }\n         .into { fastaParentalGenome; fastaNmaskGenome }",
        "origin": [
            [
                "\"${params.fasta}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "fastaParentalGenome",
                "P"
            ],
            [
                "fastaNmaskGenome",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "Channel.fromPath(\"${params.snpFile}\")\n         .ifEmpty { exit 1, \"SNP file not found: ${params.snpFile}\" }\n         .set { chSnpFile }",
        "origin": [
            [
                "\"${params.snpFile}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "chSnpFile",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "Channel.from( params.starIndex )\n         .splitCsv()\n         .flatten()\n         .map { file(it) }\n         .set { starIdx }",
        "origin": [
            [
                "params.starIndex",
                "V"
            ]
        ],
        "gives": [
            [
                "starIdx",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "Channel.from( params.bowtie2Index )\n         .splitCsv()\n         .flatten()\n         .map { file(it) }\n         .set { bowtie2Idx }",
        "origin": [
            [
                "params.bowtie2Index",
                "V"
            ]
        ],
        "gives": [
            [
                "bowtie2Idx",
                "P"
            ]
        ]
    },
    "OPERATION_8": {
        "string": "Channel.from( params.hisat2Index )\n         .splitCsv()\n         .flatten()\n         .map { file(it) }\n         .set { hisat2Idx }",
        "origin": [
            [
                "params.hisat2Index",
                "V"
            ]
        ],
        "gives": [
            [
                "hisat2Idx",
                "P"
            ]
        ]
    },
    "OPERATION_9": {
        "string": "Channel.fromPath(\"${params.vcf}\")\n         .ifEmpty { exit 1, \"Variant database not found: ${params.vcf}\" }\n         .into { vcfParentalGenome; vcfNmaskGenome }",
        "origin": [
            [
                "\"${params.vcf}\"",
                "A"
            ]
        ],
        "gives": [
            [
                "vcfParentalGenome",
                "P"
            ],
            [
                "vcfNmaskGenome",
                "P"
            ]
        ]
    },
    "OPERATION_10": {
        "string": "Channel\n        .fromPath(params.gtf)\n        .ifEmpty { exit 1, \"GTF annotation file not found: ${params.gtf}\" }\n        .into { gtfStar; gtfHisat2Splicesites; gtfHisat2; gtfHisat2Index; gtfTophat2; chGtf }",
        "origin": [
            [
                "params.gtf",
                "A"
            ]
        ],
        "gives": [
            [
                "gtfStar",
                "P"
            ],
            [
                "gtfHisat2Splicesites",
                "P"
            ],
            [
                "gtfHisat2",
                "P"
            ],
            [
                "gtfHisat2Index",
                "P"
            ],
            [
                "gtfTophat2",
                "P"
            ],
            [
                "chGtf",
                "P"
            ]
        ]
    },
    "OPERATION_11": {
        "string": "Channel\n    .fromPath(params.blacklist, checkIfExists: true)\n    .set {chBlacklistBigWig}",
        "origin": [
            [
                "params.blacklist, checkIfExists: true",
                "A"
            ]
        ],
        "gives": [
            [
                "chBlacklistBigWig",
                "P"
            ]
        ]
    },
    "OPERATION_12": {
        "string": "chBlacklistBigWig = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chBlacklistBigWig",
                "P"
            ]
        ]
    },
    "OPERATION_13": {
        "string": "Channel\n       .fromPath( params.metadata )\n       .ifEmpty { exit 1, \"Metadata file not found: ${params.metadata}\" }\n       .set { ch_metadata }",
        "origin": [
            [
                "params.metadata",
                "A"
            ]
        ],
        "gives": [
            [
                "ch_metadata",
                "P"
            ]
        ]
    },
    "OPERATION_14": {
        "string": "Channel\n        .from(file(\"${params.samplePlan}\"))\n        .splitCsv(header: false)\n        .map{ row -> [ row[0], [file(row[2])]] }\n        .set { rawReads }",
        "origin": [],
        "gives": [
            [
                "rawReads",
                "P"
            ]
        ]
    },
    "OPERATION_15": {
        "string": "Channel\n        .from(file(\"${params.samplePlan}\"))\n        .splitCsv(header: false)\n        .map{ row -> [ row[0], [file(row[2]), file(row[3])]] }\n        .set { rawReads }",
        "origin": [],
        "gives": [
            [
                "rawReads",
                "P"
            ]
        ]
    },
    "OPERATION_16": {
        "string": "Channel\n        .from(params.readPaths)\n        .map { row -> [ row[0], [file(row[1][0])]] }\n        .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n        .set { rawReads }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "rawReads",
                "P"
            ]
        ]
    },
    "OPERATION_17": {
        "string": "Channel\n        .from(params.readPaths)\n        .map { row -> [ row[0], [file(row[1][0]), file(row[1][1])]] }\n        .ifEmpty { exit 1, \"params.readPaths was empty - no input files supplied\" }\n        .set { rawReads }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "rawReads",
                "P"
            ]
        ]
    },
    "OPERATION_18": {
        "string": "Channel\n      .fromFilePairs( params.reads, size: params.singleEnd ? 1 : 2 )\n      .ifEmpty { exit 1, \"Cannot find any reads matching: ${params.reads}\\nNB: Path needs to be enclosed in quotes!\\nNB: Path requires at least one * wildcard!\\nIf this is single-end data, please specify --singleEnd on the command line.\" }\n      .into { rawReads }",
        "origin": [
            [
                "params.reads, size: params.singleEnd ? 1 : 2",
                "A"
            ]
        ],
        "gives": [
            [
                "rawReads",
                "P"
            ]
        ]
    },
    "OPERATION_19": {
        "string": "chSplan = Channel.fromPath(params.samplePlan)",
        "origin": [
            [
                "params.samplePlan",
                "A"
            ]
        ],
        "gives": [
            [
                "chSplan",
                "P"
            ]
        ]
    },
    "OPERATION_20": {
        "string": "Channel\n        .from(params.readPaths)\n        .collectFile() {\n          item -> [\"sample_plan.csv\", item[0] + ',' + item[0] + ',' + item[1][0] + '\\n']\n        }\n        .set{ chSplan }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "chSplan",
                "P"
            ]
        ]
    },
    "OPERATION_21": {
        "string": "Channel\n        .from(params.readPaths)\n        .collectFile() {\n          item -> [\"sample_plan.csv\", item[0] + ',' + item[0] + ',' + item[1][0] + ',' + item[1][1] + '\\n']\n        }\n        .set{ chSplan }",
        "origin": [
            [
                "params.readPaths",
                "V"
            ]
        ],
        "gives": [
            [
                "chSplan",
                "P"
            ]
        ]
    },
    "OPERATION_22": {
        "string": "Channel\n        .fromFilePairs( params.reads, size: 1 )\n        .collectFile() {\n          item -> [\"sample_plan.csv\", item[0] + ',' + item[0] + ',' + item[1][0] + '\\n']\n         }     \n         .set { chSplan }",
        "origin": [
            [
                "params.reads, size: 1",
                "A"
            ]
        ],
        "gives": [
            [
                "chSplan",
                "P"
            ]
        ]
    },
    "OPERATION_23": {
        "string": "Channel\n        .fromFilePairs( params.reads, size: 2 )\n        .collectFile() {\n          item -> [\"sample_plan.csv\", item[0] + ',' + item[0] + ',' + item[1][0] + ',' + item[1][1] + '\\n']\n        }     \n        .set { chSplan }",
        "origin": [
            [
                "params.reads, size: 2",
                "A"
            ]
        ],
        "gives": [
            [
                "chSplan",
                "P"
            ]
        ]
    },
    "OPERATION_24": {
        "string": "chSplan = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chSplan",
                "P"
            ]
        ]
    },
    "OPERATION_25": {
        "string": "rawReads = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "rawReads",
                "P"
            ]
        ]
    },
    "OPERATION_26": {
        "string": "chSnpFile = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chSnpFile",
                "P"
            ]
        ]
    },
    "OPERATION_27": {
        "string": "chSnpFile = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chSnpFile",
                "P"
            ]
        ]
    },
    "OPERATION_28": {
        "string": "chNmaskBams = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chNmaskBams",
                "P"
            ]
        ]
    },
    "OPERATION_29": {
        "string": "chFlagStat = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chFlagStat",
                "P"
            ]
        ]
    },
    "OPERATION_30": {
        "string": "chBams = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chBams",
                "P"
            ]
        ]
    },
    "OPERATION_31": {
        "string": "chMappingMqc = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chMappingMqc",
                "P"
            ]
        ]
    },
    "OPERATION_32": {
        "string": "chParentalBams = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chParentalBams",
                "P"
            ]
        ]
    },
    "OPERATION_33": {
        "string": "chTagBams = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chTagBams",
                "P"
            ]
        ]
    },
    "OPERATION_34": {
        "string": "chTagLog = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chTagLog",
                "P"
            ]
        ]
    },
    "OPERATION_35": {
        "string": "chMarkedPicstats = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chMarkedPicstats",
                "P"
            ]
        ]
    },
    "OPERATION_36": {
        "string": "chBamCount = Channel.empty()",
        "origin": [],
        "gives": [
            [
                "chBamCount",
                "P"
            ]
        ]
    },
    "OPERATION_37": {
        "string": "summary.collect { k,v -> \"${k.padRight(15)}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "summary",
                "P"
            ]
        ],
        "gives": []
    },
    "OPERATION_38": {
        "string": "chGenomeNmaskFasta.into{genomeFastaStar; genomeFastaBowtie2; genomeFastaHisat2}",
        "origin": [
            [
                "chGenomeNmaskFasta",
                "P"
            ]
        ],
        "gives": [
            [
                "genomeFastaStar",
                "P"
            ],
            [
                "genomeFastaBowtie2",
                "P"
            ],
            [
                "genomeFastaHisat2",
                "P"
            ]
        ]
    },
    "OPERATION_39": {
        "string": "chGenomeParentalFasta.into{genomeFastaStar; genomeFastaBowtie2; genomeFastaHisat2}",
        "origin": [
            [
                "chGenomeParentalFasta",
                "P"
            ]
        ],
        "gives": [
            [
                "genomeFastaStar",
                "P"
            ],
            [
                "genomeFastaBowtie2",
                "P"
            ],
            [
                "genomeFastaHisat2",
                "P"
            ]
        ]
    },
    "OPERATION_40": {
        "string": "rawReads.into{ readsFastqc; readsStar; readsBowtie2; readsHisat2; readsTophat2 }",
        "origin": [
            [
                "rawReads",
                "P"
            ]
        ],
        "gives": [
            [
                "readsFastqc",
                "P"
            ],
            [
                "readsStar",
                "P"
            ],
            [
                "readsBowtie2",
                "P"
            ],
            [
                "readsHisat2",
                "P"
            ],
            [
                "readsTophat2",
                "P"
            ]
        ]
    },
    "OPERATION_41": {
        "string": "starBam.into{chFlagStat; chNmaskBams; chParentalBams; chBams}",
        "origin": [
            [
                "starBam",
                "P"
            ]
        ],
        "gives": [
            [
                "chFlagStat",
                "P"
            ],
            [
                "chNmaskBams",
                "P"
            ],
            [
                "chParentalBams",
                "P"
            ],
            [
                "chBams",
                "P"
            ]
        ]
    },
    "OPERATION_42": {
        "string": "bowtie2Bam.into{chFlagStat; chNmaskBams; chParentalBams; chBams}",
        "origin": [
            [
                "bowtie2Bam",
                "P"
            ]
        ],
        "gives": [
            [
                "chFlagStat",
                "P"
            ],
            [
                "chNmaskBams",
                "P"
            ],
            [
                "chParentalBams",
                "P"
            ],
            [
                "chBams",
                "P"
            ]
        ]
    },
    "OPERATION_43": {
        "string": "hisat2Bam.into{chFlagStat; chNmaskBams; chParentalBams; chBams}",
        "origin": [
            [
                "hisat2Bam",
                "P"
            ]
        ],
        "gives": [
            [
                "chFlagStat",
                "P"
            ],
            [
                "chNmaskBams",
                "P"
            ],
            [
                "chParentalBams",
                "P"
            ],
            [
                "chBams",
                "P"
            ]
        ]
    },
    "OPERATION_44": {
        "string": "tophat2Bam.into{chFlagStat; chNmaskBams; chParentalBams; chBams}",
        "origin": [
            [
                "tophat2Bam",
                "P"
            ]
        ],
        "gives": [
            [
                "chFlagStat",
                "P"
            ],
            [
                "chNmaskBams",
                "P"
            ],
            [
                "chParentalBams",
                "P"
            ],
            [
                "chBams",
                "P"
            ]
        ]
    },
    "OPERATION_45": {
        "string": "chTagNmaskBams.into{chTagBams ; chTagBamsPicard}",
        "origin": [
            [
                "chTagNmaskBams",
                "P"
            ]
        ],
        "gives": [
            [
                "chTagBams",
                "P"
            ],
            [
                "chTagBamsPicard",
                "P"
            ]
        ]
    },
    "OPERATION_46": {
        "string": "tagNmaskLog.set{chTagLog}",
        "origin": [
            [
                "tagNmaskLog",
                "P"
            ]
        ],
        "gives": [
            [
                "chTagLog",
                "P"
            ]
        ]
    },
    "OPERATION_47": {
        "string": "chTagParentalBams.into{chTagBams ; chTagBamsPicard}",
        "origin": [
            [
                "chTagParentalBams",
                "P"
            ]
        ],
        "gives": [
            [
                "chTagBams",
                "P"
            ],
            [
                "chTagBamsPicard",
                "P"
            ]
        ]
    },
    "OPERATION_48": {
        "string": "tagParentalLog.set{chTagLog}",
        "origin": [
            [
                "tagParentalLog",
                "P"
            ]
        ],
        "gives": [
            [
                "chTagLog",
                "P"
            ]
        ]
    },
    "OPERATION_49": {
        "string": "chBams.set{chTagBamsPicard}",
        "origin": [
            [
                "chBams",
                "P"
            ]
        ],
        "gives": [
            [
                "chTagBamsPicard",
                "P"
            ]
        ]
    },
    "OPERATION_50": {
        "string": "chMarkedBams.into{chFiltBams; chFiltBamsSplit}",
        "origin": [
            [
                "chMarkedBams",
                "P"
            ]
        ],
        "gives": [
            [
                "chFiltBams",
                "P"
            ],
            [
                "chFiltBamsSplit",
                "P"
            ]
        ]
    },
    "OPERATION_51": {
        "string": "chTagBams.into{chFiltBams; chFiltBamsSplit}",
        "origin": [
            [
                "chTagBams",
                "P"
            ]
        ],
        "gives": [
            [
                "chFiltBams",
                "P"
            ],
            [
                "chFiltBamsSplit",
                "P"
            ]
        ]
    },
    "OPERATION_52": {
        "string": "genomeBams.join(chFiltBams).into{chBamCount; chBamWig}",
        "origin": [
            [
                "genomeBams",
                "P"
            ],
            [
                "chFiltBams",
                "P"
            ]
        ],
        "gives": [
            [
                "chBamCount",
                "P"
            ],
            [
                "chBamWig",
                "P"
            ]
        ]
    },
    "OPERATION_53": {
        "string": "chFiltBams\n      .map{ row -> [ row[0], null, null, file(row[1])] }\n      .set{chBamWig}",
        "origin": [
            [
                "chFiltBams",
                "P"
            ]
        ],
        "gives": [
            [
                "chBamWig",
                "P"
            ]
        ]
    },
    "OPERATION_54": {
        "string": "chFiltBams\n      .map{ row -> [ row[0], null, null, file(row[1])] }\n      .set{chBamWig}",
        "origin": [
            [
                "chFiltBams",
                "P"
            ]
        ],
        "gives": [
            [
                "chBamWig",
                "P"
            ]
        ]
    },
    "OPERATION_55": {
        "string": "endWfSummary = endSummary.collect { k,v -> \"${k.padRight(30, '.')}: $v\" }.join(\"\\n\")",
        "origin": [
            [
                "endSummary",
                "P"
            ]
        ],
        "gives": [
            [
                "endWfSummary",
                "P"
            ]
        ]
    },
    "OPERATION_56": {
        "string": "chGenomeReport = chGenomeNmaskReport",
        "origin": [
            [
                "chGenomeNmaskReport",
                "P"
            ]
        ],
        "gives": [
            [
                "chGenomeReport",
                "P"
            ]
        ]
    },
    "OPERATION_57": {
        "string": "chSnpFile = chSnp",
        "origin": [
            [
                "chSnp",
                "P"
            ]
        ],
        "gives": [
            [
                "chSnpFile",
                "P"
            ]
        ]
    },
    "OPERATION_58": {
        "string": "chGenomeReport = chGenomeParentalReport",
        "origin": [
            [
                "chGenomeParentalReport",
                "P"
            ]
        ],
        "gives": [
            [
                "chGenomeReport",
                "P"
            ]
        ]
    },
    "OPERATION_59": {
        "string": "chMappingMqc = starLogs",
        "origin": [
            [
                "starLogs",
                "P"
            ]
        ],
        "gives": [
            [
                "chMappingMqc",
                "P"
            ]
        ]
    },
    "OPERATION_60": {
        "string": "chMappingMqc = bowtie2Logs",
        "origin": [
            [
                "bowtie2Logs",
                "P"
            ]
        ],
        "gives": [
            [
                "chMappingMqc",
                "P"
            ]
        ]
    },
    "OPERATION_61": {
        "string": "chMappingMqc = hisat2Logs",
        "origin": [
            [
                "hisat2Logs",
                "P"
            ]
        ],
        "gives": [
            [
                "chMappingMqc",
                "P"
            ]
        ]
    },
    "OPERATION_62": {
        "string": "chMappingMqc = tophat2Logs",
        "origin": [
            [
                "tophat2Logs",
                "P"
            ]
        ],
        "gives": [
            [
                "chMappingMqc",
                "P"
            ]
        ]
    }
}
{
    "OPERATION_1": {
        "string": "in_data = Channel\n        .fromFilePairs(\"$input/**/*{brain_mask.nii.gz,bval,bvec,dwi.nii.gz}\",\n                       size: 4,\n                       maxDepth:1,\n                       flat: true) {it.parent.name}",
        "origin": [],
        "gives": [
            [
                "in_data",
                "P"
            ]
        ]
    },
    "OPERATION_2": {
        "string": "in_data_priors = Channel\n        .fromFilePairs(\"$input/**/*{ad.nii.gz,fa.nii.gz,md.nii.gz}\",\n                       size: 3,\n                       maxDepth:1,\n                       flat: true) {it.parent.name}",
        "origin": [],
        "gives": [
            [
                "in_data_priors",
                "P"
            ]
        ]
    },
    "OPERATION_3": {
        "string": "all_data_for_kernels, data_for_noddi = in_data\n    .map{sid, mask, bval, bvec, dwi ->\n        [tuple(sid, mask, bval, bvec, dwi),\n         tuple(sid, mask, bval, bvec, dwi)]}\n    .separate(2)",
        "origin": [
            [
                "in_data",
                "P"
            ]
        ],
        "gives": [
            [
                "all_data_for_kernels",
                "P"
            ],
            [
                "data_for_noddi",
                "P"
            ]
        ]
    },
    "OPERATION_4": {
        "string": "in_data_priors.take(params.nb_subjects_for_priors).set{sub_in_data_priors}",
        "origin": [
            [
                "in_data_priors",
                "P"
            ]
        ],
        "gives": [
            [
                "sub_in_data_priors",
                "P"
            ]
        ]
    },
    "OPERATION_5": {
        "string": "priors_for_mean\n    .groupTuple()\n    .set{all_priors_for_mean}",
        "origin": [
            [
                "priors_for_mean",
                "P"
            ]
        ],
        "gives": [
            [
                "all_priors_for_mean",
                "P"
            ]
        ]
    },
    "OPERATION_6": {
        "string": "all_data_for_kernels.first().set{unique_data_for_kernels}",
        "origin": [
            [
                "all_data_for_kernels",
                "P"
            ]
        ],
        "gives": [
            [
                "unique_data_for_kernels",
                "P"
            ]
        ]
    },
    "OPERATION_7": {
        "string": "data_for_noddi\n  .combine(kernel_for_noddi)\n  .set{data_with_kernel_for_noddi}",
        "origin": [
            [
                "data_for_noddi",
                "P"
            ],
            [
                "kernel_for_noddi",
                "P"
            ]
        ],
        "gives": [
            [
                "data_with_kernel_for_noddi",
                "P"
            ]
        ]
    }
}
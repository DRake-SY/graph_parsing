{
    "tif_to_n5": {
        "name_process": "tif_to_n5",
        "string_process": "\nprocess tif_to_n5 {\n    container \"janeliascicomp/n5-tools-java:1.0.0\"\n\n    memory { mem_gb }\n    cpus { cpus }\n\n    input:\n    tuple val(inputDirPath), val(outputN5Path), val(outputDatasetPath), val(blockSize), val(compression), val(mem_gb), val(cpus)\n\n    output:\n    tuple val(outputN5Path), val(outputDatasetPath)\n\n    script:\n    def args = get_arg_string(inputDirPath, outputN5Path, outputDatasetPath, blockSize, compression)\n    \"\"\"\n    /entrypoint.sh $main_class $args\n    \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "    def args = get_arg_string(inputDirPath, outputN5Path, outputDatasetPath, blockSize, compression)\n    \"\"\"\n    /entrypoint.sh $main_class $args\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "inputDirPath",
            "outputN5Path",
            "outputDatasetPath",
            "blockSize",
            "compression",
            "mem_gb",
            "cpus"
        ],
        "nb_inputs": 7,
        "outputs": [
            "outputDatasetPath"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__nf-demos",
        "directive": [
            "container \"janeliascicomp/n5-tools-java:1.0.0\"",
            "memory { mem_gb }",
            "cpus { cpus }"
        ],
        "when": "",
        "stub": ""
    },
    "tif_to_n5_cluster": {
        "name_process": "tif_to_n5_cluster",
        "string_process": "\nprocess tif_to_n5_cluster {\n    container \"janeliascicomp/n5-tools-py:1.0.0\"\n\n    input:\n    tuple val(inputDirPath), val(outputN5Path), val(outputDatasetPath), val(blockSize), val(numWorkers)\n\n    output:\n    tuple val(outputN5Path), val(outputDatasetPath)\n\n    script:\n    \"\"\"\n    /entrypoint.sh tif_to_n5 -i $inputDirPath -o $outputN5Path -d $outputDatasetPath -c $blockSize \\\n        --distributed --workers $numWorkers --dashboard\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    /entrypoint.sh tif_to_n5 -i $inputDirPath -o $outputN5Path -d $outputDatasetPath -c $blockSize \\\n        --distributed --workers $numWorkers --dashboard\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "inputDirPath",
            "outputN5Path",
            "outputDatasetPath",
            "blockSize",
            "numWorkers"
        ],
        "nb_inputs": 5,
        "outputs": [
            "outputDatasetPath"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__nf-demos",
        "directive": [
            "container \"janeliascicomp/n5-tools-py:1.0.0\""
        ],
        "when": "",
        "stub": ""
    },
    "generateMIPs": {
        "name_process": "generateMIPs",
        "string_process": "\nprocess generateMIPs {\n    container \"janeliascicomp/n5-tools-java:1.0.0\"\n\n    memory { params.mem_gb+\" GB\" }\n    cpus { params.cpus }\n\n    input:\n    tuple val(inputN5Path), val(inputDatasetPath), val(outputPath)\n    val(mipStep)\n    val(compression)\n\n    output:\n    val(outputPath)\n\n    script:\n    def args_list = []\n    args_list << '-n' << inputN5Path\n    args_list << '-i' << inputDatasetPath\n    args_list << '-o' << outputPath\n    if (mipStep) {\n        args_list << '-m' << mipStep\n    }\n    if (compression) {\n        args_list << '-c' << compression\n    }\n    def args = args_list.join(' ')\n    \"\"\"\n    /entrypoint.sh org.janelia.saalfeldlab.n5.spark.N5MaxIntensityProjectionSpark $args\n    \"\"\"\n}",
        "nb_lignes_process": 29,
        "string_script": "    def args_list = []\n    args_list << '-n' << inputN5Path\n    args_list << '-i' << inputDatasetPath\n    args_list << '-o' << outputPath\n    if (mipStep) {\n        args_list << '-m' << mipStep\n    }\n    if (compression) {\n        args_list << '-c' << compression\n    }\n    def args = args_list.join(' ')\n    \"\"\"\n    /entrypoint.sh org.janelia.saalfeldlab.n5.spark.N5MaxIntensityProjectionSpark $args\n    \"\"\"",
        "nb_lignes_script": 13,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "inputN5Path",
            "inputDatasetPath",
            "outputPath",
            "mipStep",
            "compression"
        ],
        "nb_inputs": 5,
        "outputs": [
            "outputPath"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__nf-demos",
        "directive": [
            "container \"janeliascicomp/n5-tools-java:1.0.0\"",
            "memory { params.mem_gb+\" GB\" }",
            "cpus { params.cpus }"
        ],
        "when": "",
        "stub": ""
    },
    "n5_multiscale": {
        "name_process": "n5_multiscale",
        "string_process": "\nprocess n5_multiscale {\n    container \"janeliascicomp/n5-tools-py:1.0.1\"\n\n    memory { params.mem_gb }\n    cpus { params.cpus }\n\n    input:\n    tuple val(n5Path), val(datasetPath), val(downsamplingFactors), val(pixelRes), val(pixelResUnits)\n\n    output:\n    val(n5Path)\n    \n    script:\n    \"\"\"\n    /entrypoint.sh n5_multiscale -i $n5Path -d $datasetPath -f $downsamplingFactors -p $pixelRes -u $pixelResUnits\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    \"\"\"\n    /entrypoint.sh n5_multiscale -i $n5Path -d $datasetPath -f $downsamplingFactors -p $pixelRes -u $pixelResUnits\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "n5Path",
            "datasetPath",
            "downsamplingFactors",
            "pixelRes",
            "pixelResUnits"
        ],
        "nb_inputs": 5,
        "outputs": [
            "n5Path"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__nf-demos",
        "directive": [
            "container \"janeliascicomp/n5-tools-py:1.0.1\"",
            "memory { params.mem_gb }",
            "cpus { params.cpus }"
        ],
        "when": "",
        "stub": ""
    },
    "n5_multiscale_cluster": {
        "name_process": "n5_multiscale_cluster",
        "string_process": "\nprocess n5_multiscale_cluster {\n    container \"janeliascicomp/n5-tools-py:1.0.1\"\n\n    input:\n    tuple val(n5Path), val(datasetPath), val(downsamplingFactors), val(pixelRes), val(pixelResUnits), val(numWorkers)\n\n    output:\n    val(n5Path)\n\n    script:\n    \"\"\"\n    /entrypoint.sh n5_multiscale -i $n5Path -d $datasetPath -f $downsamplingFactors -p $pixelRes -u $pixelResUnits \\\n        --distributed --workers $numWorkers --dashboard\n    \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "    \"\"\"\n    /entrypoint.sh n5_multiscale -i $n5Path -d $datasetPath -f $downsamplingFactors -p $pixelRes -u $pixelResUnits \\\n        --distributed --workers $numWorkers --dashboard\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "n5Path",
            "datasetPath",
            "downsamplingFactors",
            "pixelRes",
            "pixelResUnits",
            "numWorkers"
        ],
        "nb_inputs": 6,
        "outputs": [
            "n5Path"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__nf-demos",
        "directive": [
            "container \"janeliascicomp/n5-tools-py:1.0.1\""
        ],
        "when": "",
        "stub": ""
    },
    "resave": {
        "name_process": "resave",
        "string_process": "\nprocess resave {\n    container \"janeliascicomp/n5-tools-java:1.0.0\"\n\n    memory { params.mem_gb }\n    cpus { params.cpus }\n\n    input:\n    tuple val(inputN5Path), val(inputDatasetPath), val(outputN5Path), val(outputDatasetPath)\n    val(blockSize)\n    val(compression)\n    val(type)\n    val(minValue)\n    val(maxValue)\n    val(force)\n\n    output:\n    tuple val(outputN5Path), val(inputDatasetPath)\n\n    script:\n    def args_list = []\n    args_list << '-ni' << inputN5Path\n    args_list << '-i' << inputDatasetPath\n    args_list << '-no' << outputN5Path\n    args_list << '-o' << outputDatasetPath\n    if (blockSize) {\n        args_list << '-b' << blockSize\n    }\n    if (compression) {\n        args_list << '-c' << compression\n    }\n    if (type) {\n        args_list << '-t' << type\n    }\n    if (minValue) {\n        args_list << '-min' << minValue\n    }\n    if (maxValue) {\n        args_list << '-max' << maxValue\n    }\n    if (args.force) {\n        args_list << '-force'\n    }\n    def args = args_list.join(' ')\n    \"\"\"\n    /entrypoint.sh org.janelia.saalfeldlab.n5.spark.N5ConvertSpark $args\n    \"\"\"\n}",
        "nb_lignes_process": 46,
        "string_script": "    def args_list = []\n    args_list << '-ni' << inputN5Path\n    args_list << '-i' << inputDatasetPath\n    args_list << '-no' << outputN5Path\n    args_list << '-o' << outputDatasetPath\n    if (blockSize) {\n        args_list << '-b' << blockSize\n    }\n    if (compression) {\n        args_list << '-c' << compression\n    }\n    if (type) {\n        args_list << '-t' << type\n    }\n    if (minValue) {\n        args_list << '-min' << minValue\n    }\n    if (maxValue) {\n        args_list << '-max' << maxValue\n    }\n    if (args.force) {\n        args_list << '-force'\n    }\n    def args = args_list.join(' ')\n    \"\"\"\n    /entrypoint.sh org.janelia.saalfeldlab.n5.spark.N5ConvertSpark $args\n    \"\"\"",
        "nb_lignes_script": 26,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "inputN5Path",
            "inputDatasetPath",
            "outputN5Path",
            "outputDatasetPath",
            "blockSize",
            "compression",
            "type",
            "minValue",
            "maxValue",
            "force"
        ],
        "nb_inputs": 10,
        "outputs": [
            "inputDatasetPath"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__nf-demos",
        "directive": [
            "container \"janeliascicomp/n5-tools-java:1.0.0\"",
            "memory { params.mem_gb }",
            "cpus { params.cpus }"
        ],
        "when": "",
        "stub": ""
    },
    "unet": {
        "name_process": "unet",
        "string_process": "\nprocess unet {\n    cpus 4\n    label 'withGPU'\n\n    input:\n    val(input_n5)\n    val(output_dir)\n\n    output:\n    val(n5_dir)\n\n    script:\n    n5_dir = \"$output_dir/predict.n5\"\n    \"\"\"\n    $PWD/apply_unet.sh $input_n5 $n5_dir\n    \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "    n5_dir = \"$output_dir/predict.n5\"\n    \"\"\"\n    $PWD/apply_unet.sh $input_n5 $n5_dir\n    \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "input_n5",
            "output_dir"
        ],
        "nb_inputs": 2,
        "outputs": [
            "n5_dir"
        ],
        "nb_outputs": 1,
        "name_workflow": "JaneliaSciComp__nf-demos",
        "directive": [
            "cpus 4",
            "label 'withGPU'"
        ],
        "when": "",
        "stub": ""
    }
}
{
    "FRiPs": {
        "name_process": "FRiPs",
        "string_process": "\nprocess FRiPs {\n\n    tag \"$sample_id\"\n\n    cpus    params.frips_threads\n    memory  params.frips_mem\n\n    errorStrategy 'finish'\n\n    publishDir params.frips_dir, mode: params.publishmode\n\n    input:\n    tuple val(sample_id), path(bam)\n    path(saf)\n\n    output:\n    path(\"*.counts\"),       emit: counts,  optional: true\n    path(\"*.summary\"),      emit: summary, optional: true\n    path(\"*_frips.txt\"),    emit: frips\n\n    script:\n\n    \"\"\"\n\n    if [[ \\$(cat $saf | wc -l) > 0 ]]; then\n        featureCounts $params.frips_additional -a $saf -F SAF -T $task.cpus -o ${saf.simpleName}.counts $bam\n        bash $baseDir/bin/calc_frips.sh ${saf.simpleName}.counts.summary \\\n        | paste <(echo ${saf.simpleName}) <(cat /dev/stdin) > ${saf.simpleName}_frips.txt\n    else\n        paste <(echo ${saf.simpleName}) <(echo '0') > ${saf.simpleName}_frips.txt\n    fi    \n\n    \n\n    \"\"\"\n\n}",
        "nb_lignes_process": 36,
        "string_script": "    \"\"\"\n\n    if [[ \\$(cat $saf | wc -l) > 0 ]]; then\n        featureCounts $params.frips_additional -a $saf -F SAF -T $task.cpus -o ${saf.simpleName}.counts $bam\n        bash $baseDir/bin/calc_frips.sh ${saf.simpleName}.counts.summary \\\n        | paste <(echo ${saf.simpleName}) <(cat /dev/stdin) > ${saf.simpleName}_frips.txt\n    else\n        paste <(echo ${saf.simpleName}) <(echo '0') > ${saf.simpleName}_frips.txt\n    fi    \n\n    \n\n    \"\"\"",
        "nb_lignes_script": 12,
        "language_script": "bash",
        "tools": [
            "FeatureCounts"
        ],
        "tools_url": [
            "https://bio.tools/featurecounts"
        ],
        "tools_dico": [
            {
                "name": "FeatureCounts",
                "uri": "https://bio.tools/featurecounts",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3793",
                                    "term": "Read summarisation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "featureCounts is a very efficient read quantifier. It can be used to summarize RNA-seq reads and gDNA-seq reads to a variety of genomic features such as genes, exons, promoters, gene bodies and genomic bins. It is included in the Bioconductor Rsubread package and also in the SourceForge Subread package.",
                "homepage": "http://bioconductor.org/packages/release/bioc/html/Rsubread.html"
            }
        ],
        "inputs": [
            "sample_id",
            "bam",
            "saf"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ATpoint__atac_chip_preprocess",
        "directive": [
            "tag \"$sample_id\"",
            "cpus params.frips_threads",
            "memory params.frips_mem",
            "errorStrategy 'finish'",
            "publishDir params.frips_dir, mode: params.publishmode"
        ],
        "when": "",
        "stub": ""
    },
    "FilterBam": {
        "name_process": "FilterBam",
        "string_process": "\nprocess FilterBam {\n\n    tag \"$sample_id\"\n\n    cpus params.bamfilter_threads \n    memory '1.GB'                                                      \n\n    errorStrategy 'finish'\n    \n    publishDir params.bamfilter_dir, mode: params.publishmode\n\n    input:\n    tuple val(sample_id), path(bam), path(bai)                  \n\n    output:\n    tuple val(\"${sample_id}\"), path(\"*.bam\"), path(\"*.bai\"), emit: bam   \n    path(\"${sample_id}_filtered.flagstat\"), emit: flagstat\n\n    script:\n\n                                                                                                       \n                                                                  \n    if(params.bamfilter_keepchr == true) { regex = \"''\" } else { regex = params.bamfilter_keepchr }\n\n    \"\"\"\n\n    samtools idxstats $bam \\\n    | cut -f1 | grep $regex | grep -v '*' \\\n    | xargs samtools view --write-index $params.flag_keep $params.flag_remove \\\n        $params.bamfilter_additional -@ $task.cpus -o ${sample_id}_filtered.bam##idx##${sample_id}_filtered.bam.bai $bam\n\n    samtools flagstat -@ $task.cpus ${sample_id}_filtered.bam > ${sample_id}_filtered.flagstat        \n    \n    \"\"\"\n\n}",
        "nb_lignes_process": 35,
        "string_script": "    if(params.bamfilter_keepchr == true) { regex = \"''\" } else { regex = params.bamfilter_keepchr }\n\n    \"\"\"\n\n    samtools idxstats $bam \\\n    | cut -f1 | grep $regex | grep -v '*' \\\n    | xargs samtools view --write-index $params.flag_keep $params.flag_remove \\\n        $params.bamfilter_additional -@ $task.cpus -o ${sample_id}_filtered.bam##idx##${sample_id}_filtered.bam.bai $bam\n\n    samtools flagstat -@ $task.cpus ${sample_id}_filtered.bam > ${sample_id}_filtered.flagstat        \n    \n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample_id",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ATpoint__atac_chip_preprocess",
        "directive": [
            "tag \"$sample_id\"",
            "cpus params.bamfilter_threads",
            "memory '1.GB'",
            "errorStrategy 'finish'",
            "publishDir params.bamfilter_dir, mode: params.publishmode"
        ],
        "when": "",
        "stub": ""
    },
    "Bowtie2Idx": {
        "name_process": "Bowtie2Idx",
        "string_process": "\nprocess Bowtie2Idx {\n\n    cpus   params.idx_threads\n    memory params.idx_mem\n\n    errorStrategy 'finish'\n\n    publishDir params.idx_name, mode: params.publishmode\n\n    input:\n    path(genome)\n        \n    output:\n    path 'idx.*', emit: idx\n        \n    script: \n                                                                                                 \n    \"\"\"\n    bowtie2-build -q --seed 1234 --threads $task.cpus $params.idx_additional $genome idx\n    \"\"\"                \n\n}",
        "nb_lignes_process": 21,
        "string_script": "    \"\"\"\n    bowtie2-build -q --seed 1234 --threads $task.cpus $params.idx_additional $genome idx\n    \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "genome"
        ],
        "nb_inputs": 1,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ATpoint__atac_chip_preprocess",
        "directive": [
            "cpus params.idx_threads",
            "memory params.idx_mem",
            "errorStrategy 'finish'",
            "publishDir params.idx_name, mode: params.publishmode"
        ],
        "when": "",
        "stub": ""
    },
    "Cutsites": {
        "name_process": "Cutsites",
        "string_process": "\nprocess Cutsites {\n\n    tag \"$sample_id\"\n\n    cpus params.threads \n    memory params.memory\n\n    errorStrategy 'finish'\n    \n    publishDir params.cutsites_dir, mode: params.publishmode\n\n    input:\n    tuple val(sample_id), path(bam), path(bai)                  \n\n    output:\n    tuple val(\"${sample_id}\"), path(\"${sample_id}_cutsites.bed.gz\"), emit: bed\n\n    script:\n\n                                                                 \n    if(task.cpus == 2) { thready = 1 } else { thready = (task.cpus - 2) }\n\n    \"\"\"\n\n    #/ this is the same for paired-end and single-end as we count reads and not pairs/fragments:\n\n    bedtools bamtobed -i $bam \\\n    | bash $baseDir/bin/shift_reads.sh /dev/stdin \\\n    | sort -k1,1 -k2,2n -k3,3n -k6,6 -S ${params.cutsites_mem} --parallel=${thready} \\\n    | bgzip -@ 1 > ${sample_id}_cutsites.bed.gz\n    \n    \"\"\"\n\n}",
        "nb_lignes_process": 33,
        "string_script": "    if(task.cpus == 2) { thready = 1 } else { thready = (task.cpus - 2) }\n\n    \"\"\"\n\n    #/ this is the same for paired-end and single-end as we count reads and not pairs/fragments:\n\n    bedtools bamtobed -i $bam \\\n    | bash $baseDir/bin/shift_reads.sh /dev/stdin \\\n    | sort -k1,1 -k2,2n -k3,3n -k6,6 -S ${params.cutsites_mem} --parallel=${thready} \\\n    | bgzip -@ 1 > ${sample_id}_cutsites.bed.gz\n    \n    \"\"\"",
        "nb_lignes_script": 11,
        "language_script": "bash",
        "tools": [
            "BEDTools"
        ],
        "tools_url": [
            "https://bio.tools/bedtools"
        ],
        "tools_dico": [
            {
                "name": "BEDTools",
                "uri": "https://bio.tools/bedtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0622",
                            "term": "Genomics"
                        }
                    ],
                    []
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2429",
                                    "term": "Cartography"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "BEDTools is an extensive suite of utilities for comparing genomic features in BED format.",
                "homepage": "https://github.com/arq5x/bedtools2"
            }
        ],
        "inputs": [
            "sample_id",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ATpoint__atac_chip_preprocess",
        "directive": [
            "tag \"$sample_id\"",
            "cpus params.threads",
            "memory params.memory",
            "errorStrategy 'finish'",
            "publishDir params.cutsites_dir, mode: params.publishmode"
        ],
        "when": "",
        "stub": ""
    },
    "InsertSizes": {
        "name_process": "InsertSizes",
        "string_process": "\nprocess InsertSizes {\n\n    tag \"$sample_id\"\n\n    cpus 1\n    memory params.isizes_mem\n\n    errorStrategy 'finish'\n\n    publishDir params.isizes_dir, mode: params.publishmode\n\n    input:\n    tuple val(sample_id), path(bam), path(bai)                  \n\n    output:\n    path(\"${sample_id}_InsertSizes.txt\")\n\n    script:\n\n    \"\"\"\n    picard CollectInsertSizeMetrics \\\n        --INPUT ${bam} \\\n        --OUTPUT ${sample_id}_InsertSizes.txt \\\n        --Histogram_FILE /dev/null \\\n        --QUIET true --VERBOSITY ERROR --VALIDATION_STRINGENCY LENIENT 2> /dev/null\n    \"\"\"\n\n}",
        "nb_lignes_process": 27,
        "string_script": "    \"\"\"\n    picard CollectInsertSizeMetrics \\\n        --INPUT ${bam} \\\n        --OUTPUT ${sample_id}_InsertSizes.txt \\\n        --Histogram_FILE /dev/null \\\n        --QUIET true --VERBOSITY ERROR --VALIDATION_STRINGENCY LENIENT 2> /dev/null\n    \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [
            "Picard",
            "NullSeq"
        ],
        "tools_url": [
            "https://bio.tools/picard_tools",
            "https://bio.tools/nullseq"
        ],
        "tools_dico": [
            {
                "name": "Picard",
                "uri": "https://bio.tools/picard_tools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Biological databases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Data management"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3071",
                            "term": "Databases and information systems"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation analysis"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Sequence variation analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Variant analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_3197",
                                    "term": "Genetic variation annotation"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A set of command line tools for manipulating high-throughput sequencing (HTS) data in formats such as SAM/BAM/CRAM and VCF. Available as a standalone program or within the GATK4 program.",
                "homepage": "https://github.com/broadinstitute/picard"
            },
            {
                "name": "NullSeq",
                "uri": "https://bio.tools/nullseq",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0364",
                                    "term": "Random sequence generation"
                                }
                            ],
                            []
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "Creates Random Coding Sequences with specified GC content and Amino Acid usage.",
                "homepage": "https://github.com/amarallab/NullSeq"
            }
        ],
        "inputs": [
            "sample_id",
            "bam",
            "bai"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ATpoint__atac_chip_preprocess",
        "directive": [
            "tag \"$sample_id\"",
            "cpus 1",
            "memory params.isizes_mem",
            "errorStrategy 'finish'",
            "publishDir params.isizes_dir, mode: params.publishmode"
        ],
        "when": "",
        "stub": ""
    },
    "Bowtie2Align": {
        "name_process": "Bowtie2Align",
        "string_process": "\nprocess Bowtie2Align {\n\n    tag \"$sample_id\"\n\n    cpus params.threads\n    memory params.memory\n\n    errorStrategy 'finish'\n\n    publishDir params.align_dir, mode: params.publishmode\n\n    input:\n    tuple val(sample_id), path(reads)\n    path(idx)                         \n\n    output:\n    tuple val(\"${sample_id}\"), path(\"${sample_id}_raw.bam\"), path(\"${sample_id}_raw.bam.bai\"), emit: bam\n    path(\"${sample_id}_raw.flagstat\"), emit: flagstat\n    path(\"${sample_id}_tmpsort*.bam\"), optional: true                             \n    \n    script:\n    \n    \"\"\"\n\n    if [[ $params.idx == '' ]]; then\n        use_idx=`echo $idx | awk -F \\\".\\\" '{print \\$1 | \\\"sort -u\\\"}'`\n    else use_idx=$params.idx\n    fi    \n\n    bowtie2_constant='bowtie2 -q --threads $params.align_threads --rg-id $sample_id $params.align_additional -x \\$use_idx'\n\n    trim_constant='cutadapt $params.trim_additional --quiet -j 1 -a $params.trim_adapter'\n\n    sort_constant='samtools sort $params.sort_additional --write-index -@ $params.sort_threads -m $params.sort_mem -T ${sample_id}_tmpsort -o ${sample_id}_raw.bam##idx##${sample_id}_raw.bam.bai'\n\n    if [[ $params.mode == \"paired\" ]]; then\n\n        eval \\$trim_constant -A $params.trim_adapter --interleaved -o - ${reads[0]} ${reads[1]} \\\n        | eval \\$bowtie2_constant --interleaved - \\\n        | samblaster --ignoreUnmated \\\n        | eval \\$sort_constant\n\n    fi\n\n    if [[ $params.mode == \"single\" ]]; then\n\n        eval \\$trim_constant ${reads} \\\n        | eval \\$bowtie2_constant -U - \\\n        | samblaster --ignoreUnmated \\\n        | eval \\$sort_constant\n\n    fi\n\n    samtools flagstat -@ $params.align_threads ${sample_id}_raw.bam > ${sample_id}_raw.flagstat\n    \n    \"\"\"\n\n}",
        "nb_lignes_process": 57,
        "string_script": "    \"\"\"\n\n    if [[ $params.idx == '' ]]; then\n        use_idx=`echo $idx | awk -F \\\".\\\" '{print \\$1 | \\\"sort -u\\\"}'`\n    else use_idx=$params.idx\n    fi    \n\n    bowtie2_constant='bowtie2 -q --threads $params.align_threads --rg-id $sample_id $params.align_additional -x \\$use_idx'\n\n    trim_constant='cutadapt $params.trim_additional --quiet -j 1 -a $params.trim_adapter'\n\n    sort_constant='samtools sort $params.sort_additional --write-index -@ $params.sort_threads -m $params.sort_mem -T ${sample_id}_tmpsort -o ${sample_id}_raw.bam##idx##${sample_id}_raw.bam.bai'\n\n    if [[ $params.mode == \"paired\" ]]; then\n\n        eval \\$trim_constant -A $params.trim_adapter --interleaved -o - ${reads[0]} ${reads[1]} \\\n        | eval \\$bowtie2_constant --interleaved - \\\n        | samblaster --ignoreUnmated \\\n        | eval \\$sort_constant\n\n    fi\n\n    if [[ $params.mode == \"single\" ]]; then\n\n        eval \\$trim_constant ${reads} \\\n        | eval \\$bowtie2_constant -U - \\\n        | samblaster --ignoreUnmated \\\n        | eval \\$sort_constant\n\n    fi\n\n    samtools flagstat -@ $params.align_threads ${sample_id}_raw.bam > ${sample_id}_raw.flagstat\n    \n    \"\"\"",
        "nb_lignes_script": 33,
        "language_script": "bash",
        "tools": [
            "BTEVAL",
            "SAMBLASTER",
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/bteval",
            "https://bio.tools/samblaster",
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "BTEVAL",
                "uri": "https://bio.tools/bteval",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Proteins"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein bioinformatics"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0078",
                            "term": "Protein informatics"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2479",
                                    "term": "Protein sequence analysis"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_2423",
                                    "term": "Prediction and recognition"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_2479",
                                    "term": "Sequence analysis (protein)"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "The aim of BTEVAL server is to evaluate beta turn prediction algorithms on a uniform data set of 426 proteins or subsets of these proteins. It is the new data set in which no two protein chains have more that 25% sequence identity and each chain contains minimum one beta turn.",
                "homepage": "http://www.imtech.res.in/raghava/bteval"
            },
            {
                "name": "SAMBLASTER",
                "uri": "https://bio.tools/samblaster",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0654",
                            "term": "DNA analysis"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3199",
                                    "term": "Split read mapping"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3199",
                                    "term": "Split-read mapping"
                                }
                            ]
                        ],
                        "input": [],
                        "output": []
                    }
                ],
                "description": "A tool to mark duplicates and extract discordant and split reads from SAM files.",
                "homepage": "https://github.com/GregoryFaust/samblaster"
            },
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "sample_id",
            "reads",
            "idx"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ATpoint__atac_chip_preprocess",
        "directive": [
            "tag \"$sample_id\"",
            "cpus params.threads",
            "memory params.memory",
            "errorStrategy 'finish'",
            "publishDir params.align_dir, mode: params.publishmode"
        ],
        "when": "",
        "stub": ""
    },
    "MacsPeaks": {
        "name_process": "MacsPeaks",
        "string_process": "\nprocess MacsPeaks {\n\n    tag \"$sample_id\"\n\n    cpus 1\n    memory params.macs_mem\n\n    errorStrategy 'finish'\n    \n    publishDir params.macs_dir, mode: params.publishmode\n\n    input:\n    tuple val(sample_id), path(infile)\n    path(optional_control)\n\n    output:\n    path(\"*.{narrowPeak,broadPeak}\"), emit: peaks\n    path(\"*.bed\"),  optional: true\n    path(\"*.r\"),    optional: true\n    path(\"*.xls\"),  optional: true\n    path(\"*.bdg\"),  optional: true\n    path(\"*.saf\"),  emit: saf\n\n    script:\n\n                                                                                                                     \n    if(optional_control instanceof List && optional_control.isEmpty()){\n        ctrl = optional_control\n    } else {\n        if(optional_control == infile) { ctrl = '' } else ctrl = \"-c $optional_control\"\n    }\n\n    \"\"\"\n\n    #/ call peaks:\n    macs2 callpeak $params.macs_additional $params.macs_format $params.macs_gflag \\\n        -t $infile $ctrl -n ${sample_id}${params.macs_suffix}\n\n    #/ write as SAF:\n    bash $baseDir/bin/write_saf.sh \\\n        ${sample_id}${params.macs_suffix}_peaks.{narrowPeak,broadPeak} > ${sample_id}${params.macs_suffix}_peaks.saf\n\n    \"\"\"\n\n}",
        "nb_lignes_process": 44,
        "string_script": "    if(optional_control instanceof List && optional_control.isEmpty()){\n        ctrl = optional_control\n    } else {\n        if(optional_control == infile) { ctrl = '' } else ctrl = \"-c $optional_control\"\n    }\n\n    \"\"\"\n\n    #/ call peaks:\n    macs2 callpeak $params.macs_additional $params.macs_format $params.macs_gflag \\\n        -t $infile $ctrl -n ${sample_id}${params.macs_suffix}\n\n    #/ write as SAF:\n    bash $baseDir/bin/write_saf.sh \\\n        ${sample_id}${params.macs_suffix}_peaks.{narrowPeak,broadPeak} > ${sample_id}${params.macs_suffix}_peaks.saf\n\n    \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sample_id",
            "infile",
            "optional_control"
        ],
        "nb_inputs": 3,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "ATpoint__atac_chip_preprocess",
        "directive": [
            "tag \"$sample_id\"",
            "cpus 1",
            "memory params.macs_mem",
            "errorStrategy 'finish'",
            "publishDir params.macs_dir, mode: params.publishmode"
        ],
        "when": "",
        "stub": ""
    }
}
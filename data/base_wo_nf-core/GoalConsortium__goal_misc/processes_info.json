{
    "indexoribams": {
        "name_process": "indexoribams",
        "string_process": "\nprocess indexoribams {\n  errorStrategy 'ignore'\n  input:\n  set pid,tid,nid,file(tumor),file(normal) from oribam\n  output:\n  set pid,tid,nid,file(tumor),file(normal),file(\"${tumor}.bai\"),file(\"${normal}.bai\") into dellybam\n  set pid,tid,nid,file(tumor),file(normal),file(\"${tumor}.bai\"),file(\"${normal}.bai\") into mantrabam\n  set pid,tid,nid,file(tumor),file(normal),file(\"${tumor}.bai\"),file(\"${normal}.bai\") into checkbams\n\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/alignment/indexbams.sh \n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/alignment/indexbams.sh \n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "oribam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dellybam",
            "mantrabam",
            "checkbams"
        ],
        "nb_outputs": 3,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "indexbams": {
        "name_process": "indexbams",
        "string_process": "\nprocess indexbams {\n  input:\n  set sid,file(tumor) from tarbam\n  output:\n  set sid,file(tumor),file(\"${tumor}.bai\") into idxbam\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/alignment/indexbams.sh \n  \"\"\"\n}",
        "nb_lignes_process": 9,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/alignment/indexbams.sh \n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tarbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "idxbam"
        ],
        "nb_outputs": 1,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "cnv": {
        "name_process": "cnv",
        "string_process": "\nprocess cnv {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'\n  input:\n  set subjid,pair_id,file(sbam),file(sidx) from cnvbam\n  when:\n  params.nuctype == \"dna\"\n  output:\n  file(\"${pair_id}.call.cns\") into cns\n  file(\"${pair_id}.cns\") into cnsori\n  file(\"${pair_id}.cnr\") into cnr\n  file(\"${pair_id}.answerplot*\") into cnvansplot\n  file(\"${pair_id}.*txt\") into cnvtxt\n  file(\"${pair_id}.cnv*pdf\") into cnvpdf\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/variants/cnvkit.sh -u -c $capture -b $sbam -p $pair_id\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/variants/cnvkit.sh -u -c $capture -b $sbam -p $pair_id\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "cnvbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "cns",
            "cnsori",
            "cnr",
            "cnvansplot",
            "cnvtxt",
            "cnvpdf"
        ],
        "nb_outputs": 6,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'"
        ],
        "when": "params.nuctype == \"dna\"",
        "stub": ""
    },
    "pindel": {
        "name_process": "pindel",
        "string_process": "\nprocess pindel {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'\n  input:\n  set subjid,pair_id,file(ssbam),file(ssidx) from svbam\n  output:\n  file(\"${pair_id}.pindel_*.vcf.gz\") into pindelvcf\n  when:\n  params.nuctype == \"dna\"\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/variants/pindel.sh -r ${index_path} -p ${pair_id}\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/variants/pindel.sh -r ${index_path} -p ${pair_id}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "svbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "pindelvcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'"
        ],
        "when": "params.nuctype == \"dna\"",
        "stub": ""
    },
    "mpileup": {
        "name_process": "mpileup",
        "string_process": "\nprocess mpileup {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$subjid/$params.nuctype\", mode: 'copy'\n  input:\n  set subjid,file(gbam),file(gidx) from sambam\n  \n  output:\n  set subjid,file(\"${subjid}.sam.vcf.gz\") into samvcf\n  set subjid,file(\"${subjid}.sam.ori.vcf.gz\") into samori\n  set subjid,file(\"${subjid}.sam.annot.vcf.gz\") into samannot\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/variants/germline_vc.sh -r $index_path -p $subjid -a mpileup\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${subjid}.sam -v ${subjid}.sam.vcf.gz\n  mv ${subjid}.sam.vcf.gz ${subjid}.sam.ori.vcf.gz\n  mv ${subjid}.sam.norm.vcf.gz ${subjid}.sam.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${subjid}.sam -r $index_path -v ${subjid}.sam.vcf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 18,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/variants/germline_vc.sh -r $index_path -p $subjid -a mpileup\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${subjid}.sam -v ${subjid}.sam.vcf.gz\n  mv ${subjid}.sam.vcf.gz ${subjid}.sam.ori.vcf.gz\n  mv ${subjid}.sam.norm.vcf.gz ${subjid}.sam.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${subjid}.sam -r $index_path -v ${subjid}.sam.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "sambam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "samvcf",
            "samori",
            "samannot"
        ],
        "nb_outputs": 3,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$subjid/$params.nuctype\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "hotspot": {
        "name_process": "hotspot",
        "string_process": "\nprocess hotspot {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$subjid/$params.nuctype\", mode: 'copy'\n  input:\n  set subjid,file(gbam),file(gidx) from hsbam\n  output:\n  set subjid,file(\"${subjid}.hotspot.vcf.gz\") into hsvcf\n  set subjid,file(\"${subjid}.hotspot.ori.vcf.gz\") into hsori\n  set subjid,file(\"${subjid}.hotspot.annot.vcf.gz\") into hsannot\n  when:\n  params.cancer == \"detect\"\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/variants/germline_vc.sh -r $index_path -p $subjid -a hotspot\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${subjid}.hotspot -v ${subjid}.hotspot.vcf.gz\n  mv ${subjid}.hotspot.vcf.gz ${subjid}.hotspot.ori.vcf.gz\n  mv ${subjid}.hotspot.norm.vcf.gz ${subjid}.hotspot.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${subjid}.hotspot -r $index_path -v ${subjid}.hotspot.vcf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/variants/germline_vc.sh -r $index_path -p $subjid -a hotspot\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${subjid}.hotspot -v ${subjid}.hotspot.vcf.gz\n  mv ${subjid}.hotspot.vcf.gz ${subjid}.hotspot.ori.vcf.gz\n  mv ${subjid}.hotspot.norm.vcf.gz ${subjid}.hotspot.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${subjid}.hotspot -r $index_path -v ${subjid}.hotspot.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "hsbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "hsvcf",
            "hsori",
            "hsannot"
        ],
        "nb_outputs": 3,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$subjid/$params.nuctype\", mode: 'copy'"
        ],
        "when": "params.cancer == \"detect\"",
        "stub": ""
    },
    "speedseq": {
        "name_process": "speedseq",
        "string_process": "\nprocess speedseq {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$subjid/$params.nuctype\", mode: 'copy'\n\n  input:\n  set subjid,file(gbam),file(gidx) from ssbam\n  output:\n  set subjid,file(\"${subjid}.ssvar.vcf.gz\") into ssvcf\n  set subjid,file(\"${subjid}.ssvar.ori.vcf.gz\") into ssori\n  set subjid,file(\"${subjid}.ssvar.annot.vcf.gz\") into ssannot\n\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/variants/germline_vc.sh -r $index_path -p $subjid -a speedseq\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${subjid}.ssvar -v ${subjid}.ssvar.vcf.gz\n  mv ${subjid}.ssvar.vcf.gz ${subjid}.ssvar.ori.vcf.gz\n  mv ${subjid}.ssvar.norm.vcf.gz ${subjid}.ssvar.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${subjid}.ssvar -r $index_path -v ${subjid}.ssvar.vcf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/variants/germline_vc.sh -r $index_path -p $subjid -a speedseq\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${subjid}.ssvar -v ${subjid}.ssvar.vcf.gz\n  mv ${subjid}.ssvar.vcf.gz ${subjid}.ssvar.ori.vcf.gz\n  mv ${subjid}.ssvar.norm.vcf.gz ${subjid}.ssvar.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${subjid}.ssvar -r $index_path -v ${subjid}.ssvar.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ssbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ssvcf",
            "ssori",
            "ssannot"
        ],
        "nb_outputs": 3,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$subjid/$params.nuctype\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "strelka2": {
        "name_process": "strelka2",
        "string_process": "\nprocess strelka2 {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$subjid/$params.nuctype\", mode: 'copy'\n\n  input:\n  set subjid,file(gbam),file(gidx) from strelkabam\n  output:\n  set subjid,file(\"${subjid}.strelka2.vcf.gz\") into strelkavcf\n  set subjid,file(\"${subjid}.strelka2.ori.vcf.gz\") into strelkaori\n  set subjid,file(\"${subjid}.strelka2.annot.vcf.gz\") into strelkaannot\n  script:\n  if (params.nuctype == \"dna\")\n  \"\"\"\n  bash $baseDir/process_scripts/variants/germline_vc.sh -r $index_path -p $subjid -a strelka2\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${subjid}.strelka2 -v ${subjid}.strelka2.vcf.gz\n  mv ${subjid}.strelka2.vcf.gz ${subjid}.strelka2.ori.vcf.gz\n  mv ${subjid}.strelka2.norm.vcf.gz ${subjid}.strelka2.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${subjid}.strelka2 -r $index_path -v ${subjid}.strelka2.vcf.gz\n  \"\"\"\n  else\n  \"\"\"\n  source /etc/profile.d/modules.sh\n  bash $baseDir/process_scripts/variants/germline_vc.sh -r $index_path -p $subjid -a gatk\n  mv ${subjid}.gatk.vcf.gz ${subjid}.strelka2.vcf.gz\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${subjid}.strelka2 -v ${subjid}.strelka2.vcf.gz\n  mv ${subjid}.strelka2.vcf.gz ${subjid}.strelka2.ori.vcf.gz\n  mv ${subjid}.strelka2.norm.vcf.gz ${subjid}.strelka2.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${subjid}.strelka2 -r $index_path -v ${subjid}.strelka2.vcf.gz\n  \"\"\"  \n}",
        "nb_lignes_process": 29,
        "string_script": "  if (params.nuctype == \"dna\")\n  \"\"\"\n  bash $baseDir/process_scripts/variants/germline_vc.sh -r $index_path -p $subjid -a strelka2\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${subjid}.strelka2 -v ${subjid}.strelka2.vcf.gz\n  mv ${subjid}.strelka2.vcf.gz ${subjid}.strelka2.ori.vcf.gz\n  mv ${subjid}.strelka2.norm.vcf.gz ${subjid}.strelka2.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${subjid}.strelka2 -r $index_path -v ${subjid}.strelka2.vcf.gz\n  \"\"\"\n  else\n  \"\"\"\n  source /etc/profile.d/modules.sh\n  bash $baseDir/process_scripts/variants/germline_vc.sh -r $index_path -p $subjid -a gatk\n  mv ${subjid}.gatk.vcf.gz ${subjid}.strelka2.vcf.gz\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${subjid}.strelka2 -v ${subjid}.strelka2.vcf.gz\n  mv ${subjid}.strelka2.vcf.gz ${subjid}.strelka2.ori.vcf.gz\n  mv ${subjid}.strelka2.norm.vcf.gz ${subjid}.strelka2.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${subjid}.strelka2 -r $index_path -v ${subjid}.strelka2.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 17,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "strelkabam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "strelkavcf",
            "strelkaori",
            "strelkaannot"
        ],
        "nb_outputs": 3,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$subjid/$params.nuctype\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "platypus": {
        "name_process": "platypus",
        "string_process": "\nprocess platypus {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$subjid/$params.nuctype\", mode: 'copy'\n\n  input:\n  set subjid,file(gbam),file(gidx) from platbam\n  output:\n  set subjid,file(\"${subjid}.platypus.vcf.gz\") into platvcf\n  set subjid,file(\"${subjid}.platypus.ori.vcf.gz\") into platori\n  set subjid,file(\"${subjid}.platypus.annot.vcf.gz\") into platannot\t\n  when:\t\t\t\t\t       \n  script:\t\t\t\t       \n  if (params.nuctype == \"dna\")\n  \"\"\"\n  bash $baseDir/process_scripts/variants/germline_vc.sh -r $index_path -p $subjid -a platypus\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${subjid}.platypus -v ${subjid}.platypus.vcf.gz\n  mv ${subjid}.platypus.vcf.gz ${subjid}.platypus.ori.vcf.gz\n  mv ${subjid}.platypus.norm.vcf.gz ${subjid}.platypus.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${subjid}.platypus -r $index_path -v ${subjid}.platypus.vcf.gz\n  \"\"\"\n  else\n  \"\"\"\n  source /etc/profile.d/modules.sh\n  module load samtools/1.6\n  cp ${index_path}/union.header.vcf ${subjid}.platypus.vcf\n  bgzip ${subjid}.platypus.vcf\n  cp ${subjid}.platypus.vcf.gz ${subjid}.platypus.ori.vcf.gz\n  cp ${subjid}.platypus.vcf.gz ${subjid}.platypus.annot.vcf.gz\n  \"\"\"  \n}",
        "nb_lignes_process": 29,
        "string_script": "  if (params.nuctype == \"dna\")\n  \"\"\"\n  bash $baseDir/process_scripts/variants/germline_vc.sh -r $index_path -p $subjid -a platypus\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${subjid}.platypus -v ${subjid}.platypus.vcf.gz\n  mv ${subjid}.platypus.vcf.gz ${subjid}.platypus.ori.vcf.gz\n  mv ${subjid}.platypus.norm.vcf.gz ${subjid}.platypus.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${subjid}.platypus -r $index_path -v ${subjid}.platypus.vcf.gz\n  \"\"\"\n  else\n  \"\"\"\n  source /etc/profile.d/modules.sh\n  module load samtools/1.6\n  cp ${index_path}/union.header.vcf ${subjid}.platypus.vcf\n  bgzip ${subjid}.platypus.vcf\n  cp ${subjid}.platypus.vcf.gz ${subjid}.platypus.ori.vcf.gz\n  cp ${subjid}.platypus.vcf.gz ${subjid}.platypus.annot.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 16,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "platbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "platvcf",
            "platori",
            "platannot"
        ],
        "nb_outputs": 3,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$subjid/$params.nuctype\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "integrate": {
        "name_process": "integrate",
        "string_process": "\nprocess integrate {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$pid/somatic\", mode: 'copy'\n  input:\n  set pid,file(vcf) from vcflist\n  file 'design.txt' from design_file\n  output:\n  file(\"${pid}${params.projectid}.somaticunion.vcf.gz\") into union\n  file(\"${pid}${params.projectid}.somatic.vcf.gz\") into annotvcf\n  script:\n  \"\"\"\n  source /etc/profile.d/modules.sh\n  module load samtools/1.6\n  bash $baseDir/process_scripts/variants/union.sh -r $index_path -p $pid\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p $pid -r $index_path -v ${pid}.union.vcf.gz\n  perl $baseDir/scripts/somatic_filter.pl ${pid}.annot.vcf.gz\n  bgzip ${pid}.somatic.vcf\n  mv ${pid}.somatic.vcf.gz ${pid}${params.projectid}.somatic.vcf.gz\n  mv ${pid}.union.vcf.gz ${pid}${params.projectid}.somaticunion.vcf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  source /etc/profile.d/modules.sh\n  module load samtools/1.6\n  bash $baseDir/process_scripts/variants/union.sh -r $index_path -p $pid\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p $pid -r $index_path -v ${pid}.union.vcf.gz\n  perl $baseDir/scripts/somatic_filter.pl ${pid}.annot.vcf.gz\n  bgzip ${pid}.somatic.vcf\n  mv ${pid}.somatic.vcf.gz ${pid}${params.projectid}.somatic.vcf.gz\n  mv ${pid}.union.vcf.gz ${pid}${params.projectid}.somaticunion.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 9,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vcflist",
            "design_file"
        ],
        "nb_inputs": 2,
        "outputs": [
            "union",
            "annotvcf"
        ],
        "nb_outputs": 2,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$pid/somatic\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "trim": {
        "name_process": "trim",
        "string_process": "\nprocess trim {\n  errorStrategy 'ignore'\n  input:\n  set subjid, pair_id, file(read1), file(read2) from read\n  output:\n  set subjid, pair_id, file(\"${pair_id}.trim.R1.fastq.gz\"),file(\"${pair_id}.trim.R2.fastq.gz\") into trimread\n  set subjid, pair_id, file(\"${pair_id}.trim.R1.fastq.gz\"),file(\"${pair_id}.trim.R2.fastq.gz\") into fusionfq\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/preproc_fastq/trimgalore.sh -p ${pair_id} -a ${read1} -b ${read2}\n  \"\"\"\n}",
        "nb_lignes_process": 11,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/preproc_fastq/trimgalore.sh -p ${pair_id} -a ${read1} -b ${read2}\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "read"
        ],
        "nb_inputs": 1,
        "outputs": [
            "trimread",
            "fusionfq"
        ],
        "nb_outputs": 2,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "align": {
        "name_process": "align",
        "string_process": "\nprocess align {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'\n\n  input:\n  set subjid,pair_id, file(f1), file(f2) from trimread\n  output:\n  set subjid,pair_id, file(\"${pair_id}.bam\") into aligned\n  set subjid,pair_id, file(\"${pair_id}.bam\") into ctbams\n  set subjid,pair_id, file(\"${pair_id}.bam\"),file(\"${pair_id}.alignerout.txt\") into aligned2\n\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/alignment/rnaseqalign.sh -a $params.align -p $pair_id -r $index_path -x $f1 -y $f2 $alignopts\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/alignment/rnaseqalign.sh -a $params.align -p $pair_id -r $index_path -x $f1 -y $f2 $alignopts\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "trimread"
        ],
        "nb_inputs": 1,
        "outputs": [
            "aligned",
            "ctbams",
            "aligned2"
        ],
        "nb_outputs": 3,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "markdups_consensus": {
        "name_process": "markdups_consensus",
        "string_process": "\nprocess markdups_consensus {\n  publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'\n\n  input:\n  set subjid, pair_id, file(sbam) from aligned\n  output:\n  set subjid, pair_id, file(\"${pair_id}.consensus.bam\") into deduped\n  set subjid, pair_id, file(\"${pair_id}.consensus.bam\") into qcbam\n  set subjid, pair_id,file(\"${pair_id}.final.bam\"),file(\"${pair_id}.final.bai\") into gatkbam\n  file(\"${pair_id}.dedupcov.txt\") into dedupcov\n  file(\"${pair_id}.covuniqhist.txt\") into covuniqhist\n  file(\"*coverageuniq.txt\") into covuniqstat\n\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/alignment/markdups.sh -a fgbio_umi -b $sbam -p $pair_id\n  mv ${pair_id}.dedup.bam ${pair_id}.consensus.bam\n  bash $baseDir/process_scripts/alignment/bam2tdf.sh -r $index_path -b ${pair_id}.consensus.bam -p ${pair_id}.uniq\n  bash $baseDir/process_scripts/variants/gatkrunner.sh -a gatkbam -b ${pair_id}.consensus.bam -r ${index_path} -p $pair_id\n  bash $baseDir/process_scripts/alignment/bamqc.sh -c $capture_bed -n dna -r $index_path -b ${pair_id}.consensus.bam -p $pair_id\n  mv ${pair_id}.genomecov.txt ${pair_id}.dedupcov.txt\n  mv ${pair_id}.covhist.txt ${pair_id}.covuniqhist.txt\n  mv ${pair_id}_lowcoverage.txt ${pair_id}_lowcoverageuniq.txt\n  mv ${pair_id}_exoncoverage.txt ${pair_id}_exoncoverageuniq.txt\n  \"\"\"\n}",
        "nb_lignes_process": 25,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/alignment/markdups.sh -a fgbio_umi -b $sbam -p $pair_id\n  mv ${pair_id}.dedup.bam ${pair_id}.consensus.bam\n  bash $baseDir/process_scripts/alignment/bam2tdf.sh -r $index_path -b ${pair_id}.consensus.bam -p ${pair_id}.uniq\n  bash $baseDir/process_scripts/variants/gatkrunner.sh -a gatkbam -b ${pair_id}.consensus.bam -r ${index_path} -p $pair_id\n  bash $baseDir/process_scripts/alignment/bamqc.sh -c $capture_bed -n dna -r $index_path -b ${pair_id}.consensus.bam -p $pair_id\n  mv ${pair_id}.genomecov.txt ${pair_id}.dedupcov.txt\n  mv ${pair_id}.covhist.txt ${pair_id}.covuniqhist.txt\n  mv ${pair_id}_lowcoverage.txt ${pair_id}_lowcoverageuniq.txt\n  mv ${pair_id}_exoncoverage.txt ${pair_id}_exoncoverageuniq.txt\n  \"\"\"",
        "nb_lignes_script": 10,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aligned"
        ],
        "nb_inputs": 1,
        "outputs": [
            "deduped",
            "qcbam",
            "gatkbam",
            "dedupcov",
            "covuniqhist",
            "covuniqstat"
        ],
        "nb_outputs": 6,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "markdups_picard": {
        "name_process": "markdups_picard",
        "string_process": "\nprocess markdups_picard {\n  publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'\n\n  input:\n  set subjid, pair_id, file(sbam) from aligned2\n  output:\n  file(\"*fastqc*\") into fastqc\n  file(\"${pair_id}.flagstat.txt\") into alignstats\n  file(\"${pair_id}.meanmap.txt\") into meanmap\n  file(\"${pair_id}.libcomplex.txt\") into libcomplex\n  file(\"${pair_id}.hist.txt\") into insertsize\n  file(\"${pair_id}.alignmentsummarymetrics.txt\") into alignmentsummarymetrics\n  file(\"${pair_id}.genomecov.txt\") into genomecov\n  file(\"${pair_id}.covhist.txt\") into covhist\n  file(\"*coverage.txt\") into capcovstat\n  file(\"${pair_id}.mapqualcov.txt\") into mapqualcov\n\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/alignment/markdups.sh -a picard_umi -b $sbam -p $pair_id\n  bash $baseDir/process_scripts/alignment/bamqc.sh -c $capture_bed -n dna -r $index_path -b ${pair_id}.dedup.bam -p $pair_id  \n  \"\"\"\n}",
        "nb_lignes_process": 22,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/alignment/markdups.sh -a picard_umi -b $sbam -p $pair_id\n  bash $baseDir/process_scripts/alignment/bamqc.sh -c $capture_bed -n dna -r $index_path -b ${pair_id}.dedup.bam -p $pair_id  \n  \"\"\"",
        "nb_lignes_script": 3,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aligned2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc",
            "alignstats",
            "meanmap",
            "libcomplex",
            "insertsize",
            "alignmentsummarymetrics",
            "genomecov",
            "covhist",
            "capcovstat",
            "mapqualcov"
        ],
        "nb_outputs": 10,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "parse_stat": {
        "name_process": "parse_stat",
        "string_process": "\nprocess parse_stat {\n  errorStrategy 'ignore'\n  publishDir \"$params.output\", mode: 'copy'\n\n  input:\n  file(txt) from alignstats.toList()\n  file(lc) from libcomplex.toList()\n  file(is) from insertsize.toList()\n  file(gc) from genomecov.toList()\n                                   \n  file(tr) from trimstat.toList()\n  file(mq) from mapqualcov.toList()\n  file(de) from dedupcov.toList()\n  file(mm) from meanmap.toList()\n  file(asmet) from alignmentsummarymetrics.toList()\n  \n  output:\n  file('*sequence.stats.txt')\n  file('*.png')\n  script:\n  \"\"\"\n  source /etc/profile.d/modules.sh\n  module load R/3.2.1-intel git/gcc/v2.12.2\n  perl $baseDir/scripts/sequenceqc_alignment_withumi.pl -r ${index_path} *.genomecov.txt\n  Rscript $baseDir/scripts/plot_hist_genocov.R\n  \"\"\"\n}",
        "nb_lignes_process": 26,
        "string_script": "  \"\"\"\n  source /etc/profile.d/modules.sh\n  module load R/3.2.1-intel git/gcc/v2.12.2\n  perl $baseDir/scripts/sequenceqc_alignment_withumi.pl -r ${index_path} *.genomecov.txt\n  Rscript $baseDir/scripts/plot_hist_genocov.R\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "alignstats",
            "libcomplex",
            "insertsize",
            "genomecov",
            "trimstat",
            "mapqualcov",
            "dedupcov",
            "meanmap",
            "alignmentsummarymetrics"
        ],
        "nb_inputs": 9,
        "outputs": [],
        "nb_outputs": 0,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "indextarbams": {
        "name_process": "indextarbams",
        "string_process": "\nprocess indextarbams {\n  errorStrategy 'ignore'\n  input:\n  set pid,tid,nid,file(tumor),file(normal) from tarbam\n  output:\n  set pid,tid,nid,file(tumor),file(normal),file(\"${tumor}.bai\"),file(\"${normal}.bai\") into mutectbam\n  set pid,tid,nid,file(tumor),file(normal),file(\"${tumor}.bai\"),file(\"${normal}.bai\") into strelkabam\n  set pid,tid,nid,file(tumor),file(normal),file(\"${tumor}.bai\"),file(\"${normal}.bai\") into ssbam\n  set pid,tid,nid,file(tumor),file(normal),file(\"${tumor}.bai\"),file(\"${normal}.bai\") into shimmerbam\n  set pid,tid,nid,file(tumor),file(normal),file(\"${tumor}.bai\"),file(\"${normal}.bai\") into vscanbam\n  set pid,tid,nid,file(tumor),file(normal),file(\"${tumor}.bai\"),file(\"${normal}.bai\") into virmidbam\n  set pid,tid,nid into pairnames\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/alignment/indexbams.sh \n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/alignment/indexbams.sh \n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "tarbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mutectbam",
            "strelkabam",
            "ssbam",
            "shimmerbam",
            "vscanbam",
            "virmidbam",
            "pairnames"
        ],
        "nb_outputs": 7,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "checkmates": {
        "name_process": "checkmates",
        "string_process": "\nprocess checkmates {\n  publishDir \"$params.output/$pid/somatic\", mode: 'copy'\n  errorStrategy 'ignore'\n  input:\n  set pid,tid,nid,file(tumor),file(normal),file(tidx),file(nidx) from checkbams\n  file(conf) from ncmconf\n  output:\n  file(\"${pid}*\") into checkmateout\n  script:\n  \"\"\"\n  source /etc/profile.d/modules.sh\n  module load python/2.7.x-anaconda git/v2.5.3\n  python /project/shared/bicf_workflow_ref/seqprg/NGSCheckMate/ncm.py -B -d ./ -bed ${index_path}/NGSCheckMate.bed -O ./ -N ${pid}\n  perl $baseDir/scripts/sequenceqc_somatic.pl -r ${index_path} -i ${pid}_all.txt -o ${pid}${params.projectid}.sequence.stats.txt\n  \"\"\"\n}",
        "nb_lignes_process": 15,
        "string_script": "  \"\"\"\n  source /etc/profile.d/modules.sh\n  module load python/2.7.x-anaconda git/v2.5.3\n  python /project/shared/bicf_workflow_ref/seqprg/NGSCheckMate/ncm.py -B -d ./ -bed ${index_path}/NGSCheckMate.bed -O ./ -N ${pid}\n  perl $baseDir/scripts/sequenceqc_somatic.pl -r ${index_path} -i ${pid}_all.txt -o ${pid}${params.projectid}.sequence.stats.txt\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "checkbams",
            "ncmconf"
        ],
        "nb_inputs": 2,
        "outputs": [
            "checkmateout"
        ],
        "nb_outputs": 1,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "publishDir \"$params.output/$pid/somatic\", mode: 'copy'",
            "errorStrategy 'ignore'"
        ],
        "when": "",
        "stub": ""
    },
    "delly": {
        "name_process": "delly",
        "string_process": "\nprocess delly {\n  publishDir \"$params.output/$pid/somatic\", mode: 'copy'\n  errorStrategy 'ignore'\n  input:\n  set pid,tid,nid,file(tumor),file(normal),file(tidx),file(nidx) from dellybam\n\n  output:\n  file(\"${pid}.delly.vcf.gz\") into dellyvcf\n  when:\n  params.callsvs == \"detect\"\n  script:\n  \"\"\"\n  source /etc/profile.d/modules.sh\n  perl $baseDir/scripts/make_delly_sample.pl ${tid} ${nid}\n  bash $baseDir/process_scripts/variants/svcalling.sh -r ${index_path} -p ${pid} -b ${tumor} -n ${normal} -i ${tid} -m delly\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  source /etc/profile.d/modules.sh\n  perl $baseDir/scripts/make_delly_sample.pl ${tid} ${nid}\n  bash $baseDir/process_scripts/variants/svcalling.sh -r ${index_path} -p ${pid} -b ${tumor} -n ${normal} -i ${tid} -m delly\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "dellybam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "dellyvcf"
        ],
        "nb_outputs": 1,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "publishDir \"$params.output/$pid/somatic\", mode: 'copy'",
            "errorStrategy 'ignore'"
        ],
        "when": "params.callsvs == \"detect\"",
        "stub": ""
    },
    "sstumor": {
        "name_process": "sstumor",
        "string_process": "\nprocess sstumor {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$pid/somatic\", mode: 'copy'\n  input:\n  set pid,tid,nid,file(tumor),file(normal),file(tidx),file(nidx) from ssbam\n    \n  output:\n  set pid, file(\"${pid}.sssom.vcf.gz\") into ssvcf\n  set pid,file(\"${pid}.sssom.annot.vcf.gz\") into ssannot\n  set pid,file(\"${pid}.sssom.ori.vcf.gz\") into ssori\n\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/variants/somatic_vc.sh -r $index_path -p $pid -x $tid -y $nid -n $normal -t $tumor -a speedseq\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${pid}.sssom -v ${pid}.sssom.vcf.gz\n  mv ${pid}.sssom.vcf.gz ${pid}.sssom.ori.vcf.gz\n  mv ${pid}.sssom.norm.vcf.gz ${pid}.sssom.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${pid}.sssom -r $index_path -v ${pid}.sssom.vcf.gz\n\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/variants/somatic_vc.sh -r $index_path -p $pid -x $tid -y $nid -n $normal -t $tumor -a speedseq\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${pid}.sssom -v ${pid}.sssom.vcf.gz\n  mv ${pid}.sssom.vcf.gz ${pid}.sssom.ori.vcf.gz\n  mv ${pid}.sssom.norm.vcf.gz ${pid}.sssom.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${pid}.sssom -r $index_path -v ${pid}.sssom.vcf.gz\n\n  \"\"\"",
        "nb_lignes_script": 7,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "ssbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ssvcf",
            "ssannot",
            "ssori"
        ],
        "nb_outputs": 3,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$pid/somatic\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "mutect": {
        "name_process": "mutect",
        "string_process": "\nprocess mutect {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$pid/somatic\", mode: 'copy'\n\n  input:\n  set pid,tid,nid,file(tumor),file(normal),file(tidx),file(nidx) from mutectbam\n\n  output:\n  set pid,file(\"${pid}.mutect.vcf.gz\") into mutectvcf\n  set pid,file(\"${pid}.mutect.ori.vcf.gz\") into mutectori\n  set pid,file(\"${pid}.mutect.annot.vcf.gz\") into mutectannot\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/variants/somatic_vc.sh -r $index_path -p $pid -x $tid -y $nid -n $normal -t $tumor -a mutect2\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${pid}.mutect -v ${pid}.mutect.vcf.gz\n  mv ${pid}.mutect.vcf.gz ${pid}.mutect.ori.vcf.gz\n  mv ${pid}.mutect.norm.vcf.gz ${pid}.mutect.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${pid}.mutect -r $index_path -v ${pid}.mutect.vcf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 19,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/variants/somatic_vc.sh -r $index_path -p $pid -x $tid -y $nid -n $normal -t $tumor -a mutect2\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${pid}.mutect -v ${pid}.mutect.vcf.gz\n  mv ${pid}.mutect.vcf.gz ${pid}.mutect.ori.vcf.gz\n  mv ${pid}.mutect.norm.vcf.gz ${pid}.mutect.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${pid}.mutect -r $index_path -v ${pid}.mutect.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "mutectbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "mutectvcf",
            "mutectori",
            "mutectannot"
        ],
        "nb_outputs": 3,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$pid/somatic\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "varscan": {
        "name_process": "varscan",
        "string_process": "\nprocess varscan {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$pid/somatic\", mode: 'copy'\n  input:\n  set pid,tid,nid,file(tumor),file(normal),file(tidx),file(nidx) from vscanbam\n  output:\n  set pid,file(\"${pid}.varscan.vcf.gz\") into varscanvcf\n  set pid,file(\"${pid}.varscan.ori.vcf.gz\") into varscanori\n  set pid,file(\"${pid}.varscan.annot.vcf.gz\") into varscannot\n  set pid,file(\"${pid}.vscancnv.copynumber.txt\") into varscancnv\n  script:\n  \"\"\"\n  source /etc/profile.d/modules.sh\n  bash $baseDir/process_scripts/variants/somatic_vc.sh -r $index_path -p $pid -x $tid -y $nid -n $normal -t $tumor -a varscan\n  mv vscancnv.copynumber ${pid}.vscancnv.copynumber.txt\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${pid}.varscan -v ${pid}.varscan.vcf.gz\n  mv ${pid}.varscan.vcf.gz ${pid}.varscan.ori.vcf.gz\n  mv ${pid}.varscan.norm.vcf.gz ${pid}.varscan.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${pid}.varscan -r $index_path -v ${pid}.varscan.vcf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 20,
        "string_script": "  \"\"\"\n  source /etc/profile.d/modules.sh\n  bash $baseDir/process_scripts/variants/somatic_vc.sh -r $index_path -p $pid -x $tid -y $nid -n $normal -t $tumor -a varscan\n  mv vscancnv.copynumber ${pid}.vscancnv.copynumber.txt\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${pid}.varscan -v ${pid}.varscan.vcf.gz\n  mv ${pid}.varscan.vcf.gz ${pid}.varscan.ori.vcf.gz\n  mv ${pid}.varscan.norm.vcf.gz ${pid}.varscan.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${pid}.varscan -r $index_path -v ${pid}.varscan.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 8,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "vscanbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "varscanvcf",
            "varscanori",
            "varscannot",
            "varscancnv"
        ],
        "nb_outputs": 4,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$pid/somatic\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "shimmer": {
        "name_process": "shimmer",
        "string_process": "\nprocess shimmer {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$pid/somatic\", mode: 'copy'\n  input:\n  set pid,tid,nid,file(tumor),file(normal),file(tidx),file(nidx) from shimmerbam\n  output:\n  set pid, file(\"${pid}.shimmer.vcf.gz\") into shimmervcf\n  set pid, file(\"${pid}.shimmer.vcf.gz\") into shimmerori\n  set pid, file(\"${pid}.shimmer.vcf.gz\") into shimmerannot\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/variants/somatic_vc.sh -r $index_path -p $pid -x $tid -y $nid -n $normal -t $tumor -a shimmer\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${pid}.shimmer -v ${pid}.shimmer.vcf.gz\n  mv ${pid}.shimmer.vcf.gz ${pid}.shimmer.ori.vcf.gz\n  mv ${pid}.shimmer.norm.vcf.gz ${pid}.shimmer.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${pid}.shimmer -r $index_path -v ${pid}.shimmer.vcf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/variants/somatic_vc.sh -r $index_path -p $pid -x $tid -y $nid -n $normal -t $tumor -a shimmer\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${pid}.shimmer -v ${pid}.shimmer.vcf.gz\n  mv ${pid}.shimmer.vcf.gz ${pid}.shimmer.ori.vcf.gz\n  mv ${pid}.shimmer.norm.vcf.gz ${pid}.shimmer.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${pid}.shimmer -r $index_path -v ${pid}.shimmer.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "shimmerbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "shimmervcf",
            "shimmerori",
            "shimmerannot"
        ],
        "nb_outputs": 3,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$pid/somatic\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "virmid": {
        "name_process": "virmid",
        "string_process": "\nprocess virmid {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$pid/somatic\", mode: 'copy'\n  input:\n  set pid,tid,nid,file(tumor),file(normal),file(tidx),file(nidx) from virmidbam\n  output:\n  set pid, file(\"${pid}.virmid.vcf.gz\") into virmidvcf\n  set pid, file(\"${pid}.virmid.annot.vcf.gz\") into virmidannot\n  set pid, file(\"${pid}.virmid.ori.vcf.gz\") into virmidori\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/variants/somatic_vc.sh -r $index_path -p $pid -x $tid -y $nid -n $normal -t $tumor -a virmid\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${pid}.virmid -v ${pid}.virmid.vcf.gz\n  mv ${pid}.virmid.vcf.gz ${pid}.virmid.ori.vcf.gz\n  mv ${pid}.virmid.norm.vcf.gz ${pid}.virmid.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${pid}.virmid -r $index_path -v ${pid}.virmid.vcf.gz\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/variants/somatic_vc.sh -r $index_path -p $pid -x $tid -y $nid -n $normal -t $tumor -a virmid\n  bash $baseDir/process_scripts/variants/norm_annot.sh -r $index_path -p ${pid}.virmid -v ${pid}.virmid.vcf.gz\n  mv ${pid}.virmid.vcf.gz ${pid}.virmid.ori.vcf.gz\n  mv ${pid}.virmid.norm.vcf.gz ${pid}.virmid.vcf.gz\n  bash $baseDir/process_scripts/variants/annotvcf.sh -p ${pid}.virmid -r $index_path -v ${pid}.virmid.vcf.gz\n  \"\"\"",
        "nb_lignes_script": 6,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "virmidbam"
        ],
        "nb_inputs": 1,
        "outputs": [
            "virmidvcf",
            "virmidannot",
            "virmidori"
        ],
        "nb_outputs": 3,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$pid/somatic\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "starfusion": {
        "name_process": "starfusion",
        "string_process": "\nprocess starfusion {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'\n  input:\n  set subjid,pair_id, file(fq1), file(fq2) from fusionfq\n  output:\n  file(\"${pair_id}*txt\") into fusionout\n  when:\n  params.fusion == 'detect' && params.pairs == 'pe'\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/alignment/starfusion.sh -p ${pair_id} -r ${index_path} -a ${fq1} -b ${fq2} -m trinity\n  \"\"\"\n}",
        "nb_lignes_process": 13,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/alignment/starfusion.sh -p ${pair_id} -r ${index_path} -a ${fq1} -b ${fq2} -m trinity\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "fusionfq"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fusionout"
        ],
        "nb_outputs": 1,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'"
        ],
        "when": "params.fusion == 'detect' && params.pairs == 'pe'",
        "stub": ""
    },
    "bamct": {
        "name_process": "bamct",
        "string_process": "\nprocess bamct {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'\n  input:\n  set subjid,pair_id, file(rbam) from ctbams\n  output:\n  file(\"${pair_id}.bamreadct.txt\") into ctreads\n  when:\n  params.bamct == \"detect\"\n  script:\n  \"\"\"\n  source /etc/profile.d/modules.sh\n  module load samtools/1.6\n  samtools index $rbam\n  ${index_path}/../seqprg/bam-readcount/bin/bam-readcount -w 0 -q 0 -b 25 -f ${index_path}/hisat_genome.fa $rbam > ${pair_id}.bamreadct.txt\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "  \"\"\"\n  source /etc/profile.d/modules.sh\n  module load samtools/1.6\n  samtools index $rbam\n  ${index_path}/../seqprg/bam-readcount/bin/bam-readcount -w 0 -q 0 -b 25 -f ${index_path}/hisat_genome.fa $rbam > ${pair_id}.bamreadct.txt\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [
            "SAMtools"
        ],
        "tools_url": [
            "https://bio.tools/samtools"
        ],
        "tools_dico": [
            {
                "name": "SAMtools",
                "uri": "https://bio.tools/samtools",
                "topic": [
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "Sequencing"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "Rare diseases"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequence analysis"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0102",
                            "term": "Mapping"
                        }
                    ],
                    [
                        {
                            "uri": "http://edamontology.org/topic_3168",
                            "term": "DNA-Seq"
                        },
                        {
                            "uri": "http://edamontology.org/topic_3325",
                            "term": "https://en.wikipedia.org/wiki/Rare_disease"
                        },
                        {
                            "uri": "http://edamontology.org/topic_0080",
                            "term": "Sequences"
                        }
                    ]
                ],
                "function": [
                    {
                        "operation": [
                            [
                                {
                                    "uri": "http://edamontology.org/operation_3096",
                                    "term": "Editing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Parsing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Indexing"
                                }
                            ],
                            [
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Data visualisation"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0337",
                                    "term": "Rendering"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Data loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_1812",
                                    "term": "Loading"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File format conversion"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "File formatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0335",
                                    "term": "Reformatting"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Data indexing"
                                },
                                {
                                    "uri": "http://edamontology.org/operation_0227",
                                    "term": "Database indexing"
                                }
                            ]
                        ],
                        "input": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ],
                        "output": [
                            {
                                "uri": "http://edamontology.org/data_0924",
                                "term": "Sequence trace"
                            }
                        ]
                    }
                ],
                "description": "A software package with various utilities for processing alignments in the SAM format, including variant calling and alignment viewing.",
                "homepage": "http://www.htslib.org/"
            }
        ],
        "inputs": [
            "ctbams"
        ],
        "nb_inputs": 1,
        "outputs": [
            "ctreads"
        ],
        "nb_outputs": 1,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'"
        ],
        "when": "params.bamct == \"detect\"",
        "stub": ""
    },
    "alignqc": {
        "name_process": "alignqc",
        "string_process": "\nprocess alignqc {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'\n\n  input:\n  set subjid,pair_id, file(bam), file(hsout) from aligned2\n  \n  output:\n  set file(\"${pair_id}_fastqc.zip\"),file(\"${pair_id}_fastqc.html\") into fastqc\n  file(\"${pair_id}.sequence.stats.txt\") into alignstats\n  script:\n  \"\"\"\n  source /etc/profile.d/modules.sh\n  module load git/gcc/v2.12.2\n  bash $baseDir/process_scripts/alignment/bamqc.sh -p ${pair_id} -b ${bam} -n rna\n  perl $baseDir/scripts/sequenceqc_rnaseq.pl -r ${index_path} *.flagstat.txt\n  \"\"\"\n}",
        "nb_lignes_process": 17,
        "string_script": "  \"\"\"\n  source /etc/profile.d/modules.sh\n  module load git/gcc/v2.12.2\n  bash $baseDir/process_scripts/alignment/bamqc.sh -p ${pair_id} -b ${bam} -n rna\n  perl $baseDir/scripts/sequenceqc_rnaseq.pl -r ${index_path} *.flagstat.txt\n  \"\"\"",
        "nb_lignes_script": 5,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aligned2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "fastqc",
            "alignstats"
        ],
        "nb_outputs": 2,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "markdups": {
        "name_process": "markdups",
        "string_process": "\nprocess markdups {\n                                                              \n\n  input:\n  set subjid,pair_id, file(sbam) from aligned\n  output:\n  set subjid,pair_id, file(\"${pair_id}.dedup.bam\") into deduped1\n  set subjid,pair_id, file(\"${pair_id}.dedup.bam\") into deduped2\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/alignment/markdups.sh -a $params.markdups -b $sbam -p $pair_id\n  \"\"\"\n}",
        "nb_lignes_process": 12,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/alignment/markdups.sh -a $params.markdups -b $sbam -p $pair_id\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "aligned"
        ],
        "nb_inputs": 1,
        "outputs": [
            "deduped1",
            "deduped2"
        ],
        "nb_outputs": 2,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [],
        "when": "",
        "stub": ""
    },
    "geneabund": {
        "name_process": "geneabund",
        "string_process": "\nprocess geneabund {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'\n  input:\n  set subjid,pair_id, file(sbam) from deduped1\n  file gtf_file\n  output:\n  file(\"${pair_id}.cts\")  into counts\n  file(\"${pair_id}_stringtie\") into strcts\n  file(\"${pair_id}.fpkm.txt\") into fpkm\n  file('*cbioportal.txt')\n  \"\"\"\n  source /etc/profile.d/modules.sh\n  bash $baseDir/process_scripts/diff_exp/geneabundance.sh -s $params.stranded -g ${gtf_file} -p ${pair_id} -b ${sbam}\n  perl $baseDir/process_scripts/genect_rnaseq/cBioPortal_documents.pl -p $pair_id -l ${pair_id}.cts -f ${pair_id}.fpkm.txt\n  \"\"\"\n}",
        "nb_lignes_process": 16,
        "string_script": "\"\"\"\n  source /etc/profile.d/modules.sh\n  bash $baseDir/process_scripts/diff_exp/geneabundance.sh -s $params.stranded -g ${gtf_file} -p ${pair_id} -b ${sbam}\n  perl $baseDir/process_scripts/genect_rnaseq/cBioPortal_documents.pl -p $pair_id -l ${pair_id}.cts -f ${pair_id}.fpkm.txt\n  \"\"\"",
        "nb_lignes_script": 4,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "deduped1",
            "gtf_file"
        ],
        "nb_inputs": 2,
        "outputs": [
            "counts",
            "strcts",
            "fpkm"
        ],
        "nb_outputs": 3,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/$subjid/$pair_id\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    },
    "gatkbam": {
        "name_process": "gatkbam",
        "string_process": "\nprocess gatkbam {\n  errorStrategy 'ignore'\n  publishDir \"$params.output/\", mode: 'copy'\n\n  input:\n  set subjid,pair_id, file(rbam) from deduped2\n\n  output:\n  set file(\"${pair_id}.final.bam\"),file(\"${pair_id}.final.bai\") into gatkbam\n\n  script:\n  \"\"\"\n  bash $baseDir/process_scripts/variants/gatkrunner.sh -a gatkbam_rna -b $rbam -r ${index_path}/hisat_index -p $pair_id\n  \"\"\"\n}",
        "nb_lignes_process": 14,
        "string_script": "  \"\"\"\n  bash $baseDir/process_scripts/variants/gatkrunner.sh -a gatkbam_rna -b $rbam -r ${index_path}/hisat_index -p $pair_id\n  \"\"\"",
        "nb_lignes_script": 2,
        "language_script": "bash",
        "tools": [],
        "tools_url": [],
        "tools_dico": [],
        "inputs": [
            "deduped2"
        ],
        "nb_inputs": 1,
        "outputs": [
            "gatkbam"
        ],
        "nb_outputs": 1,
        "name_workflow": "GoalConsortium__goal_misc",
        "directive": [
            "errorStrategy 'ignore'",
            "publishDir \"$params.output/\", mode: 'copy'"
        ],
        "when": "",
        "stub": ""
    }
}